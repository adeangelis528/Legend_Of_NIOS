
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00012324 memsz 0x00012324 flags r-x
    LOAD off    0x00013344 vaddr 0x10012344 paddr 0x10013e30 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x0001591c vaddr 0x1001591c paddr 0x1001591c align 2**12
         filesz 0x00000000 memsz 0x00000174 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000116f4  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a94  100118b0  100118b0  000128b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10012344  10013e30  00013344  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000174  1001591c  1001591c  0001591c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014e30  2**0
                  CONTENTS
  7 .sdram        00000000  10015a90  10015a90  00014e30  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014e30  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d88  00000000  00000000  00014e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002424e  00000000  00000000  00015be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009272  00000000  00000000  00039e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b4d5  00000000  00000000  000430a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000239c  00000000  00000000  0004e578  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003468  00000000  00000000  00050914  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016ea9  00000000  00000000  00053d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006ac28  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013a8  00000000  00000000  0006ac68  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006f441  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006f444  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006f450  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006f451  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006f452  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006f456  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006f45a  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006f45e  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006f469  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006f474  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006f47f  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000046  00000000  00000000  0006f48a  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0009dbd3  00000000  00000000  0006f4d0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
100118b0 l    d  .rodata	00000000 .rodata
10012344 l    d  .rwdata	00000000 .rwdata
1001591c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10015a90 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 enemyController.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
1001591c l     O .bss	00000002 ctl_reg.3319
1001591e l     O .bss	00000002 no_device.3320
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1001208a l     O .rodata	00000010 zeroes.4181
1001209a l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10004a18 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100065c0 l     F .text	00000008 __fp_lock
100065c8 l     F .text	00000008 __fp_unlock
100065dc l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10012344 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10012788 l     O .rwdata	00000020 lc_ctype_charset
10012768 l     O .rwdata	00000020 lc_message_charset
100127a8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
100120cc l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10009b0c l     F .text	000000fc __sprint_r.part.0
10012200 l     O .rodata	00000010 blanks.4125
100121f0 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000c71c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f06c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000f194 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000f1c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000f2c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000f3c4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000f4a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000f68c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10013e20 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000f940 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000fa90 l     F .text	00000038 alt_dev_reg
10012d90 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000fd6c l     F .text	00000204 altera_avalon_jtag_uart_irq
1000ff70 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10010844 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10010cdc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10010e34 l     F .text	00000050 alt_get_errno
10010e84 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1000914c g     F .text	00000074 _mprec_log10
10009238 g     F .text	0000008c __any_on
1000b538 g     F .text	00000054 _isatty_r
100120d8 g     O .rodata	00000028 __mprec_tinytens
1000f5d4 g     F .text	00000078 alt_main
100025e8 g     F .text	000000b8 _puts_r
10015990 g     O .bss	00000100 alt_irq
1000b58c g     F .text	0000005c _lseek_r
10013e30 g       *ABS*	00000000 __flash_rwdata_start
1000da8c g     F .text	00000084 .hidden __eqdf2
10015a90 g       *ABS*	00000000 __alt_heap_start
100025ac g     F .text	0000003c printf
1000b7b4 g     F .text	0000009c _wcrtomb_r
10009a04 g     F .text	0000005c __sseek
10006924 g     F .text	00000010 __sinit
1000b644 g     F .text	00000154 __swbuf_r
1000739c g     F .text	0000007c _setlocale_r
1000677c g     F .text	00000078 __sfmoreglue
1000f66c g     F .text	00000020 __malloc_unlock
10002484 g     F .text	00000080 UsbGetRetryCnt
10007ffc g     F .text	0000015c memmove
100005d8 g     F .text	0000004c IO_init
1000690c g     F .text	00000018 _cleanup
1000827c g     F .text	000000a8 _Balloc
1000db10 g     F .text	000000e0 .hidden __gtdf2
10011274 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000b4e0 g     F .text	00000058 _fstat_r
10015938 g     O .bss	00000004 errno
10009980 g     F .text	00000008 __seofread
10015940 g     O .bss	00000004 alt_argv
1001bdf0 g       *ABS*	00000000 _gp
1000f910 g     F .text	00000030 usleep
10012c10 g     O .rwdata	00000180 alt_fd_list
10011294 g     F .text	00000090 alt_find_dev
10007ec4 g     F .text	00000138 memcpy
100065d0 g     F .text	0000000c _cleanup_r
1000ee94 g     F .text	000000d0 .hidden __floatsidf
10010dbc g     F .text	00000078 alt_io_redirect
1000dbf0 g     F .text	000000e0 .hidden __ltdf2
100118b0 g       *ABS*	00000000 __DTOR_END__
100026a0 g     F .text	00000014 puts
10009864 g     F .text	00000074 __fpclassifyd
100090a8 g     F .text	000000a4 __ratio
1000b044 g     F .text	00000024 __vfiprintf_internal
1001016c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10002580 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000c838 g     F .text	00000008 .hidden __udivsi3
1000f318 g     F .text	000000ac isatty
10012128 g     O .rodata	000000c8 __mprec_tens
10007418 g     F .text	0000000c __locale_charset
10015934 g     O .bss	00000004 __malloc_top_pad
10001b24 g     F .text	00000264 UsbGetConfigDesc2
10013df8 g     O .rwdata	00000004 __mb_cur_max
10007448 g     F .text	0000000c _localeconv_r
100086a4 g     F .text	0000003c __i2b
10006d88 g     F .text	000004a4 __sfvwrite_r
100098d8 g     F .text	00000054 _sbrk_r
1000b5e8 g     F .text	0000005c _read_r
10013e18 g     O .rwdata	00000004 alt_max_fd
1000b1f0 g     F .text	00000100 _fclose_r
10006590 g     F .text	00000030 fflush
10015930 g     O .bss	00000004 __malloc_max_sbrked_mem
1000c870 g     F .text	0000089c .hidden __adddf3
10008e50 g     F .text	0000011c __b2d
1000c100 g     F .text	0000061c .hidden __umoddi3
1000f4f8 g     F .text	000000dc lseek
10013df0 g     O .rwdata	00000004 _global_impure_ptr
100092c4 g     F .text	000005a0 _realloc_r
10015a90 g       *ABS*	00000000 __bss_end
10010bec g     F .text	000000f0 alt_iic_isr_register
10011170 g     F .text	00000104 alt_tick
1000bac0 g     F .text	00000640 .hidden __udivdi3
1000b304 g     F .text	00000184 _fputwc_r
10012100 g     O .rodata	00000028 __mprec_bigtens
10008488 g     F .text	00000104 __s2b
1000ef64 g     F .text	000000a4 .hidden __floatunsidf
10008bf8 g     F .text	00000060 __mcmp
10001584 g     F .text	000000fc UsbSetAddress
10006944 g     F .text	00000018 __fp_lock_all
10010ba0 g     F .text	0000004c alt_ic_irq_enabled
100110d8 g     F .text	00000098 alt_alarm_stop
10015948 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
10012be8 g     O .rwdata	00000028 alt_dev_null
10010828 g     F .text	0000001c alt_dcache_flush_all
1000858c g     F .text	00000068 __hi0bits
1000067c g     F .text	00000054 IO_read
1000ee0c g     F .text	00000088 .hidden __fixdfsi
10013e30 g       *ABS*	00000000 __ram_rwdata_end
10013e10 g     O .rwdata	00000008 alt_dev_list
1000f990 g     F .text	00000100 write
10012344 g       *ABS*	00000000 __ram_rodata_end
1000f210 g     F .text	000000b8 fstat
1000dbf0 g     F .text	000000e0 .hidden __ledf2
10002504 g     F .text	0000007c UsbPrintMem
10008970 g     F .text	00000140 __pow5mult
10009c20 g     F .text	00001424 ___vfiprintf_internal_r
10015928 g     O .bss	00000004 __nlocale_changed
1000c840 g     F .text	00000008 .hidden __umodsi3
10015a90 g       *ABS*	00000000 end
1000fca8 g     F .text	000000c4 altera_avalon_jtag_uart_init
100118b0 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000f008 g     F .text	00000064 .hidden __clzsi2
10010378 g     F .text	00000218 altera_avalon_jtag_uart_write
10006934 g     F .text	00000004 __sfp_lock_acquire
10007ddc g     F .text	000000e8 memchr
100027c8 g     F .text	000020fc ___vfprintf_internal_r
10001e84 g     F .text	000000fc UsbClassRequest
10006a98 g     F .text	000002f0 _free_r
10007424 g     F .text	00000010 __locale_mb_cur_max
100116e8 g     F .text	00000194 __call_exitprocs
10015924 g     O .bss	00000004 __mlocale_changed
10013dfc g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
1001594c g     O .bss	00000004 _alt_tick_rate
100026cc g     F .text	00000064 rand
10008ab0 g     F .text	00000148 __lshift
10015950 g     O .bss	00000004 _alt_nticks
1000f6dc g     F .text	00000104 read
1000fafc g     F .text	00000048 alt_sys_init
100115d4 g     F .text	00000114 __register_exitproc
100086e0 g     F .text	00000290 __multiply
10010018 g     F .text	00000068 altera_avalon_jtag_uart_close
1000c848 g     F .text	00000028 .hidden __mulsi3
10012344 g       *ABS*	00000000 __ram_rwdata_start
100118b0 g       *ABS*	00000000 __ram_rodata_start
10015968 g     O .bss	00000028 __malloc_current_mallinfo
10008f6c g     F .text	0000013c __d2b
10001680 g     F .text	00000144 UsbGetDeviceDesc1
1000fb44 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011438 g     F .text	000000d4 alt_get_fd
100106d0 g     F .text	00000158 alt_busy_sleep
1000b0c4 g     F .text	00000054 _close_r
10011558 g     F .text	0000007c memcmp
1000fc04 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10015a90 g       *ABS*	00000000 __alt_stack_base
1000fc54 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100048e8 g     F .text	00000130 __swsetup_r
1000d10c g     F .text	00000980 .hidden __divdf3
100067f4 g     F .text	00000118 __sfp
100091c0 g     F .text	00000078 __copybits
100127e0 g     O .rwdata	00000408 __malloc_av_
10006940 g     F .text	00000004 __sinit_lock_release
1000dcd0 g     F .text	0000086c .hidden __muldf3
1000992c g     F .text	00000054 __sread
10002400 g     F .text	00000084 UsbWaitTDListDone
10011324 g     F .text	00000114 alt_find_file
10010894 g     F .text	000000a4 alt_dev_llist_insert
1000f64c g     F .text	00000020 __malloc_lock
1000f860 g     F .text	000000b0 sbrk
10006368 g     F .text	00000228 _fflush_r
1000b118 g     F .text	000000d8 _calloc_r
1001591c g       *ABS*	00000000 __bss_start
10015954 g     O .bss	00000014 enemyCounter
10008158 g     F .text	00000124 memset
100006d0 g     F .text	00000d5c main
10015944 g     O .bss	00000004 alt_envp
1001592c g     O .bss	00000004 __malloc_max_total_mem
1000fba4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10001d88 g     F .text	000000fc UsbSetConfig
1000b798 g     F .text	0000001c __swbuf
100026b4 g     F .text	00000018 srand
10009a60 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000b2f0 g     F .text	00000014 fclose
10004c40 g     F .text	00001728 _dtoa_r
10007634 g     F .text	000007a8 _malloc_r
1000b928 g     F .text	00000030 __ascii_wctomb
10013e1c g     O .rwdata	00000004 alt_errno
1000722c g     F .text	000000b8 _fwalk
1000c788 g     F .text	00000054 .hidden __divsi3
10006974 g     F .text	00000124 _malloc_trim_r
10001f80 g     F .text	00000144 UsbGetHidDesc
100118b0 g       *ABS*	00000000 __CTOR_END__
10009a68 g     F .text	000000a4 strcmp
100118b0 g       *ABS*	00000000 __flash_rodata_start
100118b0 g       *ABS*	00000000 __DTOR_LIST__
1000da8c g     F .text	00000084 .hidden __nedf2
10001480 g     F .text	00000044 UsbRead
1000fac8 g     F .text	00000034 alt_irq_init
1000f7e0 g     F .text	00000080 alt_release_fd
10012210 g     O .rodata	00000100 .hidden __clz_tab
10015920 g     O .bss	00000004 _PathLocale
1001150c g     F .text	00000014 atexit
1000b068 g     F .text	0000005c _write_r
10007454 g     F .text	0000001c setlocale
10013df4 g     O .rwdata	00000004 _impure_ptr
1001593c g     O .bss	00000004 alt_argc
10010994 g     F .text	0000005c _do_dtors
10007440 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10008df0 g     F .text	00000060 __ulp
1000695c g     F .text	00000018 __fp_unlock_all
10013e08 g     O .rwdata	00000008 alt_fs_list
100020c4 g     F .text	0000033c UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10007470 g     F .text	0000000c localeconv
10010a0c g     F .text	00000050 alt_ic_isr_register
10013e30 g       *ABS*	00000000 _edata
10015a90 g       *ABS*	00000000 _end
1000142c g     F .text	00000054 UsbWrite
100001bc g       *ABS*	00000000 __ram_exceptions_end
10010080 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10010afc g     F .text	000000a4 alt_ic_irq_disable
10009988 g     F .text	0000007c __swrite
10013e00 g     O .rwdata	00000004 __malloc_trim_threshold
10007434 g     F .text	0000000c __locale_msgcharset
10011520 g     F .text	00000038 exit
100072e4 g     F .text	000000b8 _fwalk_reent
10008c58 g     F .text	00000198 __mdiff
1000c7dc g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10006938 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000624 g     F .text	00000058 IO_write
1001187c g     F .text	00000034 _exit
10010590 g     F .text	00000140 alt_alarm_start
1000b9b4 g     F .text	0000010c .hidden __muldi3
1000747c g     F .text	000001b8 __smakebuf_r
10002730 g     F .text	00000098 strlen
10010f78 g     F .text	00000160 open
1000db10 g     F .text	000000e0 .hidden __gedf2
10013e04 g     O .rwdata	00000004 __wctomb
10009c08 g     F .text	00000018 __sprint_r
100109f0 g     F .text	0000001c alt_icache_flush_all
10013e24 g     O .rwdata	00000004 alt_priority_mask
10010a5c g     F .text	000000a0 alt_ic_irq_enable
100048c4 g     F .text	00000024 __vfprintf_internal
1000b958 g     F .text	0000005c _wctomb_r
1000e53c g     F .text	000008d0 .hidden __subdf3
100085f4 g     F .text	000000b0 __lo0bits
10001998 g     F .text	0000018c UsbGetConfigDesc1
10013e28 g     O .rwdata	00000008 alt_alarm_list
10010938 g     F .text	0000005c _do_ctors
100014c4 g     F .text	000000c0 UsbSoftReset
1000b850 g     F .text	000000d8 wcrtomb
1000f0bc g     F .text	000000d8 close
100017c4 g     F .text	000001d4 UsbGetDeviceDesc2
1000f428 g     F .text	00000080 alt_load
100001f8 g     F .text	000003e0 updateEnemies
1000b488 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
1000693c g     F .text	00000004 __sinit_lock_acquire
1000834c g     F .text	0000013c __multadd
10008324 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00840074 	movhi	r2,4097
10000130:	10966404 	addi	r2,r2,22928
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	00840074 	movhi	r2,4097
10000148:	10966404 	addi	r2,r2,22928
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6af7c14 	ori	gp,gp,48624
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	10964714 	ori	r2,r2,22812

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18d6a414 	ori	r3,r3,23184

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	000f4280 	call	1000f428 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	000f5d40 	call	1000f5d4 <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <updateEnemies>:

int enemyCounter[5] = {0,0,0,0,0};


void updateEnemies()
{
100001f8:	defff604 	addi	sp,sp,-40
100001fc:	dfc00915 	stw	ra,36(sp)
10000200:	df000815 	stw	fp,32(sp)
10000204:	df000804 	addi	fp,sp,32

	*select_addr = 0;
10000208:	00802004 	movi	r2,128
1000020c:	10000015 	stw	zero,0(r2)
	*entity_read_addr = 1;
10000210:	00801c04 	movi	r2,112
10000214:	00c00044 	movi	r3,1
10000218:	10c00015 	stw	r3,0(r2)
	int player_x = *entity_x_addr;
1000021c:	00801004 	movi	r2,64
10000220:	10800017 	ldw	r2,0(r2)
10000224:	e0bff915 	stw	r2,-28(fp)
	int player_y = *entity_y_addr;
10000228:	00800c04 	movi	r2,48
1000022c:	10800017 	ldw	r2,0(r2)
10000230:	e0bffa15 	stw	r2,-24(fp)
	*entity_read_addr = 0;
10000234:	00801c04 	movi	r2,112
10000238:	10000015 	stw	zero,0(r2)

	int i = 0;
1000023c:	e03ff815 	stw	zero,-32(fp)
	for(i = 1; i <= 5; i++)
10000240:	00800044 	movi	r2,1
10000244:	e0bff815 	stw	r2,-32(fp)
10000248:	0000db06 	br	100005b8 <updateEnemies+0x3c0>
	{
		*select_addr = i;
1000024c:	00802004 	movi	r2,128
10000250:	e0fff817 	ldw	r3,-32(fp)
10000254:	10c00015 	stw	r3,0(r2)
		*entity_read_addr = 1;
10000258:	00801c04 	movi	r2,112
1000025c:	00c00044 	movi	r3,1
10000260:	10c00015 	stw	r3,0(r2)
		int enemy_x = *entity_x_addr;
10000264:	00801004 	movi	r2,64
10000268:	10800017 	ldw	r2,0(r2)
1000026c:	e0bffb15 	stw	r2,-20(fp)
		int enemy_y = *entity_y_addr;
10000270:	00800c04 	movi	r2,48
10000274:	10800017 	ldw	r2,0(r2)
10000278:	e0bffc15 	stw	r2,-16(fp)
		int enemy_active = *entity_active_addr;
1000027c:	00800804 	movi	r2,32
10000280:	10800017 	ldw	r2,0(r2)
10000284:	e0bffd15 	stw	r2,-12(fp)
		int enemy_type = *entity_type_addr;
10000288:	00803c04 	movi	r2,240
1000028c:	10800017 	ldw	r2,0(r2)
10000290:	e0bffe15 	stw	r2,-8(fp)
		*entity_read_addr = 0;
10000294:	00801c04 	movi	r2,112
10000298:	10000015 	stw	zero,0(r2)
		if(enemy_active && enemy_type == 1)
1000029c:	e0bffd17 	ldw	r2,-12(fp)
100002a0:	10002e26 	beq	r2,zero,1000035c <updateEnemies+0x164>
100002a4:	e0bffe17 	ldw	r2,-8(fp)
100002a8:	10800058 	cmpnei	r2,r2,1
100002ac:	10002b1e 	bne	r2,zero,1000035c <updateEnemies+0x164>
		{
			if( enemyCounter[i-1] >= 3)
100002b0:	e0bff817 	ldw	r2,-32(fp)
100002b4:	10ffffc4 	addi	r3,r2,-1
100002b8:	00840074 	movhi	r2,4097
100002bc:	10965504 	addi	r2,r2,22868
100002c0:	18c7883a 	add	r3,r3,r3
100002c4:	18c7883a 	add	r3,r3,r3
100002c8:	10c5883a 	add	r2,r2,r3
100002cc:	10800017 	ldw	r2,0(r2)
100002d0:	108000d0 	cmplti	r2,r2,3
100002d4:	1000201e 	bne	r2,zero,10000358 <updateEnemies+0x160>
			{
				int dir = rand() % 4 + 1;
100002d8:	00026cc0 	call	100026cc <rand>
100002dc:	1007883a 	mov	r3,r2
100002e0:	00a00034 	movhi	r2,32768
100002e4:	108000c4 	addi	r2,r2,3
100002e8:	1884703a 	and	r2,r3,r2
100002ec:	1000040e 	bge	r2,zero,10000300 <updateEnemies+0x108>
100002f0:	10bfffc4 	addi	r2,r2,-1
100002f4:	00ffff04 	movi	r3,-4
100002f8:	10c4b03a 	or	r2,r2,r3
100002fc:	10800044 	addi	r2,r2,1
10000300:	10800044 	addi	r2,r2,1
10000304:	e0bfff15 	stw	r2,-4(fp)
				*entity_write_addr = 1;
10000308:	00801804 	movi	r2,96
1000030c:	00c00044 	movi	r3,1
10000310:	10c00015 	stw	r3,0(r2)
				*entity_dir_addr = dir;
10000314:	00801404 	movi	r2,80
10000318:	e0ffff17 	ldw	r3,-4(fp)
1000031c:	10c00015 	stw	r3,0(r2)
				*entity_write_addr = 0;
10000320:	00801804 	movi	r2,96
10000324:	10000015 	stw	zero,0(r2)
				enemyCounter[i-1] = 0;
10000328:	e0bff817 	ldw	r2,-32(fp)
1000032c:	10ffffc4 	addi	r3,r2,-1
10000330:	00840074 	movhi	r2,4097
10000334:	10965504 	addi	r2,r2,22868
10000338:	18c7883a 	add	r3,r3,r3
1000033c:	18c7883a 	add	r3,r3,r3
10000340:	10c5883a 	add	r2,r2,r3
10000344:	10000015 	stw	zero,0(r2)
				printf("\nEnemy direction changed");
10000348:	01040074 	movhi	r4,4097
1000034c:	21062c04 	addi	r4,r4,6320
10000350:	00025ac0 	call	100025ac <printf>
		int enemy_active = *entity_active_addr;
		int enemy_type = *entity_type_addr;
		*entity_read_addr = 0;
		if(enemy_active && enemy_type == 1)
		{
			if( enemyCounter[i-1] >= 3)
10000354:	00008606 	br	10000570 <updateEnemies+0x378>
10000358:	00008506 	br	10000570 <updateEnemies+0x378>
				*entity_write_addr = 0;
				enemyCounter[i-1] = 0;
				printf("\nEnemy direction changed");
			}
		}
		else if(enemy_active && enemy_type == 2)
1000035c:	e0bffd17 	ldw	r2,-12(fp)
10000360:	10004426 	beq	r2,zero,10000474 <updateEnemies+0x27c>
10000364:	e0bffe17 	ldw	r2,-8(fp)
10000368:	10800098 	cmpnei	r2,r2,2
1000036c:	1000411e 	bne	r2,zero,10000474 <updateEnemies+0x27c>
		{
			if(enemy_x-player_x < -16)
10000370:	e0fffb17 	ldw	r3,-20(fp)
10000374:	e0bff917 	ldw	r2,-28(fp)
10000378:	1885c83a 	sub	r2,r3,r2
1000037c:	10bffc08 	cmpgei	r2,r2,-16
10000380:	1000091e 	bne	r2,zero,100003a8 <updateEnemies+0x1b0>
			{
				*entity_write_addr = 1;
10000384:	00801804 	movi	r2,96
10000388:	00c00044 	movi	r3,1
1000038c:	10c00015 	stw	r3,0(r2)
				*entity_dir_addr = 2;
10000390:	00801404 	movi	r2,80
10000394:	00c00084 	movi	r3,2
10000398:	10c00015 	stw	r3,0(r2)
				*entity_write_addr = 0;
1000039c:	00801804 	movi	r2,96
100003a0:	10000015 	stw	zero,0(r2)
100003a4:	00003206 	br	10000470 <updateEnemies+0x278>
			}
			else if(enemy_x - player_x > 16)
100003a8:	e0fffb17 	ldw	r3,-20(fp)
100003ac:	e0bff917 	ldw	r2,-28(fp)
100003b0:	1885c83a 	sub	r2,r3,r2
100003b4:	10800450 	cmplti	r2,r2,17
100003b8:	1000091e 	bne	r2,zero,100003e0 <updateEnemies+0x1e8>
			{
				*entity_write_addr = 1;
100003bc:	00801804 	movi	r2,96
100003c0:	00c00044 	movi	r3,1
100003c4:	10c00015 	stw	r3,0(r2)
				*entity_dir_addr = 1;
100003c8:	00801404 	movi	r2,80
100003cc:	00c00044 	movi	r3,1
100003d0:	10c00015 	stw	r3,0(r2)
				*entity_write_addr = 0;
100003d4:	00801804 	movi	r2,96
100003d8:	10000015 	stw	zero,0(r2)
100003dc:	00002406 	br	10000470 <updateEnemies+0x278>
			}
			else if(enemy_y - player_y < -16)
100003e0:	e0fffc17 	ldw	r3,-16(fp)
100003e4:	e0bffa17 	ldw	r2,-24(fp)
100003e8:	1885c83a 	sub	r2,r3,r2
100003ec:	10bffc08 	cmpgei	r2,r2,-16
100003f0:	1000091e 	bne	r2,zero,10000418 <updateEnemies+0x220>
			{
				*entity_write_addr = 1;
100003f4:	00801804 	movi	r2,96
100003f8:	00c00044 	movi	r3,1
100003fc:	10c00015 	stw	r3,0(r2)
				*entity_dir_addr = 3;
10000400:	00801404 	movi	r2,80
10000404:	00c000c4 	movi	r3,3
10000408:	10c00015 	stw	r3,0(r2)
				*entity_write_addr = 0;
1000040c:	00801804 	movi	r2,96
10000410:	10000015 	stw	zero,0(r2)
10000414:	00001606 	br	10000470 <updateEnemies+0x278>
			}
			else if(enemy_y - player_y > 16)
10000418:	e0fffc17 	ldw	r3,-16(fp)
1000041c:	e0bffa17 	ldw	r2,-24(fp)
10000420:	1885c83a 	sub	r2,r3,r2
10000424:	10800450 	cmplti	r2,r2,17
10000428:	1000091e 	bne	r2,zero,10000450 <updateEnemies+0x258>
			{
				*entity_write_addr = 1;
1000042c:	00801804 	movi	r2,96
10000430:	00c00044 	movi	r3,1
10000434:	10c00015 	stw	r3,0(r2)
				*entity_dir_addr = 4;
10000438:	00801404 	movi	r2,80
1000043c:	00c00104 	movi	r3,4
10000440:	10c00015 	stw	r3,0(r2)
				*entity_write_addr = 0;
10000444:	00801804 	movi	r2,96
10000448:	10000015 	stw	zero,0(r2)
1000044c:	00000806 	br	10000470 <updateEnemies+0x278>
			}
			else
			{
				*entity_write_addr = 1;
10000450:	00801804 	movi	r2,96
10000454:	00c00044 	movi	r3,1
10000458:	10c00015 	stw	r3,0(r2)
				*entity_dir_addr = 0;
1000045c:	00801404 	movi	r2,80
10000460:	10000015 	stw	zero,0(r2)
				*entity_write_addr = 0;
10000464:	00801804 	movi	r2,96
10000468:	10000015 	stw	zero,0(r2)
				printf("\nEnemy direction changed");
			}
		}
		else if(enemy_active && enemy_type == 2)
		{
			if(enemy_x-player_x < -16)
1000046c:	00004006 	br	10000570 <updateEnemies+0x378>
10000470:	00003f06 	br	10000570 <updateEnemies+0x378>
				*entity_write_addr = 1;
				*entity_dir_addr = 0;
				*entity_write_addr = 0;
			}
		}
		else if(enemy_active && enemy_type == 3)
10000474:	e0bffd17 	ldw	r2,-12(fp)
10000478:	10003d26 	beq	r2,zero,10000570 <updateEnemies+0x378>
1000047c:	e0bffe17 	ldw	r2,-8(fp)
10000480:	108000d8 	cmpnei	r2,r2,3
10000484:	10003a1e 	bne	r2,zero,10000570 <updateEnemies+0x378>
		{
			if( (((player_x + 32) > enemy_x) && (player_x < enemy_x)) || ((player_x < (enemy_x + 32)) && ((player_x +32) > (enemy_x + 32) )))
10000488:	e0bff917 	ldw	r2,-28(fp)
1000048c:	10800804 	addi	r2,r2,32
10000490:	e0fffb17 	ldw	r3,-20(fp)
10000494:	1880030e 	bge	r3,r2,100004a4 <updateEnemies+0x2ac>
10000498:	e0fff917 	ldw	r3,-28(fp)
1000049c:	e0bffb17 	ldw	r2,-20(fp)
100004a0:	18800916 	blt	r3,r2,100004c8 <updateEnemies+0x2d0>
100004a4:	e0bffb17 	ldw	r2,-20(fp)
100004a8:	10800804 	addi	r2,r2,32
100004ac:	e0fff917 	ldw	r3,-28(fp)
100004b0:	1880280e 	bge	r3,r2,10000554 <updateEnemies+0x35c>
100004b4:	e0bff917 	ldw	r2,-28(fp)
100004b8:	10800804 	addi	r2,r2,32
100004bc:	e0fffb17 	ldw	r3,-20(fp)
100004c0:	18c00804 	addi	r3,r3,32
100004c4:	1880230e 	bge	r3,r2,10000554 <updateEnemies+0x35c>
			{
				if(player_y > (enemy_y + 32))
100004c8:	e0bffc17 	ldw	r2,-16(fp)
100004cc:	10c00804 	addi	r3,r2,32
100004d0:	e0bffa17 	ldw	r2,-24(fp)
100004d4:	1880090e 	bge	r3,r2,100004fc <updateEnemies+0x304>
				{
					*entity_write_addr = 1;
100004d8:	00801804 	movi	r2,96
100004dc:	00c00044 	movi	r3,1
100004e0:	10c00015 	stw	r3,0(r2)
					*entity_dir_addr = 3;
100004e4:	00801404 	movi	r2,80
100004e8:	00c000c4 	movi	r3,3
100004ec:	10c00015 	stw	r3,0(r2)
					*entity_write_addr = 0;
100004f0:	00801804 	movi	r2,96
100004f4:	10000015 	stw	zero,0(r2)
100004f8:	00001506 	br	10000550 <updateEnemies+0x358>
				}
				else if(player_y < (enemy_y - 32))
100004fc:	e0bffc17 	ldw	r2,-16(fp)
10000500:	10bff804 	addi	r2,r2,-32
10000504:	e0fffa17 	ldw	r3,-24(fp)
10000508:	1880090e 	bge	r3,r2,10000530 <updateEnemies+0x338>
				{
					*entity_write_addr = 1;
1000050c:	00801804 	movi	r2,96
10000510:	00c00044 	movi	r3,1
10000514:	10c00015 	stw	r3,0(r2)
					*entity_dir_addr = 4;
10000518:	00801404 	movi	r2,80
1000051c:	00c00104 	movi	r3,4
10000520:	10c00015 	stw	r3,0(r2)
					*entity_write_addr = 0;
10000524:	00801804 	movi	r2,96
10000528:	10000015 	stw	zero,0(r2)
1000052c:	00000806 	br	10000550 <updateEnemies+0x358>
				}
				else
				{
					*entity_write_addr = 1;
10000530:	00801804 	movi	r2,96
10000534:	00c00044 	movi	r3,1
10000538:	10c00015 	stw	r3,0(r2)
					*entity_dir_addr = 0;
1000053c:	00801404 	movi	r2,80
10000540:	10000015 	stw	zero,0(r2)
					*entity_write_addr = 0;
10000544:	00801804 	movi	r2,96
10000548:	10000015 	stw	zero,0(r2)
		}
		else if(enemy_active && enemy_type == 3)
		{
			if( (((player_x + 32) > enemy_x) && (player_x < enemy_x)) || ((player_x < (enemy_x + 32)) && ((player_x +32) > (enemy_x + 32) )))
			{
				if(player_y > (enemy_y + 32))
1000054c:	00000806 	br	10000570 <updateEnemies+0x378>
10000550:	00000706 	br	10000570 <updateEnemies+0x378>
					*entity_write_addr = 0;
				}
			}
			else
			{
				*entity_write_addr = 1;
10000554:	00801804 	movi	r2,96
10000558:	00c00044 	movi	r3,1
1000055c:	10c00015 	stw	r3,0(r2)
				*entity_dir_addr = 0;
10000560:	00801404 	movi	r2,80
10000564:	10000015 	stw	zero,0(r2)
				*entity_write_addr = 0;
10000568:	00801804 	movi	r2,96
1000056c:	10000015 	stw	zero,0(r2)
			}
		}
		enemyCounter[i-1] ++;
10000570:	e0bff817 	ldw	r2,-32(fp)
10000574:	10bfffc4 	addi	r2,r2,-1
10000578:	00c40074 	movhi	r3,4097
1000057c:	18d65504 	addi	r3,r3,22868
10000580:	1089883a 	add	r4,r2,r2
10000584:	2109883a 	add	r4,r4,r4
10000588:	1907883a 	add	r3,r3,r4
1000058c:	18c00017 	ldw	r3,0(r3)
10000590:	19000044 	addi	r4,r3,1
10000594:	00c40074 	movhi	r3,4097
10000598:	18d65504 	addi	r3,r3,22868
1000059c:	1085883a 	add	r2,r2,r2
100005a0:	1085883a 	add	r2,r2,r2
100005a4:	1885883a 	add	r2,r3,r2
100005a8:	11000015 	stw	r4,0(r2)
	int player_x = *entity_x_addr;
	int player_y = *entity_y_addr;
	*entity_read_addr = 0;

	int i = 0;
	for(i = 1; i <= 5; i++)
100005ac:	e0bff817 	ldw	r2,-32(fp)
100005b0:	10800044 	addi	r2,r2,1
100005b4:	e0bff815 	stw	r2,-32(fp)
100005b8:	e0bff817 	ldw	r2,-32(fp)
100005bc:	10800190 	cmplti	r2,r2,6
100005c0:	103f221e 	bne	r2,zero,1000024c <__alt_data_end+0xf800024c>
			}
		}
		enemyCounter[i-1] ++;
	}

}
100005c4:	e037883a 	mov	sp,fp
100005c8:	dfc00117 	ldw	ra,4(sp)
100005cc:	df000017 	ldw	fp,0(sp)
100005d0:	dec00204 	addi	sp,sp,8
100005d4:	f800283a 	ret

100005d8 <IO_init>:
#define otg_hpi_cs			(volatile char*) 0x00d0 //OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*) OTG_HPI_W_BASE


void IO_init(void)
{
100005d8:	deffff04 	addi	sp,sp,-4
100005dc:	df000015 	stw	fp,0(sp)
100005e0:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 0;
100005e4:	00803404 	movi	r2,208
100005e8:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1;
100005ec:	00802804 	movi	r2,160
100005f0:	00c00044 	movi	r3,1
100005f4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
100005f8:	00802404 	movi	r2,144
100005fc:	00c00044 	movi	r3,1
10000600:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000604:	00803004 	movi	r2,192
10000608:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
1000060c:	00802c04 	movi	r2,176
10000610:	10000015 	stw	zero,0(r2)
}
10000614:	e037883a 	mov	sp,fp
10000618:	df000017 	ldw	fp,0(sp)
1000061c:	dec00104 	addi	sp,sp,4
10000620:	f800283a 	ret

10000624 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000624:	defffd04 	addi	sp,sp,-12
10000628:	df000215 	stw	fp,8(sp)
1000062c:	df000204 	addi	fp,sp,8
10000630:	2007883a 	mov	r3,r4
10000634:	2805883a 	mov	r2,r5
10000638:	e0fffe05 	stb	r3,-8(fp)
1000063c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10000640:	00803004 	movi	r2,192
10000644:	e0fffe03 	ldbu	r3,-8(fp)
10000648:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 0;
1000064c:	00802404 	movi	r2,144
10000650:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
10000654:	00802c04 	movi	r2,176
10000658:	e0ffff0b 	ldhu	r3,-4(fp)
1000065c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
10000660:	00802404 	movi	r2,144
10000664:	00c00044 	movi	r3,1
10000668:	10c00005 	stb	r3,0(r2)
}
1000066c:	e037883a 	mov	sp,fp
10000670:	df000017 	ldw	fp,0(sp)
10000674:	dec00104 	addi	sp,sp,4
10000678:	f800283a 	ret

1000067c <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
1000067c:	defffd04 	addi	sp,sp,-12
10000680:	df000215 	stw	fp,8(sp)
10000684:	df000204 	addi	fp,sp,8
10000688:	2005883a 	mov	r2,r4
1000068c:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10000690:	00803004 	movi	r2,192
10000694:	e0ffff03 	ldbu	r3,-4(fp)
10000698:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
1000069c:	00802804 	movi	r2,160
100006a0:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
100006a4:	00802c04 	movi	r2,176
100006a8:	10800017 	ldw	r2,0(r2)
100006ac:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
100006b0:	00802804 	movi	r2,160
100006b4:	00c00044 	movi	r3,1
100006b8:	10c00005 	stb	r3,0(r2)

	return temp;
100006bc:	e0bffe0b 	ldhu	r2,-8(fp)
}
100006c0:	e037883a 	mov	sp,fp
100006c4:	df000017 	ldw	fp,0(sp)
100006c8:	dec00104 	addi	sp,sp,4
100006cc:	f800283a 	ret

100006d0 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
100006d0:	defff904 	addi	sp,sp,-28
100006d4:	dfc00615 	stw	ra,24(sp)
100006d8:	df000515 	stw	fp,20(sp)
100006dc:	df000504 	addi	fp,sp,20
	IO_init();
100006e0:	00005d80 	call	100005d8 <IO_init>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		//UsbWrite(0xc008,0x000f);
		//UsbRead(0xc008);
		usleep(10*10000);
	}*/
	srand(424242);
100006e4:	010001b4 	movhi	r4,6
100006e8:	211e4c84 	addi	r4,r4,31026
100006ec:	00026b40 	call	100026b4 <srand>
	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
100006f0:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
100006f4:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
100006f8:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
100006fc:	01040074 	movhi	r4,4097
10000700:	21063304 	addi	r4,r4,6348
10000704:	00026a00 	call	100026a0 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10000708:	00014c40 	call	100014c4 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
1000070c:	01005104 	movi	r4,324
10000710:	000b883a 	mov	r5,zero
10000714:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000718:	01302414 	movui	r4,49296
1000071c:	017fffd4 	movui	r5,65535
10000720:	000142c0 	call	1000142c <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000724:	01006d04 	movi	r4,436
10000728:	01409604 	movi	r5,600
1000072c:	000142c0 	call	1000142c <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000730:	00811004 	movi	r2,1088
10000734:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000738:	e0bffb0b 	ldhu	r2,-20(fp)
1000073c:	01005084 	movi	r4,322
10000740:	100b883a 	mov	r5,r2
10000744:	000142c0 	call	1000142c <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000748:	00808404 	movi	r2,528
1000074c:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10000750:	e0bffe0b 	ldhu	r2,-8(fp)
10000754:	01302314 	movui	r4,49292
10000758:	100b883a 	mov	r5,r2
1000075c:	000142c0 	call	1000142c <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10000760:	01007104 	movi	r4,452
10000764:	000b883a 	mov	r5,zero
10000768:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
1000076c:	01007184 	movi	r4,454
10000770:	000b883a 	mov	r5,zero
10000774:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000778:	01007204 	movi	r4,456
1000077c:	000b883a 	mov	r5,zero
10000780:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000784:	01007284 	movi	r4,458
10000788:	000b883a 	mov	r5,zero
1000078c:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000790:	01007304 	movi	r4,460
10000794:	000b883a 	mov	r5,zero
10000798:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
1000079c:	01007384 	movi	r4,462
100007a0:	000b883a 	mov	r5,zero
100007a4:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100007a8:	01007404 	movi	r4,464
100007ac:	000b883a 	mov	r5,zero
100007b0:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100007b4:	01007484 	movi	r4,466
100007b8:	000b883a 	mov	r5,zero
100007bc:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100007c0:	01007504 	movi	r4,468
100007c4:	000b883a 	mov	r5,zero
100007c8:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100007cc:	01007584 	movi	r4,470
100007d0:	000b883a 	mov	r5,zero
100007d4:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100007d8:	01007604 	movi	r4,472
100007dc:	000b883a 	mov	r5,zero
100007e0:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100007e4:	01007684 	movi	r4,474
100007e8:	000b883a 	mov	r5,zero
100007ec:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100007f0:	01007704 	movi	r4,476
100007f4:	000b883a 	mov	r5,zero
100007f8:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100007fc:	01007784 	movi	r4,478
10000800:	000b883a 	mov	r5,zero
10000804:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10000808:	01007084 	movi	r4,450
1000080c:	01401c84 	movi	r5,114
10000810:	000142c0 	call	1000142c <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000814:	01000044 	movi	r4,1
10000818:	01738054 	movui	r5,52737
1000081c:	00006240 	call	10000624 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000820:	0001883a 	nop
10000824:	010000c4 	movi	r4,3
10000828:	000067c0 	call	1000067c <IO_read>
1000082c:	10bfffcc 	andi	r2,r2,65535
10000830:	103ffc26 	beq	r2,zero,10000824 <__alt_data_end+0xf8000824>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000834:	0001883a 	nop
10000838:	01000044 	movi	r4,1
1000083c:	000067c0 	call	1000067c <IO_read>
10000840:	10bfffcc 	andi	r2,r2,65535
10000844:	1083fb58 	cmpnei	r2,r2,4077
10000848:	10000826 	beq	r2,zero,1000086c <main+0x19c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
1000084c:	01000044 	movi	r4,1
10000850:	000067c0 	call	1000067c <IO_read>
10000854:	10bfffcc 	andi	r2,r2,65535
10000858:	01040074 	movhi	r4,4097
1000085c:	21063904 	addi	r4,r4,6372
10000860:	100b883a 	mov	r5,r2
10000864:	00025ac0 	call	100025ac <printf>
		goto USB_HOT_PLUG;
10000868:	003fa706 	br	10000708 <__alt_data_end+0xf8000708>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
1000086c:	01040074 	movhi	r4,4097
10000870:	21064204 	addi	r4,r4,6408
10000874:	00025ac0 	call	100025ac <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10000878:	01007084 	movi	r4,450
1000087c:	01401d04 	movi	r5,116
10000880:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10000884:	01007104 	movi	r4,452
10000888:	01400f04 	movi	r5,60
1000088c:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000890:	01007184 	movi	r4,454
10000894:	000b883a 	mov	r5,zero
10000898:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
1000089c:	01007204 	movi	r4,456
100008a0:	000b883a 	mov	r5,zero
100008a4:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100008a8:	01007284 	movi	r4,458
100008ac:	000b883a 	mov	r5,zero
100008b0:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100008b4:	01007304 	movi	r4,460
100008b8:	000b883a 	mov	r5,zero
100008bc:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100008c0:	01007384 	movi	r4,462
100008c4:	000b883a 	mov	r5,zero
100008c8:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100008cc:	01007404 	movi	r4,464
100008d0:	000b883a 	mov	r5,zero
100008d4:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100008d8:	01007484 	movi	r4,466
100008dc:	000b883a 	mov	r5,zero
100008e0:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100008e4:	01007504 	movi	r4,468
100008e8:	000b883a 	mov	r5,zero
100008ec:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100008f0:	01007584 	movi	r4,470
100008f4:	000b883a 	mov	r5,zero
100008f8:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100008fc:	01007604 	movi	r4,472
10000900:	000b883a 	mov	r5,zero
10000904:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000908:	01007684 	movi	r4,474
1000090c:	000b883a 	mov	r5,zero
10000910:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000914:	01007704 	movi	r4,476
10000918:	000b883a 	mov	r5,zero
1000091c:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000920:	01007784 	movi	r4,478
10000924:	000b883a 	mov	r5,zero
10000928:	000142c0 	call	1000142c <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
1000092c:	01000044 	movi	r4,1
10000930:	01738054 	movui	r5,52737
10000934:	00006240 	call	10000624 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000938:	0001883a 	nop
1000093c:	01000044 	movi	r4,1
10000940:	000067c0 	call	1000067c <IO_read>
10000944:	10bfffcc 	andi	r2,r2,65535
10000948:	1083fb58 	cmpnei	r2,r2,4077
1000094c:	10000826 	beq	r2,zero,10000970 <main+0x2a0>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000950:	01000044 	movi	r4,1
10000954:	000067c0 	call	1000067c <IO_read>
10000958:	10bfffcc 	andi	r2,r2,65535
1000095c:	01040074 	movhi	r4,4097
10000960:	21063904 	addi	r4,r4,6372
10000964:	100b883a 	mov	r5,r2
10000968:	00025ac0 	call	100025ac <printf>
		goto USB_HOT_PLUG;
1000096c:	003f6606 	br	10000708 <__alt_data_end+0xf8000708>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10000970:	00b02284 	movi	r2,-16246
10000974:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10000978:	008c0004 	movi	r2,12288
1000097c:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
10000980:	00880004 	movi	r2,8192
10000984:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10000988:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000098c:	10bfffcc 	andi	r2,r2,65535
10000990:	1009883a 	mov	r4,r2
10000994:	00014800 	call	10001480 <UsbRead>
10000998:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
1000099c:	d0a6cb8b 	ldhu	r2,-25810(gp)
100009a0:	e0fffb0b 	ldhu	r3,-20(fp)
100009a4:	1884703a 	and	r2,r3,r2
100009a8:	10bfffcc 	andi	r2,r2,65535
100009ac:	1000341e 	bne	r2,zero,10000a80 <main+0x3b0>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100009b0:	e03ffbc5 	stb	zero,-17(fp)
100009b4:	00001006 	br	100009f8 <main+0x328>
		{
			usleep(5*1000);
100009b8:	0104e204 	movi	r4,5000
100009bc:	000f9100 	call	1000f910 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100009c0:	d0a6cb0b 	ldhu	r2,-25812(gp)
100009c4:	10bfffcc 	andi	r2,r2,65535
100009c8:	1009883a 	mov	r4,r2
100009cc:	00014800 	call	10001480 <UsbRead>
100009d0:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
100009d4:	d0a6cb8b 	ldhu	r2,-25810(gp)
100009d8:	e0fffb0b 	ldhu	r3,-20(fp)
100009dc:	1884703a 	and	r2,r3,r2
100009e0:	10bfffcc 	andi	r2,r2,65535
100009e4:	10000126 	beq	r2,zero,100009ec <main+0x31c>
100009e8:	00000606 	br	10000a04 <main+0x334>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100009ec:	e0bffbc3 	ldbu	r2,-17(fp)
100009f0:	10800044 	addi	r2,r2,1
100009f4:	e0bffbc5 	stb	r2,-17(fp)
100009f8:	e0bffbc3 	ldbu	r2,-17(fp)
100009fc:	10800170 	cmpltui	r2,r2,5
10000a00:	103fed1e 	bne	r2,zero,100009b8 <__alt_data_end+0xf80009b8>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
10000a04:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000a08:	e0fffb0b 	ldhu	r3,-20(fp)
10000a0c:	1884703a 	and	r2,r3,r2
10000a10:	10bfffcc 	andi	r2,r2,65535
10000a14:	1000261e 	bne	r2,zero,10000ab0 <main+0x3e0>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10000a18:	01040074 	movhi	r4,4097
10000a1c:	21064604 	addi	r4,r4,6424
10000a20:	00026a00 	call	100026a0 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000a24:	01040074 	movhi	r4,4097
10000a28:	21065004 	addi	r4,r4,6464
10000a2c:	00026a00 	call	100026a0 <puts>
			while (!(usb_ctl_val & no_device))
10000a30:	00000d06 	br	10000a68 <main+0x398>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000a34:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000a38:	10bfffcc 	andi	r2,r2,65535
10000a3c:	1009883a 	mov	r4,r2
10000a40:	00014800 	call	10001480 <UsbRead>
10000a44:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
10000a48:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000a4c:	e0fffb0b 	ldhu	r3,-20(fp)
10000a50:	1884703a 	and	r2,r3,r2
10000a54:	10bfffcc 	andi	r2,r2,65535
10000a58:	10000126 	beq	r2,zero,10000a60 <main+0x390>
					goto USB_HOT_PLUG;
10000a5c:	003f2a06 	br	10000708 <__alt_data_end+0xf8000708>

				usleep(2000);
10000a60:	0101f404 	movi	r4,2000
10000a64:	000f9100 	call	1000f910 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10000a68:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000a6c:	e0fffb0b 	ldhu	r3,-20(fp)
10000a70:	1884703a 	and	r2,r3,r2
10000a74:	10bfffcc 	andi	r2,r2,65535
10000a78:	103fee26 	beq	r2,zero,10000a34 <__alt_data_end+0xf8000a34>
10000a7c:	00000c06 	br	10000ab0 <main+0x3e0>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10000a80:	e0fffb0b 	ldhu	r3,-20(fp)
10000a84:	e0bffc0b 	ldhu	r2,-16(fp)
10000a88:	1884703a 	and	r2,r3,r2
10000a8c:	10bfffcc 	andi	r2,r2,65535
10000a90:	10000426 	beq	r2,zero,10000aa4 <main+0x3d4>
		{
			printf("[INFO]: full speed device\n");
10000a94:	01040074 	movhi	r4,4097
10000a98:	21065c04 	addi	r4,r4,6512
10000a9c:	00026a00 	call	100026a0 <puts>
10000aa0:	00000306 	br	10000ab0 <main+0x3e0>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000aa4:	01040074 	movhi	r4,4097
10000aa8:	21066304 	addi	r4,r4,6540
10000aac:	00026a00 	call	100026a0 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10000ab0:	00015840 	call	10001584 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ab4:	00000306 	br	10000ac4 <main+0x3f4>
	{
		UsbSetAddress();
10000ab8:	00015840 	call	10001584 <UsbSetAddress>
		usleep(10*1000);
10000abc:	0109c404 	movi	r4,10000
10000ac0:	000f9100 	call	1000f910 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ac4:	010000c4 	movi	r4,3
10000ac8:	000067c0 	call	1000067c <IO_read>
10000acc:	10bfffcc 	andi	r2,r2,65535
10000ad0:	1080040c 	andi	r2,r2,16
10000ad4:	103ff826 	beq	r2,zero,10000ab8 <__alt_data_end+0xf8000ab8>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000ad8:	00024000 	call	10002400 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10000adc:	01000084 	movi	r4,2
10000ae0:	01414184 	movi	r5,1286
10000ae4:	00006240 	call	10000624 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000ae8:	0009883a 	mov	r4,zero
10000aec:	000067c0 	call	1000067c <IO_read>
10000af0:	10bfffcc 	andi	r2,r2,65535
10000af4:	01040074 	movhi	r4,4097
10000af8:	21066a04 	addi	r4,r4,6568
10000afc:	100b883a 	mov	r5,r2
10000b00:	00025ac0 	call	100025ac <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000b04:	01000084 	movi	r4,2
10000b08:	01414204 	movi	r5,1288
10000b0c:	00006240 	call	10000624 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000b10:	0009883a 	mov	r4,zero
10000b14:	000067c0 	call	1000067c <IO_read>
10000b18:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10000b1c:	e0bffb0b 	ldhu	r2,-20(fp)
10000b20:	01040074 	movhi	r4,4097
10000b24:	21067504 	addi	r4,r4,6612
10000b28:	100b883a 	mov	r5,r2
10000b2c:	00025ac0 	call	100025ac <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000b30:	e0bffb0b 	ldhu	r2,-20(fp)
10000b34:	108000e0 	cmpeqi	r2,r2,3
10000b38:	1000031e 	bne	r2,zero,10000b48 <main+0x478>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000b3c:	00024840 	call	10002484 <UsbGetRetryCnt>
10000b40:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
10000b44:	003ef006 	br	10000708 <__alt_data_end+0xf8000708>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10000b48:	01040074 	movhi	r4,4097
10000b4c:	21068104 	addi	r4,r4,6660
10000b50:	00026a00 	call	100026a0 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10000b54:	00016800 	call	10001680 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b58:	00000306 	br	10000b68 <main+0x498>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10000b5c:	00016800 	call	10001680 <UsbGetDeviceDesc1>
		usleep(10*1000);
10000b60:	0109c404 	movi	r4,10000
10000b64:	000f9100 	call	1000f910 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b68:	010000c4 	movi	r4,3
10000b6c:	000067c0 	call	1000067c <IO_read>
10000b70:	10bfffcc 	andi	r2,r2,65535
10000b74:	1080040c 	andi	r2,r2,16
10000b78:	103ff826 	beq	r2,zero,10000b5c <__alt_data_end+0xf8000b5c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000b7c:	00024000 	call	10002400 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000b80:	01000084 	movi	r4,2
10000b84:	01414184 	movi	r5,1286
10000b88:	00006240 	call	10000624 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000b8c:	0009883a 	mov	r4,zero
10000b90:	000067c0 	call	1000067c <IO_read>
10000b94:	10bfffcc 	andi	r2,r2,65535
10000b98:	01040074 	movhi	r4,4097
10000b9c:	21069004 	addi	r4,r4,6720
10000ba0:	100b883a 	mov	r5,r2
10000ba4:	00025ac0 	call	100025ac <printf>

	IO_write(HPI_ADDR,0x0508);
10000ba8:	01000084 	movi	r4,2
10000bac:	01414204 	movi	r5,1288
10000bb0:	00006240 	call	10000624 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000bb4:	0009883a 	mov	r4,zero
10000bb8:	000067c0 	call	1000067c <IO_read>
10000bbc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000bc0:	e0bffb0b 	ldhu	r2,-20(fp)
10000bc4:	01040074 	movhi	r4,4097
10000bc8:	21069b04 	addi	r4,r4,6764
10000bcc:	100b883a 	mov	r5,r2
10000bd0:	00025ac0 	call	100025ac <printf>
	while (usb_ctl_val != 0x03)
10000bd4:	00000206 	br	10000be0 <main+0x510>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000bd8:	00024840 	call	10002484 <UsbGetRetryCnt>
10000bdc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000be0:	e0bffb0b 	ldhu	r2,-20(fp)
10000be4:	108000d8 	cmpnei	r2,r2,3
10000be8:	103ffb1e 	bne	r2,zero,10000bd8 <__alt_data_end+0xf8000bd8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10000bec:	01040074 	movhi	r4,4097
10000bf0:	2106a704 	addi	r4,r4,6812
10000bf4:	00026a00 	call	100026a0 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10000bf8:	00017c40 	call	100017c4 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bfc:	00000306 	br	10000c0c <main+0x53c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000c00:	00017c40 	call	100017c4 <UsbGetDeviceDesc2>
		usleep(10*1000);
10000c04:	0109c404 	movi	r4,10000
10000c08:	000f9100 	call	1000f910 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c0c:	010000c4 	movi	r4,3
10000c10:	000067c0 	call	1000067c <IO_read>
10000c14:	10bfffcc 	andi	r2,r2,65535
10000c18:	1080040c 	andi	r2,r2,16
10000c1c:	103ff826 	beq	r2,zero,10000c00 <__alt_data_end+0xf8000c00>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c20:	00024000 	call	10002400 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c24:	01000084 	movi	r4,2
10000c28:	01414184 	movi	r5,1286
10000c2c:	00006240 	call	10000624 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c30:	0009883a 	mov	r4,zero
10000c34:	000067c0 	call	1000067c <IO_read>
10000c38:	10bfffcc 	andi	r2,r2,65535
10000c3c:	01040074 	movhi	r4,4097
10000c40:	21069004 	addi	r4,r4,6720
10000c44:	100b883a 	mov	r5,r2
10000c48:	00025ac0 	call	100025ac <printf>

	IO_write(HPI_ADDR,0x0508);
10000c4c:	01000084 	movi	r4,2
10000c50:	01414204 	movi	r5,1288
10000c54:	00006240 	call	10000624 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c58:	0009883a 	mov	r4,zero
10000c5c:	000067c0 	call	1000067c <IO_read>
10000c60:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000c64:	e0bffb0b 	ldhu	r2,-20(fp)
10000c68:	01040074 	movhi	r4,4097
10000c6c:	21069b04 	addi	r4,r4,6764
10000c70:	100b883a 	mov	r5,r2
10000c74:	00025ac0 	call	100025ac <printf>
	while (usb_ctl_val != 0x03)
10000c78:	00000206 	br	10000c84 <main+0x5b4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c7c:	00024840 	call	10002484 <UsbGetRetryCnt>
10000c80:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c84:	e0bffb0b 	ldhu	r2,-20(fp)
10000c88:	108000d8 	cmpnei	r2,r2,3
10000c8c:	103ffb1e 	bne	r2,zero,10000c7c <__alt_data_end+0xf8000c7c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10000c90:	01040074 	movhi	r4,4097
10000c94:	2106bb04 	addi	r4,r4,6892
10000c98:	00026a00 	call	100026a0 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000c9c:	00019980 	call	10001998 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ca0:	00000306 	br	10000cb0 <main+0x5e0>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10000ca4:	00019980 	call	10001998 <UsbGetConfigDesc1>
		usleep(10*1000);
10000ca8:	0109c404 	movi	r4,10000
10000cac:	000f9100 	call	1000f910 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000cb0:	010000c4 	movi	r4,3
10000cb4:	000067c0 	call	1000067c <IO_read>
10000cb8:	10bfffcc 	andi	r2,r2,65535
10000cbc:	1080040c 	andi	r2,r2,16
10000cc0:	103ff826 	beq	r2,zero,10000ca4 <__alt_data_end+0xf8000ca4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000cc4:	00024000 	call	10002400 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000cc8:	01000084 	movi	r4,2
10000ccc:	01414184 	movi	r5,1286
10000cd0:	00006240 	call	10000624 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000cd4:	0009883a 	mov	r4,zero
10000cd8:	000067c0 	call	1000067c <IO_read>
10000cdc:	10bfffcc 	andi	r2,r2,65535
10000ce0:	01040074 	movhi	r4,4097
10000ce4:	2106cd04 	addi	r4,r4,6964
10000ce8:	100b883a 	mov	r5,r2
10000cec:	00025ac0 	call	100025ac <printf>

	IO_write(HPI_ADDR,0x0508);
10000cf0:	01000084 	movi	r4,2
10000cf4:	01414204 	movi	r5,1288
10000cf8:	00006240 	call	10000624 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cfc:	0009883a 	mov	r4,zero
10000d00:	000067c0 	call	1000067c <IO_read>
10000d04:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10000d08:	e0bffb0b 	ldhu	r2,-20(fp)
10000d0c:	01040074 	movhi	r4,4097
10000d10:	2106d804 	addi	r4,r4,7008
10000d14:	100b883a 	mov	r5,r2
10000d18:	00025ac0 	call	100025ac <printf>
	while (usb_ctl_val != 0x03)
10000d1c:	00000206 	br	10000d28 <main+0x658>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d20:	00024840 	call	10002484 <UsbGetRetryCnt>
10000d24:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d28:	e0bffb0b 	ldhu	r2,-20(fp)
10000d2c:	108000d8 	cmpnei	r2,r2,3
10000d30:	103ffb1e 	bne	r2,zero,10000d20 <__alt_data_end+0xf8000d20>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000d34:	01040074 	movhi	r4,4097
10000d38:	2106e404 	addi	r4,r4,7056
10000d3c:	00026a00 	call	100026a0 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000d40:	0001b240 	call	10001b24 <UsbGetConfigDesc2>

	usleep(100*1000);
10000d44:	010000b4 	movhi	r4,2
10000d48:	2121a804 	addi	r4,r4,-31072
10000d4c:	000f9100 	call	1000f910 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d50:	00000306 	br	10000d60 <main+0x690>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000d54:	0001b240 	call	10001b24 <UsbGetConfigDesc2>
		usleep(10*1000);
10000d58:	0109c404 	movi	r4,10000
10000d5c:	000f9100 	call	1000f910 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d60:	010000c4 	movi	r4,3
10000d64:	000067c0 	call	1000067c <IO_read>
10000d68:	10bfffcc 	andi	r2,r2,65535
10000d6c:	1080040c 	andi	r2,r2,16
10000d70:	103ff826 	beq	r2,zero,10000d54 <__alt_data_end+0xf8000d54>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d74:	00024000 	call	10002400 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d78:	01000084 	movi	r4,2
10000d7c:	01414184 	movi	r5,1286
10000d80:	00006240 	call	10000624 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d84:	0009883a 	mov	r4,zero
10000d88:	000067c0 	call	1000067c <IO_read>
10000d8c:	10bfffcc 	andi	r2,r2,65535
10000d90:	01040074 	movhi	r4,4097
10000d94:	2106f704 	addi	r4,r4,7132
10000d98:	100b883a 	mov	r5,r2
10000d9c:	00025ac0 	call	100025ac <printf>

	IO_write(HPI_ADDR,0x0508);
10000da0:	01000084 	movi	r4,2
10000da4:	01414204 	movi	r5,1288
10000da8:	00006240 	call	10000624 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000dac:	0009883a 	mov	r4,zero
10000db0:	000067c0 	call	1000067c <IO_read>
10000db4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000db8:	e0bffb0b 	ldhu	r2,-20(fp)
10000dbc:	01040074 	movhi	r4,4097
10000dc0:	21070204 	addi	r4,r4,7176
10000dc4:	100b883a 	mov	r5,r2
10000dc8:	00025ac0 	call	100025ac <printf>
	while (usb_ctl_val != 0x03)
10000dcc:	00000206 	br	10000dd8 <main+0x708>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000dd0:	00024840 	call	10002484 <UsbGetRetryCnt>
10000dd4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000dd8:	e0bffb0b 	ldhu	r2,-20(fp)
10000ddc:	108000d8 	cmpnei	r2,r2,3
10000de0:	103ffb1e 	bne	r2,zero,10000dd0 <__alt_data_end+0xf8000dd0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000de4:	01040074 	movhi	r4,4097
10000de8:	21070e04 	addi	r4,r4,7224
10000dec:	00026a00 	call	100026a0 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000df0:	01000084 	movi	r4,2
10000df4:	01415b04 	movi	r5,1388
10000df8:	00006240 	call	10000624 <IO_write>
	code = IO_read(HPI_DATA);
10000dfc:	0009883a 	mov	r4,zero
10000e00:	000067c0 	call	1000067c <IO_read>
10000e04:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
10000e08:	e0bffe8b 	ldhu	r2,-6(fp)
10000e0c:	108000cc 	andi	r2,r2,3
10000e10:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
10000e14:	e0bffe8b 	ldhu	r2,-6(fp)
10000e18:	01040074 	movhi	r4,4097
10000e1c:	21072104 	addi	r4,r4,7300
10000e20:	100b883a 	mov	r5,r2
10000e24:	00025ac0 	call	100025ac <printf>

	if (code == 0x01)
10000e28:	e0bffe8b 	ldhu	r2,-6(fp)
10000e2c:	10800058 	cmpnei	r2,r2,1
10000e30:	1000041e 	bne	r2,zero,10000e44 <main+0x774>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000e34:	01040074 	movhi	r4,4097
10000e38:	21072404 	addi	r4,r4,7312
10000e3c:	00026a00 	call	100026a0 <puts>
10000e40:	00000306 	br	10000e50 <main+0x780>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000e44:	01040074 	movhi	r4,4097
10000e48:	21073304 	addi	r4,r4,7372
10000e4c:	00026a00 	call	100026a0 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000e50:	01000084 	movi	r4,2
10000e54:	01415d84 	movi	r5,1398
10000e58:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000e5c:	0009883a 	mov	r4,zero
10000e60:	0141cfc4 	movi	r5,1855
10000e64:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000e68:	0009883a 	mov	r4,zero
10000e6c:	01604154 	movui	r5,33029
10000e70:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000e74:	0009883a 	mov	r4,zero
10000e78:	014000c4 	movi	r5,3
10000e7c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000e80:	0009883a 	mov	r4,zero
10000e84:	01400204 	movi	r5,8
10000e88:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000e8c:	0009883a 	mov	r4,zero
10000e90:	016b0294 	movui	r5,44042
10000e94:	00006240 	call	10000624 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000e98:	01006c04 	movi	r4,432
10000e9c:	01415d84 	movi	r5,1398
10000ea0:	000142c0 	call	1000142c <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000ea4:	01000084 	movi	r4,2
10000ea8:	01415f04 	movi	r5,1404
10000eac:	00006240 	call	10000624 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000eb0:	0009883a 	mov	r4,zero
10000eb4:	000067c0 	call	1000067c <IO_read>
10000eb8:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000ebc:	e0bfff03 	ldbu	r2,-4(fp)
10000ec0:	01040074 	movhi	r4,4097
10000ec4:	21073c04 	addi	r4,r4,7408
10000ec8:	100b883a 	mov	r5,r2
10000ecc:	00025ac0 	call	100025ac <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000ed0:	0001d880 	call	10001d88 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ed4:	00000306 	br	10000ee4 <main+0x814>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000ed8:	0001d880 	call	10001d88 <UsbSetConfig>
		usleep(10*1000);
10000edc:	0109c404 	movi	r4,10000
10000ee0:	000f9100 	call	1000f910 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ee4:	010000c4 	movi	r4,3
10000ee8:	000067c0 	call	1000067c <IO_read>
10000eec:	10bfffcc 	andi	r2,r2,65535
10000ef0:	1080040c 	andi	r2,r2,16
10000ef4:	103ff826 	beq	r2,zero,10000ed8 <__alt_data_end+0xf8000ed8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000ef8:	00024000 	call	10002400 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000efc:	01000084 	movi	r4,2
10000f00:	01414184 	movi	r5,1286
10000f04:	00006240 	call	10000624 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000f08:	0009883a 	mov	r4,zero
10000f0c:	000067c0 	call	1000067c <IO_read>
10000f10:	10bfffcc 	andi	r2,r2,65535
10000f14:	01040074 	movhi	r4,4097
10000f18:	21074604 	addi	r4,r4,7448
10000f1c:	100b883a 	mov	r5,r2
10000f20:	00025ac0 	call	100025ac <printf>

	IO_write(HPI_ADDR,0x0508);
10000f24:	01000084 	movi	r4,2
10000f28:	01414204 	movi	r5,1288
10000f2c:	00006240 	call	10000624 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000f30:	0009883a 	mov	r4,zero
10000f34:	000067c0 	call	1000067c <IO_read>
10000f38:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000f3c:	e0bffb0b 	ldhu	r2,-20(fp)
10000f40:	01040074 	movhi	r4,4097
10000f44:	21075104 	addi	r4,r4,7492
10000f48:	100b883a 	mov	r5,r2
10000f4c:	00025ac0 	call	100025ac <printf>
	while (usb_ctl_val != 0x03)
10000f50:	00000206 	br	10000f5c <main+0x88c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000f54:	00024840 	call	10002484 <UsbGetRetryCnt>
10000f58:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000f5c:	e0bffb0b 	ldhu	r2,-20(fp)
10000f60:	108000d8 	cmpnei	r2,r2,3
10000f64:	103ffb1e 	bne	r2,zero,10000f54 <__alt_data_end+0xf8000f54>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000f68:	01040074 	movhi	r4,4097
10000f6c:	21075d04 	addi	r4,r4,7540
10000f70:	00026a00 	call	100026a0 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000f74:	0001e840 	call	10001e84 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f78:	00000306 	br	10000f88 <main+0x8b8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000f7c:	0001e840 	call	10001e84 <UsbClassRequest>
		usleep(10*1000);
10000f80:	0109c404 	movi	r4,10000
10000f84:	000f9100 	call	1000f910 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f88:	010000c4 	movi	r4,3
10000f8c:	000067c0 	call	1000067c <IO_read>
10000f90:	10bfffcc 	andi	r2,r2,65535
10000f94:	1080040c 	andi	r2,r2,16
10000f98:	103ff826 	beq	r2,zero,10000f7c <__alt_data_end+0xf8000f7c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000f9c:	00024000 	call	10002400 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000fa0:	01000084 	movi	r4,2
10000fa4:	01414184 	movi	r5,1286
10000fa8:	00006240 	call	10000624 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000fac:	0009883a 	mov	r4,zero
10000fb0:	000067c0 	call	1000067c <IO_read>
10000fb4:	10bfffcc 	andi	r2,r2,65535
10000fb8:	01040074 	movhi	r4,4097
10000fbc:	21076f04 	addi	r4,r4,7612
10000fc0:	100b883a 	mov	r5,r2
10000fc4:	00025ac0 	call	100025ac <printf>

	IO_write(HPI_ADDR,0x0508);
10000fc8:	01000084 	movi	r4,2
10000fcc:	01414204 	movi	r5,1288
10000fd0:	00006240 	call	10000624 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000fd4:	0009883a 	mov	r4,zero
10000fd8:	000067c0 	call	1000067c <IO_read>
10000fdc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000fe0:	e0bffb0b 	ldhu	r2,-20(fp)
10000fe4:	01040074 	movhi	r4,4097
10000fe8:	21077a04 	addi	r4,r4,7656
10000fec:	100b883a 	mov	r5,r2
10000ff0:	00025ac0 	call	100025ac <printf>
	while (usb_ctl_val != 0x03)
10000ff4:	00000206 	br	10001000 <main+0x930>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000ff8:	00024840 	call	10002484 <UsbGetRetryCnt>
10000ffc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10001000:	e0bffb0b 	ldhu	r2,-20(fp)
10001004:	108000d8 	cmpnei	r2,r2,3
10001008:	103ffb1e 	bne	r2,zero,10000ff8 <__alt_data_end+0xf8000ff8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
1000100c:	01040074 	movhi	r4,4097
10001010:	21078604 	addi	r4,r4,7704
10001014:	00026a00 	call	100026a0 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10001018:	0001f800 	call	10001f80 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000101c:	00000306 	br	1000102c <main+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10001020:	0001f800 	call	10001f80 <UsbGetHidDesc>
		usleep(10*1000);
10001024:	0109c404 	movi	r4,10000
10001028:	000f9100 	call	1000f910 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000102c:	010000c4 	movi	r4,3
10001030:	000067c0 	call	1000067c <IO_read>
10001034:	10bfffcc 	andi	r2,r2,65535
10001038:	1080040c 	andi	r2,r2,16
1000103c:	103ff826 	beq	r2,zero,10001020 <__alt_data_end+0xf8001020>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10001040:	00024000 	call	10002400 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10001044:	01000084 	movi	r4,2
10001048:	01414184 	movi	r5,1286
1000104c:	00006240 	call	10000624 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001050:	0009883a 	mov	r4,zero
10001054:	000067c0 	call	1000067c <IO_read>
10001058:	10bfffcc 	andi	r2,r2,65535
1000105c:	01040074 	movhi	r4,4097
10001060:	21076f04 	addi	r4,r4,7612
10001064:	100b883a 	mov	r5,r2
10001068:	00025ac0 	call	100025ac <printf>

	IO_write(HPI_ADDR,0x0508);
1000106c:	01000084 	movi	r4,2
10001070:	01414204 	movi	r5,1288
10001074:	00006240 	call	10000624 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001078:	0009883a 	mov	r4,zero
1000107c:	000067c0 	call	1000067c <IO_read>
10001080:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10001084:	e0bffb0b 	ldhu	r2,-20(fp)
10001088:	01040074 	movhi	r4,4097
1000108c:	21077a04 	addi	r4,r4,7656
10001090:	100b883a 	mov	r5,r2
10001094:	00025ac0 	call	100025ac <printf>
	while (usb_ctl_val != 0x03)
10001098:	00000206 	br	100010a4 <main+0x9d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000109c:	00024840 	call	10002484 <UsbGetRetryCnt>
100010a0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100010a4:	e0bffb0b 	ldhu	r2,-20(fp)
100010a8:	108000d8 	cmpnei	r2,r2,3
100010ac:	103ffb1e 	bne	r2,zero,1000109c <__alt_data_end+0xf800109c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
100010b0:	01040074 	movhi	r4,4097
100010b4:	21079804 	addi	r4,r4,7776
100010b8:	00026a00 	call	100026a0 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
100010bc:	00020c40 	call	100020c4 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100010c0:	00000306 	br	100010d0 <main+0xa00>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
100010c4:	00020c40 	call	100020c4 <UsbGetReportDesc>
		usleep(10*1000);
100010c8:	0109c404 	movi	r4,10000
100010cc:	000f9100 	call	1000f910 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100010d0:	010000c4 	movi	r4,3
100010d4:	000067c0 	call	1000067c <IO_read>
100010d8:	10bfffcc 	andi	r2,r2,65535
100010dc:	1080040c 	andi	r2,r2,16
100010e0:	103ff826 	beq	r2,zero,100010c4 <__alt_data_end+0xf80010c4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100010e4:	00024000 	call	10002400 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100010e8:	01000084 	movi	r4,2
100010ec:	01414184 	movi	r5,1286
100010f0:	00006240 	call	10000624 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
100010f4:	0009883a 	mov	r4,zero
100010f8:	000067c0 	call	1000067c <IO_read>
100010fc:	10bfffcc 	andi	r2,r2,65535
10001100:	01040074 	movhi	r4,4097
10001104:	2107ac04 	addi	r4,r4,7856
10001108:	100b883a 	mov	r5,r2
1000110c:	00025ac0 	call	100025ac <printf>

	IO_write(HPI_ADDR,0x0508);
10001110:	01000084 	movi	r4,2
10001114:	01414204 	movi	r5,1288
10001118:	00006240 	call	10000624 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000111c:	0009883a 	mov	r4,zero
10001120:	000067c0 	call	1000067c <IO_read>
10001124:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10001128:	e0bffb0b 	ldhu	r2,-20(fp)
1000112c:	01040074 	movhi	r4,4097
10001130:	2107b804 	addi	r4,r4,7904
10001134:	100b883a 	mov	r5,r2
10001138:	00025ac0 	call	100025ac <printf>
	while (usb_ctl_val != 0x03)
1000113c:	00000206 	br	10001148 <main+0xa78>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001140:	00024840 	call	10002484 <UsbGetRetryCnt>
10001144:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10001148:	e0bffb0b 	ldhu	r2,-20(fp)
1000114c:	108000d8 	cmpnei	r2,r2,3
10001150:	103ffb1e 	bne	r2,zero,10001140 <__alt_data_end+0xf8001140>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10001154:	01040074 	movhi	r4,4097
10001158:	2107c404 	addi	r4,r4,7952
1000115c:	00026a00 	call	100026a0 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10001160:	0109c404 	movi	r4,10000
10001164:	000f9100 	call	1000f910 <usleep>
	while(1)
	{
		toggle++;
10001168:	e0bffb83 	ldbu	r2,-18(fp)
1000116c:	10800044 	addi	r2,r2,1
10001170:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10001174:	01000084 	movi	r4,2
10001178:	01414004 	movi	r5,1280
1000117c:	00006240 	call	10000624 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10001180:	0009883a 	mov	r4,zero
10001184:	01414704 	movi	r5,1308
10001188:	00006240 	call	10000624 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
1000118c:	e0bfff03 	ldbu	r2,-4(fp)
10001190:	108003cc 	andi	r2,r2,15
10001194:	0009883a 	mov	r4,zero
10001198:	100b883a 	mov	r5,r2
1000119c:	00006240 	call	10000624 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
100011a0:	0009883a 	mov	r4,zero
100011a4:	0140a444 	movi	r5,657
100011a8:	00006240 	call	10000624 <IO_write>
		if(toggle%2)
100011ac:	e0bffb83 	ldbu	r2,-18(fp)
100011b0:	1080004c 	andi	r2,r2,1
100011b4:	10803fcc 	andi	r2,r2,255
100011b8:	10000426 	beq	r2,zero,100011cc <main+0xafc>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
100011bc:	0009883a 	mov	r4,zero
100011c0:	01400044 	movi	r5,1
100011c4:	00006240 	call	10000624 <IO_write>
100011c8:	00000306 	br	100011d8 <main+0xb08>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
100011cc:	0009883a 	mov	r4,zero
100011d0:	01401044 	movi	r5,65
100011d4:	00006240 	call	10000624 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
100011d8:	0009883a 	mov	r4,zero
100011dc:	014004c4 	movi	r5,19
100011e0:	00006240 	call	10000624 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
100011e4:	0009883a 	mov	r4,zero
100011e8:	000b883a 	mov	r5,zero
100011ec:	00006240 	call	10000624 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100011f0:	01006c04 	movi	r4,432
100011f4:	01414004 	movi	r5,1280
100011f8:	000142c0 	call	1000142c <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100011fc:	00002406 	br	10001290 <main+0xbc0>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10001200:	01000084 	movi	r4,2
10001204:	01414004 	movi	r5,1280
10001208:	00006240 	call	10000624 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
1000120c:	0009883a 	mov	r4,zero
10001210:	01414704 	movi	r5,1308
10001214:	00006240 	call	10000624 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10001218:	e0bfff03 	ldbu	r2,-4(fp)
1000121c:	108003cc 	andi	r2,r2,15
10001220:	0009883a 	mov	r4,zero
10001224:	100b883a 	mov	r5,r2
10001228:	00006240 	call	10000624 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
1000122c:	0009883a 	mov	r4,zero
10001230:	0140a444 	movi	r5,657
10001234:	00006240 	call	10000624 <IO_write>
			if(toggle%2)
10001238:	e0bffb83 	ldbu	r2,-18(fp)
1000123c:	1080004c 	andi	r2,r2,1
10001240:	10803fcc 	andi	r2,r2,255
10001244:	10000426 	beq	r2,zero,10001258 <main+0xb88>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10001248:	0009883a 	mov	r4,zero
1000124c:	01400044 	movi	r5,1
10001250:	00006240 	call	10000624 <IO_write>
10001254:	00000306 	br	10001264 <main+0xb94>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10001258:	0009883a 	mov	r4,zero
1000125c:	01401044 	movi	r5,65
10001260:	00006240 	call	10000624 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10001264:	0009883a 	mov	r4,zero
10001268:	014004c4 	movi	r5,19
1000126c:	00006240 	call	10000624 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10001270:	0009883a 	mov	r4,zero
10001274:	000b883a 	mov	r5,zero
10001278:	00006240 	call	10000624 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000127c:	01006c04 	movi	r4,432
10001280:	01414004 	movi	r5,1280
10001284:	000142c0 	call	1000142c <UsbWrite>
			usleep(10*1000);
10001288:	0109c404 	movi	r4,10000
1000128c:	000f9100 	call	1000f910 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001290:	010000c4 	movi	r4,3
10001294:	000067c0 	call	1000067c <IO_read>
10001298:	10bfffcc 	andi	r2,r2,65535
1000129c:	1080040c 	andi	r2,r2,16
100012a0:	103fd726 	beq	r2,zero,10001200 <__alt_data_end+0xf8001200>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
100012a4:	00024000 	call	10002400 <UsbWaitTDListDone>
100012a8:	e0bffb0d 	sth	r2,-20(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
100012ac:	01000084 	movi	r4,2
100012b0:	01414784 	movi	r5,1310
100012b4:	00006240 	call	10000624 <IO_write>
		keycode = IO_read(HPI_DATA);
100012b8:	0009883a 	mov	r4,zero
100012bc:	000067c0 	call	1000067c <IO_read>
100012c0:	10bfffcc 	andi	r2,r2,65535
100012c4:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
100012c8:	01040074 	movhi	r4,4097
100012cc:	2107d804 	addi	r4,r4,8032
100012d0:	e17ffd17 	ldw	r5,-12(fp)
100012d4:	00025ac0 	call	100025ac <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
100012d8:	e0bffd17 	ldw	r2,-12(fp)
100012dc:	10c03fcc 	andi	r3,r2,255
100012e0:	00803804 	movi	r2,224
100012e4:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
100012e8:	01003204 	movi	r4,200
100012ec:	000f9100 	call	1000f910 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
100012f0:	d0a6cb0b 	ldhu	r2,-25812(gp)
100012f4:	10bfffcc 	andi	r2,r2,65535
100012f8:	1009883a 	mov	r4,r2
100012fc:	00014800 	call	10001480 <UsbRead>
10001300:	e0bffb0d 	sth	r2,-20(fp)

		updateEnemies();
10001304:	00001f80 	call	100001f8 <updateEnemies>

		if(!(usb_ctl_val & no_device))
10001308:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000130c:	e0fffb0b 	ldhu	r3,-20(fp)
10001310:	1884703a 	and	r2,r3,r2
10001314:	10bfffcc 	andi	r2,r2,65535
10001318:	1000201e 	bne	r2,zero,1000139c <main+0xccc>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
1000131c:	e03ffbc5 	stb	zero,-17(fp)
10001320:	00001006 	br	10001364 <main+0xc94>
			{
				usleep(5*1000);
10001324:	0104e204 	movi	r4,5000
10001328:	000f9100 	call	1000f910 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
1000132c:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001330:	10bfffcc 	andi	r2,r2,65535
10001334:	1009883a 	mov	r4,r2
10001338:	00014800 	call	10001480 <UsbRead>
1000133c:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
10001340:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001344:	e0fffb0b 	ldhu	r3,-20(fp)
10001348:	1884703a 	and	r2,r3,r2
1000134c:	10bfffcc 	andi	r2,r2,65535
10001350:	10000126 	beq	r2,zero,10001358 <main+0xc88>
10001354:	00000606 	br	10001370 <main+0xca0>
		updateEnemies();

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001358:	e0bffbc3 	ldbu	r2,-17(fp)
1000135c:	10800044 	addi	r2,r2,1
10001360:	e0bffbc5 	stb	r2,-17(fp)
10001364:	e0bffbc3 	ldbu	r2,-17(fp)
10001368:	108001f0 	cmpltui	r2,r2,7
1000136c:	103fed1e 	bne	r2,zero,10001324 <__alt_data_end+0xf8001324>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
10001370:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001374:	e0fffb0b 	ldhu	r3,-20(fp)
10001378:	1884703a 	and	r2,r3,r2
1000137c:	10bfffcc 	andi	r2,r2,65535
10001380:	1000061e 	bne	r2,zero,1000139c <main+0xccc>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10001384:	01040074 	movhi	r4,4097
10001388:	2107e104 	addi	r4,r4,8068
1000138c:	00026a00 	call	100026a0 <puts>
				printf("[INFO]: please insert again!!! \n");
10001390:	01040074 	movhi	r4,4097
10001394:	2107ec04 	addi	r4,r4,8112
10001398:	00026a00 	call	100026a0 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
1000139c:	00001d06 	br	10001414 <main+0xd44>
		{

			usb_ctl_val = UsbRead(ctl_reg);
100013a0:	d0a6cb0b 	ldhu	r2,-25812(gp)
100013a4:	10bfffcc 	andi	r2,r2,65535
100013a8:	1009883a 	mov	r4,r2
100013ac:	00014800 	call	10001480 <UsbRead>
100013b0:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
100013b4:	0104e204 	movi	r4,5000
100013b8:	000f9100 	call	1000f910 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100013bc:	d0a6cb0b 	ldhu	r2,-25812(gp)
100013c0:	10bfffcc 	andi	r2,r2,65535
100013c4:	1009883a 	mov	r4,r2
100013c8:	00014800 	call	10001480 <UsbRead>
100013cc:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
100013d0:	0104e204 	movi	r4,5000
100013d4:	000f9100 	call	1000f910 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100013d8:	d0a6cb0b 	ldhu	r2,-25812(gp)
100013dc:	10bfffcc 	andi	r2,r2,65535
100013e0:	1009883a 	mov	r4,r2
100013e4:	00014800 	call	10001480 <UsbRead>
100013e8:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
100013ec:	0104e204 	movi	r4,5000
100013f0:	000f9100 	call	1000f910 <usleep>

			if(usb_ctl_val & no_device)
100013f4:	d0a6cb8b 	ldhu	r2,-25810(gp)
100013f8:	e0fffb0b 	ldhu	r3,-20(fp)
100013fc:	1884703a 	and	r2,r3,r2
10001400:	10bfffcc 	andi	r2,r2,65535
10001404:	10000126 	beq	r2,zero,1000140c <main+0xd3c>
				goto USB_HOT_PLUG;
10001408:	003cbf06 	br	10000708 <__alt_data_end+0xf8000708>

			usleep(200);
1000140c:	01003204 	movi	r4,200
10001410:	000f9100 	call	1000f910 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
10001414:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001418:	e0fffb0b 	ldhu	r3,-20(fp)
1000141c:	1884703a 	and	r2,r3,r2
10001420:	10bfffcc 	andi	r2,r2,65535
10001424:	103fde26 	beq	r2,zero,100013a0 <__alt_data_end+0xf80013a0>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
10001428:	003f4f06 	br	10001168 <__alt_data_end+0xf8001168>

1000142c <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
1000142c:	defffc04 	addi	sp,sp,-16
10001430:	dfc00315 	stw	ra,12(sp)
10001434:	df000215 	stw	fp,8(sp)
10001438:	df000204 	addi	fp,sp,8
1000143c:	2007883a 	mov	r3,r4
10001440:	2805883a 	mov	r2,r5
10001444:	e0fffe0d 	sth	r3,-8(fp)
10001448:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
//	IO_write(0b10, Address);
//	IO_write(0b11, Data);
	IO_write(HPI_ADDR, Address);
1000144c:	e0bffe0b 	ldhu	r2,-8(fp)
10001450:	01000084 	movi	r4,2
10001454:	100b883a 	mov	r5,r2
10001458:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA, Data);
1000145c:	e0bfff0b 	ldhu	r2,-4(fp)
10001460:	0009883a 	mov	r4,zero
10001464:	100b883a 	mov	r5,r2
10001468:	00006240 	call	10000624 <IO_write>
}
1000146c:	e037883a 	mov	sp,fp
10001470:	dfc00117 	ldw	ra,4(sp)
10001474:	df000017 	ldw	fp,0(sp)
10001478:	dec00204 	addi	sp,sp,8
1000147c:	f800283a 	ret

10001480 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001480:	defffd04 	addi	sp,sp,-12
10001484:	dfc00215 	stw	ra,8(sp)
10001488:	df000115 	stw	fp,4(sp)
1000148c:	df000104 	addi	fp,sp,4
10001490:	2005883a 	mov	r2,r4
10001494:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10001498:	e0bfff0b 	ldhu	r2,-4(fp)
1000149c:	01000084 	movi	r4,2
100014a0:	100b883a 	mov	r5,r2
100014a4:	00006240 	call	10000624 <IO_write>
	return IO_read(HPI_DATA);
100014a8:	0009883a 	mov	r4,zero
100014ac:	000067c0 	call	1000067c <IO_read>
}
100014b0:	e037883a 	mov	sp,fp
100014b4:	dfc00117 	ldw	ra,4(sp)
100014b8:	df000017 	ldw	fp,0(sp)
100014bc:	dec00204 	addi	sp,sp,8
100014c0:	f800283a 	ret

100014c4 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
100014c4:	defffe04 	addi	sp,sp,-8
100014c8:	dfc00115 	stw	ra,4(sp)
100014cc:	df000015 	stw	fp,0(sp)
100014d0:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
100014d4:	01000044 	movi	r4,1
100014d8:	017e9414 	movui	r5,64080
100014dc:	00006240 	call	10000624 <IO_write>
	usleep(100000);
100014e0:	010000b4 	movhi	r4,2
100014e4:	2121a804 	addi	r4,r4,-31072
100014e8:	000f9100 	call	1000f910 <usleep>
	printf("[USB INIT]:reset finished!\n");
100014ec:	01040074 	movhi	r4,4097
100014f0:	2107f404 	addi	r4,r4,8144
100014f4:	00026a00 	call	100026a0 <puts>

	usleep(500000);
100014f8:	01000234 	movhi	r4,8
100014fc:	21284804 	addi	r4,r4,-24288
10001500:	000f9100 	call	1000f910 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10001504:	01040074 	movhi	r4,4097
10001508:	2107fb04 	addi	r4,r4,8172
1000150c:	00026a00 	call	100026a0 <puts>
	IO_read(HPI_MAILBOX);
10001510:	01000044 	movi	r4,1
10001514:	000067c0 	call	1000067c <IO_read>
	IO_read(HPI_STATUS);
10001518:	010000c4 	movi	r4,3
1000151c:	000067c0 	call	1000067c <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001520:	01005104 	movi	r4,324
10001524:	00014800 	call	10001480 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001528:	01005104 	movi	r4,324
1000152c:	000b883a 	mov	r5,zero
10001530:	000142c0 	call	1000142c <UsbWrite>
	UsbRead (HPI_SIE1_MSG_ADR); //Debug
10001534:	01005104 	movi	r4,324
10001538:	00014800 	call	10001480 <UsbRead>

	UsbRead (HPI_SIE2_MSG_ADR);
1000153c:	01005204 	movi	r4,328
10001540:	00014800 	call	10001480 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10001544:	01005204 	movi	r4,328
10001548:	000b883a 	mov	r5,zero
1000154c:	000142c0 	call	1000142c <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR); //Debug
10001550:	01005204 	movi	r4,328
10001554:	00014800 	call	10001480 <UsbRead>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001558:	01302414 	movui	r4,49296
1000155c:	017fffd4 	movui	r5,65535
10001560:	000142c0 	call	1000142c <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10001564:	01302c14 	movui	r4,49328
10001568:	017fffd4 	movui	r5,65535
1000156c:	000142c0 	call	1000142c <UsbWrite>

}
10001570:	e037883a 	mov	sp,fp
10001574:	dfc00117 	ldw	ra,4(sp)
10001578:	df000017 	ldw	fp,0(sp)
1000157c:	dec00204 	addi	sp,sp,8
10001580:	f800283a 	ret

10001584 <UsbSetAddress>:


void UsbSetAddress()
{
10001584:	defffe04 	addi	sp,sp,-8
10001588:	dfc00115 	stw	ra,4(sp)
1000158c:	df000015 	stw	fp,0(sp)
10001590:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001594:	01000084 	movi	r4,2
10001598:	01414004 	movi	r5,1280
1000159c:	00006240 	call	10000624 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
100015a0:	0009883a 	mov	r4,zero
100015a4:	01414304 	movi	r5,1292
100015a8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100015ac:	0009883a 	mov	r4,zero
100015b0:	01400204 	movi	r5,8
100015b4:	00006240 	call	10000624 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
100015b8:	0009883a 	mov	r4,zero
100015bc:	01403404 	movi	r5,208
100015c0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);
100015c4:	0009883a 	mov	r4,zero
100015c8:	01400044 	movi	r5,1
100015cc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);
100015d0:	0009883a 	mov	r4,zero
100015d4:	014004c4 	movi	r5,19
100015d8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0514);
100015dc:	0009883a 	mov	r4,zero
100015e0:	01414504 	movi	r5,1300
100015e4:	00006240 	call	10000624 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
100015e8:	0009883a 	mov	r4,zero
100015ec:	01414004 	movi	r5,1280
100015f0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0002);
100015f4:	0009883a 	mov	r4,zero
100015f8:	01400084 	movi	r5,2
100015fc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001600:	0009883a 	mov	r4,zero
10001604:	000b883a 	mov	r5,zero
10001608:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000160c:	0009883a 	mov	r4,zero
10001610:	000b883a 	mov	r5,zero
10001614:	00006240 	call	10000624 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10001618:	0009883a 	mov	r4,zero
1000161c:	000b883a 	mov	r5,zero
10001620:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10001624:	0009883a 	mov	r4,zero
10001628:	000b883a 	mov	r5,zero
1000162c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10001630:	0009883a 	mov	r4,zero
10001634:	01402404 	movi	r5,144
10001638:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000163c:	0009883a 	mov	r4,zero
10001640:	01401044 	movi	r5,65
10001644:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001648:	0009883a 	mov	r4,zero
1000164c:	014004c4 	movi	r5,19
10001650:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001654:	0009883a 	mov	r4,zero
10001658:	000b883a 	mov	r5,zero
1000165c:	00006240 	call	10000624 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001660:	01006c04 	movi	r4,432
10001664:	01414004 	movi	r5,1280
10001668:	000142c0 	call	1000142c <UsbWrite>
}
1000166c:	e037883a 	mov	sp,fp
10001670:	dfc00117 	ldw	ra,4(sp)
10001674:	df000017 	ldw	fp,0(sp)
10001678:	dec00204 	addi	sp,sp,8
1000167c:	f800283a 	ret

10001680 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10001680:	defffe04 	addi	sp,sp,-8
10001684:	dfc00115 	stw	ra,4(sp)
10001688:	df000015 	stw	fp,0(sp)
1000168c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001690:	01000084 	movi	r4,2
10001694:	01414004 	movi	r5,1280
10001698:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000169c:	0009883a 	mov	r4,zero
100016a0:	01414304 	movi	r5,1292
100016a4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100016a8:	0009883a 	mov	r4,zero
100016ac:	01400204 	movi	r5,8
100016b0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100016b4:	0009883a 	mov	r4,zero
100016b8:	0140b404 	movi	r5,720
100016bc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);
100016c0:	0009883a 	mov	r4,zero
100016c4:	01400044 	movi	r5,1
100016c8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);
100016cc:	0009883a 	mov	r4,zero
100016d0:	014004c4 	movi	r5,19
100016d4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0514);
100016d8:	0009883a 	mov	r4,zero
100016dc:	01414504 	movi	r5,1300
100016e0:	00006240 	call	10000624 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100016e4:	0009883a 	mov	r4,zero
100016e8:	0141a004 	movi	r5,1664
100016ec:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
100016f0:	0009883a 	mov	r4,zero
100016f4:	01404004 	movi	r5,256
100016f8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);
100016fc:	0009883a 	mov	r4,zero
10001700:	000b883a 	mov	r5,zero
10001704:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);
10001708:	0009883a 	mov	r4,zero
1000170c:	01400204 	movi	r5,8
10001710:	00006240 	call	10000624 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10001714:	0009883a 	mov	r4,zero
10001718:	01414b04 	movi	r5,1324
1000171c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10001720:	0009883a 	mov	r4,zero
10001724:	01400204 	movi	r5,8
10001728:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//
1000172c:	0009883a 	mov	r4,zero
10001730:	0140a404 	movi	r5,656
10001734:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001738:	0009883a 	mov	r4,zero
1000173c:	01401044 	movi	r5,65
10001740:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001744:	0009883a 	mov	r4,zero
10001748:	014004c4 	movi	r5,19
1000174c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0520);
10001750:	0009883a 	mov	r4,zero
10001754:	01414804 	movi	r5,1312
10001758:	00006240 	call	10000624 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
1000175c:	0009883a 	mov	r4,zero
10001760:	000b883a 	mov	r5,zero
10001764:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001768:	0009883a 	mov	r4,zero
1000176c:	000b883a 	mov	r5,zero
10001770:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10001774:	0009883a 	mov	r4,zero
10001778:	01408404 	movi	r5,528
1000177c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001780:	0009883a 	mov	r4,zero
10001784:	01401044 	movi	r5,65
10001788:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000178c:	0009883a 	mov	r4,zero
10001790:	014004c4 	movi	r5,19
10001794:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001798:	0009883a 	mov	r4,zero
1000179c:	000b883a 	mov	r5,zero
100017a0:	00006240 	call	10000624 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100017a4:	01006c04 	movi	r4,432
100017a8:	01414004 	movi	r5,1280
100017ac:	000142c0 	call	1000142c <UsbWrite>
}
100017b0:	e037883a 	mov	sp,fp
100017b4:	dfc00117 	ldw	ra,4(sp)
100017b8:	df000017 	ldw	fp,0(sp)
100017bc:	dec00204 	addi	sp,sp,8
100017c0:	f800283a 	ret

100017c4 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
100017c4:	defffe04 	addi	sp,sp,-8
100017c8:	dfc00115 	stw	ra,4(sp)
100017cc:	df000015 	stw	fp,0(sp)
100017d0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100017d4:	01000084 	movi	r4,2
100017d8:	01414004 	movi	r5,1280
100017dc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x050C);
100017e0:	0009883a 	mov	r4,zero
100017e4:	01414304 	movi	r5,1292
100017e8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100017ec:	0009883a 	mov	r4,zero
100017f0:	01400204 	movi	r5,8
100017f4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100017f8:	0009883a 	mov	r4,zero
100017fc:	0140b404 	movi	r5,720
10001800:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001804:	0009883a 	mov	r4,zero
10001808:	01400044 	movi	r5,1
1000180c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001810:	0009883a 	mov	r4,zero
10001814:	014004c4 	movi	r5,19
10001818:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000181c:	0009883a 	mov	r4,zero
10001820:	01414504 	movi	r5,1300
10001824:	00006240 	call	10000624 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001828:	0009883a 	mov	r4,zero
1000182c:	0141a004 	movi	r5,1664
10001830:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10001834:	0009883a 	mov	r4,zero
10001838:	01404004 	movi	r5,256
1000183c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001840:	0009883a 	mov	r4,zero
10001844:	000b883a 	mov	r5,zero
10001848:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
1000184c:	0009883a 	mov	r4,zero
10001850:	01400484 	movi	r5,18
10001854:	00006240 	call	10000624 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001858:	0009883a 	mov	r4,zero
1000185c:	01415104 	movi	r5,1348
10001860:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001864:	0009883a 	mov	r4,zero
10001868:	01400204 	movi	r5,8
1000186c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001870:	0009883a 	mov	r4,zero
10001874:	0140a404 	movi	r5,656
10001878:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000187c:	0009883a 	mov	r4,zero
10001880:	01401044 	movi	r5,65
10001884:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001888:	0009883a 	mov	r4,zero
1000188c:	014004c4 	movi	r5,19
10001890:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001894:	0009883a 	mov	r4,zero
10001898:	01414804 	movi	r5,1312
1000189c:	00006240 	call	10000624 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100018a0:	0009883a 	mov	r4,zero
100018a4:	01415304 	movi	r5,1356
100018a8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100018ac:	0009883a 	mov	r4,zero
100018b0:	01400204 	movi	r5,8
100018b4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100018b8:	0009883a 	mov	r4,zero
100018bc:	0140a404 	movi	r5,656
100018c0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
100018c4:	0009883a 	mov	r4,zero
100018c8:	01400044 	movi	r5,1
100018cc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100018d0:	0009883a 	mov	r4,zero
100018d4:	014004c4 	movi	r5,19
100018d8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100018dc:	0009883a 	mov	r4,zero
100018e0:	01414b04 	movi	r5,1324
100018e4:	00006240 	call	10000624 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
100018e8:	0009883a 	mov	r4,zero
100018ec:	01415504 	movi	r5,1364
100018f0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
100018f4:	0009883a 	mov	r4,zero
100018f8:	01400084 	movi	r5,2
100018fc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001900:	0009883a 	mov	r4,zero
10001904:	0140a404 	movi	r5,656
10001908:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000190c:	0009883a 	mov	r4,zero
10001910:	01401044 	movi	r5,65
10001914:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001918:	0009883a 	mov	r4,zero
1000191c:	014004c4 	movi	r5,19
10001920:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001924:	0009883a 	mov	r4,zero
10001928:	01414e04 	movi	r5,1336
1000192c:	00006240 	call	10000624 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10001930:	0009883a 	mov	r4,zero
10001934:	000b883a 	mov	r5,zero
10001938:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
1000193c:	0009883a 	mov	r4,zero
10001940:	000b883a 	mov	r5,zero
10001944:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10001948:	0009883a 	mov	r4,zero
1000194c:	01408404 	movi	r5,528
10001950:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10001954:	0009883a 	mov	r4,zero
10001958:	01401044 	movi	r5,65
1000195c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001960:	0009883a 	mov	r4,zero
10001964:	014004c4 	movi	r5,19
10001968:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
1000196c:	0009883a 	mov	r4,zero
10001970:	000b883a 	mov	r5,zero
10001974:	00006240 	call	10000624 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001978:	01006c04 	movi	r4,432
1000197c:	01414004 	movi	r5,1280
10001980:	000142c0 	call	1000142c <UsbWrite>
}
10001984:	e037883a 	mov	sp,fp
10001988:	dfc00117 	ldw	ra,4(sp)
1000198c:	df000017 	ldw	fp,0(sp)
10001990:	dec00204 	addi	sp,sp,8
10001994:	f800283a 	ret

10001998 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10001998:	defffe04 	addi	sp,sp,-8
1000199c:	dfc00115 	stw	ra,4(sp)
100019a0:	df000015 	stw	fp,0(sp)
100019a4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100019a8:	01000084 	movi	r4,2
100019ac:	01414004 	movi	r5,1280
100019b0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x050C);
100019b4:	0009883a 	mov	r4,zero
100019b8:	01414304 	movi	r5,1292
100019bc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100019c0:	0009883a 	mov	r4,zero
100019c4:	01400204 	movi	r5,8
100019c8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100019cc:	0009883a 	mov	r4,zero
100019d0:	0140b404 	movi	r5,720
100019d4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);
100019d8:	0009883a 	mov	r4,zero
100019dc:	01400044 	movi	r5,1
100019e0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);
100019e4:	0009883a 	mov	r4,zero
100019e8:	014004c4 	movi	r5,19
100019ec:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0514);
100019f0:	0009883a 	mov	r4,zero
100019f4:	01414504 	movi	r5,1300
100019f8:	00006240 	call	10000624 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100019fc:	0009883a 	mov	r4,zero
10001a00:	0141a004 	movi	r5,1664
10001a04:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001a08:	0009883a 	mov	r4,zero
10001a0c:	01408004 	movi	r5,512
10001a10:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001a14:	0009883a 	mov	r4,zero
10001a18:	000b883a 	mov	r5,zero
10001a1c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10001a20:	0009883a 	mov	r4,zero
10001a24:	01400244 	movi	r5,9
10001a28:	00006240 	call	10000624 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001a2c:	0009883a 	mov	r4,zero
10001a30:	01415104 	movi	r5,1348
10001a34:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001a38:	0009883a 	mov	r4,zero
10001a3c:	01400204 	movi	r5,8
10001a40:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001a44:	0009883a 	mov	r4,zero
10001a48:	0140a404 	movi	r5,656
10001a4c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001a50:	0009883a 	mov	r4,zero
10001a54:	01401044 	movi	r5,65
10001a58:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001a5c:	0009883a 	mov	r4,zero
10001a60:	014004c4 	movi	r5,19
10001a64:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001a68:	0009883a 	mov	r4,zero
10001a6c:	01414804 	movi	r5,1312
10001a70:	00006240 	call	10000624 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001a74:	0009883a 	mov	r4,zero
10001a78:	01415304 	movi	r5,1356
10001a7c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10001a80:	0009883a 	mov	r4,zero
10001a84:	01400044 	movi	r5,1
10001a88:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001a8c:	0009883a 	mov	r4,zero
10001a90:	0140a404 	movi	r5,656
10001a94:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001a98:	0009883a 	mov	r4,zero
10001a9c:	01400044 	movi	r5,1
10001aa0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001aa4:	0009883a 	mov	r4,zero
10001aa8:	014004c4 	movi	r5,19
10001aac:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001ab0:	0009883a 	mov	r4,zero
10001ab4:	01414b04 	movi	r5,1324
10001ab8:	00006240 	call	10000624 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001abc:	0009883a 	mov	r4,zero
10001ac0:	000b883a 	mov	r5,zero
10001ac4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001ac8:	0009883a 	mov	r4,zero
10001acc:	000b883a 	mov	r5,zero
10001ad0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001ad4:	0009883a 	mov	r4,zero
10001ad8:	01408404 	movi	r5,528
10001adc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001ae0:	0009883a 	mov	r4,zero
10001ae4:	01401044 	movi	r5,65
10001ae8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001aec:	0009883a 	mov	r4,zero
10001af0:	014004c4 	movi	r5,19
10001af4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001af8:	0009883a 	mov	r4,zero
10001afc:	000b883a 	mov	r5,zero
10001b00:	00006240 	call	10000624 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001b04:	01006c04 	movi	r4,432
10001b08:	01414004 	movi	r5,1280
10001b0c:	000142c0 	call	1000142c <UsbWrite>
}
10001b10:	e037883a 	mov	sp,fp
10001b14:	dfc00117 	ldw	ra,4(sp)
10001b18:	df000017 	ldw	fp,0(sp)
10001b1c:	dec00204 	addi	sp,sp,8
10001b20:	f800283a 	ret

10001b24 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10001b24:	defffe04 	addi	sp,sp,-8
10001b28:	dfc00115 	stw	ra,4(sp)
10001b2c:	df000015 	stw	fp,0(sp)
10001b30:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001b34:	01000084 	movi	r4,2
10001b38:	01414004 	movi	r5,1280
10001b3c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001b40:	0009883a 	mov	r4,zero
10001b44:	01414304 	movi	r5,1292
10001b48:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001b4c:	0009883a 	mov	r4,zero
10001b50:	01400204 	movi	r5,8
10001b54:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001b58:	0009883a 	mov	r4,zero
10001b5c:	0140b404 	movi	r5,720
10001b60:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001b64:	0009883a 	mov	r4,zero
10001b68:	01400044 	movi	r5,1
10001b6c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b70:	0009883a 	mov	r4,zero
10001b74:	014004c4 	movi	r5,19
10001b78:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001b7c:	0009883a 	mov	r4,zero
10001b80:	01414504 	movi	r5,1300
10001b84:	00006240 	call	10000624 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001b88:	0009883a 	mov	r4,zero
10001b8c:	0141a004 	movi	r5,1664
10001b90:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001b94:	0009883a 	mov	r4,zero
10001b98:	01408004 	movi	r5,512
10001b9c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001ba0:	0009883a 	mov	r4,zero
10001ba4:	000b883a 	mov	r5,zero
10001ba8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10001bac:	0009883a 	mov	r4,zero
10001bb0:	01403fc4 	movi	r5,255
10001bb4:	00006240 	call	10000624 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10001bb8:	0009883a 	mov	r4,zero
10001bbc:	01415704 	movi	r5,1372
10001bc0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001bc4:	0009883a 	mov	r4,zero
10001bc8:	01400204 	movi	r5,8
10001bcc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001bd0:	0009883a 	mov	r4,zero
10001bd4:	0140a404 	movi	r5,656
10001bd8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001bdc:	0009883a 	mov	r4,zero
10001be0:	01401044 	movi	r5,65
10001be4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001be8:	0009883a 	mov	r4,zero
10001bec:	014004c4 	movi	r5,19
10001bf0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001bf4:	0009883a 	mov	r4,zero
10001bf8:	01414804 	movi	r5,1312
10001bfc:	00006240 	call	10000624 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10001c00:	0009883a 	mov	r4,zero
10001c04:	01415904 	movi	r5,1380
10001c08:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001c0c:	0009883a 	mov	r4,zero
10001c10:	01400204 	movi	r5,8
10001c14:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001c18:	0009883a 	mov	r4,zero
10001c1c:	0140a404 	movi	r5,656
10001c20:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001c24:	0009883a 	mov	r4,zero
10001c28:	01400044 	movi	r5,1
10001c2c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001c30:	0009883a 	mov	r4,zero
10001c34:	014004c4 	movi	r5,19
10001c38:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001c3c:	0009883a 	mov	r4,zero
10001c40:	01414b04 	movi	r5,1324
10001c44:	00006240 	call	10000624 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10001c48:	0009883a 	mov	r4,zero
10001c4c:	01415b04 	movi	r5,1388
10001c50:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001c54:	0009883a 	mov	r4,zero
10001c58:	01400204 	movi	r5,8
10001c5c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001c60:	0009883a 	mov	r4,zero
10001c64:	0140a404 	movi	r5,656
10001c68:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001c6c:	0009883a 	mov	r4,zero
10001c70:	01401044 	movi	r5,65
10001c74:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001c78:	0009883a 	mov	r4,zero
10001c7c:	014004c4 	movi	r5,19
10001c80:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001c84:	0009883a 	mov	r4,zero
10001c88:	01414e04 	movi	r5,1336
10001c8c:	00006240 	call	10000624 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10001c90:	0009883a 	mov	r4,zero
10001c94:	01415d04 	movi	r5,1396
10001c98:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001c9c:	0009883a 	mov	r4,zero
10001ca0:	01400204 	movi	r5,8
10001ca4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001ca8:	0009883a 	mov	r4,zero
10001cac:	0140a404 	movi	r5,656
10001cb0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001cb4:	0009883a 	mov	r4,zero
10001cb8:	01400044 	movi	r5,1
10001cbc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001cc0:	0009883a 	mov	r4,zero
10001cc4:	014004c4 	movi	r5,19
10001cc8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001ccc:	0009883a 	mov	r4,zero
10001cd0:	01415104 	movi	r5,1348
10001cd4:	00006240 	call	10000624 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10001cd8:	0009883a 	mov	r4,zero
10001cdc:	01415f04 	movi	r5,1404
10001ce0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10001ce4:	0009883a 	mov	r4,zero
10001ce8:	01400084 	movi	r5,2
10001cec:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001cf0:	0009883a 	mov	r4,zero
10001cf4:	0140a404 	movi	r5,656
10001cf8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001cfc:	0009883a 	mov	r4,zero
10001d00:	01401044 	movi	r5,65
10001d04:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001d08:	0009883a 	mov	r4,zero
10001d0c:	014004c4 	movi	r5,19
10001d10:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001d14:	0009883a 	mov	r4,zero
10001d18:	01415404 	movi	r5,1360
10001d1c:	00006240 	call	10000624 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10001d20:	0009883a 	mov	r4,zero
10001d24:	000b883a 	mov	r5,zero
10001d28:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001d2c:	0009883a 	mov	r4,zero
10001d30:	000b883a 	mov	r5,zero
10001d34:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10001d38:	0009883a 	mov	r4,zero
10001d3c:	01408404 	movi	r5,528
10001d40:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10001d44:	0009883a 	mov	r4,zero
10001d48:	01401044 	movi	r5,65
10001d4c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001d50:	0009883a 	mov	r4,zero
10001d54:	014004c4 	movi	r5,19
10001d58:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001d5c:	0009883a 	mov	r4,zero
10001d60:	000b883a 	mov	r5,zero
10001d64:	00006240 	call	10000624 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001d68:	01006c04 	movi	r4,432
10001d6c:	01414004 	movi	r5,1280
10001d70:	000142c0 	call	1000142c <UsbWrite>
}
10001d74:	e037883a 	mov	sp,fp
10001d78:	dfc00117 	ldw	ra,4(sp)
10001d7c:	df000017 	ldw	fp,0(sp)
10001d80:	dec00204 	addi	sp,sp,8
10001d84:	f800283a 	ret

10001d88 <UsbSetConfig>:

void UsbSetConfig()
{
10001d88:	defffe04 	addi	sp,sp,-8
10001d8c:	dfc00115 	stw	ra,4(sp)
10001d90:	df000015 	stw	fp,0(sp)
10001d94:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001d98:	01000084 	movi	r4,2
10001d9c:	01414004 	movi	r5,1280
10001da0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001da4:	0009883a 	mov	r4,zero
10001da8:	01414304 	movi	r5,1292
10001dac:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001db0:	0009883a 	mov	r4,zero
10001db4:	01400204 	movi	r5,8
10001db8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001dbc:	0009883a 	mov	r4,zero
10001dc0:	0140b404 	movi	r5,720
10001dc4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001dc8:	0009883a 	mov	r4,zero
10001dcc:	01400044 	movi	r5,1
10001dd0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001dd4:	0009883a 	mov	r4,zero
10001dd8:	014004c4 	movi	r5,19
10001ddc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001de0:	0009883a 	mov	r4,zero
10001de4:	01414504 	movi	r5,1300
10001de8:	00006240 	call	10000624 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001dec:	0009883a 	mov	r4,zero
10001df0:	01424004 	movi	r5,2304
10001df4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10001df8:	0009883a 	mov	r4,zero
10001dfc:	01400044 	movi	r5,1
10001e00:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001e04:	0009883a 	mov	r4,zero
10001e08:	000b883a 	mov	r5,zero
10001e0c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001e10:	0009883a 	mov	r4,zero
10001e14:	000b883a 	mov	r5,zero
10001e18:	00006240 	call	10000624 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001e1c:	0009883a 	mov	r4,zero
10001e20:	000b883a 	mov	r5,zero
10001e24:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001e28:	0009883a 	mov	r4,zero
10001e2c:	000b883a 	mov	r5,zero
10001e30:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001e34:	0009883a 	mov	r4,zero
10001e38:	0140a404 	movi	r5,656
10001e3c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001e40:	0009883a 	mov	r4,zero
10001e44:	01401044 	movi	r5,65
10001e48:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001e4c:	0009883a 	mov	r4,zero
10001e50:	014004c4 	movi	r5,19
10001e54:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001e58:	0009883a 	mov	r4,zero
10001e5c:	000b883a 	mov	r5,zero
10001e60:	00006240 	call	10000624 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001e64:	01006c04 	movi	r4,432
10001e68:	01414004 	movi	r5,1280
10001e6c:	000142c0 	call	1000142c <UsbWrite>

}
10001e70:	e037883a 	mov	sp,fp
10001e74:	dfc00117 	ldw	ra,4(sp)
10001e78:	df000017 	ldw	fp,0(sp)
10001e7c:	dec00204 	addi	sp,sp,8
10001e80:	f800283a 	ret

10001e84 <UsbClassRequest>:

void UsbClassRequest()
{
10001e84:	defffe04 	addi	sp,sp,-8
10001e88:	dfc00115 	stw	ra,4(sp)
10001e8c:	df000015 	stw	fp,0(sp)
10001e90:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001e94:	01000084 	movi	r4,2
10001e98:	01414004 	movi	r5,1280
10001e9c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001ea0:	0009883a 	mov	r4,zero
10001ea4:	01414304 	movi	r5,1292
10001ea8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001eac:	0009883a 	mov	r4,zero
10001eb0:	01400204 	movi	r5,8
10001eb4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001eb8:	0009883a 	mov	r4,zero
10001ebc:	0140b404 	movi	r5,720
10001ec0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001ec4:	0009883a 	mov	r4,zero
10001ec8:	01400044 	movi	r5,1
10001ecc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001ed0:	0009883a 	mov	r4,zero
10001ed4:	014004c4 	movi	r5,19
10001ed8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001edc:	0009883a 	mov	r4,zero
10001ee0:	01414504 	movi	r5,1300
10001ee4:	00006240 	call	10000624 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001ee8:	0009883a 	mov	r4,zero
10001eec:	01428844 	movi	r5,2593
10001ef0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10001ef4:	0009883a 	mov	r4,zero
10001ef8:	000b883a 	mov	r5,zero
10001efc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001f00:	0009883a 	mov	r4,zero
10001f04:	000b883a 	mov	r5,zero
10001f08:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001f0c:	0009883a 	mov	r4,zero
10001f10:	000b883a 	mov	r5,zero
10001f14:	00006240 	call	10000624 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001f18:	0009883a 	mov	r4,zero
10001f1c:	000b883a 	mov	r5,zero
10001f20:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001f24:	0009883a 	mov	r4,zero
10001f28:	000b883a 	mov	r5,zero
10001f2c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001f30:	0009883a 	mov	r4,zero
10001f34:	0140a404 	movi	r5,656
10001f38:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001f3c:	0009883a 	mov	r4,zero
10001f40:	01401044 	movi	r5,65
10001f44:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001f48:	0009883a 	mov	r4,zero
10001f4c:	014004c4 	movi	r5,19
10001f50:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001f54:	0009883a 	mov	r4,zero
10001f58:	000b883a 	mov	r5,zero
10001f5c:	00006240 	call	10000624 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001f60:	01006c04 	movi	r4,432
10001f64:	01414004 	movi	r5,1280
10001f68:	000142c0 	call	1000142c <UsbWrite>
}
10001f6c:	e037883a 	mov	sp,fp
10001f70:	dfc00117 	ldw	ra,4(sp)
10001f74:	df000017 	ldw	fp,0(sp)
10001f78:	dec00204 	addi	sp,sp,8
10001f7c:	f800283a 	ret

10001f80 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10001f80:	defffe04 	addi	sp,sp,-8
10001f84:	dfc00115 	stw	ra,4(sp)
10001f88:	df000015 	stw	fp,0(sp)
10001f8c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001f90:	01000084 	movi	r4,2
10001f94:	01414004 	movi	r5,1280
10001f98:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001f9c:	0009883a 	mov	r4,zero
10001fa0:	01414304 	movi	r5,1292
10001fa4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001fa8:	0009883a 	mov	r4,zero
10001fac:	01400204 	movi	r5,8
10001fb0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001fb4:	0009883a 	mov	r4,zero
10001fb8:	0140b404 	movi	r5,720
10001fbc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001fc0:	0009883a 	mov	r4,zero
10001fc4:	01400044 	movi	r5,1
10001fc8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001fcc:	0009883a 	mov	r4,zero
10001fd0:	014004c4 	movi	r5,19
10001fd4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001fd8:	0009883a 	mov	r4,zero
10001fdc:	01414504 	movi	r5,1300
10001fe0:	00006240 	call	10000624 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001fe4:	0009883a 	mov	r4,zero
10001fe8:	0141a044 	movi	r5,1665
10001fec:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001ff0:	0009883a 	mov	r4,zero
10001ff4:	01484004 	movi	r5,8448
10001ff8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001ffc:	0009883a 	mov	r4,zero
10002000:	000b883a 	mov	r5,zero
10002004:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002008:	0009883a 	mov	r4,zero
1000200c:	01401ec4 	movi	r5,123
10002010:	00006240 	call	10000624 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002014:	0009883a 	mov	r4,zero
10002018:	01415104 	movi	r5,1348
1000201c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002020:	0009883a 	mov	r4,zero
10002024:	01400204 	movi	r5,8
10002028:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000202c:	0009883a 	mov	r4,zero
10002030:	0140a404 	movi	r5,656
10002034:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002038:	0009883a 	mov	r4,zero
1000203c:	01401044 	movi	r5,65
10002040:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002044:	0009883a 	mov	r4,zero
10002048:	014004c4 	movi	r5,19
1000204c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002050:	0009883a 	mov	r4,zero
10002054:	01414804 	movi	r5,1312
10002058:	00006240 	call	10000624 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
1000205c:	0009883a 	mov	r4,zero
10002060:	000b883a 	mov	r5,zero
10002064:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002068:	0009883a 	mov	r4,zero
1000206c:	000b883a 	mov	r5,zero
10002070:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10002074:	0009883a 	mov	r4,zero
10002078:	01408404 	movi	r5,528
1000207c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002080:	0009883a 	mov	r4,zero
10002084:	01401044 	movi	r5,65
10002088:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000208c:	0009883a 	mov	r4,zero
10002090:	014004c4 	movi	r5,19
10002094:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002098:	0009883a 	mov	r4,zero
1000209c:	000b883a 	mov	r5,zero
100020a0:	00006240 	call	10000624 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100020a4:	01006c04 	movi	r4,432
100020a8:	01414004 	movi	r5,1280
100020ac:	000142c0 	call	1000142c <UsbWrite>

}
100020b0:	e037883a 	mov	sp,fp
100020b4:	dfc00117 	ldw	ra,4(sp)
100020b8:	df000017 	ldw	fp,0(sp)
100020bc:	dec00204 	addi	sp,sp,8
100020c0:	f800283a 	ret

100020c4 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
100020c4:	defffe04 	addi	sp,sp,-8
100020c8:	dfc00115 	stw	ra,4(sp)
100020cc:	df000015 	stw	fp,0(sp)
100020d0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100020d4:	01000084 	movi	r4,2
100020d8:	01414004 	movi	r5,1280
100020dc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x050C);
100020e0:	0009883a 	mov	r4,zero
100020e4:	01414304 	movi	r5,1292
100020e8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100020ec:	0009883a 	mov	r4,zero
100020f0:	01400204 	movi	r5,8
100020f4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100020f8:	0009883a 	mov	r4,zero
100020fc:	0140b404 	movi	r5,720
10002100:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002104:	0009883a 	mov	r4,zero
10002108:	01400044 	movi	r5,1
1000210c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002110:	0009883a 	mov	r4,zero
10002114:	014004c4 	movi	r5,19
10002118:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000211c:	0009883a 	mov	r4,zero
10002120:	01414504 	movi	r5,1300
10002124:	00006240 	call	10000624 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10002128:	0009883a 	mov	r4,zero
1000212c:	0141a044 	movi	r5,1665
10002130:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10002134:	0009883a 	mov	r4,zero
10002138:	01488004 	movi	r5,8704
1000213c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002140:	0009883a 	mov	r4,zero
10002144:	000b883a 	mov	r5,zero
10002148:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
1000214c:	0009883a 	mov	r4,zero
10002150:	01401ec4 	movi	r5,123
10002154:	00006240 	call	10000624 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10002158:	0009883a 	mov	r4,zero
1000215c:	01416004 	movi	r5,1408
10002160:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002164:	0009883a 	mov	r4,zero
10002168:	01400204 	movi	r5,8
1000216c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002170:	0009883a 	mov	r4,zero
10002174:	0140a404 	movi	r5,656
10002178:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000217c:	0009883a 	mov	r4,zero
10002180:	01401044 	movi	r5,65
10002184:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002188:	0009883a 	mov	r4,zero
1000218c:	014004c4 	movi	r5,19
10002190:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002194:	0009883a 	mov	r4,zero
10002198:	01414804 	movi	r5,1312
1000219c:	00006240 	call	10000624 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
100021a0:	0009883a 	mov	r4,zero
100021a4:	01416204 	movi	r5,1416
100021a8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100021ac:	0009883a 	mov	r4,zero
100021b0:	01400204 	movi	r5,8
100021b4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100021b8:	0009883a 	mov	r4,zero
100021bc:	0140a404 	movi	r5,656
100021c0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100021c4:	0009883a 	mov	r4,zero
100021c8:	01400044 	movi	r5,1
100021cc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100021d0:	0009883a 	mov	r4,zero
100021d4:	014004c4 	movi	r5,19
100021d8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100021dc:	0009883a 	mov	r4,zero
100021e0:	01414b04 	movi	r5,1324
100021e4:	00006240 	call	10000624 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
100021e8:	0009883a 	mov	r4,zero
100021ec:	01416404 	movi	r5,1424
100021f0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100021f4:	0009883a 	mov	r4,zero
100021f8:	01400204 	movi	r5,8
100021fc:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002200:	0009883a 	mov	r4,zero
10002204:	0140a404 	movi	r5,656
10002208:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000220c:	0009883a 	mov	r4,zero
10002210:	01401044 	movi	r5,65
10002214:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002218:	0009883a 	mov	r4,zero
1000221c:	014004c4 	movi	r5,19
10002220:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002224:	0009883a 	mov	r4,zero
10002228:	01414e04 	movi	r5,1336
1000222c:	00006240 	call	10000624 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10002230:	0009883a 	mov	r4,zero
10002234:	01416604 	movi	r5,1432
10002238:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
1000223c:	0009883a 	mov	r4,zero
10002240:	01400204 	movi	r5,8
10002244:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002248:	0009883a 	mov	r4,zero
1000224c:	0140a404 	movi	r5,656
10002250:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002254:	0009883a 	mov	r4,zero
10002258:	01400044 	movi	r5,1
1000225c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002260:	0009883a 	mov	r4,zero
10002264:	014004c4 	movi	r5,19
10002268:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
1000226c:	0009883a 	mov	r4,zero
10002270:	01415104 	movi	r5,1348
10002274:	00006240 	call	10000624 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10002278:	0009883a 	mov	r4,zero
1000227c:	01416804 	movi	r5,1440
10002280:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002284:	0009883a 	mov	r4,zero
10002288:	01400204 	movi	r5,8
1000228c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002290:	0009883a 	mov	r4,zero
10002294:	0140a404 	movi	r5,656
10002298:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
1000229c:	0009883a 	mov	r4,zero
100022a0:	01401044 	movi	r5,65
100022a4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100022a8:	0009883a 	mov	r4,zero
100022ac:	014004c4 	movi	r5,19
100022b0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100022b4:	0009883a 	mov	r4,zero
100022b8:	01415404 	movi	r5,1360
100022bc:	00006240 	call	10000624 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
100022c0:	0009883a 	mov	r4,zero
100022c4:	01416a04 	movi	r5,1448
100022c8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100022cc:	0009883a 	mov	r4,zero
100022d0:	01400204 	movi	r5,8
100022d4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100022d8:	0009883a 	mov	r4,zero
100022dc:	0140a404 	movi	r5,656
100022e0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100022e4:	0009883a 	mov	r4,zero
100022e8:	01400044 	movi	r5,1
100022ec:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100022f0:	0009883a 	mov	r4,zero
100022f4:	014004c4 	movi	r5,19
100022f8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
100022fc:	0009883a 	mov	r4,zero
10002300:	01415704 	movi	r5,1372
10002304:	00006240 	call	10000624 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10002308:	0009883a 	mov	r4,zero
1000230c:	01416c04 	movi	r5,1456
10002310:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002314:	0009883a 	mov	r4,zero
10002318:	01400204 	movi	r5,8
1000231c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10002320:	0009883a 	mov	r4,zero
10002324:	0140a404 	movi	r5,656
10002328:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
1000232c:	0009883a 	mov	r4,zero
10002330:	01401044 	movi	r5,65
10002334:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002338:	0009883a 	mov	r4,zero
1000233c:	014004c4 	movi	r5,19
10002340:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10002344:	0009883a 	mov	r4,zero
10002348:	01415a04 	movi	r5,1384
1000234c:	00006240 	call	10000624 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10002350:	0009883a 	mov	r4,zero
10002354:	01416e04 	movi	r5,1464
10002358:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
1000235c:	0009883a 	mov	r4,zero
10002360:	014000c4 	movi	r5,3
10002364:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002368:	0009883a 	mov	r4,zero
1000236c:	0140a404 	movi	r5,656
10002370:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002374:	0009883a 	mov	r4,zero
10002378:	01400044 	movi	r5,1
1000237c:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10002380:	0009883a 	mov	r4,zero
10002384:	014004c4 	movi	r5,19
10002388:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
1000238c:	0009883a 	mov	r4,zero
10002390:	01415d04 	movi	r5,1396
10002394:	00006240 	call	10000624 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10002398:	0009883a 	mov	r4,zero
1000239c:	000b883a 	mov	r5,zero
100023a0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100023a4:	0009883a 	mov	r4,zero
100023a8:	000b883a 	mov	r5,zero
100023ac:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
100023b0:	0009883a 	mov	r4,zero
100023b4:	01408404 	movi	r5,528
100023b8:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100023bc:	0009883a 	mov	r4,zero
100023c0:	01401044 	movi	r5,65
100023c4:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100023c8:	0009883a 	mov	r4,zero
100023cc:	014004c4 	movi	r5,19
100023d0:	00006240 	call	10000624 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100023d4:	0009883a 	mov	r4,zero
100023d8:	000b883a 	mov	r5,zero
100023dc:	00006240 	call	10000624 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100023e0:	01006c04 	movi	r4,432
100023e4:	01414004 	movi	r5,1280
100023e8:	000142c0 	call	1000142c <UsbWrite>

}
100023ec:	e037883a 	mov	sp,fp
100023f0:	dfc00117 	ldw	ra,4(sp)
100023f4:	df000017 	ldw	fp,0(sp)
100023f8:	dec00204 	addi	sp,sp,8
100023fc:	f800283a 	ret

10002400 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10002400:	defffd04 	addi	sp,sp,-12
10002404:	dfc00215 	stw	ra,8(sp)
10002408:	df000115 	stw	fp,4(sp)
1000240c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10002410:	01005104 	movi	r4,324
10002414:	00014800 	call	10001480 <UsbRead>
10002418:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
1000241c:	01005104 	movi	r4,324
10002420:	000b883a 	mov	r5,zero
10002424:	000142c0 	call	1000142c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002428:	00000d06 	br	10002460 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
1000242c:	e0bfff0b 	ldhu	r2,-4(fp)
10002430:	10000526 	beq	r2,zero,10002448 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10002434:	e0bfff0b 	ldhu	r2,-4(fp)
10002438:	01040074 	movhi	r4,4097
1000243c:	21080404 	addi	r4,r4,8208
10002440:	100b883a 	mov	r5,r2
10002444:	00025ac0 	call	100025ac <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002448:	01005104 	movi	r4,324
1000244c:	00014800 	call	10001480 <UsbRead>
10002450:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002454:	01005104 	movi	r4,324
10002458:	000b883a 	mov	r5,zero
1000245c:	000142c0 	call	1000142c <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002460:	e0bfff0b 	ldhu	r2,-4(fp)
10002464:	10840018 	cmpnei	r2,r2,4096
10002468:	103ff01e 	bne	r2,zero,1000242c <__alt_data_end+0xf800242c>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
1000246c:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002470:	e037883a 	mov	sp,fp
10002474:	dfc00117 	ldw	ra,4(sp)
10002478:	df000017 	ldw	fp,0(sp)
1000247c:	dec00204 	addi	sp,sp,8
10002480:	f800283a 	ret

10002484 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10002484:	defffd04 	addi	sp,sp,-12
10002488:	dfc00215 	stw	ra,8(sp)
1000248c:	df000115 	stw	fp,4(sp)
10002490:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10002494:	010000c4 	movi	r4,3
10002498:	000067c0 	call	1000067c <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
1000249c:	01005104 	movi	r4,324
100024a0:	00014800 	call	10001480 <UsbRead>
100024a4:	10bfffcc 	andi	r2,r2,65535
100024a8:	10840018 	cmpnei	r2,r2,4096
100024ac:	1000091e 	bne	r2,zero,100024d4 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100024b0:	01005104 	movi	r4,324
100024b4:	000b883a 	mov	r5,zero
100024b8:	000142c0 	call	1000142c <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100024bc:	0001883a 	nop
100024c0:	010000c4 	movi	r4,3
100024c4:	000067c0 	call	1000067c <IO_read>
100024c8:	10bfffcc 	andi	r2,r2,65535
100024cc:	1080040c 	andi	r2,r2,16
100024d0:	103ffb26 	beq	r2,zero,100024c0 <__alt_data_end+0xf80024c0>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
100024d4:	01000084 	movi	r4,2
100024d8:	01414204 	movi	r5,1288
100024dc:	00006240 	call	10000624 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100024e0:	0009883a 	mov	r4,zero
100024e4:	000067c0 	call	1000067c <IO_read>
100024e8:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
100024ec:	e0bfff0b 	ldhu	r2,-4(fp)
}
100024f0:	e037883a 	mov	sp,fp
100024f4:	dfc00117 	ldw	ra,4(sp)
100024f8:	df000017 	ldw	fp,0(sp)
100024fc:	dec00204 	addi	sp,sp,8
10002500:	f800283a 	ret

10002504 <UsbPrintMem>:


void UsbPrintMem()
{
10002504:	defffc04 	addi	sp,sp,-16
10002508:	dfc00315 	stw	ra,12(sp)
1000250c:	df000215 	stw	fp,8(sp)
10002510:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10002514:	01000084 	movi	r4,2
10002518:	01414004 	movi	r5,1280
1000251c:	00006240 	call	10000624 <IO_write>
	for (i = 0; i <= 200; i += 2)
10002520:	e03ffe15 	stw	zero,-8(fp)
10002524:	00000e06 	br	10002560 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10002528:	0009883a 	mov	r4,zero
1000252c:	000067c0 	call	1000067c <IO_read>
10002530:	10bfffcc 	andi	r2,r2,65535
10002534:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10002538:	e0bffe17 	ldw	r2,-8(fp)
1000253c:	10814004 	addi	r2,r2,1280
10002540:	01040074 	movhi	r4,4097
10002544:	21080c04 	addi	r4,r4,8240
10002548:	100b883a 	mov	r5,r2
1000254c:	e1bfff17 	ldw	r6,-4(fp)
10002550:	00025ac0 	call	100025ac <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10002554:	e0bffe17 	ldw	r2,-8(fp)
10002558:	10800084 	addi	r2,r2,2
1000255c:	e0bffe15 	stw	r2,-8(fp)
10002560:	e0bffe17 	ldw	r2,-8(fp)
10002564:	10803250 	cmplti	r2,r2,201
10002568:	103fef1e 	bne	r2,zero,10002528 <__alt_data_end+0xf8002528>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
1000256c:	e037883a 	mov	sp,fp
10002570:	dfc00117 	ldw	ra,4(sp)
10002574:	df000017 	ldw	fp,0(sp)
10002578:	dec00204 	addi	sp,sp,8
1000257c:	f800283a 	ret

10002580 <_printf_r>:
10002580:	defffd04 	addi	sp,sp,-12
10002584:	dfc00015 	stw	ra,0(sp)
10002588:	d9800115 	stw	r6,4(sp)
1000258c:	d9c00215 	stw	r7,8(sp)
10002590:	280d883a 	mov	r6,r5
10002594:	21400217 	ldw	r5,8(r4)
10002598:	d9c00104 	addi	r7,sp,4
1000259c:	00027c80 	call	100027c8 <___vfprintf_internal_r>
100025a0:	dfc00017 	ldw	ra,0(sp)
100025a4:	dec00304 	addi	sp,sp,12
100025a8:	f800283a 	ret

100025ac <printf>:
100025ac:	defffc04 	addi	sp,sp,-16
100025b0:	dfc00015 	stw	ra,0(sp)
100025b4:	d9400115 	stw	r5,4(sp)
100025b8:	d9800215 	stw	r6,8(sp)
100025bc:	d9c00315 	stw	r7,12(sp)
100025c0:	00840074 	movhi	r2,4097
100025c4:	108f7d04 	addi	r2,r2,15860
100025c8:	10800017 	ldw	r2,0(r2)
100025cc:	200b883a 	mov	r5,r4
100025d0:	d9800104 	addi	r6,sp,4
100025d4:	11000217 	ldw	r4,8(r2)
100025d8:	00048c40 	call	100048c4 <__vfprintf_internal>
100025dc:	dfc00017 	ldw	ra,0(sp)
100025e0:	dec00404 	addi	sp,sp,16
100025e4:	f800283a 	ret

100025e8 <_puts_r>:
100025e8:	defff604 	addi	sp,sp,-40
100025ec:	dc000715 	stw	r16,28(sp)
100025f0:	2021883a 	mov	r16,r4
100025f4:	2809883a 	mov	r4,r5
100025f8:	dc400815 	stw	r17,32(sp)
100025fc:	dfc00915 	stw	ra,36(sp)
10002600:	2823883a 	mov	r17,r5
10002604:	00027300 	call	10002730 <strlen>
10002608:	00c40074 	movhi	r3,4097
1000260c:	18cf7d04 	addi	r3,r3,15860
10002610:	18c00017 	ldw	r3,0(r3)
10002614:	11000044 	addi	r4,r2,1
10002618:	d8800115 	stw	r2,4(sp)
1000261c:	18c00217 	ldw	r3,8(r3)
10002620:	01440074 	movhi	r5,4097
10002624:	29481104 	addi	r5,r5,8260
10002628:	1880030b 	ldhu	r2,12(r3)
1000262c:	d9400215 	stw	r5,8(sp)
10002630:	d9000615 	stw	r4,24(sp)
10002634:	01400044 	movi	r5,1
10002638:	01000084 	movi	r4,2
1000263c:	d9000515 	stw	r4,20(sp)
10002640:	dc400015 	stw	r17,0(sp)
10002644:	d9400315 	stw	r5,12(sp)
10002648:	dec00415 	stw	sp,16(sp)
1000264c:	1108000c 	andi	r4,r2,8192
10002650:	2000061e 	bne	r4,zero,1000266c <_puts_r+0x84>
10002654:	19401917 	ldw	r5,100(r3)
10002658:	0137ffc4 	movi	r4,-8193
1000265c:	10880014 	ori	r2,r2,8192
10002660:	2908703a 	and	r4,r5,r4
10002664:	1880030d 	sth	r2,12(r3)
10002668:	19001915 	stw	r4,100(r3)
1000266c:	81400217 	ldw	r5,8(r16)
10002670:	8009883a 	mov	r4,r16
10002674:	d9800404 	addi	r6,sp,16
10002678:	0006d880 	call	10006d88 <__sfvwrite_r>
1000267c:	1000061e 	bne	r2,zero,10002698 <_puts_r+0xb0>
10002680:	00800284 	movi	r2,10
10002684:	dfc00917 	ldw	ra,36(sp)
10002688:	dc400817 	ldw	r17,32(sp)
1000268c:	dc000717 	ldw	r16,28(sp)
10002690:	dec00a04 	addi	sp,sp,40
10002694:	f800283a 	ret
10002698:	00bfffc4 	movi	r2,-1
1000269c:	003ff906 	br	10002684 <__alt_data_end+0xf8002684>

100026a0 <puts>:
100026a0:	00840074 	movhi	r2,4097
100026a4:	108f7d04 	addi	r2,r2,15860
100026a8:	200b883a 	mov	r5,r4
100026ac:	11000017 	ldw	r4,0(r2)
100026b0:	00025e81 	jmpi	100025e8 <_puts_r>

100026b4 <srand>:
100026b4:	00840074 	movhi	r2,4097
100026b8:	108f7d04 	addi	r2,r2,15860
100026bc:	10800017 	ldw	r2,0(r2)
100026c0:	11002915 	stw	r4,164(r2)
100026c4:	10002a15 	stw	zero,168(r2)
100026c8:	f800283a 	ret

100026cc <rand>:
100026cc:	00840074 	movhi	r2,4097
100026d0:	defffe04 	addi	sp,sp,-8
100026d4:	108f7d04 	addi	r2,r2,15860
100026d8:	dc000015 	stw	r16,0(sp)
100026dc:	14000017 	ldw	r16,0(r2)
100026e0:	dfc00115 	stw	ra,4(sp)
100026e4:	01932574 	movhi	r6,19605
100026e8:	81002917 	ldw	r4,164(r16)
100026ec:	81402a17 	ldw	r5,168(r16)
100026f0:	01d614b4 	movhi	r7,22610
100026f4:	319fcb44 	addi	r6,r6,32557
100026f8:	39fd0b44 	addi	r7,r7,-3027
100026fc:	000b9b40 	call	1000b9b4 <__muldi3>
10002700:	11000044 	addi	r4,r2,1
10002704:	2085803a 	cmpltu	r2,r4,r2
10002708:	10c7883a 	add	r3,r2,r3
1000270c:	00a00034 	movhi	r2,32768
10002710:	10bfffc4 	addi	r2,r2,-1
10002714:	1884703a 	and	r2,r3,r2
10002718:	81002915 	stw	r4,164(r16)
1000271c:	80c02a15 	stw	r3,168(r16)
10002720:	dfc00117 	ldw	ra,4(sp)
10002724:	dc000017 	ldw	r16,0(sp)
10002728:	dec00204 	addi	sp,sp,8
1000272c:	f800283a 	ret

10002730 <strlen>:
10002730:	208000cc 	andi	r2,r4,3
10002734:	10002026 	beq	r2,zero,100027b8 <strlen+0x88>
10002738:	20800007 	ldb	r2,0(r4)
1000273c:	10002026 	beq	r2,zero,100027c0 <strlen+0x90>
10002740:	2005883a 	mov	r2,r4
10002744:	00000206 	br	10002750 <strlen+0x20>
10002748:	10c00007 	ldb	r3,0(r2)
1000274c:	18001826 	beq	r3,zero,100027b0 <strlen+0x80>
10002750:	10800044 	addi	r2,r2,1
10002754:	10c000cc 	andi	r3,r2,3
10002758:	183ffb1e 	bne	r3,zero,10002748 <__alt_data_end+0xf8002748>
1000275c:	10c00017 	ldw	r3,0(r2)
10002760:	01ffbff4 	movhi	r7,65279
10002764:	39ffbfc4 	addi	r7,r7,-257
10002768:	00ca303a 	nor	r5,zero,r3
1000276c:	01a02074 	movhi	r6,32897
10002770:	19c7883a 	add	r3,r3,r7
10002774:	31a02004 	addi	r6,r6,-32640
10002778:	1946703a 	and	r3,r3,r5
1000277c:	1986703a 	and	r3,r3,r6
10002780:	1800091e 	bne	r3,zero,100027a8 <strlen+0x78>
10002784:	10800104 	addi	r2,r2,4
10002788:	10c00017 	ldw	r3,0(r2)
1000278c:	19cb883a 	add	r5,r3,r7
10002790:	00c6303a 	nor	r3,zero,r3
10002794:	28c6703a 	and	r3,r5,r3
10002798:	1986703a 	and	r3,r3,r6
1000279c:	183ff926 	beq	r3,zero,10002784 <__alt_data_end+0xf8002784>
100027a0:	00000106 	br	100027a8 <strlen+0x78>
100027a4:	10800044 	addi	r2,r2,1
100027a8:	10c00007 	ldb	r3,0(r2)
100027ac:	183ffd1e 	bne	r3,zero,100027a4 <__alt_data_end+0xf80027a4>
100027b0:	1105c83a 	sub	r2,r2,r4
100027b4:	f800283a 	ret
100027b8:	2005883a 	mov	r2,r4
100027bc:	003fe706 	br	1000275c <__alt_data_end+0xf800275c>
100027c0:	0005883a 	mov	r2,zero
100027c4:	f800283a 	ret

100027c8 <___vfprintf_internal_r>:
100027c8:	defeb604 	addi	sp,sp,-1320
100027cc:	dfc14915 	stw	ra,1316(sp)
100027d0:	ddc14715 	stw	r23,1308(sp)
100027d4:	dd814615 	stw	r22,1304(sp)
100027d8:	202f883a 	mov	r23,r4
100027dc:	282d883a 	mov	r22,r5
100027e0:	d9812a15 	stw	r6,1192(sp)
100027e4:	d9c12d15 	stw	r7,1204(sp)
100027e8:	df014815 	stw	fp,1312(sp)
100027ec:	dd414515 	stw	r21,1300(sp)
100027f0:	dd014415 	stw	r20,1296(sp)
100027f4:	dcc14315 	stw	r19,1292(sp)
100027f8:	dc814215 	stw	r18,1288(sp)
100027fc:	dc414115 	stw	r17,1284(sp)
10002800:	dc014015 	stw	r16,1280(sp)
10002804:	00074480 	call	10007448 <_localeconv_r>
10002808:	10800017 	ldw	r2,0(r2)
1000280c:	1009883a 	mov	r4,r2
10002810:	d8813515 	stw	r2,1236(sp)
10002814:	00027300 	call	10002730 <strlen>
10002818:	d8813815 	stw	r2,1248(sp)
1000281c:	b8000226 	beq	r23,zero,10002828 <___vfprintf_internal_r+0x60>
10002820:	b8800e17 	ldw	r2,56(r23)
10002824:	10010526 	beq	r2,zero,10002c3c <___vfprintf_internal_r+0x474>
10002828:	b0c0030b 	ldhu	r3,12(r22)
1000282c:	1908000c 	andi	r4,r3,8192
10002830:	1805883a 	mov	r2,r3
10002834:	2000071e 	bne	r4,zero,10002854 <___vfprintf_internal_r+0x8c>
10002838:	b1001917 	ldw	r4,100(r22)
1000283c:	18880014 	ori	r2,r3,8192
10002840:	00f7ffc4 	movi	r3,-8193
10002844:	20c8703a 	and	r4,r4,r3
10002848:	b080030d 	sth	r2,12(r22)
1000284c:	1007883a 	mov	r3,r2
10002850:	b1001915 	stw	r4,100(r22)
10002854:	1100020c 	andi	r4,r2,8
10002858:	2000a826 	beq	r4,zero,10002afc <___vfprintf_internal_r+0x334>
1000285c:	b1000417 	ldw	r4,16(r22)
10002860:	2000a626 	beq	r4,zero,10002afc <___vfprintf_internal_r+0x334>
10002864:	1080068c 	andi	r2,r2,26
10002868:	01000284 	movi	r4,10
1000286c:	1100ac26 	beq	r2,r4,10002b20 <___vfprintf_internal_r+0x358>
10002870:	d8c10e04 	addi	r3,sp,1080
10002874:	d9010dc4 	addi	r4,sp,1079
10002878:	d9400404 	addi	r5,sp,16
1000287c:	05040074 	movhi	r20,4097
10002880:	1905c83a 	sub	r2,r3,r4
10002884:	a5082284 	addi	r20,r20,8330
10002888:	d8c12815 	stw	r3,1184(sp)
1000288c:	d9012915 	stw	r4,1188(sp)
10002890:	d9411e15 	stw	r5,1144(sp)
10002894:	d8012015 	stw	zero,1152(sp)
10002898:	d8011f15 	stw	zero,1148(sp)
1000289c:	d8013315 	stw	zero,1228(sp)
100028a0:	d8013715 	stw	zero,1244(sp)
100028a4:	d8013915 	stw	zero,1252(sp)
100028a8:	d8013b15 	stw	zero,1260(sp)
100028ac:	d8013a15 	stw	zero,1256(sp)
100028b0:	d8012f15 	stw	zero,1212(sp)
100028b4:	2811883a 	mov	r8,r5
100028b8:	d8813c15 	stw	r2,1264(sp)
100028bc:	d8c12a17 	ldw	r3,1192(sp)
100028c0:	18800007 	ldb	r2,0(r3)
100028c4:	10021326 	beq	r2,zero,10003114 <___vfprintf_internal_r+0x94c>
100028c8:	00c00944 	movi	r3,37
100028cc:	dc012a17 	ldw	r16,1192(sp)
100028d0:	10c0021e 	bne	r2,r3,100028dc <___vfprintf_internal_r+0x114>
100028d4:	00001606 	br	10002930 <___vfprintf_internal_r+0x168>
100028d8:	10c08526 	beq	r2,r3,10002af0 <___vfprintf_internal_r+0x328>
100028dc:	84000044 	addi	r16,r16,1
100028e0:	80800007 	ldb	r2,0(r16)
100028e4:	103ffc1e 	bne	r2,zero,100028d8 <__alt_data_end+0xf80028d8>
100028e8:	d9012a17 	ldw	r4,1192(sp)
100028ec:	8123c83a 	sub	r17,r16,r4
100028f0:	88000f26 	beq	r17,zero,10002930 <___vfprintf_internal_r+0x168>
100028f4:	d8812a17 	ldw	r2,1192(sp)
100028f8:	d8c12017 	ldw	r3,1152(sp)
100028fc:	44400115 	stw	r17,4(r8)
10002900:	40800015 	stw	r2,0(r8)
10002904:	d8811f17 	ldw	r2,1148(sp)
10002908:	1c47883a 	add	r3,r3,r17
1000290c:	d8c12015 	stw	r3,1152(sp)
10002910:	10800044 	addi	r2,r2,1
10002914:	d8811f15 	stw	r2,1148(sp)
10002918:	00c001c4 	movi	r3,7
1000291c:	1880b516 	blt	r3,r2,10002bf4 <___vfprintf_internal_r+0x42c>
10002920:	42000204 	addi	r8,r8,8
10002924:	d8c12f17 	ldw	r3,1212(sp)
10002928:	1c47883a 	add	r3,r3,r17
1000292c:	d8c12f15 	stw	r3,1212(sp)
10002930:	80800007 	ldb	r2,0(r16)
10002934:	1000b626 	beq	r2,zero,10002c10 <___vfprintf_internal_r+0x448>
10002938:	80800044 	addi	r2,r16,1
1000293c:	84000047 	ldb	r16,1(r16)
10002940:	0027883a 	mov	r19,zero
10002944:	0039883a 	mov	fp,zero
10002948:	dcc12b05 	stb	r19,1196(sp)
1000294c:	d8012785 	stb	zero,1182(sp)
10002950:	027fffc4 	movi	r9,-1
10002954:	d8012e15 	stw	zero,1208(sp)
10002958:	04401604 	movi	r17,88
1000295c:	04800244 	movi	r18,9
10002960:	da012a15 	stw	r8,1192(sp)
10002964:	e027883a 	mov	r19,fp
10002968:	17000044 	addi	fp,r2,1
1000296c:	80bff804 	addi	r2,r16,-32
10002970:	88831236 	bltu	r17,r2,100035bc <___vfprintf_internal_r+0xdf4>
10002974:	100490ba 	slli	r2,r2,2
10002978:	01040034 	movhi	r4,4096
1000297c:	210a6304 	addi	r4,r4,10636
10002980:	1105883a 	add	r2,r2,r4
10002984:	10800017 	ldw	r2,0(r2)
10002988:	1000683a 	jmp	r2
1000298c:	100034d8 	cmpnei	zero,r2,211
10002990:	100035bc 	xorhi	zero,r2,214
10002994:	100035bc 	xorhi	zero,r2,214
10002998:	100034f4 	orhi	zero,r2,211
1000299c:	100035bc 	xorhi	zero,r2,214
100029a0:	100035bc 	xorhi	zero,r2,214
100029a4:	100035bc 	xorhi	zero,r2,214
100029a8:	100035bc 	xorhi	zero,r2,214
100029ac:	100035bc 	xorhi	zero,r2,214
100029b0:	100035bc 	xorhi	zero,r2,214
100029b4:	10003504 	addi	zero,r2,212
100029b8:	1000352c 	andhi	zero,r2,212
100029bc:	100035bc 	xorhi	zero,r2,214
100029c0:	10002c48 	cmpgei	zero,r2,177
100029c4:	10002c58 	cmpnei	zero,r2,177
100029c8:	100035bc 	xorhi	zero,r2,214
100029cc:	10002ca8 	cmpgeui	zero,r2,178
100029d0:	10002cb8 	rdprs	zero,r2,178
100029d4:	10002cb8 	rdprs	zero,r2,178
100029d8:	10002cb8 	rdprs	zero,r2,178
100029dc:	10002cb8 	rdprs	zero,r2,178
100029e0:	10002cb8 	rdprs	zero,r2,178
100029e4:	10002cb8 	rdprs	zero,r2,178
100029e8:	10002cb8 	rdprs	zero,r2,178
100029ec:	10002cb8 	rdprs	zero,r2,178
100029f0:	10002cb8 	rdprs	zero,r2,178
100029f4:	100035bc 	xorhi	zero,r2,214
100029f8:	100035bc 	xorhi	zero,r2,214
100029fc:	100035bc 	xorhi	zero,r2,214
10002a00:	100035bc 	xorhi	zero,r2,214
10002a04:	100035bc 	xorhi	zero,r2,214
10002a08:	100035bc 	xorhi	zero,r2,214
10002a0c:	100035bc 	xorhi	zero,r2,214
10002a10:	100035bc 	xorhi	zero,r2,214
10002a14:	100035bc 	xorhi	zero,r2,214
10002a18:	100035bc 	xorhi	zero,r2,214
10002a1c:	10002cfc 	xorhi	zero,r2,179
10002a20:	1000311c 	xori	zero,r2,196
10002a24:	100035bc 	xorhi	zero,r2,214
10002a28:	1000311c 	xori	zero,r2,196
10002a2c:	100035bc 	xorhi	zero,r2,214
10002a30:	100035bc 	xorhi	zero,r2,214
10002a34:	100035bc 	xorhi	zero,r2,214
10002a38:	100035bc 	xorhi	zero,r2,214
10002a3c:	100031c4 	addi	zero,r2,199
10002a40:	100035bc 	xorhi	zero,r2,214
10002a44:	100035bc 	xorhi	zero,r2,214
10002a48:	100031d4 	ori	zero,r2,199
10002a4c:	100035bc 	xorhi	zero,r2,214
10002a50:	100035bc 	xorhi	zero,r2,214
10002a54:	100035bc 	xorhi	zero,r2,214
10002a58:	100035bc 	xorhi	zero,r2,214
10002a5c:	100035bc 	xorhi	zero,r2,214
10002a60:	10003218 	cmpnei	zero,r2,200
10002a64:	100035bc 	xorhi	zero,r2,214
10002a68:	100035bc 	xorhi	zero,r2,214
10002a6c:	10003250 	cmplti	zero,r2,201
10002a70:	100035bc 	xorhi	zero,r2,214
10002a74:	100035bc 	xorhi	zero,r2,214
10002a78:	100035bc 	xorhi	zero,r2,214
10002a7c:	100035bc 	xorhi	zero,r2,214
10002a80:	100035bc 	xorhi	zero,r2,214
10002a84:	100035bc 	xorhi	zero,r2,214
10002a88:	100035bc 	xorhi	zero,r2,214
10002a8c:	100035bc 	xorhi	zero,r2,214
10002a90:	100035bc 	xorhi	zero,r2,214
10002a94:	100035bc 	xorhi	zero,r2,214
10002a98:	1000348c 	andi	zero,r2,210
10002a9c:	10003438 	rdprs	zero,r2,208
10002aa0:	1000311c 	xori	zero,r2,196
10002aa4:	1000311c 	xori	zero,r2,196
10002aa8:	1000311c 	xori	zero,r2,196
10002aac:	1000347c 	xorhi	zero,r2,209
10002ab0:	10003438 	rdprs	zero,r2,208
10002ab4:	100035bc 	xorhi	zero,r2,214
10002ab8:	100035bc 	xorhi	zero,r2,214
10002abc:	10003354 	ori	zero,r2,205
10002ac0:	100035bc 	xorhi	zero,r2,214
10002ac4:	1000336c 	andhi	zero,r2,205
10002ac8:	100033ac 	andhi	zero,r2,206
10002acc:	100033ec 	andhi	zero,r2,207
10002ad0:	100032b8 	rdprs	zero,r2,202
10002ad4:	100035bc 	xorhi	zero,r2,214
10002ad8:	10003540 	call	11000354 <_gp+0xfe4564>
10002adc:	100035bc 	xorhi	zero,r2,214
10002ae0:	100032c8 	cmpgei	zero,r2,203
10002ae4:	100035bc 	xorhi	zero,r2,214
10002ae8:	100035bc 	xorhi	zero,r2,214
10002aec:	10003308 	cmpgei	zero,r2,204
10002af0:	d9412a17 	ldw	r5,1192(sp)
10002af4:	8163c83a 	sub	r17,r16,r5
10002af8:	003f7d06 	br	100028f0 <__alt_data_end+0xf80028f0>
10002afc:	b809883a 	mov	r4,r23
10002b00:	b00b883a 	mov	r5,r22
10002b04:	00048e80 	call	100048e8 <__swsetup_r>
10002b08:	10002d1e 	bne	r2,zero,10002bc0 <___vfprintf_internal_r+0x3f8>
10002b0c:	b0c0030b 	ldhu	r3,12(r22)
10002b10:	01000284 	movi	r4,10
10002b14:	1805883a 	mov	r2,r3
10002b18:	1080068c 	andi	r2,r2,26
10002b1c:	113f541e 	bne	r2,r4,10002870 <__alt_data_end+0xf8002870>
10002b20:	b080038b 	ldhu	r2,14(r22)
10002b24:	113fffcc 	andi	r4,r2,65535
10002b28:	2120001c 	xori	r4,r4,32768
10002b2c:	21200004 	addi	r4,r4,-32768
10002b30:	203f4f16 	blt	r4,zero,10002870 <__alt_data_end+0xf8002870>
10002b34:	b2c01917 	ldw	r11,100(r22)
10002b38:	b2800717 	ldw	r10,28(r22)
10002b3c:	b2400917 	ldw	r9,36(r22)
10002b40:	d9812a17 	ldw	r6,1192(sp)
10002b44:	d9c12d17 	ldw	r7,1204(sp)
10002b48:	02010004 	movi	r8,1024
10002b4c:	18ffff4c 	andi	r3,r3,65533
10002b50:	d881078d 	sth	r2,1054(sp)
10002b54:	b809883a 	mov	r4,r23
10002b58:	d8800404 	addi	r2,sp,16
10002b5c:	d9410404 	addi	r5,sp,1040
10002b60:	d8c1070d 	sth	r3,1052(sp)
10002b64:	dac11d15 	stw	r11,1140(sp)
10002b68:	da810b15 	stw	r10,1068(sp)
10002b6c:	da410d15 	stw	r9,1076(sp)
10002b70:	d8810415 	stw	r2,1040(sp)
10002b74:	d8810815 	stw	r2,1056(sp)
10002b78:	da010615 	stw	r8,1048(sp)
10002b7c:	da010915 	stw	r8,1060(sp)
10002b80:	d8010a15 	stw	zero,1064(sp)
10002b84:	00027c80 	call	100027c8 <___vfprintf_internal_r>
10002b88:	1021883a 	mov	r16,r2
10002b8c:	10000416 	blt	r2,zero,10002ba0 <___vfprintf_internal_r+0x3d8>
10002b90:	b809883a 	mov	r4,r23
10002b94:	d9410404 	addi	r5,sp,1040
10002b98:	00063680 	call	10006368 <_fflush_r>
10002b9c:	1007301e 	bne	r2,zero,10004860 <___vfprintf_internal_r+0x2098>
10002ba0:	d881070b 	ldhu	r2,1052(sp)
10002ba4:	1080100c 	andi	r2,r2,64
10002ba8:	10000326 	beq	r2,zero,10002bb8 <___vfprintf_internal_r+0x3f0>
10002bac:	b080030b 	ldhu	r2,12(r22)
10002bb0:	10801014 	ori	r2,r2,64
10002bb4:	b080030d 	sth	r2,12(r22)
10002bb8:	8005883a 	mov	r2,r16
10002bbc:	00000106 	br	10002bc4 <___vfprintf_internal_r+0x3fc>
10002bc0:	00bfffc4 	movi	r2,-1
10002bc4:	dfc14917 	ldw	ra,1316(sp)
10002bc8:	df014817 	ldw	fp,1312(sp)
10002bcc:	ddc14717 	ldw	r23,1308(sp)
10002bd0:	dd814617 	ldw	r22,1304(sp)
10002bd4:	dd414517 	ldw	r21,1300(sp)
10002bd8:	dd014417 	ldw	r20,1296(sp)
10002bdc:	dcc14317 	ldw	r19,1292(sp)
10002be0:	dc814217 	ldw	r18,1288(sp)
10002be4:	dc414117 	ldw	r17,1284(sp)
10002be8:	dc014017 	ldw	r16,1280(sp)
10002bec:	dec14a04 	addi	sp,sp,1320
10002bf0:	f800283a 	ret
10002bf4:	b809883a 	mov	r4,r23
10002bf8:	b00b883a 	mov	r5,r22
10002bfc:	d9811e04 	addi	r6,sp,1144
10002c00:	0009c080 	call	10009c08 <__sprint_r>
10002c04:	1000081e 	bne	r2,zero,10002c28 <___vfprintf_internal_r+0x460>
10002c08:	da000404 	addi	r8,sp,16
10002c0c:	003f4506 	br	10002924 <__alt_data_end+0xf8002924>
10002c10:	d8812017 	ldw	r2,1152(sp)
10002c14:	10000426 	beq	r2,zero,10002c28 <___vfprintf_internal_r+0x460>
10002c18:	b809883a 	mov	r4,r23
10002c1c:	b00b883a 	mov	r5,r22
10002c20:	d9811e04 	addi	r6,sp,1144
10002c24:	0009c080 	call	10009c08 <__sprint_r>
10002c28:	b080030b 	ldhu	r2,12(r22)
10002c2c:	1080100c 	andi	r2,r2,64
10002c30:	103fe31e 	bne	r2,zero,10002bc0 <__alt_data_end+0xf8002bc0>
10002c34:	d8812f17 	ldw	r2,1212(sp)
10002c38:	003fe206 	br	10002bc4 <__alt_data_end+0xf8002bc4>
10002c3c:	b809883a 	mov	r4,r23
10002c40:	00069240 	call	10006924 <__sinit>
10002c44:	003ef806 	br	10002828 <__alt_data_end+0xf8002828>
10002c48:	e005883a 	mov	r2,fp
10002c4c:	9cc00114 	ori	r19,r19,4
10002c50:	e4000007 	ldb	r16,0(fp)
10002c54:	003f4406 	br	10002968 <__alt_data_end+0xf8002968>
10002c58:	e4000007 	ldb	r16,0(fp)
10002c5c:	01000a84 	movi	r4,42
10002c60:	e0800044 	addi	r2,fp,1
10002c64:	8106f626 	beq	r16,r4,10004840 <___vfprintf_internal_r+0x2078>
10002c68:	857ff404 	addi	r21,r16,-48
10002c6c:	1039883a 	mov	fp,r2
10002c70:	0013883a 	mov	r9,zero
10002c74:	957f3d36 	bltu	r18,r21,1000296c <__alt_data_end+0xf800296c>
10002c78:	0009883a 	mov	r4,zero
10002c7c:	01400284 	movi	r5,10
10002c80:	000c8480 	call	1000c848 <__mulsi3>
10002c84:	e4000007 	ldb	r16,0(fp)
10002c88:	a889883a 	add	r4,r21,r2
10002c8c:	e7000044 	addi	fp,fp,1
10002c90:	857ff404 	addi	r21,r16,-48
10002c94:	957ff92e 	bgeu	r18,r21,10002c7c <__alt_data_end+0xf8002c7c>
10002c98:	2013883a 	mov	r9,r4
10002c9c:	203f330e 	bge	r4,zero,1000296c <__alt_data_end+0xf800296c>
10002ca0:	027fffc4 	movi	r9,-1
10002ca4:	003f3106 	br	1000296c <__alt_data_end+0xf800296c>
10002ca8:	9cc02014 	ori	r19,r19,128
10002cac:	e005883a 	mov	r2,fp
10002cb0:	e4000007 	ldb	r16,0(fp)
10002cb4:	003f2c06 	br	10002968 <__alt_data_end+0xf8002968>
10002cb8:	857ff404 	addi	r21,r16,-48
10002cbc:	d8012e15 	stw	zero,1208(sp)
10002cc0:	e021883a 	mov	r16,fp
10002cc4:	0009883a 	mov	r4,zero
10002cc8:	da412c15 	stw	r9,1200(sp)
10002ccc:	01400284 	movi	r5,10
10002cd0:	000c8480 	call	1000c848 <__mulsi3>
10002cd4:	81400007 	ldb	r5,0(r16)
10002cd8:	1549883a 	add	r4,r2,r21
10002cdc:	e7000044 	addi	fp,fp,1
10002ce0:	2d7ff404 	addi	r21,r5,-48
10002ce4:	e021883a 	mov	r16,fp
10002ce8:	957ff82e 	bgeu	r18,r21,10002ccc <__alt_data_end+0xf8002ccc>
10002cec:	2821883a 	mov	r16,r5
10002cf0:	d9012e15 	stw	r4,1208(sp)
10002cf4:	da412c17 	ldw	r9,1200(sp)
10002cf8:	003f1c06 	br	1000296c <__alt_data_end+0xf800296c>
10002cfc:	da012a17 	ldw	r8,1192(sp)
10002d00:	df012a15 	stw	fp,1192(sp)
10002d04:	9839883a 	mov	fp,r19
10002d08:	dcc12b03 	ldbu	r19,1196(sp)
10002d0c:	e7000414 	ori	fp,fp,16
10002d10:	e080080c 	andi	r2,fp,32
10002d14:	dcc12785 	stb	r19,1182(sp)
10002d18:	d8c12d17 	ldw	r3,1204(sp)
10002d1c:	1001ce26 	beq	r2,zero,10003458 <___vfprintf_internal_r+0xc90>
10002d20:	d9012d17 	ldw	r4,1204(sp)
10002d24:	18800117 	ldw	r2,4(r3)
10002d28:	1c800017 	ldw	r18,0(r3)
10002d2c:	21000204 	addi	r4,r4,8
10002d30:	d9012d15 	stw	r4,1204(sp)
10002d34:	102b883a 	mov	r21,r2
10002d38:	10044916 	blt	r2,zero,10003e60 <___vfprintf_internal_r+0x1698>
10002d3c:	dcc12783 	ldbu	r19,1182(sp)
10002d40:	da413215 	stw	r9,1224(sp)
10002d44:	00800044 	movi	r2,1
10002d48:	9546b03a 	or	r3,r18,r21
10002d4c:	48000216 	blt	r9,zero,10002d58 <___vfprintf_internal_r+0x590>
10002d50:	013fdfc4 	movi	r4,-129
10002d54:	e138703a 	and	fp,fp,r4
10002d58:	1802251e 	bne	r3,zero,100035f0 <___vfprintf_internal_r+0xe28>
10002d5c:	48031726 	beq	r9,zero,100039bc <___vfprintf_internal_r+0x11f4>
10002d60:	10803fcc 	andi	r2,r2,255
10002d64:	00c00044 	movi	r3,1
10002d68:	10c24526 	beq	r2,r3,10003680 <___vfprintf_internal_r+0xeb8>
10002d6c:	00c00084 	movi	r3,2
10002d70:	10c33426 	beq	r2,r3,10003a44 <___vfprintf_internal_r+0x127c>
10002d74:	d8c10e04 	addi	r3,sp,1080
10002d78:	9008d0fa 	srli	r4,r18,3
10002d7c:	a80a977a 	slli	r5,r21,29
10002d80:	a82ad0fa 	srli	r21,r21,3
10002d84:	948001cc 	andi	r18,r18,7
10002d88:	90800c04 	addi	r2,r18,48
10002d8c:	18ffffc4 	addi	r3,r3,-1
10002d90:	2924b03a 	or	r18,r5,r4
10002d94:	18800005 	stb	r2,0(r3)
10002d98:	9548b03a 	or	r4,r18,r21
10002d9c:	203ff61e 	bne	r4,zero,10002d78 <__alt_data_end+0xf8002d78>
10002da0:	e100004c 	andi	r4,fp,1
10002da4:	d8c13115 	stw	r3,1220(sp)
10002da8:	20039a1e 	bne	r4,zero,10003c14 <___vfprintf_internal_r+0x144c>
10002dac:	d8812817 	ldw	r2,1184(sp)
10002db0:	10e3c83a 	sub	r17,r2,r3
10002db4:	8805883a 	mov	r2,r17
10002db8:	8a40010e 	bge	r17,r9,10002dc0 <___vfprintf_internal_r+0x5f8>
10002dbc:	4805883a 	mov	r2,r9
10002dc0:	d8812b15 	stw	r2,1196(sp)
10002dc4:	d8013415 	stw	zero,1232(sp)
10002dc8:	98803fcc 	andi	r2,r19,255
10002dcc:	1080201c 	xori	r2,r2,128
10002dd0:	10bfe004 	addi	r2,r2,-128
10002dd4:	10000326 	beq	r2,zero,10002de4 <___vfprintf_internal_r+0x61c>
10002dd8:	d8c12b17 	ldw	r3,1196(sp)
10002ddc:	18c00044 	addi	r3,r3,1
10002de0:	d8c12b15 	stw	r3,1196(sp)
10002de4:	e0c0008c 	andi	r3,fp,2
10002de8:	d8c12c15 	stw	r3,1200(sp)
10002dec:	18000326 	beq	r3,zero,10002dfc <___vfprintf_internal_r+0x634>
10002df0:	d8c12b17 	ldw	r3,1196(sp)
10002df4:	18c00084 	addi	r3,r3,2
10002df8:	d8c12b15 	stw	r3,1196(sp)
10002dfc:	e0c0210c 	andi	r3,fp,132
10002e00:	d8c13015 	stw	r3,1216(sp)
10002e04:	1801f81e 	bne	r3,zero,100035e8 <___vfprintf_internal_r+0xe20>
10002e08:	d9012e17 	ldw	r4,1208(sp)
10002e0c:	d8c12b17 	ldw	r3,1196(sp)
10002e10:	20ebc83a 	sub	r21,r4,r3
10002e14:	0541f40e 	bge	zero,r21,100035e8 <___vfprintf_internal_r+0xe20>
10002e18:	02400404 	movi	r9,16
10002e1c:	d8c12017 	ldw	r3,1152(sp)
10002e20:	d8811f17 	ldw	r2,1148(sp)
10002e24:	4d45750e 	bge	r9,r21,100043fc <___vfprintf_internal_r+0x1c34>
10002e28:	01440074 	movhi	r5,4097
10002e2c:	29482684 	addi	r5,r5,8346
10002e30:	d9413615 	stw	r5,1240(sp)
10002e34:	4827883a 	mov	r19,r9
10002e38:	048001c4 	movi	r18,7
10002e3c:	00000306 	br	10002e4c <___vfprintf_internal_r+0x684>
10002e40:	ad7ffc04 	addi	r21,r21,-16
10002e44:	42000204 	addi	r8,r8,8
10002e48:	9d40130e 	bge	r19,r21,10002e98 <___vfprintf_internal_r+0x6d0>
10002e4c:	01040074 	movhi	r4,4097
10002e50:	18c00404 	addi	r3,r3,16
10002e54:	10800044 	addi	r2,r2,1
10002e58:	21082684 	addi	r4,r4,8346
10002e5c:	41000015 	stw	r4,0(r8)
10002e60:	44c00115 	stw	r19,4(r8)
10002e64:	d8c12015 	stw	r3,1152(sp)
10002e68:	d8811f15 	stw	r2,1148(sp)
10002e6c:	90bff40e 	bge	r18,r2,10002e40 <__alt_data_end+0xf8002e40>
10002e70:	b809883a 	mov	r4,r23
10002e74:	b00b883a 	mov	r5,r22
10002e78:	d9811e04 	addi	r6,sp,1144
10002e7c:	0009c080 	call	10009c08 <__sprint_r>
10002e80:	103f691e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10002e84:	ad7ffc04 	addi	r21,r21,-16
10002e88:	d8c12017 	ldw	r3,1152(sp)
10002e8c:	d8811f17 	ldw	r2,1148(sp)
10002e90:	da000404 	addi	r8,sp,16
10002e94:	9d7fed16 	blt	r19,r21,10002e4c <__alt_data_end+0xf8002e4c>
10002e98:	d9413617 	ldw	r5,1240(sp)
10002e9c:	a8c7883a 	add	r3,r21,r3
10002ea0:	10800044 	addi	r2,r2,1
10002ea4:	41400015 	stw	r5,0(r8)
10002ea8:	45400115 	stw	r21,4(r8)
10002eac:	d8c12015 	stw	r3,1152(sp)
10002eb0:	d8811f15 	stw	r2,1148(sp)
10002eb4:	010001c4 	movi	r4,7
10002eb8:	20832b16 	blt	r4,r2,10003b68 <___vfprintf_internal_r+0x13a0>
10002ebc:	d8812787 	ldb	r2,1182(sp)
10002ec0:	42000204 	addi	r8,r8,8
10002ec4:	10000c26 	beq	r2,zero,10002ef8 <___vfprintf_internal_r+0x730>
10002ec8:	d8811f17 	ldw	r2,1148(sp)
10002ecc:	d9012784 	addi	r4,sp,1182
10002ed0:	18c00044 	addi	r3,r3,1
10002ed4:	10800044 	addi	r2,r2,1
10002ed8:	41000015 	stw	r4,0(r8)
10002edc:	01000044 	movi	r4,1
10002ee0:	41000115 	stw	r4,4(r8)
10002ee4:	d8c12015 	stw	r3,1152(sp)
10002ee8:	d8811f15 	stw	r2,1148(sp)
10002eec:	010001c4 	movi	r4,7
10002ef0:	2082c416 	blt	r4,r2,10003a04 <___vfprintf_internal_r+0x123c>
10002ef4:	42000204 	addi	r8,r8,8
10002ef8:	d8812c17 	ldw	r2,1200(sp)
10002efc:	10000c26 	beq	r2,zero,10002f30 <___vfprintf_internal_r+0x768>
10002f00:	d8811f17 	ldw	r2,1148(sp)
10002f04:	d9012704 	addi	r4,sp,1180
10002f08:	18c00084 	addi	r3,r3,2
10002f0c:	10800044 	addi	r2,r2,1
10002f10:	41000015 	stw	r4,0(r8)
10002f14:	01000084 	movi	r4,2
10002f18:	41000115 	stw	r4,4(r8)
10002f1c:	d8c12015 	stw	r3,1152(sp)
10002f20:	d8811f15 	stw	r2,1148(sp)
10002f24:	010001c4 	movi	r4,7
10002f28:	2082be16 	blt	r4,r2,10003a24 <___vfprintf_internal_r+0x125c>
10002f2c:	42000204 	addi	r8,r8,8
10002f30:	d9013017 	ldw	r4,1216(sp)
10002f34:	00802004 	movi	r2,128
10002f38:	20822026 	beq	r4,r2,100037bc <___vfprintf_internal_r+0xff4>
10002f3c:	d9413217 	ldw	r5,1224(sp)
10002f40:	2c67c83a 	sub	r19,r5,r17
10002f44:	04c0260e 	bge	zero,r19,10002fe0 <___vfprintf_internal_r+0x818>
10002f48:	05400404 	movi	r21,16
10002f4c:	d8811f17 	ldw	r2,1148(sp)
10002f50:	acc4720e 	bge	r21,r19,1000411c <___vfprintf_internal_r+0x1954>
10002f54:	01440074 	movhi	r5,4097
10002f58:	29482284 	addi	r5,r5,8330
10002f5c:	d9412c15 	stw	r5,1200(sp)
10002f60:	048001c4 	movi	r18,7
10002f64:	00000306 	br	10002f74 <___vfprintf_internal_r+0x7ac>
10002f68:	9cfffc04 	addi	r19,r19,-16
10002f6c:	42000204 	addi	r8,r8,8
10002f70:	acc0110e 	bge	r21,r19,10002fb8 <___vfprintf_internal_r+0x7f0>
10002f74:	18c00404 	addi	r3,r3,16
10002f78:	10800044 	addi	r2,r2,1
10002f7c:	45000015 	stw	r20,0(r8)
10002f80:	45400115 	stw	r21,4(r8)
10002f84:	d8c12015 	stw	r3,1152(sp)
10002f88:	d8811f15 	stw	r2,1148(sp)
10002f8c:	90bff60e 	bge	r18,r2,10002f68 <__alt_data_end+0xf8002f68>
10002f90:	b809883a 	mov	r4,r23
10002f94:	b00b883a 	mov	r5,r22
10002f98:	d9811e04 	addi	r6,sp,1144
10002f9c:	0009c080 	call	10009c08 <__sprint_r>
10002fa0:	103f211e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10002fa4:	9cfffc04 	addi	r19,r19,-16
10002fa8:	d8c12017 	ldw	r3,1152(sp)
10002fac:	d8811f17 	ldw	r2,1148(sp)
10002fb0:	da000404 	addi	r8,sp,16
10002fb4:	acffef16 	blt	r21,r19,10002f74 <__alt_data_end+0xf8002f74>
10002fb8:	d9012c17 	ldw	r4,1200(sp)
10002fbc:	1cc7883a 	add	r3,r3,r19
10002fc0:	10800044 	addi	r2,r2,1
10002fc4:	41000015 	stw	r4,0(r8)
10002fc8:	44c00115 	stw	r19,4(r8)
10002fcc:	d8c12015 	stw	r3,1152(sp)
10002fd0:	d8811f15 	stw	r2,1148(sp)
10002fd4:	010001c4 	movi	r4,7
10002fd8:	20828216 	blt	r4,r2,100039e4 <___vfprintf_internal_r+0x121c>
10002fdc:	42000204 	addi	r8,r8,8
10002fe0:	e080400c 	andi	r2,fp,256
10002fe4:	1001ac1e 	bne	r2,zero,10003698 <___vfprintf_internal_r+0xed0>
10002fe8:	d8811f17 	ldw	r2,1148(sp)
10002fec:	d9413117 	ldw	r5,1220(sp)
10002ff0:	1c47883a 	add	r3,r3,r17
10002ff4:	10800044 	addi	r2,r2,1
10002ff8:	41400015 	stw	r5,0(r8)
10002ffc:	44400115 	stw	r17,4(r8)
10003000:	d8c12015 	stw	r3,1152(sp)
10003004:	d8811f15 	stw	r2,1148(sp)
10003008:	010001c4 	movi	r4,7
1000300c:	20825d16 	blt	r4,r2,10003984 <___vfprintf_internal_r+0x11bc>
10003010:	42000204 	addi	r8,r8,8
10003014:	e080010c 	andi	r2,fp,4
10003018:	10003126 	beq	r2,zero,100030e0 <___vfprintf_internal_r+0x918>
1000301c:	d8812e17 	ldw	r2,1208(sp)
10003020:	d9012b17 	ldw	r4,1196(sp)
10003024:	1121c83a 	sub	r16,r2,r4
10003028:	04002d0e 	bge	zero,r16,100030e0 <___vfprintf_internal_r+0x918>
1000302c:	04400404 	movi	r17,16
10003030:	d8811f17 	ldw	r2,1148(sp)
10003034:	8c05340e 	bge	r17,r16,10004508 <___vfprintf_internal_r+0x1d40>
10003038:	01040074 	movhi	r4,4097
1000303c:	21082684 	addi	r4,r4,8346
10003040:	d9013615 	stw	r4,1240(sp)
10003044:	048001c4 	movi	r18,7
10003048:	00000306 	br	10003058 <___vfprintf_internal_r+0x890>
1000304c:	843ffc04 	addi	r16,r16,-16
10003050:	42000204 	addi	r8,r8,8
10003054:	8c00130e 	bge	r17,r16,100030a4 <___vfprintf_internal_r+0x8dc>
10003058:	01440074 	movhi	r5,4097
1000305c:	18c00404 	addi	r3,r3,16
10003060:	10800044 	addi	r2,r2,1
10003064:	29482684 	addi	r5,r5,8346
10003068:	41400015 	stw	r5,0(r8)
1000306c:	44400115 	stw	r17,4(r8)
10003070:	d8c12015 	stw	r3,1152(sp)
10003074:	d8811f15 	stw	r2,1148(sp)
10003078:	90bff40e 	bge	r18,r2,1000304c <__alt_data_end+0xf800304c>
1000307c:	b809883a 	mov	r4,r23
10003080:	b00b883a 	mov	r5,r22
10003084:	d9811e04 	addi	r6,sp,1144
10003088:	0009c080 	call	10009c08 <__sprint_r>
1000308c:	103ee61e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10003090:	843ffc04 	addi	r16,r16,-16
10003094:	d8c12017 	ldw	r3,1152(sp)
10003098:	d8811f17 	ldw	r2,1148(sp)
1000309c:	da000404 	addi	r8,sp,16
100030a0:	8c3fed16 	blt	r17,r16,10003058 <__alt_data_end+0xf8003058>
100030a4:	d9013617 	ldw	r4,1240(sp)
100030a8:	1c07883a 	add	r3,r3,r16
100030ac:	10800044 	addi	r2,r2,1
100030b0:	41000015 	stw	r4,0(r8)
100030b4:	44000115 	stw	r16,4(r8)
100030b8:	d8c12015 	stw	r3,1152(sp)
100030bc:	d8811f15 	stw	r2,1148(sp)
100030c0:	010001c4 	movi	r4,7
100030c4:	2080060e 	bge	r4,r2,100030e0 <___vfprintf_internal_r+0x918>
100030c8:	b809883a 	mov	r4,r23
100030cc:	b00b883a 	mov	r5,r22
100030d0:	d9811e04 	addi	r6,sp,1144
100030d4:	0009c080 	call	10009c08 <__sprint_r>
100030d8:	103ed31e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
100030dc:	d8c12017 	ldw	r3,1152(sp)
100030e0:	df012b17 	ldw	fp,1196(sp)
100030e4:	d9412e17 	ldw	r5,1208(sp)
100030e8:	e140010e 	bge	fp,r5,100030f0 <___vfprintf_internal_r+0x928>
100030ec:	2839883a 	mov	fp,r5
100030f0:	d8812f17 	ldw	r2,1212(sp)
100030f4:	1705883a 	add	r2,r2,fp
100030f8:	d8812f15 	stw	r2,1212(sp)
100030fc:	1802291e 	bne	r3,zero,100039a4 <___vfprintf_internal_r+0x11dc>
10003100:	d8c12a17 	ldw	r3,1192(sp)
10003104:	d8011f15 	stw	zero,1148(sp)
10003108:	da000404 	addi	r8,sp,16
1000310c:	18800007 	ldb	r2,0(r3)
10003110:	103ded1e 	bne	r2,zero,100028c8 <__alt_data_end+0xf80028c8>
10003114:	dc012a17 	ldw	r16,1192(sp)
10003118:	003e0506 	br	10002930 <__alt_data_end+0xf8002930>
1000311c:	d9012d17 	ldw	r4,1204(sp)
10003120:	d9412d17 	ldw	r5,1204(sp)
10003124:	da012a17 	ldw	r8,1192(sp)
10003128:	21000017 	ldw	r4,0(r4)
1000312c:	29400117 	ldw	r5,4(r5)
10003130:	df012a15 	stw	fp,1192(sp)
10003134:	9839883a 	mov	fp,r19
10003138:	dcc12b03 	ldbu	r19,1196(sp)
1000313c:	d9013715 	stw	r4,1244(sp)
10003140:	d9413915 	stw	r5,1252(sp)
10003144:	da013f15 	stw	r8,1276(sp)
10003148:	da413e15 	stw	r9,1272(sp)
1000314c:	dcc12785 	stb	r19,1182(sp)
10003150:	00098640 	call	10009864 <__fpclassifyd>
10003154:	d8c12d17 	ldw	r3,1204(sp)
10003158:	04400044 	movi	r17,1
1000315c:	da013f17 	ldw	r8,1276(sp)
10003160:	1c800204 	addi	r18,r3,8
10003164:	da413e17 	ldw	r9,1272(sp)
10003168:	d9013717 	ldw	r4,1244(sp)
1000316c:	d9413917 	ldw	r5,1252(sp)
10003170:	1443451e 	bne	r2,r17,10003e88 <___vfprintf_internal_r+0x16c0>
10003174:	000d883a 	mov	r6,zero
10003178:	000f883a 	mov	r7,zero
1000317c:	000dbf00 	call	1000dbf0 <__ledf2>
10003180:	da013f17 	ldw	r8,1276(sp)
10003184:	1004fe16 	blt	r2,zero,10004580 <___vfprintf_internal_r+0x1db8>
10003188:	dcc12783 	ldbu	r19,1182(sp)
1000318c:	008011c4 	movi	r2,71
10003190:	14045d0e 	bge	r2,r16,10004308 <___vfprintf_internal_r+0x1b40>
10003194:	01440074 	movhi	r5,4097
10003198:	29481304 	addi	r5,r5,8268
1000319c:	d9413115 	stw	r5,1220(sp)
100031a0:	00c000c4 	movi	r3,3
100031a4:	00bfdfc4 	movi	r2,-129
100031a8:	d8c12b15 	stw	r3,1196(sp)
100031ac:	e0b8703a 	and	fp,fp,r2
100031b0:	dc812d15 	stw	r18,1204(sp)
100031b4:	1823883a 	mov	r17,r3
100031b8:	d8013215 	stw	zero,1224(sp)
100031bc:	d8013415 	stw	zero,1232(sp)
100031c0:	003f0106 	br	10002dc8 <__alt_data_end+0xf8002dc8>
100031c4:	9cc00214 	ori	r19,r19,8
100031c8:	e005883a 	mov	r2,fp
100031cc:	e4000007 	ldb	r16,0(fp)
100031d0:	003de506 	br	10002968 <__alt_data_end+0xf8002968>
100031d4:	da012a17 	ldw	r8,1192(sp)
100031d8:	df012a15 	stw	fp,1192(sp)
100031dc:	9f000414 	ori	fp,r19,16
100031e0:	e0c0080c 	andi	r3,fp,32
100031e4:	d8812d17 	ldw	r2,1204(sp)
100031e8:	18007626 	beq	r3,zero,100033c4 <___vfprintf_internal_r+0xbfc>
100031ec:	d9412d17 	ldw	r5,1204(sp)
100031f0:	14800017 	ldw	r18,0(r2)
100031f4:	15400117 	ldw	r21,4(r2)
100031f8:	29400204 	addi	r5,r5,8
100031fc:	d9412d15 	stw	r5,1204(sp)
10003200:	0005883a 	mov	r2,zero
10003204:	9546b03a 	or	r3,r18,r21
10003208:	d8012785 	stb	zero,1182(sp)
1000320c:	da413215 	stw	r9,1224(sp)
10003210:	0027883a 	mov	r19,zero
10003214:	003ecd06 	br	10002d4c <__alt_data_end+0xf8002d4c>
10003218:	da012a17 	ldw	r8,1192(sp)
1000321c:	df012a15 	stw	fp,1192(sp)
10003220:	9f000414 	ori	fp,r19,16
10003224:	e0c0080c 	andi	r3,fp,32
10003228:	d8812d17 	ldw	r2,1204(sp)
1000322c:	18002c26 	beq	r3,zero,100032e0 <___vfprintf_internal_r+0xb18>
10003230:	d9012d17 	ldw	r4,1204(sp)
10003234:	14800017 	ldw	r18,0(r2)
10003238:	15400117 	ldw	r21,4(r2)
1000323c:	21000204 	addi	r4,r4,8
10003240:	d9012d15 	stw	r4,1204(sp)
10003244:	00800044 	movi	r2,1
10003248:	9546b03a 	or	r3,r18,r21
1000324c:	003fee06 	br	10003208 <__alt_data_end+0xf8003208>
10003250:	da012a17 	ldw	r8,1192(sp)
10003254:	df012a15 	stw	fp,1192(sp)
10003258:	9839883a 	mov	fp,r19
1000325c:	dcc12b03 	ldbu	r19,1196(sp)
10003260:	01440074 	movhi	r5,4097
10003264:	29481604 	addi	r5,r5,8280
10003268:	dcc12785 	stb	r19,1182(sp)
1000326c:	d9413b15 	stw	r5,1260(sp)
10003270:	e0c0080c 	andi	r3,fp,32
10003274:	d8812d17 	ldw	r2,1204(sp)
10003278:	18002e26 	beq	r3,zero,10003334 <___vfprintf_internal_r+0xb6c>
1000327c:	d9412d17 	ldw	r5,1204(sp)
10003280:	14800017 	ldw	r18,0(r2)
10003284:	15400117 	ldw	r21,4(r2)
10003288:	29400204 	addi	r5,r5,8
1000328c:	d9412d15 	stw	r5,1204(sp)
10003290:	e080004c 	andi	r2,fp,1
10003294:	10025c26 	beq	r2,zero,10003c08 <___vfprintf_internal_r+0x1440>
10003298:	9546b03a 	or	r3,r18,r21
1000329c:	18038f26 	beq	r3,zero,100040dc <___vfprintf_internal_r+0x1914>
100032a0:	00800c04 	movi	r2,48
100032a4:	d8812705 	stb	r2,1180(sp)
100032a8:	dc012745 	stb	r16,1181(sp)
100032ac:	e7000094 	ori	fp,fp,2
100032b0:	00800084 	movi	r2,2
100032b4:	003fd406 	br	10003208 <__alt_data_end+0xf8003208>
100032b8:	9cc00814 	ori	r19,r19,32
100032bc:	e005883a 	mov	r2,fp
100032c0:	e4000007 	ldb	r16,0(fp)
100032c4:	003da806 	br	10002968 <__alt_data_end+0xf8002968>
100032c8:	da012a17 	ldw	r8,1192(sp)
100032cc:	df012a15 	stw	fp,1192(sp)
100032d0:	9839883a 	mov	fp,r19
100032d4:	e0c0080c 	andi	r3,fp,32
100032d8:	d8812d17 	ldw	r2,1204(sp)
100032dc:	183fd41e 	bne	r3,zero,10003230 <__alt_data_end+0xf8003230>
100032e0:	e0c0040c 	andi	r3,fp,16
100032e4:	18035f26 	beq	r3,zero,10004064 <___vfprintf_internal_r+0x189c>
100032e8:	d9412d17 	ldw	r5,1204(sp)
100032ec:	14800017 	ldw	r18,0(r2)
100032f0:	002b883a 	mov	r21,zero
100032f4:	29400104 	addi	r5,r5,4
100032f8:	d9412d15 	stw	r5,1204(sp)
100032fc:	00800044 	movi	r2,1
10003300:	9007883a 	mov	r3,r18
10003304:	003fc006 	br	10003208 <__alt_data_end+0xf8003208>
10003308:	da012a17 	ldw	r8,1192(sp)
1000330c:	df012a15 	stw	fp,1192(sp)
10003310:	9839883a 	mov	fp,r19
10003314:	dcc12b03 	ldbu	r19,1196(sp)
10003318:	01040074 	movhi	r4,4097
1000331c:	21081b04 	addi	r4,r4,8300
10003320:	d9013b15 	stw	r4,1260(sp)
10003324:	dcc12785 	stb	r19,1182(sp)
10003328:	e0c0080c 	andi	r3,fp,32
1000332c:	d8812d17 	ldw	r2,1204(sp)
10003330:	183fd21e 	bne	r3,zero,1000327c <__alt_data_end+0xf800327c>
10003334:	e0c0040c 	andi	r3,fp,16
10003338:	18035426 	beq	r3,zero,1000408c <___vfprintf_internal_r+0x18c4>
1000333c:	d8c12d17 	ldw	r3,1204(sp)
10003340:	14800017 	ldw	r18,0(r2)
10003344:	002b883a 	mov	r21,zero
10003348:	18c00104 	addi	r3,r3,4
1000334c:	d8c12d15 	stw	r3,1204(sp)
10003350:	003fcf06 	br	10003290 <__alt_data_end+0xf8003290>
10003354:	e4000007 	ldb	r16,0(fp)
10003358:	00801b04 	movi	r2,108
1000335c:	8083f726 	beq	r16,r2,1000433c <___vfprintf_internal_r+0x1b74>
10003360:	9cc00414 	ori	r19,r19,16
10003364:	e005883a 	mov	r2,fp
10003368:	003d7f06 	br	10002968 <__alt_data_end+0xf8002968>
1000336c:	da012a17 	ldw	r8,1192(sp)
10003370:	df012a15 	stw	fp,1192(sp)
10003374:	9839883a 	mov	fp,r19
10003378:	dcc12b03 	ldbu	r19,1196(sp)
1000337c:	e080080c 	andi	r2,fp,32
10003380:	dcc12785 	stb	r19,1182(sp)
10003384:	10032226 	beq	r2,zero,10004010 <___vfprintf_internal_r+0x1848>
10003388:	d9412d17 	ldw	r5,1204(sp)
1000338c:	d9012f17 	ldw	r4,1212(sp)
10003390:	28800017 	ldw	r2,0(r5)
10003394:	2007d7fa 	srai	r3,r4,31
10003398:	29400104 	addi	r5,r5,4
1000339c:	d9412d15 	stw	r5,1204(sp)
100033a0:	11000015 	stw	r4,0(r2)
100033a4:	10c00115 	stw	r3,4(r2)
100033a8:	003d4406 	br	100028bc <__alt_data_end+0xf80028bc>
100033ac:	da012a17 	ldw	r8,1192(sp)
100033b0:	df012a15 	stw	fp,1192(sp)
100033b4:	9839883a 	mov	fp,r19
100033b8:	e0c0080c 	andi	r3,fp,32
100033bc:	d8812d17 	ldw	r2,1204(sp)
100033c0:	183f8a1e 	bne	r3,zero,100031ec <__alt_data_end+0xf80031ec>
100033c4:	e0c0040c 	andi	r3,fp,16
100033c8:	18031c26 	beq	r3,zero,1000403c <___vfprintf_internal_r+0x1874>
100033cc:	14800017 	ldw	r18,0(r2)
100033d0:	d8812d17 	ldw	r2,1204(sp)
100033d4:	002b883a 	mov	r21,zero
100033d8:	9007883a 	mov	r3,r18
100033dc:	10800104 	addi	r2,r2,4
100033e0:	d8812d15 	stw	r2,1204(sp)
100033e4:	0005883a 	mov	r2,zero
100033e8:	003f8706 	br	10003208 <__alt_data_end+0xf8003208>
100033ec:	d9412d17 	ldw	r5,1204(sp)
100033f0:	00800c04 	movi	r2,48
100033f4:	d8812705 	stb	r2,1180(sp)
100033f8:	2c800017 	ldw	r18,0(r5)
100033fc:	00801e04 	movi	r2,120
10003400:	d8812745 	stb	r2,1181(sp)
10003404:	00840074 	movhi	r2,4097
10003408:	10881b04 	addi	r2,r2,8300
1000340c:	29400104 	addi	r5,r5,4
10003410:	da012a17 	ldw	r8,1192(sp)
10003414:	d8813b15 	stw	r2,1260(sp)
10003418:	df012a15 	stw	fp,1192(sp)
1000341c:	002b883a 	mov	r21,zero
10003420:	9f000094 	ori	fp,r19,2
10003424:	d9412d15 	stw	r5,1204(sp)
10003428:	00800084 	movi	r2,2
1000342c:	04001e04 	movi	r16,120
10003430:	9007883a 	mov	r3,r18
10003434:	003f7406 	br	10003208 <__alt_data_end+0xf8003208>
10003438:	da012a17 	ldw	r8,1192(sp)
1000343c:	df012a15 	stw	fp,1192(sp)
10003440:	9839883a 	mov	fp,r19
10003444:	dcc12b03 	ldbu	r19,1196(sp)
10003448:	e080080c 	andi	r2,fp,32
1000344c:	d8c12d17 	ldw	r3,1204(sp)
10003450:	dcc12785 	stb	r19,1182(sp)
10003454:	103e321e 	bne	r2,zero,10002d20 <__alt_data_end+0xf8002d20>
10003458:	e080040c 	andi	r2,fp,16
1000345c:	10031326 	beq	r2,zero,100040ac <___vfprintf_internal_r+0x18e4>
10003460:	1c800017 	ldw	r18,0(r3)
10003464:	d9412d17 	ldw	r5,1204(sp)
10003468:	902bd7fa 	srai	r21,r18,31
1000346c:	29400104 	addi	r5,r5,4
10003470:	d9412d15 	stw	r5,1204(sp)
10003474:	a805883a 	mov	r2,r21
10003478:	003e2f06 	br	10002d38 <__alt_data_end+0xf8002d38>
1000347c:	9cc01014 	ori	r19,r19,64
10003480:	e005883a 	mov	r2,fp
10003484:	e4000007 	ldb	r16,0(fp)
10003488:	003d3706 	br	10002968 <__alt_data_end+0xf8002968>
1000348c:	d8c12d17 	ldw	r3,1204(sp)
10003490:	d9012d17 	ldw	r4,1204(sp)
10003494:	da012a17 	ldw	r8,1192(sp)
10003498:	18800017 	ldw	r2,0(r3)
1000349c:	21000104 	addi	r4,r4,4
100034a0:	00c00044 	movi	r3,1
100034a4:	df012a15 	stw	fp,1192(sp)
100034a8:	d8c12b15 	stw	r3,1196(sp)
100034ac:	9839883a 	mov	fp,r19
100034b0:	d8012785 	stb	zero,1182(sp)
100034b4:	d8810405 	stb	r2,1040(sp)
100034b8:	d9012d15 	stw	r4,1204(sp)
100034bc:	1823883a 	mov	r17,r3
100034c0:	d8c10404 	addi	r3,sp,1040
100034c4:	d8013215 	stw	zero,1224(sp)
100034c8:	d8013415 	stw	zero,1232(sp)
100034cc:	d8c13115 	stw	r3,1220(sp)
100034d0:	0005883a 	mov	r2,zero
100034d4:	003e4306 	br	10002de4 <__alt_data_end+0xf8002de4>
100034d8:	d8812b07 	ldb	r2,1196(sp)
100034dc:	1002fc1e 	bne	r2,zero,100040d0 <___vfprintf_internal_r+0x1908>
100034e0:	00c00804 	movi	r3,32
100034e4:	d8c12b05 	stb	r3,1196(sp)
100034e8:	e005883a 	mov	r2,fp
100034ec:	e4000007 	ldb	r16,0(fp)
100034f0:	003d1d06 	br	10002968 <__alt_data_end+0xf8002968>
100034f4:	9cc00054 	ori	r19,r19,1
100034f8:	e005883a 	mov	r2,fp
100034fc:	e4000007 	ldb	r16,0(fp)
10003500:	003d1906 	br	10002968 <__alt_data_end+0xf8002968>
10003504:	d9012d17 	ldw	r4,1204(sp)
10003508:	d9412d17 	ldw	r5,1204(sp)
1000350c:	21000017 	ldw	r4,0(r4)
10003510:	28c00104 	addi	r3,r5,4
10003514:	d9012e15 	stw	r4,1208(sp)
10003518:	20038c16 	blt	r4,zero,1000434c <___vfprintf_internal_r+0x1b84>
1000351c:	d8c12d15 	stw	r3,1204(sp)
10003520:	e005883a 	mov	r2,fp
10003524:	e4000007 	ldb	r16,0(fp)
10003528:	003d0f06 	br	10002968 <__alt_data_end+0xf8002968>
1000352c:	00c00ac4 	movi	r3,43
10003530:	d8c12b05 	stb	r3,1196(sp)
10003534:	e005883a 	mov	r2,fp
10003538:	e4000007 	ldb	r16,0(fp)
1000353c:	003d0a06 	br	10002968 <__alt_data_end+0xf8002968>
10003540:	d8c12d17 	ldw	r3,1204(sp)
10003544:	d9012d17 	ldw	r4,1204(sp)
10003548:	da012a17 	ldw	r8,1192(sp)
1000354c:	18c00017 	ldw	r3,0(r3)
10003550:	df012a15 	stw	fp,1192(sp)
10003554:	d8012785 	stb	zero,1182(sp)
10003558:	d8c13115 	stw	r3,1220(sp)
1000355c:	9839883a 	mov	fp,r19
10003560:	24800104 	addi	r18,r4,4
10003564:	1803f726 	beq	r3,zero,10004544 <___vfprintf_internal_r+0x1d7c>
10003568:	d9013117 	ldw	r4,1220(sp)
1000356c:	48038916 	blt	r9,zero,10004394 <___vfprintf_internal_r+0x1bcc>
10003570:	480d883a 	mov	r6,r9
10003574:	000b883a 	mov	r5,zero
10003578:	da013f15 	stw	r8,1276(sp)
1000357c:	da413e15 	stw	r9,1272(sp)
10003580:	0007ddc0 	call	10007ddc <memchr>
10003584:	da013f17 	ldw	r8,1276(sp)
10003588:	da413e17 	ldw	r9,1272(sp)
1000358c:	10045926 	beq	r2,zero,100046f4 <___vfprintf_internal_r+0x1f2c>
10003590:	d8c13117 	ldw	r3,1220(sp)
10003594:	10e3c83a 	sub	r17,r2,r3
10003598:	4c433516 	blt	r9,r17,10004270 <___vfprintf_internal_r+0x1aa8>
1000359c:	8805883a 	mov	r2,r17
100035a0:	88038116 	blt	r17,zero,100043a8 <___vfprintf_internal_r+0x1be0>
100035a4:	dcc12783 	ldbu	r19,1182(sp)
100035a8:	d8812b15 	stw	r2,1196(sp)
100035ac:	dc812d15 	stw	r18,1204(sp)
100035b0:	d8013215 	stw	zero,1224(sp)
100035b4:	d8013415 	stw	zero,1232(sp)
100035b8:	003e0306 	br	10002dc8 <__alt_data_end+0xf8002dc8>
100035bc:	da012a17 	ldw	r8,1192(sp)
100035c0:	df012a15 	stw	fp,1192(sp)
100035c4:	9839883a 	mov	fp,r19
100035c8:	dcc12b03 	ldbu	r19,1196(sp)
100035cc:	dcc12785 	stb	r19,1182(sp)
100035d0:	803d8f26 	beq	r16,zero,10002c10 <__alt_data_end+0xf8002c10>
100035d4:	00c00044 	movi	r3,1
100035d8:	d8c12b15 	stw	r3,1196(sp)
100035dc:	dc010405 	stb	r16,1040(sp)
100035e0:	d8012785 	stb	zero,1182(sp)
100035e4:	003fb506 	br	100034bc <__alt_data_end+0xf80034bc>
100035e8:	d8c12017 	ldw	r3,1152(sp)
100035ec:	003e3506 	br	10002ec4 <__alt_data_end+0xf8002ec4>
100035f0:	10803fcc 	andi	r2,r2,255
100035f4:	00c00044 	movi	r3,1
100035f8:	10fddc1e 	bne	r2,r3,10002d6c <__alt_data_end+0xf8002d6c>
100035fc:	a800021e 	bne	r21,zero,10003608 <___vfprintf_internal_r+0xe40>
10003600:	00800244 	movi	r2,9
10003604:	14801e2e 	bgeu	r2,r18,10003680 <___vfprintf_internal_r+0xeb8>
10003608:	dc012b15 	stw	r16,1196(sp)
1000360c:	dc410e04 	addi	r17,sp,1080
10003610:	9021883a 	mov	r16,r18
10003614:	da012c15 	stw	r8,1200(sp)
10003618:	a825883a 	mov	r18,r21
1000361c:	482b883a 	mov	r21,r9
10003620:	8009883a 	mov	r4,r16
10003624:	900b883a 	mov	r5,r18
10003628:	01800284 	movi	r6,10
1000362c:	000f883a 	mov	r7,zero
10003630:	000c1000 	call	1000c100 <__umoddi3>
10003634:	10800c04 	addi	r2,r2,48
10003638:	8c7fffc4 	addi	r17,r17,-1
1000363c:	8009883a 	mov	r4,r16
10003640:	900b883a 	mov	r5,r18
10003644:	01800284 	movi	r6,10
10003648:	000f883a 	mov	r7,zero
1000364c:	88800005 	stb	r2,0(r17)
10003650:	000bac00 	call	1000bac0 <__udivdi3>
10003654:	1021883a 	mov	r16,r2
10003658:	10c4b03a 	or	r2,r2,r3
1000365c:	1825883a 	mov	r18,r3
10003660:	103fef1e 	bne	r2,zero,10003620 <__alt_data_end+0xf8003620>
10003664:	d9012817 	ldw	r4,1184(sp)
10003668:	dc413115 	stw	r17,1220(sp)
1000366c:	dc012b17 	ldw	r16,1196(sp)
10003670:	da012c17 	ldw	r8,1200(sp)
10003674:	a813883a 	mov	r9,r21
10003678:	2463c83a 	sub	r17,r4,r17
1000367c:	003dcd06 	br	10002db4 <__alt_data_end+0xf8002db4>
10003680:	94800c04 	addi	r18,r18,48
10003684:	d8c10dc4 	addi	r3,sp,1079
10003688:	dc810dc5 	stb	r18,1079(sp)
1000368c:	dc413c17 	ldw	r17,1264(sp)
10003690:	d8c13115 	stw	r3,1220(sp)
10003694:	003dc706 	br	10002db4 <__alt_data_end+0xf8002db4>
10003698:	00801944 	movi	r2,101
1000369c:	1400720e 	bge	r2,r16,10003868 <___vfprintf_internal_r+0x10a0>
100036a0:	d9013717 	ldw	r4,1244(sp)
100036a4:	d9413917 	ldw	r5,1252(sp)
100036a8:	000d883a 	mov	r6,zero
100036ac:	000f883a 	mov	r7,zero
100036b0:	d8c13d15 	stw	r3,1268(sp)
100036b4:	da013f15 	stw	r8,1276(sp)
100036b8:	000da8c0 	call	1000da8c <__eqdf2>
100036bc:	d8c13d17 	ldw	r3,1268(sp)
100036c0:	da013f17 	ldw	r8,1276(sp)
100036c4:	1000f41e 	bne	r2,zero,10003a98 <___vfprintf_internal_r+0x12d0>
100036c8:	d8811f17 	ldw	r2,1148(sp)
100036cc:	01040074 	movhi	r4,4097
100036d0:	21082204 	addi	r4,r4,8328
100036d4:	18c00044 	addi	r3,r3,1
100036d8:	10800044 	addi	r2,r2,1
100036dc:	41000015 	stw	r4,0(r8)
100036e0:	01000044 	movi	r4,1
100036e4:	41000115 	stw	r4,4(r8)
100036e8:	d8c12015 	stw	r3,1152(sp)
100036ec:	d8811f15 	stw	r2,1148(sp)
100036f0:	010001c4 	movi	r4,7
100036f4:	20828d16 	blt	r4,r2,1000412c <___vfprintf_internal_r+0x1964>
100036f8:	42000204 	addi	r8,r8,8
100036fc:	d8812617 	ldw	r2,1176(sp)
10003700:	d9413317 	ldw	r5,1228(sp)
10003704:	11400216 	blt	r2,r5,10003710 <___vfprintf_internal_r+0xf48>
10003708:	e080004c 	andi	r2,fp,1
1000370c:	103e4126 	beq	r2,zero,10003014 <__alt_data_end+0xf8003014>
10003710:	d8813817 	ldw	r2,1248(sp)
10003714:	d9013517 	ldw	r4,1236(sp)
10003718:	d9413817 	ldw	r5,1248(sp)
1000371c:	1887883a 	add	r3,r3,r2
10003720:	d8811f17 	ldw	r2,1148(sp)
10003724:	41000015 	stw	r4,0(r8)
10003728:	41400115 	stw	r5,4(r8)
1000372c:	10800044 	addi	r2,r2,1
10003730:	d8c12015 	stw	r3,1152(sp)
10003734:	d8811f15 	stw	r2,1148(sp)
10003738:	010001c4 	movi	r4,7
1000373c:	20830916 	blt	r4,r2,10004364 <___vfprintf_internal_r+0x1b9c>
10003740:	42000204 	addi	r8,r8,8
10003744:	d8813317 	ldw	r2,1228(sp)
10003748:	143fffc4 	addi	r16,r2,-1
1000374c:	043e310e 	bge	zero,r16,10003014 <__alt_data_end+0xf8003014>
10003750:	04400404 	movi	r17,16
10003754:	d8811f17 	ldw	r2,1148(sp)
10003758:	8c007e0e 	bge	r17,r16,10003954 <___vfprintf_internal_r+0x118c>
1000375c:	01440074 	movhi	r5,4097
10003760:	29482284 	addi	r5,r5,8330
10003764:	d9412c15 	stw	r5,1200(sp)
10003768:	04c001c4 	movi	r19,7
1000376c:	00000306 	br	1000377c <___vfprintf_internal_r+0xfb4>
10003770:	42000204 	addi	r8,r8,8
10003774:	843ffc04 	addi	r16,r16,-16
10003778:	8c00790e 	bge	r17,r16,10003960 <___vfprintf_internal_r+0x1198>
1000377c:	18c00404 	addi	r3,r3,16
10003780:	10800044 	addi	r2,r2,1
10003784:	45000015 	stw	r20,0(r8)
10003788:	44400115 	stw	r17,4(r8)
1000378c:	d8c12015 	stw	r3,1152(sp)
10003790:	d8811f15 	stw	r2,1148(sp)
10003794:	98bff60e 	bge	r19,r2,10003770 <__alt_data_end+0xf8003770>
10003798:	b809883a 	mov	r4,r23
1000379c:	b00b883a 	mov	r5,r22
100037a0:	d9811e04 	addi	r6,sp,1144
100037a4:	0009c080 	call	10009c08 <__sprint_r>
100037a8:	103d1f1e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
100037ac:	d8c12017 	ldw	r3,1152(sp)
100037b0:	d8811f17 	ldw	r2,1148(sp)
100037b4:	da000404 	addi	r8,sp,16
100037b8:	003fee06 	br	10003774 <__alt_data_end+0xf8003774>
100037bc:	d9412e17 	ldw	r5,1208(sp)
100037c0:	d8812b17 	ldw	r2,1196(sp)
100037c4:	28a7c83a 	sub	r19,r5,r2
100037c8:	04fddc0e 	bge	zero,r19,10002f3c <__alt_data_end+0xf8002f3c>
100037cc:	05400404 	movi	r21,16
100037d0:	d8811f17 	ldw	r2,1148(sp)
100037d4:	acc3870e 	bge	r21,r19,100045f4 <___vfprintf_internal_r+0x1e2c>
100037d8:	01440074 	movhi	r5,4097
100037dc:	29482284 	addi	r5,r5,8330
100037e0:	d9412c15 	stw	r5,1200(sp)
100037e4:	048001c4 	movi	r18,7
100037e8:	00000306 	br	100037f8 <___vfprintf_internal_r+0x1030>
100037ec:	9cfffc04 	addi	r19,r19,-16
100037f0:	42000204 	addi	r8,r8,8
100037f4:	acc0110e 	bge	r21,r19,1000383c <___vfprintf_internal_r+0x1074>
100037f8:	18c00404 	addi	r3,r3,16
100037fc:	10800044 	addi	r2,r2,1
10003800:	45000015 	stw	r20,0(r8)
10003804:	45400115 	stw	r21,4(r8)
10003808:	d8c12015 	stw	r3,1152(sp)
1000380c:	d8811f15 	stw	r2,1148(sp)
10003810:	90bff60e 	bge	r18,r2,100037ec <__alt_data_end+0xf80037ec>
10003814:	b809883a 	mov	r4,r23
10003818:	b00b883a 	mov	r5,r22
1000381c:	d9811e04 	addi	r6,sp,1144
10003820:	0009c080 	call	10009c08 <__sprint_r>
10003824:	103d001e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10003828:	9cfffc04 	addi	r19,r19,-16
1000382c:	d8c12017 	ldw	r3,1152(sp)
10003830:	d8811f17 	ldw	r2,1148(sp)
10003834:	da000404 	addi	r8,sp,16
10003838:	acffef16 	blt	r21,r19,100037f8 <__alt_data_end+0xf80037f8>
1000383c:	d9012c17 	ldw	r4,1200(sp)
10003840:	1cc7883a 	add	r3,r3,r19
10003844:	10800044 	addi	r2,r2,1
10003848:	41000015 	stw	r4,0(r8)
1000384c:	44c00115 	stw	r19,4(r8)
10003850:	d8c12015 	stw	r3,1152(sp)
10003854:	d8811f15 	stw	r2,1148(sp)
10003858:	010001c4 	movi	r4,7
1000385c:	20817816 	blt	r4,r2,10003e40 <___vfprintf_internal_r+0x1678>
10003860:	42000204 	addi	r8,r8,8
10003864:	003db506 	br	10002f3c <__alt_data_end+0xf8002f3c>
10003868:	d9413317 	ldw	r5,1228(sp)
1000386c:	00800044 	movi	r2,1
10003870:	18c00044 	addi	r3,r3,1
10003874:	11413e0e 	bge	r2,r5,10003d70 <___vfprintf_internal_r+0x15a8>
10003878:	dc011f17 	ldw	r16,1148(sp)
1000387c:	d8813117 	ldw	r2,1220(sp)
10003880:	d8c12015 	stw	r3,1152(sp)
10003884:	84000044 	addi	r16,r16,1
10003888:	40800015 	stw	r2,0(r8)
1000388c:	00800044 	movi	r2,1
10003890:	40800115 	stw	r2,4(r8)
10003894:	dc011f15 	stw	r16,1148(sp)
10003898:	008001c4 	movi	r2,7
1000389c:	14015616 	blt	r2,r16,10003df8 <___vfprintf_internal_r+0x1630>
100038a0:	42000204 	addi	r8,r8,8
100038a4:	d9013817 	ldw	r4,1248(sp)
100038a8:	d9413517 	ldw	r5,1236(sp)
100038ac:	84000044 	addi	r16,r16,1
100038b0:	1907883a 	add	r3,r3,r4
100038b4:	41400015 	stw	r5,0(r8)
100038b8:	41000115 	stw	r4,4(r8)
100038bc:	d8c12015 	stw	r3,1152(sp)
100038c0:	dc011f15 	stw	r16,1148(sp)
100038c4:	008001c4 	movi	r2,7
100038c8:	14015416 	blt	r2,r16,10003e1c <___vfprintf_internal_r+0x1654>
100038cc:	44400204 	addi	r17,r8,8
100038d0:	d9013717 	ldw	r4,1244(sp)
100038d4:	d9413917 	ldw	r5,1252(sp)
100038d8:	000d883a 	mov	r6,zero
100038dc:	000f883a 	mov	r7,zero
100038e0:	d8c13d15 	stw	r3,1268(sp)
100038e4:	000da8c0 	call	1000da8c <__eqdf2>
100038e8:	d8c13d17 	ldw	r3,1268(sp)
100038ec:	1000a726 	beq	r2,zero,10003b8c <___vfprintf_internal_r+0x13c4>
100038f0:	d9013317 	ldw	r4,1228(sp)
100038f4:	d9413117 	ldw	r5,1220(sp)
100038f8:	84000044 	addi	r16,r16,1
100038fc:	20bfffc4 	addi	r2,r4,-1
10003900:	1887883a 	add	r3,r3,r2
10003904:	29000044 	addi	r4,r5,1
10003908:	88800115 	stw	r2,4(r17)
1000390c:	89000015 	stw	r4,0(r17)
10003910:	d8c12015 	stw	r3,1152(sp)
10003914:	dc011f15 	stw	r16,1148(sp)
10003918:	008001c4 	movi	r2,7
1000391c:	14012d16 	blt	r2,r16,10003dd4 <___vfprintf_internal_r+0x160c>
10003920:	8c400204 	addi	r17,r17,8
10003924:	d9413a17 	ldw	r5,1256(sp)
10003928:	dcc122c4 	addi	r19,sp,1163
1000392c:	84000044 	addi	r16,r16,1
10003930:	28c7883a 	add	r3,r5,r3
10003934:	8cc00015 	stw	r19,0(r17)
10003938:	89400115 	stw	r5,4(r17)
1000393c:	d8c12015 	stw	r3,1152(sp)
10003940:	dc011f15 	stw	r16,1148(sp)
10003944:	008001c4 	movi	r2,7
10003948:	14000e16 	blt	r2,r16,10003984 <___vfprintf_internal_r+0x11bc>
1000394c:	8a000204 	addi	r8,r17,8
10003950:	003db006 	br	10003014 <__alt_data_end+0xf8003014>
10003954:	01040074 	movhi	r4,4097
10003958:	21082284 	addi	r4,r4,8330
1000395c:	d9012c15 	stw	r4,1200(sp)
10003960:	d9012c17 	ldw	r4,1200(sp)
10003964:	1c07883a 	add	r3,r3,r16
10003968:	44000115 	stw	r16,4(r8)
1000396c:	41000015 	stw	r4,0(r8)
10003970:	10800044 	addi	r2,r2,1
10003974:	d8c12015 	stw	r3,1152(sp)
10003978:	d8811f15 	stw	r2,1148(sp)
1000397c:	010001c4 	movi	r4,7
10003980:	20bda30e 	bge	r4,r2,10003010 <__alt_data_end+0xf8003010>
10003984:	b809883a 	mov	r4,r23
10003988:	b00b883a 	mov	r5,r22
1000398c:	d9811e04 	addi	r6,sp,1144
10003990:	0009c080 	call	10009c08 <__sprint_r>
10003994:	103ca41e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10003998:	d8c12017 	ldw	r3,1152(sp)
1000399c:	da000404 	addi	r8,sp,16
100039a0:	003d9c06 	br	10003014 <__alt_data_end+0xf8003014>
100039a4:	b809883a 	mov	r4,r23
100039a8:	b00b883a 	mov	r5,r22
100039ac:	d9811e04 	addi	r6,sp,1144
100039b0:	0009c080 	call	10009c08 <__sprint_r>
100039b4:	103dd226 	beq	r2,zero,10003100 <__alt_data_end+0xf8003100>
100039b8:	003c9b06 	br	10002c28 <__alt_data_end+0xf8002c28>
100039bc:	10803fcc 	andi	r2,r2,255
100039c0:	1000311e 	bne	r2,zero,10003a88 <___vfprintf_internal_r+0x12c0>
100039c4:	e080004c 	andi	r2,fp,1
100039c8:	10002f26 	beq	r2,zero,10003a88 <___vfprintf_internal_r+0x12c0>
100039cc:	00800c04 	movi	r2,48
100039d0:	d8c10dc4 	addi	r3,sp,1079
100039d4:	d8810dc5 	stb	r2,1079(sp)
100039d8:	dc413c17 	ldw	r17,1264(sp)
100039dc:	d8c13115 	stw	r3,1220(sp)
100039e0:	003cf406 	br	10002db4 <__alt_data_end+0xf8002db4>
100039e4:	b809883a 	mov	r4,r23
100039e8:	b00b883a 	mov	r5,r22
100039ec:	d9811e04 	addi	r6,sp,1144
100039f0:	0009c080 	call	10009c08 <__sprint_r>
100039f4:	103c8c1e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
100039f8:	d8c12017 	ldw	r3,1152(sp)
100039fc:	da000404 	addi	r8,sp,16
10003a00:	003d7706 	br	10002fe0 <__alt_data_end+0xf8002fe0>
10003a04:	b809883a 	mov	r4,r23
10003a08:	b00b883a 	mov	r5,r22
10003a0c:	d9811e04 	addi	r6,sp,1144
10003a10:	0009c080 	call	10009c08 <__sprint_r>
10003a14:	103c841e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10003a18:	d8c12017 	ldw	r3,1152(sp)
10003a1c:	da000404 	addi	r8,sp,16
10003a20:	003d3506 	br	10002ef8 <__alt_data_end+0xf8002ef8>
10003a24:	b809883a 	mov	r4,r23
10003a28:	b00b883a 	mov	r5,r22
10003a2c:	d9811e04 	addi	r6,sp,1144
10003a30:	0009c080 	call	10009c08 <__sprint_r>
10003a34:	103c7c1e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10003a38:	d8c12017 	ldw	r3,1152(sp)
10003a3c:	da000404 	addi	r8,sp,16
10003a40:	003d3b06 	br	10002f30 <__alt_data_end+0xf8002f30>
10003a44:	d9413b17 	ldw	r5,1260(sp)
10003a48:	d8c10e04 	addi	r3,sp,1080
10003a4c:	908003cc 	andi	r2,r18,15
10003a50:	a808973a 	slli	r4,r21,28
10003a54:	2885883a 	add	r2,r5,r2
10003a58:	9024d13a 	srli	r18,r18,4
10003a5c:	10800003 	ldbu	r2,0(r2)
10003a60:	a82ad13a 	srli	r21,r21,4
10003a64:	18ffffc4 	addi	r3,r3,-1
10003a68:	24a4b03a 	or	r18,r4,r18
10003a6c:	18800005 	stb	r2,0(r3)
10003a70:	9544b03a 	or	r2,r18,r21
10003a74:	103ff51e 	bne	r2,zero,10003a4c <__alt_data_end+0xf8003a4c>
10003a78:	d9412817 	ldw	r5,1184(sp)
10003a7c:	d8c13115 	stw	r3,1220(sp)
10003a80:	28e3c83a 	sub	r17,r5,r3
10003a84:	003ccb06 	br	10002db4 <__alt_data_end+0xf8002db4>
10003a88:	d8c10e04 	addi	r3,sp,1080
10003a8c:	0023883a 	mov	r17,zero
10003a90:	d8c13115 	stw	r3,1220(sp)
10003a94:	003cc706 	br	10002db4 <__alt_data_end+0xf8002db4>
10003a98:	dc012617 	ldw	r16,1176(sp)
10003a9c:	0401ab0e 	bge	zero,r16,1000414c <___vfprintf_internal_r+0x1984>
10003aa0:	d8813317 	ldw	r2,1228(sp)
10003aa4:	d9413117 	ldw	r5,1220(sp)
10003aa8:	d9013417 	ldw	r4,1232(sp)
10003aac:	1023883a 	mov	r17,r2
10003ab0:	28a1883a 	add	r16,r5,r2
10003ab4:	2080010e 	bge	r4,r2,10003abc <___vfprintf_internal_r+0x12f4>
10003ab8:	2023883a 	mov	r17,r4
10003abc:	04400b0e 	bge	zero,r17,10003aec <___vfprintf_internal_r+0x1324>
10003ac0:	d8811f17 	ldw	r2,1148(sp)
10003ac4:	d9413117 	ldw	r5,1220(sp)
10003ac8:	1c47883a 	add	r3,r3,r17
10003acc:	10800044 	addi	r2,r2,1
10003ad0:	41400015 	stw	r5,0(r8)
10003ad4:	44400115 	stw	r17,4(r8)
10003ad8:	d8c12015 	stw	r3,1152(sp)
10003adc:	d8811f15 	stw	r2,1148(sp)
10003ae0:	010001c4 	movi	r4,7
10003ae4:	20826716 	blt	r4,r2,10004484 <___vfprintf_internal_r+0x1cbc>
10003ae8:	42000204 	addi	r8,r8,8
10003aec:	88026316 	blt	r17,zero,1000447c <___vfprintf_internal_r+0x1cb4>
10003af0:	d8813417 	ldw	r2,1232(sp)
10003af4:	1463c83a 	sub	r17,r2,r17
10003af8:	0440590e 	bge	zero,r17,10003c60 <___vfprintf_internal_r+0x1498>
10003afc:	04c00404 	movi	r19,16
10003b00:	d8811f17 	ldw	r2,1148(sp)
10003b04:	9c41770e 	bge	r19,r17,100040e4 <___vfprintf_internal_r+0x191c>
10003b08:	01440074 	movhi	r5,4097
10003b0c:	29482284 	addi	r5,r5,8330
10003b10:	d9412c15 	stw	r5,1200(sp)
10003b14:	054001c4 	movi	r21,7
10003b18:	00000306 	br	10003b28 <___vfprintf_internal_r+0x1360>
10003b1c:	42000204 	addi	r8,r8,8
10003b20:	8c7ffc04 	addi	r17,r17,-16
10003b24:	9c41720e 	bge	r19,r17,100040f0 <___vfprintf_internal_r+0x1928>
10003b28:	18c00404 	addi	r3,r3,16
10003b2c:	10800044 	addi	r2,r2,1
10003b30:	45000015 	stw	r20,0(r8)
10003b34:	44c00115 	stw	r19,4(r8)
10003b38:	d8c12015 	stw	r3,1152(sp)
10003b3c:	d8811f15 	stw	r2,1148(sp)
10003b40:	a8bff60e 	bge	r21,r2,10003b1c <__alt_data_end+0xf8003b1c>
10003b44:	b809883a 	mov	r4,r23
10003b48:	b00b883a 	mov	r5,r22
10003b4c:	d9811e04 	addi	r6,sp,1144
10003b50:	0009c080 	call	10009c08 <__sprint_r>
10003b54:	103c341e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10003b58:	d8c12017 	ldw	r3,1152(sp)
10003b5c:	d8811f17 	ldw	r2,1148(sp)
10003b60:	da000404 	addi	r8,sp,16
10003b64:	003fee06 	br	10003b20 <__alt_data_end+0xf8003b20>
10003b68:	b809883a 	mov	r4,r23
10003b6c:	b00b883a 	mov	r5,r22
10003b70:	d9811e04 	addi	r6,sp,1144
10003b74:	0009c080 	call	10009c08 <__sprint_r>
10003b78:	103c2b1e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10003b7c:	d8c12017 	ldw	r3,1152(sp)
10003b80:	d8812787 	ldb	r2,1182(sp)
10003b84:	da000404 	addi	r8,sp,16
10003b88:	003cce06 	br	10002ec4 <__alt_data_end+0xf8002ec4>
10003b8c:	d8813317 	ldw	r2,1228(sp)
10003b90:	14ffffc4 	addi	r19,r2,-1
10003b94:	04ff630e 	bge	zero,r19,10003924 <__alt_data_end+0xf8003924>
10003b98:	05400404 	movi	r21,16
10003b9c:	acc0810e 	bge	r21,r19,10003da4 <___vfprintf_internal_r+0x15dc>
10003ba0:	01440074 	movhi	r5,4097
10003ba4:	29482284 	addi	r5,r5,8330
10003ba8:	d9412c15 	stw	r5,1200(sp)
10003bac:	01c001c4 	movi	r7,7
10003bb0:	00000306 	br	10003bc0 <___vfprintf_internal_r+0x13f8>
10003bb4:	8c400204 	addi	r17,r17,8
10003bb8:	9cfffc04 	addi	r19,r19,-16
10003bbc:	acc07c0e 	bge	r21,r19,10003db0 <___vfprintf_internal_r+0x15e8>
10003bc0:	18c00404 	addi	r3,r3,16
10003bc4:	84000044 	addi	r16,r16,1
10003bc8:	8d000015 	stw	r20,0(r17)
10003bcc:	8d400115 	stw	r21,4(r17)
10003bd0:	d8c12015 	stw	r3,1152(sp)
10003bd4:	dc011f15 	stw	r16,1148(sp)
10003bd8:	3c3ff60e 	bge	r7,r16,10003bb4 <__alt_data_end+0xf8003bb4>
10003bdc:	b809883a 	mov	r4,r23
10003be0:	b00b883a 	mov	r5,r22
10003be4:	d9811e04 	addi	r6,sp,1144
10003be8:	d9c13d15 	stw	r7,1268(sp)
10003bec:	0009c080 	call	10009c08 <__sprint_r>
10003bf0:	d9c13d17 	ldw	r7,1268(sp)
10003bf4:	103c0c1e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10003bf8:	d8c12017 	ldw	r3,1152(sp)
10003bfc:	dc011f17 	ldw	r16,1148(sp)
10003c00:	dc400404 	addi	r17,sp,16
10003c04:	003fec06 	br	10003bb8 <__alt_data_end+0xf8003bb8>
10003c08:	00800084 	movi	r2,2
10003c0c:	9546b03a 	or	r3,r18,r21
10003c10:	003d7d06 	br	10003208 <__alt_data_end+0xf8003208>
10003c14:	10803fcc 	andi	r2,r2,255
10003c18:	1080201c 	xori	r2,r2,128
10003c1c:	10bfe004 	addi	r2,r2,-128
10003c20:	01000c04 	movi	r4,48
10003c24:	1101d726 	beq	r2,r4,10004384 <___vfprintf_internal_r+0x1bbc>
10003c28:	d9413117 	ldw	r5,1220(sp)
10003c2c:	d8812817 	ldw	r2,1184(sp)
10003c30:	193fffc5 	stb	r4,-1(r3)
10003c34:	297fffc4 	addi	r5,r5,-1
10003c38:	d9413115 	stw	r5,1220(sp)
10003c3c:	1163c83a 	sub	r17,r2,r5
10003c40:	003c5c06 	br	10002db4 <__alt_data_end+0xf8002db4>
10003c44:	b809883a 	mov	r4,r23
10003c48:	b00b883a 	mov	r5,r22
10003c4c:	d9811e04 	addi	r6,sp,1144
10003c50:	0009c080 	call	10009c08 <__sprint_r>
10003c54:	103bf41e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10003c58:	d8c12017 	ldw	r3,1152(sp)
10003c5c:	da000404 	addi	r8,sp,16
10003c60:	d9413117 	ldw	r5,1220(sp)
10003c64:	d9013417 	ldw	r4,1232(sp)
10003c68:	d8812617 	ldw	r2,1176(sp)
10003c6c:	2923883a 	add	r17,r5,r4
10003c70:	d9413317 	ldw	r5,1228(sp)
10003c74:	11400216 	blt	r2,r5,10003c80 <___vfprintf_internal_r+0x14b8>
10003c78:	e100004c 	andi	r4,fp,1
10003c7c:	20000d26 	beq	r4,zero,10003cb4 <___vfprintf_internal_r+0x14ec>
10003c80:	d9013817 	ldw	r4,1248(sp)
10003c84:	d9413517 	ldw	r5,1236(sp)
10003c88:	1907883a 	add	r3,r3,r4
10003c8c:	d9011f17 	ldw	r4,1148(sp)
10003c90:	41400015 	stw	r5,0(r8)
10003c94:	d9413817 	ldw	r5,1248(sp)
10003c98:	21000044 	addi	r4,r4,1
10003c9c:	d8c12015 	stw	r3,1152(sp)
10003ca0:	41400115 	stw	r5,4(r8)
10003ca4:	d9011f15 	stw	r4,1148(sp)
10003ca8:	014001c4 	movi	r5,7
10003cac:	2901fd16 	blt	r5,r4,100044a4 <___vfprintf_internal_r+0x1cdc>
10003cb0:	42000204 	addi	r8,r8,8
10003cb4:	d9013317 	ldw	r4,1228(sp)
10003cb8:	2085c83a 	sub	r2,r4,r2
10003cbc:	8449c83a 	sub	r4,r16,r17
10003cc0:	1021883a 	mov	r16,r2
10003cc4:	2080010e 	bge	r4,r2,10003ccc <___vfprintf_internal_r+0x1504>
10003cc8:	2021883a 	mov	r16,r4
10003ccc:	04000a0e 	bge	zero,r16,10003cf8 <___vfprintf_internal_r+0x1530>
10003cd0:	d9011f17 	ldw	r4,1148(sp)
10003cd4:	1c07883a 	add	r3,r3,r16
10003cd8:	44400015 	stw	r17,0(r8)
10003cdc:	21000044 	addi	r4,r4,1
10003ce0:	44000115 	stw	r16,4(r8)
10003ce4:	d8c12015 	stw	r3,1152(sp)
10003ce8:	d9011f15 	stw	r4,1148(sp)
10003cec:	014001c4 	movi	r5,7
10003cf0:	29020916 	blt	r5,r4,10004518 <___vfprintf_internal_r+0x1d50>
10003cf4:	42000204 	addi	r8,r8,8
10003cf8:	80020116 	blt	r16,zero,10004500 <___vfprintf_internal_r+0x1d38>
10003cfc:	1421c83a 	sub	r16,r2,r16
10003d00:	043cc40e 	bge	zero,r16,10003014 <__alt_data_end+0xf8003014>
10003d04:	04400404 	movi	r17,16
10003d08:	d8811f17 	ldw	r2,1148(sp)
10003d0c:	8c3f110e 	bge	r17,r16,10003954 <__alt_data_end+0xf8003954>
10003d10:	01440074 	movhi	r5,4097
10003d14:	29482284 	addi	r5,r5,8330
10003d18:	d9412c15 	stw	r5,1200(sp)
10003d1c:	04c001c4 	movi	r19,7
10003d20:	00000306 	br	10003d30 <___vfprintf_internal_r+0x1568>
10003d24:	42000204 	addi	r8,r8,8
10003d28:	843ffc04 	addi	r16,r16,-16
10003d2c:	8c3f0c0e 	bge	r17,r16,10003960 <__alt_data_end+0xf8003960>
10003d30:	18c00404 	addi	r3,r3,16
10003d34:	10800044 	addi	r2,r2,1
10003d38:	45000015 	stw	r20,0(r8)
10003d3c:	44400115 	stw	r17,4(r8)
10003d40:	d8c12015 	stw	r3,1152(sp)
10003d44:	d8811f15 	stw	r2,1148(sp)
10003d48:	98bff60e 	bge	r19,r2,10003d24 <__alt_data_end+0xf8003d24>
10003d4c:	b809883a 	mov	r4,r23
10003d50:	b00b883a 	mov	r5,r22
10003d54:	d9811e04 	addi	r6,sp,1144
10003d58:	0009c080 	call	10009c08 <__sprint_r>
10003d5c:	103bb21e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10003d60:	d8c12017 	ldw	r3,1152(sp)
10003d64:	d8811f17 	ldw	r2,1148(sp)
10003d68:	da000404 	addi	r8,sp,16
10003d6c:	003fee06 	br	10003d28 <__alt_data_end+0xf8003d28>
10003d70:	e088703a 	and	r4,fp,r2
10003d74:	203ec01e 	bne	r4,zero,10003878 <__alt_data_end+0xf8003878>
10003d78:	dc011f17 	ldw	r16,1148(sp)
10003d7c:	d9013117 	ldw	r4,1220(sp)
10003d80:	40800115 	stw	r2,4(r8)
10003d84:	84000044 	addi	r16,r16,1
10003d88:	41000015 	stw	r4,0(r8)
10003d8c:	d8c12015 	stw	r3,1152(sp)
10003d90:	dc011f15 	stw	r16,1148(sp)
10003d94:	008001c4 	movi	r2,7
10003d98:	14000e16 	blt	r2,r16,10003dd4 <___vfprintf_internal_r+0x160c>
10003d9c:	44400204 	addi	r17,r8,8
10003da0:	003ee006 	br	10003924 <__alt_data_end+0xf8003924>
10003da4:	01040074 	movhi	r4,4097
10003da8:	21082284 	addi	r4,r4,8330
10003dac:	d9012c15 	stw	r4,1200(sp)
10003db0:	d8812c17 	ldw	r2,1200(sp)
10003db4:	1cc7883a 	add	r3,r3,r19
10003db8:	84000044 	addi	r16,r16,1
10003dbc:	88800015 	stw	r2,0(r17)
10003dc0:	8cc00115 	stw	r19,4(r17)
10003dc4:	d8c12015 	stw	r3,1152(sp)
10003dc8:	dc011f15 	stw	r16,1148(sp)
10003dcc:	008001c4 	movi	r2,7
10003dd0:	143ed30e 	bge	r2,r16,10003920 <__alt_data_end+0xf8003920>
10003dd4:	b809883a 	mov	r4,r23
10003dd8:	b00b883a 	mov	r5,r22
10003ddc:	d9811e04 	addi	r6,sp,1144
10003de0:	0009c080 	call	10009c08 <__sprint_r>
10003de4:	103b901e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10003de8:	d8c12017 	ldw	r3,1152(sp)
10003dec:	dc011f17 	ldw	r16,1148(sp)
10003df0:	dc400404 	addi	r17,sp,16
10003df4:	003ecb06 	br	10003924 <__alt_data_end+0xf8003924>
10003df8:	b809883a 	mov	r4,r23
10003dfc:	b00b883a 	mov	r5,r22
10003e00:	d9811e04 	addi	r6,sp,1144
10003e04:	0009c080 	call	10009c08 <__sprint_r>
10003e08:	103b871e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10003e0c:	d8c12017 	ldw	r3,1152(sp)
10003e10:	dc011f17 	ldw	r16,1148(sp)
10003e14:	da000404 	addi	r8,sp,16
10003e18:	003ea206 	br	100038a4 <__alt_data_end+0xf80038a4>
10003e1c:	b809883a 	mov	r4,r23
10003e20:	b00b883a 	mov	r5,r22
10003e24:	d9811e04 	addi	r6,sp,1144
10003e28:	0009c080 	call	10009c08 <__sprint_r>
10003e2c:	103b7e1e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10003e30:	d8c12017 	ldw	r3,1152(sp)
10003e34:	dc011f17 	ldw	r16,1148(sp)
10003e38:	dc400404 	addi	r17,sp,16
10003e3c:	003ea406 	br	100038d0 <__alt_data_end+0xf80038d0>
10003e40:	b809883a 	mov	r4,r23
10003e44:	b00b883a 	mov	r5,r22
10003e48:	d9811e04 	addi	r6,sp,1144
10003e4c:	0009c080 	call	10009c08 <__sprint_r>
10003e50:	103b751e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10003e54:	d8c12017 	ldw	r3,1152(sp)
10003e58:	da000404 	addi	r8,sp,16
10003e5c:	003c3706 	br	10002f3c <__alt_data_end+0xf8002f3c>
10003e60:	04a5c83a 	sub	r18,zero,r18
10003e64:	9004c03a 	cmpne	r2,r18,zero
10003e68:	056bc83a 	sub	r21,zero,r21
10003e6c:	a8abc83a 	sub	r21,r21,r2
10003e70:	04c00b44 	movi	r19,45
10003e74:	dcc12785 	stb	r19,1182(sp)
10003e78:	da413215 	stw	r9,1224(sp)
10003e7c:	00800044 	movi	r2,1
10003e80:	9546b03a 	or	r3,r18,r21
10003e84:	003bb106 	br	10002d4c <__alt_data_end+0xf8002d4c>
10003e88:	da013f15 	stw	r8,1276(sp)
10003e8c:	da413e15 	stw	r9,1272(sp)
10003e90:	00098640 	call	10009864 <__fpclassifyd>
10003e94:	da013f17 	ldw	r8,1276(sp)
10003e98:	da413e17 	ldw	r9,1272(sp)
10003e9c:	1000e526 	beq	r2,zero,10004234 <___vfprintf_internal_r+0x1a6c>
10003ea0:	04fff7c4 	movi	r19,-33
10003ea4:	00bfffc4 	movi	r2,-1
10003ea8:	84e6703a 	and	r19,r16,r19
10003eac:	48822926 	beq	r9,r2,10004754 <___vfprintf_internal_r+0x1f8c>
10003eb0:	008011c4 	movi	r2,71
10003eb4:	98821626 	beq	r19,r2,10004710 <___vfprintf_internal_r+0x1f48>
10003eb8:	d9013917 	ldw	r4,1252(sp)
10003ebc:	e0c04014 	ori	r3,fp,256
10003ec0:	d8c12d15 	stw	r3,1204(sp)
10003ec4:	20021f16 	blt	r4,zero,10004744 <___vfprintf_internal_r+0x1f7c>
10003ec8:	dc413917 	ldw	r17,1252(sp)
10003ecc:	d8012b05 	stb	zero,1196(sp)
10003ed0:	00801984 	movi	r2,102
10003ed4:	80814d26 	beq	r16,r2,1000440c <___vfprintf_internal_r+0x1c44>
10003ed8:	00801184 	movi	r2,70
10003edc:	80814b26 	beq	r16,r2,1000440c <___vfprintf_internal_r+0x1c44>
10003ee0:	00801144 	movi	r2,69
10003ee4:	98821d26 	beq	r19,r2,1000475c <___vfprintf_internal_r+0x1f94>
10003ee8:	482b883a 	mov	r21,r9
10003eec:	d8812604 	addi	r2,sp,1176
10003ef0:	d8800115 	stw	r2,4(sp)
10003ef4:	d9413717 	ldw	r5,1244(sp)
10003ef8:	d8812504 	addi	r2,sp,1172
10003efc:	d8800215 	stw	r2,8(sp)
10003f00:	d8812104 	addi	r2,sp,1156
10003f04:	dd400015 	stw	r21,0(sp)
10003f08:	d8800315 	stw	r2,12(sp)
10003f0c:	b809883a 	mov	r4,r23
10003f10:	880d883a 	mov	r6,r17
10003f14:	01c00084 	movi	r7,2
10003f18:	da013f15 	stw	r8,1276(sp)
10003f1c:	da413e15 	stw	r9,1272(sp)
10003f20:	0004c400 	call	10004c40 <_dtoa_r>
10003f24:	d8813115 	stw	r2,1220(sp)
10003f28:	008019c4 	movi	r2,103
10003f2c:	da013f17 	ldw	r8,1276(sp)
10003f30:	da413e17 	ldw	r9,1272(sp)
10003f34:	80800226 	beq	r16,r2,10003f40 <___vfprintf_internal_r+0x1778>
10003f38:	008011c4 	movi	r2,71
10003f3c:	8081451e 	bne	r16,r2,10004454 <___vfprintf_internal_r+0x1c8c>
10003f40:	e080004c 	andi	r2,fp,1
10003f44:	10021e26 	beq	r2,zero,100047c0 <___vfprintf_internal_r+0x1ff8>
10003f48:	d8c13117 	ldw	r3,1220(sp)
10003f4c:	1d55883a 	add	r10,r3,r21
10003f50:	d9013717 	ldw	r4,1244(sp)
10003f54:	880b883a 	mov	r5,r17
10003f58:	000d883a 	mov	r6,zero
10003f5c:	000f883a 	mov	r7,zero
10003f60:	da013f15 	stw	r8,1276(sp)
10003f64:	da413e15 	stw	r9,1272(sp)
10003f68:	da813d15 	stw	r10,1268(sp)
10003f6c:	000da8c0 	call	1000da8c <__eqdf2>
10003f70:	da013f17 	ldw	r8,1276(sp)
10003f74:	da413e17 	ldw	r9,1272(sp)
10003f78:	da813d17 	ldw	r10,1268(sp)
10003f7c:	1001a126 	beq	r2,zero,10004604 <___vfprintf_internal_r+0x1e3c>
10003f80:	d8812117 	ldw	r2,1156(sp)
10003f84:	1280062e 	bgeu	r2,r10,10003fa0 <___vfprintf_internal_r+0x17d8>
10003f88:	01000c04 	movi	r4,48
10003f8c:	10c00044 	addi	r3,r2,1
10003f90:	d8c12115 	stw	r3,1156(sp)
10003f94:	11000005 	stb	r4,0(r2)
10003f98:	d8812117 	ldw	r2,1156(sp)
10003f9c:	12bffb36 	bltu	r2,r10,10003f8c <__alt_data_end+0xf8003f8c>
10003fa0:	d8c13117 	ldw	r3,1220(sp)
10003fa4:	10c5c83a 	sub	r2,r2,r3
10003fa8:	d8813315 	stw	r2,1228(sp)
10003fac:	008011c4 	movi	r2,71
10003fb0:	98818926 	beq	r19,r2,100045d8 <___vfprintf_internal_r+0x1e10>
10003fb4:	00801944 	movi	r2,101
10003fb8:	14023c0e 	bge	r2,r16,100048ac <___vfprintf_internal_r+0x20e4>
10003fbc:	d8c12617 	ldw	r3,1176(sp)
10003fc0:	00801984 	movi	r2,102
10003fc4:	d8c13415 	stw	r3,1232(sp)
10003fc8:	8081ef26 	beq	r16,r2,10004788 <___vfprintf_internal_r+0x1fc0>
10003fcc:	d8c13417 	ldw	r3,1232(sp)
10003fd0:	d9013317 	ldw	r4,1228(sp)
10003fd4:	1901e316 	blt	r3,r4,10004764 <___vfprintf_internal_r+0x1f9c>
10003fd8:	e080004c 	andi	r2,fp,1
10003fdc:	1001f426 	beq	r2,zero,100047b0 <___vfprintf_internal_r+0x1fe8>
10003fe0:	d8c13417 	ldw	r3,1232(sp)
10003fe4:	1c400044 	addi	r17,r3,1
10003fe8:	8839883a 	mov	fp,r17
10003fec:	8801e416 	blt	r17,zero,10004780 <___vfprintf_internal_r+0x1fb8>
10003ff0:	dd412b07 	ldb	r21,1196(sp)
10003ff4:	a801701e 	bne	r21,zero,100045b8 <___vfprintf_internal_r+0x1df0>
10003ff8:	df012b15 	stw	fp,1196(sp)
10003ffc:	dcc12783 	ldbu	r19,1182(sp)
10004000:	df012d17 	ldw	fp,1204(sp)
10004004:	d8013215 	stw	zero,1224(sp)
10004008:	dc812d15 	stw	r18,1204(sp)
1000400c:	003b6e06 	br	10002dc8 <__alt_data_end+0xf8002dc8>
10004010:	e080040c 	andi	r2,fp,16
10004014:	1000b51e 	bne	r2,zero,100042ec <___vfprintf_internal_r+0x1b24>
10004018:	e080100c 	andi	r2,fp,64
1000401c:	10015b26 	beq	r2,zero,1000458c <___vfprintf_internal_r+0x1dc4>
10004020:	d9012d17 	ldw	r4,1204(sp)
10004024:	d9412f17 	ldw	r5,1212(sp)
10004028:	20800017 	ldw	r2,0(r4)
1000402c:	21000104 	addi	r4,r4,4
10004030:	d9012d15 	stw	r4,1204(sp)
10004034:	1140000d 	sth	r5,0(r2)
10004038:	003a2006 	br	100028bc <__alt_data_end+0xf80028bc>
1000403c:	e0c0100c 	andi	r3,fp,64
10004040:	1800a226 	beq	r3,zero,100042cc <___vfprintf_internal_r+0x1b04>
10004044:	d8c12d17 	ldw	r3,1204(sp)
10004048:	1480000b 	ldhu	r18,0(r2)
1000404c:	002b883a 	mov	r21,zero
10004050:	18c00104 	addi	r3,r3,4
10004054:	d8c12d15 	stw	r3,1204(sp)
10004058:	0005883a 	mov	r2,zero
1000405c:	9007883a 	mov	r3,r18
10004060:	003c6906 	br	10003208 <__alt_data_end+0xf8003208>
10004064:	e0c0100c 	andi	r3,fp,64
10004068:	18009026 	beq	r3,zero,100042ac <___vfprintf_internal_r+0x1ae4>
1000406c:	1480000b 	ldhu	r18,0(r2)
10004070:	d8812d17 	ldw	r2,1204(sp)
10004074:	002b883a 	mov	r21,zero
10004078:	9007883a 	mov	r3,r18
1000407c:	10800104 	addi	r2,r2,4
10004080:	d8812d15 	stw	r2,1204(sp)
10004084:	00800044 	movi	r2,1
10004088:	003c5f06 	br	10003208 <__alt_data_end+0xf8003208>
1000408c:	e0c0100c 	andi	r3,fp,64
10004090:	18008026 	beq	r3,zero,10004294 <___vfprintf_internal_r+0x1acc>
10004094:	d9012d17 	ldw	r4,1204(sp)
10004098:	1480000b 	ldhu	r18,0(r2)
1000409c:	002b883a 	mov	r21,zero
100040a0:	21000104 	addi	r4,r4,4
100040a4:	d9012d15 	stw	r4,1204(sp)
100040a8:	003c7906 	br	10003290 <__alt_data_end+0xf8003290>
100040ac:	e080100c 	andi	r2,fp,64
100040b0:	10007126 	beq	r2,zero,10004278 <___vfprintf_internal_r+0x1ab0>
100040b4:	1c80000f 	ldh	r18,0(r3)
100040b8:	d8812d17 	ldw	r2,1204(sp)
100040bc:	902bd7fa 	srai	r21,r18,31
100040c0:	10800104 	addi	r2,r2,4
100040c4:	d8812d15 	stw	r2,1204(sp)
100040c8:	a805883a 	mov	r2,r21
100040cc:	003b1a06 	br	10002d38 <__alt_data_end+0xf8002d38>
100040d0:	e4000007 	ldb	r16,0(fp)
100040d4:	e005883a 	mov	r2,fp
100040d8:	003a2306 	br	10002968 <__alt_data_end+0xf8002968>
100040dc:	00800084 	movi	r2,2
100040e0:	003c4906 	br	10003208 <__alt_data_end+0xf8003208>
100040e4:	01040074 	movhi	r4,4097
100040e8:	21082284 	addi	r4,r4,8330
100040ec:	d9012c15 	stw	r4,1200(sp)
100040f0:	d9012c17 	ldw	r4,1200(sp)
100040f4:	1c47883a 	add	r3,r3,r17
100040f8:	10800044 	addi	r2,r2,1
100040fc:	41000015 	stw	r4,0(r8)
10004100:	44400115 	stw	r17,4(r8)
10004104:	d8c12015 	stw	r3,1152(sp)
10004108:	d8811f15 	stw	r2,1148(sp)
1000410c:	010001c4 	movi	r4,7
10004110:	20becc16 	blt	r4,r2,10003c44 <__alt_data_end+0xf8003c44>
10004114:	42000204 	addi	r8,r8,8
10004118:	003ed106 	br	10003c60 <__alt_data_end+0xf8003c60>
1000411c:	01040074 	movhi	r4,4097
10004120:	21082284 	addi	r4,r4,8330
10004124:	d9012c15 	stw	r4,1200(sp)
10004128:	003ba306 	br	10002fb8 <__alt_data_end+0xf8002fb8>
1000412c:	b809883a 	mov	r4,r23
10004130:	b00b883a 	mov	r5,r22
10004134:	d9811e04 	addi	r6,sp,1144
10004138:	0009c080 	call	10009c08 <__sprint_r>
1000413c:	103aba1e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10004140:	d8c12017 	ldw	r3,1152(sp)
10004144:	da000404 	addi	r8,sp,16
10004148:	003d6c06 	br	100036fc <__alt_data_end+0xf80036fc>
1000414c:	d8811f17 	ldw	r2,1148(sp)
10004150:	01440074 	movhi	r5,4097
10004154:	01000044 	movi	r4,1
10004158:	18c00044 	addi	r3,r3,1
1000415c:	10800044 	addi	r2,r2,1
10004160:	29482204 	addi	r5,r5,8328
10004164:	41000115 	stw	r4,4(r8)
10004168:	41400015 	stw	r5,0(r8)
1000416c:	d8c12015 	stw	r3,1152(sp)
10004170:	d8811f15 	stw	r2,1148(sp)
10004174:	010001c4 	movi	r4,7
10004178:	20806716 	blt	r4,r2,10004318 <___vfprintf_internal_r+0x1b50>
1000417c:	42000204 	addi	r8,r8,8
10004180:	8000041e 	bne	r16,zero,10004194 <___vfprintf_internal_r+0x19cc>
10004184:	d8813317 	ldw	r2,1228(sp)
10004188:	1000021e 	bne	r2,zero,10004194 <___vfprintf_internal_r+0x19cc>
1000418c:	e080004c 	andi	r2,fp,1
10004190:	103ba026 	beq	r2,zero,10003014 <__alt_data_end+0xf8003014>
10004194:	d9013817 	ldw	r4,1248(sp)
10004198:	d8811f17 	ldw	r2,1148(sp)
1000419c:	d9413517 	ldw	r5,1236(sp)
100041a0:	1907883a 	add	r3,r3,r4
100041a4:	10800044 	addi	r2,r2,1
100041a8:	41000115 	stw	r4,4(r8)
100041ac:	41400015 	stw	r5,0(r8)
100041b0:	d8c12015 	stw	r3,1152(sp)
100041b4:	d8811f15 	stw	r2,1148(sp)
100041b8:	010001c4 	movi	r4,7
100041bc:	20815716 	blt	r4,r2,1000471c <___vfprintf_internal_r+0x1f54>
100041c0:	42000204 	addi	r8,r8,8
100041c4:	0421c83a 	sub	r16,zero,r16
100041c8:	0400810e 	bge	zero,r16,100043d0 <___vfprintf_internal_r+0x1c08>
100041cc:	04400404 	movi	r17,16
100041d0:	8c00bd0e 	bge	r17,r16,100044c8 <___vfprintf_internal_r+0x1d00>
100041d4:	01440074 	movhi	r5,4097
100041d8:	29482284 	addi	r5,r5,8330
100041dc:	d9412c15 	stw	r5,1200(sp)
100041e0:	04c001c4 	movi	r19,7
100041e4:	00000306 	br	100041f4 <___vfprintf_internal_r+0x1a2c>
100041e8:	42000204 	addi	r8,r8,8
100041ec:	843ffc04 	addi	r16,r16,-16
100041f0:	8c00b80e 	bge	r17,r16,100044d4 <___vfprintf_internal_r+0x1d0c>
100041f4:	18c00404 	addi	r3,r3,16
100041f8:	10800044 	addi	r2,r2,1
100041fc:	45000015 	stw	r20,0(r8)
10004200:	44400115 	stw	r17,4(r8)
10004204:	d8c12015 	stw	r3,1152(sp)
10004208:	d8811f15 	stw	r2,1148(sp)
1000420c:	98bff60e 	bge	r19,r2,100041e8 <__alt_data_end+0xf80041e8>
10004210:	b809883a 	mov	r4,r23
10004214:	b00b883a 	mov	r5,r22
10004218:	d9811e04 	addi	r6,sp,1144
1000421c:	0009c080 	call	10009c08 <__sprint_r>
10004220:	103a811e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10004224:	d8c12017 	ldw	r3,1152(sp)
10004228:	d8811f17 	ldw	r2,1148(sp)
1000422c:	da000404 	addi	r8,sp,16
10004230:	003fee06 	br	100041ec <__alt_data_end+0xf80041ec>
10004234:	008011c4 	movi	r2,71
10004238:	1400db16 	blt	r2,r16,100045a8 <___vfprintf_internal_r+0x1de0>
1000423c:	01040074 	movhi	r4,4097
10004240:	21081404 	addi	r4,r4,8272
10004244:	d9013115 	stw	r4,1220(sp)
10004248:	00c000c4 	movi	r3,3
1000424c:	00bfdfc4 	movi	r2,-129
10004250:	d8c12b15 	stw	r3,1196(sp)
10004254:	e0b8703a 	and	fp,fp,r2
10004258:	dcc12783 	ldbu	r19,1182(sp)
1000425c:	dc812d15 	stw	r18,1204(sp)
10004260:	1823883a 	mov	r17,r3
10004264:	d8013215 	stw	zero,1224(sp)
10004268:	d8013415 	stw	zero,1232(sp)
1000426c:	003ad606 	br	10002dc8 <__alt_data_end+0xf8002dc8>
10004270:	4823883a 	mov	r17,r9
10004274:	003cc906 	br	1000359c <__alt_data_end+0xf800359c>
10004278:	1c800017 	ldw	r18,0(r3)
1000427c:	d8c12d17 	ldw	r3,1204(sp)
10004280:	902bd7fa 	srai	r21,r18,31
10004284:	18c00104 	addi	r3,r3,4
10004288:	d8c12d15 	stw	r3,1204(sp)
1000428c:	a805883a 	mov	r2,r21
10004290:	003aa906 	br	10002d38 <__alt_data_end+0xf8002d38>
10004294:	d9412d17 	ldw	r5,1204(sp)
10004298:	14800017 	ldw	r18,0(r2)
1000429c:	002b883a 	mov	r21,zero
100042a0:	29400104 	addi	r5,r5,4
100042a4:	d9412d15 	stw	r5,1204(sp)
100042a8:	003bf906 	br	10003290 <__alt_data_end+0xf8003290>
100042ac:	d8c12d17 	ldw	r3,1204(sp)
100042b0:	14800017 	ldw	r18,0(r2)
100042b4:	002b883a 	mov	r21,zero
100042b8:	18c00104 	addi	r3,r3,4
100042bc:	d8c12d15 	stw	r3,1204(sp)
100042c0:	00800044 	movi	r2,1
100042c4:	9007883a 	mov	r3,r18
100042c8:	003bcf06 	br	10003208 <__alt_data_end+0xf8003208>
100042cc:	d9012d17 	ldw	r4,1204(sp)
100042d0:	14800017 	ldw	r18,0(r2)
100042d4:	002b883a 	mov	r21,zero
100042d8:	21000104 	addi	r4,r4,4
100042dc:	d9012d15 	stw	r4,1204(sp)
100042e0:	0005883a 	mov	r2,zero
100042e4:	9007883a 	mov	r3,r18
100042e8:	003bc706 	br	10003208 <__alt_data_end+0xf8003208>
100042ec:	d9412d17 	ldw	r5,1204(sp)
100042f0:	d8c12f17 	ldw	r3,1212(sp)
100042f4:	28800017 	ldw	r2,0(r5)
100042f8:	29400104 	addi	r5,r5,4
100042fc:	d9412d15 	stw	r5,1204(sp)
10004300:	10c00015 	stw	r3,0(r2)
10004304:	00396d06 	br	100028bc <__alt_data_end+0xf80028bc>
10004308:	01040074 	movhi	r4,4097
1000430c:	21081204 	addi	r4,r4,8264
10004310:	d9013115 	stw	r4,1220(sp)
10004314:	003ba206 	br	100031a0 <__alt_data_end+0xf80031a0>
10004318:	b809883a 	mov	r4,r23
1000431c:	b00b883a 	mov	r5,r22
10004320:	d9811e04 	addi	r6,sp,1144
10004324:	0009c080 	call	10009c08 <__sprint_r>
10004328:	103a3f1e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
1000432c:	dc012617 	ldw	r16,1176(sp)
10004330:	d8c12017 	ldw	r3,1152(sp)
10004334:	da000404 	addi	r8,sp,16
10004338:	003f9106 	br	10004180 <__alt_data_end+0xf8004180>
1000433c:	e0800044 	addi	r2,fp,1
10004340:	9cc00814 	ori	r19,r19,32
10004344:	e4000047 	ldb	r16,1(fp)
10004348:	00398706 	br	10002968 <__alt_data_end+0xf8002968>
1000434c:	d8812e17 	ldw	r2,1208(sp)
10004350:	d8c12d15 	stw	r3,1204(sp)
10004354:	0085c83a 	sub	r2,zero,r2
10004358:	d8812e15 	stw	r2,1208(sp)
1000435c:	e005883a 	mov	r2,fp
10004360:	003a3a06 	br	10002c4c <__alt_data_end+0xf8002c4c>
10004364:	b809883a 	mov	r4,r23
10004368:	b00b883a 	mov	r5,r22
1000436c:	d9811e04 	addi	r6,sp,1144
10004370:	0009c080 	call	10009c08 <__sprint_r>
10004374:	103a2c1e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10004378:	d8c12017 	ldw	r3,1152(sp)
1000437c:	da000404 	addi	r8,sp,16
10004380:	003cf006 	br	10003744 <__alt_data_end+0xf8003744>
10004384:	d8c12817 	ldw	r3,1184(sp)
10004388:	d9013117 	ldw	r4,1220(sp)
1000438c:	1923c83a 	sub	r17,r3,r4
10004390:	003a8806 	br	10002db4 <__alt_data_end+0xf8002db4>
10004394:	da013f15 	stw	r8,1276(sp)
10004398:	00027300 	call	10002730 <strlen>
1000439c:	1023883a 	mov	r17,r2
100043a0:	da013f17 	ldw	r8,1276(sp)
100043a4:	883c7f0e 	bge	r17,zero,100035a4 <__alt_data_end+0xf80035a4>
100043a8:	0005883a 	mov	r2,zero
100043ac:	003c7d06 	br	100035a4 <__alt_data_end+0xf80035a4>
100043b0:	b809883a 	mov	r4,r23
100043b4:	b00b883a 	mov	r5,r22
100043b8:	d9811e04 	addi	r6,sp,1144
100043bc:	0009c080 	call	10009c08 <__sprint_r>
100043c0:	103a191e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
100043c4:	d8c12017 	ldw	r3,1152(sp)
100043c8:	d8811f17 	ldw	r2,1148(sp)
100043cc:	da000404 	addi	r8,sp,16
100043d0:	d9413317 	ldw	r5,1228(sp)
100043d4:	d9013117 	ldw	r4,1220(sp)
100043d8:	10800044 	addi	r2,r2,1
100043dc:	28c7883a 	add	r3,r5,r3
100043e0:	41000015 	stw	r4,0(r8)
100043e4:	41400115 	stw	r5,4(r8)
100043e8:	d8c12015 	stw	r3,1152(sp)
100043ec:	d8811f15 	stw	r2,1148(sp)
100043f0:	010001c4 	movi	r4,7
100043f4:	20bb060e 	bge	r4,r2,10003010 <__alt_data_end+0xf8003010>
100043f8:	003d6206 	br	10003984 <__alt_data_end+0xf8003984>
100043fc:	01040074 	movhi	r4,4097
10004400:	21082684 	addi	r4,r4,8346
10004404:	d9013615 	stw	r4,1240(sp)
10004408:	003aa306 	br	10002e98 <__alt_data_end+0xf8002e98>
1000440c:	d8812604 	addi	r2,sp,1176
10004410:	d8800115 	stw	r2,4(sp)
10004414:	d9413717 	ldw	r5,1244(sp)
10004418:	d8812504 	addi	r2,sp,1172
1000441c:	d8800215 	stw	r2,8(sp)
10004420:	d8812104 	addi	r2,sp,1156
10004424:	da400015 	stw	r9,0(sp)
10004428:	d8800315 	stw	r2,12(sp)
1000442c:	b809883a 	mov	r4,r23
10004430:	880d883a 	mov	r6,r17
10004434:	01c000c4 	movi	r7,3
10004438:	da013f15 	stw	r8,1276(sp)
1000443c:	da413e15 	stw	r9,1272(sp)
10004440:	0004c400 	call	10004c40 <_dtoa_r>
10004444:	da413e17 	ldw	r9,1272(sp)
10004448:	da013f17 	ldw	r8,1276(sp)
1000444c:	d8813115 	stw	r2,1220(sp)
10004450:	482b883a 	mov	r21,r9
10004454:	d8c13117 	ldw	r3,1220(sp)
10004458:	00801184 	movi	r2,70
1000445c:	1d55883a 	add	r10,r3,r21
10004460:	98bebb1e 	bne	r19,r2,10003f50 <__alt_data_end+0xf8003f50>
10004464:	19000007 	ldb	r4,0(r3)
10004468:	00800c04 	movi	r2,48
1000446c:	2080dd26 	beq	r4,r2,100047e4 <___vfprintf_internal_r+0x201c>
10004470:	d8c12617 	ldw	r3,1176(sp)
10004474:	50d5883a 	add	r10,r10,r3
10004478:	003eb506 	br	10003f50 <__alt_data_end+0xf8003f50>
1000447c:	0023883a 	mov	r17,zero
10004480:	003d9b06 	br	10003af0 <__alt_data_end+0xf8003af0>
10004484:	b809883a 	mov	r4,r23
10004488:	b00b883a 	mov	r5,r22
1000448c:	d9811e04 	addi	r6,sp,1144
10004490:	0009c080 	call	10009c08 <__sprint_r>
10004494:	1039e41e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10004498:	d8c12017 	ldw	r3,1152(sp)
1000449c:	da000404 	addi	r8,sp,16
100044a0:	003d9206 	br	10003aec <__alt_data_end+0xf8003aec>
100044a4:	b809883a 	mov	r4,r23
100044a8:	b00b883a 	mov	r5,r22
100044ac:	d9811e04 	addi	r6,sp,1144
100044b0:	0009c080 	call	10009c08 <__sprint_r>
100044b4:	1039dc1e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
100044b8:	d8812617 	ldw	r2,1176(sp)
100044bc:	d8c12017 	ldw	r3,1152(sp)
100044c0:	da000404 	addi	r8,sp,16
100044c4:	003dfb06 	br	10003cb4 <__alt_data_end+0xf8003cb4>
100044c8:	01040074 	movhi	r4,4097
100044cc:	21082284 	addi	r4,r4,8330
100044d0:	d9012c15 	stw	r4,1200(sp)
100044d4:	d9012c17 	ldw	r4,1200(sp)
100044d8:	1c07883a 	add	r3,r3,r16
100044dc:	10800044 	addi	r2,r2,1
100044e0:	41000015 	stw	r4,0(r8)
100044e4:	44000115 	stw	r16,4(r8)
100044e8:	d8c12015 	stw	r3,1152(sp)
100044ec:	d8811f15 	stw	r2,1148(sp)
100044f0:	010001c4 	movi	r4,7
100044f4:	20bfae16 	blt	r4,r2,100043b0 <__alt_data_end+0xf80043b0>
100044f8:	42000204 	addi	r8,r8,8
100044fc:	003fb406 	br	100043d0 <__alt_data_end+0xf80043d0>
10004500:	0021883a 	mov	r16,zero
10004504:	003dfd06 	br	10003cfc <__alt_data_end+0xf8003cfc>
10004508:	01440074 	movhi	r5,4097
1000450c:	29482684 	addi	r5,r5,8346
10004510:	d9413615 	stw	r5,1240(sp)
10004514:	003ae306 	br	100030a4 <__alt_data_end+0xf80030a4>
10004518:	b809883a 	mov	r4,r23
1000451c:	b00b883a 	mov	r5,r22
10004520:	d9811e04 	addi	r6,sp,1144
10004524:	0009c080 	call	10009c08 <__sprint_r>
10004528:	1039bf1e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
1000452c:	d8812617 	ldw	r2,1176(sp)
10004530:	d9413317 	ldw	r5,1228(sp)
10004534:	d8c12017 	ldw	r3,1152(sp)
10004538:	da000404 	addi	r8,sp,16
1000453c:	2885c83a 	sub	r2,r5,r2
10004540:	003ded06 	br	10003cf8 <__alt_data_end+0xf8003cf8>
10004544:	00800184 	movi	r2,6
10004548:	1240012e 	bgeu	r2,r9,10004550 <___vfprintf_internal_r+0x1d88>
1000454c:	1013883a 	mov	r9,r2
10004550:	4823883a 	mov	r17,r9
10004554:	4805883a 	mov	r2,r9
10004558:	4800b216 	blt	r9,zero,10004824 <___vfprintf_internal_r+0x205c>
1000455c:	01440074 	movhi	r5,4097
10004560:	29482004 	addi	r5,r5,8320
10004564:	d8812b15 	stw	r2,1196(sp)
10004568:	dc812d15 	stw	r18,1204(sp)
1000456c:	d8013215 	stw	zero,1224(sp)
10004570:	d8013415 	stw	zero,1232(sp)
10004574:	d9413115 	stw	r5,1220(sp)
10004578:	0005883a 	mov	r2,zero
1000457c:	003a1906 	br	10002de4 <__alt_data_end+0xf8002de4>
10004580:	04c00b44 	movi	r19,45
10004584:	dcc12785 	stb	r19,1182(sp)
10004588:	003b0006 	br	1000318c <__alt_data_end+0xf800318c>
1000458c:	d8c12d17 	ldw	r3,1204(sp)
10004590:	d9012f17 	ldw	r4,1212(sp)
10004594:	18800017 	ldw	r2,0(r3)
10004598:	18c00104 	addi	r3,r3,4
1000459c:	d8c12d15 	stw	r3,1204(sp)
100045a0:	11000015 	stw	r4,0(r2)
100045a4:	0038c506 	br	100028bc <__alt_data_end+0xf80028bc>
100045a8:	01440074 	movhi	r5,4097
100045ac:	29481504 	addi	r5,r5,8276
100045b0:	d9413115 	stw	r5,1220(sp)
100045b4:	003f2406 	br	10004248 <__alt_data_end+0xf8004248>
100045b8:	00800b44 	movi	r2,45
100045bc:	d8812785 	stb	r2,1182(sp)
100045c0:	df012b15 	stw	fp,1196(sp)
100045c4:	d8013215 	stw	zero,1224(sp)
100045c8:	df012d17 	ldw	fp,1204(sp)
100045cc:	00800b44 	movi	r2,45
100045d0:	dc812d15 	stw	r18,1204(sp)
100045d4:	003a0006 	br	10002dd8 <__alt_data_end+0xf8002dd8>
100045d8:	d8c12617 	ldw	r3,1176(sp)
100045dc:	00bfff44 	movi	r2,-3
100045e0:	18800a16 	blt	r3,r2,1000460c <___vfprintf_internal_r+0x1e44>
100045e4:	48c00916 	blt	r9,r3,1000460c <___vfprintf_internal_r+0x1e44>
100045e8:	d8c13415 	stw	r3,1232(sp)
100045ec:	040019c4 	movi	r16,103
100045f0:	003e7606 	br	10003fcc <__alt_data_end+0xf8003fcc>
100045f4:	01040074 	movhi	r4,4097
100045f8:	21082284 	addi	r4,r4,8330
100045fc:	d9012c15 	stw	r4,1200(sp)
10004600:	003c8e06 	br	1000383c <__alt_data_end+0xf800383c>
10004604:	5005883a 	mov	r2,r10
10004608:	003e6506 	br	10003fa0 <__alt_data_end+0xf8003fa0>
1000460c:	843fff84 	addi	r16,r16,-2
10004610:	1d7fffc4 	addi	r21,r3,-1
10004614:	dd412615 	stw	r21,1176(sp)
10004618:	dc0122c5 	stb	r16,1163(sp)
1000461c:	a8009216 	blt	r21,zero,10004868 <___vfprintf_internal_r+0x20a0>
10004620:	00800ac4 	movi	r2,43
10004624:	d8812305 	stb	r2,1164(sp)
10004628:	00800244 	movi	r2,9
1000462c:	1540660e 	bge	r2,r21,100047c8 <___vfprintf_internal_r+0x2000>
10004630:	dcc122c4 	addi	r19,sp,1163
10004634:	dc012c15 	stw	r16,1200(sp)
10004638:	4023883a 	mov	r17,r8
1000463c:	9821883a 	mov	r16,r19
10004640:	a809883a 	mov	r4,r21
10004644:	01400284 	movi	r5,10
10004648:	000c7dc0 	call	1000c7dc <__modsi3>
1000464c:	10800c04 	addi	r2,r2,48
10004650:	843fffc4 	addi	r16,r16,-1
10004654:	a809883a 	mov	r4,r21
10004658:	01400284 	movi	r5,10
1000465c:	80800005 	stb	r2,0(r16)
10004660:	000c7880 	call	1000c788 <__divsi3>
10004664:	01000244 	movi	r4,9
10004668:	102b883a 	mov	r21,r2
1000466c:	20bff416 	blt	r4,r2,10004640 <__alt_data_end+0xf8004640>
10004670:	8811883a 	mov	r8,r17
10004674:	10800c04 	addi	r2,r2,48
10004678:	8023883a 	mov	r17,r16
1000467c:	897fffc4 	addi	r5,r17,-1
10004680:	88bfffc5 	stb	r2,-1(r17)
10004684:	dc012c17 	ldw	r16,1200(sp)
10004688:	2cc08a2e 	bgeu	r5,r19,100048b4 <___vfprintf_internal_r+0x20ec>
1000468c:	d9812384 	addi	r6,sp,1166
10004690:	344dc83a 	sub	r6,r6,r17
10004694:	d9012344 	addi	r4,sp,1165
10004698:	998d883a 	add	r6,r19,r6
1000469c:	00000106 	br	100046a4 <___vfprintf_internal_r+0x1edc>
100046a0:	28800003 	ldbu	r2,0(r5)
100046a4:	20800005 	stb	r2,0(r4)
100046a8:	21000044 	addi	r4,r4,1
100046ac:	29400044 	addi	r5,r5,1
100046b0:	21bffb1e 	bne	r4,r6,100046a0 <__alt_data_end+0xf80046a0>
100046b4:	d8812304 	addi	r2,sp,1164
100046b8:	1445c83a 	sub	r2,r2,r17
100046bc:	d9412344 	addi	r5,sp,1165
100046c0:	2885883a 	add	r2,r5,r2
100046c4:	14e7c83a 	sub	r19,r2,r19
100046c8:	d8813317 	ldw	r2,1228(sp)
100046cc:	d8c13317 	ldw	r3,1228(sp)
100046d0:	dcc13a15 	stw	r19,1256(sp)
100046d4:	14e3883a 	add	r17,r2,r19
100046d8:	00800044 	movi	r2,1
100046dc:	10c0550e 	bge	r2,r3,10004834 <___vfprintf_internal_r+0x206c>
100046e0:	8c400044 	addi	r17,r17,1
100046e4:	8839883a 	mov	fp,r17
100046e8:	88005016 	blt	r17,zero,1000482c <___vfprintf_internal_r+0x2064>
100046ec:	d8013415 	stw	zero,1232(sp)
100046f0:	003e3f06 	br	10003ff0 <__alt_data_end+0xf8003ff0>
100046f4:	da412b15 	stw	r9,1196(sp)
100046f8:	dcc12783 	ldbu	r19,1182(sp)
100046fc:	4823883a 	mov	r17,r9
10004700:	dc812d15 	stw	r18,1204(sp)
10004704:	d8013215 	stw	zero,1224(sp)
10004708:	d8013415 	stw	zero,1232(sp)
1000470c:	0039ae06 	br	10002dc8 <__alt_data_end+0xf8002dc8>
10004710:	483de91e 	bne	r9,zero,10003eb8 <__alt_data_end+0xf8003eb8>
10004714:	8813883a 	mov	r9,r17
10004718:	003de706 	br	10003eb8 <__alt_data_end+0xf8003eb8>
1000471c:	b809883a 	mov	r4,r23
10004720:	b00b883a 	mov	r5,r22
10004724:	d9811e04 	addi	r6,sp,1144
10004728:	0009c080 	call	10009c08 <__sprint_r>
1000472c:	10393e1e 	bne	r2,zero,10002c28 <__alt_data_end+0xf8002c28>
10004730:	dc012617 	ldw	r16,1176(sp)
10004734:	d8c12017 	ldw	r3,1152(sp)
10004738:	d8811f17 	ldw	r2,1148(sp)
1000473c:	da000404 	addi	r8,sp,16
10004740:	003ea006 	br	100041c4 <__alt_data_end+0xf80041c4>
10004744:	00c00b44 	movi	r3,45
10004748:	2460003c 	xorhi	r17,r4,32768
1000474c:	d8c12b05 	stb	r3,1196(sp)
10004750:	003ddf06 	br	10003ed0 <__alt_data_end+0xf8003ed0>
10004754:	02400184 	movi	r9,6
10004758:	003dd706 	br	10003eb8 <__alt_data_end+0xf8003eb8>
1000475c:	4d400044 	addi	r21,r9,1
10004760:	003de206 	br	10003eec <__alt_data_end+0xf8003eec>
10004764:	d8c13417 	ldw	r3,1232(sp)
10004768:	00c0490e 	bge	zero,r3,10004890 <___vfprintf_internal_r+0x20c8>
1000476c:	04400044 	movi	r17,1
10004770:	d9013317 	ldw	r4,1228(sp)
10004774:	8923883a 	add	r17,r17,r4
10004778:	8839883a 	mov	fp,r17
1000477c:	883e1c0e 	bge	r17,zero,10003ff0 <__alt_data_end+0xf8003ff0>
10004780:	0039883a 	mov	fp,zero
10004784:	003e1a06 	br	10003ff0 <__alt_data_end+0xf8003ff0>
10004788:	00c03b0e 	bge	zero,r3,10004878 <___vfprintf_internal_r+0x20b0>
1000478c:	4800021e 	bne	r9,zero,10004798 <___vfprintf_internal_r+0x1fd0>
10004790:	e080004c 	andi	r2,fp,1
10004794:	10000626 	beq	r2,zero,100047b0 <___vfprintf_internal_r+0x1fe8>
10004798:	d8c13417 	ldw	r3,1232(sp)
1000479c:	4a400044 	addi	r9,r9,1
100047a0:	1a63883a 	add	r17,r3,r9
100047a4:	8839883a 	mov	fp,r17
100047a8:	883e110e 	bge	r17,zero,10003ff0 <__alt_data_end+0xf8003ff0>
100047ac:	003ff406 	br	10004780 <__alt_data_end+0xf8004780>
100047b0:	1839883a 	mov	fp,r3
100047b4:	18004116 	blt	r3,zero,100048bc <___vfprintf_internal_r+0x20f4>
100047b8:	dc413417 	ldw	r17,1232(sp)
100047bc:	003e0c06 	br	10003ff0 <__alt_data_end+0xf8003ff0>
100047c0:	d8812117 	ldw	r2,1156(sp)
100047c4:	003df606 	br	10003fa0 <__alt_data_end+0xf8003fa0>
100047c8:	00800c04 	movi	r2,48
100047cc:	a8c00c04 	addi	r3,r21,48
100047d0:	d8812345 	stb	r2,1165(sp)
100047d4:	d8c12385 	stb	r3,1166(sp)
100047d8:	d88123c4 	addi	r2,sp,1167
100047dc:	dcc122c4 	addi	r19,sp,1163
100047e0:	003fb806 	br	100046c4 <__alt_data_end+0xf80046c4>
100047e4:	d9013717 	ldw	r4,1244(sp)
100047e8:	880b883a 	mov	r5,r17
100047ec:	000d883a 	mov	r6,zero
100047f0:	000f883a 	mov	r7,zero
100047f4:	da013f15 	stw	r8,1276(sp)
100047f8:	da413e15 	stw	r9,1272(sp)
100047fc:	da813d15 	stw	r10,1268(sp)
10004800:	000da8c0 	call	1000da8c <__eqdf2>
10004804:	da013f17 	ldw	r8,1276(sp)
10004808:	da413e17 	ldw	r9,1272(sp)
1000480c:	da813d17 	ldw	r10,1268(sp)
10004810:	103f1726 	beq	r2,zero,10004470 <__alt_data_end+0xf8004470>
10004814:	00800044 	movi	r2,1
10004818:	1547c83a 	sub	r3,r2,r21
1000481c:	d8c12615 	stw	r3,1176(sp)
10004820:	003f1406 	br	10004474 <__alt_data_end+0xf8004474>
10004824:	0005883a 	mov	r2,zero
10004828:	003f4c06 	br	1000455c <__alt_data_end+0xf800455c>
1000482c:	0039883a 	mov	fp,zero
10004830:	003fae06 	br	100046ec <__alt_data_end+0xf80046ec>
10004834:	e084703a 	and	r2,fp,r2
10004838:	103faa26 	beq	r2,zero,100046e4 <__alt_data_end+0xf80046e4>
1000483c:	003fa806 	br	100046e0 <__alt_data_end+0xf80046e0>
10004840:	d9412d17 	ldw	r5,1204(sp)
10004844:	2a400017 	ldw	r9,0(r5)
10004848:	28c00104 	addi	r3,r5,4
1000484c:	d8c12d15 	stw	r3,1204(sp)
10004850:	483ebc0e 	bge	r9,zero,10004344 <__alt_data_end+0xf8004344>
10004854:	027fffc4 	movi	r9,-1
10004858:	e4000047 	ldb	r16,1(fp)
1000485c:	00384206 	br	10002968 <__alt_data_end+0xf8002968>
10004860:	043fffc4 	movi	r16,-1
10004864:	0038ce06 	br	10002ba0 <__alt_data_end+0xf8002ba0>
10004868:	00800b44 	movi	r2,45
1000486c:	056bc83a 	sub	r21,zero,r21
10004870:	d8812305 	stb	r2,1164(sp)
10004874:	003f6c06 	br	10004628 <__alt_data_end+0xf8004628>
10004878:	4800081e 	bne	r9,zero,1000489c <___vfprintf_internal_r+0x20d4>
1000487c:	e080004c 	andi	r2,fp,1
10004880:	1000061e 	bne	r2,zero,1000489c <___vfprintf_internal_r+0x20d4>
10004884:	07000044 	movi	fp,1
10004888:	e023883a 	mov	r17,fp
1000488c:	003dd806 	br	10003ff0 <__alt_data_end+0xf8003ff0>
10004890:	04400084 	movi	r17,2
10004894:	88e3c83a 	sub	r17,r17,r3
10004898:	003fb506 	br	10004770 <__alt_data_end+0xf8004770>
1000489c:	4c400084 	addi	r17,r9,2
100048a0:	8839883a 	mov	fp,r17
100048a4:	883dd20e 	bge	r17,zero,10003ff0 <__alt_data_end+0xf8003ff0>
100048a8:	003fb506 	br	10004780 <__alt_data_end+0xf8004780>
100048ac:	d8c12617 	ldw	r3,1176(sp)
100048b0:	003f5706 	br	10004610 <__alt_data_end+0xf8004610>
100048b4:	d8812344 	addi	r2,sp,1165
100048b8:	003f8206 	br	100046c4 <__alt_data_end+0xf80046c4>
100048bc:	0039883a 	mov	fp,zero
100048c0:	003fbd06 	br	100047b8 <__alt_data_end+0xf80047b8>

100048c4 <__vfprintf_internal>:
100048c4:	2007883a 	mov	r3,r4
100048c8:	01040074 	movhi	r4,4097
100048cc:	210f7d04 	addi	r4,r4,15860
100048d0:	21000017 	ldw	r4,0(r4)
100048d4:	2805883a 	mov	r2,r5
100048d8:	300f883a 	mov	r7,r6
100048dc:	180b883a 	mov	r5,r3
100048e0:	100d883a 	mov	r6,r2
100048e4:	00027c81 	jmpi	100027c8 <___vfprintf_internal_r>

100048e8 <__swsetup_r>:
100048e8:	00840074 	movhi	r2,4097
100048ec:	defffd04 	addi	sp,sp,-12
100048f0:	108f7d04 	addi	r2,r2,15860
100048f4:	dc400115 	stw	r17,4(sp)
100048f8:	2023883a 	mov	r17,r4
100048fc:	11000017 	ldw	r4,0(r2)
10004900:	dc000015 	stw	r16,0(sp)
10004904:	dfc00215 	stw	ra,8(sp)
10004908:	2821883a 	mov	r16,r5
1000490c:	20000226 	beq	r4,zero,10004918 <__swsetup_r+0x30>
10004910:	20c00e17 	ldw	r3,56(r4)
10004914:	18002e26 	beq	r3,zero,100049d0 <__swsetup_r+0xe8>
10004918:	8080030b 	ldhu	r2,12(r16)
1000491c:	10c0020c 	andi	r3,r2,8
10004920:	100d883a 	mov	r6,r2
10004924:	18000f26 	beq	r3,zero,10004964 <__swsetup_r+0x7c>
10004928:	80c00417 	ldw	r3,16(r16)
1000492c:	18001526 	beq	r3,zero,10004984 <__swsetup_r+0x9c>
10004930:	1100004c 	andi	r4,r2,1
10004934:	20001c1e 	bne	r4,zero,100049a8 <__swsetup_r+0xc0>
10004938:	1080008c 	andi	r2,r2,2
1000493c:	1000261e 	bne	r2,zero,100049d8 <__swsetup_r+0xf0>
10004940:	80800517 	ldw	r2,20(r16)
10004944:	80800215 	stw	r2,8(r16)
10004948:	18001c26 	beq	r3,zero,100049bc <__swsetup_r+0xd4>
1000494c:	0005883a 	mov	r2,zero
10004950:	dfc00217 	ldw	ra,8(sp)
10004954:	dc400117 	ldw	r17,4(sp)
10004958:	dc000017 	ldw	r16,0(sp)
1000495c:	dec00304 	addi	sp,sp,12
10004960:	f800283a 	ret
10004964:	3080040c 	andi	r2,r6,16
10004968:	10001726 	beq	r2,zero,100049c8 <__swsetup_r+0xe0>
1000496c:	3080010c 	andi	r2,r6,4
10004970:	10001b1e 	bne	r2,zero,100049e0 <__swsetup_r+0xf8>
10004974:	80c00417 	ldw	r3,16(r16)
10004978:	30800214 	ori	r2,r6,8
1000497c:	8080030d 	sth	r2,12(r16)
10004980:	183feb1e 	bne	r3,zero,10004930 <__alt_data_end+0xf8004930>
10004984:	1140a00c 	andi	r5,r2,640
10004988:	01008004 	movi	r4,512
1000498c:	293fe826 	beq	r5,r4,10004930 <__alt_data_end+0xf8004930>
10004990:	8809883a 	mov	r4,r17
10004994:	800b883a 	mov	r5,r16
10004998:	000747c0 	call	1000747c <__smakebuf_r>
1000499c:	8080030b 	ldhu	r2,12(r16)
100049a0:	80c00417 	ldw	r3,16(r16)
100049a4:	003fe206 	br	10004930 <__alt_data_end+0xf8004930>
100049a8:	80800517 	ldw	r2,20(r16)
100049ac:	80000215 	stw	zero,8(r16)
100049b0:	0085c83a 	sub	r2,zero,r2
100049b4:	80800615 	stw	r2,24(r16)
100049b8:	183fe41e 	bne	r3,zero,1000494c <__alt_data_end+0xf800494c>
100049bc:	8080030b 	ldhu	r2,12(r16)
100049c0:	1080200c 	andi	r2,r2,128
100049c4:	103fe226 	beq	r2,zero,10004950 <__alt_data_end+0xf8004950>
100049c8:	00bfffc4 	movi	r2,-1
100049cc:	003fe006 	br	10004950 <__alt_data_end+0xf8004950>
100049d0:	00069240 	call	10006924 <__sinit>
100049d4:	003fd006 	br	10004918 <__alt_data_end+0xf8004918>
100049d8:	0005883a 	mov	r2,zero
100049dc:	003fd906 	br	10004944 <__alt_data_end+0xf8004944>
100049e0:	81400c17 	ldw	r5,48(r16)
100049e4:	28000626 	beq	r5,zero,10004a00 <__swsetup_r+0x118>
100049e8:	80801004 	addi	r2,r16,64
100049ec:	28800326 	beq	r5,r2,100049fc <__swsetup_r+0x114>
100049f0:	8809883a 	mov	r4,r17
100049f4:	0006a980 	call	10006a98 <_free_r>
100049f8:	8180030b 	ldhu	r6,12(r16)
100049fc:	80000c15 	stw	zero,48(r16)
10004a00:	80c00417 	ldw	r3,16(r16)
10004a04:	00bff6c4 	movi	r2,-37
10004a08:	118c703a 	and	r6,r2,r6
10004a0c:	80000115 	stw	zero,4(r16)
10004a10:	80c00015 	stw	r3,0(r16)
10004a14:	003fd806 	br	10004978 <__alt_data_end+0xf8004978>

10004a18 <quorem>:
10004a18:	defff204 	addi	sp,sp,-56
10004a1c:	ddc00b15 	stw	r23,44(sp)
10004a20:	20800417 	ldw	r2,16(r4)
10004a24:	2dc00417 	ldw	r23,16(r5)
10004a28:	dfc00d15 	stw	ra,52(sp)
10004a2c:	df000c15 	stw	fp,48(sp)
10004a30:	dd800a15 	stw	r22,40(sp)
10004a34:	dd400915 	stw	r21,36(sp)
10004a38:	dd000815 	stw	r20,32(sp)
10004a3c:	dcc00715 	stw	r19,28(sp)
10004a40:	dc800615 	stw	r18,24(sp)
10004a44:	dc400515 	stw	r17,20(sp)
10004a48:	dc000415 	stw	r16,16(sp)
10004a4c:	15c07a16 	blt	r2,r23,10004c38 <quorem+0x220>
10004a50:	bdffffc4 	addi	r23,r23,-1
10004a54:	bde9883a 	add	r20,r23,r23
10004a58:	28c00504 	addi	r3,r5,20
10004a5c:	a529883a 	add	r20,r20,r20
10004a60:	1d39883a 	add	fp,r3,r20
10004a64:	24c00504 	addi	r19,r4,20
10004a68:	d9400215 	stw	r5,8(sp)
10004a6c:	9d29883a 	add	r20,r19,r20
10004a70:	e1400017 	ldw	r5,0(fp)
10004a74:	d9000015 	stw	r4,0(sp)
10004a78:	a1000017 	ldw	r4,0(r20)
10004a7c:	29400044 	addi	r5,r5,1
10004a80:	d8c00115 	stw	r3,4(sp)
10004a84:	dd000315 	stw	r20,12(sp)
10004a88:	000c8380 	call	1000c838 <__udivsi3>
10004a8c:	1025883a 	mov	r18,r2
10004a90:	10003026 	beq	r2,zero,10004b54 <quorem+0x13c>
10004a94:	dc400117 	ldw	r17,4(sp)
10004a98:	9829883a 	mov	r20,r19
10004a9c:	002d883a 	mov	r22,zero
10004aa0:	0021883a 	mov	r16,zero
10004aa4:	8d400017 	ldw	r21,0(r17)
10004aa8:	900b883a 	mov	r5,r18
10004aac:	8c400104 	addi	r17,r17,4
10004ab0:	a93fffcc 	andi	r4,r21,65535
10004ab4:	000c8480 	call	1000c848 <__mulsi3>
10004ab8:	a808d43a 	srli	r4,r21,16
10004abc:	900b883a 	mov	r5,r18
10004ac0:	b0ad883a 	add	r22,r22,r2
10004ac4:	000c8480 	call	1000c848 <__mulsi3>
10004ac8:	a1000017 	ldw	r4,0(r20)
10004acc:	b00cd43a 	srli	r6,r22,16
10004ad0:	b0ffffcc 	andi	r3,r22,65535
10004ad4:	217fffcc 	andi	r5,r4,65535
10004ad8:	2c21883a 	add	r16,r5,r16
10004adc:	80c7c83a 	sub	r3,r16,r3
10004ae0:	2008d43a 	srli	r4,r4,16
10004ae4:	3085883a 	add	r2,r6,r2
10004ae8:	1821d43a 	srai	r16,r3,16
10004aec:	117fffcc 	andi	r5,r2,65535
10004af0:	2149c83a 	sub	r4,r4,r5
10004af4:	2421883a 	add	r16,r4,r16
10004af8:	8008943a 	slli	r4,r16,16
10004afc:	18ffffcc 	andi	r3,r3,65535
10004b00:	102cd43a 	srli	r22,r2,16
10004b04:	20c8b03a 	or	r4,r4,r3
10004b08:	a1000015 	stw	r4,0(r20)
10004b0c:	8021d43a 	srai	r16,r16,16
10004b10:	a5000104 	addi	r20,r20,4
10004b14:	e47fe32e 	bgeu	fp,r17,10004aa4 <__alt_data_end+0xf8004aa4>
10004b18:	d8c00317 	ldw	r3,12(sp)
10004b1c:	18800017 	ldw	r2,0(r3)
10004b20:	10000c1e 	bne	r2,zero,10004b54 <quorem+0x13c>
10004b24:	18bfff04 	addi	r2,r3,-4
10004b28:	9880082e 	bgeu	r19,r2,10004b4c <quorem+0x134>
10004b2c:	18ffff17 	ldw	r3,-4(r3)
10004b30:	18000326 	beq	r3,zero,10004b40 <quorem+0x128>
10004b34:	00000506 	br	10004b4c <quorem+0x134>
10004b38:	10c00017 	ldw	r3,0(r2)
10004b3c:	1800031e 	bne	r3,zero,10004b4c <quorem+0x134>
10004b40:	10bfff04 	addi	r2,r2,-4
10004b44:	bdffffc4 	addi	r23,r23,-1
10004b48:	98bffb36 	bltu	r19,r2,10004b38 <__alt_data_end+0xf8004b38>
10004b4c:	d8c00017 	ldw	r3,0(sp)
10004b50:	1dc00415 	stw	r23,16(r3)
10004b54:	d9000017 	ldw	r4,0(sp)
10004b58:	d9400217 	ldw	r5,8(sp)
10004b5c:	0008bf80 	call	10008bf8 <__mcmp>
10004b60:	10002816 	blt	r2,zero,10004c04 <quorem+0x1ec>
10004b64:	dc400117 	ldw	r17,4(sp)
10004b68:	94800044 	addi	r18,r18,1
10004b6c:	980d883a 	mov	r6,r19
10004b70:	0007883a 	mov	r3,zero
10004b74:	31000017 	ldw	r4,0(r6)
10004b78:	89400017 	ldw	r5,0(r17)
10004b7c:	31800104 	addi	r6,r6,4
10004b80:	20bfffcc 	andi	r2,r4,65535
10004b84:	10c7883a 	add	r3,r2,r3
10004b88:	28bfffcc 	andi	r2,r5,65535
10004b8c:	1885c83a 	sub	r2,r3,r2
10004b90:	280ad43a 	srli	r5,r5,16
10004b94:	2008d43a 	srli	r4,r4,16
10004b98:	1007d43a 	srai	r3,r2,16
10004b9c:	10bfffcc 	andi	r2,r2,65535
10004ba0:	2149c83a 	sub	r4,r4,r5
10004ba4:	20c9883a 	add	r4,r4,r3
10004ba8:	200a943a 	slli	r5,r4,16
10004bac:	8c400104 	addi	r17,r17,4
10004bb0:	2007d43a 	srai	r3,r4,16
10004bb4:	2884b03a 	or	r2,r5,r2
10004bb8:	30bfff15 	stw	r2,-4(r6)
10004bbc:	e47fed2e 	bgeu	fp,r17,10004b74 <__alt_data_end+0xf8004b74>
10004bc0:	bdc5883a 	add	r2,r23,r23
10004bc4:	1085883a 	add	r2,r2,r2
10004bc8:	9887883a 	add	r3,r19,r2
10004bcc:	18800017 	ldw	r2,0(r3)
10004bd0:	10000c1e 	bne	r2,zero,10004c04 <quorem+0x1ec>
10004bd4:	18bfff04 	addi	r2,r3,-4
10004bd8:	9880082e 	bgeu	r19,r2,10004bfc <quorem+0x1e4>
10004bdc:	18ffff17 	ldw	r3,-4(r3)
10004be0:	18000326 	beq	r3,zero,10004bf0 <quorem+0x1d8>
10004be4:	00000506 	br	10004bfc <quorem+0x1e4>
10004be8:	10c00017 	ldw	r3,0(r2)
10004bec:	1800031e 	bne	r3,zero,10004bfc <quorem+0x1e4>
10004bf0:	10bfff04 	addi	r2,r2,-4
10004bf4:	bdffffc4 	addi	r23,r23,-1
10004bf8:	98bffb36 	bltu	r19,r2,10004be8 <__alt_data_end+0xf8004be8>
10004bfc:	d8c00017 	ldw	r3,0(sp)
10004c00:	1dc00415 	stw	r23,16(r3)
10004c04:	9005883a 	mov	r2,r18
10004c08:	dfc00d17 	ldw	ra,52(sp)
10004c0c:	df000c17 	ldw	fp,48(sp)
10004c10:	ddc00b17 	ldw	r23,44(sp)
10004c14:	dd800a17 	ldw	r22,40(sp)
10004c18:	dd400917 	ldw	r21,36(sp)
10004c1c:	dd000817 	ldw	r20,32(sp)
10004c20:	dcc00717 	ldw	r19,28(sp)
10004c24:	dc800617 	ldw	r18,24(sp)
10004c28:	dc400517 	ldw	r17,20(sp)
10004c2c:	dc000417 	ldw	r16,16(sp)
10004c30:	dec00e04 	addi	sp,sp,56
10004c34:	f800283a 	ret
10004c38:	0005883a 	mov	r2,zero
10004c3c:	003ff206 	br	10004c08 <__alt_data_end+0xf8004c08>

10004c40 <_dtoa_r>:
10004c40:	20801017 	ldw	r2,64(r4)
10004c44:	deffde04 	addi	sp,sp,-136
10004c48:	dd401d15 	stw	r21,116(sp)
10004c4c:	dcc01b15 	stw	r19,108(sp)
10004c50:	dc801a15 	stw	r18,104(sp)
10004c54:	dc401915 	stw	r17,100(sp)
10004c58:	dc001815 	stw	r16,96(sp)
10004c5c:	dfc02115 	stw	ra,132(sp)
10004c60:	df002015 	stw	fp,128(sp)
10004c64:	ddc01f15 	stw	r23,124(sp)
10004c68:	dd801e15 	stw	r22,120(sp)
10004c6c:	dd001c15 	stw	r20,112(sp)
10004c70:	d9c00315 	stw	r7,12(sp)
10004c74:	2021883a 	mov	r16,r4
10004c78:	302b883a 	mov	r21,r6
10004c7c:	2825883a 	mov	r18,r5
10004c80:	dc402417 	ldw	r17,144(sp)
10004c84:	3027883a 	mov	r19,r6
10004c88:	10000826 	beq	r2,zero,10004cac <_dtoa_r+0x6c>
10004c8c:	21801117 	ldw	r6,68(r4)
10004c90:	00c00044 	movi	r3,1
10004c94:	100b883a 	mov	r5,r2
10004c98:	1986983a 	sll	r3,r3,r6
10004c9c:	11800115 	stw	r6,4(r2)
10004ca0:	10c00215 	stw	r3,8(r2)
10004ca4:	00083240 	call	10008324 <_Bfree>
10004ca8:	80001015 	stw	zero,64(r16)
10004cac:	a8002d16 	blt	r21,zero,10004d64 <_dtoa_r+0x124>
10004cb0:	88000015 	stw	zero,0(r17)
10004cb4:	a8dffc2c 	andhi	r3,r21,32752
10004cb8:	009ffc34 	movhi	r2,32752
10004cbc:	18801b26 	beq	r3,r2,10004d2c <_dtoa_r+0xec>
10004cc0:	9009883a 	mov	r4,r18
10004cc4:	980b883a 	mov	r5,r19
10004cc8:	000d883a 	mov	r6,zero
10004ccc:	000f883a 	mov	r7,zero
10004cd0:	000da8c0 	call	1000da8c <__eqdf2>
10004cd4:	10002a1e 	bne	r2,zero,10004d80 <_dtoa_r+0x140>
10004cd8:	d8c02317 	ldw	r3,140(sp)
10004cdc:	d9002517 	ldw	r4,148(sp)
10004ce0:	00800044 	movi	r2,1
10004ce4:	18800015 	stw	r2,0(r3)
10004ce8:	2001a226 	beq	r4,zero,10005374 <_dtoa_r+0x734>
10004cec:	00840074 	movhi	r2,4097
10004cf0:	10882244 	addi	r2,r2,8329
10004cf4:	20800015 	stw	r2,0(r4)
10004cf8:	10bfffc4 	addi	r2,r2,-1
10004cfc:	dfc02117 	ldw	ra,132(sp)
10004d00:	df002017 	ldw	fp,128(sp)
10004d04:	ddc01f17 	ldw	r23,124(sp)
10004d08:	dd801e17 	ldw	r22,120(sp)
10004d0c:	dd401d17 	ldw	r21,116(sp)
10004d10:	dd001c17 	ldw	r20,112(sp)
10004d14:	dcc01b17 	ldw	r19,108(sp)
10004d18:	dc801a17 	ldw	r18,104(sp)
10004d1c:	dc401917 	ldw	r17,100(sp)
10004d20:	dc001817 	ldw	r16,96(sp)
10004d24:	dec02204 	addi	sp,sp,136
10004d28:	f800283a 	ret
10004d2c:	d8c02317 	ldw	r3,140(sp)
10004d30:	0089c3c4 	movi	r2,9999
10004d34:	18800015 	stw	r2,0(r3)
10004d38:	90017c26 	beq	r18,zero,1000532c <_dtoa_r+0x6ec>
10004d3c:	00840074 	movhi	r2,4097
10004d40:	10882e04 	addi	r2,r2,8376
10004d44:	d9002517 	ldw	r4,148(sp)
10004d48:	203fec26 	beq	r4,zero,10004cfc <__alt_data_end+0xf8004cfc>
10004d4c:	10c000c7 	ldb	r3,3(r2)
10004d50:	18017d1e 	bne	r3,zero,10005348 <_dtoa_r+0x708>
10004d54:	10c000c4 	addi	r3,r2,3
10004d58:	d9802517 	ldw	r6,148(sp)
10004d5c:	30c00015 	stw	r3,0(r6)
10004d60:	003fe606 	br	10004cfc <__alt_data_end+0xf8004cfc>
10004d64:	04e00034 	movhi	r19,32768
10004d68:	9cffffc4 	addi	r19,r19,-1
10004d6c:	00800044 	movi	r2,1
10004d70:	ace6703a 	and	r19,r21,r19
10004d74:	88800015 	stw	r2,0(r17)
10004d78:	982b883a 	mov	r21,r19
10004d7c:	003fcd06 	br	10004cb4 <__alt_data_end+0xf8004cb4>
10004d80:	d8800204 	addi	r2,sp,8
10004d84:	a822d53a 	srli	r17,r21,20
10004d88:	d8800015 	stw	r2,0(sp)
10004d8c:	8009883a 	mov	r4,r16
10004d90:	900b883a 	mov	r5,r18
10004d94:	980d883a 	mov	r6,r19
10004d98:	d9c00104 	addi	r7,sp,4
10004d9c:	0008f6c0 	call	10008f6c <__d2b>
10004da0:	1039883a 	mov	fp,r2
10004da4:	88016a1e 	bne	r17,zero,10005350 <_dtoa_r+0x710>
10004da8:	dd000217 	ldw	r20,8(sp)
10004dac:	dc400117 	ldw	r17,4(sp)
10004db0:	00befbc4 	movi	r2,-1041
10004db4:	a463883a 	add	r17,r20,r17
10004db8:	8882ea16 	blt	r17,r2,10005964 <_dtoa_r+0xd24>
10004dbc:	00bf0384 	movi	r2,-1010
10004dc0:	1445c83a 	sub	r2,r2,r17
10004dc4:	89010484 	addi	r4,r17,1042
10004dc8:	a8aa983a 	sll	r21,r21,r2
10004dcc:	9108d83a 	srl	r4,r18,r4
10004dd0:	a908b03a 	or	r4,r21,r4
10004dd4:	000ef640 	call	1000ef64 <__floatunsidf>
10004dd8:	017f8434 	movhi	r5,65040
10004ddc:	01800044 	movi	r6,1
10004de0:	1009883a 	mov	r4,r2
10004de4:	194b883a 	add	r5,r3,r5
10004de8:	8c7fffc4 	addi	r17,r17,-1
10004dec:	d9800f15 	stw	r6,60(sp)
10004df0:	000d883a 	mov	r6,zero
10004df4:	01cffe34 	movhi	r7,16376
10004df8:	000e53c0 	call	1000e53c <__subdf3>
10004dfc:	0198dbf4 	movhi	r6,25455
10004e00:	01cff4f4 	movhi	r7,16339
10004e04:	1009883a 	mov	r4,r2
10004e08:	180b883a 	mov	r5,r3
10004e0c:	3190d844 	addi	r6,r6,17249
10004e10:	39e1e9c4 	addi	r7,r7,-30809
10004e14:	000dcd00 	call	1000dcd0 <__muldf3>
10004e18:	01a2d874 	movhi	r6,35681
10004e1c:	01cff1f4 	movhi	r7,16327
10004e20:	180b883a 	mov	r5,r3
10004e24:	31b22cc4 	addi	r6,r6,-14157
10004e28:	39e28a04 	addi	r7,r7,-30168
10004e2c:	1009883a 	mov	r4,r2
10004e30:	000c8700 	call	1000c870 <__adddf3>
10004e34:	8809883a 	mov	r4,r17
10004e38:	102d883a 	mov	r22,r2
10004e3c:	182b883a 	mov	r21,r3
10004e40:	000ee940 	call	1000ee94 <__floatsidf>
10004e44:	019427f4 	movhi	r6,20639
10004e48:	01cff4f4 	movhi	r7,16339
10004e4c:	1009883a 	mov	r4,r2
10004e50:	180b883a 	mov	r5,r3
10004e54:	319e7ec4 	addi	r6,r6,31227
10004e58:	39d104c4 	addi	r7,r7,17427
10004e5c:	000dcd00 	call	1000dcd0 <__muldf3>
10004e60:	b009883a 	mov	r4,r22
10004e64:	a80b883a 	mov	r5,r21
10004e68:	100d883a 	mov	r6,r2
10004e6c:	180f883a 	mov	r7,r3
10004e70:	000c8700 	call	1000c870 <__adddf3>
10004e74:	1009883a 	mov	r4,r2
10004e78:	180b883a 	mov	r5,r3
10004e7c:	102d883a 	mov	r22,r2
10004e80:	182b883a 	mov	r21,r3
10004e84:	000ee0c0 	call	1000ee0c <__fixdfsi>
10004e88:	b009883a 	mov	r4,r22
10004e8c:	a80b883a 	mov	r5,r21
10004e90:	000d883a 	mov	r6,zero
10004e94:	000f883a 	mov	r7,zero
10004e98:	d8800515 	stw	r2,20(sp)
10004e9c:	000dbf00 	call	1000dbf0 <__ledf2>
10004ea0:	10023116 	blt	r2,zero,10005768 <_dtoa_r+0xb28>
10004ea4:	d8c00517 	ldw	r3,20(sp)
10004ea8:	00800584 	movi	r2,22
10004eac:	10c21f36 	bltu	r2,r3,1000572c <_dtoa_r+0xaec>
10004eb0:	180490fa 	slli	r2,r3,3
10004eb4:	00c40074 	movhi	r3,4097
10004eb8:	18c84a04 	addi	r3,r3,8488
10004ebc:	1885883a 	add	r2,r3,r2
10004ec0:	11000017 	ldw	r4,0(r2)
10004ec4:	11400117 	ldw	r5,4(r2)
10004ec8:	900d883a 	mov	r6,r18
10004ecc:	980f883a 	mov	r7,r19
10004ed0:	000db100 	call	1000db10 <__gedf2>
10004ed4:	0082a70e 	bge	zero,r2,10005974 <_dtoa_r+0xd34>
10004ed8:	d9000517 	ldw	r4,20(sp)
10004edc:	d8000c15 	stw	zero,48(sp)
10004ee0:	213fffc4 	addi	r4,r4,-1
10004ee4:	d9000515 	stw	r4,20(sp)
10004ee8:	a463c83a 	sub	r17,r20,r17
10004eec:	8dbfffc4 	addi	r22,r17,-1
10004ef0:	b0021916 	blt	r22,zero,10005758 <_dtoa_r+0xb18>
10004ef4:	d8000815 	stw	zero,32(sp)
10004ef8:	d8800517 	ldw	r2,20(sp)
10004efc:	10020e16 	blt	r2,zero,10005738 <_dtoa_r+0xaf8>
10004f00:	b0ad883a 	add	r22,r22,r2
10004f04:	d8800a15 	stw	r2,40(sp)
10004f08:	d8000915 	stw	zero,36(sp)
10004f0c:	d8c00317 	ldw	r3,12(sp)
10004f10:	00800244 	movi	r2,9
10004f14:	10c11a36 	bltu	r2,r3,10005380 <_dtoa_r+0x740>
10004f18:	00800144 	movi	r2,5
10004f1c:	10c4fc0e 	bge	r2,r3,10006310 <_dtoa_r+0x16d0>
10004f20:	18ffff04 	addi	r3,r3,-4
10004f24:	d8c00315 	stw	r3,12(sp)
10004f28:	0029883a 	mov	r20,zero
10004f2c:	d9800317 	ldw	r6,12(sp)
10004f30:	008000c4 	movi	r2,3
10004f34:	3083bd26 	beq	r6,r2,10005e2c <_dtoa_r+0x11ec>
10004f38:	1183670e 	bge	r2,r6,10005cd8 <_dtoa_r+0x1098>
10004f3c:	d8c00317 	ldw	r3,12(sp)
10004f40:	00800104 	movi	r2,4
10004f44:	1882e726 	beq	r3,r2,10005ae4 <_dtoa_r+0xea4>
10004f48:	00800144 	movi	r2,5
10004f4c:	1884f21e 	bne	r3,r2,10006318 <_dtoa_r+0x16d8>
10004f50:	00800044 	movi	r2,1
10004f54:	d8800b15 	stw	r2,44(sp)
10004f58:	d8c02217 	ldw	r3,136(sp)
10004f5c:	d9000517 	ldw	r4,20(sp)
10004f60:	1907883a 	add	r3,r3,r4
10004f64:	19800044 	addi	r6,r3,1
10004f68:	d8c00d15 	stw	r3,52(sp)
10004f6c:	d9800615 	stw	r6,24(sp)
10004f70:	0183c30e 	bge	zero,r6,10005e80 <_dtoa_r+0x1240>
10004f74:	d9800617 	ldw	r6,24(sp)
10004f78:	3023883a 	mov	r17,r6
10004f7c:	80001115 	stw	zero,68(r16)
10004f80:	008005c4 	movi	r2,23
10004f84:	1184f62e 	bgeu	r2,r6,10006360 <_dtoa_r+0x1720>
10004f88:	00c00044 	movi	r3,1
10004f8c:	00800104 	movi	r2,4
10004f90:	1085883a 	add	r2,r2,r2
10004f94:	11000504 	addi	r4,r2,20
10004f98:	180b883a 	mov	r5,r3
10004f9c:	18c00044 	addi	r3,r3,1
10004fa0:	313ffb2e 	bgeu	r6,r4,10004f90 <__alt_data_end+0xf8004f90>
10004fa4:	81401115 	stw	r5,68(r16)
10004fa8:	8009883a 	mov	r4,r16
10004fac:	000827c0 	call	1000827c <_Balloc>
10004fb0:	d8800715 	stw	r2,28(sp)
10004fb4:	80801015 	stw	r2,64(r16)
10004fb8:	00800384 	movi	r2,14
10004fbc:	1440fd36 	bltu	r2,r17,100053b4 <_dtoa_r+0x774>
10004fc0:	a000fc26 	beq	r20,zero,100053b4 <_dtoa_r+0x774>
10004fc4:	d8800517 	ldw	r2,20(sp)
10004fc8:	0083b90e 	bge	zero,r2,10005eb0 <_dtoa_r+0x1270>
10004fcc:	d8c00517 	ldw	r3,20(sp)
10004fd0:	108003cc 	andi	r2,r2,15
10004fd4:	100490fa 	slli	r2,r2,3
10004fd8:	182fd13a 	srai	r23,r3,4
10004fdc:	00c40074 	movhi	r3,4097
10004fe0:	18c84a04 	addi	r3,r3,8488
10004fe4:	1885883a 	add	r2,r3,r2
10004fe8:	b8c0040c 	andi	r3,r23,16
10004fec:	12c00017 	ldw	r11,0(r2)
10004ff0:	12800117 	ldw	r10,4(r2)
10004ff4:	18039726 	beq	r3,zero,10005e54 <_dtoa_r+0x1214>
10004ff8:	00840074 	movhi	r2,4097
10004ffc:	10884004 	addi	r2,r2,8448
10005000:	11800817 	ldw	r6,32(r2)
10005004:	11c00917 	ldw	r7,36(r2)
10005008:	9009883a 	mov	r4,r18
1000500c:	980b883a 	mov	r5,r19
10005010:	da801615 	stw	r10,88(sp)
10005014:	dac01515 	stw	r11,84(sp)
10005018:	000d10c0 	call	1000d10c <__divdf3>
1000501c:	da801617 	ldw	r10,88(sp)
10005020:	dac01517 	ldw	r11,84(sp)
10005024:	bdc003cc 	andi	r23,r23,15
10005028:	044000c4 	movi	r17,3
1000502c:	d8800e15 	stw	r2,56(sp)
10005030:	182b883a 	mov	r21,r3
10005034:	b8001126 	beq	r23,zero,1000507c <_dtoa_r+0x43c>
10005038:	05040074 	movhi	r20,4097
1000503c:	a5084004 	addi	r20,r20,8448
10005040:	5805883a 	mov	r2,r11
10005044:	5007883a 	mov	r3,r10
10005048:	b980004c 	andi	r6,r23,1
1000504c:	1009883a 	mov	r4,r2
10005050:	b82fd07a 	srai	r23,r23,1
10005054:	180b883a 	mov	r5,r3
10005058:	30000426 	beq	r6,zero,1000506c <_dtoa_r+0x42c>
1000505c:	a1800017 	ldw	r6,0(r20)
10005060:	a1c00117 	ldw	r7,4(r20)
10005064:	8c400044 	addi	r17,r17,1
10005068:	000dcd00 	call	1000dcd0 <__muldf3>
1000506c:	a5000204 	addi	r20,r20,8
10005070:	b83ff51e 	bne	r23,zero,10005048 <__alt_data_end+0xf8005048>
10005074:	1017883a 	mov	r11,r2
10005078:	1815883a 	mov	r10,r3
1000507c:	d9000e17 	ldw	r4,56(sp)
10005080:	a80b883a 	mov	r5,r21
10005084:	580d883a 	mov	r6,r11
10005088:	500f883a 	mov	r7,r10
1000508c:	000d10c0 	call	1000d10c <__divdf3>
10005090:	1029883a 	mov	r20,r2
10005094:	182b883a 	mov	r21,r3
10005098:	d9800c17 	ldw	r6,48(sp)
1000509c:	30000626 	beq	r6,zero,100050b8 <_dtoa_r+0x478>
100050a0:	a009883a 	mov	r4,r20
100050a4:	a80b883a 	mov	r5,r21
100050a8:	000d883a 	mov	r6,zero
100050ac:	01cffc34 	movhi	r7,16368
100050b0:	000dbf00 	call	1000dbf0 <__ledf2>
100050b4:	10043216 	blt	r2,zero,10006180 <_dtoa_r+0x1540>
100050b8:	8809883a 	mov	r4,r17
100050bc:	000ee940 	call	1000ee94 <__floatsidf>
100050c0:	1009883a 	mov	r4,r2
100050c4:	180b883a 	mov	r5,r3
100050c8:	a00d883a 	mov	r6,r20
100050cc:	a80f883a 	mov	r7,r21
100050d0:	000dcd00 	call	1000dcd0 <__muldf3>
100050d4:	000d883a 	mov	r6,zero
100050d8:	1009883a 	mov	r4,r2
100050dc:	180b883a 	mov	r5,r3
100050e0:	01d00734 	movhi	r7,16412
100050e4:	000c8700 	call	1000c870 <__adddf3>
100050e8:	1023883a 	mov	r17,r2
100050ec:	d9800617 	ldw	r6,24(sp)
100050f0:	00bf3034 	movhi	r2,64704
100050f4:	1885883a 	add	r2,r3,r2
100050f8:	d8800e15 	stw	r2,56(sp)
100050fc:	30032e26 	beq	r6,zero,10005db8 <_dtoa_r+0x1178>
10005100:	d8c00517 	ldw	r3,20(sp)
10005104:	da800617 	ldw	r10,24(sp)
10005108:	d8c01215 	stw	r3,72(sp)
1000510c:	d9000b17 	ldw	r4,44(sp)
10005110:	2003b026 	beq	r4,zero,10005fd4 <_dtoa_r+0x1394>
10005114:	50bfffc4 	addi	r2,r10,-1
10005118:	100490fa 	slli	r2,r2,3
1000511c:	00c40074 	movhi	r3,4097
10005120:	18c84a04 	addi	r3,r3,8488
10005124:	1885883a 	add	r2,r3,r2
10005128:	11800017 	ldw	r6,0(r2)
1000512c:	11c00117 	ldw	r7,4(r2)
10005130:	d8800717 	ldw	r2,28(sp)
10005134:	0009883a 	mov	r4,zero
10005138:	014ff834 	movhi	r5,16352
1000513c:	da801615 	stw	r10,88(sp)
10005140:	15c00044 	addi	r23,r2,1
10005144:	000d10c0 	call	1000d10c <__divdf3>
10005148:	d9c00e17 	ldw	r7,56(sp)
1000514c:	880d883a 	mov	r6,r17
10005150:	1009883a 	mov	r4,r2
10005154:	180b883a 	mov	r5,r3
10005158:	000e53c0 	call	1000e53c <__subdf3>
1000515c:	a80b883a 	mov	r5,r21
10005160:	a009883a 	mov	r4,r20
10005164:	d8c01015 	stw	r3,64(sp)
10005168:	d8800e15 	stw	r2,56(sp)
1000516c:	000ee0c0 	call	1000ee0c <__fixdfsi>
10005170:	1009883a 	mov	r4,r2
10005174:	d8801715 	stw	r2,92(sp)
10005178:	000ee940 	call	1000ee94 <__floatsidf>
1000517c:	a009883a 	mov	r4,r20
10005180:	a80b883a 	mov	r5,r21
10005184:	100d883a 	mov	r6,r2
10005188:	180f883a 	mov	r7,r3
1000518c:	000e53c0 	call	1000e53c <__subdf3>
10005190:	da001717 	ldw	r8,92(sp)
10005194:	1829883a 	mov	r20,r3
10005198:	d8c00717 	ldw	r3,28(sp)
1000519c:	d9000e17 	ldw	r4,56(sp)
100051a0:	d9401017 	ldw	r5,64(sp)
100051a4:	42000c04 	addi	r8,r8,48
100051a8:	1023883a 	mov	r17,r2
100051ac:	1a000005 	stb	r8,0(r3)
100051b0:	880d883a 	mov	r6,r17
100051b4:	a00f883a 	mov	r7,r20
100051b8:	402b883a 	mov	r21,r8
100051bc:	000db100 	call	1000db10 <__gedf2>
100051c0:	00844516 	blt	zero,r2,100062d8 <_dtoa_r+0x1698>
100051c4:	0009883a 	mov	r4,zero
100051c8:	014ffc34 	movhi	r5,16368
100051cc:	880d883a 	mov	r6,r17
100051d0:	a00f883a 	mov	r7,r20
100051d4:	000e53c0 	call	1000e53c <__subdf3>
100051d8:	d9000e17 	ldw	r4,56(sp)
100051dc:	d9401017 	ldw	r5,64(sp)
100051e0:	100d883a 	mov	r6,r2
100051e4:	180f883a 	mov	r7,r3
100051e8:	000db100 	call	1000db10 <__gedf2>
100051ec:	da801617 	ldw	r10,88(sp)
100051f0:	00843616 	blt	zero,r2,100062cc <_dtoa_r+0x168c>
100051f4:	00800044 	movi	r2,1
100051f8:	12806e0e 	bge	r2,r10,100053b4 <_dtoa_r+0x774>
100051fc:	d9000717 	ldw	r4,28(sp)
10005200:	dd801315 	stw	r22,76(sp)
10005204:	dc001115 	stw	r16,68(sp)
10005208:	2295883a 	add	r10,r4,r10
1000520c:	dcc01415 	stw	r19,80(sp)
10005210:	502d883a 	mov	r22,r10
10005214:	dcc01017 	ldw	r19,64(sp)
10005218:	b821883a 	mov	r16,r23
1000521c:	dc801015 	stw	r18,64(sp)
10005220:	dc800e17 	ldw	r18,56(sp)
10005224:	00000906 	br	1000524c <_dtoa_r+0x60c>
10005228:	000e53c0 	call	1000e53c <__subdf3>
1000522c:	1009883a 	mov	r4,r2
10005230:	180b883a 	mov	r5,r3
10005234:	900d883a 	mov	r6,r18
10005238:	980f883a 	mov	r7,r19
1000523c:	000dbf00 	call	1000dbf0 <__ledf2>
10005240:	10040e16 	blt	r2,zero,1000627c <_dtoa_r+0x163c>
10005244:	b821883a 	mov	r16,r23
10005248:	bd841026 	beq	r23,r22,1000628c <_dtoa_r+0x164c>
1000524c:	9009883a 	mov	r4,r18
10005250:	980b883a 	mov	r5,r19
10005254:	000d883a 	mov	r6,zero
10005258:	01d00934 	movhi	r7,16420
1000525c:	000dcd00 	call	1000dcd0 <__muldf3>
10005260:	000d883a 	mov	r6,zero
10005264:	01d00934 	movhi	r7,16420
10005268:	8809883a 	mov	r4,r17
1000526c:	a00b883a 	mov	r5,r20
10005270:	1025883a 	mov	r18,r2
10005274:	1827883a 	mov	r19,r3
10005278:	000dcd00 	call	1000dcd0 <__muldf3>
1000527c:	180b883a 	mov	r5,r3
10005280:	1009883a 	mov	r4,r2
10005284:	1823883a 	mov	r17,r3
10005288:	1029883a 	mov	r20,r2
1000528c:	000ee0c0 	call	1000ee0c <__fixdfsi>
10005290:	1009883a 	mov	r4,r2
10005294:	102b883a 	mov	r21,r2
10005298:	000ee940 	call	1000ee94 <__floatsidf>
1000529c:	a009883a 	mov	r4,r20
100052a0:	880b883a 	mov	r5,r17
100052a4:	100d883a 	mov	r6,r2
100052a8:	180f883a 	mov	r7,r3
100052ac:	000e53c0 	call	1000e53c <__subdf3>
100052b0:	ad400c04 	addi	r21,r21,48
100052b4:	1009883a 	mov	r4,r2
100052b8:	180b883a 	mov	r5,r3
100052bc:	900d883a 	mov	r6,r18
100052c0:	980f883a 	mov	r7,r19
100052c4:	85400005 	stb	r21,0(r16)
100052c8:	1023883a 	mov	r17,r2
100052cc:	1829883a 	mov	r20,r3
100052d0:	000dbf00 	call	1000dbf0 <__ledf2>
100052d4:	bdc00044 	addi	r23,r23,1
100052d8:	0009883a 	mov	r4,zero
100052dc:	014ffc34 	movhi	r5,16368
100052e0:	880d883a 	mov	r6,r17
100052e4:	a00f883a 	mov	r7,r20
100052e8:	103fcf0e 	bge	r2,zero,10005228 <__alt_data_end+0xf8005228>
100052ec:	d9801217 	ldw	r6,72(sp)
100052f0:	dc001117 	ldw	r16,68(sp)
100052f4:	d9800515 	stw	r6,20(sp)
100052f8:	8009883a 	mov	r4,r16
100052fc:	e00b883a 	mov	r5,fp
10005300:	00083240 	call	10008324 <_Bfree>
10005304:	d8c00517 	ldw	r3,20(sp)
10005308:	d9002317 	ldw	r4,140(sp)
1000530c:	d9802517 	ldw	r6,148(sp)
10005310:	b8000005 	stb	zero,0(r23)
10005314:	18800044 	addi	r2,r3,1
10005318:	20800015 	stw	r2,0(r4)
1000531c:	30027226 	beq	r6,zero,10005ce8 <_dtoa_r+0x10a8>
10005320:	35c00015 	stw	r23,0(r6)
10005324:	d8800717 	ldw	r2,28(sp)
10005328:	003e7406 	br	10004cfc <__alt_data_end+0xf8004cfc>
1000532c:	00800434 	movhi	r2,16
10005330:	10bfffc4 	addi	r2,r2,-1
10005334:	a8aa703a 	and	r21,r21,r2
10005338:	a83e801e 	bne	r21,zero,10004d3c <__alt_data_end+0xf8004d3c>
1000533c:	00840074 	movhi	r2,4097
10005340:	10882b04 	addi	r2,r2,8364
10005344:	003e7f06 	br	10004d44 <__alt_data_end+0xf8004d44>
10005348:	10c00204 	addi	r3,r2,8
1000534c:	003e8206 	br	10004d58 <__alt_data_end+0xf8004d58>
10005350:	01400434 	movhi	r5,16
10005354:	297fffc4 	addi	r5,r5,-1
10005358:	994a703a 	and	r5,r19,r5
1000535c:	9009883a 	mov	r4,r18
10005360:	8c7f0044 	addi	r17,r17,-1023
10005364:	294ffc34 	orhi	r5,r5,16368
10005368:	dd000217 	ldw	r20,8(sp)
1000536c:	d8000f15 	stw	zero,60(sp)
10005370:	003e9f06 	br	10004df0 <__alt_data_end+0xf8004df0>
10005374:	00840074 	movhi	r2,4097
10005378:	10882204 	addi	r2,r2,8328
1000537c:	003e5f06 	br	10004cfc <__alt_data_end+0xf8004cfc>
10005380:	80001115 	stw	zero,68(r16)
10005384:	8009883a 	mov	r4,r16
10005388:	000b883a 	mov	r5,zero
1000538c:	000827c0 	call	1000827c <_Balloc>
10005390:	01bfffc4 	movi	r6,-1
10005394:	d8800715 	stw	r2,28(sp)
10005398:	80801015 	stw	r2,64(r16)
1000539c:	00800044 	movi	r2,1
100053a0:	d9800615 	stw	r6,24(sp)
100053a4:	d8800b15 	stw	r2,44(sp)
100053a8:	d8002215 	stw	zero,136(sp)
100053ac:	d9800d15 	stw	r6,52(sp)
100053b0:	d8000315 	stw	zero,12(sp)
100053b4:	d8800117 	ldw	r2,4(sp)
100053b8:	10008e16 	blt	r2,zero,100055f4 <_dtoa_r+0x9b4>
100053bc:	d9000517 	ldw	r4,20(sp)
100053c0:	00c00384 	movi	r3,14
100053c4:	19008b16 	blt	r3,r4,100055f4 <_dtoa_r+0x9b4>
100053c8:	200490fa 	slli	r2,r4,3
100053cc:	00c40074 	movhi	r3,4097
100053d0:	d9802217 	ldw	r6,136(sp)
100053d4:	18c84a04 	addi	r3,r3,8488
100053d8:	1885883a 	add	r2,r3,r2
100053dc:	14400017 	ldw	r17,0(r2)
100053e0:	15000117 	ldw	r20,4(r2)
100053e4:	3001c716 	blt	r6,zero,10005b04 <_dtoa_r+0xec4>
100053e8:	880d883a 	mov	r6,r17
100053ec:	a00f883a 	mov	r7,r20
100053f0:	9009883a 	mov	r4,r18
100053f4:	980b883a 	mov	r5,r19
100053f8:	000d10c0 	call	1000d10c <__divdf3>
100053fc:	180b883a 	mov	r5,r3
10005400:	1009883a 	mov	r4,r2
10005404:	000ee0c0 	call	1000ee0c <__fixdfsi>
10005408:	1009883a 	mov	r4,r2
1000540c:	102d883a 	mov	r22,r2
10005410:	000ee940 	call	1000ee94 <__floatsidf>
10005414:	1009883a 	mov	r4,r2
10005418:	180b883a 	mov	r5,r3
1000541c:	880d883a 	mov	r6,r17
10005420:	a00f883a 	mov	r7,r20
10005424:	000dcd00 	call	1000dcd0 <__muldf3>
10005428:	9009883a 	mov	r4,r18
1000542c:	980b883a 	mov	r5,r19
10005430:	100d883a 	mov	r6,r2
10005434:	180f883a 	mov	r7,r3
10005438:	000e53c0 	call	1000e53c <__subdf3>
1000543c:	d9000717 	ldw	r4,28(sp)
10005440:	d9800617 	ldw	r6,24(sp)
10005444:	180b883a 	mov	r5,r3
10005448:	b0c00c04 	addi	r3,r22,48
1000544c:	20c00005 	stb	r3,0(r4)
10005450:	25c00044 	addi	r23,r4,1
10005454:	01000044 	movi	r4,1
10005458:	1011883a 	mov	r8,r2
1000545c:	2807883a 	mov	r3,r5
10005460:	31003d26 	beq	r6,r4,10005558 <_dtoa_r+0x918>
10005464:	000d883a 	mov	r6,zero
10005468:	01d00934 	movhi	r7,16420
1000546c:	1009883a 	mov	r4,r2
10005470:	000dcd00 	call	1000dcd0 <__muldf3>
10005474:	1009883a 	mov	r4,r2
10005478:	180b883a 	mov	r5,r3
1000547c:	000d883a 	mov	r6,zero
10005480:	000f883a 	mov	r7,zero
10005484:	1027883a 	mov	r19,r2
10005488:	182b883a 	mov	r21,r3
1000548c:	000da8c0 	call	1000da8c <__eqdf2>
10005490:	103f9926 	beq	r2,zero,100052f8 <__alt_data_end+0xf80052f8>
10005494:	d8c00617 	ldw	r3,24(sp)
10005498:	d9000717 	ldw	r4,28(sp)
1000549c:	b825883a 	mov	r18,r23
100054a0:	18bfffc4 	addi	r2,r3,-1
100054a4:	20ad883a 	add	r22,r4,r2
100054a8:	dc000315 	stw	r16,12(sp)
100054ac:	00000a06 	br	100054d8 <_dtoa_r+0x898>
100054b0:	000dcd00 	call	1000dcd0 <__muldf3>
100054b4:	1009883a 	mov	r4,r2
100054b8:	180b883a 	mov	r5,r3
100054bc:	000d883a 	mov	r6,zero
100054c0:	000f883a 	mov	r7,zero
100054c4:	1027883a 	mov	r19,r2
100054c8:	182b883a 	mov	r21,r3
100054cc:	b825883a 	mov	r18,r23
100054d0:	000da8c0 	call	1000da8c <__eqdf2>
100054d4:	10022626 	beq	r2,zero,10005d70 <_dtoa_r+0x1130>
100054d8:	880d883a 	mov	r6,r17
100054dc:	a00f883a 	mov	r7,r20
100054e0:	9809883a 	mov	r4,r19
100054e4:	a80b883a 	mov	r5,r21
100054e8:	000d10c0 	call	1000d10c <__divdf3>
100054ec:	180b883a 	mov	r5,r3
100054f0:	1009883a 	mov	r4,r2
100054f4:	000ee0c0 	call	1000ee0c <__fixdfsi>
100054f8:	1009883a 	mov	r4,r2
100054fc:	1021883a 	mov	r16,r2
10005500:	000ee940 	call	1000ee94 <__floatsidf>
10005504:	1009883a 	mov	r4,r2
10005508:	180b883a 	mov	r5,r3
1000550c:	880d883a 	mov	r6,r17
10005510:	a00f883a 	mov	r7,r20
10005514:	000dcd00 	call	1000dcd0 <__muldf3>
10005518:	9809883a 	mov	r4,r19
1000551c:	a80b883a 	mov	r5,r21
10005520:	100d883a 	mov	r6,r2
10005524:	180f883a 	mov	r7,r3
10005528:	000e53c0 	call	1000e53c <__subdf3>
1000552c:	82000c04 	addi	r8,r16,48
10005530:	92000005 	stb	r8,0(r18)
10005534:	1009883a 	mov	r4,r2
10005538:	180b883a 	mov	r5,r3
1000553c:	000d883a 	mov	r6,zero
10005540:	01d00934 	movhi	r7,16420
10005544:	1011883a 	mov	r8,r2
10005548:	bdc00044 	addi	r23,r23,1
1000554c:	95bfd81e 	bne	r18,r22,100054b0 <__alt_data_end+0xf80054b0>
10005550:	802d883a 	mov	r22,r16
10005554:	dc000317 	ldw	r16,12(sp)
10005558:	4009883a 	mov	r4,r8
1000555c:	180b883a 	mov	r5,r3
10005560:	400d883a 	mov	r6,r8
10005564:	180f883a 	mov	r7,r3
10005568:	000c8700 	call	1000c870 <__adddf3>
1000556c:	8809883a 	mov	r4,r17
10005570:	a00b883a 	mov	r5,r20
10005574:	100d883a 	mov	r6,r2
10005578:	180f883a 	mov	r7,r3
1000557c:	1027883a 	mov	r19,r2
10005580:	1825883a 	mov	r18,r3
10005584:	000dbf00 	call	1000dbf0 <__ledf2>
10005588:	10000816 	blt	r2,zero,100055ac <_dtoa_r+0x96c>
1000558c:	8809883a 	mov	r4,r17
10005590:	a00b883a 	mov	r5,r20
10005594:	980d883a 	mov	r6,r19
10005598:	900f883a 	mov	r7,r18
1000559c:	000da8c0 	call	1000da8c <__eqdf2>
100055a0:	103f551e 	bne	r2,zero,100052f8 <__alt_data_end+0xf80052f8>
100055a4:	b580004c 	andi	r22,r22,1
100055a8:	b03f5326 	beq	r22,zero,100052f8 <__alt_data_end+0xf80052f8>
100055ac:	bd7fffc3 	ldbu	r21,-1(r23)
100055b0:	b8bfffc4 	addi	r2,r23,-1
100055b4:	1007883a 	mov	r3,r2
100055b8:	01400e44 	movi	r5,57
100055bc:	d9800717 	ldw	r6,28(sp)
100055c0:	00000506 	br	100055d8 <_dtoa_r+0x998>
100055c4:	18ffffc4 	addi	r3,r3,-1
100055c8:	30825e26 	beq	r6,r2,10005f44 <_dtoa_r+0x1304>
100055cc:	1d400003 	ldbu	r21,0(r3)
100055d0:	102f883a 	mov	r23,r2
100055d4:	10bfffc4 	addi	r2,r2,-1
100055d8:	a9003fcc 	andi	r4,r21,255
100055dc:	2100201c 	xori	r4,r4,128
100055e0:	213fe004 	addi	r4,r4,-128
100055e4:	217ff726 	beq	r4,r5,100055c4 <__alt_data_end+0xf80055c4>
100055e8:	aa000044 	addi	r8,r21,1
100055ec:	12000005 	stb	r8,0(r2)
100055f0:	003f4106 	br	100052f8 <__alt_data_end+0xf80052f8>
100055f4:	d8c00b17 	ldw	r3,44(sp)
100055f8:	18006726 	beq	r3,zero,10005798 <_dtoa_r+0xb58>
100055fc:	d9000317 	ldw	r4,12(sp)
10005600:	00c00044 	movi	r3,1
10005604:	19016a0e 	bge	r3,r4,10005bb0 <_dtoa_r+0xf70>
10005608:	d8800617 	ldw	r2,24(sp)
1000560c:	d8c00917 	ldw	r3,36(sp)
10005610:	157fffc4 	addi	r21,r2,-1
10005614:	1d420716 	blt	r3,r21,10005e34 <_dtoa_r+0x11f4>
10005618:	1d6bc83a 	sub	r21,r3,r21
1000561c:	d8800617 	ldw	r2,24(sp)
10005620:	1002c716 	blt	r2,zero,10006140 <_dtoa_r+0x1500>
10005624:	dd000817 	ldw	r20,32(sp)
10005628:	d8800617 	ldw	r2,24(sp)
1000562c:	d9800817 	ldw	r6,32(sp)
10005630:	8009883a 	mov	r4,r16
10005634:	01400044 	movi	r5,1
10005638:	308d883a 	add	r6,r6,r2
1000563c:	d9800815 	stw	r6,32(sp)
10005640:	b0ad883a 	add	r22,r22,r2
10005644:	00086a40 	call	100086a4 <__i2b>
10005648:	1023883a 	mov	r17,r2
1000564c:	a0000826 	beq	r20,zero,10005670 <_dtoa_r+0xa30>
10005650:	0580070e 	bge	zero,r22,10005670 <_dtoa_r+0xa30>
10005654:	b005883a 	mov	r2,r22
10005658:	a5812016 	blt	r20,r22,10005adc <_dtoa_r+0xe9c>
1000565c:	d8c00817 	ldw	r3,32(sp)
10005660:	a0a9c83a 	sub	r20,r20,r2
10005664:	b0adc83a 	sub	r22,r22,r2
10005668:	1887c83a 	sub	r3,r3,r2
1000566c:	d8c00815 	stw	r3,32(sp)
10005670:	d9000917 	ldw	r4,36(sp)
10005674:	0100140e 	bge	zero,r4,100056c8 <_dtoa_r+0xa88>
10005678:	d9800b17 	ldw	r6,44(sp)
1000567c:	3001e526 	beq	r6,zero,10005e14 <_dtoa_r+0x11d4>
10005680:	05400e0e 	bge	zero,r21,100056bc <_dtoa_r+0xa7c>
10005684:	880b883a 	mov	r5,r17
10005688:	8009883a 	mov	r4,r16
1000568c:	a80d883a 	mov	r6,r21
10005690:	00089700 	call	10008970 <__pow5mult>
10005694:	e00d883a 	mov	r6,fp
10005698:	8009883a 	mov	r4,r16
1000569c:	100b883a 	mov	r5,r2
100056a0:	1023883a 	mov	r17,r2
100056a4:	00086e00 	call	100086e0 <__multiply>
100056a8:	102f883a 	mov	r23,r2
100056ac:	e00b883a 	mov	r5,fp
100056b0:	8009883a 	mov	r4,r16
100056b4:	00083240 	call	10008324 <_Bfree>
100056b8:	b839883a 	mov	fp,r23
100056bc:	d8800917 	ldw	r2,36(sp)
100056c0:	154dc83a 	sub	r6,r2,r21
100056c4:	3001281e 	bne	r6,zero,10005b68 <_dtoa_r+0xf28>
100056c8:	05c00044 	movi	r23,1
100056cc:	8009883a 	mov	r4,r16
100056d0:	b80b883a 	mov	r5,r23
100056d4:	00086a40 	call	100086a4 <__i2b>
100056d8:	d8c00a17 	ldw	r3,40(sp)
100056dc:	102b883a 	mov	r21,r2
100056e0:	00c0310e 	bge	zero,r3,100057a8 <_dtoa_r+0xb68>
100056e4:	8009883a 	mov	r4,r16
100056e8:	100b883a 	mov	r5,r2
100056ec:	180d883a 	mov	r6,r3
100056f0:	00089700 	call	10008970 <__pow5mult>
100056f4:	d9000317 	ldw	r4,12(sp)
100056f8:	102b883a 	mov	r21,r2
100056fc:	b9011f0e 	bge	r23,r4,10005b7c <_dtoa_r+0xf3c>
10005700:	0027883a 	mov	r19,zero
10005704:	a8800417 	ldw	r2,16(r21)
10005708:	10800104 	addi	r2,r2,4
1000570c:	1085883a 	add	r2,r2,r2
10005710:	1085883a 	add	r2,r2,r2
10005714:	a885883a 	add	r2,r21,r2
10005718:	11000017 	ldw	r4,0(r2)
1000571c:	000858c0 	call	1000858c <__hi0bits>
10005720:	00c00804 	movi	r3,32
10005724:	1885c83a 	sub	r2,r3,r2
10005728:	00002506 	br	100057c0 <_dtoa_r+0xb80>
1000572c:	01800044 	movi	r6,1
10005730:	d9800c15 	stw	r6,48(sp)
10005734:	003dec06 	br	10004ee8 <__alt_data_end+0xf8004ee8>
10005738:	d8c00817 	ldw	r3,32(sp)
1000573c:	d9000517 	ldw	r4,20(sp)
10005740:	d8000a15 	stw	zero,40(sp)
10005744:	1907c83a 	sub	r3,r3,r4
10005748:	010dc83a 	sub	r6,zero,r4
1000574c:	d8c00815 	stw	r3,32(sp)
10005750:	d9800915 	stw	r6,36(sp)
10005754:	003ded06 	br	10004f0c <__alt_data_end+0xf8004f0c>
10005758:	05adc83a 	sub	r22,zero,r22
1000575c:	dd800815 	stw	r22,32(sp)
10005760:	002d883a 	mov	r22,zero
10005764:	003de406 	br	10004ef8 <__alt_data_end+0xf8004ef8>
10005768:	d9000517 	ldw	r4,20(sp)
1000576c:	000ee940 	call	1000ee94 <__floatsidf>
10005770:	1009883a 	mov	r4,r2
10005774:	180b883a 	mov	r5,r3
10005778:	b00d883a 	mov	r6,r22
1000577c:	a80f883a 	mov	r7,r21
10005780:	000da8c0 	call	1000da8c <__eqdf2>
10005784:	103dc726 	beq	r2,zero,10004ea4 <__alt_data_end+0xf8004ea4>
10005788:	d8800517 	ldw	r2,20(sp)
1000578c:	10bfffc4 	addi	r2,r2,-1
10005790:	d8800515 	stw	r2,20(sp)
10005794:	003dc306 	br	10004ea4 <__alt_data_end+0xf8004ea4>
10005798:	dd400917 	ldw	r21,36(sp)
1000579c:	dd000817 	ldw	r20,32(sp)
100057a0:	0023883a 	mov	r17,zero
100057a4:	003fa906 	br	1000564c <__alt_data_end+0xf800564c>
100057a8:	d9800317 	ldw	r6,12(sp)
100057ac:	b981670e 	bge	r23,r6,10005d4c <_dtoa_r+0x110c>
100057b0:	0027883a 	mov	r19,zero
100057b4:	d8c00a17 	ldw	r3,40(sp)
100057b8:	183fd21e 	bne	r3,zero,10005704 <__alt_data_end+0xf8005704>
100057bc:	00800044 	movi	r2,1
100057c0:	1585883a 	add	r2,r2,r22
100057c4:	108007cc 	andi	r2,r2,31
100057c8:	10005f26 	beq	r2,zero,10005948 <_dtoa_r+0xd08>
100057cc:	00c00804 	movi	r3,32
100057d0:	1887c83a 	sub	r3,r3,r2
100057d4:	01000104 	movi	r4,4
100057d8:	20c2dd0e 	bge	r4,r3,10006350 <_dtoa_r+0x1710>
100057dc:	d9000817 	ldw	r4,32(sp)
100057e0:	00c00704 	movi	r3,28
100057e4:	1885c83a 	sub	r2,r3,r2
100057e8:	2089883a 	add	r4,r4,r2
100057ec:	d9000815 	stw	r4,32(sp)
100057f0:	a0a9883a 	add	r20,r20,r2
100057f4:	b0ad883a 	add	r22,r22,r2
100057f8:	d8800817 	ldw	r2,32(sp)
100057fc:	0080050e 	bge	zero,r2,10005814 <_dtoa_r+0xbd4>
10005800:	e00b883a 	mov	r5,fp
10005804:	8009883a 	mov	r4,r16
10005808:	100d883a 	mov	r6,r2
1000580c:	0008ab00 	call	10008ab0 <__lshift>
10005810:	1039883a 	mov	fp,r2
10005814:	0580050e 	bge	zero,r22,1000582c <_dtoa_r+0xbec>
10005818:	a80b883a 	mov	r5,r21
1000581c:	8009883a 	mov	r4,r16
10005820:	b00d883a 	mov	r6,r22
10005824:	0008ab00 	call	10008ab0 <__lshift>
10005828:	102b883a 	mov	r21,r2
1000582c:	d8c00c17 	ldw	r3,48(sp)
10005830:	1801161e 	bne	r3,zero,10005c8c <_dtoa_r+0x104c>
10005834:	d8c00617 	ldw	r3,24(sp)
10005838:	00c12d0e 	bge	zero,r3,10005cf0 <_dtoa_r+0x10b0>
1000583c:	d8c00b17 	ldw	r3,44(sp)
10005840:	1800571e 	bne	r3,zero,100059a0 <_dtoa_r+0xd60>
10005844:	dc800717 	ldw	r18,28(sp)
10005848:	dcc00617 	ldw	r19,24(sp)
1000584c:	9029883a 	mov	r20,r18
10005850:	00000206 	br	1000585c <_dtoa_r+0xc1c>
10005854:	000834c0 	call	1000834c <__multadd>
10005858:	1039883a 	mov	fp,r2
1000585c:	e009883a 	mov	r4,fp
10005860:	a80b883a 	mov	r5,r21
10005864:	0004a180 	call	10004a18 <quorem>
10005868:	10800c04 	addi	r2,r2,48
1000586c:	90800005 	stb	r2,0(r18)
10005870:	94800044 	addi	r18,r18,1
10005874:	9507c83a 	sub	r3,r18,r20
10005878:	8009883a 	mov	r4,r16
1000587c:	e00b883a 	mov	r5,fp
10005880:	01800284 	movi	r6,10
10005884:	000f883a 	mov	r7,zero
10005888:	1cfff216 	blt	r3,r19,10005854 <__alt_data_end+0xf8005854>
1000588c:	1011883a 	mov	r8,r2
10005890:	d8800617 	ldw	r2,24(sp)
10005894:	00822e0e 	bge	zero,r2,10006150 <_dtoa_r+0x1510>
10005898:	d9000717 	ldw	r4,28(sp)
1000589c:	0025883a 	mov	r18,zero
100058a0:	20af883a 	add	r23,r4,r2
100058a4:	e00b883a 	mov	r5,fp
100058a8:	01800044 	movi	r6,1
100058ac:	8009883a 	mov	r4,r16
100058b0:	da001715 	stw	r8,92(sp)
100058b4:	0008ab00 	call	10008ab0 <__lshift>
100058b8:	1009883a 	mov	r4,r2
100058bc:	a80b883a 	mov	r5,r21
100058c0:	1039883a 	mov	fp,r2
100058c4:	0008bf80 	call	10008bf8 <__mcmp>
100058c8:	da001717 	ldw	r8,92(sp)
100058cc:	00816e0e 	bge	zero,r2,10005e88 <_dtoa_r+0x1248>
100058d0:	b93fffc3 	ldbu	r4,-1(r23)
100058d4:	b8bfffc4 	addi	r2,r23,-1
100058d8:	1007883a 	mov	r3,r2
100058dc:	01800e44 	movi	r6,57
100058e0:	d9c00717 	ldw	r7,28(sp)
100058e4:	00000506 	br	100058fc <_dtoa_r+0xcbc>
100058e8:	18ffffc4 	addi	r3,r3,-1
100058ec:	38811926 	beq	r7,r2,10005d54 <_dtoa_r+0x1114>
100058f0:	19000003 	ldbu	r4,0(r3)
100058f4:	102f883a 	mov	r23,r2
100058f8:	10bfffc4 	addi	r2,r2,-1
100058fc:	21403fcc 	andi	r5,r4,255
10005900:	2940201c 	xori	r5,r5,128
10005904:	297fe004 	addi	r5,r5,-128
10005908:	29bff726 	beq	r5,r6,100058e8 <__alt_data_end+0xf80058e8>
1000590c:	21000044 	addi	r4,r4,1
10005910:	11000005 	stb	r4,0(r2)
10005914:	8009883a 	mov	r4,r16
10005918:	a80b883a 	mov	r5,r21
1000591c:	00083240 	call	10008324 <_Bfree>
10005920:	883e7526 	beq	r17,zero,100052f8 <__alt_data_end+0xf80052f8>
10005924:	90000426 	beq	r18,zero,10005938 <_dtoa_r+0xcf8>
10005928:	94400326 	beq	r18,r17,10005938 <_dtoa_r+0xcf8>
1000592c:	8009883a 	mov	r4,r16
10005930:	900b883a 	mov	r5,r18
10005934:	00083240 	call	10008324 <_Bfree>
10005938:	8009883a 	mov	r4,r16
1000593c:	880b883a 	mov	r5,r17
10005940:	00083240 	call	10008324 <_Bfree>
10005944:	003e6c06 	br	100052f8 <__alt_data_end+0xf80052f8>
10005948:	00800704 	movi	r2,28
1000594c:	d9800817 	ldw	r6,32(sp)
10005950:	a0a9883a 	add	r20,r20,r2
10005954:	b0ad883a 	add	r22,r22,r2
10005958:	308d883a 	add	r6,r6,r2
1000595c:	d9800815 	stw	r6,32(sp)
10005960:	003fa506 	br	100057f8 <__alt_data_end+0xf80057f8>
10005964:	013efb84 	movi	r4,-1042
10005968:	246bc83a 	sub	r21,r4,r17
1000596c:	9548983a 	sll	r4,r18,r21
10005970:	003d1806 	br	10004dd4 <__alt_data_end+0xf8004dd4>
10005974:	d8000c15 	stw	zero,48(sp)
10005978:	003d5b06 	br	10004ee8 <__alt_data_end+0xf8004ee8>
1000597c:	880b883a 	mov	r5,r17
10005980:	8009883a 	mov	r4,r16
10005984:	01800284 	movi	r6,10
10005988:	000f883a 	mov	r7,zero
1000598c:	000834c0 	call	1000834c <__multadd>
10005990:	1023883a 	mov	r17,r2
10005994:	d8800d17 	ldw	r2,52(sp)
10005998:	0082550e 	bge	zero,r2,100062f0 <_dtoa_r+0x16b0>
1000599c:	d8800615 	stw	r2,24(sp)
100059a0:	0500050e 	bge	zero,r20,100059b8 <_dtoa_r+0xd78>
100059a4:	880b883a 	mov	r5,r17
100059a8:	8009883a 	mov	r4,r16
100059ac:	a00d883a 	mov	r6,r20
100059b0:	0008ab00 	call	10008ab0 <__lshift>
100059b4:	1023883a 	mov	r17,r2
100059b8:	98016a1e 	bne	r19,zero,10005f64 <_dtoa_r+0x1324>
100059bc:	8829883a 	mov	r20,r17
100059c0:	d9000617 	ldw	r4,24(sp)
100059c4:	dcc00717 	ldw	r19,28(sp)
100059c8:	9480004c 	andi	r18,r18,1
100059cc:	20bfffc4 	addi	r2,r4,-1
100059d0:	9885883a 	add	r2,r19,r2
100059d4:	d8800415 	stw	r2,16(sp)
100059d8:	dc800615 	stw	r18,24(sp)
100059dc:	e009883a 	mov	r4,fp
100059e0:	a80b883a 	mov	r5,r21
100059e4:	0004a180 	call	10004a18 <quorem>
100059e8:	e009883a 	mov	r4,fp
100059ec:	880b883a 	mov	r5,r17
100059f0:	102f883a 	mov	r23,r2
100059f4:	0008bf80 	call	10008bf8 <__mcmp>
100059f8:	8009883a 	mov	r4,r16
100059fc:	a80b883a 	mov	r5,r21
10005a00:	a00d883a 	mov	r6,r20
10005a04:	102d883a 	mov	r22,r2
10005a08:	0008c580 	call	10008c58 <__mdiff>
10005a0c:	1007883a 	mov	r3,r2
10005a10:	10800317 	ldw	r2,12(r2)
10005a14:	bc800c04 	addi	r18,r23,48
10005a18:	1000971e 	bne	r2,zero,10005c78 <_dtoa_r+0x1038>
10005a1c:	180b883a 	mov	r5,r3
10005a20:	e009883a 	mov	r4,fp
10005a24:	d8c01515 	stw	r3,84(sp)
10005a28:	0008bf80 	call	10008bf8 <__mcmp>
10005a2c:	d8c01517 	ldw	r3,84(sp)
10005a30:	8009883a 	mov	r4,r16
10005a34:	d8801515 	stw	r2,84(sp)
10005a38:	180b883a 	mov	r5,r3
10005a3c:	00083240 	call	10008324 <_Bfree>
10005a40:	d8801517 	ldw	r2,84(sp)
10005a44:	1000041e 	bne	r2,zero,10005a58 <_dtoa_r+0xe18>
10005a48:	d9800317 	ldw	r6,12(sp)
10005a4c:	3000021e 	bne	r6,zero,10005a58 <_dtoa_r+0xe18>
10005a50:	d8c00617 	ldw	r3,24(sp)
10005a54:	18007626 	beq	r3,zero,10005c30 <_dtoa_r+0xff0>
10005a58:	b0005b16 	blt	r22,zero,10005bc8 <_dtoa_r+0xf88>
10005a5c:	b000041e 	bne	r22,zero,10005a70 <_dtoa_r+0xe30>
10005a60:	d9000317 	ldw	r4,12(sp)
10005a64:	2000021e 	bne	r4,zero,10005a70 <_dtoa_r+0xe30>
10005a68:	d8c00617 	ldw	r3,24(sp)
10005a6c:	18005626 	beq	r3,zero,10005bc8 <_dtoa_r+0xf88>
10005a70:	00814d16 	blt	zero,r2,10005fa8 <_dtoa_r+0x1368>
10005a74:	d8c00417 	ldw	r3,16(sp)
10005a78:	9d800044 	addi	r22,r19,1
10005a7c:	9c800005 	stb	r18,0(r19)
10005a80:	b02f883a 	mov	r23,r22
10005a84:	98c14c26 	beq	r19,r3,10005fb8 <_dtoa_r+0x1378>
10005a88:	e00b883a 	mov	r5,fp
10005a8c:	8009883a 	mov	r4,r16
10005a90:	01800284 	movi	r6,10
10005a94:	000f883a 	mov	r7,zero
10005a98:	000834c0 	call	1000834c <__multadd>
10005a9c:	1039883a 	mov	fp,r2
10005aa0:	8d006d26 	beq	r17,r20,10005c58 <_dtoa_r+0x1018>
10005aa4:	880b883a 	mov	r5,r17
10005aa8:	01800284 	movi	r6,10
10005aac:	000f883a 	mov	r7,zero
10005ab0:	8009883a 	mov	r4,r16
10005ab4:	000834c0 	call	1000834c <__multadd>
10005ab8:	a00b883a 	mov	r5,r20
10005abc:	8009883a 	mov	r4,r16
10005ac0:	01800284 	movi	r6,10
10005ac4:	000f883a 	mov	r7,zero
10005ac8:	1023883a 	mov	r17,r2
10005acc:	000834c0 	call	1000834c <__multadd>
10005ad0:	1029883a 	mov	r20,r2
10005ad4:	b027883a 	mov	r19,r22
10005ad8:	003fc006 	br	100059dc <__alt_data_end+0xf80059dc>
10005adc:	a005883a 	mov	r2,r20
10005ae0:	003ede06 	br	1000565c <__alt_data_end+0xf800565c>
10005ae4:	01000044 	movi	r4,1
10005ae8:	d9000b15 	stw	r4,44(sp)
10005aec:	d9802217 	ldw	r6,136(sp)
10005af0:	0180dc0e 	bge	zero,r6,10005e64 <_dtoa_r+0x1224>
10005af4:	3023883a 	mov	r17,r6
10005af8:	d9800d15 	stw	r6,52(sp)
10005afc:	d9800615 	stw	r6,24(sp)
10005b00:	003d1e06 	br	10004f7c <__alt_data_end+0xf8004f7c>
10005b04:	d8800617 	ldw	r2,24(sp)
10005b08:	00be3716 	blt	zero,r2,100053e8 <__alt_data_end+0xf80053e8>
10005b0c:	1000be1e 	bne	r2,zero,10005e08 <_dtoa_r+0x11c8>
10005b10:	8809883a 	mov	r4,r17
10005b14:	a00b883a 	mov	r5,r20
10005b18:	000d883a 	mov	r6,zero
10005b1c:	01d00534 	movhi	r7,16404
10005b20:	000dcd00 	call	1000dcd0 <__muldf3>
10005b24:	1009883a 	mov	r4,r2
10005b28:	180b883a 	mov	r5,r3
10005b2c:	900d883a 	mov	r6,r18
10005b30:	980f883a 	mov	r7,r19
10005b34:	000db100 	call	1000db10 <__gedf2>
10005b38:	002b883a 	mov	r21,zero
10005b3c:	0023883a 	mov	r17,zero
10005b40:	10007a16 	blt	r2,zero,10005d2c <_dtoa_r+0x10ec>
10005b44:	d9002217 	ldw	r4,136(sp)
10005b48:	ddc00717 	ldw	r23,28(sp)
10005b4c:	0108303a 	nor	r4,zero,r4
10005b50:	d9000515 	stw	r4,20(sp)
10005b54:	8009883a 	mov	r4,r16
10005b58:	a80b883a 	mov	r5,r21
10005b5c:	00083240 	call	10008324 <_Bfree>
10005b60:	883f751e 	bne	r17,zero,10005938 <__alt_data_end+0xf8005938>
10005b64:	003de406 	br	100052f8 <__alt_data_end+0xf80052f8>
10005b68:	e00b883a 	mov	r5,fp
10005b6c:	8009883a 	mov	r4,r16
10005b70:	00089700 	call	10008970 <__pow5mult>
10005b74:	1039883a 	mov	fp,r2
10005b78:	003ed306 	br	100056c8 <__alt_data_end+0xf80056c8>
10005b7c:	903ee01e 	bne	r18,zero,10005700 <__alt_data_end+0xf8005700>
10005b80:	00800434 	movhi	r2,16
10005b84:	10bfffc4 	addi	r2,r2,-1
10005b88:	9884703a 	and	r2,r19,r2
10005b8c:	103f081e 	bne	r2,zero,100057b0 <__alt_data_end+0xf80057b0>
10005b90:	9cdffc2c 	andhi	r19,r19,32752
10005b94:	983f0626 	beq	r19,zero,100057b0 <__alt_data_end+0xf80057b0>
10005b98:	d8800817 	ldw	r2,32(sp)
10005b9c:	b5800044 	addi	r22,r22,1
10005ba0:	04c00044 	movi	r19,1
10005ba4:	10800044 	addi	r2,r2,1
10005ba8:	d8800815 	stw	r2,32(sp)
10005bac:	003f0106 	br	100057b4 <__alt_data_end+0xf80057b4>
10005bb0:	d9800f17 	ldw	r6,60(sp)
10005bb4:	30016826 	beq	r6,zero,10006158 <_dtoa_r+0x1518>
10005bb8:	10810cc4 	addi	r2,r2,1075
10005bbc:	dd400917 	ldw	r21,36(sp)
10005bc0:	dd000817 	ldw	r20,32(sp)
10005bc4:	003e9906 	br	1000562c <__alt_data_end+0xf800562c>
10005bc8:	9011883a 	mov	r8,r18
10005bcc:	4007883a 	mov	r3,r8
10005bd0:	e02d883a 	mov	r22,fp
10005bd4:	0080100e 	bge	zero,r2,10005c18 <_dtoa_r+0xfd8>
10005bd8:	01800044 	movi	r6,1
10005bdc:	8009883a 	mov	r4,r16
10005be0:	e00b883a 	mov	r5,fp
10005be4:	da001515 	stw	r8,84(sp)
10005be8:	da001715 	stw	r8,92(sp)
10005bec:	0008ab00 	call	10008ab0 <__lshift>
10005bf0:	1009883a 	mov	r4,r2
10005bf4:	a80b883a 	mov	r5,r21
10005bf8:	102d883a 	mov	r22,r2
10005bfc:	0008bf80 	call	10008bf8 <__mcmp>
10005c00:	d8c01517 	ldw	r3,84(sp)
10005c04:	da001717 	ldw	r8,92(sp)
10005c08:	0081a50e 	bge	zero,r2,100062a0 <_dtoa_r+0x1660>
10005c0c:	00800e44 	movi	r2,57
10005c10:	40817b26 	beq	r8,r2,10006200 <_dtoa_r+0x15c0>
10005c14:	40c00044 	addi	r3,r8,1
10005c18:	8825883a 	mov	r18,r17
10005c1c:	9dc00044 	addi	r23,r19,1
10005c20:	98c00005 	stb	r3,0(r19)
10005c24:	a023883a 	mov	r17,r20
10005c28:	b039883a 	mov	fp,r22
10005c2c:	003f3906 	br	10005914 <__alt_data_end+0xf8005914>
10005c30:	00800e44 	movi	r2,57
10005c34:	9011883a 	mov	r8,r18
10005c38:	90817226 	beq	r18,r2,10006204 <_dtoa_r+0x15c4>
10005c3c:	0580010e 	bge	zero,r22,10005c44 <_dtoa_r+0x1004>
10005c40:	ba000c44 	addi	r8,r23,49
10005c44:	8825883a 	mov	r18,r17
10005c48:	9dc00044 	addi	r23,r19,1
10005c4c:	9a000005 	stb	r8,0(r19)
10005c50:	a023883a 	mov	r17,r20
10005c54:	003f2f06 	br	10005914 <__alt_data_end+0xf8005914>
10005c58:	880b883a 	mov	r5,r17
10005c5c:	8009883a 	mov	r4,r16
10005c60:	01800284 	movi	r6,10
10005c64:	000f883a 	mov	r7,zero
10005c68:	000834c0 	call	1000834c <__multadd>
10005c6c:	1023883a 	mov	r17,r2
10005c70:	1029883a 	mov	r20,r2
10005c74:	003f9706 	br	10005ad4 <__alt_data_end+0xf8005ad4>
10005c78:	8009883a 	mov	r4,r16
10005c7c:	180b883a 	mov	r5,r3
10005c80:	00083240 	call	10008324 <_Bfree>
10005c84:	00800044 	movi	r2,1
10005c88:	003f7306 	br	10005a58 <__alt_data_end+0xf8005a58>
10005c8c:	e009883a 	mov	r4,fp
10005c90:	a80b883a 	mov	r5,r21
10005c94:	0008bf80 	call	10008bf8 <__mcmp>
10005c98:	103ee60e 	bge	r2,zero,10005834 <__alt_data_end+0xf8005834>
10005c9c:	8009883a 	mov	r4,r16
10005ca0:	e00b883a 	mov	r5,fp
10005ca4:	01800284 	movi	r6,10
10005ca8:	000f883a 	mov	r7,zero
10005cac:	000834c0 	call	1000834c <__multadd>
10005cb0:	d9000517 	ldw	r4,20(sp)
10005cb4:	d9800b17 	ldw	r6,44(sp)
10005cb8:	1039883a 	mov	fp,r2
10005cbc:	213fffc4 	addi	r4,r4,-1
10005cc0:	d9000515 	stw	r4,20(sp)
10005cc4:	303f2d1e 	bne	r6,zero,1000597c <__alt_data_end+0xf800597c>
10005cc8:	d9000d17 	ldw	r4,52(sp)
10005ccc:	0101780e 	bge	zero,r4,100062b0 <_dtoa_r+0x1670>
10005cd0:	d9000615 	stw	r4,24(sp)
10005cd4:	003edb06 	br	10005844 <__alt_data_end+0xf8005844>
10005cd8:	00800084 	movi	r2,2
10005cdc:	30818e1e 	bne	r6,r2,10006318 <_dtoa_r+0x16d8>
10005ce0:	d8000b15 	stw	zero,44(sp)
10005ce4:	003f8106 	br	10005aec <__alt_data_end+0xf8005aec>
10005ce8:	d8800717 	ldw	r2,28(sp)
10005cec:	003c0306 	br	10004cfc <__alt_data_end+0xf8004cfc>
10005cf0:	d9000317 	ldw	r4,12(sp)
10005cf4:	00800084 	movi	r2,2
10005cf8:	113ed00e 	bge	r2,r4,1000583c <__alt_data_end+0xf800583c>
10005cfc:	d8c00617 	ldw	r3,24(sp)
10005d00:	183f901e 	bne	r3,zero,10005b44 <__alt_data_end+0xf8005b44>
10005d04:	a80b883a 	mov	r5,r21
10005d08:	8009883a 	mov	r4,r16
10005d0c:	01800144 	movi	r6,5
10005d10:	000f883a 	mov	r7,zero
10005d14:	000834c0 	call	1000834c <__multadd>
10005d18:	e009883a 	mov	r4,fp
10005d1c:	100b883a 	mov	r5,r2
10005d20:	102b883a 	mov	r21,r2
10005d24:	0008bf80 	call	10008bf8 <__mcmp>
10005d28:	00bf860e 	bge	zero,r2,10005b44 <__alt_data_end+0xf8005b44>
10005d2c:	d9800717 	ldw	r6,28(sp)
10005d30:	00800c44 	movi	r2,49
10005d34:	30800005 	stb	r2,0(r6)
10005d38:	d8800517 	ldw	r2,20(sp)
10005d3c:	35c00044 	addi	r23,r6,1
10005d40:	10800044 	addi	r2,r2,1
10005d44:	d8800515 	stw	r2,20(sp)
10005d48:	003f8206 	br	10005b54 <__alt_data_end+0xf8005b54>
10005d4c:	903e981e 	bne	r18,zero,100057b0 <__alt_data_end+0xf80057b0>
10005d50:	003f8b06 	br	10005b80 <__alt_data_end+0xf8005b80>
10005d54:	d9800517 	ldw	r6,20(sp)
10005d58:	d8c00717 	ldw	r3,28(sp)
10005d5c:	00800c44 	movi	r2,49
10005d60:	31800044 	addi	r6,r6,1
10005d64:	d9800515 	stw	r6,20(sp)
10005d68:	18800005 	stb	r2,0(r3)
10005d6c:	003ee906 	br	10005914 <__alt_data_end+0xf8005914>
10005d70:	dc000317 	ldw	r16,12(sp)
10005d74:	003d6006 	br	100052f8 <__alt_data_end+0xf80052f8>
10005d78:	8809883a 	mov	r4,r17
10005d7c:	000ee940 	call	1000ee94 <__floatsidf>
10005d80:	a009883a 	mov	r4,r20
10005d84:	a80b883a 	mov	r5,r21
10005d88:	100d883a 	mov	r6,r2
10005d8c:	180f883a 	mov	r7,r3
10005d90:	000dcd00 	call	1000dcd0 <__muldf3>
10005d94:	1009883a 	mov	r4,r2
10005d98:	180b883a 	mov	r5,r3
10005d9c:	000d883a 	mov	r6,zero
10005da0:	01d00734 	movhi	r7,16412
10005da4:	000c8700 	call	1000c870 <__adddf3>
10005da8:	1023883a 	mov	r17,r2
10005dac:	00bf3034 	movhi	r2,64704
10005db0:	1885883a 	add	r2,r3,r2
10005db4:	d8800e15 	stw	r2,56(sp)
10005db8:	a009883a 	mov	r4,r20
10005dbc:	a80b883a 	mov	r5,r21
10005dc0:	000d883a 	mov	r6,zero
10005dc4:	01d00534 	movhi	r7,16404
10005dc8:	000e53c0 	call	1000e53c <__subdf3>
10005dcc:	d9c00e17 	ldw	r7,56(sp)
10005dd0:	1009883a 	mov	r4,r2
10005dd4:	180b883a 	mov	r5,r3
10005dd8:	880d883a 	mov	r6,r17
10005ddc:	102b883a 	mov	r21,r2
10005de0:	1829883a 	mov	r20,r3
10005de4:	000db100 	call	1000db10 <__gedf2>
10005de8:	00807716 	blt	zero,r2,10005fc8 <_dtoa_r+0x1388>
10005dec:	d8800e17 	ldw	r2,56(sp)
10005df0:	a809883a 	mov	r4,r21
10005df4:	a00b883a 	mov	r5,r20
10005df8:	11e0003c 	xorhi	r7,r2,32768
10005dfc:	880d883a 	mov	r6,r17
10005e00:	000dbf00 	call	1000dbf0 <__ledf2>
10005e04:	103d6b0e 	bge	r2,zero,100053b4 <__alt_data_end+0xf80053b4>
10005e08:	002b883a 	mov	r21,zero
10005e0c:	0023883a 	mov	r17,zero
10005e10:	003f4c06 	br	10005b44 <__alt_data_end+0xf8005b44>
10005e14:	d9800917 	ldw	r6,36(sp)
10005e18:	e00b883a 	mov	r5,fp
10005e1c:	8009883a 	mov	r4,r16
10005e20:	00089700 	call	10008970 <__pow5mult>
10005e24:	1039883a 	mov	fp,r2
10005e28:	003e2706 	br	100056c8 <__alt_data_end+0xf80056c8>
10005e2c:	d8000b15 	stw	zero,44(sp)
10005e30:	003c4906 	br	10004f58 <__alt_data_end+0xf8004f58>
10005e34:	d9000917 	ldw	r4,36(sp)
10005e38:	d9800a17 	ldw	r6,40(sp)
10005e3c:	dd400915 	stw	r21,36(sp)
10005e40:	a905c83a 	sub	r2,r21,r4
10005e44:	308d883a 	add	r6,r6,r2
10005e48:	d9800a15 	stw	r6,40(sp)
10005e4c:	002b883a 	mov	r21,zero
10005e50:	003df206 	br	1000561c <__alt_data_end+0xf800561c>
10005e54:	dc800e15 	stw	r18,56(sp)
10005e58:	982b883a 	mov	r21,r19
10005e5c:	04400084 	movi	r17,2
10005e60:	003c7406 	br	10005034 <__alt_data_end+0xf8005034>
10005e64:	04400044 	movi	r17,1
10005e68:	dc400d15 	stw	r17,52(sp)
10005e6c:	dc400615 	stw	r17,24(sp)
10005e70:	dc402215 	stw	r17,136(sp)
10005e74:	80001115 	stw	zero,68(r16)
10005e78:	000b883a 	mov	r5,zero
10005e7c:	003c4a06 	br	10004fa8 <__alt_data_end+0xf8004fa8>
10005e80:	3023883a 	mov	r17,r6
10005e84:	003ffb06 	br	10005e74 <__alt_data_end+0xf8005e74>
10005e88:	1000021e 	bne	r2,zero,10005e94 <_dtoa_r+0x1254>
10005e8c:	4200004c 	andi	r8,r8,1
10005e90:	403e8f1e 	bne	r8,zero,100058d0 <__alt_data_end+0xf80058d0>
10005e94:	01000c04 	movi	r4,48
10005e98:	00000106 	br	10005ea0 <_dtoa_r+0x1260>
10005e9c:	102f883a 	mov	r23,r2
10005ea0:	b8bfffc4 	addi	r2,r23,-1
10005ea4:	10c00007 	ldb	r3,0(r2)
10005ea8:	193ffc26 	beq	r3,r4,10005e9c <__alt_data_end+0xf8005e9c>
10005eac:	003e9906 	br	10005914 <__alt_data_end+0xf8005914>
10005eb0:	d9000517 	ldw	r4,20(sp)
10005eb4:	012fc83a 	sub	r23,zero,r4
10005eb8:	b800ad26 	beq	r23,zero,10006170 <_dtoa_r+0x1530>
10005ebc:	b88003cc 	andi	r2,r23,15
10005ec0:	100490fa 	slli	r2,r2,3
10005ec4:	00c40074 	movhi	r3,4097
10005ec8:	18c84a04 	addi	r3,r3,8488
10005ecc:	1885883a 	add	r2,r3,r2
10005ed0:	11800017 	ldw	r6,0(r2)
10005ed4:	11c00117 	ldw	r7,4(r2)
10005ed8:	b82fd13a 	srai	r23,r23,4
10005edc:	9009883a 	mov	r4,r18
10005ee0:	980b883a 	mov	r5,r19
10005ee4:	000dcd00 	call	1000dcd0 <__muldf3>
10005ee8:	1029883a 	mov	r20,r2
10005eec:	182b883a 	mov	r21,r3
10005ef0:	b800f426 	beq	r23,zero,100062c4 <_dtoa_r+0x1684>
10005ef4:	02040074 	movhi	r8,4097
10005ef8:	42084004 	addi	r8,r8,8448
10005efc:	8029883a 	mov	r20,r16
10005f00:	04400084 	movi	r17,2
10005f04:	4021883a 	mov	r16,r8
10005f08:	b980004c 	andi	r6,r23,1
10005f0c:	1009883a 	mov	r4,r2
10005f10:	b82fd07a 	srai	r23,r23,1
10005f14:	180b883a 	mov	r5,r3
10005f18:	30000426 	beq	r6,zero,10005f2c <_dtoa_r+0x12ec>
10005f1c:	81800017 	ldw	r6,0(r16)
10005f20:	81c00117 	ldw	r7,4(r16)
10005f24:	8c400044 	addi	r17,r17,1
10005f28:	000dcd00 	call	1000dcd0 <__muldf3>
10005f2c:	84000204 	addi	r16,r16,8
10005f30:	b83ff51e 	bne	r23,zero,10005f08 <__alt_data_end+0xf8005f08>
10005f34:	a021883a 	mov	r16,r20
10005f38:	182b883a 	mov	r21,r3
10005f3c:	1029883a 	mov	r20,r2
10005f40:	003c5506 	br	10005098 <__alt_data_end+0xf8005098>
10005f44:	d9800517 	ldw	r6,20(sp)
10005f48:	d9000717 	ldw	r4,28(sp)
10005f4c:	00c00c04 	movi	r3,48
10005f50:	31800044 	addi	r6,r6,1
10005f54:	d9800515 	stw	r6,20(sp)
10005f58:	20c00005 	stb	r3,0(r4)
10005f5c:	02000c44 	movi	r8,49
10005f60:	003da206 	br	100055ec <__alt_data_end+0xf80055ec>
10005f64:	89400117 	ldw	r5,4(r17)
10005f68:	8009883a 	mov	r4,r16
10005f6c:	000827c0 	call	1000827c <_Balloc>
10005f70:	89800417 	ldw	r6,16(r17)
10005f74:	11000304 	addi	r4,r2,12
10005f78:	89400304 	addi	r5,r17,12
10005f7c:	31800084 	addi	r6,r6,2
10005f80:	318d883a 	add	r6,r6,r6
10005f84:	318d883a 	add	r6,r6,r6
10005f88:	1027883a 	mov	r19,r2
10005f8c:	0007ec40 	call	10007ec4 <memcpy>
10005f90:	8009883a 	mov	r4,r16
10005f94:	980b883a 	mov	r5,r19
10005f98:	01800044 	movi	r6,1
10005f9c:	0008ab00 	call	10008ab0 <__lshift>
10005fa0:	1029883a 	mov	r20,r2
10005fa4:	003e8606 	br	100059c0 <__alt_data_end+0xf80059c0>
10005fa8:	00800e44 	movi	r2,57
10005fac:	90809526 	beq	r18,r2,10006204 <_dtoa_r+0x15c4>
10005fb0:	92000044 	addi	r8,r18,1
10005fb4:	003f2306 	br	10005c44 <__alt_data_end+0xf8005c44>
10005fb8:	9011883a 	mov	r8,r18
10005fbc:	8825883a 	mov	r18,r17
10005fc0:	a023883a 	mov	r17,r20
10005fc4:	003e3706 	br	100058a4 <__alt_data_end+0xf80058a4>
10005fc8:	002b883a 	mov	r21,zero
10005fcc:	0023883a 	mov	r17,zero
10005fd0:	003f5606 	br	10005d2c <__alt_data_end+0xf8005d2c>
10005fd4:	51bfffc4 	addi	r6,r10,-1
10005fd8:	300490fa 	slli	r2,r6,3
10005fdc:	00c40074 	movhi	r3,4097
10005fe0:	18c84a04 	addi	r3,r3,8488
10005fe4:	1885883a 	add	r2,r3,r2
10005fe8:	d9c00e17 	ldw	r7,56(sp)
10005fec:	11000017 	ldw	r4,0(r2)
10005ff0:	11400117 	ldw	r5,4(r2)
10005ff4:	d8800717 	ldw	r2,28(sp)
10005ff8:	d9801015 	stw	r6,64(sp)
10005ffc:	880d883a 	mov	r6,r17
10006000:	da801615 	stw	r10,88(sp)
10006004:	15c00044 	addi	r23,r2,1
10006008:	000dcd00 	call	1000dcd0 <__muldf3>
1000600c:	a80b883a 	mov	r5,r21
10006010:	a009883a 	mov	r4,r20
10006014:	d8c01115 	stw	r3,68(sp)
10006018:	d8800e15 	stw	r2,56(sp)
1000601c:	000ee0c0 	call	1000ee0c <__fixdfsi>
10006020:	1009883a 	mov	r4,r2
10006024:	1023883a 	mov	r17,r2
10006028:	000ee940 	call	1000ee94 <__floatsidf>
1000602c:	a009883a 	mov	r4,r20
10006030:	a80b883a 	mov	r5,r21
10006034:	100d883a 	mov	r6,r2
10006038:	180f883a 	mov	r7,r3
1000603c:	000e53c0 	call	1000e53c <__subdf3>
10006040:	1813883a 	mov	r9,r3
10006044:	d8c00717 	ldw	r3,28(sp)
10006048:	8c400c04 	addi	r17,r17,48
1000604c:	1011883a 	mov	r8,r2
10006050:	1c400005 	stb	r17,0(r3)
10006054:	da801617 	ldw	r10,88(sp)
10006058:	00800044 	movi	r2,1
1000605c:	50802326 	beq	r10,r2,100060ec <_dtoa_r+0x14ac>
10006060:	d8800717 	ldw	r2,28(sp)
10006064:	b82b883a 	mov	r21,r23
10006068:	dc001315 	stw	r16,76(sp)
1000606c:	12a9883a 	add	r20,r2,r10
10006070:	4807883a 	mov	r3,r9
10006074:	4005883a 	mov	r2,r8
10006078:	dc801415 	stw	r18,80(sp)
1000607c:	000d883a 	mov	r6,zero
10006080:	01d00934 	movhi	r7,16420
10006084:	1009883a 	mov	r4,r2
10006088:	180b883a 	mov	r5,r3
1000608c:	000dcd00 	call	1000dcd0 <__muldf3>
10006090:	180b883a 	mov	r5,r3
10006094:	1009883a 	mov	r4,r2
10006098:	1821883a 	mov	r16,r3
1000609c:	1025883a 	mov	r18,r2
100060a0:	000ee0c0 	call	1000ee0c <__fixdfsi>
100060a4:	1009883a 	mov	r4,r2
100060a8:	1023883a 	mov	r17,r2
100060ac:	000ee940 	call	1000ee94 <__floatsidf>
100060b0:	9009883a 	mov	r4,r18
100060b4:	800b883a 	mov	r5,r16
100060b8:	100d883a 	mov	r6,r2
100060bc:	180f883a 	mov	r7,r3
100060c0:	8c400c04 	addi	r17,r17,48
100060c4:	000e53c0 	call	1000e53c <__subdf3>
100060c8:	ad400044 	addi	r21,r21,1
100060cc:	ac7fffc5 	stb	r17,-1(r21)
100060d0:	ad3fea1e 	bne	r21,r20,1000607c <__alt_data_end+0xf800607c>
100060d4:	1813883a 	mov	r9,r3
100060d8:	d8c01017 	ldw	r3,64(sp)
100060dc:	dc001317 	ldw	r16,76(sp)
100060e0:	dc801417 	ldw	r18,80(sp)
100060e4:	1011883a 	mov	r8,r2
100060e8:	b8ef883a 	add	r23,r23,r3
100060ec:	d9000e17 	ldw	r4,56(sp)
100060f0:	d9401117 	ldw	r5,68(sp)
100060f4:	000d883a 	mov	r6,zero
100060f8:	01cff834 	movhi	r7,16352
100060fc:	da001715 	stw	r8,92(sp)
10006100:	da401515 	stw	r9,84(sp)
10006104:	000c8700 	call	1000c870 <__adddf3>
10006108:	da001717 	ldw	r8,92(sp)
1000610c:	da401517 	ldw	r9,84(sp)
10006110:	1009883a 	mov	r4,r2
10006114:	400d883a 	mov	r6,r8
10006118:	480f883a 	mov	r7,r9
1000611c:	180b883a 	mov	r5,r3
10006120:	000dbf00 	call	1000dbf0 <__ledf2>
10006124:	da001717 	ldw	r8,92(sp)
10006128:	da401517 	ldw	r9,84(sp)
1000612c:	10003b0e 	bge	r2,zero,1000621c <_dtoa_r+0x15dc>
10006130:	d9001217 	ldw	r4,72(sp)
10006134:	bd7fffc3 	ldbu	r21,-1(r23)
10006138:	d9000515 	stw	r4,20(sp)
1000613c:	003d1c06 	br	100055b0 <__alt_data_end+0xf80055b0>
10006140:	d8c00817 	ldw	r3,32(sp)
10006144:	18a9c83a 	sub	r20,r3,r2
10006148:	0005883a 	mov	r2,zero
1000614c:	003d3706 	br	1000562c <__alt_data_end+0xf800562c>
10006150:	00800044 	movi	r2,1
10006154:	003dd006 	br	10005898 <__alt_data_end+0xf8005898>
10006158:	d8c00217 	ldw	r3,8(sp)
1000615c:	00800d84 	movi	r2,54
10006160:	dd400917 	ldw	r21,36(sp)
10006164:	10c5c83a 	sub	r2,r2,r3
10006168:	dd000817 	ldw	r20,32(sp)
1000616c:	003d2f06 	br	1000562c <__alt_data_end+0xf800562c>
10006170:	9029883a 	mov	r20,r18
10006174:	982b883a 	mov	r21,r19
10006178:	04400084 	movi	r17,2
1000617c:	003bc606 	br	10005098 <__alt_data_end+0xf8005098>
10006180:	d8800617 	ldw	r2,24(sp)
10006184:	103efc26 	beq	r2,zero,10005d78 <__alt_data_end+0xf8005d78>
10006188:	d8c00d17 	ldw	r3,52(sp)
1000618c:	00fc890e 	bge	zero,r3,100053b4 <__alt_data_end+0xf80053b4>
10006190:	a80b883a 	mov	r5,r21
10006194:	a009883a 	mov	r4,r20
10006198:	000d883a 	mov	r6,zero
1000619c:	01d00934 	movhi	r7,16420
100061a0:	000dcd00 	call	1000dcd0 <__muldf3>
100061a4:	89000044 	addi	r4,r17,1
100061a8:	1029883a 	mov	r20,r2
100061ac:	182b883a 	mov	r21,r3
100061b0:	000ee940 	call	1000ee94 <__floatsidf>
100061b4:	a009883a 	mov	r4,r20
100061b8:	a80b883a 	mov	r5,r21
100061bc:	100d883a 	mov	r6,r2
100061c0:	180f883a 	mov	r7,r3
100061c4:	000dcd00 	call	1000dcd0 <__muldf3>
100061c8:	1009883a 	mov	r4,r2
100061cc:	180b883a 	mov	r5,r3
100061d0:	000d883a 	mov	r6,zero
100061d4:	01d00734 	movhi	r7,16412
100061d8:	000c8700 	call	1000c870 <__adddf3>
100061dc:	d9000517 	ldw	r4,20(sp)
100061e0:	1023883a 	mov	r17,r2
100061e4:	00bf3034 	movhi	r2,64704
100061e8:	213fffc4 	addi	r4,r4,-1
100061ec:	1885883a 	add	r2,r3,r2
100061f0:	d9001215 	stw	r4,72(sp)
100061f4:	d8800e15 	stw	r2,56(sp)
100061f8:	da800d17 	ldw	r10,52(sp)
100061fc:	003bc306 	br	1000510c <__alt_data_end+0xf800510c>
10006200:	b039883a 	mov	fp,r22
10006204:	01000e44 	movi	r4,57
10006208:	8825883a 	mov	r18,r17
1000620c:	9dc00044 	addi	r23,r19,1
10006210:	99000005 	stb	r4,0(r19)
10006214:	a023883a 	mov	r17,r20
10006218:	003dae06 	br	100058d4 <__alt_data_end+0xf80058d4>
1000621c:	d9800e17 	ldw	r6,56(sp)
10006220:	d9c01117 	ldw	r7,68(sp)
10006224:	0009883a 	mov	r4,zero
10006228:	014ff834 	movhi	r5,16352
1000622c:	da001715 	stw	r8,92(sp)
10006230:	da401515 	stw	r9,84(sp)
10006234:	000e53c0 	call	1000e53c <__subdf3>
10006238:	da001717 	ldw	r8,92(sp)
1000623c:	da401517 	ldw	r9,84(sp)
10006240:	1009883a 	mov	r4,r2
10006244:	180b883a 	mov	r5,r3
10006248:	400d883a 	mov	r6,r8
1000624c:	480f883a 	mov	r7,r9
10006250:	000db100 	call	1000db10 <__gedf2>
10006254:	00bc570e 	bge	zero,r2,100053b4 <__alt_data_end+0xf80053b4>
10006258:	01000c04 	movi	r4,48
1000625c:	00000106 	br	10006264 <_dtoa_r+0x1624>
10006260:	102f883a 	mov	r23,r2
10006264:	b8bfffc4 	addi	r2,r23,-1
10006268:	10c00007 	ldb	r3,0(r2)
1000626c:	193ffc26 	beq	r3,r4,10006260 <__alt_data_end+0xf8006260>
10006270:	d9801217 	ldw	r6,72(sp)
10006274:	d9800515 	stw	r6,20(sp)
10006278:	003c1f06 	br	100052f8 <__alt_data_end+0xf80052f8>
1000627c:	d8801217 	ldw	r2,72(sp)
10006280:	dc001117 	ldw	r16,68(sp)
10006284:	d8800515 	stw	r2,20(sp)
10006288:	003cc906 	br	100055b0 <__alt_data_end+0xf80055b0>
1000628c:	dd801317 	ldw	r22,76(sp)
10006290:	dc001117 	ldw	r16,68(sp)
10006294:	dcc01417 	ldw	r19,80(sp)
10006298:	dc801017 	ldw	r18,64(sp)
1000629c:	003c4506 	br	100053b4 <__alt_data_end+0xf80053b4>
100062a0:	103e5d1e 	bne	r2,zero,10005c18 <__alt_data_end+0xf8005c18>
100062a4:	4080004c 	andi	r2,r8,1
100062a8:	103e5b26 	beq	r2,zero,10005c18 <__alt_data_end+0xf8005c18>
100062ac:	003e5706 	br	10005c0c <__alt_data_end+0xf8005c0c>
100062b0:	d8c00317 	ldw	r3,12(sp)
100062b4:	00800084 	movi	r2,2
100062b8:	10c00a16 	blt	r2,r3,100062e4 <_dtoa_r+0x16a4>
100062bc:	d9000d17 	ldw	r4,52(sp)
100062c0:	003e8306 	br	10005cd0 <__alt_data_end+0xf8005cd0>
100062c4:	04400084 	movi	r17,2
100062c8:	003b7306 	br	10005098 <__alt_data_end+0xf8005098>
100062cc:	d9801217 	ldw	r6,72(sp)
100062d0:	d9800515 	stw	r6,20(sp)
100062d4:	003cb606 	br	100055b0 <__alt_data_end+0xf80055b0>
100062d8:	d9001217 	ldw	r4,72(sp)
100062dc:	d9000515 	stw	r4,20(sp)
100062e0:	003c0506 	br	100052f8 <__alt_data_end+0xf80052f8>
100062e4:	d9800d17 	ldw	r6,52(sp)
100062e8:	d9800615 	stw	r6,24(sp)
100062ec:	003e8306 	br	10005cfc <__alt_data_end+0xf8005cfc>
100062f0:	d9800317 	ldw	r6,12(sp)
100062f4:	00800084 	movi	r2,2
100062f8:	11800216 	blt	r2,r6,10006304 <_dtoa_r+0x16c4>
100062fc:	d8800d17 	ldw	r2,52(sp)
10006300:	003da606 	br	1000599c <__alt_data_end+0xf800599c>
10006304:	d8800d17 	ldw	r2,52(sp)
10006308:	d8800615 	stw	r2,24(sp)
1000630c:	003e7b06 	br	10005cfc <__alt_data_end+0xf8005cfc>
10006310:	05000044 	movi	r20,1
10006314:	003b0506 	br	10004f2c <__alt_data_end+0xf8004f2c>
10006318:	8009883a 	mov	r4,r16
1000631c:	80001115 	stw	zero,68(r16)
10006320:	000b883a 	mov	r5,zero
10006324:	000827c0 	call	1000827c <_Balloc>
10006328:	d8800715 	stw	r2,28(sp)
1000632c:	d8c00717 	ldw	r3,28(sp)
10006330:	00bfffc4 	movi	r2,-1
10006334:	01000044 	movi	r4,1
10006338:	d8800615 	stw	r2,24(sp)
1000633c:	80c01015 	stw	r3,64(r16)
10006340:	d9000b15 	stw	r4,44(sp)
10006344:	d8002215 	stw	zero,136(sp)
10006348:	d8800d15 	stw	r2,52(sp)
1000634c:	003c1906 	br	100053b4 <__alt_data_end+0xf80053b4>
10006350:	193d2926 	beq	r3,r4,100057f8 <__alt_data_end+0xf80057f8>
10006354:	00c00f04 	movi	r3,60
10006358:	1885c83a 	sub	r2,r3,r2
1000635c:	003d7b06 	br	1000594c <__alt_data_end+0xf800594c>
10006360:	000b883a 	mov	r5,zero
10006364:	003b1006 	br	10004fa8 <__alt_data_end+0xf8004fa8>

10006368 <_fflush_r>:
10006368:	defffb04 	addi	sp,sp,-20
1000636c:	dcc00315 	stw	r19,12(sp)
10006370:	dc000015 	stw	r16,0(sp)
10006374:	dfc00415 	stw	ra,16(sp)
10006378:	dc800215 	stw	r18,8(sp)
1000637c:	dc400115 	stw	r17,4(sp)
10006380:	2027883a 	mov	r19,r4
10006384:	2821883a 	mov	r16,r5
10006388:	20000226 	beq	r4,zero,10006394 <_fflush_r+0x2c>
1000638c:	20800e17 	ldw	r2,56(r4)
10006390:	10005326 	beq	r2,zero,100064e0 <_fflush_r+0x178>
10006394:	8080030b 	ldhu	r2,12(r16)
10006398:	10ffffcc 	andi	r3,r2,65535
1000639c:	18e0001c 	xori	r3,r3,32768
100063a0:	18e00004 	addi	r3,r3,-32768
100063a4:	18002c26 	beq	r3,zero,10006458 <_fflush_r+0xf0>
100063a8:	10c0020c 	andi	r3,r2,8
100063ac:	1800321e 	bne	r3,zero,10006478 <_fflush_r+0x110>
100063b0:	80c00117 	ldw	r3,4(r16)
100063b4:	10820014 	ori	r2,r2,2048
100063b8:	8080030d 	sth	r2,12(r16)
100063bc:	00c0570e 	bge	zero,r3,1000651c <_fflush_r+0x1b4>
100063c0:	82000a17 	ldw	r8,40(r16)
100063c4:	40002426 	beq	r8,zero,10006458 <_fflush_r+0xf0>
100063c8:	9c400017 	ldw	r17,0(r19)
100063cc:	10c4000c 	andi	r3,r2,4096
100063d0:	98000015 	stw	zero,0(r19)
100063d4:	18004626 	beq	r3,zero,100064f0 <_fflush_r+0x188>
100063d8:	81801417 	ldw	r6,80(r16)
100063dc:	10c0010c 	andi	r3,r2,4
100063e0:	18000626 	beq	r3,zero,100063fc <_fflush_r+0x94>
100063e4:	80c00117 	ldw	r3,4(r16)
100063e8:	80800c17 	ldw	r2,48(r16)
100063ec:	30cdc83a 	sub	r6,r6,r3
100063f0:	10000226 	beq	r2,zero,100063fc <_fflush_r+0x94>
100063f4:	80800f17 	ldw	r2,60(r16)
100063f8:	308dc83a 	sub	r6,r6,r2
100063fc:	81400717 	ldw	r5,28(r16)
10006400:	9809883a 	mov	r4,r19
10006404:	000f883a 	mov	r7,zero
10006408:	403ee83a 	callr	r8
1000640c:	00ffffc4 	movi	r3,-1
10006410:	10c04526 	beq	r2,r3,10006528 <_fflush_r+0x1c0>
10006414:	80c0030b 	ldhu	r3,12(r16)
10006418:	81000417 	ldw	r4,16(r16)
1000641c:	80000115 	stw	zero,4(r16)
10006420:	197dffcc 	andi	r5,r3,63487
10006424:	8140030d 	sth	r5,12(r16)
10006428:	81000015 	stw	r4,0(r16)
1000642c:	18c4000c 	andi	r3,r3,4096
10006430:	18000126 	beq	r3,zero,10006438 <_fflush_r+0xd0>
10006434:	80801415 	stw	r2,80(r16)
10006438:	81400c17 	ldw	r5,48(r16)
1000643c:	9c400015 	stw	r17,0(r19)
10006440:	28000526 	beq	r5,zero,10006458 <_fflush_r+0xf0>
10006444:	80801004 	addi	r2,r16,64
10006448:	28800226 	beq	r5,r2,10006454 <_fflush_r+0xec>
1000644c:	9809883a 	mov	r4,r19
10006450:	0006a980 	call	10006a98 <_free_r>
10006454:	80000c15 	stw	zero,48(r16)
10006458:	0005883a 	mov	r2,zero
1000645c:	dfc00417 	ldw	ra,16(sp)
10006460:	dcc00317 	ldw	r19,12(sp)
10006464:	dc800217 	ldw	r18,8(sp)
10006468:	dc400117 	ldw	r17,4(sp)
1000646c:	dc000017 	ldw	r16,0(sp)
10006470:	dec00504 	addi	sp,sp,20
10006474:	f800283a 	ret
10006478:	84800417 	ldw	r18,16(r16)
1000647c:	903ff626 	beq	r18,zero,10006458 <__alt_data_end+0xf8006458>
10006480:	84400017 	ldw	r17,0(r16)
10006484:	108000cc 	andi	r2,r2,3
10006488:	84800015 	stw	r18,0(r16)
1000648c:	8ca3c83a 	sub	r17,r17,r18
10006490:	10001526 	beq	r2,zero,100064e8 <_fflush_r+0x180>
10006494:	0005883a 	mov	r2,zero
10006498:	80800215 	stw	r2,8(r16)
1000649c:	04400316 	blt	zero,r17,100064ac <_fflush_r+0x144>
100064a0:	003fed06 	br	10006458 <__alt_data_end+0xf8006458>
100064a4:	90a5883a 	add	r18,r18,r2
100064a8:	047feb0e 	bge	zero,r17,10006458 <__alt_data_end+0xf8006458>
100064ac:	80800917 	ldw	r2,36(r16)
100064b0:	81400717 	ldw	r5,28(r16)
100064b4:	880f883a 	mov	r7,r17
100064b8:	900d883a 	mov	r6,r18
100064bc:	9809883a 	mov	r4,r19
100064c0:	103ee83a 	callr	r2
100064c4:	88a3c83a 	sub	r17,r17,r2
100064c8:	00bff616 	blt	zero,r2,100064a4 <__alt_data_end+0xf80064a4>
100064cc:	80c0030b 	ldhu	r3,12(r16)
100064d0:	00bfffc4 	movi	r2,-1
100064d4:	18c01014 	ori	r3,r3,64
100064d8:	80c0030d 	sth	r3,12(r16)
100064dc:	003fdf06 	br	1000645c <__alt_data_end+0xf800645c>
100064e0:	00069240 	call	10006924 <__sinit>
100064e4:	003fab06 	br	10006394 <__alt_data_end+0xf8006394>
100064e8:	80800517 	ldw	r2,20(r16)
100064ec:	003fea06 	br	10006498 <__alt_data_end+0xf8006498>
100064f0:	81400717 	ldw	r5,28(r16)
100064f4:	000d883a 	mov	r6,zero
100064f8:	9809883a 	mov	r4,r19
100064fc:	01c00044 	movi	r7,1
10006500:	403ee83a 	callr	r8
10006504:	100d883a 	mov	r6,r2
10006508:	00bfffc4 	movi	r2,-1
1000650c:	30801326 	beq	r6,r2,1000655c <_fflush_r+0x1f4>
10006510:	8080030b 	ldhu	r2,12(r16)
10006514:	82000a17 	ldw	r8,40(r16)
10006518:	003fb006 	br	100063dc <__alt_data_end+0xf80063dc>
1000651c:	80c00f17 	ldw	r3,60(r16)
10006520:	00ffa716 	blt	zero,r3,100063c0 <__alt_data_end+0xf80063c0>
10006524:	003fcc06 	br	10006458 <__alt_data_end+0xf8006458>
10006528:	98c00017 	ldw	r3,0(r19)
1000652c:	183fb926 	beq	r3,zero,10006414 <__alt_data_end+0xf8006414>
10006530:	01000744 	movi	r4,29
10006534:	19000226 	beq	r3,r4,10006540 <_fflush_r+0x1d8>
10006538:	01000584 	movi	r4,22
1000653c:	1900101e 	bne	r3,r4,10006580 <_fflush_r+0x218>
10006540:	8080030b 	ldhu	r2,12(r16)
10006544:	80c00417 	ldw	r3,16(r16)
10006548:	80000115 	stw	zero,4(r16)
1000654c:	10bdffcc 	andi	r2,r2,63487
10006550:	8080030d 	sth	r2,12(r16)
10006554:	80c00015 	stw	r3,0(r16)
10006558:	003fb706 	br	10006438 <__alt_data_end+0xf8006438>
1000655c:	98800017 	ldw	r2,0(r19)
10006560:	103feb26 	beq	r2,zero,10006510 <__alt_data_end+0xf8006510>
10006564:	00c00744 	movi	r3,29
10006568:	10c00226 	beq	r2,r3,10006574 <_fflush_r+0x20c>
1000656c:	00c00584 	movi	r3,22
10006570:	10ffd61e 	bne	r2,r3,100064cc <__alt_data_end+0xf80064cc>
10006574:	9c400015 	stw	r17,0(r19)
10006578:	0005883a 	mov	r2,zero
1000657c:	003fb706 	br	1000645c <__alt_data_end+0xf800645c>
10006580:	80c0030b 	ldhu	r3,12(r16)
10006584:	18c01014 	ori	r3,r3,64
10006588:	80c0030d 	sth	r3,12(r16)
1000658c:	003fb306 	br	1000645c <__alt_data_end+0xf800645c>

10006590 <fflush>:
10006590:	20000526 	beq	r4,zero,100065a8 <fflush+0x18>
10006594:	00840074 	movhi	r2,4097
10006598:	108f7d04 	addi	r2,r2,15860
1000659c:	200b883a 	mov	r5,r4
100065a0:	11000017 	ldw	r4,0(r2)
100065a4:	00063681 	jmpi	10006368 <_fflush_r>
100065a8:	00840074 	movhi	r2,4097
100065ac:	108f7c04 	addi	r2,r2,15856
100065b0:	11000017 	ldw	r4,0(r2)
100065b4:	01440034 	movhi	r5,4096
100065b8:	2958da04 	addi	r5,r5,25448
100065bc:	00072e41 	jmpi	100072e4 <_fwalk_reent>

100065c0 <__fp_lock>:
100065c0:	0005883a 	mov	r2,zero
100065c4:	f800283a 	ret

100065c8 <__fp_unlock>:
100065c8:	0005883a 	mov	r2,zero
100065cc:	f800283a 	ret

100065d0 <_cleanup_r>:
100065d0:	01440074 	movhi	r5,4097
100065d4:	296cbc04 	addi	r5,r5,-19728
100065d8:	000722c1 	jmpi	1000722c <_fwalk>

100065dc <__sinit.part.1>:
100065dc:	defff604 	addi	sp,sp,-40
100065e0:	00c40034 	movhi	r3,4096
100065e4:	dfc00915 	stw	ra,36(sp)
100065e8:	df000815 	stw	fp,32(sp)
100065ec:	ddc00715 	stw	r23,28(sp)
100065f0:	dd800615 	stw	r22,24(sp)
100065f4:	dd400515 	stw	r21,20(sp)
100065f8:	dd000415 	stw	r20,16(sp)
100065fc:	dcc00315 	stw	r19,12(sp)
10006600:	dc800215 	stw	r18,8(sp)
10006604:	dc400115 	stw	r17,4(sp)
10006608:	dc000015 	stw	r16,0(sp)
1000660c:	18d97404 	addi	r3,r3,26064
10006610:	24000117 	ldw	r16,4(r4)
10006614:	20c00f15 	stw	r3,60(r4)
10006618:	07000044 	movi	fp,1
1000661c:	00c000c4 	movi	r3,3
10006620:	2080bb04 	addi	r2,r4,748
10006624:	20c0b915 	stw	r3,740(r4)
10006628:	27000e15 	stw	fp,56(r4)
1000662c:	2080ba15 	stw	r2,744(r4)
10006630:	2000b815 	stw	zero,736(r4)
10006634:	05c00204 	movi	r23,8
10006638:	00800104 	movi	r2,4
1000663c:	2025883a 	mov	r18,r4
10006640:	b80d883a 	mov	r6,r23
10006644:	81001704 	addi	r4,r16,92
10006648:	000b883a 	mov	r5,zero
1000664c:	80000015 	stw	zero,0(r16)
10006650:	80000115 	stw	zero,4(r16)
10006654:	80000215 	stw	zero,8(r16)
10006658:	8080030d 	sth	r2,12(r16)
1000665c:	80001915 	stw	zero,100(r16)
10006660:	8000038d 	sth	zero,14(r16)
10006664:	80000415 	stw	zero,16(r16)
10006668:	80000515 	stw	zero,20(r16)
1000666c:	80000615 	stw	zero,24(r16)
10006670:	00081580 	call	10008158 <memset>
10006674:	05840074 	movhi	r22,4097
10006678:	94400217 	ldw	r17,8(r18)
1000667c:	05440074 	movhi	r21,4097
10006680:	05040074 	movhi	r20,4097
10006684:	04c40074 	movhi	r19,4097
10006688:	b5a64b04 	addi	r22,r22,-26324
1000668c:	ad666204 	addi	r21,r21,-26232
10006690:	a5268104 	addi	r20,r20,-26108
10006694:	9ce69804 	addi	r19,r19,-26016
10006698:	85800815 	stw	r22,32(r16)
1000669c:	85400915 	stw	r21,36(r16)
100066a0:	85000a15 	stw	r20,40(r16)
100066a4:	84c00b15 	stw	r19,44(r16)
100066a8:	84000715 	stw	r16,28(r16)
100066ac:	00800284 	movi	r2,10
100066b0:	89001704 	addi	r4,r17,92
100066b4:	b80d883a 	mov	r6,r23
100066b8:	000b883a 	mov	r5,zero
100066bc:	88000015 	stw	zero,0(r17)
100066c0:	88000115 	stw	zero,4(r17)
100066c4:	88000215 	stw	zero,8(r17)
100066c8:	8880030d 	sth	r2,12(r17)
100066cc:	88001915 	stw	zero,100(r17)
100066d0:	8f00038d 	sth	fp,14(r17)
100066d4:	88000415 	stw	zero,16(r17)
100066d8:	88000515 	stw	zero,20(r17)
100066dc:	88000615 	stw	zero,24(r17)
100066e0:	00081580 	call	10008158 <memset>
100066e4:	94000317 	ldw	r16,12(r18)
100066e8:	00800484 	movi	r2,18
100066ec:	8c400715 	stw	r17,28(r17)
100066f0:	8d800815 	stw	r22,32(r17)
100066f4:	8d400915 	stw	r21,36(r17)
100066f8:	8d000a15 	stw	r20,40(r17)
100066fc:	8cc00b15 	stw	r19,44(r17)
10006700:	8080030d 	sth	r2,12(r16)
10006704:	00800084 	movi	r2,2
10006708:	80000015 	stw	zero,0(r16)
1000670c:	80000115 	stw	zero,4(r16)
10006710:	80000215 	stw	zero,8(r16)
10006714:	80001915 	stw	zero,100(r16)
10006718:	8080038d 	sth	r2,14(r16)
1000671c:	80000415 	stw	zero,16(r16)
10006720:	80000515 	stw	zero,20(r16)
10006724:	80000615 	stw	zero,24(r16)
10006728:	81001704 	addi	r4,r16,92
1000672c:	000b883a 	mov	r5,zero
10006730:	b80d883a 	mov	r6,r23
10006734:	00081580 	call	10008158 <memset>
10006738:	84000715 	stw	r16,28(r16)
1000673c:	85800815 	stw	r22,32(r16)
10006740:	85400915 	stw	r21,36(r16)
10006744:	85000a15 	stw	r20,40(r16)
10006748:	84c00b15 	stw	r19,44(r16)
1000674c:	dfc00917 	ldw	ra,36(sp)
10006750:	df000817 	ldw	fp,32(sp)
10006754:	ddc00717 	ldw	r23,28(sp)
10006758:	dd800617 	ldw	r22,24(sp)
1000675c:	dd400517 	ldw	r21,20(sp)
10006760:	dd000417 	ldw	r20,16(sp)
10006764:	dcc00317 	ldw	r19,12(sp)
10006768:	dc800217 	ldw	r18,8(sp)
1000676c:	dc400117 	ldw	r17,4(sp)
10006770:	dc000017 	ldw	r16,0(sp)
10006774:	dec00a04 	addi	sp,sp,40
10006778:	f800283a 	ret

1000677c <__sfmoreglue>:
1000677c:	defffc04 	addi	sp,sp,-16
10006780:	dc800215 	stw	r18,8(sp)
10006784:	2825883a 	mov	r18,r5
10006788:	dc000015 	stw	r16,0(sp)
1000678c:	01401a04 	movi	r5,104
10006790:	2021883a 	mov	r16,r4
10006794:	9009883a 	mov	r4,r18
10006798:	dfc00315 	stw	ra,12(sp)
1000679c:	dc400115 	stw	r17,4(sp)
100067a0:	000c8480 	call	1000c848 <__mulsi3>
100067a4:	8009883a 	mov	r4,r16
100067a8:	11400304 	addi	r5,r2,12
100067ac:	1023883a 	mov	r17,r2
100067b0:	00076340 	call	10007634 <_malloc_r>
100067b4:	1021883a 	mov	r16,r2
100067b8:	10000726 	beq	r2,zero,100067d8 <__sfmoreglue+0x5c>
100067bc:	11000304 	addi	r4,r2,12
100067c0:	10000015 	stw	zero,0(r2)
100067c4:	14800115 	stw	r18,4(r2)
100067c8:	11000215 	stw	r4,8(r2)
100067cc:	000b883a 	mov	r5,zero
100067d0:	880d883a 	mov	r6,r17
100067d4:	00081580 	call	10008158 <memset>
100067d8:	8005883a 	mov	r2,r16
100067dc:	dfc00317 	ldw	ra,12(sp)
100067e0:	dc800217 	ldw	r18,8(sp)
100067e4:	dc400117 	ldw	r17,4(sp)
100067e8:	dc000017 	ldw	r16,0(sp)
100067ec:	dec00404 	addi	sp,sp,16
100067f0:	f800283a 	ret

100067f4 <__sfp>:
100067f4:	00840074 	movhi	r2,4097
100067f8:	defffb04 	addi	sp,sp,-20
100067fc:	108f7c04 	addi	r2,r2,15856
10006800:	dc800215 	stw	r18,8(sp)
10006804:	14800017 	ldw	r18,0(r2)
10006808:	dcc00315 	stw	r19,12(sp)
1000680c:	dfc00415 	stw	ra,16(sp)
10006810:	90800e17 	ldw	r2,56(r18)
10006814:	dc400115 	stw	r17,4(sp)
10006818:	dc000015 	stw	r16,0(sp)
1000681c:	2027883a 	mov	r19,r4
10006820:	1000021e 	bne	r2,zero,1000682c <__sfp+0x38>
10006824:	9009883a 	mov	r4,r18
10006828:	00065dc0 	call	100065dc <__sinit.part.1>
1000682c:	9480b804 	addi	r18,r18,736
10006830:	047fffc4 	movi	r17,-1
10006834:	91400117 	ldw	r5,4(r18)
10006838:	94000217 	ldw	r16,8(r18)
1000683c:	297fffc4 	addi	r5,r5,-1
10006840:	28000a16 	blt	r5,zero,1000686c <__sfp+0x78>
10006844:	8080030f 	ldh	r2,12(r16)
10006848:	10000c26 	beq	r2,zero,1000687c <__sfp+0x88>
1000684c:	80c01d04 	addi	r3,r16,116
10006850:	00000206 	br	1000685c <__sfp+0x68>
10006854:	18bfe60f 	ldh	r2,-104(r3)
10006858:	10000826 	beq	r2,zero,1000687c <__sfp+0x88>
1000685c:	297fffc4 	addi	r5,r5,-1
10006860:	1c3ffd04 	addi	r16,r3,-12
10006864:	18c01a04 	addi	r3,r3,104
10006868:	2c7ffa1e 	bne	r5,r17,10006854 <__alt_data_end+0xf8006854>
1000686c:	90800017 	ldw	r2,0(r18)
10006870:	10001d26 	beq	r2,zero,100068e8 <__sfp+0xf4>
10006874:	1025883a 	mov	r18,r2
10006878:	003fee06 	br	10006834 <__alt_data_end+0xf8006834>
1000687c:	00bfffc4 	movi	r2,-1
10006880:	8080038d 	sth	r2,14(r16)
10006884:	00800044 	movi	r2,1
10006888:	8080030d 	sth	r2,12(r16)
1000688c:	80001915 	stw	zero,100(r16)
10006890:	80000015 	stw	zero,0(r16)
10006894:	80000215 	stw	zero,8(r16)
10006898:	80000115 	stw	zero,4(r16)
1000689c:	80000415 	stw	zero,16(r16)
100068a0:	80000515 	stw	zero,20(r16)
100068a4:	80000615 	stw	zero,24(r16)
100068a8:	81001704 	addi	r4,r16,92
100068ac:	000b883a 	mov	r5,zero
100068b0:	01800204 	movi	r6,8
100068b4:	00081580 	call	10008158 <memset>
100068b8:	8005883a 	mov	r2,r16
100068bc:	80000c15 	stw	zero,48(r16)
100068c0:	80000d15 	stw	zero,52(r16)
100068c4:	80001115 	stw	zero,68(r16)
100068c8:	80001215 	stw	zero,72(r16)
100068cc:	dfc00417 	ldw	ra,16(sp)
100068d0:	dcc00317 	ldw	r19,12(sp)
100068d4:	dc800217 	ldw	r18,8(sp)
100068d8:	dc400117 	ldw	r17,4(sp)
100068dc:	dc000017 	ldw	r16,0(sp)
100068e0:	dec00504 	addi	sp,sp,20
100068e4:	f800283a 	ret
100068e8:	9809883a 	mov	r4,r19
100068ec:	01400104 	movi	r5,4
100068f0:	000677c0 	call	1000677c <__sfmoreglue>
100068f4:	90800015 	stw	r2,0(r18)
100068f8:	103fde1e 	bne	r2,zero,10006874 <__alt_data_end+0xf8006874>
100068fc:	00800304 	movi	r2,12
10006900:	98800015 	stw	r2,0(r19)
10006904:	0005883a 	mov	r2,zero
10006908:	003ff006 	br	100068cc <__alt_data_end+0xf80068cc>

1000690c <_cleanup>:
1000690c:	00840074 	movhi	r2,4097
10006910:	108f7c04 	addi	r2,r2,15856
10006914:	11000017 	ldw	r4,0(r2)
10006918:	01440074 	movhi	r5,4097
1000691c:	296cbc04 	addi	r5,r5,-19728
10006920:	000722c1 	jmpi	1000722c <_fwalk>

10006924 <__sinit>:
10006924:	20800e17 	ldw	r2,56(r4)
10006928:	10000126 	beq	r2,zero,10006930 <__sinit+0xc>
1000692c:	f800283a 	ret
10006930:	00065dc1 	jmpi	100065dc <__sinit.part.1>

10006934 <__sfp_lock_acquire>:
10006934:	f800283a 	ret

10006938 <__sfp_lock_release>:
10006938:	f800283a 	ret

1000693c <__sinit_lock_acquire>:
1000693c:	f800283a 	ret

10006940 <__sinit_lock_release>:
10006940:	f800283a 	ret

10006944 <__fp_lock_all>:
10006944:	00840074 	movhi	r2,4097
10006948:	108f7d04 	addi	r2,r2,15860
1000694c:	11000017 	ldw	r4,0(r2)
10006950:	01440034 	movhi	r5,4096
10006954:	29597004 	addi	r5,r5,26048
10006958:	000722c1 	jmpi	1000722c <_fwalk>

1000695c <__fp_unlock_all>:
1000695c:	00840074 	movhi	r2,4097
10006960:	108f7d04 	addi	r2,r2,15860
10006964:	11000017 	ldw	r4,0(r2)
10006968:	01440034 	movhi	r5,4096
1000696c:	29597204 	addi	r5,r5,26056
10006970:	000722c1 	jmpi	1000722c <_fwalk>

10006974 <_malloc_trim_r>:
10006974:	defffb04 	addi	sp,sp,-20
10006978:	dcc00315 	stw	r19,12(sp)
1000697c:	04c40074 	movhi	r19,4097
10006980:	dc800215 	stw	r18,8(sp)
10006984:	dc400115 	stw	r17,4(sp)
10006988:	dc000015 	stw	r16,0(sp)
1000698c:	dfc00415 	stw	ra,16(sp)
10006990:	2821883a 	mov	r16,r5
10006994:	9cc9f804 	addi	r19,r19,10208
10006998:	2025883a 	mov	r18,r4
1000699c:	000f64c0 	call	1000f64c <__malloc_lock>
100069a0:	98800217 	ldw	r2,8(r19)
100069a4:	14400117 	ldw	r17,4(r2)
100069a8:	00bfff04 	movi	r2,-4
100069ac:	88a2703a 	and	r17,r17,r2
100069b0:	8c21c83a 	sub	r16,r17,r16
100069b4:	8403fbc4 	addi	r16,r16,4079
100069b8:	8020d33a 	srli	r16,r16,12
100069bc:	0083ffc4 	movi	r2,4095
100069c0:	843fffc4 	addi	r16,r16,-1
100069c4:	8020933a 	slli	r16,r16,12
100069c8:	1400060e 	bge	r2,r16,100069e4 <_malloc_trim_r+0x70>
100069cc:	9009883a 	mov	r4,r18
100069d0:	000b883a 	mov	r5,zero
100069d4:	00098d80 	call	100098d8 <_sbrk_r>
100069d8:	98c00217 	ldw	r3,8(r19)
100069dc:	1c47883a 	add	r3,r3,r17
100069e0:	10c00a26 	beq	r2,r3,10006a0c <_malloc_trim_r+0x98>
100069e4:	9009883a 	mov	r4,r18
100069e8:	000f66c0 	call	1000f66c <__malloc_unlock>
100069ec:	0005883a 	mov	r2,zero
100069f0:	dfc00417 	ldw	ra,16(sp)
100069f4:	dcc00317 	ldw	r19,12(sp)
100069f8:	dc800217 	ldw	r18,8(sp)
100069fc:	dc400117 	ldw	r17,4(sp)
10006a00:	dc000017 	ldw	r16,0(sp)
10006a04:	dec00504 	addi	sp,sp,20
10006a08:	f800283a 	ret
10006a0c:	9009883a 	mov	r4,r18
10006a10:	040bc83a 	sub	r5,zero,r16
10006a14:	00098d80 	call	100098d8 <_sbrk_r>
10006a18:	00ffffc4 	movi	r3,-1
10006a1c:	10c00d26 	beq	r2,r3,10006a54 <_malloc_trim_r+0xe0>
10006a20:	00c40074 	movhi	r3,4097
10006a24:	18d65a04 	addi	r3,r3,22888
10006a28:	18800017 	ldw	r2,0(r3)
10006a2c:	99000217 	ldw	r4,8(r19)
10006a30:	8c23c83a 	sub	r17,r17,r16
10006a34:	8c400054 	ori	r17,r17,1
10006a38:	1421c83a 	sub	r16,r2,r16
10006a3c:	24400115 	stw	r17,4(r4)
10006a40:	9009883a 	mov	r4,r18
10006a44:	1c000015 	stw	r16,0(r3)
10006a48:	000f66c0 	call	1000f66c <__malloc_unlock>
10006a4c:	00800044 	movi	r2,1
10006a50:	003fe706 	br	100069f0 <__alt_data_end+0xf80069f0>
10006a54:	9009883a 	mov	r4,r18
10006a58:	000b883a 	mov	r5,zero
10006a5c:	00098d80 	call	100098d8 <_sbrk_r>
10006a60:	99000217 	ldw	r4,8(r19)
10006a64:	014003c4 	movi	r5,15
10006a68:	1107c83a 	sub	r3,r2,r4
10006a6c:	28ffdd0e 	bge	r5,r3,100069e4 <__alt_data_end+0xf80069e4>
10006a70:	01440074 	movhi	r5,4097
10006a74:	294f7f04 	addi	r5,r5,15868
10006a78:	29400017 	ldw	r5,0(r5)
10006a7c:	18c00054 	ori	r3,r3,1
10006a80:	20c00115 	stw	r3,4(r4)
10006a84:	00c40074 	movhi	r3,4097
10006a88:	1145c83a 	sub	r2,r2,r5
10006a8c:	18d65a04 	addi	r3,r3,22888
10006a90:	18800015 	stw	r2,0(r3)
10006a94:	003fd306 	br	100069e4 <__alt_data_end+0xf80069e4>

10006a98 <_free_r>:
10006a98:	28004c26 	beq	r5,zero,10006bcc <_free_r+0x134>
10006a9c:	defffd04 	addi	sp,sp,-12
10006aa0:	dc400115 	stw	r17,4(sp)
10006aa4:	dc000015 	stw	r16,0(sp)
10006aa8:	2023883a 	mov	r17,r4
10006aac:	2821883a 	mov	r16,r5
10006ab0:	dfc00215 	stw	ra,8(sp)
10006ab4:	000f64c0 	call	1000f64c <__malloc_lock>
10006ab8:	813fff17 	ldw	r4,-4(r16)
10006abc:	00bfff84 	movi	r2,-2
10006ac0:	02440074 	movhi	r9,4097
10006ac4:	81bffe04 	addi	r6,r16,-8
10006ac8:	2084703a 	and	r2,r4,r2
10006acc:	4a49f804 	addi	r9,r9,10208
10006ad0:	308b883a 	add	r5,r6,r2
10006ad4:	2a000117 	ldw	r8,4(r5)
10006ad8:	49c00217 	ldw	r7,8(r9)
10006adc:	00ffff04 	movi	r3,-4
10006ae0:	40c6703a 	and	r3,r8,r3
10006ae4:	39405326 	beq	r7,r5,10006c34 <_free_r+0x19c>
10006ae8:	28c00115 	stw	r3,4(r5)
10006aec:	2100004c 	andi	r4,r4,1
10006af0:	2000091e 	bne	r4,zero,10006b18 <_free_r+0x80>
10006af4:	81fffe17 	ldw	r7,-8(r16)
10006af8:	4a000204 	addi	r8,r9,8
10006afc:	31cdc83a 	sub	r6,r6,r7
10006b00:	31000217 	ldw	r4,8(r6)
10006b04:	11c5883a 	add	r2,r2,r7
10006b08:	22006126 	beq	r4,r8,10006c90 <_free_r+0x1f8>
10006b0c:	31c00317 	ldw	r7,12(r6)
10006b10:	21c00315 	stw	r7,12(r4)
10006b14:	39000215 	stw	r4,8(r7)
10006b18:	28c9883a 	add	r4,r5,r3
10006b1c:	21c00117 	ldw	r7,4(r4)
10006b20:	39c0004c 	andi	r7,r7,1
10006b24:	38000d1e 	bne	r7,zero,10006b5c <_free_r+0xc4>
10006b28:	29000217 	ldw	r4,8(r5)
10006b2c:	10c5883a 	add	r2,r2,r3
10006b30:	00c40074 	movhi	r3,4097
10006b34:	18c9fa04 	addi	r3,r3,10216
10006b38:	20c07526 	beq	r4,r3,10006d10 <_free_r+0x278>
10006b3c:	29c00317 	ldw	r7,12(r5)
10006b40:	11400054 	ori	r5,r2,1
10006b44:	3087883a 	add	r3,r6,r2
10006b48:	21c00315 	stw	r7,12(r4)
10006b4c:	39000215 	stw	r4,8(r7)
10006b50:	31400115 	stw	r5,4(r6)
10006b54:	18800015 	stw	r2,0(r3)
10006b58:	00000406 	br	10006b6c <_free_r+0xd4>
10006b5c:	10c00054 	ori	r3,r2,1
10006b60:	30c00115 	stw	r3,4(r6)
10006b64:	3087883a 	add	r3,r6,r2
10006b68:	18800015 	stw	r2,0(r3)
10006b6c:	00c07fc4 	movi	r3,511
10006b70:	18801736 	bltu	r3,r2,10006bd0 <_free_r+0x138>
10006b74:	1004d0fa 	srli	r2,r2,3
10006b78:	01400044 	movi	r5,1
10006b7c:	49000117 	ldw	r4,4(r9)
10006b80:	1087883a 	add	r3,r2,r2
10006b84:	18c7883a 	add	r3,r3,r3
10006b88:	1005d0ba 	srai	r2,r2,2
10006b8c:	18c7883a 	add	r3,r3,r3
10006b90:	1a47883a 	add	r3,r3,r9
10006b94:	19c00217 	ldw	r7,8(r3)
10006b98:	2884983a 	sll	r2,r5,r2
10006b9c:	30c00315 	stw	r3,12(r6)
10006ba0:	31c00215 	stw	r7,8(r6)
10006ba4:	1104b03a 	or	r2,r2,r4
10006ba8:	19800215 	stw	r6,8(r3)
10006bac:	48800115 	stw	r2,4(r9)
10006bb0:	39800315 	stw	r6,12(r7)
10006bb4:	8809883a 	mov	r4,r17
10006bb8:	dfc00217 	ldw	ra,8(sp)
10006bbc:	dc400117 	ldw	r17,4(sp)
10006bc0:	dc000017 	ldw	r16,0(sp)
10006bc4:	dec00304 	addi	sp,sp,12
10006bc8:	000f66c1 	jmpi	1000f66c <__malloc_unlock>
10006bcc:	f800283a 	ret
10006bd0:	1006d27a 	srli	r3,r2,9
10006bd4:	01000104 	movi	r4,4
10006bd8:	20c04036 	bltu	r4,r3,10006cdc <_free_r+0x244>
10006bdc:	1006d1ba 	srli	r3,r2,6
10006be0:	19400e04 	addi	r5,r3,56
10006be4:	2947883a 	add	r3,r5,r5
10006be8:	18c7883a 	add	r3,r3,r3
10006bec:	18c7883a 	add	r3,r3,r3
10006bf0:	1a49883a 	add	r4,r3,r9
10006bf4:	20c00217 	ldw	r3,8(r4)
10006bf8:	01c40074 	movhi	r7,4097
10006bfc:	39c9f804 	addi	r7,r7,10208
10006c00:	19003b26 	beq	r3,r4,10006cf0 <_free_r+0x258>
10006c04:	01ffff04 	movi	r7,-4
10006c08:	19400117 	ldw	r5,4(r3)
10006c0c:	29ca703a 	and	r5,r5,r7
10006c10:	1140022e 	bgeu	r2,r5,10006c1c <_free_r+0x184>
10006c14:	18c00217 	ldw	r3,8(r3)
10006c18:	20fffb1e 	bne	r4,r3,10006c08 <__alt_data_end+0xf8006c08>
10006c1c:	18800317 	ldw	r2,12(r3)
10006c20:	30800315 	stw	r2,12(r6)
10006c24:	30c00215 	stw	r3,8(r6)
10006c28:	11800215 	stw	r6,8(r2)
10006c2c:	19800315 	stw	r6,12(r3)
10006c30:	003fe006 	br	10006bb4 <__alt_data_end+0xf8006bb4>
10006c34:	2100004c 	andi	r4,r4,1
10006c38:	1885883a 	add	r2,r3,r2
10006c3c:	2000071e 	bne	r4,zero,10006c5c <_free_r+0x1c4>
10006c40:	817ffe17 	ldw	r5,-8(r16)
10006c44:	314dc83a 	sub	r6,r6,r5
10006c48:	30c00317 	ldw	r3,12(r6)
10006c4c:	31000217 	ldw	r4,8(r6)
10006c50:	1145883a 	add	r2,r2,r5
10006c54:	20c00315 	stw	r3,12(r4)
10006c58:	19000215 	stw	r4,8(r3)
10006c5c:	10c00054 	ori	r3,r2,1
10006c60:	30c00115 	stw	r3,4(r6)
10006c64:	00c40074 	movhi	r3,4097
10006c68:	18cf8004 	addi	r3,r3,15872
10006c6c:	18c00017 	ldw	r3,0(r3)
10006c70:	49800215 	stw	r6,8(r9)
10006c74:	10ffcf36 	bltu	r2,r3,10006bb4 <__alt_data_end+0xf8006bb4>
10006c78:	00840074 	movhi	r2,4097
10006c7c:	10964d04 	addi	r2,r2,22836
10006c80:	11400017 	ldw	r5,0(r2)
10006c84:	8809883a 	mov	r4,r17
10006c88:	00069740 	call	10006974 <_malloc_trim_r>
10006c8c:	003fc906 	br	10006bb4 <__alt_data_end+0xf8006bb4>
10006c90:	28c9883a 	add	r4,r5,r3
10006c94:	21000117 	ldw	r4,4(r4)
10006c98:	2100004c 	andi	r4,r4,1
10006c9c:	20000a1e 	bne	r4,zero,10006cc8 <_free_r+0x230>
10006ca0:	29000317 	ldw	r4,12(r5)
10006ca4:	29400217 	ldw	r5,8(r5)
10006ca8:	10c5883a 	add	r2,r2,r3
10006cac:	10c00054 	ori	r3,r2,1
10006cb0:	29000315 	stw	r4,12(r5)
10006cb4:	21400215 	stw	r5,8(r4)
10006cb8:	30c00115 	stw	r3,4(r6)
10006cbc:	308d883a 	add	r6,r6,r2
10006cc0:	30800015 	stw	r2,0(r6)
10006cc4:	003fbb06 	br	10006bb4 <__alt_data_end+0xf8006bb4>
10006cc8:	10c00054 	ori	r3,r2,1
10006ccc:	30c00115 	stw	r3,4(r6)
10006cd0:	308d883a 	add	r6,r6,r2
10006cd4:	30800015 	stw	r2,0(r6)
10006cd8:	003fb606 	br	10006bb4 <__alt_data_end+0xf8006bb4>
10006cdc:	01000504 	movi	r4,20
10006ce0:	20c01436 	bltu	r4,r3,10006d34 <_free_r+0x29c>
10006ce4:	194016c4 	addi	r5,r3,91
10006ce8:	2947883a 	add	r3,r5,r5
10006cec:	003fbe06 	br	10006be8 <__alt_data_end+0xf8006be8>
10006cf0:	280bd0ba 	srai	r5,r5,2
10006cf4:	00800044 	movi	r2,1
10006cf8:	39000117 	ldw	r4,4(r7)
10006cfc:	114a983a 	sll	r5,r2,r5
10006d00:	1805883a 	mov	r2,r3
10006d04:	2908b03a 	or	r4,r5,r4
10006d08:	39000115 	stw	r4,4(r7)
10006d0c:	003fc406 	br	10006c20 <__alt_data_end+0xf8006c20>
10006d10:	49800515 	stw	r6,20(r9)
10006d14:	49800415 	stw	r6,16(r9)
10006d18:	10c00054 	ori	r3,r2,1
10006d1c:	31000315 	stw	r4,12(r6)
10006d20:	31000215 	stw	r4,8(r6)
10006d24:	30c00115 	stw	r3,4(r6)
10006d28:	308d883a 	add	r6,r6,r2
10006d2c:	30800015 	stw	r2,0(r6)
10006d30:	003fa006 	br	10006bb4 <__alt_data_end+0xf8006bb4>
10006d34:	01001504 	movi	r4,84
10006d38:	20c00436 	bltu	r4,r3,10006d4c <_free_r+0x2b4>
10006d3c:	1006d33a 	srli	r3,r2,12
10006d40:	19401b84 	addi	r5,r3,110
10006d44:	2947883a 	add	r3,r5,r5
10006d48:	003fa706 	br	10006be8 <__alt_data_end+0xf8006be8>
10006d4c:	01005504 	movi	r4,340
10006d50:	20c00436 	bltu	r4,r3,10006d64 <_free_r+0x2cc>
10006d54:	1006d3fa 	srli	r3,r2,15
10006d58:	19401dc4 	addi	r5,r3,119
10006d5c:	2947883a 	add	r3,r5,r5
10006d60:	003fa106 	br	10006be8 <__alt_data_end+0xf8006be8>
10006d64:	01015504 	movi	r4,1364
10006d68:	20c00436 	bltu	r4,r3,10006d7c <_free_r+0x2e4>
10006d6c:	1006d4ba 	srli	r3,r2,18
10006d70:	19401f04 	addi	r5,r3,124
10006d74:	2947883a 	add	r3,r5,r5
10006d78:	003f9b06 	br	10006be8 <__alt_data_end+0xf8006be8>
10006d7c:	00c03f04 	movi	r3,252
10006d80:	01401f84 	movi	r5,126
10006d84:	003f9806 	br	10006be8 <__alt_data_end+0xf8006be8>

10006d88 <__sfvwrite_r>:
10006d88:	30800217 	ldw	r2,8(r6)
10006d8c:	10004526 	beq	r2,zero,10006ea4 <__sfvwrite_r+0x11c>
10006d90:	28c0030b 	ldhu	r3,12(r5)
10006d94:	defff404 	addi	sp,sp,-48
10006d98:	dd400715 	stw	r21,28(sp)
10006d9c:	dcc00515 	stw	r19,20(sp)
10006da0:	dc000215 	stw	r16,8(sp)
10006da4:	dfc00b15 	stw	ra,44(sp)
10006da8:	df000a15 	stw	fp,40(sp)
10006dac:	ddc00915 	stw	r23,36(sp)
10006db0:	dd800815 	stw	r22,32(sp)
10006db4:	dd000615 	stw	r20,24(sp)
10006db8:	dc800415 	stw	r18,16(sp)
10006dbc:	dc400315 	stw	r17,12(sp)
10006dc0:	1880020c 	andi	r2,r3,8
10006dc4:	2821883a 	mov	r16,r5
10006dc8:	202b883a 	mov	r21,r4
10006dcc:	3027883a 	mov	r19,r6
10006dd0:	10002526 	beq	r2,zero,10006e68 <__sfvwrite_r+0xe0>
10006dd4:	28800417 	ldw	r2,16(r5)
10006dd8:	10002326 	beq	r2,zero,10006e68 <__sfvwrite_r+0xe0>
10006ddc:	1880008c 	andi	r2,r3,2
10006de0:	9c400017 	ldw	r17,0(r19)
10006de4:	10003126 	beq	r2,zero,10006eac <__sfvwrite_r+0x124>
10006de8:	0029883a 	mov	r20,zero
10006dec:	0025883a 	mov	r18,zero
10006df0:	05810004 	movi	r22,1024
10006df4:	a00d883a 	mov	r6,r20
10006df8:	a809883a 	mov	r4,r21
10006dfc:	90002526 	beq	r18,zero,10006e94 <__sfvwrite_r+0x10c>
10006e00:	900f883a 	mov	r7,r18
10006e04:	81400717 	ldw	r5,28(r16)
10006e08:	b480012e 	bgeu	r22,r18,10006e10 <__sfvwrite_r+0x88>
10006e0c:	01c10004 	movi	r7,1024
10006e10:	80800917 	ldw	r2,36(r16)
10006e14:	103ee83a 	callr	r2
10006e18:	0080510e 	bge	zero,r2,10006f60 <__sfvwrite_r+0x1d8>
10006e1c:	98c00217 	ldw	r3,8(r19)
10006e20:	a0a9883a 	add	r20,r20,r2
10006e24:	90a5c83a 	sub	r18,r18,r2
10006e28:	1885c83a 	sub	r2,r3,r2
10006e2c:	98800215 	stw	r2,8(r19)
10006e30:	103ff01e 	bne	r2,zero,10006df4 <__alt_data_end+0xf8006df4>
10006e34:	0005883a 	mov	r2,zero
10006e38:	dfc00b17 	ldw	ra,44(sp)
10006e3c:	df000a17 	ldw	fp,40(sp)
10006e40:	ddc00917 	ldw	r23,36(sp)
10006e44:	dd800817 	ldw	r22,32(sp)
10006e48:	dd400717 	ldw	r21,28(sp)
10006e4c:	dd000617 	ldw	r20,24(sp)
10006e50:	dcc00517 	ldw	r19,20(sp)
10006e54:	dc800417 	ldw	r18,16(sp)
10006e58:	dc400317 	ldw	r17,12(sp)
10006e5c:	dc000217 	ldw	r16,8(sp)
10006e60:	dec00c04 	addi	sp,sp,48
10006e64:	f800283a 	ret
10006e68:	a809883a 	mov	r4,r21
10006e6c:	800b883a 	mov	r5,r16
10006e70:	00048e80 	call	100048e8 <__swsetup_r>
10006e74:	80c0030b 	ldhu	r3,12(r16)
10006e78:	103fd826 	beq	r2,zero,10006ddc <__alt_data_end+0xf8006ddc>
10006e7c:	18c01014 	ori	r3,r3,64
10006e80:	80c0030d 	sth	r3,12(r16)
10006e84:	00c00244 	movi	r3,9
10006e88:	00bfffc4 	movi	r2,-1
10006e8c:	a8c00015 	stw	r3,0(r21)
10006e90:	003fe906 	br	10006e38 <__alt_data_end+0xf8006e38>
10006e94:	8d000017 	ldw	r20,0(r17)
10006e98:	8c800117 	ldw	r18,4(r17)
10006e9c:	8c400204 	addi	r17,r17,8
10006ea0:	003fd406 	br	10006df4 <__alt_data_end+0xf8006df4>
10006ea4:	0005883a 	mov	r2,zero
10006ea8:	f800283a 	ret
10006eac:	1880004c 	andi	r2,r3,1
10006eb0:	1000301e 	bne	r2,zero,10006f74 <__sfvwrite_r+0x1ec>
10006eb4:	002f883a 	mov	r23,zero
10006eb8:	0025883a 	mov	r18,zero
10006ebc:	90001c26 	beq	r18,zero,10006f30 <__sfvwrite_r+0x1a8>
10006ec0:	1880800c 	andi	r2,r3,512
10006ec4:	85000217 	ldw	r20,8(r16)
10006ec8:	10006c26 	beq	r2,zero,1000707c <__sfvwrite_r+0x2f4>
10006ecc:	a02d883a 	mov	r22,r20
10006ed0:	95008536 	bltu	r18,r20,100070e8 <__sfvwrite_r+0x360>
10006ed4:	1881200c 	andi	r2,r3,1152
10006ed8:	10009d1e 	bne	r2,zero,10007150 <__sfvwrite_r+0x3c8>
10006edc:	81000017 	ldw	r4,0(r16)
10006ee0:	a039883a 	mov	fp,r20
10006ee4:	9029883a 	mov	r20,r18
10006ee8:	b80b883a 	mov	r5,r23
10006eec:	b00d883a 	mov	r6,r22
10006ef0:	0007ffc0 	call	10007ffc <memmove>
10006ef4:	80c00217 	ldw	r3,8(r16)
10006ef8:	81000017 	ldw	r4,0(r16)
10006efc:	9005883a 	mov	r2,r18
10006f00:	1f39c83a 	sub	fp,r3,fp
10006f04:	258f883a 	add	r7,r4,r22
10006f08:	87000215 	stw	fp,8(r16)
10006f0c:	81c00015 	stw	r7,0(r16)
10006f10:	98c00217 	ldw	r3,8(r19)
10006f14:	b8af883a 	add	r23,r23,r2
10006f18:	90a5c83a 	sub	r18,r18,r2
10006f1c:	1d05c83a 	sub	r2,r3,r20
10006f20:	98800215 	stw	r2,8(r19)
10006f24:	103fc326 	beq	r2,zero,10006e34 <__alt_data_end+0xf8006e34>
10006f28:	80c0030b 	ldhu	r3,12(r16)
10006f2c:	903fe41e 	bne	r18,zero,10006ec0 <__alt_data_end+0xf8006ec0>
10006f30:	8dc00017 	ldw	r23,0(r17)
10006f34:	8c800117 	ldw	r18,4(r17)
10006f38:	8c400204 	addi	r17,r17,8
10006f3c:	003fdf06 	br	10006ebc <__alt_data_end+0xf8006ebc>
10006f40:	00092c40 	call	100092c4 <_realloc_r>
10006f44:	102d883a 	mov	r22,r2
10006f48:	1000a01e 	bne	r2,zero,100071cc <__sfvwrite_r+0x444>
10006f4c:	81400417 	ldw	r5,16(r16)
10006f50:	a809883a 	mov	r4,r21
10006f54:	0006a980 	call	10006a98 <_free_r>
10006f58:	00800304 	movi	r2,12
10006f5c:	a8800015 	stw	r2,0(r21)
10006f60:	80c0030b 	ldhu	r3,12(r16)
10006f64:	00bfffc4 	movi	r2,-1
10006f68:	18c01014 	ori	r3,r3,64
10006f6c:	80c0030d 	sth	r3,12(r16)
10006f70:	003fb106 	br	10006e38 <__alt_data_end+0xf8006e38>
10006f74:	0029883a 	mov	r20,zero
10006f78:	0011883a 	mov	r8,zero
10006f7c:	0039883a 	mov	fp,zero
10006f80:	0025883a 	mov	r18,zero
10006f84:	90001f26 	beq	r18,zero,10007004 <__sfvwrite_r+0x27c>
10006f88:	40006826 	beq	r8,zero,1000712c <__sfvwrite_r+0x3a4>
10006f8c:	a02f883a 	mov	r23,r20
10006f90:	9500012e 	bgeu	r18,r20,10006f98 <__sfvwrite_r+0x210>
10006f94:	902f883a 	mov	r23,r18
10006f98:	81000017 	ldw	r4,0(r16)
10006f9c:	80800417 	ldw	r2,16(r16)
10006fa0:	b82d883a 	mov	r22,r23
10006fa4:	81800217 	ldw	r6,8(r16)
10006fa8:	81c00517 	ldw	r7,20(r16)
10006fac:	1100022e 	bgeu	r2,r4,10006fb8 <__sfvwrite_r+0x230>
10006fb0:	31c7883a 	add	r3,r6,r7
10006fb4:	1dc01816 	blt	r3,r23,10007018 <__sfvwrite_r+0x290>
10006fb8:	b9c03f16 	blt	r23,r7,100070b8 <__sfvwrite_r+0x330>
10006fbc:	80800917 	ldw	r2,36(r16)
10006fc0:	81400717 	ldw	r5,28(r16)
10006fc4:	a809883a 	mov	r4,r21
10006fc8:	da000115 	stw	r8,4(sp)
10006fcc:	e00d883a 	mov	r6,fp
10006fd0:	103ee83a 	callr	r2
10006fd4:	102d883a 	mov	r22,r2
10006fd8:	da000117 	ldw	r8,4(sp)
10006fdc:	00bfe00e 	bge	zero,r2,10006f60 <__alt_data_end+0xf8006f60>
10006fe0:	a5a9c83a 	sub	r20,r20,r22
10006fe4:	a0001f26 	beq	r20,zero,10007064 <__sfvwrite_r+0x2dc>
10006fe8:	98800217 	ldw	r2,8(r19)
10006fec:	e5b9883a 	add	fp,fp,r22
10006ff0:	95a5c83a 	sub	r18,r18,r22
10006ff4:	15adc83a 	sub	r22,r2,r22
10006ff8:	9d800215 	stw	r22,8(r19)
10006ffc:	b03f8d26 	beq	r22,zero,10006e34 <__alt_data_end+0xf8006e34>
10007000:	903fe11e 	bne	r18,zero,10006f88 <__alt_data_end+0xf8006f88>
10007004:	8f000017 	ldw	fp,0(r17)
10007008:	8c800117 	ldw	r18,4(r17)
1000700c:	0011883a 	mov	r8,zero
10007010:	8c400204 	addi	r17,r17,8
10007014:	003fdb06 	br	10006f84 <__alt_data_end+0xf8006f84>
10007018:	180d883a 	mov	r6,r3
1000701c:	e00b883a 	mov	r5,fp
10007020:	da000115 	stw	r8,4(sp)
10007024:	d8c00015 	stw	r3,0(sp)
10007028:	0007ffc0 	call	10007ffc <memmove>
1000702c:	d8c00017 	ldw	r3,0(sp)
10007030:	80800017 	ldw	r2,0(r16)
10007034:	a809883a 	mov	r4,r21
10007038:	800b883a 	mov	r5,r16
1000703c:	10c5883a 	add	r2,r2,r3
10007040:	80800015 	stw	r2,0(r16)
10007044:	d8c00015 	stw	r3,0(sp)
10007048:	00063680 	call	10006368 <_fflush_r>
1000704c:	d8c00017 	ldw	r3,0(sp)
10007050:	da000117 	ldw	r8,4(sp)
10007054:	103fc21e 	bne	r2,zero,10006f60 <__alt_data_end+0xf8006f60>
10007058:	182d883a 	mov	r22,r3
1000705c:	a5a9c83a 	sub	r20,r20,r22
10007060:	a03fe11e 	bne	r20,zero,10006fe8 <__alt_data_end+0xf8006fe8>
10007064:	a809883a 	mov	r4,r21
10007068:	800b883a 	mov	r5,r16
1000706c:	00063680 	call	10006368 <_fflush_r>
10007070:	103fbb1e 	bne	r2,zero,10006f60 <__alt_data_end+0xf8006f60>
10007074:	0011883a 	mov	r8,zero
10007078:	003fdb06 	br	10006fe8 <__alt_data_end+0xf8006fe8>
1000707c:	81000017 	ldw	r4,0(r16)
10007080:	80800417 	ldw	r2,16(r16)
10007084:	1100012e 	bgeu	r2,r4,1000708c <__sfvwrite_r+0x304>
10007088:	a4805a36 	bltu	r20,r18,100071f4 <__sfvwrite_r+0x46c>
1000708c:	81c00517 	ldw	r7,20(r16)
10007090:	91c01a36 	bltu	r18,r7,100070fc <__sfvwrite_r+0x374>
10007094:	80800917 	ldw	r2,36(r16)
10007098:	81400717 	ldw	r5,28(r16)
1000709c:	a809883a 	mov	r4,r21
100070a0:	b80d883a 	mov	r6,r23
100070a4:	103ee83a 	callr	r2
100070a8:	1029883a 	mov	r20,r2
100070ac:	00bfac0e 	bge	zero,r2,10006f60 <__alt_data_end+0xf8006f60>
100070b0:	a005883a 	mov	r2,r20
100070b4:	003f9606 	br	10006f10 <__alt_data_end+0xf8006f10>
100070b8:	b80d883a 	mov	r6,r23
100070bc:	e00b883a 	mov	r5,fp
100070c0:	da000115 	stw	r8,4(sp)
100070c4:	0007ffc0 	call	10007ffc <memmove>
100070c8:	80800217 	ldw	r2,8(r16)
100070cc:	80c00017 	ldw	r3,0(r16)
100070d0:	da000117 	ldw	r8,4(sp)
100070d4:	15c5c83a 	sub	r2,r2,r23
100070d8:	1def883a 	add	r23,r3,r23
100070dc:	80800215 	stw	r2,8(r16)
100070e0:	85c00015 	stw	r23,0(r16)
100070e4:	003fbe06 	br	10006fe0 <__alt_data_end+0xf8006fe0>
100070e8:	81000017 	ldw	r4,0(r16)
100070ec:	9039883a 	mov	fp,r18
100070f0:	9029883a 	mov	r20,r18
100070f4:	902d883a 	mov	r22,r18
100070f8:	003f7b06 	br	10006ee8 <__alt_data_end+0xf8006ee8>
100070fc:	b80b883a 	mov	r5,r23
10007100:	900d883a 	mov	r6,r18
10007104:	0007ffc0 	call	10007ffc <memmove>
10007108:	80c00217 	ldw	r3,8(r16)
1000710c:	80800017 	ldw	r2,0(r16)
10007110:	9029883a 	mov	r20,r18
10007114:	1c87c83a 	sub	r3,r3,r18
10007118:	1485883a 	add	r2,r2,r18
1000711c:	80800015 	stw	r2,0(r16)
10007120:	80c00215 	stw	r3,8(r16)
10007124:	9005883a 	mov	r2,r18
10007128:	003f7906 	br	10006f10 <__alt_data_end+0xf8006f10>
1000712c:	e009883a 	mov	r4,fp
10007130:	01400284 	movi	r5,10
10007134:	900d883a 	mov	r6,r18
10007138:	0007ddc0 	call	10007ddc <memchr>
1000713c:	10003826 	beq	r2,zero,10007220 <__sfvwrite_r+0x498>
10007140:	10800044 	addi	r2,r2,1
10007144:	1729c83a 	sub	r20,r2,fp
10007148:	02000044 	movi	r8,1
1000714c:	003f8f06 	br	10006f8c <__alt_data_end+0xf8006f8c>
10007150:	80800517 	ldw	r2,20(r16)
10007154:	81400417 	ldw	r5,16(r16)
10007158:	87000017 	ldw	fp,0(r16)
1000715c:	10a9883a 	add	r20,r2,r2
10007160:	a085883a 	add	r2,r20,r2
10007164:	1028d7fa 	srli	r20,r2,31
10007168:	e179c83a 	sub	fp,fp,r5
1000716c:	e1000044 	addi	r4,fp,1
10007170:	a085883a 	add	r2,r20,r2
10007174:	1029d07a 	srai	r20,r2,1
10007178:	2485883a 	add	r2,r4,r18
1000717c:	a00d883a 	mov	r6,r20
10007180:	a080022e 	bgeu	r20,r2,1000718c <__sfvwrite_r+0x404>
10007184:	1029883a 	mov	r20,r2
10007188:	100d883a 	mov	r6,r2
1000718c:	18c1000c 	andi	r3,r3,1024
10007190:	a809883a 	mov	r4,r21
10007194:	183f6a26 	beq	r3,zero,10006f40 <__alt_data_end+0xf8006f40>
10007198:	300b883a 	mov	r5,r6
1000719c:	00076340 	call	10007634 <_malloc_r>
100071a0:	102d883a 	mov	r22,r2
100071a4:	103f6c26 	beq	r2,zero,10006f58 <__alt_data_end+0xf8006f58>
100071a8:	81400417 	ldw	r5,16(r16)
100071ac:	1009883a 	mov	r4,r2
100071b0:	e00d883a 	mov	r6,fp
100071b4:	0007ec40 	call	10007ec4 <memcpy>
100071b8:	8080030b 	ldhu	r2,12(r16)
100071bc:	00fedfc4 	movi	r3,-1153
100071c0:	10c4703a 	and	r2,r2,r3
100071c4:	10802014 	ori	r2,r2,128
100071c8:	8080030d 	sth	r2,12(r16)
100071cc:	b709883a 	add	r4,r22,fp
100071d0:	a707c83a 	sub	r3,r20,fp
100071d4:	85800415 	stw	r22,16(r16)
100071d8:	85000515 	stw	r20,20(r16)
100071dc:	81000015 	stw	r4,0(r16)
100071e0:	9039883a 	mov	fp,r18
100071e4:	80c00215 	stw	r3,8(r16)
100071e8:	9029883a 	mov	r20,r18
100071ec:	902d883a 	mov	r22,r18
100071f0:	003f3d06 	br	10006ee8 <__alt_data_end+0xf8006ee8>
100071f4:	b80b883a 	mov	r5,r23
100071f8:	a00d883a 	mov	r6,r20
100071fc:	0007ffc0 	call	10007ffc <memmove>
10007200:	80800017 	ldw	r2,0(r16)
10007204:	a809883a 	mov	r4,r21
10007208:	800b883a 	mov	r5,r16
1000720c:	1505883a 	add	r2,r2,r20
10007210:	80800015 	stw	r2,0(r16)
10007214:	00063680 	call	10006368 <_fflush_r>
10007218:	103fa526 	beq	r2,zero,100070b0 <__alt_data_end+0xf80070b0>
1000721c:	003f5006 	br	10006f60 <__alt_data_end+0xf8006f60>
10007220:	95000044 	addi	r20,r18,1
10007224:	02000044 	movi	r8,1
10007228:	003f5806 	br	10006f8c <__alt_data_end+0xf8006f8c>

1000722c <_fwalk>:
1000722c:	defff804 	addi	sp,sp,-32
10007230:	dd400515 	stw	r21,20(sp)
10007234:	2540b804 	addi	r21,r4,736
10007238:	dd800615 	stw	r22,24(sp)
1000723c:	dd000415 	stw	r20,16(sp)
10007240:	dfc00715 	stw	ra,28(sp)
10007244:	dcc00315 	stw	r19,12(sp)
10007248:	dc800215 	stw	r18,8(sp)
1000724c:	dc400115 	stw	r17,4(sp)
10007250:	dc000015 	stw	r16,0(sp)
10007254:	2829883a 	mov	r20,r5
10007258:	002d883a 	mov	r22,zero
1000725c:	00069340 	call	10006934 <__sfp_lock_acquire>
10007260:	a8001426 	beq	r21,zero,100072b4 <_fwalk+0x88>
10007264:	04ffffc4 	movi	r19,-1
10007268:	ac400117 	ldw	r17,4(r21)
1000726c:	ac800217 	ldw	r18,8(r21)
10007270:	8c7fffc4 	addi	r17,r17,-1
10007274:	88000d16 	blt	r17,zero,100072ac <_fwalk+0x80>
10007278:	94000304 	addi	r16,r18,12
1000727c:	94800384 	addi	r18,r18,14
10007280:	80c0000f 	ldh	r3,0(r16)
10007284:	8c7fffc4 	addi	r17,r17,-1
10007288:	813ffd04 	addi	r4,r16,-12
1000728c:	18000426 	beq	r3,zero,100072a0 <_fwalk+0x74>
10007290:	90c0000f 	ldh	r3,0(r18)
10007294:	1cc00226 	beq	r3,r19,100072a0 <_fwalk+0x74>
10007298:	a03ee83a 	callr	r20
1000729c:	b0acb03a 	or	r22,r22,r2
100072a0:	84001a04 	addi	r16,r16,104
100072a4:	94801a04 	addi	r18,r18,104
100072a8:	8cfff51e 	bne	r17,r19,10007280 <__alt_data_end+0xf8007280>
100072ac:	ad400017 	ldw	r21,0(r21)
100072b0:	a83fed1e 	bne	r21,zero,10007268 <__alt_data_end+0xf8007268>
100072b4:	00069380 	call	10006938 <__sfp_lock_release>
100072b8:	b005883a 	mov	r2,r22
100072bc:	dfc00717 	ldw	ra,28(sp)
100072c0:	dd800617 	ldw	r22,24(sp)
100072c4:	dd400517 	ldw	r21,20(sp)
100072c8:	dd000417 	ldw	r20,16(sp)
100072cc:	dcc00317 	ldw	r19,12(sp)
100072d0:	dc800217 	ldw	r18,8(sp)
100072d4:	dc400117 	ldw	r17,4(sp)
100072d8:	dc000017 	ldw	r16,0(sp)
100072dc:	dec00804 	addi	sp,sp,32
100072e0:	f800283a 	ret

100072e4 <_fwalk_reent>:
100072e4:	defff804 	addi	sp,sp,-32
100072e8:	dd400515 	stw	r21,20(sp)
100072ec:	2540b804 	addi	r21,r4,736
100072f0:	dd800615 	stw	r22,24(sp)
100072f4:	dd000415 	stw	r20,16(sp)
100072f8:	dcc00315 	stw	r19,12(sp)
100072fc:	dfc00715 	stw	ra,28(sp)
10007300:	dc800215 	stw	r18,8(sp)
10007304:	dc400115 	stw	r17,4(sp)
10007308:	dc000015 	stw	r16,0(sp)
1000730c:	2027883a 	mov	r19,r4
10007310:	2829883a 	mov	r20,r5
10007314:	002d883a 	mov	r22,zero
10007318:	00069340 	call	10006934 <__sfp_lock_acquire>
1000731c:	a8001326 	beq	r21,zero,1000736c <_fwalk_reent+0x88>
10007320:	04bfffc4 	movi	r18,-1
10007324:	ac400117 	ldw	r17,4(r21)
10007328:	ac000217 	ldw	r16,8(r21)
1000732c:	8c7fffc4 	addi	r17,r17,-1
10007330:	88000c16 	blt	r17,zero,10007364 <_fwalk_reent+0x80>
10007334:	84000304 	addi	r16,r16,12
10007338:	80c0000f 	ldh	r3,0(r16)
1000733c:	8c7fffc4 	addi	r17,r17,-1
10007340:	817ffd04 	addi	r5,r16,-12
10007344:	18000526 	beq	r3,zero,1000735c <_fwalk_reent+0x78>
10007348:	80c0008f 	ldh	r3,2(r16)
1000734c:	9809883a 	mov	r4,r19
10007350:	1c800226 	beq	r3,r18,1000735c <_fwalk_reent+0x78>
10007354:	a03ee83a 	callr	r20
10007358:	b0acb03a 	or	r22,r22,r2
1000735c:	84001a04 	addi	r16,r16,104
10007360:	8cbff51e 	bne	r17,r18,10007338 <__alt_data_end+0xf8007338>
10007364:	ad400017 	ldw	r21,0(r21)
10007368:	a83fee1e 	bne	r21,zero,10007324 <__alt_data_end+0xf8007324>
1000736c:	00069380 	call	10006938 <__sfp_lock_release>
10007370:	b005883a 	mov	r2,r22
10007374:	dfc00717 	ldw	ra,28(sp)
10007378:	dd800617 	ldw	r22,24(sp)
1000737c:	dd400517 	ldw	r21,20(sp)
10007380:	dd000417 	ldw	r20,16(sp)
10007384:	dcc00317 	ldw	r19,12(sp)
10007388:	dc800217 	ldw	r18,8(sp)
1000738c:	dc400117 	ldw	r17,4(sp)
10007390:	dc000017 	ldw	r16,0(sp)
10007394:	dec00804 	addi	sp,sp,32
10007398:	f800283a 	ret

1000739c <_setlocale_r>:
1000739c:	30001b26 	beq	r6,zero,1000740c <_setlocale_r+0x70>
100073a0:	01440074 	movhi	r5,4097
100073a4:	defffe04 	addi	sp,sp,-8
100073a8:	29483004 	addi	r5,r5,8384
100073ac:	3009883a 	mov	r4,r6
100073b0:	dc000015 	stw	r16,0(sp)
100073b4:	dfc00115 	stw	ra,4(sp)
100073b8:	3021883a 	mov	r16,r6
100073bc:	0009a680 	call	10009a68 <strcmp>
100073c0:	1000061e 	bne	r2,zero,100073dc <_setlocale_r+0x40>
100073c4:	00840074 	movhi	r2,4097
100073c8:	10882f04 	addi	r2,r2,8380
100073cc:	dfc00117 	ldw	ra,4(sp)
100073d0:	dc000017 	ldw	r16,0(sp)
100073d4:	dec00204 	addi	sp,sp,8
100073d8:	f800283a 	ret
100073dc:	01440074 	movhi	r5,4097
100073e0:	29482f04 	addi	r5,r5,8380
100073e4:	8009883a 	mov	r4,r16
100073e8:	0009a680 	call	10009a68 <strcmp>
100073ec:	103ff526 	beq	r2,zero,100073c4 <__alt_data_end+0xf80073c4>
100073f0:	01440074 	movhi	r5,4097
100073f4:	29481a04 	addi	r5,r5,8296
100073f8:	8009883a 	mov	r4,r16
100073fc:	0009a680 	call	10009a68 <strcmp>
10007400:	103ff026 	beq	r2,zero,100073c4 <__alt_data_end+0xf80073c4>
10007404:	0005883a 	mov	r2,zero
10007408:	003ff006 	br	100073cc <__alt_data_end+0xf80073cc>
1000740c:	00840074 	movhi	r2,4097
10007410:	10882f04 	addi	r2,r2,8380
10007414:	f800283a 	ret

10007418 <__locale_charset>:
10007418:	00840074 	movhi	r2,4097
1000741c:	1089e204 	addi	r2,r2,10120
10007420:	f800283a 	ret

10007424 <__locale_mb_cur_max>:
10007424:	00840074 	movhi	r2,4097
10007428:	108f7e04 	addi	r2,r2,15864
1000742c:	10800017 	ldw	r2,0(r2)
10007430:	f800283a 	ret

10007434 <__locale_msgcharset>:
10007434:	00840074 	movhi	r2,4097
10007438:	1089da04 	addi	r2,r2,10088
1000743c:	f800283a 	ret

10007440 <__locale_cjk_lang>:
10007440:	0005883a 	mov	r2,zero
10007444:	f800283a 	ret

10007448 <_localeconv_r>:
10007448:	00840074 	movhi	r2,4097
1000744c:	1089ea04 	addi	r2,r2,10152
10007450:	f800283a 	ret

10007454 <setlocale>:
10007454:	00c40074 	movhi	r3,4097
10007458:	18cf7d04 	addi	r3,r3,15860
1000745c:	2005883a 	mov	r2,r4
10007460:	19000017 	ldw	r4,0(r3)
10007464:	280d883a 	mov	r6,r5
10007468:	100b883a 	mov	r5,r2
1000746c:	000739c1 	jmpi	1000739c <_setlocale_r>

10007470 <localeconv>:
10007470:	00840074 	movhi	r2,4097
10007474:	1089ea04 	addi	r2,r2,10152
10007478:	f800283a 	ret

1000747c <__smakebuf_r>:
1000747c:	2880030b 	ldhu	r2,12(r5)
10007480:	10c0008c 	andi	r3,r2,2
10007484:	1800401e 	bne	r3,zero,10007588 <__smakebuf_r+0x10c>
10007488:	deffec04 	addi	sp,sp,-80
1000748c:	dc000f15 	stw	r16,60(sp)
10007490:	2821883a 	mov	r16,r5
10007494:	2940038f 	ldh	r5,14(r5)
10007498:	dc401015 	stw	r17,64(sp)
1000749c:	dfc01315 	stw	ra,76(sp)
100074a0:	dcc01215 	stw	r19,72(sp)
100074a4:	dc801115 	stw	r18,68(sp)
100074a8:	2023883a 	mov	r17,r4
100074ac:	28001b16 	blt	r5,zero,1000751c <__smakebuf_r+0xa0>
100074b0:	d80d883a 	mov	r6,sp
100074b4:	000b4e00 	call	1000b4e0 <_fstat_r>
100074b8:	10001716 	blt	r2,zero,10007518 <__smakebuf_r+0x9c>
100074bc:	d8800117 	ldw	r2,4(sp)
100074c0:	00e00014 	movui	r3,32768
100074c4:	10bc000c 	andi	r2,r2,61440
100074c8:	10c03726 	beq	r2,r3,100075a8 <__smakebuf_r+0x12c>
100074cc:	80c0030b 	ldhu	r3,12(r16)
100074d0:	18c20014 	ori	r3,r3,2048
100074d4:	80c0030d 	sth	r3,12(r16)
100074d8:	00c80004 	movi	r3,8192
100074dc:	10c03c1e 	bne	r2,r3,100075d0 <__smakebuf_r+0x154>
100074e0:	8140038f 	ldh	r5,14(r16)
100074e4:	8809883a 	mov	r4,r17
100074e8:	000b5380 	call	1000b538 <_isatty_r>
100074ec:	10004e26 	beq	r2,zero,10007628 <__smakebuf_r+0x1ac>
100074f0:	8080030b 	ldhu	r2,12(r16)
100074f4:	04c00044 	movi	r19,1
100074f8:	80c010c4 	addi	r3,r16,67
100074fc:	14c4b03a 	or	r2,r2,r19
10007500:	8080030d 	sth	r2,12(r16)
10007504:	80c00015 	stw	r3,0(r16)
10007508:	80c00415 	stw	r3,16(r16)
1000750c:	84c00515 	stw	r19,20(r16)
10007510:	04810004 	movi	r18,1024
10007514:	00000706 	br	10007534 <__smakebuf_r+0xb8>
10007518:	8080030b 	ldhu	r2,12(r16)
1000751c:	10c0200c 	andi	r3,r2,128
10007520:	18001f1e 	bne	r3,zero,100075a0 <__smakebuf_r+0x124>
10007524:	04810004 	movi	r18,1024
10007528:	10820014 	ori	r2,r2,2048
1000752c:	8080030d 	sth	r2,12(r16)
10007530:	0027883a 	mov	r19,zero
10007534:	8809883a 	mov	r4,r17
10007538:	900b883a 	mov	r5,r18
1000753c:	00076340 	call	10007634 <_malloc_r>
10007540:	10002e26 	beq	r2,zero,100075fc <__smakebuf_r+0x180>
10007544:	80c0030b 	ldhu	r3,12(r16)
10007548:	01040034 	movhi	r4,4096
1000754c:	21197404 	addi	r4,r4,26064
10007550:	89000f15 	stw	r4,60(r17)
10007554:	18c02014 	ori	r3,r3,128
10007558:	80c0030d 	sth	r3,12(r16)
1000755c:	80800015 	stw	r2,0(r16)
10007560:	80800415 	stw	r2,16(r16)
10007564:	84800515 	stw	r18,20(r16)
10007568:	98001c1e 	bne	r19,zero,100075dc <__smakebuf_r+0x160>
1000756c:	dfc01317 	ldw	ra,76(sp)
10007570:	dcc01217 	ldw	r19,72(sp)
10007574:	dc801117 	ldw	r18,68(sp)
10007578:	dc401017 	ldw	r17,64(sp)
1000757c:	dc000f17 	ldw	r16,60(sp)
10007580:	dec01404 	addi	sp,sp,80
10007584:	f800283a 	ret
10007588:	288010c4 	addi	r2,r5,67
1000758c:	28800015 	stw	r2,0(r5)
10007590:	28800415 	stw	r2,16(r5)
10007594:	00800044 	movi	r2,1
10007598:	28800515 	stw	r2,20(r5)
1000759c:	f800283a 	ret
100075a0:	04801004 	movi	r18,64
100075a4:	003fe006 	br	10007528 <__alt_data_end+0xf8007528>
100075a8:	81000a17 	ldw	r4,40(r16)
100075ac:	00c40074 	movhi	r3,4097
100075b0:	18e68104 	addi	r3,r3,-26108
100075b4:	20ffc51e 	bne	r4,r3,100074cc <__alt_data_end+0xf80074cc>
100075b8:	80c0030b 	ldhu	r3,12(r16)
100075bc:	01010004 	movi	r4,1024
100075c0:	81001315 	stw	r4,76(r16)
100075c4:	1906b03a 	or	r3,r3,r4
100075c8:	80c0030d 	sth	r3,12(r16)
100075cc:	003fc206 	br	100074d8 <__alt_data_end+0xf80074d8>
100075d0:	0027883a 	mov	r19,zero
100075d4:	04810004 	movi	r18,1024
100075d8:	003fd606 	br	10007534 <__alt_data_end+0xf8007534>
100075dc:	8140038f 	ldh	r5,14(r16)
100075e0:	8809883a 	mov	r4,r17
100075e4:	000b5380 	call	1000b538 <_isatty_r>
100075e8:	103fe026 	beq	r2,zero,1000756c <__alt_data_end+0xf800756c>
100075ec:	8080030b 	ldhu	r2,12(r16)
100075f0:	10800054 	ori	r2,r2,1
100075f4:	8080030d 	sth	r2,12(r16)
100075f8:	003fdc06 	br	1000756c <__alt_data_end+0xf800756c>
100075fc:	8080030b 	ldhu	r2,12(r16)
10007600:	10c0800c 	andi	r3,r2,512
10007604:	183fd91e 	bne	r3,zero,1000756c <__alt_data_end+0xf800756c>
10007608:	10800094 	ori	r2,r2,2
1000760c:	80c010c4 	addi	r3,r16,67
10007610:	8080030d 	sth	r2,12(r16)
10007614:	00800044 	movi	r2,1
10007618:	80c00015 	stw	r3,0(r16)
1000761c:	80c00415 	stw	r3,16(r16)
10007620:	80800515 	stw	r2,20(r16)
10007624:	003fd106 	br	1000756c <__alt_data_end+0xf800756c>
10007628:	04c00044 	movi	r19,1
1000762c:	04810004 	movi	r18,1024
10007630:	003fc006 	br	10007534 <__alt_data_end+0xf8007534>

10007634 <_malloc_r>:
10007634:	defff504 	addi	sp,sp,-44
10007638:	dc800315 	stw	r18,12(sp)
1000763c:	dfc00a15 	stw	ra,40(sp)
10007640:	df000915 	stw	fp,36(sp)
10007644:	ddc00815 	stw	r23,32(sp)
10007648:	dd800715 	stw	r22,28(sp)
1000764c:	dd400615 	stw	r21,24(sp)
10007650:	dd000515 	stw	r20,20(sp)
10007654:	dcc00415 	stw	r19,16(sp)
10007658:	dc400215 	stw	r17,8(sp)
1000765c:	dc000115 	stw	r16,4(sp)
10007660:	288002c4 	addi	r2,r5,11
10007664:	00c00584 	movi	r3,22
10007668:	2025883a 	mov	r18,r4
1000766c:	18802a2e 	bgeu	r3,r2,10007718 <_malloc_r+0xe4>
10007670:	047ffe04 	movi	r17,-8
10007674:	1462703a 	and	r17,r2,r17
10007678:	88009e16 	blt	r17,zero,100078f4 <_malloc_r+0x2c0>
1000767c:	89409d36 	bltu	r17,r5,100078f4 <_malloc_r+0x2c0>
10007680:	000f64c0 	call	1000f64c <__malloc_lock>
10007684:	00807dc4 	movi	r2,503
10007688:	14402736 	bltu	r2,r17,10007728 <_malloc_r+0xf4>
1000768c:	8806d0fa 	srli	r3,r17,3
10007690:	04c40074 	movhi	r19,4097
10007694:	9cc9f804 	addi	r19,r19,10208
10007698:	18c5883a 	add	r2,r3,r3
1000769c:	1085883a 	add	r2,r2,r2
100076a0:	1085883a 	add	r2,r2,r2
100076a4:	9885883a 	add	r2,r19,r2
100076a8:	14000317 	ldw	r16,12(r2)
100076ac:	80814a26 	beq	r16,r2,10007bd8 <_malloc_r+0x5a4>
100076b0:	80c00117 	ldw	r3,4(r16)
100076b4:	81000317 	ldw	r4,12(r16)
100076b8:	00bfff04 	movi	r2,-4
100076bc:	1884703a 	and	r2,r3,r2
100076c0:	81400217 	ldw	r5,8(r16)
100076c4:	8085883a 	add	r2,r16,r2
100076c8:	10c00117 	ldw	r3,4(r2)
100076cc:	29000315 	stw	r4,12(r5)
100076d0:	21400215 	stw	r5,8(r4)
100076d4:	18c00054 	ori	r3,r3,1
100076d8:	10c00115 	stw	r3,4(r2)
100076dc:	9009883a 	mov	r4,r18
100076e0:	000f66c0 	call	1000f66c <__malloc_unlock>
100076e4:	80800204 	addi	r2,r16,8
100076e8:	dfc00a17 	ldw	ra,40(sp)
100076ec:	df000917 	ldw	fp,36(sp)
100076f0:	ddc00817 	ldw	r23,32(sp)
100076f4:	dd800717 	ldw	r22,28(sp)
100076f8:	dd400617 	ldw	r21,24(sp)
100076fc:	dd000517 	ldw	r20,20(sp)
10007700:	dcc00417 	ldw	r19,16(sp)
10007704:	dc800317 	ldw	r18,12(sp)
10007708:	dc400217 	ldw	r17,8(sp)
1000770c:	dc000117 	ldw	r16,4(sp)
10007710:	dec00b04 	addi	sp,sp,44
10007714:	f800283a 	ret
10007718:	04400404 	movi	r17,16
1000771c:	89407536 	bltu	r17,r5,100078f4 <_malloc_r+0x2c0>
10007720:	000f64c0 	call	1000f64c <__malloc_lock>
10007724:	003fd906 	br	1000768c <__alt_data_end+0xf800768c>
10007728:	8806d27a 	srli	r3,r17,9
1000772c:	18007526 	beq	r3,zero,10007904 <_malloc_r+0x2d0>
10007730:	00800104 	movi	r2,4
10007734:	10c0ef36 	bltu	r2,r3,10007af4 <_malloc_r+0x4c0>
10007738:	8806d1ba 	srli	r3,r17,6
1000773c:	19c00e04 	addi	r7,r3,56
10007740:	39cb883a 	add	r5,r7,r7
10007744:	04c40074 	movhi	r19,4097
10007748:	294b883a 	add	r5,r5,r5
1000774c:	9cc9f804 	addi	r19,r19,10208
10007750:	294b883a 	add	r5,r5,r5
10007754:	994b883a 	add	r5,r19,r5
10007758:	2c000317 	ldw	r16,12(r5)
1000775c:	2c000e26 	beq	r5,r16,10007798 <_malloc_r+0x164>
10007760:	80800117 	ldw	r2,4(r16)
10007764:	01bfff04 	movi	r6,-4
10007768:	010003c4 	movi	r4,15
1000776c:	1184703a 	and	r2,r2,r6
10007770:	1447c83a 	sub	r3,r2,r17
10007774:	20c00716 	blt	r4,r3,10007794 <_malloc_r+0x160>
10007778:	1800650e 	bge	r3,zero,10007910 <_malloc_r+0x2dc>
1000777c:	84000317 	ldw	r16,12(r16)
10007780:	2c000526 	beq	r5,r16,10007798 <_malloc_r+0x164>
10007784:	80800117 	ldw	r2,4(r16)
10007788:	1184703a 	and	r2,r2,r6
1000778c:	1447c83a 	sub	r3,r2,r17
10007790:	20fff90e 	bge	r4,r3,10007778 <__alt_data_end+0xf8007778>
10007794:	39ffffc4 	addi	r7,r7,-1
10007798:	38c00044 	addi	r3,r7,1
1000779c:	01840074 	movhi	r6,4097
100077a0:	9c000417 	ldw	r16,16(r19)
100077a4:	3189f804 	addi	r6,r6,10208
100077a8:	32400204 	addi	r9,r6,8
100077ac:	82410326 	beq	r16,r9,10007bbc <_malloc_r+0x588>
100077b0:	81000117 	ldw	r4,4(r16)
100077b4:	00bfff04 	movi	r2,-4
100077b8:	208e703a 	and	r7,r4,r2
100077bc:	3c45c83a 	sub	r2,r7,r17
100077c0:	010003c4 	movi	r4,15
100077c4:	2080ee16 	blt	r4,r2,10007b80 <_malloc_r+0x54c>
100077c8:	32400515 	stw	r9,20(r6)
100077cc:	32400415 	stw	r9,16(r6)
100077d0:	1000510e 	bge	r2,zero,10007918 <_malloc_r+0x2e4>
100077d4:	00807fc4 	movi	r2,511
100077d8:	11c0ce36 	bltu	r2,r7,10007b14 <_malloc_r+0x4e0>
100077dc:	3808d0fa 	srli	r4,r7,3
100077e0:	01c00044 	movi	r7,1
100077e4:	30800117 	ldw	r2,4(r6)
100077e8:	210b883a 	add	r5,r4,r4
100077ec:	294b883a 	add	r5,r5,r5
100077f0:	2009d0ba 	srai	r4,r4,2
100077f4:	294b883a 	add	r5,r5,r5
100077f8:	298b883a 	add	r5,r5,r6
100077fc:	2a000217 	ldw	r8,8(r5)
10007800:	3908983a 	sll	r4,r7,r4
10007804:	81400315 	stw	r5,12(r16)
10007808:	82000215 	stw	r8,8(r16)
1000780c:	2088b03a 	or	r4,r4,r2
10007810:	2c000215 	stw	r16,8(r5)
10007814:	31000115 	stw	r4,4(r6)
10007818:	44000315 	stw	r16,12(r8)
1000781c:	1805d0ba 	srai	r2,r3,2
10007820:	01400044 	movi	r5,1
10007824:	288a983a 	sll	r5,r5,r2
10007828:	21404336 	bltu	r4,r5,10007938 <_malloc_r+0x304>
1000782c:	2144703a 	and	r2,r4,r5
10007830:	10000a1e 	bne	r2,zero,1000785c <_malloc_r+0x228>
10007834:	00bfff04 	movi	r2,-4
10007838:	294b883a 	add	r5,r5,r5
1000783c:	1886703a 	and	r3,r3,r2
10007840:	2144703a 	and	r2,r4,r5
10007844:	18c00104 	addi	r3,r3,4
10007848:	1000041e 	bne	r2,zero,1000785c <_malloc_r+0x228>
1000784c:	294b883a 	add	r5,r5,r5
10007850:	2144703a 	and	r2,r4,r5
10007854:	18c00104 	addi	r3,r3,4
10007858:	103ffc26 	beq	r2,zero,1000784c <__alt_data_end+0xf800784c>
1000785c:	023fff04 	movi	r8,-4
10007860:	01c003c4 	movi	r7,15
10007864:	18c5883a 	add	r2,r3,r3
10007868:	1085883a 	add	r2,r2,r2
1000786c:	1085883a 	add	r2,r2,r2
10007870:	9895883a 	add	r10,r19,r2
10007874:	52c00304 	addi	r11,r10,12
10007878:	1819883a 	mov	r12,r3
1000787c:	5c000017 	ldw	r16,0(r11)
10007880:	59bffd04 	addi	r6,r11,-12
10007884:	8180041e 	bne	r16,r6,10007898 <_malloc_r+0x264>
10007888:	0000ce06 	br	10007bc4 <_malloc_r+0x590>
1000788c:	2000d70e 	bge	r4,zero,10007bec <_malloc_r+0x5b8>
10007890:	84000317 	ldw	r16,12(r16)
10007894:	8180cb26 	beq	r16,r6,10007bc4 <_malloc_r+0x590>
10007898:	80800117 	ldw	r2,4(r16)
1000789c:	1204703a 	and	r2,r2,r8
100078a0:	1449c83a 	sub	r4,r2,r17
100078a4:	393ff90e 	bge	r7,r4,1000788c <__alt_data_end+0xf800788c>
100078a8:	80800317 	ldw	r2,12(r16)
100078ac:	80c00217 	ldw	r3,8(r16)
100078b0:	89400054 	ori	r5,r17,1
100078b4:	81400115 	stw	r5,4(r16)
100078b8:	18800315 	stw	r2,12(r3)
100078bc:	10c00215 	stw	r3,8(r2)
100078c0:	8463883a 	add	r17,r16,r17
100078c4:	9c400515 	stw	r17,20(r19)
100078c8:	9c400415 	stw	r17,16(r19)
100078cc:	20800054 	ori	r2,r4,1
100078d0:	88800115 	stw	r2,4(r17)
100078d4:	8a400315 	stw	r9,12(r17)
100078d8:	8a400215 	stw	r9,8(r17)
100078dc:	8923883a 	add	r17,r17,r4
100078e0:	89000015 	stw	r4,0(r17)
100078e4:	9009883a 	mov	r4,r18
100078e8:	000f66c0 	call	1000f66c <__malloc_unlock>
100078ec:	80800204 	addi	r2,r16,8
100078f0:	003f7d06 	br	100076e8 <__alt_data_end+0xf80076e8>
100078f4:	00800304 	movi	r2,12
100078f8:	90800015 	stw	r2,0(r18)
100078fc:	0005883a 	mov	r2,zero
10007900:	003f7906 	br	100076e8 <__alt_data_end+0xf80076e8>
10007904:	01401f84 	movi	r5,126
10007908:	01c00fc4 	movi	r7,63
1000790c:	003f8d06 	br	10007744 <__alt_data_end+0xf8007744>
10007910:	81000317 	ldw	r4,12(r16)
10007914:	003f6a06 	br	100076c0 <__alt_data_end+0xf80076c0>
10007918:	81c5883a 	add	r2,r16,r7
1000791c:	10c00117 	ldw	r3,4(r2)
10007920:	9009883a 	mov	r4,r18
10007924:	18c00054 	ori	r3,r3,1
10007928:	10c00115 	stw	r3,4(r2)
1000792c:	000f66c0 	call	1000f66c <__malloc_unlock>
10007930:	80800204 	addi	r2,r16,8
10007934:	003f6c06 	br	100076e8 <__alt_data_end+0xf80076e8>
10007938:	9c000217 	ldw	r16,8(r19)
1000793c:	00bfff04 	movi	r2,-4
10007940:	85800117 	ldw	r22,4(r16)
10007944:	b0ac703a 	and	r22,r22,r2
10007948:	b4400336 	bltu	r22,r17,10007958 <_malloc_r+0x324>
1000794c:	b445c83a 	sub	r2,r22,r17
10007950:	00c003c4 	movi	r3,15
10007954:	18805d16 	blt	r3,r2,10007acc <_malloc_r+0x498>
10007958:	05c40074 	movhi	r23,4097
1000795c:	00840074 	movhi	r2,4097
10007960:	bdcf7f04 	addi	r23,r23,15868
10007964:	10964d04 	addi	r2,r2,22836
10007968:	15400017 	ldw	r21,0(r2)
1000796c:	b9000017 	ldw	r4,0(r23)
10007970:	00ffffc4 	movi	r3,-1
10007974:	858d883a 	add	r6,r16,r22
10007978:	8d6b883a 	add	r21,r17,r21
1000797c:	20c0e426 	beq	r4,r3,10007d10 <_malloc_r+0x6dc>
10007980:	ad4403c4 	addi	r21,r21,4111
10007984:	00fc0004 	movi	r3,-4096
10007988:	a8ea703a 	and	r21,r21,r3
1000798c:	9009883a 	mov	r4,r18
10007990:	a80b883a 	mov	r5,r21
10007994:	d9800015 	stw	r6,0(sp)
10007998:	00098d80 	call	100098d8 <_sbrk_r>
1000799c:	00ffffc4 	movi	r3,-1
100079a0:	1029883a 	mov	r20,r2
100079a4:	d9800017 	ldw	r6,0(sp)
100079a8:	10c0a426 	beq	r2,r3,10007c3c <_malloc_r+0x608>
100079ac:	1180a236 	bltu	r2,r6,10007c38 <_malloc_r+0x604>
100079b0:	07040074 	movhi	fp,4097
100079b4:	e7165a04 	addi	fp,fp,22888
100079b8:	e0c00017 	ldw	r3,0(fp)
100079bc:	a8c7883a 	add	r3,r21,r3
100079c0:	e0c00015 	stw	r3,0(fp)
100079c4:	3500da26 	beq	r6,r20,10007d30 <_malloc_r+0x6fc>
100079c8:	b9000017 	ldw	r4,0(r23)
100079cc:	00bfffc4 	movi	r2,-1
100079d0:	2080e426 	beq	r4,r2,10007d64 <_malloc_r+0x730>
100079d4:	a185c83a 	sub	r2,r20,r6
100079d8:	1885883a 	add	r2,r3,r2
100079dc:	e0800015 	stw	r2,0(fp)
100079e0:	a0c001cc 	andi	r3,r20,7
100079e4:	1800b526 	beq	r3,zero,10007cbc <_malloc_r+0x688>
100079e8:	a0e9c83a 	sub	r20,r20,r3
100079ec:	00840204 	movi	r2,4104
100079f0:	a5000204 	addi	r20,r20,8
100079f4:	10c7c83a 	sub	r3,r2,r3
100079f8:	a545883a 	add	r2,r20,r21
100079fc:	1083ffcc 	andi	r2,r2,4095
10007a00:	18abc83a 	sub	r21,r3,r2
10007a04:	9009883a 	mov	r4,r18
10007a08:	a80b883a 	mov	r5,r21
10007a0c:	00098d80 	call	100098d8 <_sbrk_r>
10007a10:	00ffffc4 	movi	r3,-1
10007a14:	10c0d026 	beq	r2,r3,10007d58 <_malloc_r+0x724>
10007a18:	1507c83a 	sub	r3,r2,r20
10007a1c:	a8c7883a 	add	r3,r21,r3
10007a20:	18c00054 	ori	r3,r3,1
10007a24:	e0800017 	ldw	r2,0(fp)
10007a28:	9d000215 	stw	r20,8(r19)
10007a2c:	a0c00115 	stw	r3,4(r20)
10007a30:	a887883a 	add	r3,r21,r2
10007a34:	e0c00015 	stw	r3,0(fp)
10007a38:	84c00e26 	beq	r16,r19,10007a74 <_malloc_r+0x440>
10007a3c:	018003c4 	movi	r6,15
10007a40:	3580a02e 	bgeu	r6,r22,10007cc4 <_malloc_r+0x690>
10007a44:	81400117 	ldw	r5,4(r16)
10007a48:	013ffe04 	movi	r4,-8
10007a4c:	b0bffd04 	addi	r2,r22,-12
10007a50:	1104703a 	and	r2,r2,r4
10007a54:	2900004c 	andi	r4,r5,1
10007a58:	1108b03a 	or	r4,r2,r4
10007a5c:	81000115 	stw	r4,4(r16)
10007a60:	01400144 	movi	r5,5
10007a64:	8089883a 	add	r4,r16,r2
10007a68:	21400115 	stw	r5,4(r4)
10007a6c:	21400215 	stw	r5,8(r4)
10007a70:	3080c036 	bltu	r6,r2,10007d74 <_malloc_r+0x740>
10007a74:	00840074 	movhi	r2,4097
10007a78:	10964c04 	addi	r2,r2,22832
10007a7c:	11000017 	ldw	r4,0(r2)
10007a80:	20c0012e 	bgeu	r4,r3,10007a88 <_malloc_r+0x454>
10007a84:	10c00015 	stw	r3,0(r2)
10007a88:	00840074 	movhi	r2,4097
10007a8c:	10964b04 	addi	r2,r2,22828
10007a90:	11000017 	ldw	r4,0(r2)
10007a94:	9c000217 	ldw	r16,8(r19)
10007a98:	20c0012e 	bgeu	r4,r3,10007aa0 <_malloc_r+0x46c>
10007a9c:	10c00015 	stw	r3,0(r2)
10007aa0:	80c00117 	ldw	r3,4(r16)
10007aa4:	00bfff04 	movi	r2,-4
10007aa8:	1886703a 	and	r3,r3,r2
10007aac:	1c45c83a 	sub	r2,r3,r17
10007ab0:	1c400236 	bltu	r3,r17,10007abc <_malloc_r+0x488>
10007ab4:	00c003c4 	movi	r3,15
10007ab8:	18800416 	blt	r3,r2,10007acc <_malloc_r+0x498>
10007abc:	9009883a 	mov	r4,r18
10007ac0:	000f66c0 	call	1000f66c <__malloc_unlock>
10007ac4:	0005883a 	mov	r2,zero
10007ac8:	003f0706 	br	100076e8 <__alt_data_end+0xf80076e8>
10007acc:	88c00054 	ori	r3,r17,1
10007ad0:	80c00115 	stw	r3,4(r16)
10007ad4:	8463883a 	add	r17,r16,r17
10007ad8:	10800054 	ori	r2,r2,1
10007adc:	9c400215 	stw	r17,8(r19)
10007ae0:	88800115 	stw	r2,4(r17)
10007ae4:	9009883a 	mov	r4,r18
10007ae8:	000f66c0 	call	1000f66c <__malloc_unlock>
10007aec:	80800204 	addi	r2,r16,8
10007af0:	003efd06 	br	100076e8 <__alt_data_end+0xf80076e8>
10007af4:	00800504 	movi	r2,20
10007af8:	10c0482e 	bgeu	r2,r3,10007c1c <_malloc_r+0x5e8>
10007afc:	00801504 	movi	r2,84
10007b00:	10c06836 	bltu	r2,r3,10007ca4 <_malloc_r+0x670>
10007b04:	8806d33a 	srli	r3,r17,12
10007b08:	19c01b84 	addi	r7,r3,110
10007b0c:	39cb883a 	add	r5,r7,r7
10007b10:	003f0c06 	br	10007744 <__alt_data_end+0xf8007744>
10007b14:	3804d27a 	srli	r2,r7,9
10007b18:	01000104 	movi	r4,4
10007b1c:	2080422e 	bgeu	r4,r2,10007c28 <_malloc_r+0x5f4>
10007b20:	01000504 	movi	r4,20
10007b24:	20807c36 	bltu	r4,r2,10007d18 <_malloc_r+0x6e4>
10007b28:	110016c4 	addi	r4,r2,91
10007b2c:	210b883a 	add	r5,r4,r4
10007b30:	294b883a 	add	r5,r5,r5
10007b34:	294b883a 	add	r5,r5,r5
10007b38:	994b883a 	add	r5,r19,r5
10007b3c:	28800217 	ldw	r2,8(r5)
10007b40:	02040074 	movhi	r8,4097
10007b44:	4209f804 	addi	r8,r8,10208
10007b48:	11406326 	beq	r2,r5,10007cd8 <_malloc_r+0x6a4>
10007b4c:	01bfff04 	movi	r6,-4
10007b50:	11000117 	ldw	r4,4(r2)
10007b54:	2188703a 	and	r4,r4,r6
10007b58:	3900022e 	bgeu	r7,r4,10007b64 <_malloc_r+0x530>
10007b5c:	10800217 	ldw	r2,8(r2)
10007b60:	28bffb1e 	bne	r5,r2,10007b50 <__alt_data_end+0xf8007b50>
10007b64:	11800317 	ldw	r6,12(r2)
10007b68:	99000117 	ldw	r4,4(r19)
10007b6c:	81800315 	stw	r6,12(r16)
10007b70:	80800215 	stw	r2,8(r16)
10007b74:	34000215 	stw	r16,8(r6)
10007b78:	14000315 	stw	r16,12(r2)
10007b7c:	003f2706 	br	1000781c <__alt_data_end+0xf800781c>
10007b80:	88c00054 	ori	r3,r17,1
10007b84:	80c00115 	stw	r3,4(r16)
10007b88:	8463883a 	add	r17,r16,r17
10007b8c:	34400515 	stw	r17,20(r6)
10007b90:	34400415 	stw	r17,16(r6)
10007b94:	10c00054 	ori	r3,r2,1
10007b98:	8a400315 	stw	r9,12(r17)
10007b9c:	8a400215 	stw	r9,8(r17)
10007ba0:	88c00115 	stw	r3,4(r17)
10007ba4:	88a3883a 	add	r17,r17,r2
10007ba8:	88800015 	stw	r2,0(r17)
10007bac:	9009883a 	mov	r4,r18
10007bb0:	000f66c0 	call	1000f66c <__malloc_unlock>
10007bb4:	80800204 	addi	r2,r16,8
10007bb8:	003ecb06 	br	100076e8 <__alt_data_end+0xf80076e8>
10007bbc:	31000117 	ldw	r4,4(r6)
10007bc0:	003f1606 	br	1000781c <__alt_data_end+0xf800781c>
10007bc4:	63000044 	addi	r12,r12,1
10007bc8:	608000cc 	andi	r2,r12,3
10007bcc:	5ac00204 	addi	r11,r11,8
10007bd0:	103f2a1e 	bne	r2,zero,1000787c <__alt_data_end+0xf800787c>
10007bd4:	00002106 	br	10007c5c <_malloc_r+0x628>
10007bd8:	80800204 	addi	r2,r16,8
10007bdc:	84000517 	ldw	r16,20(r16)
10007be0:	143eb31e 	bne	r2,r16,100076b0 <__alt_data_end+0xf80076b0>
10007be4:	18c00084 	addi	r3,r3,2
10007be8:	003eec06 	br	1000779c <__alt_data_end+0xf800779c>
10007bec:	8085883a 	add	r2,r16,r2
10007bf0:	10c00117 	ldw	r3,4(r2)
10007bf4:	81000317 	ldw	r4,12(r16)
10007bf8:	81400217 	ldw	r5,8(r16)
10007bfc:	18c00054 	ori	r3,r3,1
10007c00:	10c00115 	stw	r3,4(r2)
10007c04:	29000315 	stw	r4,12(r5)
10007c08:	21400215 	stw	r5,8(r4)
10007c0c:	9009883a 	mov	r4,r18
10007c10:	000f66c0 	call	1000f66c <__malloc_unlock>
10007c14:	80800204 	addi	r2,r16,8
10007c18:	003eb306 	br	100076e8 <__alt_data_end+0xf80076e8>
10007c1c:	19c016c4 	addi	r7,r3,91
10007c20:	39cb883a 	add	r5,r7,r7
10007c24:	003ec706 	br	10007744 <__alt_data_end+0xf8007744>
10007c28:	3804d1ba 	srli	r2,r7,6
10007c2c:	11000e04 	addi	r4,r2,56
10007c30:	210b883a 	add	r5,r4,r4
10007c34:	003fbe06 	br	10007b30 <__alt_data_end+0xf8007b30>
10007c38:	84ff5d26 	beq	r16,r19,100079b0 <__alt_data_end+0xf80079b0>
10007c3c:	9c000217 	ldw	r16,8(r19)
10007c40:	00bfff04 	movi	r2,-4
10007c44:	80c00117 	ldw	r3,4(r16)
10007c48:	1886703a 	and	r3,r3,r2
10007c4c:	003f9706 	br	10007aac <__alt_data_end+0xf8007aac>
10007c50:	52800017 	ldw	r10,0(r10)
10007c54:	18ffffc4 	addi	r3,r3,-1
10007c58:	50805c1e 	bne	r10,r2,10007dcc <_malloc_r+0x798>
10007c5c:	190000cc 	andi	r4,r3,3
10007c60:	50bffe04 	addi	r2,r10,-8
10007c64:	203ffa1e 	bne	r4,zero,10007c50 <__alt_data_end+0xf8007c50>
10007c68:	98800117 	ldw	r2,4(r19)
10007c6c:	0146303a 	nor	r3,zero,r5
10007c70:	1884703a 	and	r2,r3,r2
10007c74:	98800115 	stw	r2,4(r19)
10007c78:	294b883a 	add	r5,r5,r5
10007c7c:	117f2e36 	bltu	r2,r5,10007938 <__alt_data_end+0xf8007938>
10007c80:	283f2d26 	beq	r5,zero,10007938 <__alt_data_end+0xf8007938>
10007c84:	1146703a 	and	r3,r2,r5
10007c88:	1800521e 	bne	r3,zero,10007dd4 <_malloc_r+0x7a0>
10007c8c:	6007883a 	mov	r3,r12
10007c90:	294b883a 	add	r5,r5,r5
10007c94:	1148703a 	and	r4,r2,r5
10007c98:	18c00104 	addi	r3,r3,4
10007c9c:	203ffc26 	beq	r4,zero,10007c90 <__alt_data_end+0xf8007c90>
10007ca0:	003ef006 	br	10007864 <__alt_data_end+0xf8007864>
10007ca4:	00805504 	movi	r2,340
10007ca8:	10c01336 	bltu	r2,r3,10007cf8 <_malloc_r+0x6c4>
10007cac:	8806d3fa 	srli	r3,r17,15
10007cb0:	19c01dc4 	addi	r7,r3,119
10007cb4:	39cb883a 	add	r5,r7,r7
10007cb8:	003ea206 	br	10007744 <__alt_data_end+0xf8007744>
10007cbc:	00c40004 	movi	r3,4096
10007cc0:	003f4d06 	br	100079f8 <__alt_data_end+0xf80079f8>
10007cc4:	00800044 	movi	r2,1
10007cc8:	a0800115 	stw	r2,4(r20)
10007ccc:	a021883a 	mov	r16,r20
10007cd0:	0007883a 	mov	r3,zero
10007cd4:	003f7506 	br	10007aac <__alt_data_end+0xf8007aac>
10007cd8:	200bd0ba 	srai	r5,r4,2
10007cdc:	01800044 	movi	r6,1
10007ce0:	41000117 	ldw	r4,4(r8)
10007ce4:	314a983a 	sll	r5,r6,r5
10007ce8:	100d883a 	mov	r6,r2
10007cec:	2908b03a 	or	r4,r5,r4
10007cf0:	41000115 	stw	r4,4(r8)
10007cf4:	003f9d06 	br	10007b6c <__alt_data_end+0xf8007b6c>
10007cf8:	00815504 	movi	r2,1364
10007cfc:	10c01336 	bltu	r2,r3,10007d4c <_malloc_r+0x718>
10007d00:	8806d4ba 	srli	r3,r17,18
10007d04:	19c01f04 	addi	r7,r3,124
10007d08:	39cb883a 	add	r5,r7,r7
10007d0c:	003e8d06 	br	10007744 <__alt_data_end+0xf8007744>
10007d10:	ad400404 	addi	r21,r21,16
10007d14:	003f1d06 	br	1000798c <__alt_data_end+0xf800798c>
10007d18:	01001504 	movi	r4,84
10007d1c:	20801c36 	bltu	r4,r2,10007d90 <_malloc_r+0x75c>
10007d20:	3804d33a 	srli	r2,r7,12
10007d24:	11001b84 	addi	r4,r2,110
10007d28:	210b883a 	add	r5,r4,r4
10007d2c:	003f8006 	br	10007b30 <__alt_data_end+0xf8007b30>
10007d30:	3083ffcc 	andi	r2,r6,4095
10007d34:	103f241e 	bne	r2,zero,100079c8 <__alt_data_end+0xf80079c8>
10007d38:	99000217 	ldw	r4,8(r19)
10007d3c:	ad85883a 	add	r2,r21,r22
10007d40:	10800054 	ori	r2,r2,1
10007d44:	20800115 	stw	r2,4(r4)
10007d48:	003f4a06 	br	10007a74 <__alt_data_end+0xf8007a74>
10007d4c:	01403f04 	movi	r5,252
10007d50:	01c01f84 	movi	r7,126
10007d54:	003e7b06 	br	10007744 <__alt_data_end+0xf8007744>
10007d58:	00c00044 	movi	r3,1
10007d5c:	002b883a 	mov	r21,zero
10007d60:	003f3006 	br	10007a24 <__alt_data_end+0xf8007a24>
10007d64:	00840074 	movhi	r2,4097
10007d68:	108f7f04 	addi	r2,r2,15868
10007d6c:	15000015 	stw	r20,0(r2)
10007d70:	003f1b06 	br	100079e0 <__alt_data_end+0xf80079e0>
10007d74:	9009883a 	mov	r4,r18
10007d78:	81400204 	addi	r5,r16,8
10007d7c:	0006a980 	call	10006a98 <_free_r>
10007d80:	00840074 	movhi	r2,4097
10007d84:	10965a04 	addi	r2,r2,22888
10007d88:	10c00017 	ldw	r3,0(r2)
10007d8c:	003f3906 	br	10007a74 <__alt_data_end+0xf8007a74>
10007d90:	01005504 	movi	r4,340
10007d94:	20800436 	bltu	r4,r2,10007da8 <_malloc_r+0x774>
10007d98:	3804d3fa 	srli	r2,r7,15
10007d9c:	11001dc4 	addi	r4,r2,119
10007da0:	210b883a 	add	r5,r4,r4
10007da4:	003f6206 	br	10007b30 <__alt_data_end+0xf8007b30>
10007da8:	01015504 	movi	r4,1364
10007dac:	20800436 	bltu	r4,r2,10007dc0 <_malloc_r+0x78c>
10007db0:	3804d4ba 	srli	r2,r7,18
10007db4:	11001f04 	addi	r4,r2,124
10007db8:	210b883a 	add	r5,r4,r4
10007dbc:	003f5c06 	br	10007b30 <__alt_data_end+0xf8007b30>
10007dc0:	01403f04 	movi	r5,252
10007dc4:	01001f84 	movi	r4,126
10007dc8:	003f5906 	br	10007b30 <__alt_data_end+0xf8007b30>
10007dcc:	98800117 	ldw	r2,4(r19)
10007dd0:	003fa906 	br	10007c78 <__alt_data_end+0xf8007c78>
10007dd4:	6007883a 	mov	r3,r12
10007dd8:	003ea206 	br	10007864 <__alt_data_end+0xf8007864>

10007ddc <memchr>:
10007ddc:	208000cc 	andi	r2,r4,3
10007de0:	280f883a 	mov	r7,r5
10007de4:	10003526 	beq	r2,zero,10007ebc <memchr+0xe0>
10007de8:	30bfffc4 	addi	r2,r6,-1
10007dec:	30001b26 	beq	r6,zero,10007e5c <memchr+0x80>
10007df0:	21800003 	ldbu	r6,0(r4)
10007df4:	28c03fcc 	andi	r3,r5,255
10007df8:	30c01a26 	beq	r6,r3,10007e64 <memchr+0x88>
10007dfc:	180d883a 	mov	r6,r3
10007e00:	00000406 	br	10007e14 <memchr+0x38>
10007e04:	10001526 	beq	r2,zero,10007e5c <memchr+0x80>
10007e08:	20c00003 	ldbu	r3,0(r4)
10007e0c:	10bfffc4 	addi	r2,r2,-1
10007e10:	19801426 	beq	r3,r6,10007e64 <memchr+0x88>
10007e14:	21000044 	addi	r4,r4,1
10007e18:	20c000cc 	andi	r3,r4,3
10007e1c:	183ff91e 	bne	r3,zero,10007e04 <__alt_data_end+0xf8007e04>
10007e20:	024000c4 	movi	r9,3
10007e24:	48801136 	bltu	r9,r2,10007e6c <memchr+0x90>
10007e28:	10000c26 	beq	r2,zero,10007e5c <memchr+0x80>
10007e2c:	20c00003 	ldbu	r3,0(r4)
10007e30:	29403fcc 	andi	r5,r5,255
10007e34:	19400b26 	beq	r3,r5,10007e64 <memchr+0x88>
10007e38:	20c00044 	addi	r3,r4,1
10007e3c:	2085883a 	add	r2,r4,r2
10007e40:	39803fcc 	andi	r6,r7,255
10007e44:	00000306 	br	10007e54 <memchr+0x78>
10007e48:	18c00044 	addi	r3,r3,1
10007e4c:	197fffc3 	ldbu	r5,-1(r3)
10007e50:	29800426 	beq	r5,r6,10007e64 <memchr+0x88>
10007e54:	1809883a 	mov	r4,r3
10007e58:	18bffb1e 	bne	r3,r2,10007e48 <__alt_data_end+0xf8007e48>
10007e5c:	0005883a 	mov	r2,zero
10007e60:	f800283a 	ret
10007e64:	2005883a 	mov	r2,r4
10007e68:	f800283a 	ret
10007e6c:	28c03fcc 	andi	r3,r5,255
10007e70:	1810923a 	slli	r8,r3,8
10007e74:	02ffbff4 	movhi	r11,65279
10007e78:	02a02074 	movhi	r10,32897
10007e7c:	40c6b03a 	or	r3,r8,r3
10007e80:	1810943a 	slli	r8,r3,16
10007e84:	5affbfc4 	addi	r11,r11,-257
10007e88:	52a02004 	addi	r10,r10,-32640
10007e8c:	40d0b03a 	or	r8,r8,r3
10007e90:	20c00017 	ldw	r3,0(r4)
10007e94:	40c6f03a 	xor	r3,r8,r3
10007e98:	1acd883a 	add	r6,r3,r11
10007e9c:	00c6303a 	nor	r3,zero,r3
10007ea0:	30c6703a 	and	r3,r6,r3
10007ea4:	1a86703a 	and	r3,r3,r10
10007ea8:	183fdf1e 	bne	r3,zero,10007e28 <__alt_data_end+0xf8007e28>
10007eac:	10bfff04 	addi	r2,r2,-4
10007eb0:	21000104 	addi	r4,r4,4
10007eb4:	48bff636 	bltu	r9,r2,10007e90 <__alt_data_end+0xf8007e90>
10007eb8:	003fdb06 	br	10007e28 <__alt_data_end+0xf8007e28>
10007ebc:	3005883a 	mov	r2,r6
10007ec0:	003fd706 	br	10007e20 <__alt_data_end+0xf8007e20>

10007ec4 <memcpy>:
10007ec4:	deffff04 	addi	sp,sp,-4
10007ec8:	dc000015 	stw	r16,0(sp)
10007ecc:	00c003c4 	movi	r3,15
10007ed0:	2005883a 	mov	r2,r4
10007ed4:	1980432e 	bgeu	r3,r6,10007fe4 <memcpy+0x120>
10007ed8:	2146b03a 	or	r3,r4,r5
10007edc:	18c000cc 	andi	r3,r3,3
10007ee0:	1800421e 	bne	r3,zero,10007fec <memcpy+0x128>
10007ee4:	343ffc04 	addi	r16,r6,-16
10007ee8:	8020d13a 	srli	r16,r16,4
10007eec:	28c00104 	addi	r3,r5,4
10007ef0:	23400104 	addi	r13,r4,4
10007ef4:	801e913a 	slli	r15,r16,4
10007ef8:	2b000204 	addi	r12,r5,8
10007efc:	22c00204 	addi	r11,r4,8
10007f00:	7bc00504 	addi	r15,r15,20
10007f04:	2a800304 	addi	r10,r5,12
10007f08:	22400304 	addi	r9,r4,12
10007f0c:	2bdf883a 	add	r15,r5,r15
10007f10:	2811883a 	mov	r8,r5
10007f14:	200f883a 	mov	r7,r4
10007f18:	41000017 	ldw	r4,0(r8)
10007f1c:	39c00404 	addi	r7,r7,16
10007f20:	18c00404 	addi	r3,r3,16
10007f24:	393ffc15 	stw	r4,-16(r7)
10007f28:	1bbffc17 	ldw	r14,-16(r3)
10007f2c:	6b400404 	addi	r13,r13,16
10007f30:	5ac00404 	addi	r11,r11,16
10007f34:	6bbffc15 	stw	r14,-16(r13)
10007f38:	63800017 	ldw	r14,0(r12)
10007f3c:	4a400404 	addi	r9,r9,16
10007f40:	42000404 	addi	r8,r8,16
10007f44:	5bbffc15 	stw	r14,-16(r11)
10007f48:	53800017 	ldw	r14,0(r10)
10007f4c:	63000404 	addi	r12,r12,16
10007f50:	52800404 	addi	r10,r10,16
10007f54:	4bbffc15 	stw	r14,-16(r9)
10007f58:	1bffef1e 	bne	r3,r15,10007f18 <__alt_data_end+0xf8007f18>
10007f5c:	81c00044 	addi	r7,r16,1
10007f60:	380e913a 	slli	r7,r7,4
10007f64:	310003cc 	andi	r4,r6,15
10007f68:	02c000c4 	movi	r11,3
10007f6c:	11c7883a 	add	r3,r2,r7
10007f70:	29cb883a 	add	r5,r5,r7
10007f74:	59001f2e 	bgeu	r11,r4,10007ff4 <memcpy+0x130>
10007f78:	1813883a 	mov	r9,r3
10007f7c:	2811883a 	mov	r8,r5
10007f80:	200f883a 	mov	r7,r4
10007f84:	42800017 	ldw	r10,0(r8)
10007f88:	4a400104 	addi	r9,r9,4
10007f8c:	39ffff04 	addi	r7,r7,-4
10007f90:	4abfff15 	stw	r10,-4(r9)
10007f94:	42000104 	addi	r8,r8,4
10007f98:	59fffa36 	bltu	r11,r7,10007f84 <__alt_data_end+0xf8007f84>
10007f9c:	213fff04 	addi	r4,r4,-4
10007fa0:	2008d0ba 	srli	r4,r4,2
10007fa4:	318000cc 	andi	r6,r6,3
10007fa8:	21000044 	addi	r4,r4,1
10007fac:	2109883a 	add	r4,r4,r4
10007fb0:	2109883a 	add	r4,r4,r4
10007fb4:	1907883a 	add	r3,r3,r4
10007fb8:	290b883a 	add	r5,r5,r4
10007fbc:	30000626 	beq	r6,zero,10007fd8 <memcpy+0x114>
10007fc0:	198d883a 	add	r6,r3,r6
10007fc4:	29c00003 	ldbu	r7,0(r5)
10007fc8:	18c00044 	addi	r3,r3,1
10007fcc:	29400044 	addi	r5,r5,1
10007fd0:	19ffffc5 	stb	r7,-1(r3)
10007fd4:	19bffb1e 	bne	r3,r6,10007fc4 <__alt_data_end+0xf8007fc4>
10007fd8:	dc000017 	ldw	r16,0(sp)
10007fdc:	dec00104 	addi	sp,sp,4
10007fe0:	f800283a 	ret
10007fe4:	2007883a 	mov	r3,r4
10007fe8:	003ff406 	br	10007fbc <__alt_data_end+0xf8007fbc>
10007fec:	2007883a 	mov	r3,r4
10007ff0:	003ff306 	br	10007fc0 <__alt_data_end+0xf8007fc0>
10007ff4:	200d883a 	mov	r6,r4
10007ff8:	003ff006 	br	10007fbc <__alt_data_end+0xf8007fbc>

10007ffc <memmove>:
10007ffc:	2005883a 	mov	r2,r4
10008000:	29000b2e 	bgeu	r5,r4,10008030 <memmove+0x34>
10008004:	298f883a 	add	r7,r5,r6
10008008:	21c0092e 	bgeu	r4,r7,10008030 <memmove+0x34>
1000800c:	2187883a 	add	r3,r4,r6
10008010:	198bc83a 	sub	r5,r3,r6
10008014:	30004b26 	beq	r6,zero,10008144 <memmove+0x148>
10008018:	39ffffc4 	addi	r7,r7,-1
1000801c:	39000003 	ldbu	r4,0(r7)
10008020:	18ffffc4 	addi	r3,r3,-1
10008024:	19000005 	stb	r4,0(r3)
10008028:	197ffb1e 	bne	r3,r5,10008018 <__alt_data_end+0xf8008018>
1000802c:	f800283a 	ret
10008030:	00c003c4 	movi	r3,15
10008034:	1980412e 	bgeu	r3,r6,1000813c <memmove+0x140>
10008038:	1146b03a 	or	r3,r2,r5
1000803c:	18c000cc 	andi	r3,r3,3
10008040:	1800411e 	bne	r3,zero,10008148 <memmove+0x14c>
10008044:	33fffc04 	addi	r15,r6,-16
10008048:	781ed13a 	srli	r15,r15,4
1000804c:	28c00104 	addi	r3,r5,4
10008050:	13400104 	addi	r13,r2,4
10008054:	781c913a 	slli	r14,r15,4
10008058:	2b000204 	addi	r12,r5,8
1000805c:	12c00204 	addi	r11,r2,8
10008060:	73800504 	addi	r14,r14,20
10008064:	2a800304 	addi	r10,r5,12
10008068:	12400304 	addi	r9,r2,12
1000806c:	2b9d883a 	add	r14,r5,r14
10008070:	2811883a 	mov	r8,r5
10008074:	100f883a 	mov	r7,r2
10008078:	41000017 	ldw	r4,0(r8)
1000807c:	39c00404 	addi	r7,r7,16
10008080:	18c00404 	addi	r3,r3,16
10008084:	393ffc15 	stw	r4,-16(r7)
10008088:	193ffc17 	ldw	r4,-16(r3)
1000808c:	6b400404 	addi	r13,r13,16
10008090:	5ac00404 	addi	r11,r11,16
10008094:	693ffc15 	stw	r4,-16(r13)
10008098:	61000017 	ldw	r4,0(r12)
1000809c:	4a400404 	addi	r9,r9,16
100080a0:	42000404 	addi	r8,r8,16
100080a4:	593ffc15 	stw	r4,-16(r11)
100080a8:	51000017 	ldw	r4,0(r10)
100080ac:	63000404 	addi	r12,r12,16
100080b0:	52800404 	addi	r10,r10,16
100080b4:	493ffc15 	stw	r4,-16(r9)
100080b8:	1bbfef1e 	bne	r3,r14,10008078 <__alt_data_end+0xf8008078>
100080bc:	79000044 	addi	r4,r15,1
100080c0:	2008913a 	slli	r4,r4,4
100080c4:	328003cc 	andi	r10,r6,15
100080c8:	02c000c4 	movi	r11,3
100080cc:	1107883a 	add	r3,r2,r4
100080d0:	290b883a 	add	r5,r5,r4
100080d4:	5a801e2e 	bgeu	r11,r10,10008150 <memmove+0x154>
100080d8:	1813883a 	mov	r9,r3
100080dc:	2811883a 	mov	r8,r5
100080e0:	500f883a 	mov	r7,r10
100080e4:	41000017 	ldw	r4,0(r8)
100080e8:	4a400104 	addi	r9,r9,4
100080ec:	39ffff04 	addi	r7,r7,-4
100080f0:	493fff15 	stw	r4,-4(r9)
100080f4:	42000104 	addi	r8,r8,4
100080f8:	59fffa36 	bltu	r11,r7,100080e4 <__alt_data_end+0xf80080e4>
100080fc:	513fff04 	addi	r4,r10,-4
10008100:	2008d0ba 	srli	r4,r4,2
10008104:	318000cc 	andi	r6,r6,3
10008108:	21000044 	addi	r4,r4,1
1000810c:	2109883a 	add	r4,r4,r4
10008110:	2109883a 	add	r4,r4,r4
10008114:	1907883a 	add	r3,r3,r4
10008118:	290b883a 	add	r5,r5,r4
1000811c:	30000926 	beq	r6,zero,10008144 <memmove+0x148>
10008120:	198d883a 	add	r6,r3,r6
10008124:	29c00003 	ldbu	r7,0(r5)
10008128:	18c00044 	addi	r3,r3,1
1000812c:	29400044 	addi	r5,r5,1
10008130:	19ffffc5 	stb	r7,-1(r3)
10008134:	19bffb1e 	bne	r3,r6,10008124 <__alt_data_end+0xf8008124>
10008138:	f800283a 	ret
1000813c:	1007883a 	mov	r3,r2
10008140:	003ff606 	br	1000811c <__alt_data_end+0xf800811c>
10008144:	f800283a 	ret
10008148:	1007883a 	mov	r3,r2
1000814c:	003ff406 	br	10008120 <__alt_data_end+0xf8008120>
10008150:	500d883a 	mov	r6,r10
10008154:	003ff106 	br	1000811c <__alt_data_end+0xf800811c>

10008158 <memset>:
10008158:	20c000cc 	andi	r3,r4,3
1000815c:	2005883a 	mov	r2,r4
10008160:	18004326 	beq	r3,zero,10008270 <memset+0x118>
10008164:	31ffffc4 	addi	r7,r6,-1
10008168:	30004026 	beq	r6,zero,1000826c <memset+0x114>
1000816c:	2813883a 	mov	r9,r5
10008170:	200d883a 	mov	r6,r4
10008174:	2007883a 	mov	r3,r4
10008178:	00000406 	br	1000818c <memset+0x34>
1000817c:	3a3fffc4 	addi	r8,r7,-1
10008180:	31800044 	addi	r6,r6,1
10008184:	38003926 	beq	r7,zero,1000826c <memset+0x114>
10008188:	400f883a 	mov	r7,r8
1000818c:	18c00044 	addi	r3,r3,1
10008190:	32400005 	stb	r9,0(r6)
10008194:	1a0000cc 	andi	r8,r3,3
10008198:	403ff81e 	bne	r8,zero,1000817c <__alt_data_end+0xf800817c>
1000819c:	010000c4 	movi	r4,3
100081a0:	21c02d2e 	bgeu	r4,r7,10008258 <memset+0x100>
100081a4:	29803fcc 	andi	r6,r5,255
100081a8:	3008923a 	slli	r4,r6,8
100081ac:	218cb03a 	or	r6,r4,r6
100081b0:	3008943a 	slli	r4,r6,16
100081b4:	218cb03a 	or	r6,r4,r6
100081b8:	010003c4 	movi	r4,15
100081bc:	21c0182e 	bgeu	r4,r7,10008220 <memset+0xc8>
100081c0:	3b3ffc04 	addi	r12,r7,-16
100081c4:	6018d13a 	srli	r12,r12,4
100081c8:	1a000104 	addi	r8,r3,4
100081cc:	1ac00204 	addi	r11,r3,8
100081d0:	6008913a 	slli	r4,r12,4
100081d4:	1a800304 	addi	r10,r3,12
100081d8:	1813883a 	mov	r9,r3
100081dc:	21000504 	addi	r4,r4,20
100081e0:	1909883a 	add	r4,r3,r4
100081e4:	49800015 	stw	r6,0(r9)
100081e8:	41800015 	stw	r6,0(r8)
100081ec:	59800015 	stw	r6,0(r11)
100081f0:	51800015 	stw	r6,0(r10)
100081f4:	42000404 	addi	r8,r8,16
100081f8:	4a400404 	addi	r9,r9,16
100081fc:	5ac00404 	addi	r11,r11,16
10008200:	52800404 	addi	r10,r10,16
10008204:	413ff71e 	bne	r8,r4,100081e4 <__alt_data_end+0xf80081e4>
10008208:	63000044 	addi	r12,r12,1
1000820c:	6018913a 	slli	r12,r12,4
10008210:	39c003cc 	andi	r7,r7,15
10008214:	010000c4 	movi	r4,3
10008218:	1b07883a 	add	r3,r3,r12
1000821c:	21c00e2e 	bgeu	r4,r7,10008258 <memset+0x100>
10008220:	1813883a 	mov	r9,r3
10008224:	3811883a 	mov	r8,r7
10008228:	010000c4 	movi	r4,3
1000822c:	49800015 	stw	r6,0(r9)
10008230:	423fff04 	addi	r8,r8,-4
10008234:	4a400104 	addi	r9,r9,4
10008238:	223ffc36 	bltu	r4,r8,1000822c <__alt_data_end+0xf800822c>
1000823c:	393fff04 	addi	r4,r7,-4
10008240:	2008d0ba 	srli	r4,r4,2
10008244:	39c000cc 	andi	r7,r7,3
10008248:	21000044 	addi	r4,r4,1
1000824c:	2109883a 	add	r4,r4,r4
10008250:	2109883a 	add	r4,r4,r4
10008254:	1907883a 	add	r3,r3,r4
10008258:	38000426 	beq	r7,zero,1000826c <memset+0x114>
1000825c:	19cf883a 	add	r7,r3,r7
10008260:	19400005 	stb	r5,0(r3)
10008264:	18c00044 	addi	r3,r3,1
10008268:	19fffd1e 	bne	r3,r7,10008260 <__alt_data_end+0xf8008260>
1000826c:	f800283a 	ret
10008270:	2007883a 	mov	r3,r4
10008274:	300f883a 	mov	r7,r6
10008278:	003fc806 	br	1000819c <__alt_data_end+0xf800819c>

1000827c <_Balloc>:
1000827c:	20801317 	ldw	r2,76(r4)
10008280:	defffc04 	addi	sp,sp,-16
10008284:	dc400115 	stw	r17,4(sp)
10008288:	dc000015 	stw	r16,0(sp)
1000828c:	dfc00315 	stw	ra,12(sp)
10008290:	dc800215 	stw	r18,8(sp)
10008294:	2023883a 	mov	r17,r4
10008298:	2821883a 	mov	r16,r5
1000829c:	10000f26 	beq	r2,zero,100082dc <_Balloc+0x60>
100082a0:	8407883a 	add	r3,r16,r16
100082a4:	18c7883a 	add	r3,r3,r3
100082a8:	10c7883a 	add	r3,r2,r3
100082ac:	18800017 	ldw	r2,0(r3)
100082b0:	10001126 	beq	r2,zero,100082f8 <_Balloc+0x7c>
100082b4:	11000017 	ldw	r4,0(r2)
100082b8:	19000015 	stw	r4,0(r3)
100082bc:	10000415 	stw	zero,16(r2)
100082c0:	10000315 	stw	zero,12(r2)
100082c4:	dfc00317 	ldw	ra,12(sp)
100082c8:	dc800217 	ldw	r18,8(sp)
100082cc:	dc400117 	ldw	r17,4(sp)
100082d0:	dc000017 	ldw	r16,0(sp)
100082d4:	dec00404 	addi	sp,sp,16
100082d8:	f800283a 	ret
100082dc:	01400104 	movi	r5,4
100082e0:	01800844 	movi	r6,33
100082e4:	000b1180 	call	1000b118 <_calloc_r>
100082e8:	88801315 	stw	r2,76(r17)
100082ec:	103fec1e 	bne	r2,zero,100082a0 <__alt_data_end+0xf80082a0>
100082f0:	0005883a 	mov	r2,zero
100082f4:	003ff306 	br	100082c4 <__alt_data_end+0xf80082c4>
100082f8:	01400044 	movi	r5,1
100082fc:	2c24983a 	sll	r18,r5,r16
10008300:	8809883a 	mov	r4,r17
10008304:	91800144 	addi	r6,r18,5
10008308:	318d883a 	add	r6,r6,r6
1000830c:	318d883a 	add	r6,r6,r6
10008310:	000b1180 	call	1000b118 <_calloc_r>
10008314:	103ff626 	beq	r2,zero,100082f0 <__alt_data_end+0xf80082f0>
10008318:	14000115 	stw	r16,4(r2)
1000831c:	14800215 	stw	r18,8(r2)
10008320:	003fe606 	br	100082bc <__alt_data_end+0xf80082bc>

10008324 <_Bfree>:
10008324:	28000826 	beq	r5,zero,10008348 <_Bfree+0x24>
10008328:	28c00117 	ldw	r3,4(r5)
1000832c:	20801317 	ldw	r2,76(r4)
10008330:	18c7883a 	add	r3,r3,r3
10008334:	18c7883a 	add	r3,r3,r3
10008338:	10c5883a 	add	r2,r2,r3
1000833c:	10c00017 	ldw	r3,0(r2)
10008340:	28c00015 	stw	r3,0(r5)
10008344:	11400015 	stw	r5,0(r2)
10008348:	f800283a 	ret

1000834c <__multadd>:
1000834c:	defff704 	addi	sp,sp,-36
10008350:	dc800215 	stw	r18,8(sp)
10008354:	2c800417 	ldw	r18,16(r5)
10008358:	ddc00715 	stw	r23,28(sp)
1000835c:	dd800615 	stw	r22,24(sp)
10008360:	dd000415 	stw	r20,16(sp)
10008364:	dcc00315 	stw	r19,12(sp)
10008368:	dc400115 	stw	r17,4(sp)
1000836c:	dc000015 	stw	r16,0(sp)
10008370:	dfc00815 	stw	ra,32(sp)
10008374:	dd400515 	stw	r21,20(sp)
10008378:	2827883a 	mov	r19,r5
1000837c:	2029883a 	mov	r20,r4
10008380:	3023883a 	mov	r17,r6
10008384:	3821883a 	mov	r16,r7
10008388:	2d800504 	addi	r22,r5,20
1000838c:	002f883a 	mov	r23,zero
10008390:	b5400017 	ldw	r21,0(r22)
10008394:	880b883a 	mov	r5,r17
10008398:	bdc00044 	addi	r23,r23,1
1000839c:	a93fffcc 	andi	r4,r21,65535
100083a0:	000c8480 	call	1000c848 <__mulsi3>
100083a4:	1421883a 	add	r16,r2,r16
100083a8:	a808d43a 	srli	r4,r21,16
100083ac:	802ad43a 	srli	r21,r16,16
100083b0:	880b883a 	mov	r5,r17
100083b4:	000c8480 	call	1000c848 <__mulsi3>
100083b8:	a88f883a 	add	r7,r21,r2
100083bc:	3804943a 	slli	r2,r7,16
100083c0:	80ffffcc 	andi	r3,r16,65535
100083c4:	b5800104 	addi	r22,r22,4
100083c8:	10c7883a 	add	r3,r2,r3
100083cc:	b0ffff15 	stw	r3,-4(r22)
100083d0:	3820d43a 	srli	r16,r7,16
100083d4:	bcbfee16 	blt	r23,r18,10008390 <__alt_data_end+0xf8008390>
100083d8:	80000926 	beq	r16,zero,10008400 <__multadd+0xb4>
100083dc:	98800217 	ldw	r2,8(r19)
100083e0:	9080130e 	bge	r18,r2,10008430 <__multadd+0xe4>
100083e4:	90800144 	addi	r2,r18,5
100083e8:	1085883a 	add	r2,r2,r2
100083ec:	1085883a 	add	r2,r2,r2
100083f0:	9885883a 	add	r2,r19,r2
100083f4:	14000015 	stw	r16,0(r2)
100083f8:	94800044 	addi	r18,r18,1
100083fc:	9c800415 	stw	r18,16(r19)
10008400:	9805883a 	mov	r2,r19
10008404:	dfc00817 	ldw	ra,32(sp)
10008408:	ddc00717 	ldw	r23,28(sp)
1000840c:	dd800617 	ldw	r22,24(sp)
10008410:	dd400517 	ldw	r21,20(sp)
10008414:	dd000417 	ldw	r20,16(sp)
10008418:	dcc00317 	ldw	r19,12(sp)
1000841c:	dc800217 	ldw	r18,8(sp)
10008420:	dc400117 	ldw	r17,4(sp)
10008424:	dc000017 	ldw	r16,0(sp)
10008428:	dec00904 	addi	sp,sp,36
1000842c:	f800283a 	ret
10008430:	99400117 	ldw	r5,4(r19)
10008434:	a009883a 	mov	r4,r20
10008438:	29400044 	addi	r5,r5,1
1000843c:	000827c0 	call	1000827c <_Balloc>
10008440:	99800417 	ldw	r6,16(r19)
10008444:	99400304 	addi	r5,r19,12
10008448:	11000304 	addi	r4,r2,12
1000844c:	31800084 	addi	r6,r6,2
10008450:	318d883a 	add	r6,r6,r6
10008454:	318d883a 	add	r6,r6,r6
10008458:	1023883a 	mov	r17,r2
1000845c:	0007ec40 	call	10007ec4 <memcpy>
10008460:	99000117 	ldw	r4,4(r19)
10008464:	a0c01317 	ldw	r3,76(r20)
10008468:	2109883a 	add	r4,r4,r4
1000846c:	2109883a 	add	r4,r4,r4
10008470:	1907883a 	add	r3,r3,r4
10008474:	18800017 	ldw	r2,0(r3)
10008478:	98800015 	stw	r2,0(r19)
1000847c:	1cc00015 	stw	r19,0(r3)
10008480:	8827883a 	mov	r19,r17
10008484:	003fd706 	br	100083e4 <__alt_data_end+0xf80083e4>

10008488 <__s2b>:
10008488:	defff904 	addi	sp,sp,-28
1000848c:	dc400115 	stw	r17,4(sp)
10008490:	dc000015 	stw	r16,0(sp)
10008494:	2023883a 	mov	r17,r4
10008498:	2821883a 	mov	r16,r5
1000849c:	39000204 	addi	r4,r7,8
100084a0:	01400244 	movi	r5,9
100084a4:	dcc00315 	stw	r19,12(sp)
100084a8:	dc800215 	stw	r18,8(sp)
100084ac:	dfc00615 	stw	ra,24(sp)
100084b0:	dd400515 	stw	r21,20(sp)
100084b4:	dd000415 	stw	r20,16(sp)
100084b8:	3825883a 	mov	r18,r7
100084bc:	3027883a 	mov	r19,r6
100084c0:	000c7880 	call	1000c788 <__divsi3>
100084c4:	00c00044 	movi	r3,1
100084c8:	000b883a 	mov	r5,zero
100084cc:	1880030e 	bge	r3,r2,100084dc <__s2b+0x54>
100084d0:	18c7883a 	add	r3,r3,r3
100084d4:	29400044 	addi	r5,r5,1
100084d8:	18bffd16 	blt	r3,r2,100084d0 <__alt_data_end+0xf80084d0>
100084dc:	8809883a 	mov	r4,r17
100084e0:	000827c0 	call	1000827c <_Balloc>
100084e4:	d8c00717 	ldw	r3,28(sp)
100084e8:	10c00515 	stw	r3,20(r2)
100084ec:	00c00044 	movi	r3,1
100084f0:	10c00415 	stw	r3,16(r2)
100084f4:	00c00244 	movi	r3,9
100084f8:	1cc0210e 	bge	r3,r19,10008580 <__s2b+0xf8>
100084fc:	80eb883a 	add	r21,r16,r3
10008500:	a829883a 	mov	r20,r21
10008504:	84e1883a 	add	r16,r16,r19
10008508:	a1c00007 	ldb	r7,0(r20)
1000850c:	8809883a 	mov	r4,r17
10008510:	a5000044 	addi	r20,r20,1
10008514:	100b883a 	mov	r5,r2
10008518:	01800284 	movi	r6,10
1000851c:	39fff404 	addi	r7,r7,-48
10008520:	000834c0 	call	1000834c <__multadd>
10008524:	a43ff81e 	bne	r20,r16,10008508 <__alt_data_end+0xf8008508>
10008528:	ace1883a 	add	r16,r21,r19
1000852c:	843ffe04 	addi	r16,r16,-8
10008530:	9c800a0e 	bge	r19,r18,1000855c <__s2b+0xd4>
10008534:	94e5c83a 	sub	r18,r18,r19
10008538:	84a5883a 	add	r18,r16,r18
1000853c:	81c00007 	ldb	r7,0(r16)
10008540:	8809883a 	mov	r4,r17
10008544:	84000044 	addi	r16,r16,1
10008548:	100b883a 	mov	r5,r2
1000854c:	01800284 	movi	r6,10
10008550:	39fff404 	addi	r7,r7,-48
10008554:	000834c0 	call	1000834c <__multadd>
10008558:	84bff81e 	bne	r16,r18,1000853c <__alt_data_end+0xf800853c>
1000855c:	dfc00617 	ldw	ra,24(sp)
10008560:	dd400517 	ldw	r21,20(sp)
10008564:	dd000417 	ldw	r20,16(sp)
10008568:	dcc00317 	ldw	r19,12(sp)
1000856c:	dc800217 	ldw	r18,8(sp)
10008570:	dc400117 	ldw	r17,4(sp)
10008574:	dc000017 	ldw	r16,0(sp)
10008578:	dec00704 	addi	sp,sp,28
1000857c:	f800283a 	ret
10008580:	84000284 	addi	r16,r16,10
10008584:	1827883a 	mov	r19,r3
10008588:	003fe906 	br	10008530 <__alt_data_end+0xf8008530>

1000858c <__hi0bits>:
1000858c:	20bfffec 	andhi	r2,r4,65535
10008590:	1000141e 	bne	r2,zero,100085e4 <__hi0bits+0x58>
10008594:	2008943a 	slli	r4,r4,16
10008598:	00800404 	movi	r2,16
1000859c:	20ffc02c 	andhi	r3,r4,65280
100085a0:	1800021e 	bne	r3,zero,100085ac <__hi0bits+0x20>
100085a4:	2008923a 	slli	r4,r4,8
100085a8:	10800204 	addi	r2,r2,8
100085ac:	20fc002c 	andhi	r3,r4,61440
100085b0:	1800021e 	bne	r3,zero,100085bc <__hi0bits+0x30>
100085b4:	2008913a 	slli	r4,r4,4
100085b8:	10800104 	addi	r2,r2,4
100085bc:	20f0002c 	andhi	r3,r4,49152
100085c0:	1800031e 	bne	r3,zero,100085d0 <__hi0bits+0x44>
100085c4:	2109883a 	add	r4,r4,r4
100085c8:	10800084 	addi	r2,r2,2
100085cc:	2109883a 	add	r4,r4,r4
100085d0:	20000316 	blt	r4,zero,100085e0 <__hi0bits+0x54>
100085d4:	2110002c 	andhi	r4,r4,16384
100085d8:	2000041e 	bne	r4,zero,100085ec <__hi0bits+0x60>
100085dc:	00800804 	movi	r2,32
100085e0:	f800283a 	ret
100085e4:	0005883a 	mov	r2,zero
100085e8:	003fec06 	br	1000859c <__alt_data_end+0xf800859c>
100085ec:	10800044 	addi	r2,r2,1
100085f0:	f800283a 	ret

100085f4 <__lo0bits>:
100085f4:	20c00017 	ldw	r3,0(r4)
100085f8:	188001cc 	andi	r2,r3,7
100085fc:	10000826 	beq	r2,zero,10008620 <__lo0bits+0x2c>
10008600:	1880004c 	andi	r2,r3,1
10008604:	1000211e 	bne	r2,zero,1000868c <__lo0bits+0x98>
10008608:	1880008c 	andi	r2,r3,2
1000860c:	1000211e 	bne	r2,zero,10008694 <__lo0bits+0xa0>
10008610:	1806d0ba 	srli	r3,r3,2
10008614:	00800084 	movi	r2,2
10008618:	20c00015 	stw	r3,0(r4)
1000861c:	f800283a 	ret
10008620:	18bfffcc 	andi	r2,r3,65535
10008624:	10001326 	beq	r2,zero,10008674 <__lo0bits+0x80>
10008628:	0005883a 	mov	r2,zero
1000862c:	19403fcc 	andi	r5,r3,255
10008630:	2800021e 	bne	r5,zero,1000863c <__lo0bits+0x48>
10008634:	1806d23a 	srli	r3,r3,8
10008638:	10800204 	addi	r2,r2,8
1000863c:	194003cc 	andi	r5,r3,15
10008640:	2800021e 	bne	r5,zero,1000864c <__lo0bits+0x58>
10008644:	1806d13a 	srli	r3,r3,4
10008648:	10800104 	addi	r2,r2,4
1000864c:	194000cc 	andi	r5,r3,3
10008650:	2800021e 	bne	r5,zero,1000865c <__lo0bits+0x68>
10008654:	1806d0ba 	srli	r3,r3,2
10008658:	10800084 	addi	r2,r2,2
1000865c:	1940004c 	andi	r5,r3,1
10008660:	2800081e 	bne	r5,zero,10008684 <__lo0bits+0x90>
10008664:	1806d07a 	srli	r3,r3,1
10008668:	1800051e 	bne	r3,zero,10008680 <__lo0bits+0x8c>
1000866c:	00800804 	movi	r2,32
10008670:	f800283a 	ret
10008674:	1806d43a 	srli	r3,r3,16
10008678:	00800404 	movi	r2,16
1000867c:	003feb06 	br	1000862c <__alt_data_end+0xf800862c>
10008680:	10800044 	addi	r2,r2,1
10008684:	20c00015 	stw	r3,0(r4)
10008688:	f800283a 	ret
1000868c:	0005883a 	mov	r2,zero
10008690:	f800283a 	ret
10008694:	1806d07a 	srli	r3,r3,1
10008698:	00800044 	movi	r2,1
1000869c:	20c00015 	stw	r3,0(r4)
100086a0:	f800283a 	ret

100086a4 <__i2b>:
100086a4:	defffd04 	addi	sp,sp,-12
100086a8:	dc000015 	stw	r16,0(sp)
100086ac:	04000044 	movi	r16,1
100086b0:	dc400115 	stw	r17,4(sp)
100086b4:	2823883a 	mov	r17,r5
100086b8:	800b883a 	mov	r5,r16
100086bc:	dfc00215 	stw	ra,8(sp)
100086c0:	000827c0 	call	1000827c <_Balloc>
100086c4:	14400515 	stw	r17,20(r2)
100086c8:	14000415 	stw	r16,16(r2)
100086cc:	dfc00217 	ldw	ra,8(sp)
100086d0:	dc400117 	ldw	r17,4(sp)
100086d4:	dc000017 	ldw	r16,0(sp)
100086d8:	dec00304 	addi	sp,sp,12
100086dc:	f800283a 	ret

100086e0 <__multiply>:
100086e0:	deffef04 	addi	sp,sp,-68
100086e4:	dc400815 	stw	r17,32(sp)
100086e8:	dc000715 	stw	r16,28(sp)
100086ec:	2c400417 	ldw	r17,16(r5)
100086f0:	34000417 	ldw	r16,16(r6)
100086f4:	dd800d15 	stw	r22,52(sp)
100086f8:	dc800915 	stw	r18,36(sp)
100086fc:	dfc01015 	stw	ra,64(sp)
10008700:	df000f15 	stw	fp,60(sp)
10008704:	ddc00e15 	stw	r23,56(sp)
10008708:	dd400c15 	stw	r21,48(sp)
1000870c:	dd000b15 	stw	r20,44(sp)
10008710:	dcc00a15 	stw	r19,40(sp)
10008714:	2825883a 	mov	r18,r5
10008718:	302d883a 	mov	r22,r6
1000871c:	8c009116 	blt	r17,r16,10008964 <__multiply+0x284>
10008720:	8005883a 	mov	r2,r16
10008724:	8821883a 	mov	r16,r17
10008728:	1023883a 	mov	r17,r2
1000872c:	90800217 	ldw	r2,8(r18)
10008730:	8447883a 	add	r3,r16,r17
10008734:	d8c00215 	stw	r3,8(sp)
10008738:	91400117 	ldw	r5,4(r18)
1000873c:	10c0010e 	bge	r2,r3,10008744 <__multiply+0x64>
10008740:	29400044 	addi	r5,r5,1
10008744:	000827c0 	call	1000827c <_Balloc>
10008748:	d8c00217 	ldw	r3,8(sp)
1000874c:	d8800615 	stw	r2,24(sp)
10008750:	18eb883a 	add	r21,r3,r3
10008754:	ad6b883a 	add	r21,r21,r21
10008758:	10c00504 	addi	r3,r2,20
1000875c:	1d6b883a 	add	r21,r3,r21
10008760:	d8c00115 	stw	r3,4(sp)
10008764:	dd400315 	stw	r21,12(sp)
10008768:	1805883a 	mov	r2,r3
1000876c:	1d40042e 	bgeu	r3,r21,10008780 <__multiply+0xa0>
10008770:	d8c00317 	ldw	r3,12(sp)
10008774:	10000015 	stw	zero,0(r2)
10008778:	10800104 	addi	r2,r2,4
1000877c:	10fffc36 	bltu	r2,r3,10008770 <__alt_data_end+0xf8008770>
10008780:	8c63883a 	add	r17,r17,r17
10008784:	b5800504 	addi	r22,r22,20
10008788:	8c63883a 	add	r17,r17,r17
1000878c:	94800504 	addi	r18,r18,20
10008790:	8421883a 	add	r16,r16,r16
10008794:	b463883a 	add	r17,r22,r17
10008798:	8421883a 	add	r16,r16,r16
1000879c:	dd800015 	stw	r22,0(sp)
100087a0:	dc800415 	stw	r18,16(sp)
100087a4:	dc400515 	stw	r17,20(sp)
100087a8:	9429883a 	add	r20,r18,r16
100087ac:	b4404f2e 	bgeu	r22,r17,100088ec <__multiply+0x20c>
100087b0:	d8c00017 	ldw	r3,0(sp)
100087b4:	1c800017 	ldw	r18,0(r3)
100087b8:	943fffcc 	andi	r16,r18,65535
100087bc:	80001e26 	beq	r16,zero,10008838 <__multiply+0x158>
100087c0:	dd800117 	ldw	r22,4(sp)
100087c4:	dd400417 	ldw	r21,16(sp)
100087c8:	0025883a 	mov	r18,zero
100087cc:	adc00017 	ldw	r23,0(r21)
100087d0:	b4c00017 	ldw	r19,0(r22)
100087d4:	800b883a 	mov	r5,r16
100087d8:	b93fffcc 	andi	r4,r23,65535
100087dc:	000c8480 	call	1000c848 <__mulsi3>
100087e0:	9c7fffcc 	andi	r17,r19,65535
100087e4:	8885883a 	add	r2,r17,r2
100087e8:	b808d43a 	srli	r4,r23,16
100087ec:	14a3883a 	add	r17,r2,r18
100087f0:	9826d43a 	srli	r19,r19,16
100087f4:	8824d43a 	srli	r18,r17,16
100087f8:	800b883a 	mov	r5,r16
100087fc:	000c8480 	call	1000c848 <__mulsi3>
10008800:	9885883a 	add	r2,r19,r2
10008804:	14a7883a 	add	r19,r2,r18
10008808:	88ffffcc 	andi	r3,r17,65535
1000880c:	9822943a 	slli	r17,r19,16
10008810:	ad400104 	addi	r21,r21,4
10008814:	b005883a 	mov	r2,r22
10008818:	88c6b03a 	or	r3,r17,r3
1000881c:	b0c00015 	stw	r3,0(r22)
10008820:	9824d43a 	srli	r18,r19,16
10008824:	b5800104 	addi	r22,r22,4
10008828:	ad3fe836 	bltu	r21,r20,100087cc <__alt_data_end+0xf80087cc>
1000882c:	d8c00017 	ldw	r3,0(sp)
10008830:	14800115 	stw	r18,4(r2)
10008834:	1c800017 	ldw	r18,0(r3)
10008838:	9024d43a 	srli	r18,r18,16
1000883c:	90002226 	beq	r18,zero,100088c8 <__multiply+0x1e8>
10008840:	d8c00117 	ldw	r3,4(sp)
10008844:	dd800417 	ldw	r22,16(sp)
10008848:	002f883a 	mov	r23,zero
1000884c:	1f000017 	ldw	fp,0(r3)
10008850:	1823883a 	mov	r17,r3
10008854:	182b883a 	mov	r21,r3
10008858:	e021883a 	mov	r16,fp
1000885c:	00000106 	br	10008864 <__multiply+0x184>
10008860:	982b883a 	mov	r21,r19
10008864:	b100000b 	ldhu	r4,0(r22)
10008868:	8020d43a 	srli	r16,r16,16
1000886c:	900b883a 	mov	r5,r18
10008870:	000c8480 	call	1000c848 <__mulsi3>
10008874:	1405883a 	add	r2,r2,r16
10008878:	15ef883a 	add	r23,r2,r23
1000887c:	b804943a 	slli	r2,r23,16
10008880:	e0ffffcc 	andi	r3,fp,65535
10008884:	8c400104 	addi	r17,r17,4
10008888:	10c6b03a 	or	r3,r2,r3
1000888c:	88ffff15 	stw	r3,-4(r17)
10008890:	b5800104 	addi	r22,r22,4
10008894:	b13fff17 	ldw	r4,-4(r22)
10008898:	acc00104 	addi	r19,r21,4
1000889c:	900b883a 	mov	r5,r18
100088a0:	2008d43a 	srli	r4,r4,16
100088a4:	9c000017 	ldw	r16,0(r19)
100088a8:	000c8480 	call	1000c848 <__mulsi3>
100088ac:	b806d43a 	srli	r3,r23,16
100088b0:	813fffcc 	andi	r4,r16,65535
100088b4:	1105883a 	add	r2,r2,r4
100088b8:	10f9883a 	add	fp,r2,r3
100088bc:	e02ed43a 	srli	r23,fp,16
100088c0:	b53fe736 	bltu	r22,r20,10008860 <__alt_data_end+0xf8008860>
100088c4:	af000115 	stw	fp,4(r21)
100088c8:	d8c00017 	ldw	r3,0(sp)
100088cc:	d9000517 	ldw	r4,20(sp)
100088d0:	18c00104 	addi	r3,r3,4
100088d4:	d8c00015 	stw	r3,0(sp)
100088d8:	d8c00117 	ldw	r3,4(sp)
100088dc:	18c00104 	addi	r3,r3,4
100088e0:	d8c00115 	stw	r3,4(sp)
100088e4:	d8c00017 	ldw	r3,0(sp)
100088e8:	193fb136 	bltu	r3,r4,100087b0 <__alt_data_end+0xf80087b0>
100088ec:	d8c00217 	ldw	r3,8(sp)
100088f0:	00c00c0e 	bge	zero,r3,10008924 <__multiply+0x244>
100088f4:	d8c00317 	ldw	r3,12(sp)
100088f8:	18bfff17 	ldw	r2,-4(r3)
100088fc:	1d7fff04 	addi	r21,r3,-4
10008900:	10000326 	beq	r2,zero,10008910 <__multiply+0x230>
10008904:	00000706 	br	10008924 <__multiply+0x244>
10008908:	a8800017 	ldw	r2,0(r21)
1000890c:	1000051e 	bne	r2,zero,10008924 <__multiply+0x244>
10008910:	d8c00217 	ldw	r3,8(sp)
10008914:	ad7fff04 	addi	r21,r21,-4
10008918:	18ffffc4 	addi	r3,r3,-1
1000891c:	d8c00215 	stw	r3,8(sp)
10008920:	183ff91e 	bne	r3,zero,10008908 <__alt_data_end+0xf8008908>
10008924:	d8c00617 	ldw	r3,24(sp)
10008928:	d9000217 	ldw	r4,8(sp)
1000892c:	1805883a 	mov	r2,r3
10008930:	19000415 	stw	r4,16(r3)
10008934:	dfc01017 	ldw	ra,64(sp)
10008938:	df000f17 	ldw	fp,60(sp)
1000893c:	ddc00e17 	ldw	r23,56(sp)
10008940:	dd800d17 	ldw	r22,52(sp)
10008944:	dd400c17 	ldw	r21,48(sp)
10008948:	dd000b17 	ldw	r20,44(sp)
1000894c:	dcc00a17 	ldw	r19,40(sp)
10008950:	dc800917 	ldw	r18,36(sp)
10008954:	dc400817 	ldw	r17,32(sp)
10008958:	dc000717 	ldw	r16,28(sp)
1000895c:	dec01104 	addi	sp,sp,68
10008960:	f800283a 	ret
10008964:	3025883a 	mov	r18,r6
10008968:	282d883a 	mov	r22,r5
1000896c:	003f6f06 	br	1000872c <__alt_data_end+0xf800872c>

10008970 <__pow5mult>:
10008970:	defffa04 	addi	sp,sp,-24
10008974:	dcc00315 	stw	r19,12(sp)
10008978:	dc800215 	stw	r18,8(sp)
1000897c:	dc000015 	stw	r16,0(sp)
10008980:	dfc00515 	stw	ra,20(sp)
10008984:	dd000415 	stw	r20,16(sp)
10008988:	dc400115 	stw	r17,4(sp)
1000898c:	308000cc 	andi	r2,r6,3
10008990:	3021883a 	mov	r16,r6
10008994:	2027883a 	mov	r19,r4
10008998:	2825883a 	mov	r18,r5
1000899c:	10002e1e 	bne	r2,zero,10008a58 <__pow5mult+0xe8>
100089a0:	8021d0ba 	srai	r16,r16,2
100089a4:	80001a26 	beq	r16,zero,10008a10 <__pow5mult+0xa0>
100089a8:	9c401217 	ldw	r17,72(r19)
100089ac:	8800061e 	bne	r17,zero,100089c8 <__pow5mult+0x58>
100089b0:	00003406 	br	10008a84 <__pow5mult+0x114>
100089b4:	8021d07a 	srai	r16,r16,1
100089b8:	80001526 	beq	r16,zero,10008a10 <__pow5mult+0xa0>
100089bc:	88800017 	ldw	r2,0(r17)
100089c0:	10001c26 	beq	r2,zero,10008a34 <__pow5mult+0xc4>
100089c4:	1023883a 	mov	r17,r2
100089c8:	80c0004c 	andi	r3,r16,1
100089cc:	183ff926 	beq	r3,zero,100089b4 <__alt_data_end+0xf80089b4>
100089d0:	900b883a 	mov	r5,r18
100089d4:	880d883a 	mov	r6,r17
100089d8:	9809883a 	mov	r4,r19
100089dc:	00086e00 	call	100086e0 <__multiply>
100089e0:	90001b26 	beq	r18,zero,10008a50 <__pow5mult+0xe0>
100089e4:	91c00117 	ldw	r7,4(r18)
100089e8:	98c01317 	ldw	r3,76(r19)
100089ec:	8021d07a 	srai	r16,r16,1
100089f0:	39cf883a 	add	r7,r7,r7
100089f4:	39cf883a 	add	r7,r7,r7
100089f8:	19c7883a 	add	r3,r3,r7
100089fc:	19000017 	ldw	r4,0(r3)
10008a00:	91000015 	stw	r4,0(r18)
10008a04:	1c800015 	stw	r18,0(r3)
10008a08:	1025883a 	mov	r18,r2
10008a0c:	803feb1e 	bne	r16,zero,100089bc <__alt_data_end+0xf80089bc>
10008a10:	9005883a 	mov	r2,r18
10008a14:	dfc00517 	ldw	ra,20(sp)
10008a18:	dd000417 	ldw	r20,16(sp)
10008a1c:	dcc00317 	ldw	r19,12(sp)
10008a20:	dc800217 	ldw	r18,8(sp)
10008a24:	dc400117 	ldw	r17,4(sp)
10008a28:	dc000017 	ldw	r16,0(sp)
10008a2c:	dec00604 	addi	sp,sp,24
10008a30:	f800283a 	ret
10008a34:	9809883a 	mov	r4,r19
10008a38:	880b883a 	mov	r5,r17
10008a3c:	880d883a 	mov	r6,r17
10008a40:	00086e00 	call	100086e0 <__multiply>
10008a44:	88800015 	stw	r2,0(r17)
10008a48:	10000015 	stw	zero,0(r2)
10008a4c:	003fdd06 	br	100089c4 <__alt_data_end+0xf80089c4>
10008a50:	1025883a 	mov	r18,r2
10008a54:	003fd706 	br	100089b4 <__alt_data_end+0xf80089b4>
10008a58:	10bfffc4 	addi	r2,r2,-1
10008a5c:	1085883a 	add	r2,r2,r2
10008a60:	00c40074 	movhi	r3,4097
10008a64:	18c83304 	addi	r3,r3,8396
10008a68:	1085883a 	add	r2,r2,r2
10008a6c:	1885883a 	add	r2,r3,r2
10008a70:	11800017 	ldw	r6,0(r2)
10008a74:	000f883a 	mov	r7,zero
10008a78:	000834c0 	call	1000834c <__multadd>
10008a7c:	1025883a 	mov	r18,r2
10008a80:	003fc706 	br	100089a0 <__alt_data_end+0xf80089a0>
10008a84:	05000044 	movi	r20,1
10008a88:	9809883a 	mov	r4,r19
10008a8c:	a00b883a 	mov	r5,r20
10008a90:	000827c0 	call	1000827c <_Balloc>
10008a94:	1023883a 	mov	r17,r2
10008a98:	00809c44 	movi	r2,625
10008a9c:	88800515 	stw	r2,20(r17)
10008aa0:	8d000415 	stw	r20,16(r17)
10008aa4:	9c401215 	stw	r17,72(r19)
10008aa8:	88000015 	stw	zero,0(r17)
10008aac:	003fc606 	br	100089c8 <__alt_data_end+0xf80089c8>

10008ab0 <__lshift>:
10008ab0:	defff904 	addi	sp,sp,-28
10008ab4:	dd000415 	stw	r20,16(sp)
10008ab8:	dcc00315 	stw	r19,12(sp)
10008abc:	3029d17a 	srai	r20,r6,5
10008ac0:	2cc00417 	ldw	r19,16(r5)
10008ac4:	28800217 	ldw	r2,8(r5)
10008ac8:	dd400515 	stw	r21,20(sp)
10008acc:	a4e7883a 	add	r19,r20,r19
10008ad0:	dc800215 	stw	r18,8(sp)
10008ad4:	dc400115 	stw	r17,4(sp)
10008ad8:	dc000015 	stw	r16,0(sp)
10008adc:	dfc00615 	stw	ra,24(sp)
10008ae0:	9c000044 	addi	r16,r19,1
10008ae4:	2823883a 	mov	r17,r5
10008ae8:	302b883a 	mov	r21,r6
10008aec:	2025883a 	mov	r18,r4
10008af0:	29400117 	ldw	r5,4(r5)
10008af4:	1400030e 	bge	r2,r16,10008b04 <__lshift+0x54>
10008af8:	1085883a 	add	r2,r2,r2
10008afc:	29400044 	addi	r5,r5,1
10008b00:	143ffd16 	blt	r2,r16,10008af8 <__alt_data_end+0xf8008af8>
10008b04:	9009883a 	mov	r4,r18
10008b08:	000827c0 	call	1000827c <_Balloc>
10008b0c:	11c00504 	addi	r7,r2,20
10008b10:	0500090e 	bge	zero,r20,10008b38 <__lshift+0x88>
10008b14:	3811883a 	mov	r8,r7
10008b18:	0007883a 	mov	r3,zero
10008b1c:	40000015 	stw	zero,0(r8)
10008b20:	18c00044 	addi	r3,r3,1
10008b24:	42000104 	addi	r8,r8,4
10008b28:	1d3ffc1e 	bne	r3,r20,10008b1c <__alt_data_end+0xf8008b1c>
10008b2c:	18c7883a 	add	r3,r3,r3
10008b30:	18c7883a 	add	r3,r3,r3
10008b34:	38cf883a 	add	r7,r7,r3
10008b38:	89000417 	ldw	r4,16(r17)
10008b3c:	88c00504 	addi	r3,r17,20
10008b40:	a98007cc 	andi	r6,r21,31
10008b44:	2109883a 	add	r4,r4,r4
10008b48:	2109883a 	add	r4,r4,r4
10008b4c:	1909883a 	add	r4,r3,r4
10008b50:	30002326 	beq	r6,zero,10008be0 <__lshift+0x130>
10008b54:	01400804 	movi	r5,32
10008b58:	298bc83a 	sub	r5,r5,r6
10008b5c:	0013883a 	mov	r9,zero
10008b60:	1a000017 	ldw	r8,0(r3)
10008b64:	3815883a 	mov	r10,r7
10008b68:	39c00104 	addi	r7,r7,4
10008b6c:	4190983a 	sll	r8,r8,r6
10008b70:	18c00104 	addi	r3,r3,4
10008b74:	4a10b03a 	or	r8,r9,r8
10008b78:	3a3fff15 	stw	r8,-4(r7)
10008b7c:	1a3fff17 	ldw	r8,-4(r3)
10008b80:	4152d83a 	srl	r9,r8,r5
10008b84:	193ff636 	bltu	r3,r4,10008b60 <__alt_data_end+0xf8008b60>
10008b88:	52400115 	stw	r9,4(r10)
10008b8c:	48000126 	beq	r9,zero,10008b94 <__lshift+0xe4>
10008b90:	9c000084 	addi	r16,r19,2
10008b94:	89000117 	ldw	r4,4(r17)
10008b98:	90c01317 	ldw	r3,76(r18)
10008b9c:	843fffc4 	addi	r16,r16,-1
10008ba0:	2109883a 	add	r4,r4,r4
10008ba4:	2109883a 	add	r4,r4,r4
10008ba8:	1907883a 	add	r3,r3,r4
10008bac:	19000017 	ldw	r4,0(r3)
10008bb0:	14000415 	stw	r16,16(r2)
10008bb4:	89000015 	stw	r4,0(r17)
10008bb8:	1c400015 	stw	r17,0(r3)
10008bbc:	dfc00617 	ldw	ra,24(sp)
10008bc0:	dd400517 	ldw	r21,20(sp)
10008bc4:	dd000417 	ldw	r20,16(sp)
10008bc8:	dcc00317 	ldw	r19,12(sp)
10008bcc:	dc800217 	ldw	r18,8(sp)
10008bd0:	dc400117 	ldw	r17,4(sp)
10008bd4:	dc000017 	ldw	r16,0(sp)
10008bd8:	dec00704 	addi	sp,sp,28
10008bdc:	f800283a 	ret
10008be0:	19400017 	ldw	r5,0(r3)
10008be4:	39c00104 	addi	r7,r7,4
10008be8:	18c00104 	addi	r3,r3,4
10008bec:	397fff15 	stw	r5,-4(r7)
10008bf0:	193ffb36 	bltu	r3,r4,10008be0 <__alt_data_end+0xf8008be0>
10008bf4:	003fe706 	br	10008b94 <__alt_data_end+0xf8008b94>

10008bf8 <__mcmp>:
10008bf8:	20800417 	ldw	r2,16(r4)
10008bfc:	28c00417 	ldw	r3,16(r5)
10008c00:	10c5c83a 	sub	r2,r2,r3
10008c04:	1000111e 	bne	r2,zero,10008c4c <__mcmp+0x54>
10008c08:	18c7883a 	add	r3,r3,r3
10008c0c:	18c7883a 	add	r3,r3,r3
10008c10:	21000504 	addi	r4,r4,20
10008c14:	29400504 	addi	r5,r5,20
10008c18:	20c5883a 	add	r2,r4,r3
10008c1c:	28cb883a 	add	r5,r5,r3
10008c20:	00000106 	br	10008c28 <__mcmp+0x30>
10008c24:	20800a2e 	bgeu	r4,r2,10008c50 <__mcmp+0x58>
10008c28:	10bfff04 	addi	r2,r2,-4
10008c2c:	297fff04 	addi	r5,r5,-4
10008c30:	11800017 	ldw	r6,0(r2)
10008c34:	28c00017 	ldw	r3,0(r5)
10008c38:	30fffa26 	beq	r6,r3,10008c24 <__alt_data_end+0xf8008c24>
10008c3c:	30c00236 	bltu	r6,r3,10008c48 <__mcmp+0x50>
10008c40:	00800044 	movi	r2,1
10008c44:	f800283a 	ret
10008c48:	00bfffc4 	movi	r2,-1
10008c4c:	f800283a 	ret
10008c50:	0005883a 	mov	r2,zero
10008c54:	f800283a 	ret

10008c58 <__mdiff>:
10008c58:	defffb04 	addi	sp,sp,-20
10008c5c:	dc000015 	stw	r16,0(sp)
10008c60:	2821883a 	mov	r16,r5
10008c64:	dcc00315 	stw	r19,12(sp)
10008c68:	300b883a 	mov	r5,r6
10008c6c:	2027883a 	mov	r19,r4
10008c70:	8009883a 	mov	r4,r16
10008c74:	dc800215 	stw	r18,8(sp)
10008c78:	dfc00415 	stw	ra,16(sp)
10008c7c:	dc400115 	stw	r17,4(sp)
10008c80:	3025883a 	mov	r18,r6
10008c84:	0008bf80 	call	10008bf8 <__mcmp>
10008c88:	10005226 	beq	r2,zero,10008dd4 <__mdiff+0x17c>
10008c8c:	10004c16 	blt	r2,zero,10008dc0 <__mdiff+0x168>
10008c90:	0023883a 	mov	r17,zero
10008c94:	81400117 	ldw	r5,4(r16)
10008c98:	9809883a 	mov	r4,r19
10008c9c:	000827c0 	call	1000827c <_Balloc>
10008ca0:	83400417 	ldw	r13,16(r16)
10008ca4:	93800417 	ldw	r14,16(r18)
10008ca8:	81000504 	addi	r4,r16,20
10008cac:	6b59883a 	add	r12,r13,r13
10008cb0:	739d883a 	add	r14,r14,r14
10008cb4:	6319883a 	add	r12,r12,r12
10008cb8:	91800504 	addi	r6,r18,20
10008cbc:	739d883a 	add	r14,r14,r14
10008cc0:	14400315 	stw	r17,12(r2)
10008cc4:	2319883a 	add	r12,r4,r12
10008cc8:	339d883a 	add	r14,r6,r14
10008ccc:	12400504 	addi	r9,r2,20
10008cd0:	0007883a 	mov	r3,zero
10008cd4:	22000017 	ldw	r8,0(r4)
10008cd8:	32800017 	ldw	r10,0(r6)
10008cdc:	4ac00104 	addi	r11,r9,4
10008ce0:	41ffffcc 	andi	r7,r8,65535
10008ce4:	38c7883a 	add	r3,r7,r3
10008ce8:	51ffffcc 	andi	r7,r10,65535
10008cec:	19cfc83a 	sub	r7,r3,r7
10008cf0:	4010d43a 	srli	r8,r8,16
10008cf4:	5014d43a 	srli	r10,r10,16
10008cf8:	3807d43a 	srai	r3,r7,16
10008cfc:	39ffffcc 	andi	r7,r7,65535
10008d00:	4291c83a 	sub	r8,r8,r10
10008d04:	40c7883a 	add	r3,r8,r3
10008d08:	1810943a 	slli	r8,r3,16
10008d0c:	31800104 	addi	r6,r6,4
10008d10:	21000104 	addi	r4,r4,4
10008d14:	41ceb03a 	or	r7,r8,r7
10008d18:	49c00015 	stw	r7,0(r9)
10008d1c:	1807d43a 	srai	r3,r3,16
10008d20:	580b883a 	mov	r5,r11
10008d24:	5813883a 	mov	r9,r11
10008d28:	33bfea36 	bltu	r6,r14,10008cd4 <__alt_data_end+0xf8008cd4>
10008d2c:	2011883a 	mov	r8,r4
10008d30:	2300152e 	bgeu	r4,r12,10008d88 <__mdiff+0x130>
10008d34:	21400017 	ldw	r5,0(r4)
10008d38:	4a400104 	addi	r9,r9,4
10008d3c:	21000104 	addi	r4,r4,4
10008d40:	29ffffcc 	andi	r7,r5,65535
10008d44:	38c7883a 	add	r3,r7,r3
10008d48:	280ad43a 	srli	r5,r5,16
10008d4c:	180dd43a 	srai	r6,r3,16
10008d50:	19ffffcc 	andi	r7,r3,65535
10008d54:	3147883a 	add	r3,r6,r5
10008d58:	180a943a 	slli	r5,r3,16
10008d5c:	1807d43a 	srai	r3,r3,16
10008d60:	29ceb03a 	or	r7,r5,r7
10008d64:	49ffff15 	stw	r7,-4(r9)
10008d68:	233ff236 	bltu	r4,r12,10008d34 <__alt_data_end+0xf8008d34>
10008d6c:	0206303a 	nor	r3,zero,r8
10008d70:	1b07883a 	add	r3,r3,r12
10008d74:	1806d0ba 	srli	r3,r3,2
10008d78:	18c00044 	addi	r3,r3,1
10008d7c:	18c7883a 	add	r3,r3,r3
10008d80:	18c7883a 	add	r3,r3,r3
10008d84:	58cb883a 	add	r5,r11,r3
10008d88:	28ffff04 	addi	r3,r5,-4
10008d8c:	3800041e 	bne	r7,zero,10008da0 <__mdiff+0x148>
10008d90:	18ffff04 	addi	r3,r3,-4
10008d94:	19000017 	ldw	r4,0(r3)
10008d98:	6b7fffc4 	addi	r13,r13,-1
10008d9c:	203ffc26 	beq	r4,zero,10008d90 <__alt_data_end+0xf8008d90>
10008da0:	13400415 	stw	r13,16(r2)
10008da4:	dfc00417 	ldw	ra,16(sp)
10008da8:	dcc00317 	ldw	r19,12(sp)
10008dac:	dc800217 	ldw	r18,8(sp)
10008db0:	dc400117 	ldw	r17,4(sp)
10008db4:	dc000017 	ldw	r16,0(sp)
10008db8:	dec00504 	addi	sp,sp,20
10008dbc:	f800283a 	ret
10008dc0:	8005883a 	mov	r2,r16
10008dc4:	04400044 	movi	r17,1
10008dc8:	9021883a 	mov	r16,r18
10008dcc:	1025883a 	mov	r18,r2
10008dd0:	003fb006 	br	10008c94 <__alt_data_end+0xf8008c94>
10008dd4:	9809883a 	mov	r4,r19
10008dd8:	000b883a 	mov	r5,zero
10008ddc:	000827c0 	call	1000827c <_Balloc>
10008de0:	00c00044 	movi	r3,1
10008de4:	10c00415 	stw	r3,16(r2)
10008de8:	10000515 	stw	zero,20(r2)
10008dec:	003fed06 	br	10008da4 <__alt_data_end+0xf8008da4>

10008df0 <__ulp>:
10008df0:	295ffc2c 	andhi	r5,r5,32752
10008df4:	00bf3034 	movhi	r2,64704
10008df8:	2887883a 	add	r3,r5,r2
10008dfc:	00c0020e 	bge	zero,r3,10008e08 <__ulp+0x18>
10008e00:	0005883a 	mov	r2,zero
10008e04:	f800283a 	ret
10008e08:	00c7c83a 	sub	r3,zero,r3
10008e0c:	180bd53a 	srai	r5,r3,20
10008e10:	008004c4 	movi	r2,19
10008e14:	11400a0e 	bge	r2,r5,10008e40 <__ulp+0x50>
10008e18:	00800c84 	movi	r2,50
10008e1c:	0007883a 	mov	r3,zero
10008e20:	11400516 	blt	r2,r5,10008e38 <__ulp+0x48>
10008e24:	00800cc4 	movi	r2,51
10008e28:	114bc83a 	sub	r5,r2,r5
10008e2c:	00800044 	movi	r2,1
10008e30:	1144983a 	sll	r2,r2,r5
10008e34:	f800283a 	ret
10008e38:	00800044 	movi	r2,1
10008e3c:	f800283a 	ret
10008e40:	00800234 	movhi	r2,8
10008e44:	1147d83a 	sra	r3,r2,r5
10008e48:	0005883a 	mov	r2,zero
10008e4c:	f800283a 	ret

10008e50 <__b2d>:
10008e50:	defffa04 	addi	sp,sp,-24
10008e54:	dc000015 	stw	r16,0(sp)
10008e58:	24000417 	ldw	r16,16(r4)
10008e5c:	dc400115 	stw	r17,4(sp)
10008e60:	24400504 	addi	r17,r4,20
10008e64:	8421883a 	add	r16,r16,r16
10008e68:	8421883a 	add	r16,r16,r16
10008e6c:	8c21883a 	add	r16,r17,r16
10008e70:	dc800215 	stw	r18,8(sp)
10008e74:	84bfff17 	ldw	r18,-4(r16)
10008e78:	dd000415 	stw	r20,16(sp)
10008e7c:	dcc00315 	stw	r19,12(sp)
10008e80:	9009883a 	mov	r4,r18
10008e84:	2829883a 	mov	r20,r5
10008e88:	dfc00515 	stw	ra,20(sp)
10008e8c:	000858c0 	call	1000858c <__hi0bits>
10008e90:	00c00804 	movi	r3,32
10008e94:	1887c83a 	sub	r3,r3,r2
10008e98:	a0c00015 	stw	r3,0(r20)
10008e9c:	00c00284 	movi	r3,10
10008ea0:	84ffff04 	addi	r19,r16,-4
10008ea4:	18801216 	blt	r3,r2,10008ef0 <__b2d+0xa0>
10008ea8:	014002c4 	movi	r5,11
10008eac:	2889c83a 	sub	r4,r5,r2
10008eb0:	9106d83a 	srl	r3,r18,r4
10008eb4:	18cffc34 	orhi	r3,r3,16368
10008eb8:	8cc0282e 	bgeu	r17,r19,10008f5c <__b2d+0x10c>
10008ebc:	817ffe17 	ldw	r5,-8(r16)
10008ec0:	290ad83a 	srl	r5,r5,r4
10008ec4:	10800544 	addi	r2,r2,21
10008ec8:	9084983a 	sll	r2,r18,r2
10008ecc:	2884b03a 	or	r2,r5,r2
10008ed0:	dfc00517 	ldw	ra,20(sp)
10008ed4:	dd000417 	ldw	r20,16(sp)
10008ed8:	dcc00317 	ldw	r19,12(sp)
10008edc:	dc800217 	ldw	r18,8(sp)
10008ee0:	dc400117 	ldw	r17,4(sp)
10008ee4:	dc000017 	ldw	r16,0(sp)
10008ee8:	dec00604 	addi	sp,sp,24
10008eec:	f800283a 	ret
10008ef0:	113ffd44 	addi	r4,r2,-11
10008ef4:	8cc00f2e 	bgeu	r17,r19,10008f34 <__b2d+0xe4>
10008ef8:	81bffe04 	addi	r6,r16,-8
10008efc:	817ffe17 	ldw	r5,-8(r16)
10008f00:	20001326 	beq	r4,zero,10008f50 <__b2d+0x100>
10008f04:	00c00ac4 	movi	r3,43
10008f08:	1885c83a 	sub	r2,r3,r2
10008f0c:	2886d83a 	srl	r3,r5,r2
10008f10:	9124983a 	sll	r18,r18,r4
10008f14:	90e4b03a 	or	r18,r18,r3
10008f18:	90cffc34 	orhi	r3,r18,16368
10008f1c:	8980112e 	bgeu	r17,r6,10008f64 <__b2d+0x114>
10008f20:	81bffd17 	ldw	r6,-12(r16)
10008f24:	308cd83a 	srl	r6,r6,r2
10008f28:	2904983a 	sll	r2,r5,r4
10008f2c:	1184b03a 	or	r2,r2,r6
10008f30:	003fe706 	br	10008ed0 <__alt_data_end+0xf8008ed0>
10008f34:	20000526 	beq	r4,zero,10008f4c <__b2d+0xfc>
10008f38:	9124983a 	sll	r18,r18,r4
10008f3c:	000d883a 	mov	r6,zero
10008f40:	000b883a 	mov	r5,zero
10008f44:	90cffc34 	orhi	r3,r18,16368
10008f48:	003ff706 	br	10008f28 <__alt_data_end+0xf8008f28>
10008f4c:	000b883a 	mov	r5,zero
10008f50:	90cffc34 	orhi	r3,r18,16368
10008f54:	2805883a 	mov	r2,r5
10008f58:	003fdd06 	br	10008ed0 <__alt_data_end+0xf8008ed0>
10008f5c:	000b883a 	mov	r5,zero
10008f60:	003fd806 	br	10008ec4 <__alt_data_end+0xf8008ec4>
10008f64:	000d883a 	mov	r6,zero
10008f68:	003fef06 	br	10008f28 <__alt_data_end+0xf8008f28>

10008f6c <__d2b>:
10008f6c:	defff704 	addi	sp,sp,-36
10008f70:	dc000215 	stw	r16,8(sp)
10008f74:	3021883a 	mov	r16,r6
10008f78:	dc400315 	stw	r17,12(sp)
10008f7c:	8022907a 	slli	r17,r16,1
10008f80:	dd400715 	stw	r21,28(sp)
10008f84:	282b883a 	mov	r21,r5
10008f88:	01400044 	movi	r5,1
10008f8c:	dd000615 	stw	r20,24(sp)
10008f90:	dcc00515 	stw	r19,20(sp)
10008f94:	dc800415 	stw	r18,16(sp)
10008f98:	dfc00815 	stw	ra,32(sp)
10008f9c:	3829883a 	mov	r20,r7
10008fa0:	dc800917 	ldw	r18,36(sp)
10008fa4:	8822d57a 	srli	r17,r17,21
10008fa8:	000827c0 	call	1000827c <_Balloc>
10008fac:	1027883a 	mov	r19,r2
10008fb0:	00800434 	movhi	r2,16
10008fb4:	10bfffc4 	addi	r2,r2,-1
10008fb8:	808c703a 	and	r6,r16,r2
10008fbc:	88000126 	beq	r17,zero,10008fc4 <__d2b+0x58>
10008fc0:	31800434 	orhi	r6,r6,16
10008fc4:	d9800015 	stw	r6,0(sp)
10008fc8:	a8001f26 	beq	r21,zero,10009048 <__d2b+0xdc>
10008fcc:	d9000104 	addi	r4,sp,4
10008fd0:	dd400115 	stw	r21,4(sp)
10008fd4:	00085f40 	call	100085f4 <__lo0bits>
10008fd8:	d8c00017 	ldw	r3,0(sp)
10008fdc:	1000291e 	bne	r2,zero,10009084 <__d2b+0x118>
10008fe0:	d9000117 	ldw	r4,4(sp)
10008fe4:	99000515 	stw	r4,20(r19)
10008fe8:	1820c03a 	cmpne	r16,r3,zero
10008fec:	84000044 	addi	r16,r16,1
10008ff0:	98c00615 	stw	r3,24(r19)
10008ff4:	9c000415 	stw	r16,16(r19)
10008ff8:	88001b1e 	bne	r17,zero,10009068 <__d2b+0xfc>
10008ffc:	800690ba 	slli	r3,r16,2
10009000:	10bef384 	addi	r2,r2,-1074
10009004:	a0800015 	stw	r2,0(r20)
10009008:	98c5883a 	add	r2,r19,r3
1000900c:	11000417 	ldw	r4,16(r2)
10009010:	8020917a 	slli	r16,r16,5
10009014:	000858c0 	call	1000858c <__hi0bits>
10009018:	8085c83a 	sub	r2,r16,r2
1000901c:	90800015 	stw	r2,0(r18)
10009020:	9805883a 	mov	r2,r19
10009024:	dfc00817 	ldw	ra,32(sp)
10009028:	dd400717 	ldw	r21,28(sp)
1000902c:	dd000617 	ldw	r20,24(sp)
10009030:	dcc00517 	ldw	r19,20(sp)
10009034:	dc800417 	ldw	r18,16(sp)
10009038:	dc400317 	ldw	r17,12(sp)
1000903c:	dc000217 	ldw	r16,8(sp)
10009040:	dec00904 	addi	sp,sp,36
10009044:	f800283a 	ret
10009048:	d809883a 	mov	r4,sp
1000904c:	00085f40 	call	100085f4 <__lo0bits>
10009050:	d8c00017 	ldw	r3,0(sp)
10009054:	04000044 	movi	r16,1
10009058:	9c000415 	stw	r16,16(r19)
1000905c:	98c00515 	stw	r3,20(r19)
10009060:	10800804 	addi	r2,r2,32
10009064:	883fe526 	beq	r17,zero,10008ffc <__alt_data_end+0xf8008ffc>
10009068:	8c7ef344 	addi	r17,r17,-1075
1000906c:	88a3883a 	add	r17,r17,r2
10009070:	00c00d44 	movi	r3,53
10009074:	a4400015 	stw	r17,0(r20)
10009078:	1885c83a 	sub	r2,r3,r2
1000907c:	90800015 	stw	r2,0(r18)
10009080:	003fe706 	br	10009020 <__alt_data_end+0xf8009020>
10009084:	01000804 	movi	r4,32
10009088:	2089c83a 	sub	r4,r4,r2
1000908c:	1908983a 	sll	r4,r3,r4
10009090:	d9400117 	ldw	r5,4(sp)
10009094:	1886d83a 	srl	r3,r3,r2
10009098:	2148b03a 	or	r4,r4,r5
1000909c:	99000515 	stw	r4,20(r19)
100090a0:	d8c00015 	stw	r3,0(sp)
100090a4:	003fd006 	br	10008fe8 <__alt_data_end+0xf8008fe8>

100090a8 <__ratio>:
100090a8:	defff904 	addi	sp,sp,-28
100090ac:	dc400315 	stw	r17,12(sp)
100090b0:	2823883a 	mov	r17,r5
100090b4:	d9400104 	addi	r5,sp,4
100090b8:	dfc00615 	stw	ra,24(sp)
100090bc:	dcc00515 	stw	r19,20(sp)
100090c0:	dc800415 	stw	r18,16(sp)
100090c4:	2027883a 	mov	r19,r4
100090c8:	dc000215 	stw	r16,8(sp)
100090cc:	0008e500 	call	10008e50 <__b2d>
100090d0:	8809883a 	mov	r4,r17
100090d4:	d80b883a 	mov	r5,sp
100090d8:	1025883a 	mov	r18,r2
100090dc:	1821883a 	mov	r16,r3
100090e0:	0008e500 	call	10008e50 <__b2d>
100090e4:	8a400417 	ldw	r9,16(r17)
100090e8:	9a000417 	ldw	r8,16(r19)
100090ec:	100d883a 	mov	r6,r2
100090f0:	d8800017 	ldw	r2,0(sp)
100090f4:	4251c83a 	sub	r8,r8,r9
100090f8:	4012917a 	slli	r9,r8,5
100090fc:	da000117 	ldw	r8,4(sp)
10009100:	4091c83a 	sub	r8,r8,r2
10009104:	4251883a 	add	r8,r8,r9
10009108:	02000d0e 	bge	zero,r8,10009140 <__ratio+0x98>
1000910c:	4010953a 	slli	r8,r8,20
10009110:	4421883a 	add	r16,r8,r16
10009114:	9009883a 	mov	r4,r18
10009118:	800b883a 	mov	r5,r16
1000911c:	180f883a 	mov	r7,r3
10009120:	000d10c0 	call	1000d10c <__divdf3>
10009124:	dfc00617 	ldw	ra,24(sp)
10009128:	dcc00517 	ldw	r19,20(sp)
1000912c:	dc800417 	ldw	r18,16(sp)
10009130:	dc400317 	ldw	r17,12(sp)
10009134:	dc000217 	ldw	r16,8(sp)
10009138:	dec00704 	addi	sp,sp,28
1000913c:	f800283a 	ret
10009140:	4010953a 	slli	r8,r8,20
10009144:	1a07c83a 	sub	r3,r3,r8
10009148:	003ff206 	br	10009114 <__alt_data_end+0xf8009114>

1000914c <_mprec_log10>:
1000914c:	defffe04 	addi	sp,sp,-8
10009150:	dc000015 	stw	r16,0(sp)
10009154:	dfc00115 	stw	ra,4(sp)
10009158:	008005c4 	movi	r2,23
1000915c:	2021883a 	mov	r16,r4
10009160:	11000d0e 	bge	r2,r4,10009198 <_mprec_log10+0x4c>
10009164:	0005883a 	mov	r2,zero
10009168:	00cffc34 	movhi	r3,16368
1000916c:	843fffc4 	addi	r16,r16,-1
10009170:	1009883a 	mov	r4,r2
10009174:	180b883a 	mov	r5,r3
10009178:	000d883a 	mov	r6,zero
1000917c:	01d00934 	movhi	r7,16420
10009180:	000dcd00 	call	1000dcd0 <__muldf3>
10009184:	803ff91e 	bne	r16,zero,1000916c <__alt_data_end+0xf800916c>
10009188:	dfc00117 	ldw	ra,4(sp)
1000918c:	dc000017 	ldw	r16,0(sp)
10009190:	dec00204 	addi	sp,sp,8
10009194:	f800283a 	ret
10009198:	202090fa 	slli	r16,r4,3
1000919c:	00840074 	movhi	r2,4097
100091a0:	10884a04 	addi	r2,r2,8488
100091a4:	1421883a 	add	r16,r2,r16
100091a8:	80800017 	ldw	r2,0(r16)
100091ac:	80c00117 	ldw	r3,4(r16)
100091b0:	dfc00117 	ldw	ra,4(sp)
100091b4:	dc000017 	ldw	r16,0(sp)
100091b8:	dec00204 	addi	sp,sp,8
100091bc:	f800283a 	ret

100091c0 <__copybits>:
100091c0:	297fffc4 	addi	r5,r5,-1
100091c4:	280fd17a 	srai	r7,r5,5
100091c8:	30c00417 	ldw	r3,16(r6)
100091cc:	30800504 	addi	r2,r6,20
100091d0:	39c00044 	addi	r7,r7,1
100091d4:	18c7883a 	add	r3,r3,r3
100091d8:	39cf883a 	add	r7,r7,r7
100091dc:	18c7883a 	add	r3,r3,r3
100091e0:	39cf883a 	add	r7,r7,r7
100091e4:	10c7883a 	add	r3,r2,r3
100091e8:	21cf883a 	add	r7,r4,r7
100091ec:	10c00d2e 	bgeu	r2,r3,10009224 <__copybits+0x64>
100091f0:	200b883a 	mov	r5,r4
100091f4:	12000017 	ldw	r8,0(r2)
100091f8:	29400104 	addi	r5,r5,4
100091fc:	10800104 	addi	r2,r2,4
10009200:	2a3fff15 	stw	r8,-4(r5)
10009204:	10fffb36 	bltu	r2,r3,100091f4 <__alt_data_end+0xf80091f4>
10009208:	1985c83a 	sub	r2,r3,r6
1000920c:	10bffac4 	addi	r2,r2,-21
10009210:	1004d0ba 	srli	r2,r2,2
10009214:	10800044 	addi	r2,r2,1
10009218:	1085883a 	add	r2,r2,r2
1000921c:	1085883a 	add	r2,r2,r2
10009220:	2089883a 	add	r4,r4,r2
10009224:	21c0032e 	bgeu	r4,r7,10009234 <__copybits+0x74>
10009228:	20000015 	stw	zero,0(r4)
1000922c:	21000104 	addi	r4,r4,4
10009230:	21fffd36 	bltu	r4,r7,10009228 <__alt_data_end+0xf8009228>
10009234:	f800283a 	ret

10009238 <__any_on>:
10009238:	20c00417 	ldw	r3,16(r4)
1000923c:	2805d17a 	srai	r2,r5,5
10009240:	21000504 	addi	r4,r4,20
10009244:	18800d0e 	bge	r3,r2,1000927c <__any_on+0x44>
10009248:	18c7883a 	add	r3,r3,r3
1000924c:	18c7883a 	add	r3,r3,r3
10009250:	20c7883a 	add	r3,r4,r3
10009254:	20c0192e 	bgeu	r4,r3,100092bc <__any_on+0x84>
10009258:	18bfff17 	ldw	r2,-4(r3)
1000925c:	18ffff04 	addi	r3,r3,-4
10009260:	1000041e 	bne	r2,zero,10009274 <__any_on+0x3c>
10009264:	20c0142e 	bgeu	r4,r3,100092b8 <__any_on+0x80>
10009268:	18ffff04 	addi	r3,r3,-4
1000926c:	19400017 	ldw	r5,0(r3)
10009270:	283ffc26 	beq	r5,zero,10009264 <__alt_data_end+0xf8009264>
10009274:	00800044 	movi	r2,1
10009278:	f800283a 	ret
1000927c:	10c00a0e 	bge	r2,r3,100092a8 <__any_on+0x70>
10009280:	1085883a 	add	r2,r2,r2
10009284:	1085883a 	add	r2,r2,r2
10009288:	294007cc 	andi	r5,r5,31
1000928c:	2087883a 	add	r3,r4,r2
10009290:	283ff026 	beq	r5,zero,10009254 <__alt_data_end+0xf8009254>
10009294:	19800017 	ldw	r6,0(r3)
10009298:	3144d83a 	srl	r2,r6,r5
1000929c:	114a983a 	sll	r5,r2,r5
100092a0:	29bff41e 	bne	r5,r6,10009274 <__alt_data_end+0xf8009274>
100092a4:	003feb06 	br	10009254 <__alt_data_end+0xf8009254>
100092a8:	1085883a 	add	r2,r2,r2
100092ac:	1085883a 	add	r2,r2,r2
100092b0:	2087883a 	add	r3,r4,r2
100092b4:	003fe706 	br	10009254 <__alt_data_end+0xf8009254>
100092b8:	f800283a 	ret
100092bc:	0005883a 	mov	r2,zero
100092c0:	f800283a 	ret

100092c4 <_realloc_r>:
100092c4:	defff604 	addi	sp,sp,-40
100092c8:	dcc00315 	stw	r19,12(sp)
100092cc:	dc400115 	stw	r17,4(sp)
100092d0:	dfc00915 	stw	ra,36(sp)
100092d4:	df000815 	stw	fp,32(sp)
100092d8:	ddc00715 	stw	r23,28(sp)
100092dc:	dd800615 	stw	r22,24(sp)
100092e0:	dd400515 	stw	r21,20(sp)
100092e4:	dd000415 	stw	r20,16(sp)
100092e8:	dc800215 	stw	r18,8(sp)
100092ec:	dc000015 	stw	r16,0(sp)
100092f0:	2827883a 	mov	r19,r5
100092f4:	3023883a 	mov	r17,r6
100092f8:	2800bf26 	beq	r5,zero,100095f8 <_realloc_r+0x334>
100092fc:	2025883a 	mov	r18,r4
10009300:	000f64c0 	call	1000f64c <__malloc_lock>
10009304:	98ffff17 	ldw	r3,-4(r19)
10009308:	01bfff04 	movi	r6,-4
1000930c:	890002c4 	addi	r4,r17,11
10009310:	01c00584 	movi	r7,22
10009314:	9d7ffe04 	addi	r21,r19,-8
10009318:	19a0703a 	and	r16,r3,r6
1000931c:	39003f2e 	bgeu	r7,r4,1000941c <_realloc_r+0x158>
10009320:	053ffe04 	movi	r20,-8
10009324:	2528703a 	and	r20,r4,r20
10009328:	a00f883a 	mov	r7,r20
1000932c:	a0008216 	blt	r20,zero,10009538 <_realloc_r+0x274>
10009330:	a4408136 	bltu	r20,r17,10009538 <_realloc_r+0x274>
10009334:	81c03c0e 	bge	r16,r7,10009428 <_realloc_r+0x164>
10009338:	07040074 	movhi	fp,4097
1000933c:	e709f804 	addi	fp,fp,10208
10009340:	e1000217 	ldw	r4,8(fp)
10009344:	ac05883a 	add	r2,r21,r16
10009348:	2080bf26 	beq	r4,r2,10009648 <_realloc_r+0x384>
1000934c:	11000117 	ldw	r4,4(r2)
10009350:	023fff84 	movi	r8,-2
10009354:	2210703a 	and	r8,r4,r8
10009358:	1211883a 	add	r8,r2,r8
1000935c:	41400117 	ldw	r5,4(r8)
10009360:	2940004c 	andi	r5,r5,1
10009364:	28004a1e 	bne	r5,zero,10009490 <_realloc_r+0x1cc>
10009368:	017fff04 	movi	r5,-4
1000936c:	2148703a 	and	r4,r4,r5
10009370:	2409883a 	add	r4,r4,r16
10009374:	21c0ad0e 	bge	r4,r7,1000962c <_realloc_r+0x368>
10009378:	18c0004c 	andi	r3,r3,1
1000937c:	18007f1e 	bne	r3,zero,1000957c <_realloc_r+0x2b8>
10009380:	9dfffe17 	ldw	r23,-8(r19)
10009384:	adefc83a 	sub	r23,r21,r23
10009388:	bd800117 	ldw	r22,4(r23)
1000938c:	b14a703a 	and	r5,r22,r5
10009390:	216d883a 	add	r22,r4,r5
10009394:	b1c04516 	blt	r22,r7,100094ac <_realloc_r+0x1e8>
10009398:	10c00317 	ldw	r3,12(r2)
1000939c:	10800217 	ldw	r2,8(r2)
100093a0:	81bfff04 	addi	r6,r16,-4
100093a4:	bc400204 	addi	r17,r23,8
100093a8:	10c00315 	stw	r3,12(r2)
100093ac:	18800215 	stw	r2,8(r3)
100093b0:	b9400217 	ldw	r5,8(r23)
100093b4:	b8c00317 	ldw	r3,12(r23)
100093b8:	00800904 	movi	r2,36
100093bc:	28c00315 	stw	r3,12(r5)
100093c0:	19400215 	stw	r5,8(r3)
100093c4:	1180ef36 	bltu	r2,r6,10009784 <_realloc_r+0x4c0>
100093c8:	008004c4 	movi	r2,19
100093cc:	1180da2e 	bgeu	r2,r6,10009738 <_realloc_r+0x474>
100093d0:	98800017 	ldw	r2,0(r19)
100093d4:	b8800215 	stw	r2,8(r23)
100093d8:	98800117 	ldw	r2,4(r19)
100093dc:	b8800315 	stw	r2,12(r23)
100093e0:	008006c4 	movi	r2,27
100093e4:	1180fc2e 	bgeu	r2,r6,100097d8 <_realloc_r+0x514>
100093e8:	98800217 	ldw	r2,8(r19)
100093ec:	b8800415 	stw	r2,16(r23)
100093f0:	98800317 	ldw	r2,12(r19)
100093f4:	b8800515 	stw	r2,20(r23)
100093f8:	00800904 	movi	r2,36
100093fc:	3080421e 	bne	r6,r2,10009508 <_realloc_r+0x244>
10009400:	98800417 	ldw	r2,16(r19)
10009404:	9cc00604 	addi	r19,r19,24
10009408:	b8c00804 	addi	r3,r23,32
1000940c:	b8800615 	stw	r2,24(r23)
10009410:	98bfff17 	ldw	r2,-4(r19)
10009414:	b8800715 	stw	r2,28(r23)
10009418:	00003d06 	br	10009510 <_realloc_r+0x24c>
1000941c:	01c00404 	movi	r7,16
10009420:	3829883a 	mov	r20,r7
10009424:	003fc206 	br	10009330 <__alt_data_end+0xf8009330>
10009428:	9823883a 	mov	r17,r19
1000942c:	850fc83a 	sub	r7,r16,r20
10009430:	008003c4 	movi	r2,15
10009434:	18c0004c 	andi	r3,r3,1
10009438:	11c04336 	bltu	r2,r7,10009548 <_realloc_r+0x284>
1000943c:	1c06b03a 	or	r3,r3,r16
10009440:	a8c00115 	stw	r3,4(r21)
10009444:	ac21883a 	add	r16,r21,r16
10009448:	80c00117 	ldw	r3,4(r16)
1000944c:	18c00054 	ori	r3,r3,1
10009450:	80c00115 	stw	r3,4(r16)
10009454:	9009883a 	mov	r4,r18
10009458:	000f66c0 	call	1000f66c <__malloc_unlock>
1000945c:	8805883a 	mov	r2,r17
10009460:	dfc00917 	ldw	ra,36(sp)
10009464:	df000817 	ldw	fp,32(sp)
10009468:	ddc00717 	ldw	r23,28(sp)
1000946c:	dd800617 	ldw	r22,24(sp)
10009470:	dd400517 	ldw	r21,20(sp)
10009474:	dd000417 	ldw	r20,16(sp)
10009478:	dcc00317 	ldw	r19,12(sp)
1000947c:	dc800217 	ldw	r18,8(sp)
10009480:	dc400117 	ldw	r17,4(sp)
10009484:	dc000017 	ldw	r16,0(sp)
10009488:	dec00a04 	addi	sp,sp,40
1000948c:	f800283a 	ret
10009490:	18c0004c 	andi	r3,r3,1
10009494:	1800391e 	bne	r3,zero,1000957c <_realloc_r+0x2b8>
10009498:	9dfffe17 	ldw	r23,-8(r19)
1000949c:	00bfff04 	movi	r2,-4
100094a0:	adefc83a 	sub	r23,r21,r23
100094a4:	b9400117 	ldw	r5,4(r23)
100094a8:	288a703a 	and	r5,r5,r2
100094ac:	2c2d883a 	add	r22,r5,r16
100094b0:	b1c03216 	blt	r22,r7,1000957c <_realloc_r+0x2b8>
100094b4:	b8800317 	ldw	r2,12(r23)
100094b8:	b8c00217 	ldw	r3,8(r23)
100094bc:	81bfff04 	addi	r6,r16,-4
100094c0:	01000904 	movi	r4,36
100094c4:	18800315 	stw	r2,12(r3)
100094c8:	10c00215 	stw	r3,8(r2)
100094cc:	bc400204 	addi	r17,r23,8
100094d0:	2180ac36 	bltu	r4,r6,10009784 <_realloc_r+0x4c0>
100094d4:	008004c4 	movi	r2,19
100094d8:	1180972e 	bgeu	r2,r6,10009738 <_realloc_r+0x474>
100094dc:	98800017 	ldw	r2,0(r19)
100094e0:	b8800215 	stw	r2,8(r23)
100094e4:	98800117 	ldw	r2,4(r19)
100094e8:	b8800315 	stw	r2,12(r23)
100094ec:	008006c4 	movi	r2,27
100094f0:	1180b92e 	bgeu	r2,r6,100097d8 <_realloc_r+0x514>
100094f4:	98800217 	ldw	r2,8(r19)
100094f8:	b8800415 	stw	r2,16(r23)
100094fc:	98800317 	ldw	r2,12(r19)
10009500:	b8800515 	stw	r2,20(r23)
10009504:	313fbe26 	beq	r6,r4,10009400 <__alt_data_end+0xf8009400>
10009508:	b8c00604 	addi	r3,r23,24
1000950c:	9cc00404 	addi	r19,r19,16
10009510:	98800017 	ldw	r2,0(r19)
10009514:	b021883a 	mov	r16,r22
10009518:	b82b883a 	mov	r21,r23
1000951c:	18800015 	stw	r2,0(r3)
10009520:	98800117 	ldw	r2,4(r19)
10009524:	18800115 	stw	r2,4(r3)
10009528:	98800217 	ldw	r2,8(r19)
1000952c:	18800215 	stw	r2,8(r3)
10009530:	b8c00117 	ldw	r3,4(r23)
10009534:	003fbd06 	br	1000942c <__alt_data_end+0xf800942c>
10009538:	00800304 	movi	r2,12
1000953c:	90800015 	stw	r2,0(r18)
10009540:	0005883a 	mov	r2,zero
10009544:	003fc606 	br	10009460 <__alt_data_end+0xf8009460>
10009548:	1d06b03a 	or	r3,r3,r20
1000954c:	ad0b883a 	add	r5,r21,r20
10009550:	a8c00115 	stw	r3,4(r21)
10009554:	38800054 	ori	r2,r7,1
10009558:	28800115 	stw	r2,4(r5)
1000955c:	29cf883a 	add	r7,r5,r7
10009560:	38800117 	ldw	r2,4(r7)
10009564:	9009883a 	mov	r4,r18
10009568:	29400204 	addi	r5,r5,8
1000956c:	10800054 	ori	r2,r2,1
10009570:	38800115 	stw	r2,4(r7)
10009574:	0006a980 	call	10006a98 <_free_r>
10009578:	003fb606 	br	10009454 <__alt_data_end+0xf8009454>
1000957c:	880b883a 	mov	r5,r17
10009580:	9009883a 	mov	r4,r18
10009584:	00076340 	call	10007634 <_malloc_r>
10009588:	1023883a 	mov	r17,r2
1000958c:	1000aa26 	beq	r2,zero,10009838 <_realloc_r+0x574>
10009590:	98ffff17 	ldw	r3,-4(r19)
10009594:	113ffe04 	addi	r4,r2,-8
10009598:	00bfff84 	movi	r2,-2
1000959c:	1884703a 	and	r2,r3,r2
100095a0:	a885883a 	add	r2,r21,r2
100095a4:	20808626 	beq	r4,r2,100097c0 <_realloc_r+0x4fc>
100095a8:	81bfff04 	addi	r6,r16,-4
100095ac:	00800904 	movi	r2,36
100095b0:	11807036 	bltu	r2,r6,10009774 <_realloc_r+0x4b0>
100095b4:	00c004c4 	movi	r3,19
100095b8:	19805636 	bltu	r3,r6,10009714 <_realloc_r+0x450>
100095bc:	8805883a 	mov	r2,r17
100095c0:	9807883a 	mov	r3,r19
100095c4:	19000017 	ldw	r4,0(r3)
100095c8:	11000015 	stw	r4,0(r2)
100095cc:	19000117 	ldw	r4,4(r3)
100095d0:	11000115 	stw	r4,4(r2)
100095d4:	18c00217 	ldw	r3,8(r3)
100095d8:	10c00215 	stw	r3,8(r2)
100095dc:	980b883a 	mov	r5,r19
100095e0:	9009883a 	mov	r4,r18
100095e4:	0006a980 	call	10006a98 <_free_r>
100095e8:	9009883a 	mov	r4,r18
100095ec:	000f66c0 	call	1000f66c <__malloc_unlock>
100095f0:	8805883a 	mov	r2,r17
100095f4:	003f9a06 	br	10009460 <__alt_data_end+0xf8009460>
100095f8:	300b883a 	mov	r5,r6
100095fc:	dfc00917 	ldw	ra,36(sp)
10009600:	df000817 	ldw	fp,32(sp)
10009604:	ddc00717 	ldw	r23,28(sp)
10009608:	dd800617 	ldw	r22,24(sp)
1000960c:	dd400517 	ldw	r21,20(sp)
10009610:	dd000417 	ldw	r20,16(sp)
10009614:	dcc00317 	ldw	r19,12(sp)
10009618:	dc800217 	ldw	r18,8(sp)
1000961c:	dc400117 	ldw	r17,4(sp)
10009620:	dc000017 	ldw	r16,0(sp)
10009624:	dec00a04 	addi	sp,sp,40
10009628:	00076341 	jmpi	10007634 <_malloc_r>
1000962c:	11400317 	ldw	r5,12(r2)
10009630:	10800217 	ldw	r2,8(r2)
10009634:	9823883a 	mov	r17,r19
10009638:	2021883a 	mov	r16,r4
1000963c:	11400315 	stw	r5,12(r2)
10009640:	28800215 	stw	r2,8(r5)
10009644:	003f7906 	br	1000942c <__alt_data_end+0xf800942c>
10009648:	21000117 	ldw	r4,4(r4)
1000964c:	00bfff04 	movi	r2,-4
10009650:	a1800404 	addi	r6,r20,16
10009654:	2088703a 	and	r4,r4,r2
10009658:	2409883a 	add	r4,r4,r16
1000965c:	2180380e 	bge	r4,r6,10009740 <_realloc_r+0x47c>
10009660:	18c0004c 	andi	r3,r3,1
10009664:	183fc51e 	bne	r3,zero,1000957c <__alt_data_end+0xf800957c>
10009668:	9dfffe17 	ldw	r23,-8(r19)
1000966c:	adefc83a 	sub	r23,r21,r23
10009670:	b9400117 	ldw	r5,4(r23)
10009674:	288a703a 	and	r5,r5,r2
10009678:	216d883a 	add	r22,r4,r5
1000967c:	b1bf8b16 	blt	r22,r6,100094ac <__alt_data_end+0xf80094ac>
10009680:	b8800317 	ldw	r2,12(r23)
10009684:	b8c00217 	ldw	r3,8(r23)
10009688:	81bfff04 	addi	r6,r16,-4
1000968c:	01000904 	movi	r4,36
10009690:	18800315 	stw	r2,12(r3)
10009694:	10c00215 	stw	r3,8(r2)
10009698:	bc400204 	addi	r17,r23,8
1000969c:	21805a36 	bltu	r4,r6,10009808 <_realloc_r+0x544>
100096a0:	008004c4 	movi	r2,19
100096a4:	1180562e 	bgeu	r2,r6,10009800 <_realloc_r+0x53c>
100096a8:	98800017 	ldw	r2,0(r19)
100096ac:	b8800215 	stw	r2,8(r23)
100096b0:	98800117 	ldw	r2,4(r19)
100096b4:	b8800315 	stw	r2,12(r23)
100096b8:	008006c4 	movi	r2,27
100096bc:	11805636 	bltu	r2,r6,10009818 <_realloc_r+0x554>
100096c0:	b8800404 	addi	r2,r23,16
100096c4:	9cc00204 	addi	r19,r19,8
100096c8:	98c00017 	ldw	r3,0(r19)
100096cc:	10c00015 	stw	r3,0(r2)
100096d0:	98c00117 	ldw	r3,4(r19)
100096d4:	10c00115 	stw	r3,4(r2)
100096d8:	98c00217 	ldw	r3,8(r19)
100096dc:	10c00215 	stw	r3,8(r2)
100096e0:	bd07883a 	add	r3,r23,r20
100096e4:	b505c83a 	sub	r2,r22,r20
100096e8:	e0c00215 	stw	r3,8(fp)
100096ec:	10800054 	ori	r2,r2,1
100096f0:	18800115 	stw	r2,4(r3)
100096f4:	b8800117 	ldw	r2,4(r23)
100096f8:	9009883a 	mov	r4,r18
100096fc:	1080004c 	andi	r2,r2,1
10009700:	a0a8b03a 	or	r20,r20,r2
10009704:	bd000115 	stw	r20,4(r23)
10009708:	000f66c0 	call	1000f66c <__malloc_unlock>
1000970c:	8805883a 	mov	r2,r17
10009710:	003f5306 	br	10009460 <__alt_data_end+0xf8009460>
10009714:	98c00017 	ldw	r3,0(r19)
10009718:	88c00015 	stw	r3,0(r17)
1000971c:	98c00117 	ldw	r3,4(r19)
10009720:	88c00115 	stw	r3,4(r17)
10009724:	00c006c4 	movi	r3,27
10009728:	19801d36 	bltu	r3,r6,100097a0 <_realloc_r+0x4dc>
1000972c:	88800204 	addi	r2,r17,8
10009730:	98c00204 	addi	r3,r19,8
10009734:	003fa306 	br	100095c4 <__alt_data_end+0xf80095c4>
10009738:	8807883a 	mov	r3,r17
1000973c:	003f7406 	br	10009510 <__alt_data_end+0xf8009510>
10009740:	ad2b883a 	add	r21,r21,r20
10009744:	2505c83a 	sub	r2,r4,r20
10009748:	e5400215 	stw	r21,8(fp)
1000974c:	10800054 	ori	r2,r2,1
10009750:	a8800115 	stw	r2,4(r21)
10009754:	98bfff17 	ldw	r2,-4(r19)
10009758:	9009883a 	mov	r4,r18
1000975c:	1080004c 	andi	r2,r2,1
10009760:	a0a8b03a 	or	r20,r20,r2
10009764:	9d3fff15 	stw	r20,-4(r19)
10009768:	000f66c0 	call	1000f66c <__malloc_unlock>
1000976c:	9805883a 	mov	r2,r19
10009770:	003f3b06 	br	10009460 <__alt_data_end+0xf8009460>
10009774:	8809883a 	mov	r4,r17
10009778:	980b883a 	mov	r5,r19
1000977c:	0007ffc0 	call	10007ffc <memmove>
10009780:	003f9606 	br	100095dc <__alt_data_end+0xf80095dc>
10009784:	8809883a 	mov	r4,r17
10009788:	980b883a 	mov	r5,r19
1000978c:	0007ffc0 	call	10007ffc <memmove>
10009790:	b8c00117 	ldw	r3,4(r23)
10009794:	b021883a 	mov	r16,r22
10009798:	b82b883a 	mov	r21,r23
1000979c:	003f2306 	br	1000942c <__alt_data_end+0xf800942c>
100097a0:	98c00217 	ldw	r3,8(r19)
100097a4:	88c00215 	stw	r3,8(r17)
100097a8:	98c00317 	ldw	r3,12(r19)
100097ac:	88c00315 	stw	r3,12(r17)
100097b0:	30800c26 	beq	r6,r2,100097e4 <_realloc_r+0x520>
100097b4:	88800404 	addi	r2,r17,16
100097b8:	98c00404 	addi	r3,r19,16
100097bc:	003f8106 	br	100095c4 <__alt_data_end+0xf80095c4>
100097c0:	893fff17 	ldw	r4,-4(r17)
100097c4:	00bfff04 	movi	r2,-4
100097c8:	9823883a 	mov	r17,r19
100097cc:	2084703a 	and	r2,r4,r2
100097d0:	80a1883a 	add	r16,r16,r2
100097d4:	003f1506 	br	1000942c <__alt_data_end+0xf800942c>
100097d8:	b8c00404 	addi	r3,r23,16
100097dc:	9cc00204 	addi	r19,r19,8
100097e0:	003f4b06 	br	10009510 <__alt_data_end+0xf8009510>
100097e4:	99000417 	ldw	r4,16(r19)
100097e8:	88800604 	addi	r2,r17,24
100097ec:	98c00604 	addi	r3,r19,24
100097f0:	89000415 	stw	r4,16(r17)
100097f4:	99000517 	ldw	r4,20(r19)
100097f8:	89000515 	stw	r4,20(r17)
100097fc:	003f7106 	br	100095c4 <__alt_data_end+0xf80095c4>
10009800:	8805883a 	mov	r2,r17
10009804:	003fb006 	br	100096c8 <__alt_data_end+0xf80096c8>
10009808:	8809883a 	mov	r4,r17
1000980c:	980b883a 	mov	r5,r19
10009810:	0007ffc0 	call	10007ffc <memmove>
10009814:	003fb206 	br	100096e0 <__alt_data_end+0xf80096e0>
10009818:	98800217 	ldw	r2,8(r19)
1000981c:	b8800415 	stw	r2,16(r23)
10009820:	98800317 	ldw	r2,12(r19)
10009824:	b8800515 	stw	r2,20(r23)
10009828:	31000726 	beq	r6,r4,10009848 <_realloc_r+0x584>
1000982c:	b8800604 	addi	r2,r23,24
10009830:	9cc00404 	addi	r19,r19,16
10009834:	003fa406 	br	100096c8 <__alt_data_end+0xf80096c8>
10009838:	9009883a 	mov	r4,r18
1000983c:	000f66c0 	call	1000f66c <__malloc_unlock>
10009840:	0005883a 	mov	r2,zero
10009844:	003f0606 	br	10009460 <__alt_data_end+0xf8009460>
10009848:	98c00417 	ldw	r3,16(r19)
1000984c:	9cc00604 	addi	r19,r19,24
10009850:	b8800804 	addi	r2,r23,32
10009854:	b8c00615 	stw	r3,24(r23)
10009858:	98ffff17 	ldw	r3,-4(r19)
1000985c:	b8c00715 	stw	r3,28(r23)
10009860:	003f9906 	br	100096c8 <__alt_data_end+0xf80096c8>

10009864 <__fpclassifyd>:
10009864:	00a00034 	movhi	r2,32768
10009868:	10bfffc4 	addi	r2,r2,-1
1000986c:	2884703a 	and	r2,r5,r2
10009870:	10000726 	beq	r2,zero,10009890 <__fpclassifyd+0x2c>
10009874:	00fffc34 	movhi	r3,65520
10009878:	019ff834 	movhi	r6,32736
1000987c:	28c7883a 	add	r3,r5,r3
10009880:	31bfffc4 	addi	r6,r6,-1
10009884:	30c00536 	bltu	r6,r3,1000989c <__fpclassifyd+0x38>
10009888:	00800104 	movi	r2,4
1000988c:	f800283a 	ret
10009890:	2000021e 	bne	r4,zero,1000989c <__fpclassifyd+0x38>
10009894:	00800084 	movi	r2,2
10009898:	f800283a 	ret
1000989c:	00dffc34 	movhi	r3,32752
100098a0:	019ff834 	movhi	r6,32736
100098a4:	28cb883a 	add	r5,r5,r3
100098a8:	31bfffc4 	addi	r6,r6,-1
100098ac:	317ff62e 	bgeu	r6,r5,10009888 <__alt_data_end+0xf8009888>
100098b0:	01400434 	movhi	r5,16
100098b4:	297fffc4 	addi	r5,r5,-1
100098b8:	28800236 	bltu	r5,r2,100098c4 <__fpclassifyd+0x60>
100098bc:	008000c4 	movi	r2,3
100098c0:	f800283a 	ret
100098c4:	10c00226 	beq	r2,r3,100098d0 <__fpclassifyd+0x6c>
100098c8:	0005883a 	mov	r2,zero
100098cc:	f800283a 	ret
100098d0:	2005003a 	cmpeq	r2,r4,zero
100098d4:	f800283a 	ret

100098d8 <_sbrk_r>:
100098d8:	defffd04 	addi	sp,sp,-12
100098dc:	dc000015 	stw	r16,0(sp)
100098e0:	04040074 	movhi	r16,4097
100098e4:	dc400115 	stw	r17,4(sp)
100098e8:	84164e04 	addi	r16,r16,22840
100098ec:	2023883a 	mov	r17,r4
100098f0:	2809883a 	mov	r4,r5
100098f4:	dfc00215 	stw	ra,8(sp)
100098f8:	80000015 	stw	zero,0(r16)
100098fc:	000f8600 	call	1000f860 <sbrk>
10009900:	00ffffc4 	movi	r3,-1
10009904:	10c00526 	beq	r2,r3,1000991c <_sbrk_r+0x44>
10009908:	dfc00217 	ldw	ra,8(sp)
1000990c:	dc400117 	ldw	r17,4(sp)
10009910:	dc000017 	ldw	r16,0(sp)
10009914:	dec00304 	addi	sp,sp,12
10009918:	f800283a 	ret
1000991c:	80c00017 	ldw	r3,0(r16)
10009920:	183ff926 	beq	r3,zero,10009908 <__alt_data_end+0xf8009908>
10009924:	88c00015 	stw	r3,0(r17)
10009928:	003ff706 	br	10009908 <__alt_data_end+0xf8009908>

1000992c <__sread>:
1000992c:	defffe04 	addi	sp,sp,-8
10009930:	dc000015 	stw	r16,0(sp)
10009934:	2821883a 	mov	r16,r5
10009938:	2940038f 	ldh	r5,14(r5)
1000993c:	dfc00115 	stw	ra,4(sp)
10009940:	000b5e80 	call	1000b5e8 <_read_r>
10009944:	10000716 	blt	r2,zero,10009964 <__sread+0x38>
10009948:	80c01417 	ldw	r3,80(r16)
1000994c:	1887883a 	add	r3,r3,r2
10009950:	80c01415 	stw	r3,80(r16)
10009954:	dfc00117 	ldw	ra,4(sp)
10009958:	dc000017 	ldw	r16,0(sp)
1000995c:	dec00204 	addi	sp,sp,8
10009960:	f800283a 	ret
10009964:	80c0030b 	ldhu	r3,12(r16)
10009968:	18fbffcc 	andi	r3,r3,61439
1000996c:	80c0030d 	sth	r3,12(r16)
10009970:	dfc00117 	ldw	ra,4(sp)
10009974:	dc000017 	ldw	r16,0(sp)
10009978:	dec00204 	addi	sp,sp,8
1000997c:	f800283a 	ret

10009980 <__seofread>:
10009980:	0005883a 	mov	r2,zero
10009984:	f800283a 	ret

10009988 <__swrite>:
10009988:	2880030b 	ldhu	r2,12(r5)
1000998c:	defffb04 	addi	sp,sp,-20
10009990:	dcc00315 	stw	r19,12(sp)
10009994:	dc800215 	stw	r18,8(sp)
10009998:	dc400115 	stw	r17,4(sp)
1000999c:	dc000015 	stw	r16,0(sp)
100099a0:	dfc00415 	stw	ra,16(sp)
100099a4:	10c0400c 	andi	r3,r2,256
100099a8:	2821883a 	mov	r16,r5
100099ac:	2027883a 	mov	r19,r4
100099b0:	3025883a 	mov	r18,r6
100099b4:	3823883a 	mov	r17,r7
100099b8:	18000526 	beq	r3,zero,100099d0 <__swrite+0x48>
100099bc:	2940038f 	ldh	r5,14(r5)
100099c0:	000d883a 	mov	r6,zero
100099c4:	01c00084 	movi	r7,2
100099c8:	000b58c0 	call	1000b58c <_lseek_r>
100099cc:	8080030b 	ldhu	r2,12(r16)
100099d0:	8140038f 	ldh	r5,14(r16)
100099d4:	10bbffcc 	andi	r2,r2,61439
100099d8:	9809883a 	mov	r4,r19
100099dc:	900d883a 	mov	r6,r18
100099e0:	880f883a 	mov	r7,r17
100099e4:	8080030d 	sth	r2,12(r16)
100099e8:	dfc00417 	ldw	ra,16(sp)
100099ec:	dcc00317 	ldw	r19,12(sp)
100099f0:	dc800217 	ldw	r18,8(sp)
100099f4:	dc400117 	ldw	r17,4(sp)
100099f8:	dc000017 	ldw	r16,0(sp)
100099fc:	dec00504 	addi	sp,sp,20
10009a00:	000b0681 	jmpi	1000b068 <_write_r>

10009a04 <__sseek>:
10009a04:	defffe04 	addi	sp,sp,-8
10009a08:	dc000015 	stw	r16,0(sp)
10009a0c:	2821883a 	mov	r16,r5
10009a10:	2940038f 	ldh	r5,14(r5)
10009a14:	dfc00115 	stw	ra,4(sp)
10009a18:	000b58c0 	call	1000b58c <_lseek_r>
10009a1c:	00ffffc4 	movi	r3,-1
10009a20:	10c00826 	beq	r2,r3,10009a44 <__sseek+0x40>
10009a24:	80c0030b 	ldhu	r3,12(r16)
10009a28:	80801415 	stw	r2,80(r16)
10009a2c:	18c40014 	ori	r3,r3,4096
10009a30:	80c0030d 	sth	r3,12(r16)
10009a34:	dfc00117 	ldw	ra,4(sp)
10009a38:	dc000017 	ldw	r16,0(sp)
10009a3c:	dec00204 	addi	sp,sp,8
10009a40:	f800283a 	ret
10009a44:	80c0030b 	ldhu	r3,12(r16)
10009a48:	18fbffcc 	andi	r3,r3,61439
10009a4c:	80c0030d 	sth	r3,12(r16)
10009a50:	dfc00117 	ldw	ra,4(sp)
10009a54:	dc000017 	ldw	r16,0(sp)
10009a58:	dec00204 	addi	sp,sp,8
10009a5c:	f800283a 	ret

10009a60 <__sclose>:
10009a60:	2940038f 	ldh	r5,14(r5)
10009a64:	000b0c41 	jmpi	1000b0c4 <_close_r>

10009a68 <strcmp>:
10009a68:	2144b03a 	or	r2,r4,r5
10009a6c:	108000cc 	andi	r2,r2,3
10009a70:	1000171e 	bne	r2,zero,10009ad0 <strcmp+0x68>
10009a74:	20800017 	ldw	r2,0(r4)
10009a78:	28c00017 	ldw	r3,0(r5)
10009a7c:	10c0141e 	bne	r2,r3,10009ad0 <strcmp+0x68>
10009a80:	027fbff4 	movhi	r9,65279
10009a84:	4a7fbfc4 	addi	r9,r9,-257
10009a88:	0086303a 	nor	r3,zero,r2
10009a8c:	02202074 	movhi	r8,32897
10009a90:	1245883a 	add	r2,r2,r9
10009a94:	42202004 	addi	r8,r8,-32640
10009a98:	10c4703a 	and	r2,r2,r3
10009a9c:	1204703a 	and	r2,r2,r8
10009aa0:	10000226 	beq	r2,zero,10009aac <strcmp+0x44>
10009aa4:	00001706 	br	10009b04 <strcmp+0x9c>
10009aa8:	1000161e 	bne	r2,zero,10009b04 <strcmp+0x9c>
10009aac:	21000104 	addi	r4,r4,4
10009ab0:	20c00017 	ldw	r3,0(r4)
10009ab4:	29400104 	addi	r5,r5,4
10009ab8:	29800017 	ldw	r6,0(r5)
10009abc:	1a4f883a 	add	r7,r3,r9
10009ac0:	00c4303a 	nor	r2,zero,r3
10009ac4:	3884703a 	and	r2,r7,r2
10009ac8:	1204703a 	and	r2,r2,r8
10009acc:	19bff626 	beq	r3,r6,10009aa8 <__alt_data_end+0xf8009aa8>
10009ad0:	20800007 	ldb	r2,0(r4)
10009ad4:	1000051e 	bne	r2,zero,10009aec <strcmp+0x84>
10009ad8:	00000606 	br	10009af4 <strcmp+0x8c>
10009adc:	21000044 	addi	r4,r4,1
10009ae0:	20800007 	ldb	r2,0(r4)
10009ae4:	29400044 	addi	r5,r5,1
10009ae8:	10000226 	beq	r2,zero,10009af4 <strcmp+0x8c>
10009aec:	28c00007 	ldb	r3,0(r5)
10009af0:	10fffa26 	beq	r2,r3,10009adc <__alt_data_end+0xf8009adc>
10009af4:	20800003 	ldbu	r2,0(r4)
10009af8:	28c00003 	ldbu	r3,0(r5)
10009afc:	10c5c83a 	sub	r2,r2,r3
10009b00:	f800283a 	ret
10009b04:	0005883a 	mov	r2,zero
10009b08:	f800283a 	ret

10009b0c <__sprint_r.part.0>:
10009b0c:	28801917 	ldw	r2,100(r5)
10009b10:	defff604 	addi	sp,sp,-40
10009b14:	dd400515 	stw	r21,20(sp)
10009b18:	dcc00315 	stw	r19,12(sp)
10009b1c:	dfc00915 	stw	ra,36(sp)
10009b20:	df000815 	stw	fp,32(sp)
10009b24:	ddc00715 	stw	r23,28(sp)
10009b28:	dd800615 	stw	r22,24(sp)
10009b2c:	dd000415 	stw	r20,16(sp)
10009b30:	dc800215 	stw	r18,8(sp)
10009b34:	dc400115 	stw	r17,4(sp)
10009b38:	dc000015 	stw	r16,0(sp)
10009b3c:	1088000c 	andi	r2,r2,8192
10009b40:	2827883a 	mov	r19,r5
10009b44:	302b883a 	mov	r21,r6
10009b48:	10002d26 	beq	r2,zero,10009c00 <__sprint_r.part.0+0xf4>
10009b4c:	30800217 	ldw	r2,8(r6)
10009b50:	35800017 	ldw	r22,0(r6)
10009b54:	10002826 	beq	r2,zero,10009bf8 <__sprint_r.part.0+0xec>
10009b58:	2029883a 	mov	r20,r4
10009b5c:	b5c00104 	addi	r23,r22,4
10009b60:	04bfffc4 	movi	r18,-1
10009b64:	bc400017 	ldw	r17,0(r23)
10009b68:	b4000017 	ldw	r16,0(r22)
10009b6c:	0039883a 	mov	fp,zero
10009b70:	8822d0ba 	srli	r17,r17,2
10009b74:	04400316 	blt	zero,r17,10009b84 <__sprint_r.part.0+0x78>
10009b78:	00001706 	br	10009bd8 <__sprint_r.part.0+0xcc>
10009b7c:	84000104 	addi	r16,r16,4
10009b80:	8f001526 	beq	r17,fp,10009bd8 <__sprint_r.part.0+0xcc>
10009b84:	81400017 	ldw	r5,0(r16)
10009b88:	a009883a 	mov	r4,r20
10009b8c:	980d883a 	mov	r6,r19
10009b90:	000b3040 	call	1000b304 <_fputwc_r>
10009b94:	e7000044 	addi	fp,fp,1
10009b98:	14bff81e 	bne	r2,r18,10009b7c <__alt_data_end+0xf8009b7c>
10009b9c:	9005883a 	mov	r2,r18
10009ba0:	a8000215 	stw	zero,8(r21)
10009ba4:	a8000115 	stw	zero,4(r21)
10009ba8:	dfc00917 	ldw	ra,36(sp)
10009bac:	df000817 	ldw	fp,32(sp)
10009bb0:	ddc00717 	ldw	r23,28(sp)
10009bb4:	dd800617 	ldw	r22,24(sp)
10009bb8:	dd400517 	ldw	r21,20(sp)
10009bbc:	dd000417 	ldw	r20,16(sp)
10009bc0:	dcc00317 	ldw	r19,12(sp)
10009bc4:	dc800217 	ldw	r18,8(sp)
10009bc8:	dc400117 	ldw	r17,4(sp)
10009bcc:	dc000017 	ldw	r16,0(sp)
10009bd0:	dec00a04 	addi	sp,sp,40
10009bd4:	f800283a 	ret
10009bd8:	a8c00217 	ldw	r3,8(r21)
10009bdc:	8c63883a 	add	r17,r17,r17
10009be0:	8c63883a 	add	r17,r17,r17
10009be4:	1c45c83a 	sub	r2,r3,r17
10009be8:	a8800215 	stw	r2,8(r21)
10009bec:	b5800204 	addi	r22,r22,8
10009bf0:	bdc00204 	addi	r23,r23,8
10009bf4:	103fdb1e 	bne	r2,zero,10009b64 <__alt_data_end+0xf8009b64>
10009bf8:	0005883a 	mov	r2,zero
10009bfc:	003fe806 	br	10009ba0 <__alt_data_end+0xf8009ba0>
10009c00:	0006d880 	call	10006d88 <__sfvwrite_r>
10009c04:	003fe606 	br	10009ba0 <__alt_data_end+0xf8009ba0>

10009c08 <__sprint_r>:
10009c08:	30c00217 	ldw	r3,8(r6)
10009c0c:	18000126 	beq	r3,zero,10009c14 <__sprint_r+0xc>
10009c10:	0009b0c1 	jmpi	10009b0c <__sprint_r.part.0>
10009c14:	30000115 	stw	zero,4(r6)
10009c18:	0005883a 	mov	r2,zero
10009c1c:	f800283a 	ret

10009c20 <___vfiprintf_internal_r>:
10009c20:	defeca04 	addi	sp,sp,-1240
10009c24:	dcc12f15 	stw	r19,1212(sp)
10009c28:	dfc13515 	stw	ra,1236(sp)
10009c2c:	df013415 	stw	fp,1232(sp)
10009c30:	ddc13315 	stw	r23,1228(sp)
10009c34:	dd813215 	stw	r22,1224(sp)
10009c38:	dd413115 	stw	r21,1220(sp)
10009c3c:	dd013015 	stw	r20,1216(sp)
10009c40:	dc812e15 	stw	r18,1208(sp)
10009c44:	dc412d15 	stw	r17,1204(sp)
10009c48:	dc012c15 	stw	r16,1200(sp)
10009c4c:	d9012115 	stw	r4,1156(sp)
10009c50:	d9412015 	stw	r5,1152(sp)
10009c54:	d9c12315 	stw	r7,1164(sp)
10009c58:	3027883a 	mov	r19,r6
10009c5c:	20000226 	beq	r4,zero,10009c68 <___vfiprintf_internal_r+0x48>
10009c60:	20800e17 	ldw	r2,56(r4)
10009c64:	1000f726 	beq	r2,zero,1000a044 <___vfiprintf_internal_r+0x424>
10009c68:	d8812017 	ldw	r2,1152(sp)
10009c6c:	10c0030b 	ldhu	r3,12(r2)
10009c70:	1908000c 	andi	r4,r3,8192
10009c74:	1805883a 	mov	r2,r3
10009c78:	2000081e 	bne	r4,zero,10009c9c <___vfiprintf_internal_r+0x7c>
10009c7c:	d9412017 	ldw	r5,1152(sp)
10009c80:	18880014 	ori	r2,r3,8192
10009c84:	00f7ffc4 	movi	r3,-8193
10009c88:	29001917 	ldw	r4,100(r5)
10009c8c:	2880030d 	sth	r2,12(r5)
10009c90:	20c8703a 	and	r4,r4,r3
10009c94:	29001915 	stw	r4,100(r5)
10009c98:	1007883a 	mov	r3,r2
10009c9c:	1100020c 	andi	r4,r2,8
10009ca0:	2000a726 	beq	r4,zero,10009f40 <___vfiprintf_internal_r+0x320>
10009ca4:	d9412017 	ldw	r5,1152(sp)
10009ca8:	29000417 	ldw	r4,16(r5)
10009cac:	2000a426 	beq	r4,zero,10009f40 <___vfiprintf_internal_r+0x320>
10009cb0:	1080068c 	andi	r2,r2,26
10009cb4:	01000284 	movi	r4,10
10009cb8:	1100ab26 	beq	r2,r4,10009f68 <___vfiprintf_internal_r+0x348>
10009cbc:	d9010a04 	addi	r4,sp,1064
10009cc0:	d94109c4 	addi	r5,sp,1063
10009cc4:	07040074 	movhi	fp,4097
10009cc8:	04440074 	movhi	r17,4097
10009ccc:	2145c83a 	sub	r2,r4,r5
10009cd0:	e7088004 	addi	fp,fp,8704
10009cd4:	8c487c04 	addi	r17,r17,8688
10009cd8:	d9011e15 	stw	r4,1144(sp)
10009cdc:	d9411f15 	stw	r5,1148(sp)
10009ce0:	dec11a15 	stw	sp,1128(sp)
10009ce4:	d8011c15 	stw	zero,1136(sp)
10009ce8:	d8011b15 	stw	zero,1132(sp)
10009cec:	d8012715 	stw	zero,1180(sp)
10009cf0:	d8012515 	stw	zero,1172(sp)
10009cf4:	d811883a 	mov	r8,sp
10009cf8:	d8812815 	stw	r2,1184(sp)
10009cfc:	982f883a 	mov	r23,r19
10009d00:	b8800007 	ldb	r2,0(r23)
10009d04:	1003b026 	beq	r2,zero,1000abc8 <___vfiprintf_internal_r+0xfa8>
10009d08:	01000944 	movi	r4,37
10009d0c:	1103ae26 	beq	r2,r4,1000abc8 <___vfiprintf_internal_r+0xfa8>
10009d10:	b805883a 	mov	r2,r23
10009d14:	00000106 	br	10009d1c <___vfiprintf_internal_r+0xfc>
10009d18:	19000326 	beq	r3,r4,10009d28 <___vfiprintf_internal_r+0x108>
10009d1c:	10800044 	addi	r2,r2,1
10009d20:	10c00007 	ldb	r3,0(r2)
10009d24:	183ffc1e 	bne	r3,zero,10009d18 <__alt_data_end+0xf8009d18>
10009d28:	15e1c83a 	sub	r16,r2,r23
10009d2c:	1029883a 	mov	r20,r2
10009d30:	80001026 	beq	r16,zero,10009d74 <___vfiprintf_internal_r+0x154>
10009d34:	d8c11c17 	ldw	r3,1136(sp)
10009d38:	d8811b17 	ldw	r2,1132(sp)
10009d3c:	45c00015 	stw	r23,0(r8)
10009d40:	80c7883a 	add	r3,r16,r3
10009d44:	10800044 	addi	r2,r2,1
10009d48:	44000115 	stw	r16,4(r8)
10009d4c:	d8c11c15 	stw	r3,1136(sp)
10009d50:	d8811b15 	stw	r2,1132(sp)
10009d54:	010001c4 	movi	r4,7
10009d58:	2080740e 	bge	r4,r2,10009f2c <___vfiprintf_internal_r+0x30c>
10009d5c:	1803a71e 	bne	r3,zero,1000abfc <___vfiprintf_internal_r+0xfdc>
10009d60:	d8c12517 	ldw	r3,1172(sp)
10009d64:	d8011b15 	stw	zero,1132(sp)
10009d68:	d811883a 	mov	r8,sp
10009d6c:	1c07883a 	add	r3,r3,r16
10009d70:	d8c12515 	stw	r3,1172(sp)
10009d74:	a0800007 	ldb	r2,0(r20)
10009d78:	1002bf26 	beq	r2,zero,1000a878 <___vfiprintf_internal_r+0xc58>
10009d7c:	a5c00044 	addi	r23,r20,1
10009d80:	a1800047 	ldb	r6,1(r20)
10009d84:	d8011d85 	stb	zero,1142(sp)
10009d88:	d8012205 	stb	zero,1160(sp)
10009d8c:	043fffc4 	movi	r16,-1
10009d90:	d8012415 	stw	zero,1168(sp)
10009d94:	0025883a 	mov	r18,zero
10009d98:	05001604 	movi	r20,88
10009d9c:	05400244 	movi	r21,9
10009da0:	4027883a 	mov	r19,r8
10009da4:	bdc00044 	addi	r23,r23,1
10009da8:	30bff804 	addi	r2,r6,-32
10009dac:	a0825636 	bltu	r20,r2,1000a708 <___vfiprintf_internal_r+0xae8>
10009db0:	100490ba 	slli	r2,r2,2
10009db4:	01040074 	movhi	r4,4097
10009db8:	21277204 	addi	r4,r4,-25144
10009dbc:	1105883a 	add	r2,r2,r4
10009dc0:	10800017 	ldw	r2,0(r2)
10009dc4:	1000683a 	jmp	r2
10009dc8:	1000a698 	cmpnei	zero,r2,666
10009dcc:	1000a708 	cmpgei	zero,r2,668
10009dd0:	1000a708 	cmpgei	zero,r2,668
10009dd4:	1000a6fc 	xorhi	zero,r2,667
10009dd8:	1000a708 	cmpgei	zero,r2,668
10009ddc:	1000a708 	cmpgei	zero,r2,668
10009de0:	1000a708 	cmpgei	zero,r2,668
10009de4:	1000a708 	cmpgei	zero,r2,668
10009de8:	1000a708 	cmpgei	zero,r2,668
10009dec:	1000a708 	cmpgei	zero,r2,668
10009df0:	1000a488 	cmpgei	zero,r2,658
10009df4:	1000a6b0 	cmpltui	zero,r2,666
10009df8:	1000a708 	cmpgei	zero,r2,668
10009dfc:	1000a05c 	xori	zero,r2,641
10009e00:	1000a4ac 	andhi	zero,r2,658
10009e04:	1000a708 	cmpgei	zero,r2,668
10009e08:	1000a068 	cmpgeui	zero,r2,641
10009e0c:	1000a074 	orhi	zero,r2,641
10009e10:	1000a074 	orhi	zero,r2,641
10009e14:	1000a074 	orhi	zero,r2,641
10009e18:	1000a074 	orhi	zero,r2,641
10009e1c:	1000a074 	orhi	zero,r2,641
10009e20:	1000a074 	orhi	zero,r2,641
10009e24:	1000a074 	orhi	zero,r2,641
10009e28:	1000a074 	orhi	zero,r2,641
10009e2c:	1000a074 	orhi	zero,r2,641
10009e30:	1000a708 	cmpgei	zero,r2,668
10009e34:	1000a708 	cmpgei	zero,r2,668
10009e38:	1000a708 	cmpgei	zero,r2,668
10009e3c:	1000a708 	cmpgei	zero,r2,668
10009e40:	1000a708 	cmpgei	zero,r2,668
10009e44:	1000a708 	cmpgei	zero,r2,668
10009e48:	1000a708 	cmpgei	zero,r2,668
10009e4c:	1000a708 	cmpgei	zero,r2,668
10009e50:	1000a708 	cmpgei	zero,r2,668
10009e54:	1000a708 	cmpgei	zero,r2,668
10009e58:	1000a0b4 	orhi	zero,r2,642
10009e5c:	1000a708 	cmpgei	zero,r2,668
10009e60:	1000a708 	cmpgei	zero,r2,668
10009e64:	1000a708 	cmpgei	zero,r2,668
10009e68:	1000a708 	cmpgei	zero,r2,668
10009e6c:	1000a708 	cmpgei	zero,r2,668
10009e70:	1000a708 	cmpgei	zero,r2,668
10009e74:	1000a708 	cmpgei	zero,r2,668
10009e78:	1000a708 	cmpgei	zero,r2,668
10009e7c:	1000a708 	cmpgei	zero,r2,668
10009e80:	1000a708 	cmpgei	zero,r2,668
10009e84:	1000a3a4 	muli	zero,r2,654
10009e88:	1000a708 	cmpgei	zero,r2,668
10009e8c:	1000a708 	cmpgei	zero,r2,668
10009e90:	1000a708 	cmpgei	zero,r2,668
10009e94:	1000a708 	cmpgei	zero,r2,668
10009e98:	1000a708 	cmpgei	zero,r2,668
10009e9c:	1000a3e4 	muli	zero,r2,655
10009ea0:	1000a708 	cmpgei	zero,r2,668
10009ea4:	1000a708 	cmpgei	zero,r2,668
10009ea8:	1000a428 	cmpgeui	zero,r2,656
10009eac:	1000a708 	cmpgei	zero,r2,668
10009eb0:	1000a708 	cmpgei	zero,r2,668
10009eb4:	1000a708 	cmpgei	zero,r2,668
10009eb8:	1000a708 	cmpgei	zero,r2,668
10009ebc:	1000a708 	cmpgei	zero,r2,668
10009ec0:	1000a708 	cmpgei	zero,r2,668
10009ec4:	1000a708 	cmpgei	zero,r2,668
10009ec8:	1000a708 	cmpgei	zero,r2,668
10009ecc:	1000a708 	cmpgei	zero,r2,668
10009ed0:	1000a708 	cmpgei	zero,r2,668
10009ed4:	1000a370 	cmpltui	zero,r2,653
10009ed8:	1000a6c0 	call	11000a6c <_gp+0xfe4c7c>
10009edc:	1000a708 	cmpgei	zero,r2,668
10009ee0:	1000a708 	cmpgei	zero,r2,668
10009ee4:	1000a708 	cmpgei	zero,r2,668
10009ee8:	1000a4fc 	xorhi	zero,r2,659
10009eec:	1000a6c0 	call	11000a6c <_gp+0xfe4c7c>
10009ef0:	1000a708 	cmpgei	zero,r2,668
10009ef4:	1000a708 	cmpgei	zero,r2,668
10009ef8:	1000a414 	ori	zero,r2,656
10009efc:	1000a708 	cmpgei	zero,r2,668
10009f00:	1000a660 	cmpeqi	zero,r2,665
10009f04:	1000a5e8 	cmpgeui	zero,r2,663
10009f08:	1000a61c 	xori	zero,r2,664
10009f0c:	1000a508 	cmpgei	zero,r2,660
10009f10:	1000a708 	cmpgei	zero,r2,668
10009f14:	1000a514 	ori	zero,r2,660
10009f18:	1000a708 	cmpgei	zero,r2,668
10009f1c:	1000a570 	cmpltui	zero,r2,661
10009f20:	1000a708 	cmpgei	zero,r2,668
10009f24:	1000a708 	cmpgei	zero,r2,668
10009f28:	1000a5a4 	muli	zero,r2,662
10009f2c:	42000204 	addi	r8,r8,8
10009f30:	d8c12517 	ldw	r3,1172(sp)
10009f34:	1c07883a 	add	r3,r3,r16
10009f38:	d8c12515 	stw	r3,1172(sp)
10009f3c:	003f8d06 	br	10009d74 <__alt_data_end+0xf8009d74>
10009f40:	d9012117 	ldw	r4,1156(sp)
10009f44:	d9412017 	ldw	r5,1152(sp)
10009f48:	00048e80 	call	100048e8 <__swsetup_r>
10009f4c:	1000301e 	bne	r2,zero,1000a010 <___vfiprintf_internal_r+0x3f0>
10009f50:	d8812017 	ldw	r2,1152(sp)
10009f54:	01000284 	movi	r4,10
10009f58:	10c0030b 	ldhu	r3,12(r2)
10009f5c:	1805883a 	mov	r2,r3
10009f60:	1080068c 	andi	r2,r2,26
10009f64:	113f551e 	bne	r2,r4,10009cbc <__alt_data_end+0xf8009cbc>
10009f68:	d9012017 	ldw	r4,1152(sp)
10009f6c:	2080038b 	ldhu	r2,14(r4)
10009f70:	113fffcc 	andi	r4,r2,65535
10009f74:	2120001c 	xori	r4,r4,32768
10009f78:	21200004 	addi	r4,r4,-32768
10009f7c:	203f4f16 	blt	r4,zero,10009cbc <__alt_data_end+0xf8009cbc>
10009f80:	d9412017 	ldw	r5,1152(sp)
10009f84:	d9012117 	ldw	r4,1156(sp)
10009f88:	d9c12317 	ldw	r7,1164(sp)
10009f8c:	2b001917 	ldw	r12,100(r5)
10009f90:	2ac00717 	ldw	r11,28(r5)
10009f94:	2a800917 	ldw	r10,36(r5)
10009f98:	02010004 	movi	r8,1024
10009f9c:	18ffff4c 	andi	r3,r3,65533
10009fa0:	da0b883a 	add	r5,sp,r8
10009fa4:	980d883a 	mov	r6,r19
10009fa8:	d8c1030d 	sth	r3,1036(sp)
10009fac:	db011915 	stw	r12,1124(sp)
10009fb0:	d881038d 	sth	r2,1038(sp)
10009fb4:	dac10715 	stw	r11,1052(sp)
10009fb8:	da810915 	stw	r10,1060(sp)
10009fbc:	dec10015 	stw	sp,1024(sp)
10009fc0:	dec10415 	stw	sp,1040(sp)
10009fc4:	da010215 	stw	r8,1032(sp)
10009fc8:	da010515 	stw	r8,1044(sp)
10009fcc:	d8010615 	stw	zero,1048(sp)
10009fd0:	0009c200 	call	10009c20 <___vfiprintf_internal_r>
10009fd4:	1021883a 	mov	r16,r2
10009fd8:	10000416 	blt	r2,zero,10009fec <___vfiprintf_internal_r+0x3cc>
10009fdc:	d9012117 	ldw	r4,1156(sp)
10009fe0:	d9410004 	addi	r5,sp,1024
10009fe4:	00063680 	call	10006368 <_fflush_r>
10009fe8:	10040f1e 	bne	r2,zero,1000b028 <___vfiprintf_internal_r+0x1408>
10009fec:	d881030b 	ldhu	r2,1036(sp)
10009ff0:	1080100c 	andi	r2,r2,64
10009ff4:	10000426 	beq	r2,zero,1000a008 <___vfiprintf_internal_r+0x3e8>
10009ff8:	d8c12017 	ldw	r3,1152(sp)
10009ffc:	1880030b 	ldhu	r2,12(r3)
1000a000:	10801014 	ori	r2,r2,64
1000a004:	1880030d 	sth	r2,12(r3)
1000a008:	8005883a 	mov	r2,r16
1000a00c:	00000106 	br	1000a014 <___vfiprintf_internal_r+0x3f4>
1000a010:	00bfffc4 	movi	r2,-1
1000a014:	dfc13517 	ldw	ra,1236(sp)
1000a018:	df013417 	ldw	fp,1232(sp)
1000a01c:	ddc13317 	ldw	r23,1228(sp)
1000a020:	dd813217 	ldw	r22,1224(sp)
1000a024:	dd413117 	ldw	r21,1220(sp)
1000a028:	dd013017 	ldw	r20,1216(sp)
1000a02c:	dcc12f17 	ldw	r19,1212(sp)
1000a030:	dc812e17 	ldw	r18,1208(sp)
1000a034:	dc412d17 	ldw	r17,1204(sp)
1000a038:	dc012c17 	ldw	r16,1200(sp)
1000a03c:	dec13604 	addi	sp,sp,1240
1000a040:	f800283a 	ret
1000a044:	00069240 	call	10006924 <__sinit>
1000a048:	003f0706 	br	10009c68 <__alt_data_end+0xf8009c68>
1000a04c:	d8c12417 	ldw	r3,1168(sp)
1000a050:	d8812315 	stw	r2,1164(sp)
1000a054:	00c7c83a 	sub	r3,zero,r3
1000a058:	d8c12415 	stw	r3,1168(sp)
1000a05c:	94800114 	ori	r18,r18,4
1000a060:	b9800007 	ldb	r6,0(r23)
1000a064:	003f4f06 	br	10009da4 <__alt_data_end+0xf8009da4>
1000a068:	94802014 	ori	r18,r18,128
1000a06c:	b9800007 	ldb	r6,0(r23)
1000a070:	003f4c06 	br	10009da4 <__alt_data_end+0xf8009da4>
1000a074:	dc012615 	stw	r16,1176(sp)
1000a078:	d8012415 	stw	zero,1168(sp)
1000a07c:	35bff404 	addi	r22,r6,-48
1000a080:	0009883a 	mov	r4,zero
1000a084:	b821883a 	mov	r16,r23
1000a088:	01400284 	movi	r5,10
1000a08c:	000c8480 	call	1000c848 <__mulsi3>
1000a090:	81800007 	ldb	r6,0(r16)
1000a094:	1589883a 	add	r4,r2,r22
1000a098:	bdc00044 	addi	r23,r23,1
1000a09c:	35bff404 	addi	r22,r6,-48
1000a0a0:	b821883a 	mov	r16,r23
1000a0a4:	adbff82e 	bgeu	r21,r22,1000a088 <__alt_data_end+0xf800a088>
1000a0a8:	d9012415 	stw	r4,1168(sp)
1000a0ac:	dc012617 	ldw	r16,1176(sp)
1000a0b0:	003f3d06 	br	10009da8 <__alt_data_end+0xf8009da8>
1000a0b4:	d8c12203 	ldbu	r3,1160(sp)
1000a0b8:	94800414 	ori	r18,r18,16
1000a0bc:	9080080c 	andi	r2,r18,32
1000a0c0:	d8c11d85 	stb	r3,1142(sp)
1000a0c4:	9811883a 	mov	r8,r19
1000a0c8:	d8c12317 	ldw	r3,1164(sp)
1000a0cc:	10018226 	beq	r2,zero,1000a6d8 <___vfiprintf_internal_r+0xab8>
1000a0d0:	d9012317 	ldw	r4,1164(sp)
1000a0d4:	18800117 	ldw	r2,4(r3)
1000a0d8:	1cc00017 	ldw	r19,0(r3)
1000a0dc:	21000204 	addi	r4,r4,8
1000a0e0:	d9012315 	stw	r4,1164(sp)
1000a0e4:	102b883a 	mov	r21,r2
1000a0e8:	10030016 	blt	r2,zero,1000acec <___vfiprintf_internal_r+0x10cc>
1000a0ec:	dd811d83 	ldbu	r22,1142(sp)
1000a0f0:	8029883a 	mov	r20,r16
1000a0f4:	00800044 	movi	r2,1
1000a0f8:	9d46b03a 	or	r3,r19,r21
1000a0fc:	80000216 	blt	r16,zero,1000a108 <___vfiprintf_internal_r+0x4e8>
1000a100:	013fdfc4 	movi	r4,-129
1000a104:	9124703a 	and	r18,r18,r4
1000a108:	1801b41e 	bne	r3,zero,1000a7dc <___vfiprintf_internal_r+0xbbc>
1000a10c:	80028126 	beq	r16,zero,1000ab14 <___vfiprintf_internal_r+0xef4>
1000a110:	10803fcc 	andi	r2,r2,255
1000a114:	00c00044 	movi	r3,1
1000a118:	10c1d126 	beq	r2,r3,1000a860 <___vfiprintf_internal_r+0xc40>
1000a11c:	00c00084 	movi	r3,2
1000a120:	10c28626 	beq	r2,r3,1000ab3c <___vfiprintf_internal_r+0xf1c>
1000a124:	d8c10a04 	addi	r3,sp,1064
1000a128:	9808d0fa 	srli	r4,r19,3
1000a12c:	a80a977a 	slli	r5,r21,29
1000a130:	a82ad0fa 	srli	r21,r21,3
1000a134:	9cc001cc 	andi	r19,r19,7
1000a138:	98800c04 	addi	r2,r19,48
1000a13c:	18ffffc4 	addi	r3,r3,-1
1000a140:	2926b03a 	or	r19,r5,r4
1000a144:	18800005 	stb	r2,0(r3)
1000a148:	9d48b03a 	or	r4,r19,r21
1000a14c:	203ff61e 	bne	r4,zero,1000a128 <__alt_data_end+0xf800a128>
1000a150:	9100004c 	andi	r4,r18,1
1000a154:	d8c12215 	stw	r3,1160(sp)
1000a158:	2002b31e 	bne	r4,zero,1000ac28 <___vfiprintf_internal_r+0x1008>
1000a15c:	d9411e17 	ldw	r5,1144(sp)
1000a160:	28e9c83a 	sub	r20,r5,r3
1000a164:	a02b883a 	mov	r21,r20
1000a168:	a400010e 	bge	r20,r16,1000a170 <___vfiprintf_internal_r+0x550>
1000a16c:	802b883a 	mov	r21,r16
1000a170:	b5803fcc 	andi	r22,r22,255
1000a174:	b580201c 	xori	r22,r22,128
1000a178:	b5bfe004 	addi	r22,r22,-128
1000a17c:	b0000126 	beq	r22,zero,1000a184 <___vfiprintf_internal_r+0x564>
1000a180:	ad400044 	addi	r21,r21,1
1000a184:	9280008c 	andi	r10,r18,2
1000a188:	50000126 	beq	r10,zero,1000a190 <___vfiprintf_internal_r+0x570>
1000a18c:	ad400084 	addi	r21,r21,2
1000a190:	9580210c 	andi	r22,r18,132
1000a194:	b001751e 	bne	r22,zero,1000a76c <___vfiprintf_internal_r+0xb4c>
1000a198:	d9012417 	ldw	r4,1168(sp)
1000a19c:	2567c83a 	sub	r19,r4,r21
1000a1a0:	04c1720e 	bge	zero,r19,1000a76c <___vfiprintf_internal_r+0xb4c>
1000a1a4:	01c00404 	movi	r7,16
1000a1a8:	d8c11c17 	ldw	r3,1136(sp)
1000a1ac:	3cc36b0e 	bge	r7,r19,1000af5c <___vfiprintf_internal_r+0x133c>
1000a1b0:	00840074 	movhi	r2,4097
1000a1b4:	10888004 	addi	r2,r2,8704
1000a1b8:	dc012915 	stw	r16,1188(sp)
1000a1bc:	d9011b17 	ldw	r4,1132(sp)
1000a1c0:	9821883a 	mov	r16,r19
1000a1c4:	d8812615 	stw	r2,1176(sp)
1000a1c8:	030001c4 	movi	r12,7
1000a1cc:	5027883a 	mov	r19,r10
1000a1d0:	00000506 	br	1000a1e8 <___vfiprintf_internal_r+0x5c8>
1000a1d4:	21400084 	addi	r5,r4,2
1000a1d8:	42000204 	addi	r8,r8,8
1000a1dc:	1009883a 	mov	r4,r2
1000a1e0:	843ffc04 	addi	r16,r16,-16
1000a1e4:	3c000d0e 	bge	r7,r16,1000a21c <___vfiprintf_internal_r+0x5fc>
1000a1e8:	18c00404 	addi	r3,r3,16
1000a1ec:	20800044 	addi	r2,r4,1
1000a1f0:	47000015 	stw	fp,0(r8)
1000a1f4:	41c00115 	stw	r7,4(r8)
1000a1f8:	d8c11c15 	stw	r3,1136(sp)
1000a1fc:	d8811b15 	stw	r2,1132(sp)
1000a200:	60bff40e 	bge	r12,r2,1000a1d4 <__alt_data_end+0xf800a1d4>
1000a204:	18014b1e 	bne	r3,zero,1000a734 <___vfiprintf_internal_r+0xb14>
1000a208:	843ffc04 	addi	r16,r16,-16
1000a20c:	0009883a 	mov	r4,zero
1000a210:	01400044 	movi	r5,1
1000a214:	d811883a 	mov	r8,sp
1000a218:	3c3ff316 	blt	r7,r16,1000a1e8 <__alt_data_end+0xf800a1e8>
1000a21c:	9815883a 	mov	r10,r19
1000a220:	8027883a 	mov	r19,r16
1000a224:	dc012917 	ldw	r16,1188(sp)
1000a228:	d9012617 	ldw	r4,1176(sp)
1000a22c:	98c7883a 	add	r3,r19,r3
1000a230:	44c00115 	stw	r19,4(r8)
1000a234:	41000015 	stw	r4,0(r8)
1000a238:	d8c11c15 	stw	r3,1136(sp)
1000a23c:	d9411b15 	stw	r5,1132(sp)
1000a240:	008001c4 	movi	r2,7
1000a244:	11425116 	blt	r2,r5,1000ab8c <___vfiprintf_internal_r+0xf6c>
1000a248:	d9011d87 	ldb	r4,1142(sp)
1000a24c:	42000204 	addi	r8,r8,8
1000a250:	28800044 	addi	r2,r5,1
1000a254:	20014a1e 	bne	r4,zero,1000a780 <___vfiprintf_internal_r+0xb60>
1000a258:	50000c26 	beq	r10,zero,1000a28c <___vfiprintf_internal_r+0x66c>
1000a25c:	d9011d04 	addi	r4,sp,1140
1000a260:	18c00084 	addi	r3,r3,2
1000a264:	41000015 	stw	r4,0(r8)
1000a268:	01000084 	movi	r4,2
1000a26c:	41000115 	stw	r4,4(r8)
1000a270:	d8c11c15 	stw	r3,1136(sp)
1000a274:	d8811b15 	stw	r2,1132(sp)
1000a278:	010001c4 	movi	r4,7
1000a27c:	20822016 	blt	r4,r2,1000ab00 <___vfiprintf_internal_r+0xee0>
1000a280:	100b883a 	mov	r5,r2
1000a284:	42000204 	addi	r8,r8,8
1000a288:	10800044 	addi	r2,r2,1
1000a28c:	01002004 	movi	r4,128
1000a290:	b101de26 	beq	r22,r4,1000aa0c <___vfiprintf_internal_r+0xdec>
1000a294:	8521c83a 	sub	r16,r16,r20
1000a298:	0400230e 	bge	zero,r16,1000a328 <___vfiprintf_internal_r+0x708>
1000a29c:	04c00404 	movi	r19,16
1000a2a0:	9c030d0e 	bge	r19,r16,1000aed8 <___vfiprintf_internal_r+0x12b8>
1000a2a4:	00840074 	movhi	r2,4097
1000a2a8:	10887c04 	addi	r2,r2,8688
1000a2ac:	d8812615 	stw	r2,1176(sp)
1000a2b0:	058001c4 	movi	r22,7
1000a2b4:	00000506 	br	1000a2cc <___vfiprintf_internal_r+0x6ac>
1000a2b8:	28800084 	addi	r2,r5,2
1000a2bc:	42000204 	addi	r8,r8,8
1000a2c0:	200b883a 	mov	r5,r4
1000a2c4:	843ffc04 	addi	r16,r16,-16
1000a2c8:	9c000d0e 	bge	r19,r16,1000a300 <___vfiprintf_internal_r+0x6e0>
1000a2cc:	18c00404 	addi	r3,r3,16
1000a2d0:	29000044 	addi	r4,r5,1
1000a2d4:	44400015 	stw	r17,0(r8)
1000a2d8:	44c00115 	stw	r19,4(r8)
1000a2dc:	d8c11c15 	stw	r3,1136(sp)
1000a2e0:	d9011b15 	stw	r4,1132(sp)
1000a2e4:	b13ff40e 	bge	r22,r4,1000a2b8 <__alt_data_end+0xf800a2b8>
1000a2e8:	1801321e 	bne	r3,zero,1000a7b4 <___vfiprintf_internal_r+0xb94>
1000a2ec:	843ffc04 	addi	r16,r16,-16
1000a2f0:	000b883a 	mov	r5,zero
1000a2f4:	00800044 	movi	r2,1
1000a2f8:	d811883a 	mov	r8,sp
1000a2fc:	9c3ff316 	blt	r19,r16,1000a2cc <__alt_data_end+0xf800a2cc>
1000a300:	d9012617 	ldw	r4,1176(sp)
1000a304:	1c07883a 	add	r3,r3,r16
1000a308:	44000115 	stw	r16,4(r8)
1000a30c:	41000015 	stw	r4,0(r8)
1000a310:	d8c11c15 	stw	r3,1136(sp)
1000a314:	d8811b15 	stw	r2,1132(sp)
1000a318:	010001c4 	movi	r4,7
1000a31c:	20816216 	blt	r4,r2,1000a8a8 <___vfiprintf_internal_r+0xc88>
1000a320:	42000204 	addi	r8,r8,8
1000a324:	10800044 	addi	r2,r2,1
1000a328:	d9012217 	ldw	r4,1160(sp)
1000a32c:	1d07883a 	add	r3,r3,r20
1000a330:	45000115 	stw	r20,4(r8)
1000a334:	41000015 	stw	r4,0(r8)
1000a338:	d8c11c15 	stw	r3,1136(sp)
1000a33c:	d8811b15 	stw	r2,1132(sp)
1000a340:	010001c4 	movi	r4,7
1000a344:	2081610e 	bge	r4,r2,1000a8cc <___vfiprintf_internal_r+0xcac>
1000a348:	1802211e 	bne	r3,zero,1000abd0 <___vfiprintf_internal_r+0xfb0>
1000a34c:	d8011b15 	stw	zero,1132(sp)
1000a350:	9480010c 	andi	r18,r18,4
1000a354:	9002171e 	bne	r18,zero,1000abb4 <___vfiprintf_internal_r+0xf94>
1000a358:	d9412417 	ldw	r5,1168(sp)
1000a35c:	a9433716 	blt	r21,r5,1000b03c <___vfiprintf_internal_r+0x141c>
1000a360:	d8812517 	ldw	r2,1172(sp)
1000a364:	1545883a 	add	r2,r2,r21
1000a368:	d8812515 	stw	r2,1172(sp)
1000a36c:	00019a06 	br	1000a9d8 <___vfiprintf_internal_r+0xdb8>
1000a370:	d8c12317 	ldw	r3,1164(sp)
1000a374:	05400044 	movi	r21,1
1000a378:	9811883a 	mov	r8,r19
1000a37c:	18800017 	ldw	r2,0(r3)
1000a380:	18c00104 	addi	r3,r3,4
1000a384:	d8c12315 	stw	r3,1164(sp)
1000a388:	d8c10004 	addi	r3,sp,1024
1000a38c:	d8011d85 	stb	zero,1142(sp)
1000a390:	d8810005 	stb	r2,1024(sp)
1000a394:	a829883a 	mov	r20,r21
1000a398:	d8c12215 	stw	r3,1160(sp)
1000a39c:	0021883a 	mov	r16,zero
1000a3a0:	003f7806 	br	1000a184 <__alt_data_end+0xf800a184>
1000a3a4:	94800414 	ori	r18,r18,16
1000a3a8:	9080080c 	andi	r2,r18,32
1000a3ac:	9811883a 	mov	r8,r19
1000a3b0:	10009026 	beq	r2,zero,1000a5f4 <___vfiprintf_internal_r+0x9d4>
1000a3b4:	d8812317 	ldw	r2,1164(sp)
1000a3b8:	d8c12317 	ldw	r3,1164(sp)
1000a3bc:	14c00017 	ldw	r19,0(r2)
1000a3c0:	15400117 	ldw	r21,4(r2)
1000a3c4:	18c00204 	addi	r3,r3,8
1000a3c8:	d8c12315 	stw	r3,1164(sp)
1000a3cc:	0005883a 	mov	r2,zero
1000a3d0:	9d46b03a 	or	r3,r19,r21
1000a3d4:	d8011d85 	stb	zero,1142(sp)
1000a3d8:	8029883a 	mov	r20,r16
1000a3dc:	002d883a 	mov	r22,zero
1000a3e0:	003f4606 	br	1000a0fc <__alt_data_end+0xf800a0fc>
1000a3e4:	94800414 	ori	r18,r18,16
1000a3e8:	9080080c 	andi	r2,r18,32
1000a3ec:	9811883a 	mov	r8,r19
1000a3f0:	10006226 	beq	r2,zero,1000a57c <___vfiprintf_internal_r+0x95c>
1000a3f4:	d9012317 	ldw	r4,1164(sp)
1000a3f8:	00800044 	movi	r2,1
1000a3fc:	24c00017 	ldw	r19,0(r4)
1000a400:	25400117 	ldw	r21,4(r4)
1000a404:	21000204 	addi	r4,r4,8
1000a408:	d9012315 	stw	r4,1164(sp)
1000a40c:	9d46b03a 	or	r3,r19,r21
1000a410:	003ff006 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000a414:	b9800007 	ldb	r6,0(r23)
1000a418:	00801b04 	movi	r2,108
1000a41c:	3082b226 	beq	r6,r2,1000aee8 <___vfiprintf_internal_r+0x12c8>
1000a420:	94800414 	ori	r18,r18,16
1000a424:	003e5f06 	br	10009da4 <__alt_data_end+0xf8009da4>
1000a428:	d8c12203 	ldbu	r3,1160(sp)
1000a42c:	01040074 	movhi	r4,4097
1000a430:	21081604 	addi	r4,r4,8280
1000a434:	d8c11d85 	stb	r3,1142(sp)
1000a438:	d9012715 	stw	r4,1180(sp)
1000a43c:	90c0080c 	andi	r3,r18,32
1000a440:	9811883a 	mov	r8,r19
1000a444:	d8812317 	ldw	r2,1164(sp)
1000a448:	18005f26 	beq	r3,zero,1000a5c8 <___vfiprintf_internal_r+0x9a8>
1000a44c:	d9012317 	ldw	r4,1164(sp)
1000a450:	14c00017 	ldw	r19,0(r2)
1000a454:	15400117 	ldw	r21,4(r2)
1000a458:	21000204 	addi	r4,r4,8
1000a45c:	d9012315 	stw	r4,1164(sp)
1000a460:	9080004c 	andi	r2,r18,1
1000a464:	1001e226 	beq	r2,zero,1000abf0 <___vfiprintf_internal_r+0xfd0>
1000a468:	9d46b03a 	or	r3,r19,r21
1000a46c:	18024e26 	beq	r3,zero,1000ada8 <___vfiprintf_internal_r+0x1188>
1000a470:	00800c04 	movi	r2,48
1000a474:	d8811d05 	stb	r2,1140(sp)
1000a478:	d9811d45 	stb	r6,1141(sp)
1000a47c:	94800094 	ori	r18,r18,2
1000a480:	00800084 	movi	r2,2
1000a484:	003fd306 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000a488:	d9012317 	ldw	r4,1164(sp)
1000a48c:	d9412317 	ldw	r5,1164(sp)
1000a490:	21000017 	ldw	r4,0(r4)
1000a494:	28800104 	addi	r2,r5,4
1000a498:	d9012415 	stw	r4,1168(sp)
1000a49c:	203eeb16 	blt	r4,zero,1000a04c <__alt_data_end+0xf800a04c>
1000a4a0:	d8812315 	stw	r2,1164(sp)
1000a4a4:	b9800007 	ldb	r6,0(r23)
1000a4a8:	003e3e06 	br	10009da4 <__alt_data_end+0xf8009da4>
1000a4ac:	b9800007 	ldb	r6,0(r23)
1000a4b0:	01000a84 	movi	r4,42
1000a4b4:	b8800044 	addi	r2,r23,1
1000a4b8:	3102d226 	beq	r6,r4,1000b004 <___vfiprintf_internal_r+0x13e4>
1000a4bc:	35bff404 	addi	r22,r6,-48
1000a4c0:	102f883a 	mov	r23,r2
1000a4c4:	0021883a 	mov	r16,zero
1000a4c8:	adbe3736 	bltu	r21,r22,10009da8 <__alt_data_end+0xf8009da8>
1000a4cc:	0009883a 	mov	r4,zero
1000a4d0:	01400284 	movi	r5,10
1000a4d4:	000c8480 	call	1000c848 <__mulsi3>
1000a4d8:	b9800007 	ldb	r6,0(r23)
1000a4dc:	b089883a 	add	r4,r22,r2
1000a4e0:	bdc00044 	addi	r23,r23,1
1000a4e4:	35bff404 	addi	r22,r6,-48
1000a4e8:	adbff92e 	bgeu	r21,r22,1000a4d0 <__alt_data_end+0xf800a4d0>
1000a4ec:	2021883a 	mov	r16,r4
1000a4f0:	203e2d0e 	bge	r4,zero,10009da8 <__alt_data_end+0xf8009da8>
1000a4f4:	043fffc4 	movi	r16,-1
1000a4f8:	003e2b06 	br	10009da8 <__alt_data_end+0xf8009da8>
1000a4fc:	94801014 	ori	r18,r18,64
1000a500:	b9800007 	ldb	r6,0(r23)
1000a504:	003e2706 	br	10009da4 <__alt_data_end+0xf8009da4>
1000a508:	94800814 	ori	r18,r18,32
1000a50c:	b9800007 	ldb	r6,0(r23)
1000a510:	003e2406 	br	10009da4 <__alt_data_end+0xf8009da4>
1000a514:	d9412317 	ldw	r5,1164(sp)
1000a518:	d8812317 	ldw	r2,1164(sp)
1000a51c:	d8011d85 	stb	zero,1142(sp)
1000a520:	29400017 	ldw	r5,0(r5)
1000a524:	9811883a 	mov	r8,r19
1000a528:	14c00104 	addi	r19,r2,4
1000a52c:	d9412215 	stw	r5,1160(sp)
1000a530:	28029026 	beq	r5,zero,1000af74 <___vfiprintf_internal_r+0x1354>
1000a534:	d9012217 	ldw	r4,1160(sp)
1000a538:	80027616 	blt	r16,zero,1000af14 <___vfiprintf_internal_r+0x12f4>
1000a53c:	000b883a 	mov	r5,zero
1000a540:	800d883a 	mov	r6,r16
1000a544:	da012a15 	stw	r8,1192(sp)
1000a548:	0007ddc0 	call	10007ddc <memchr>
1000a54c:	da012a17 	ldw	r8,1192(sp)
1000a550:	1002a026 	beq	r2,zero,1000afd4 <___vfiprintf_internal_r+0x13b4>
1000a554:	d8c12217 	ldw	r3,1160(sp)
1000a558:	10e9c83a 	sub	r20,r2,r3
1000a55c:	85023816 	blt	r16,r20,1000ae40 <___vfiprintf_internal_r+0x1220>
1000a560:	dd811d83 	ldbu	r22,1142(sp)
1000a564:	dcc12315 	stw	r19,1164(sp)
1000a568:	0021883a 	mov	r16,zero
1000a56c:	003efd06 	br	1000a164 <__alt_data_end+0xf800a164>
1000a570:	9080080c 	andi	r2,r18,32
1000a574:	9811883a 	mov	r8,r19
1000a578:	103f9e1e 	bne	r2,zero,1000a3f4 <__alt_data_end+0xf800a3f4>
1000a57c:	9080040c 	andi	r2,r18,16
1000a580:	10021726 	beq	r2,zero,1000ade0 <___vfiprintf_internal_r+0x11c0>
1000a584:	d9412317 	ldw	r5,1164(sp)
1000a588:	002b883a 	mov	r21,zero
1000a58c:	00800044 	movi	r2,1
1000a590:	2cc00017 	ldw	r19,0(r5)
1000a594:	29400104 	addi	r5,r5,4
1000a598:	d9412315 	stw	r5,1164(sp)
1000a59c:	9807883a 	mov	r3,r19
1000a5a0:	003f8c06 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000a5a4:	d8c12203 	ldbu	r3,1160(sp)
1000a5a8:	01040074 	movhi	r4,4097
1000a5ac:	21081b04 	addi	r4,r4,8300
1000a5b0:	d8c11d85 	stb	r3,1142(sp)
1000a5b4:	d9012715 	stw	r4,1180(sp)
1000a5b8:	90c0080c 	andi	r3,r18,32
1000a5bc:	9811883a 	mov	r8,r19
1000a5c0:	d8812317 	ldw	r2,1164(sp)
1000a5c4:	183fa11e 	bne	r3,zero,1000a44c <__alt_data_end+0xf800a44c>
1000a5c8:	90c0040c 	andi	r3,r18,16
1000a5cc:	1801e526 	beq	r3,zero,1000ad64 <___vfiprintf_internal_r+0x1144>
1000a5d0:	d9412317 	ldw	r5,1164(sp)
1000a5d4:	14c00017 	ldw	r19,0(r2)
1000a5d8:	002b883a 	mov	r21,zero
1000a5dc:	29400104 	addi	r5,r5,4
1000a5e0:	d9412315 	stw	r5,1164(sp)
1000a5e4:	003f9e06 	br	1000a460 <__alt_data_end+0xf800a460>
1000a5e8:	9080080c 	andi	r2,r18,32
1000a5ec:	9811883a 	mov	r8,r19
1000a5f0:	103f701e 	bne	r2,zero,1000a3b4 <__alt_data_end+0xf800a3b4>
1000a5f4:	9080040c 	andi	r2,r18,16
1000a5f8:	1001ef26 	beq	r2,zero,1000adb8 <___vfiprintf_internal_r+0x1198>
1000a5fc:	d9012317 	ldw	r4,1164(sp)
1000a600:	002b883a 	mov	r21,zero
1000a604:	0005883a 	mov	r2,zero
1000a608:	24c00017 	ldw	r19,0(r4)
1000a60c:	21000104 	addi	r4,r4,4
1000a610:	d9012315 	stw	r4,1164(sp)
1000a614:	9807883a 	mov	r3,r19
1000a618:	003f6e06 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000a61c:	d8c12317 	ldw	r3,1164(sp)
1000a620:	9811883a 	mov	r8,r19
1000a624:	00800c04 	movi	r2,48
1000a628:	1cc00017 	ldw	r19,0(r3)
1000a62c:	01040074 	movhi	r4,4097
1000a630:	18c00104 	addi	r3,r3,4
1000a634:	d8811d05 	stb	r2,1140(sp)
1000a638:	21081b04 	addi	r4,r4,8300
1000a63c:	00801e04 	movi	r2,120
1000a640:	d8811d45 	stb	r2,1141(sp)
1000a644:	d8c12315 	stw	r3,1164(sp)
1000a648:	002b883a 	mov	r21,zero
1000a64c:	94800094 	ori	r18,r18,2
1000a650:	d9012715 	stw	r4,1180(sp)
1000a654:	00800084 	movi	r2,2
1000a658:	9807883a 	mov	r3,r19
1000a65c:	003f5d06 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000a660:	d8c12203 	ldbu	r3,1160(sp)
1000a664:	9080080c 	andi	r2,r18,32
1000a668:	9811883a 	mov	r8,r19
1000a66c:	d8c11d85 	stb	r3,1142(sp)
1000a670:	1001b126 	beq	r2,zero,1000ad38 <___vfiprintf_internal_r+0x1118>
1000a674:	d9012317 	ldw	r4,1164(sp)
1000a678:	d9412517 	ldw	r5,1172(sp)
1000a67c:	20800017 	ldw	r2,0(r4)
1000a680:	2807d7fa 	srai	r3,r5,31
1000a684:	21000104 	addi	r4,r4,4
1000a688:	d9012315 	stw	r4,1164(sp)
1000a68c:	11400015 	stw	r5,0(r2)
1000a690:	10c00115 	stw	r3,4(r2)
1000a694:	003d9a06 	br	10009d00 <__alt_data_end+0xf8009d00>
1000a698:	d8812207 	ldb	r2,1160(sp)
1000a69c:	1001c41e 	bne	r2,zero,1000adb0 <___vfiprintf_internal_r+0x1190>
1000a6a0:	00c00804 	movi	r3,32
1000a6a4:	d8c12205 	stb	r3,1160(sp)
1000a6a8:	b9800007 	ldb	r6,0(r23)
1000a6ac:	003dbd06 	br	10009da4 <__alt_data_end+0xf8009da4>
1000a6b0:	00c00ac4 	movi	r3,43
1000a6b4:	d8c12205 	stb	r3,1160(sp)
1000a6b8:	b9800007 	ldb	r6,0(r23)
1000a6bc:	003db906 	br	10009da4 <__alt_data_end+0xf8009da4>
1000a6c0:	d8c12203 	ldbu	r3,1160(sp)
1000a6c4:	9080080c 	andi	r2,r18,32
1000a6c8:	9811883a 	mov	r8,r19
1000a6cc:	d8c11d85 	stb	r3,1142(sp)
1000a6d0:	d8c12317 	ldw	r3,1164(sp)
1000a6d4:	103e7e1e 	bne	r2,zero,1000a0d0 <__alt_data_end+0xf800a0d0>
1000a6d8:	9080040c 	andi	r2,r18,16
1000a6dc:	1001a926 	beq	r2,zero,1000ad84 <___vfiprintf_internal_r+0x1164>
1000a6e0:	1cc00017 	ldw	r19,0(r3)
1000a6e4:	d9412317 	ldw	r5,1164(sp)
1000a6e8:	982bd7fa 	srai	r21,r19,31
1000a6ec:	29400104 	addi	r5,r5,4
1000a6f0:	d9412315 	stw	r5,1164(sp)
1000a6f4:	a805883a 	mov	r2,r21
1000a6f8:	003e7b06 	br	1000a0e8 <__alt_data_end+0xf800a0e8>
1000a6fc:	94800054 	ori	r18,r18,1
1000a700:	b9800007 	ldb	r6,0(r23)
1000a704:	003da706 	br	10009da4 <__alt_data_end+0xf8009da4>
1000a708:	d8c12203 	ldbu	r3,1160(sp)
1000a70c:	9811883a 	mov	r8,r19
1000a710:	d8c11d85 	stb	r3,1142(sp)
1000a714:	30005826 	beq	r6,zero,1000a878 <___vfiprintf_internal_r+0xc58>
1000a718:	05400044 	movi	r21,1
1000a71c:	d8c10004 	addi	r3,sp,1024
1000a720:	d9810005 	stb	r6,1024(sp)
1000a724:	d8011d85 	stb	zero,1142(sp)
1000a728:	a829883a 	mov	r20,r21
1000a72c:	d8c12215 	stw	r3,1160(sp)
1000a730:	003f1a06 	br	1000a39c <__alt_data_end+0xf800a39c>
1000a734:	d9012117 	ldw	r4,1156(sp)
1000a738:	d9412017 	ldw	r5,1152(sp)
1000a73c:	d9811a04 	addi	r6,sp,1128
1000a740:	d9c12a15 	stw	r7,1192(sp)
1000a744:	db012b15 	stw	r12,1196(sp)
1000a748:	0009b0c0 	call	10009b0c <__sprint_r.part.0>
1000a74c:	d9c12a17 	ldw	r7,1192(sp)
1000a750:	db012b17 	ldw	r12,1196(sp)
1000a754:	10004e1e 	bne	r2,zero,1000a890 <___vfiprintf_internal_r+0xc70>
1000a758:	d9011b17 	ldw	r4,1132(sp)
1000a75c:	d8c11c17 	ldw	r3,1136(sp)
1000a760:	d811883a 	mov	r8,sp
1000a764:	21400044 	addi	r5,r4,1
1000a768:	003e9d06 	br	1000a1e0 <__alt_data_end+0xf800a1e0>
1000a76c:	d9411b17 	ldw	r5,1132(sp)
1000a770:	d8c11c17 	ldw	r3,1136(sp)
1000a774:	28800044 	addi	r2,r5,1
1000a778:	d9011d87 	ldb	r4,1142(sp)
1000a77c:	203eb626 	beq	r4,zero,1000a258 <__alt_data_end+0xf800a258>
1000a780:	01000044 	movi	r4,1
1000a784:	d9411d84 	addi	r5,sp,1142
1000a788:	1907883a 	add	r3,r3,r4
1000a78c:	41400015 	stw	r5,0(r8)
1000a790:	41000115 	stw	r4,4(r8)
1000a794:	d8c11c15 	stw	r3,1136(sp)
1000a798:	d8811b15 	stw	r2,1132(sp)
1000a79c:	014001c4 	movi	r5,7
1000a7a0:	2880ce16 	blt	r5,r2,1000aadc <___vfiprintf_internal_r+0xebc>
1000a7a4:	100b883a 	mov	r5,r2
1000a7a8:	42000204 	addi	r8,r8,8
1000a7ac:	10800044 	addi	r2,r2,1
1000a7b0:	003ea906 	br	1000a258 <__alt_data_end+0xf800a258>
1000a7b4:	d9012117 	ldw	r4,1156(sp)
1000a7b8:	d9412017 	ldw	r5,1152(sp)
1000a7bc:	d9811a04 	addi	r6,sp,1128
1000a7c0:	0009b0c0 	call	10009b0c <__sprint_r.part.0>
1000a7c4:	1000321e 	bne	r2,zero,1000a890 <___vfiprintf_internal_r+0xc70>
1000a7c8:	d9411b17 	ldw	r5,1132(sp)
1000a7cc:	d8c11c17 	ldw	r3,1136(sp)
1000a7d0:	d811883a 	mov	r8,sp
1000a7d4:	28800044 	addi	r2,r5,1
1000a7d8:	003eba06 	br	1000a2c4 <__alt_data_end+0xf800a2c4>
1000a7dc:	10803fcc 	andi	r2,r2,255
1000a7e0:	00c00044 	movi	r3,1
1000a7e4:	10fe4d1e 	bne	r2,r3,1000a11c <__alt_data_end+0xf800a11c>
1000a7e8:	a800021e 	bne	r21,zero,1000a7f4 <___vfiprintf_internal_r+0xbd4>
1000a7ec:	00800244 	movi	r2,9
1000a7f0:	14c01b2e 	bgeu	r2,r19,1000a860 <___vfiprintf_internal_r+0xc40>
1000a7f4:	dc012215 	stw	r16,1160(sp)
1000a7f8:	dd010a04 	addi	r20,sp,1064
1000a7fc:	a821883a 	mov	r16,r21
1000a800:	402b883a 	mov	r21,r8
1000a804:	9809883a 	mov	r4,r19
1000a808:	800b883a 	mov	r5,r16
1000a80c:	01800284 	movi	r6,10
1000a810:	000f883a 	mov	r7,zero
1000a814:	000c1000 	call	1000c100 <__umoddi3>
1000a818:	10800c04 	addi	r2,r2,48
1000a81c:	a53fffc4 	addi	r20,r20,-1
1000a820:	9809883a 	mov	r4,r19
1000a824:	800b883a 	mov	r5,r16
1000a828:	01800284 	movi	r6,10
1000a82c:	000f883a 	mov	r7,zero
1000a830:	a0800005 	stb	r2,0(r20)
1000a834:	000bac00 	call	1000bac0 <__udivdi3>
1000a838:	1027883a 	mov	r19,r2
1000a83c:	10c4b03a 	or	r2,r2,r3
1000a840:	1821883a 	mov	r16,r3
1000a844:	103fef1e 	bne	r2,zero,1000a804 <__alt_data_end+0xf800a804>
1000a848:	d9011e17 	ldw	r4,1144(sp)
1000a84c:	dc012217 	ldw	r16,1160(sp)
1000a850:	a811883a 	mov	r8,r21
1000a854:	dd012215 	stw	r20,1160(sp)
1000a858:	2529c83a 	sub	r20,r4,r20
1000a85c:	003e4106 	br	1000a164 <__alt_data_end+0xf800a164>
1000a860:	9cc00c04 	addi	r19,r19,48
1000a864:	d8c109c4 	addi	r3,sp,1063
1000a868:	dcc109c5 	stb	r19,1063(sp)
1000a86c:	dd012817 	ldw	r20,1184(sp)
1000a870:	d8c12215 	stw	r3,1160(sp)
1000a874:	003e3b06 	br	1000a164 <__alt_data_end+0xf800a164>
1000a878:	d8811c17 	ldw	r2,1136(sp)
1000a87c:	10000426 	beq	r2,zero,1000a890 <___vfiprintf_internal_r+0xc70>
1000a880:	d9012117 	ldw	r4,1156(sp)
1000a884:	d9412017 	ldw	r5,1152(sp)
1000a888:	d9811a04 	addi	r6,sp,1128
1000a88c:	0009b0c0 	call	10009b0c <__sprint_r.part.0>
1000a890:	d9412017 	ldw	r5,1152(sp)
1000a894:	2880030b 	ldhu	r2,12(r5)
1000a898:	1080100c 	andi	r2,r2,64
1000a89c:	103ddc1e 	bne	r2,zero,1000a010 <__alt_data_end+0xf800a010>
1000a8a0:	d8812517 	ldw	r2,1172(sp)
1000a8a4:	003ddb06 	br	1000a014 <__alt_data_end+0xf800a014>
1000a8a8:	1801061e 	bne	r3,zero,1000acc4 <___vfiprintf_internal_r+0x10a4>
1000a8ac:	d8c12217 	ldw	r3,1160(sp)
1000a8b0:	00800044 	movi	r2,1
1000a8b4:	dd000115 	stw	r20,4(sp)
1000a8b8:	d8c00015 	stw	r3,0(sp)
1000a8bc:	dd011c15 	stw	r20,1136(sp)
1000a8c0:	d8811b15 	stw	r2,1132(sp)
1000a8c4:	a007883a 	mov	r3,r20
1000a8c8:	d811883a 	mov	r8,sp
1000a8cc:	42000204 	addi	r8,r8,8
1000a8d0:	9480010c 	andi	r18,r18,4
1000a8d4:	90003426 	beq	r18,zero,1000a9a8 <___vfiprintf_internal_r+0xd88>
1000a8d8:	d9412417 	ldw	r5,1168(sp)
1000a8dc:	2d65c83a 	sub	r18,r5,r21
1000a8e0:	0480310e 	bge	zero,r18,1000a9a8 <___vfiprintf_internal_r+0xd88>
1000a8e4:	04000404 	movi	r16,16
1000a8e8:	8481ad0e 	bge	r16,r18,1000afa0 <___vfiprintf_internal_r+0x1380>
1000a8ec:	01440074 	movhi	r5,4097
1000a8f0:	29488004 	addi	r5,r5,8704
1000a8f4:	d9011b17 	ldw	r4,1132(sp)
1000a8f8:	d9412615 	stw	r5,1176(sp)
1000a8fc:	04c001c4 	movi	r19,7
1000a900:	dd012117 	ldw	r20,1156(sp)
1000a904:	dd812017 	ldw	r22,1152(sp)
1000a908:	00000506 	br	1000a920 <___vfiprintf_internal_r+0xd00>
1000a90c:	21400084 	addi	r5,r4,2
1000a910:	42000204 	addi	r8,r8,8
1000a914:	1009883a 	mov	r4,r2
1000a918:	94bffc04 	addi	r18,r18,-16
1000a91c:	84800d0e 	bge	r16,r18,1000a954 <___vfiprintf_internal_r+0xd34>
1000a920:	18c00404 	addi	r3,r3,16
1000a924:	20800044 	addi	r2,r4,1
1000a928:	47000015 	stw	fp,0(r8)
1000a92c:	44000115 	stw	r16,4(r8)
1000a930:	d8c11c15 	stw	r3,1136(sp)
1000a934:	d8811b15 	stw	r2,1132(sp)
1000a938:	98bff40e 	bge	r19,r2,1000a90c <__alt_data_end+0xf800a90c>
1000a93c:	1800291e 	bne	r3,zero,1000a9e4 <___vfiprintf_internal_r+0xdc4>
1000a940:	94bffc04 	addi	r18,r18,-16
1000a944:	0009883a 	mov	r4,zero
1000a948:	01400044 	movi	r5,1
1000a94c:	d811883a 	mov	r8,sp
1000a950:	84bff316 	blt	r16,r18,1000a920 <__alt_data_end+0xf800a920>
1000a954:	d8812617 	ldw	r2,1176(sp)
1000a958:	1c87883a 	add	r3,r3,r18
1000a95c:	44800115 	stw	r18,4(r8)
1000a960:	40800015 	stw	r2,0(r8)
1000a964:	d8c11c15 	stw	r3,1136(sp)
1000a968:	d9411b15 	stw	r5,1132(sp)
1000a96c:	008001c4 	movi	r2,7
1000a970:	11400d0e 	bge	r2,r5,1000a9a8 <___vfiprintf_internal_r+0xd88>
1000a974:	1800061e 	bne	r3,zero,1000a990 <___vfiprintf_internal_r+0xd70>
1000a978:	d8c12417 	ldw	r3,1168(sp)
1000a97c:	a8c12e16 	blt	r21,r3,1000ae38 <___vfiprintf_internal_r+0x1218>
1000a980:	d9012517 	ldw	r4,1172(sp)
1000a984:	2549883a 	add	r4,r4,r21
1000a988:	d9012515 	stw	r4,1172(sp)
1000a98c:	00001206 	br	1000a9d8 <___vfiprintf_internal_r+0xdb8>
1000a990:	d9012117 	ldw	r4,1156(sp)
1000a994:	d9412017 	ldw	r5,1152(sp)
1000a998:	d9811a04 	addi	r6,sp,1128
1000a99c:	0009b0c0 	call	10009b0c <__sprint_r.part.0>
1000a9a0:	103fbb1e 	bne	r2,zero,1000a890 <__alt_data_end+0xf800a890>
1000a9a4:	d8c11c17 	ldw	r3,1136(sp)
1000a9a8:	d8812417 	ldw	r2,1168(sp)
1000a9ac:	a880010e 	bge	r21,r2,1000a9b4 <___vfiprintf_internal_r+0xd94>
1000a9b0:	102b883a 	mov	r21,r2
1000a9b4:	d9012517 	ldw	r4,1172(sp)
1000a9b8:	2549883a 	add	r4,r4,r21
1000a9bc:	d9012515 	stw	r4,1172(sp)
1000a9c0:	18000526 	beq	r3,zero,1000a9d8 <___vfiprintf_internal_r+0xdb8>
1000a9c4:	d9012117 	ldw	r4,1156(sp)
1000a9c8:	d9412017 	ldw	r5,1152(sp)
1000a9cc:	d9811a04 	addi	r6,sp,1128
1000a9d0:	0009b0c0 	call	10009b0c <__sprint_r.part.0>
1000a9d4:	103fae1e 	bne	r2,zero,1000a890 <__alt_data_end+0xf800a890>
1000a9d8:	d8011b15 	stw	zero,1132(sp)
1000a9dc:	d811883a 	mov	r8,sp
1000a9e0:	003cc706 	br	10009d00 <__alt_data_end+0xf8009d00>
1000a9e4:	a009883a 	mov	r4,r20
1000a9e8:	b00b883a 	mov	r5,r22
1000a9ec:	d9811a04 	addi	r6,sp,1128
1000a9f0:	0009b0c0 	call	10009b0c <__sprint_r.part.0>
1000a9f4:	103fa61e 	bne	r2,zero,1000a890 <__alt_data_end+0xf800a890>
1000a9f8:	d9011b17 	ldw	r4,1132(sp)
1000a9fc:	d8c11c17 	ldw	r3,1136(sp)
1000aa00:	d811883a 	mov	r8,sp
1000aa04:	21400044 	addi	r5,r4,1
1000aa08:	003fc306 	br	1000a918 <__alt_data_end+0xf800a918>
1000aa0c:	d9012417 	ldw	r4,1168(sp)
1000aa10:	256dc83a 	sub	r22,r4,r21
1000aa14:	05be1f0e 	bge	zero,r22,1000a294 <__alt_data_end+0xf800a294>
1000aa18:	04c00404 	movi	r19,16
1000aa1c:	9d81720e 	bge	r19,r22,1000afe8 <___vfiprintf_internal_r+0x13c8>
1000aa20:	00840074 	movhi	r2,4097
1000aa24:	10887c04 	addi	r2,r2,8688
1000aa28:	d8812615 	stw	r2,1176(sp)
1000aa2c:	028001c4 	movi	r10,7
1000aa30:	00000506 	br	1000aa48 <___vfiprintf_internal_r+0xe28>
1000aa34:	29000084 	addi	r4,r5,2
1000aa38:	42000204 	addi	r8,r8,8
1000aa3c:	100b883a 	mov	r5,r2
1000aa40:	b5bffc04 	addi	r22,r22,-16
1000aa44:	9d800d0e 	bge	r19,r22,1000aa7c <___vfiprintf_internal_r+0xe5c>
1000aa48:	18c00404 	addi	r3,r3,16
1000aa4c:	28800044 	addi	r2,r5,1
1000aa50:	44400015 	stw	r17,0(r8)
1000aa54:	44c00115 	stw	r19,4(r8)
1000aa58:	d8c11c15 	stw	r3,1136(sp)
1000aa5c:	d8811b15 	stw	r2,1132(sp)
1000aa60:	50bff40e 	bge	r10,r2,1000aa34 <__alt_data_end+0xf800aa34>
1000aa64:	1800111e 	bne	r3,zero,1000aaac <___vfiprintf_internal_r+0xe8c>
1000aa68:	b5bffc04 	addi	r22,r22,-16
1000aa6c:	000b883a 	mov	r5,zero
1000aa70:	01000044 	movi	r4,1
1000aa74:	d811883a 	mov	r8,sp
1000aa78:	9dbff316 	blt	r19,r22,1000aa48 <__alt_data_end+0xf800aa48>
1000aa7c:	d9412617 	ldw	r5,1176(sp)
1000aa80:	1d87883a 	add	r3,r3,r22
1000aa84:	45800115 	stw	r22,4(r8)
1000aa88:	41400015 	stw	r5,0(r8)
1000aa8c:	d8c11c15 	stw	r3,1136(sp)
1000aa90:	d9011b15 	stw	r4,1132(sp)
1000aa94:	008001c4 	movi	r2,7
1000aa98:	11008516 	blt	r2,r4,1000acb0 <___vfiprintf_internal_r+0x1090>
1000aa9c:	42000204 	addi	r8,r8,8
1000aaa0:	20800044 	addi	r2,r4,1
1000aaa4:	200b883a 	mov	r5,r4
1000aaa8:	003dfa06 	br	1000a294 <__alt_data_end+0xf800a294>
1000aaac:	d9012117 	ldw	r4,1156(sp)
1000aab0:	d9412017 	ldw	r5,1152(sp)
1000aab4:	d9811a04 	addi	r6,sp,1128
1000aab8:	da812a15 	stw	r10,1192(sp)
1000aabc:	0009b0c0 	call	10009b0c <__sprint_r.part.0>
1000aac0:	da812a17 	ldw	r10,1192(sp)
1000aac4:	103f721e 	bne	r2,zero,1000a890 <__alt_data_end+0xf800a890>
1000aac8:	d9411b17 	ldw	r5,1132(sp)
1000aacc:	d8c11c17 	ldw	r3,1136(sp)
1000aad0:	d811883a 	mov	r8,sp
1000aad4:	29000044 	addi	r4,r5,1
1000aad8:	003fd906 	br	1000aa40 <__alt_data_end+0xf800aa40>
1000aadc:	1800681e 	bne	r3,zero,1000ac80 <___vfiprintf_internal_r+0x1060>
1000aae0:	50004d26 	beq	r10,zero,1000ac18 <___vfiprintf_internal_r+0xff8>
1000aae4:	d8811d04 	addi	r2,sp,1140
1000aae8:	00c00084 	movi	r3,2
1000aaec:	d8800015 	stw	r2,0(sp)
1000aaf0:	d8c00115 	stw	r3,4(sp)
1000aaf4:	2005883a 	mov	r2,r4
1000aaf8:	d811883a 	mov	r8,sp
1000aafc:	003de006 	br	1000a280 <__alt_data_end+0xf800a280>
1000ab00:	1800551e 	bne	r3,zero,1000ac58 <___vfiprintf_internal_r+0x1038>
1000ab04:	000b883a 	mov	r5,zero
1000ab08:	00800044 	movi	r2,1
1000ab0c:	d811883a 	mov	r8,sp
1000ab10:	003dde06 	br	1000a28c <__alt_data_end+0xf800a28c>
1000ab14:	10803fcc 	andi	r2,r2,255
1000ab18:	1000191e 	bne	r2,zero,1000ab80 <___vfiprintf_internal_r+0xf60>
1000ab1c:	9080004c 	andi	r2,r18,1
1000ab20:	10001726 	beq	r2,zero,1000ab80 <___vfiprintf_internal_r+0xf60>
1000ab24:	00800c04 	movi	r2,48
1000ab28:	d8c109c4 	addi	r3,sp,1063
1000ab2c:	d88109c5 	stb	r2,1063(sp)
1000ab30:	dd012817 	ldw	r20,1184(sp)
1000ab34:	d8c12215 	stw	r3,1160(sp)
1000ab38:	003d8a06 	br	1000a164 <__alt_data_end+0xf800a164>
1000ab3c:	d9012717 	ldw	r4,1180(sp)
1000ab40:	dd010a04 	addi	r20,sp,1064
1000ab44:	988003cc 	andi	r2,r19,15
1000ab48:	a806973a 	slli	r3,r21,28
1000ab4c:	2085883a 	add	r2,r4,r2
1000ab50:	9826d13a 	srli	r19,r19,4
1000ab54:	10800003 	ldbu	r2,0(r2)
1000ab58:	a82ad13a 	srli	r21,r21,4
1000ab5c:	a53fffc4 	addi	r20,r20,-1
1000ab60:	1ce6b03a 	or	r19,r3,r19
1000ab64:	a0800005 	stb	r2,0(r20)
1000ab68:	9d44b03a 	or	r2,r19,r21
1000ab6c:	103ff51e 	bne	r2,zero,1000ab44 <__alt_data_end+0xf800ab44>
1000ab70:	d9411e17 	ldw	r5,1144(sp)
1000ab74:	dd012215 	stw	r20,1160(sp)
1000ab78:	2d29c83a 	sub	r20,r5,r20
1000ab7c:	003d7906 	br	1000a164 <__alt_data_end+0xf800a164>
1000ab80:	d8c10a04 	addi	r3,sp,1064
1000ab84:	d8c12215 	stw	r3,1160(sp)
1000ab88:	003d7606 	br	1000a164 <__alt_data_end+0xf800a164>
1000ab8c:	18009e1e 	bne	r3,zero,1000ae08 <___vfiprintf_internal_r+0x11e8>
1000ab90:	d8811d87 	ldb	r2,1142(sp)
1000ab94:	10005f26 	beq	r2,zero,1000ad14 <___vfiprintf_internal_r+0x10f4>
1000ab98:	00c00044 	movi	r3,1
1000ab9c:	d9011d84 	addi	r4,sp,1142
1000aba0:	1805883a 	mov	r2,r3
1000aba4:	d9000015 	stw	r4,0(sp)
1000aba8:	d8c00115 	stw	r3,4(sp)
1000abac:	d811883a 	mov	r8,sp
1000abb0:	003efc06 	br	1000a7a4 <__alt_data_end+0xf800a7a4>
1000abb4:	d9412417 	ldw	r5,1168(sp)
1000abb8:	d811883a 	mov	r8,sp
1000abbc:	2d65c83a 	sub	r18,r5,r21
1000abc0:	04bf4816 	blt	zero,r18,1000a8e4 <__alt_data_end+0xf800a8e4>
1000abc4:	003f6c06 	br	1000a978 <__alt_data_end+0xf800a978>
1000abc8:	b829883a 	mov	r20,r23
1000abcc:	003c6906 	br	10009d74 <__alt_data_end+0xf8009d74>
1000abd0:	d9012117 	ldw	r4,1156(sp)
1000abd4:	d9412017 	ldw	r5,1152(sp)
1000abd8:	d9811a04 	addi	r6,sp,1128
1000abdc:	0009b0c0 	call	10009b0c <__sprint_r.part.0>
1000abe0:	103f2b1e 	bne	r2,zero,1000a890 <__alt_data_end+0xf800a890>
1000abe4:	d8c11c17 	ldw	r3,1136(sp)
1000abe8:	d811883a 	mov	r8,sp
1000abec:	003f3806 	br	1000a8d0 <__alt_data_end+0xf800a8d0>
1000abf0:	00800084 	movi	r2,2
1000abf4:	9d46b03a 	or	r3,r19,r21
1000abf8:	003df606 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000abfc:	d9012117 	ldw	r4,1156(sp)
1000ac00:	d9412017 	ldw	r5,1152(sp)
1000ac04:	d9811a04 	addi	r6,sp,1128
1000ac08:	0009b0c0 	call	10009b0c <__sprint_r.part.0>
1000ac0c:	103f201e 	bne	r2,zero,1000a890 <__alt_data_end+0xf800a890>
1000ac10:	d811883a 	mov	r8,sp
1000ac14:	003cc606 	br	10009f30 <__alt_data_end+0xf8009f30>
1000ac18:	000b883a 	mov	r5,zero
1000ac1c:	2005883a 	mov	r2,r4
1000ac20:	d811883a 	mov	r8,sp
1000ac24:	003d9906 	br	1000a28c <__alt_data_end+0xf800a28c>
1000ac28:	10803fcc 	andi	r2,r2,255
1000ac2c:	1080201c 	xori	r2,r2,128
1000ac30:	10bfe004 	addi	r2,r2,-128
1000ac34:	01000c04 	movi	r4,48
1000ac38:	1100b226 	beq	r2,r4,1000af04 <___vfiprintf_internal_r+0x12e4>
1000ac3c:	d9412217 	ldw	r5,1160(sp)
1000ac40:	d8811e17 	ldw	r2,1144(sp)
1000ac44:	193fffc5 	stb	r4,-1(r3)
1000ac48:	297fffc4 	addi	r5,r5,-1
1000ac4c:	d9412215 	stw	r5,1160(sp)
1000ac50:	1169c83a 	sub	r20,r2,r5
1000ac54:	003d4306 	br	1000a164 <__alt_data_end+0xf800a164>
1000ac58:	d9012117 	ldw	r4,1156(sp)
1000ac5c:	d9412017 	ldw	r5,1152(sp)
1000ac60:	d9811a04 	addi	r6,sp,1128
1000ac64:	0009b0c0 	call	10009b0c <__sprint_r.part.0>
1000ac68:	103f091e 	bne	r2,zero,1000a890 <__alt_data_end+0xf800a890>
1000ac6c:	d9411b17 	ldw	r5,1132(sp)
1000ac70:	d8c11c17 	ldw	r3,1136(sp)
1000ac74:	d811883a 	mov	r8,sp
1000ac78:	28800044 	addi	r2,r5,1
1000ac7c:	003d8306 	br	1000a28c <__alt_data_end+0xf800a28c>
1000ac80:	d9012117 	ldw	r4,1156(sp)
1000ac84:	d9412017 	ldw	r5,1152(sp)
1000ac88:	d9811a04 	addi	r6,sp,1128
1000ac8c:	da812a15 	stw	r10,1192(sp)
1000ac90:	0009b0c0 	call	10009b0c <__sprint_r.part.0>
1000ac94:	da812a17 	ldw	r10,1192(sp)
1000ac98:	103efd1e 	bne	r2,zero,1000a890 <__alt_data_end+0xf800a890>
1000ac9c:	d9411b17 	ldw	r5,1132(sp)
1000aca0:	d8c11c17 	ldw	r3,1136(sp)
1000aca4:	d811883a 	mov	r8,sp
1000aca8:	28800044 	addi	r2,r5,1
1000acac:	003d6a06 	br	1000a258 <__alt_data_end+0xf800a258>
1000acb0:	1800a01e 	bne	r3,zero,1000af34 <___vfiprintf_internal_r+0x1314>
1000acb4:	000b883a 	mov	r5,zero
1000acb8:	00800044 	movi	r2,1
1000acbc:	d811883a 	mov	r8,sp
1000acc0:	003d7406 	br	1000a294 <__alt_data_end+0xf800a294>
1000acc4:	d9012117 	ldw	r4,1156(sp)
1000acc8:	d9412017 	ldw	r5,1152(sp)
1000accc:	d9811a04 	addi	r6,sp,1128
1000acd0:	0009b0c0 	call	10009b0c <__sprint_r.part.0>
1000acd4:	103eee1e 	bne	r2,zero,1000a890 <__alt_data_end+0xf800a890>
1000acd8:	d8811b17 	ldw	r2,1132(sp)
1000acdc:	d8c11c17 	ldw	r3,1136(sp)
1000ace0:	d811883a 	mov	r8,sp
1000ace4:	10800044 	addi	r2,r2,1
1000ace8:	003d8f06 	br	1000a328 <__alt_data_end+0xf800a328>
1000acec:	04e7c83a 	sub	r19,zero,r19
1000acf0:	9804c03a 	cmpne	r2,r19,zero
1000acf4:	056bc83a 	sub	r21,zero,r21
1000acf8:	a8abc83a 	sub	r21,r21,r2
1000acfc:	05800b44 	movi	r22,45
1000ad00:	dd811d85 	stb	r22,1142(sp)
1000ad04:	8029883a 	mov	r20,r16
1000ad08:	00800044 	movi	r2,1
1000ad0c:	9d46b03a 	or	r3,r19,r21
1000ad10:	003cfa06 	br	1000a0fc <__alt_data_end+0xf800a0fc>
1000ad14:	000b883a 	mov	r5,zero
1000ad18:	00800044 	movi	r2,1
1000ad1c:	d811883a 	mov	r8,sp
1000ad20:	503d5a26 	beq	r10,zero,1000a28c <__alt_data_end+0xf800a28c>
1000ad24:	00c00084 	movi	r3,2
1000ad28:	d9011d04 	addi	r4,sp,1140
1000ad2c:	d9000015 	stw	r4,0(sp)
1000ad30:	d8c00115 	stw	r3,4(sp)
1000ad34:	003d5206 	br	1000a280 <__alt_data_end+0xf800a280>
1000ad38:	9080040c 	andi	r2,r18,16
1000ad3c:	1000421e 	bne	r2,zero,1000ae48 <___vfiprintf_internal_r+0x1228>
1000ad40:	9480100c 	andi	r18,r18,64
1000ad44:	90009c26 	beq	r18,zero,1000afb8 <___vfiprintf_internal_r+0x1398>
1000ad48:	d9412317 	ldw	r5,1164(sp)
1000ad4c:	d8c12517 	ldw	r3,1172(sp)
1000ad50:	28800017 	ldw	r2,0(r5)
1000ad54:	29400104 	addi	r5,r5,4
1000ad58:	d9412315 	stw	r5,1164(sp)
1000ad5c:	10c0000d 	sth	r3,0(r2)
1000ad60:	003be706 	br	10009d00 <__alt_data_end+0xf8009d00>
1000ad64:	90c0100c 	andi	r3,r18,64
1000ad68:	18003e26 	beq	r3,zero,1000ae64 <___vfiprintf_internal_r+0x1244>
1000ad6c:	d8c12317 	ldw	r3,1164(sp)
1000ad70:	14c0000b 	ldhu	r19,0(r2)
1000ad74:	002b883a 	mov	r21,zero
1000ad78:	18c00104 	addi	r3,r3,4
1000ad7c:	d8c12315 	stw	r3,1164(sp)
1000ad80:	003db706 	br	1000a460 <__alt_data_end+0xf800a460>
1000ad84:	9080100c 	andi	r2,r18,64
1000ad88:	10004c26 	beq	r2,zero,1000aebc <___vfiprintf_internal_r+0x129c>
1000ad8c:	1cc0000f 	ldh	r19,0(r3)
1000ad90:	d8812317 	ldw	r2,1164(sp)
1000ad94:	982bd7fa 	srai	r21,r19,31
1000ad98:	10800104 	addi	r2,r2,4
1000ad9c:	d8812315 	stw	r2,1164(sp)
1000ada0:	a805883a 	mov	r2,r21
1000ada4:	003cd006 	br	1000a0e8 <__alt_data_end+0xf800a0e8>
1000ada8:	00800084 	movi	r2,2
1000adac:	003d8906 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000adb0:	b9800007 	ldb	r6,0(r23)
1000adb4:	003bfb06 	br	10009da4 <__alt_data_end+0xf8009da4>
1000adb8:	9080100c 	andi	r2,r18,64
1000adbc:	10003726 	beq	r2,zero,1000ae9c <___vfiprintf_internal_r+0x127c>
1000adc0:	d9412317 	ldw	r5,1164(sp)
1000adc4:	002b883a 	mov	r21,zero
1000adc8:	0005883a 	mov	r2,zero
1000adcc:	2cc0000b 	ldhu	r19,0(r5)
1000add0:	29400104 	addi	r5,r5,4
1000add4:	d9412315 	stw	r5,1164(sp)
1000add8:	9807883a 	mov	r3,r19
1000addc:	003d7d06 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000ade0:	9080100c 	andi	r2,r18,64
1000ade4:	10002526 	beq	r2,zero,1000ae7c <___vfiprintf_internal_r+0x125c>
1000ade8:	d8812317 	ldw	r2,1164(sp)
1000adec:	002b883a 	mov	r21,zero
1000adf0:	14c0000b 	ldhu	r19,0(r2)
1000adf4:	10800104 	addi	r2,r2,4
1000adf8:	d8812315 	stw	r2,1164(sp)
1000adfc:	9807883a 	mov	r3,r19
1000ae00:	00800044 	movi	r2,1
1000ae04:	003d7306 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000ae08:	d9012117 	ldw	r4,1156(sp)
1000ae0c:	d9412017 	ldw	r5,1152(sp)
1000ae10:	d9811a04 	addi	r6,sp,1128
1000ae14:	da812a15 	stw	r10,1192(sp)
1000ae18:	0009b0c0 	call	10009b0c <__sprint_r.part.0>
1000ae1c:	da812a17 	ldw	r10,1192(sp)
1000ae20:	103e9b1e 	bne	r2,zero,1000a890 <__alt_data_end+0xf800a890>
1000ae24:	d9411b17 	ldw	r5,1132(sp)
1000ae28:	d8c11c17 	ldw	r3,1136(sp)
1000ae2c:	d811883a 	mov	r8,sp
1000ae30:	28800044 	addi	r2,r5,1
1000ae34:	003e5006 	br	1000a778 <__alt_data_end+0xf800a778>
1000ae38:	182b883a 	mov	r21,r3
1000ae3c:	003ed006 	br	1000a980 <__alt_data_end+0xf800a980>
1000ae40:	8029883a 	mov	r20,r16
1000ae44:	003dc606 	br	1000a560 <__alt_data_end+0xf800a560>
1000ae48:	d8c12317 	ldw	r3,1164(sp)
1000ae4c:	d9012517 	ldw	r4,1172(sp)
1000ae50:	18800017 	ldw	r2,0(r3)
1000ae54:	18c00104 	addi	r3,r3,4
1000ae58:	d8c12315 	stw	r3,1164(sp)
1000ae5c:	11000015 	stw	r4,0(r2)
1000ae60:	003ba706 	br	10009d00 <__alt_data_end+0xf8009d00>
1000ae64:	d9012317 	ldw	r4,1164(sp)
1000ae68:	14c00017 	ldw	r19,0(r2)
1000ae6c:	002b883a 	mov	r21,zero
1000ae70:	21000104 	addi	r4,r4,4
1000ae74:	d9012315 	stw	r4,1164(sp)
1000ae78:	003d7906 	br	1000a460 <__alt_data_end+0xf800a460>
1000ae7c:	d8c12317 	ldw	r3,1164(sp)
1000ae80:	002b883a 	mov	r21,zero
1000ae84:	00800044 	movi	r2,1
1000ae88:	1cc00017 	ldw	r19,0(r3)
1000ae8c:	18c00104 	addi	r3,r3,4
1000ae90:	d8c12315 	stw	r3,1164(sp)
1000ae94:	9807883a 	mov	r3,r19
1000ae98:	003d4e06 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000ae9c:	d8812317 	ldw	r2,1164(sp)
1000aea0:	002b883a 	mov	r21,zero
1000aea4:	14c00017 	ldw	r19,0(r2)
1000aea8:	10800104 	addi	r2,r2,4
1000aeac:	d8812315 	stw	r2,1164(sp)
1000aeb0:	9807883a 	mov	r3,r19
1000aeb4:	0005883a 	mov	r2,zero
1000aeb8:	003d4606 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000aebc:	1cc00017 	ldw	r19,0(r3)
1000aec0:	d8c12317 	ldw	r3,1164(sp)
1000aec4:	982bd7fa 	srai	r21,r19,31
1000aec8:	18c00104 	addi	r3,r3,4
1000aecc:	d8c12315 	stw	r3,1164(sp)
1000aed0:	a805883a 	mov	r2,r21
1000aed4:	003c8406 	br	1000a0e8 <__alt_data_end+0xf800a0e8>
1000aed8:	01040074 	movhi	r4,4097
1000aedc:	21087c04 	addi	r4,r4,8688
1000aee0:	d9012615 	stw	r4,1176(sp)
1000aee4:	003d0606 	br	1000a300 <__alt_data_end+0xf800a300>
1000aee8:	b9800043 	ldbu	r6,1(r23)
1000aeec:	94800814 	ori	r18,r18,32
1000aef0:	bdc00044 	addi	r23,r23,1
1000aef4:	31803fcc 	andi	r6,r6,255
1000aef8:	3180201c 	xori	r6,r6,128
1000aefc:	31bfe004 	addi	r6,r6,-128
1000af00:	003ba806 	br	10009da4 <__alt_data_end+0xf8009da4>
1000af04:	d8811e17 	ldw	r2,1144(sp)
1000af08:	d8c12217 	ldw	r3,1160(sp)
1000af0c:	10e9c83a 	sub	r20,r2,r3
1000af10:	003c9406 	br	1000a164 <__alt_data_end+0xf800a164>
1000af14:	da012a15 	stw	r8,1192(sp)
1000af18:	00027300 	call	10002730 <strlen>
1000af1c:	1029883a 	mov	r20,r2
1000af20:	dd811d83 	ldbu	r22,1142(sp)
1000af24:	dcc12315 	stw	r19,1164(sp)
1000af28:	0021883a 	mov	r16,zero
1000af2c:	da012a17 	ldw	r8,1192(sp)
1000af30:	003c8c06 	br	1000a164 <__alt_data_end+0xf800a164>
1000af34:	d9012117 	ldw	r4,1156(sp)
1000af38:	d9412017 	ldw	r5,1152(sp)
1000af3c:	d9811a04 	addi	r6,sp,1128
1000af40:	0009b0c0 	call	10009b0c <__sprint_r.part.0>
1000af44:	103e521e 	bne	r2,zero,1000a890 <__alt_data_end+0xf800a890>
1000af48:	d9411b17 	ldw	r5,1132(sp)
1000af4c:	d8c11c17 	ldw	r3,1136(sp)
1000af50:	d811883a 	mov	r8,sp
1000af54:	28800044 	addi	r2,r5,1
1000af58:	003cce06 	br	1000a294 <__alt_data_end+0xf800a294>
1000af5c:	01440074 	movhi	r5,4097
1000af60:	29488004 	addi	r5,r5,8704
1000af64:	d9412615 	stw	r5,1176(sp)
1000af68:	d9411b17 	ldw	r5,1132(sp)
1000af6c:	29400044 	addi	r5,r5,1
1000af70:	003cad06 	br	1000a228 <__alt_data_end+0xf800a228>
1000af74:	00800184 	movi	r2,6
1000af78:	1400012e 	bgeu	r2,r16,1000af80 <___vfiprintf_internal_r+0x1360>
1000af7c:	1021883a 	mov	r16,r2
1000af80:	8029883a 	mov	r20,r16
1000af84:	802b883a 	mov	r21,r16
1000af88:	80001c16 	blt	r16,zero,1000affc <___vfiprintf_internal_r+0x13dc>
1000af8c:	00c40074 	movhi	r3,4097
1000af90:	18c82004 	addi	r3,r3,8320
1000af94:	dcc12315 	stw	r19,1164(sp)
1000af98:	d8c12215 	stw	r3,1160(sp)
1000af9c:	003cff06 	br	1000a39c <__alt_data_end+0xf800a39c>
1000afa0:	d9411b17 	ldw	r5,1132(sp)
1000afa4:	00840074 	movhi	r2,4097
1000afa8:	10888004 	addi	r2,r2,8704
1000afac:	d8812615 	stw	r2,1176(sp)
1000afb0:	29400044 	addi	r5,r5,1
1000afb4:	003e6706 	br	1000a954 <__alt_data_end+0xf800a954>
1000afb8:	d9012317 	ldw	r4,1164(sp)
1000afbc:	d9412517 	ldw	r5,1172(sp)
1000afc0:	20800017 	ldw	r2,0(r4)
1000afc4:	21000104 	addi	r4,r4,4
1000afc8:	d9012315 	stw	r4,1164(sp)
1000afcc:	11400015 	stw	r5,0(r2)
1000afd0:	003b4b06 	br	10009d00 <__alt_data_end+0xf8009d00>
1000afd4:	8029883a 	mov	r20,r16
1000afd8:	dd811d83 	ldbu	r22,1142(sp)
1000afdc:	dcc12315 	stw	r19,1164(sp)
1000afe0:	0021883a 	mov	r16,zero
1000afe4:	003c5f06 	br	1000a164 <__alt_data_end+0xf800a164>
1000afe8:	01040074 	movhi	r4,4097
1000afec:	21087c04 	addi	r4,r4,8688
1000aff0:	d9012615 	stw	r4,1176(sp)
1000aff4:	1009883a 	mov	r4,r2
1000aff8:	003ea006 	br	1000aa7c <__alt_data_end+0xf800aa7c>
1000affc:	002b883a 	mov	r21,zero
1000b000:	003fe206 	br	1000af8c <__alt_data_end+0xf800af8c>
1000b004:	d9412317 	ldw	r5,1164(sp)
1000b008:	b807883a 	mov	r3,r23
1000b00c:	102f883a 	mov	r23,r2
1000b010:	2c000017 	ldw	r16,0(r5)
1000b014:	29000104 	addi	r4,r5,4
1000b018:	d9012315 	stw	r4,1164(sp)
1000b01c:	80000416 	blt	r16,zero,1000b030 <___vfiprintf_internal_r+0x1410>
1000b020:	19800047 	ldb	r6,1(r3)
1000b024:	003b5f06 	br	10009da4 <__alt_data_end+0xf8009da4>
1000b028:	043fffc4 	movi	r16,-1
1000b02c:	003bef06 	br	10009fec <__alt_data_end+0xf8009fec>
1000b030:	043fffc4 	movi	r16,-1
1000b034:	19800047 	ldb	r6,1(r3)
1000b038:	003b5a06 	br	10009da4 <__alt_data_end+0xf8009da4>
1000b03c:	282b883a 	mov	r21,r5
1000b040:	003cc706 	br	1000a360 <__alt_data_end+0xf800a360>

1000b044 <__vfiprintf_internal>:
1000b044:	2007883a 	mov	r3,r4
1000b048:	01040074 	movhi	r4,4097
1000b04c:	210f7d04 	addi	r4,r4,15860
1000b050:	21000017 	ldw	r4,0(r4)
1000b054:	2805883a 	mov	r2,r5
1000b058:	300f883a 	mov	r7,r6
1000b05c:	180b883a 	mov	r5,r3
1000b060:	100d883a 	mov	r6,r2
1000b064:	0009c201 	jmpi	10009c20 <___vfiprintf_internal_r>

1000b068 <_write_r>:
1000b068:	defffd04 	addi	sp,sp,-12
1000b06c:	dc000015 	stw	r16,0(sp)
1000b070:	04040074 	movhi	r16,4097
1000b074:	dc400115 	stw	r17,4(sp)
1000b078:	84164e04 	addi	r16,r16,22840
1000b07c:	2023883a 	mov	r17,r4
1000b080:	2809883a 	mov	r4,r5
1000b084:	300b883a 	mov	r5,r6
1000b088:	380d883a 	mov	r6,r7
1000b08c:	dfc00215 	stw	ra,8(sp)
1000b090:	80000015 	stw	zero,0(r16)
1000b094:	000f9900 	call	1000f990 <write>
1000b098:	00ffffc4 	movi	r3,-1
1000b09c:	10c00526 	beq	r2,r3,1000b0b4 <_write_r+0x4c>
1000b0a0:	dfc00217 	ldw	ra,8(sp)
1000b0a4:	dc400117 	ldw	r17,4(sp)
1000b0a8:	dc000017 	ldw	r16,0(sp)
1000b0ac:	dec00304 	addi	sp,sp,12
1000b0b0:	f800283a 	ret
1000b0b4:	80c00017 	ldw	r3,0(r16)
1000b0b8:	183ff926 	beq	r3,zero,1000b0a0 <__alt_data_end+0xf800b0a0>
1000b0bc:	88c00015 	stw	r3,0(r17)
1000b0c0:	003ff706 	br	1000b0a0 <__alt_data_end+0xf800b0a0>

1000b0c4 <_close_r>:
1000b0c4:	defffd04 	addi	sp,sp,-12
1000b0c8:	dc000015 	stw	r16,0(sp)
1000b0cc:	04040074 	movhi	r16,4097
1000b0d0:	dc400115 	stw	r17,4(sp)
1000b0d4:	84164e04 	addi	r16,r16,22840
1000b0d8:	2023883a 	mov	r17,r4
1000b0dc:	2809883a 	mov	r4,r5
1000b0e0:	dfc00215 	stw	ra,8(sp)
1000b0e4:	80000015 	stw	zero,0(r16)
1000b0e8:	000f0bc0 	call	1000f0bc <close>
1000b0ec:	00ffffc4 	movi	r3,-1
1000b0f0:	10c00526 	beq	r2,r3,1000b108 <_close_r+0x44>
1000b0f4:	dfc00217 	ldw	ra,8(sp)
1000b0f8:	dc400117 	ldw	r17,4(sp)
1000b0fc:	dc000017 	ldw	r16,0(sp)
1000b100:	dec00304 	addi	sp,sp,12
1000b104:	f800283a 	ret
1000b108:	80c00017 	ldw	r3,0(r16)
1000b10c:	183ff926 	beq	r3,zero,1000b0f4 <__alt_data_end+0xf800b0f4>
1000b110:	88c00015 	stw	r3,0(r17)
1000b114:	003ff706 	br	1000b0f4 <__alt_data_end+0xf800b0f4>

1000b118 <_calloc_r>:
1000b118:	defffe04 	addi	sp,sp,-8
1000b11c:	dc000015 	stw	r16,0(sp)
1000b120:	2021883a 	mov	r16,r4
1000b124:	2809883a 	mov	r4,r5
1000b128:	300b883a 	mov	r5,r6
1000b12c:	dfc00115 	stw	ra,4(sp)
1000b130:	000c8480 	call	1000c848 <__mulsi3>
1000b134:	8009883a 	mov	r4,r16
1000b138:	100b883a 	mov	r5,r2
1000b13c:	00076340 	call	10007634 <_malloc_r>
1000b140:	1021883a 	mov	r16,r2
1000b144:	10002826 	beq	r2,zero,1000b1e8 <_calloc_r+0xd0>
1000b148:	11bfff17 	ldw	r6,-4(r2)
1000b14c:	00bfff04 	movi	r2,-4
1000b150:	00c00904 	movi	r3,36
1000b154:	308c703a 	and	r6,r6,r2
1000b158:	308d883a 	add	r6,r6,r2
1000b15c:	19801436 	bltu	r3,r6,1000b1b0 <_calloc_r+0x98>
1000b160:	008004c4 	movi	r2,19
1000b164:	11800936 	bltu	r2,r6,1000b18c <_calloc_r+0x74>
1000b168:	8005883a 	mov	r2,r16
1000b16c:	10000015 	stw	zero,0(r2)
1000b170:	10000115 	stw	zero,4(r2)
1000b174:	10000215 	stw	zero,8(r2)
1000b178:	8005883a 	mov	r2,r16
1000b17c:	dfc00117 	ldw	ra,4(sp)
1000b180:	dc000017 	ldw	r16,0(sp)
1000b184:	dec00204 	addi	sp,sp,8
1000b188:	f800283a 	ret
1000b18c:	80000015 	stw	zero,0(r16)
1000b190:	80000115 	stw	zero,4(r16)
1000b194:	008006c4 	movi	r2,27
1000b198:	11800d2e 	bgeu	r2,r6,1000b1d0 <_calloc_r+0xb8>
1000b19c:	80000215 	stw	zero,8(r16)
1000b1a0:	80000315 	stw	zero,12(r16)
1000b1a4:	30c00c26 	beq	r6,r3,1000b1d8 <_calloc_r+0xc0>
1000b1a8:	80800404 	addi	r2,r16,16
1000b1ac:	003fef06 	br	1000b16c <__alt_data_end+0xf800b16c>
1000b1b0:	8009883a 	mov	r4,r16
1000b1b4:	000b883a 	mov	r5,zero
1000b1b8:	00081580 	call	10008158 <memset>
1000b1bc:	8005883a 	mov	r2,r16
1000b1c0:	dfc00117 	ldw	ra,4(sp)
1000b1c4:	dc000017 	ldw	r16,0(sp)
1000b1c8:	dec00204 	addi	sp,sp,8
1000b1cc:	f800283a 	ret
1000b1d0:	80800204 	addi	r2,r16,8
1000b1d4:	003fe506 	br	1000b16c <__alt_data_end+0xf800b16c>
1000b1d8:	80000415 	stw	zero,16(r16)
1000b1dc:	80800604 	addi	r2,r16,24
1000b1e0:	80000515 	stw	zero,20(r16)
1000b1e4:	003fe106 	br	1000b16c <__alt_data_end+0xf800b16c>
1000b1e8:	0005883a 	mov	r2,zero
1000b1ec:	003fe306 	br	1000b17c <__alt_data_end+0xf800b17c>

1000b1f0 <_fclose_r>:
1000b1f0:	28003226 	beq	r5,zero,1000b2bc <_fclose_r+0xcc>
1000b1f4:	defffc04 	addi	sp,sp,-16
1000b1f8:	dc400115 	stw	r17,4(sp)
1000b1fc:	2023883a 	mov	r17,r4
1000b200:	dc000015 	stw	r16,0(sp)
1000b204:	dfc00315 	stw	ra,12(sp)
1000b208:	dc800215 	stw	r18,8(sp)
1000b20c:	2821883a 	mov	r16,r5
1000b210:	00069340 	call	10006934 <__sfp_lock_acquire>
1000b214:	88000226 	beq	r17,zero,1000b220 <_fclose_r+0x30>
1000b218:	88800e17 	ldw	r2,56(r17)
1000b21c:	10002926 	beq	r2,zero,1000b2c4 <_fclose_r+0xd4>
1000b220:	8080030f 	ldh	r2,12(r16)
1000b224:	10002226 	beq	r2,zero,1000b2b0 <_fclose_r+0xc0>
1000b228:	8809883a 	mov	r4,r17
1000b22c:	800b883a 	mov	r5,r16
1000b230:	00063680 	call	10006368 <_fflush_r>
1000b234:	1025883a 	mov	r18,r2
1000b238:	80800b17 	ldw	r2,44(r16)
1000b23c:	10000426 	beq	r2,zero,1000b250 <_fclose_r+0x60>
1000b240:	81400717 	ldw	r5,28(r16)
1000b244:	8809883a 	mov	r4,r17
1000b248:	103ee83a 	callr	r2
1000b24c:	10002616 	blt	r2,zero,1000b2e8 <_fclose_r+0xf8>
1000b250:	8080030b 	ldhu	r2,12(r16)
1000b254:	1080200c 	andi	r2,r2,128
1000b258:	10001f1e 	bne	r2,zero,1000b2d8 <_fclose_r+0xe8>
1000b25c:	81400c17 	ldw	r5,48(r16)
1000b260:	28000526 	beq	r5,zero,1000b278 <_fclose_r+0x88>
1000b264:	80801004 	addi	r2,r16,64
1000b268:	28800226 	beq	r5,r2,1000b274 <_fclose_r+0x84>
1000b26c:	8809883a 	mov	r4,r17
1000b270:	0006a980 	call	10006a98 <_free_r>
1000b274:	80000c15 	stw	zero,48(r16)
1000b278:	81401117 	ldw	r5,68(r16)
1000b27c:	28000326 	beq	r5,zero,1000b28c <_fclose_r+0x9c>
1000b280:	8809883a 	mov	r4,r17
1000b284:	0006a980 	call	10006a98 <_free_r>
1000b288:	80001115 	stw	zero,68(r16)
1000b28c:	8000030d 	sth	zero,12(r16)
1000b290:	00069380 	call	10006938 <__sfp_lock_release>
1000b294:	9005883a 	mov	r2,r18
1000b298:	dfc00317 	ldw	ra,12(sp)
1000b29c:	dc800217 	ldw	r18,8(sp)
1000b2a0:	dc400117 	ldw	r17,4(sp)
1000b2a4:	dc000017 	ldw	r16,0(sp)
1000b2a8:	dec00404 	addi	sp,sp,16
1000b2ac:	f800283a 	ret
1000b2b0:	00069380 	call	10006938 <__sfp_lock_release>
1000b2b4:	0005883a 	mov	r2,zero
1000b2b8:	003ff706 	br	1000b298 <__alt_data_end+0xf800b298>
1000b2bc:	0005883a 	mov	r2,zero
1000b2c0:	f800283a 	ret
1000b2c4:	8809883a 	mov	r4,r17
1000b2c8:	00069240 	call	10006924 <__sinit>
1000b2cc:	8080030f 	ldh	r2,12(r16)
1000b2d0:	103fd51e 	bne	r2,zero,1000b228 <__alt_data_end+0xf800b228>
1000b2d4:	003ff606 	br	1000b2b0 <__alt_data_end+0xf800b2b0>
1000b2d8:	81400417 	ldw	r5,16(r16)
1000b2dc:	8809883a 	mov	r4,r17
1000b2e0:	0006a980 	call	10006a98 <_free_r>
1000b2e4:	003fdd06 	br	1000b25c <__alt_data_end+0xf800b25c>
1000b2e8:	04bfffc4 	movi	r18,-1
1000b2ec:	003fd806 	br	1000b250 <__alt_data_end+0xf800b250>

1000b2f0 <fclose>:
1000b2f0:	00840074 	movhi	r2,4097
1000b2f4:	108f7d04 	addi	r2,r2,15860
1000b2f8:	200b883a 	mov	r5,r4
1000b2fc:	11000017 	ldw	r4,0(r2)
1000b300:	000b1f01 	jmpi	1000b1f0 <_fclose_r>

1000b304 <_fputwc_r>:
1000b304:	3080030b 	ldhu	r2,12(r6)
1000b308:	defff804 	addi	sp,sp,-32
1000b30c:	dcc00415 	stw	r19,16(sp)
1000b310:	dc800315 	stw	r18,12(sp)
1000b314:	dc000115 	stw	r16,4(sp)
1000b318:	dfc00715 	stw	ra,28(sp)
1000b31c:	dd400615 	stw	r21,24(sp)
1000b320:	dd000515 	stw	r20,20(sp)
1000b324:	dc400215 	stw	r17,8(sp)
1000b328:	10c8000c 	andi	r3,r2,8192
1000b32c:	3021883a 	mov	r16,r6
1000b330:	2027883a 	mov	r19,r4
1000b334:	2825883a 	mov	r18,r5
1000b338:	1800051e 	bne	r3,zero,1000b350 <_fputwc_r+0x4c>
1000b33c:	30c01917 	ldw	r3,100(r6)
1000b340:	10880014 	ori	r2,r2,8192
1000b344:	3080030d 	sth	r2,12(r6)
1000b348:	18880014 	ori	r2,r3,8192
1000b34c:	30801915 	stw	r2,100(r6)
1000b350:	00074240 	call	10007424 <__locale_mb_cur_max>
1000b354:	00c00044 	movi	r3,1
1000b358:	10c03e26 	beq	r2,r3,1000b454 <_fputwc_r+0x150>
1000b35c:	9809883a 	mov	r4,r19
1000b360:	d80b883a 	mov	r5,sp
1000b364:	900d883a 	mov	r6,r18
1000b368:	81c01704 	addi	r7,r16,92
1000b36c:	000b7b40 	call	1000b7b4 <_wcrtomb_r>
1000b370:	1029883a 	mov	r20,r2
1000b374:	00bfffc4 	movi	r2,-1
1000b378:	a0802026 	beq	r20,r2,1000b3fc <_fputwc_r+0xf8>
1000b37c:	d9400003 	ldbu	r5,0(sp)
1000b380:	a0001c26 	beq	r20,zero,1000b3f4 <_fputwc_r+0xf0>
1000b384:	0023883a 	mov	r17,zero
1000b388:	05400284 	movi	r21,10
1000b38c:	00000906 	br	1000b3b4 <_fputwc_r+0xb0>
1000b390:	80800017 	ldw	r2,0(r16)
1000b394:	11400005 	stb	r5,0(r2)
1000b398:	80c00017 	ldw	r3,0(r16)
1000b39c:	18c00044 	addi	r3,r3,1
1000b3a0:	80c00015 	stw	r3,0(r16)
1000b3a4:	8c400044 	addi	r17,r17,1
1000b3a8:	dc45883a 	add	r2,sp,r17
1000b3ac:	8d00112e 	bgeu	r17,r20,1000b3f4 <_fputwc_r+0xf0>
1000b3b0:	11400003 	ldbu	r5,0(r2)
1000b3b4:	80c00217 	ldw	r3,8(r16)
1000b3b8:	18ffffc4 	addi	r3,r3,-1
1000b3bc:	80c00215 	stw	r3,8(r16)
1000b3c0:	183ff30e 	bge	r3,zero,1000b390 <__alt_data_end+0xf800b390>
1000b3c4:	80800617 	ldw	r2,24(r16)
1000b3c8:	18801916 	blt	r3,r2,1000b430 <_fputwc_r+0x12c>
1000b3cc:	80800017 	ldw	r2,0(r16)
1000b3d0:	11400005 	stb	r5,0(r2)
1000b3d4:	80800017 	ldw	r2,0(r16)
1000b3d8:	10c00003 	ldbu	r3,0(r2)
1000b3dc:	10800044 	addi	r2,r2,1
1000b3e0:	1d402326 	beq	r3,r21,1000b470 <_fputwc_r+0x16c>
1000b3e4:	80800015 	stw	r2,0(r16)
1000b3e8:	8c400044 	addi	r17,r17,1
1000b3ec:	dc45883a 	add	r2,sp,r17
1000b3f0:	8d3fef36 	bltu	r17,r20,1000b3b0 <__alt_data_end+0xf800b3b0>
1000b3f4:	9005883a 	mov	r2,r18
1000b3f8:	00000406 	br	1000b40c <_fputwc_r+0x108>
1000b3fc:	80c0030b 	ldhu	r3,12(r16)
1000b400:	a005883a 	mov	r2,r20
1000b404:	18c01014 	ori	r3,r3,64
1000b408:	80c0030d 	sth	r3,12(r16)
1000b40c:	dfc00717 	ldw	ra,28(sp)
1000b410:	dd400617 	ldw	r21,24(sp)
1000b414:	dd000517 	ldw	r20,20(sp)
1000b418:	dcc00417 	ldw	r19,16(sp)
1000b41c:	dc800317 	ldw	r18,12(sp)
1000b420:	dc400217 	ldw	r17,8(sp)
1000b424:	dc000117 	ldw	r16,4(sp)
1000b428:	dec00804 	addi	sp,sp,32
1000b42c:	f800283a 	ret
1000b430:	9809883a 	mov	r4,r19
1000b434:	29403fcc 	andi	r5,r5,255
1000b438:	800d883a 	mov	r6,r16
1000b43c:	000b6440 	call	1000b644 <__swbuf_r>
1000b440:	10bfffe0 	cmpeqi	r2,r2,-1
1000b444:	10803fcc 	andi	r2,r2,255
1000b448:	103fd626 	beq	r2,zero,1000b3a4 <__alt_data_end+0xf800b3a4>
1000b44c:	00bfffc4 	movi	r2,-1
1000b450:	003fee06 	br	1000b40c <__alt_data_end+0xf800b40c>
1000b454:	90ffffc4 	addi	r3,r18,-1
1000b458:	01003f84 	movi	r4,254
1000b45c:	20ffbf36 	bltu	r4,r3,1000b35c <__alt_data_end+0xf800b35c>
1000b460:	900b883a 	mov	r5,r18
1000b464:	dc800005 	stb	r18,0(sp)
1000b468:	1029883a 	mov	r20,r2
1000b46c:	003fc506 	br	1000b384 <__alt_data_end+0xf800b384>
1000b470:	9809883a 	mov	r4,r19
1000b474:	a80b883a 	mov	r5,r21
1000b478:	800d883a 	mov	r6,r16
1000b47c:	000b6440 	call	1000b644 <__swbuf_r>
1000b480:	10bfffe0 	cmpeqi	r2,r2,-1
1000b484:	003fef06 	br	1000b444 <__alt_data_end+0xf800b444>

1000b488 <fputwc>:
1000b488:	defffc04 	addi	sp,sp,-16
1000b48c:	dc000115 	stw	r16,4(sp)
1000b490:	04040074 	movhi	r16,4097
1000b494:	840f7d04 	addi	r16,r16,15860
1000b498:	dc400215 	stw	r17,8(sp)
1000b49c:	2023883a 	mov	r17,r4
1000b4a0:	81000017 	ldw	r4,0(r16)
1000b4a4:	dfc00315 	stw	ra,12(sp)
1000b4a8:	280d883a 	mov	r6,r5
1000b4ac:	20000626 	beq	r4,zero,1000b4c8 <fputwc+0x40>
1000b4b0:	20800e17 	ldw	r2,56(r4)
1000b4b4:	1000041e 	bne	r2,zero,1000b4c8 <fputwc+0x40>
1000b4b8:	d9400015 	stw	r5,0(sp)
1000b4bc:	00069240 	call	10006924 <__sinit>
1000b4c0:	81000017 	ldw	r4,0(r16)
1000b4c4:	d9800017 	ldw	r6,0(sp)
1000b4c8:	880b883a 	mov	r5,r17
1000b4cc:	dfc00317 	ldw	ra,12(sp)
1000b4d0:	dc400217 	ldw	r17,8(sp)
1000b4d4:	dc000117 	ldw	r16,4(sp)
1000b4d8:	dec00404 	addi	sp,sp,16
1000b4dc:	000b3041 	jmpi	1000b304 <_fputwc_r>

1000b4e0 <_fstat_r>:
1000b4e0:	defffd04 	addi	sp,sp,-12
1000b4e4:	dc000015 	stw	r16,0(sp)
1000b4e8:	04040074 	movhi	r16,4097
1000b4ec:	dc400115 	stw	r17,4(sp)
1000b4f0:	84164e04 	addi	r16,r16,22840
1000b4f4:	2023883a 	mov	r17,r4
1000b4f8:	2809883a 	mov	r4,r5
1000b4fc:	300b883a 	mov	r5,r6
1000b500:	dfc00215 	stw	ra,8(sp)
1000b504:	80000015 	stw	zero,0(r16)
1000b508:	000f2100 	call	1000f210 <fstat>
1000b50c:	00ffffc4 	movi	r3,-1
1000b510:	10c00526 	beq	r2,r3,1000b528 <_fstat_r+0x48>
1000b514:	dfc00217 	ldw	ra,8(sp)
1000b518:	dc400117 	ldw	r17,4(sp)
1000b51c:	dc000017 	ldw	r16,0(sp)
1000b520:	dec00304 	addi	sp,sp,12
1000b524:	f800283a 	ret
1000b528:	80c00017 	ldw	r3,0(r16)
1000b52c:	183ff926 	beq	r3,zero,1000b514 <__alt_data_end+0xf800b514>
1000b530:	88c00015 	stw	r3,0(r17)
1000b534:	003ff706 	br	1000b514 <__alt_data_end+0xf800b514>

1000b538 <_isatty_r>:
1000b538:	defffd04 	addi	sp,sp,-12
1000b53c:	dc000015 	stw	r16,0(sp)
1000b540:	04040074 	movhi	r16,4097
1000b544:	dc400115 	stw	r17,4(sp)
1000b548:	84164e04 	addi	r16,r16,22840
1000b54c:	2023883a 	mov	r17,r4
1000b550:	2809883a 	mov	r4,r5
1000b554:	dfc00215 	stw	ra,8(sp)
1000b558:	80000015 	stw	zero,0(r16)
1000b55c:	000f3180 	call	1000f318 <isatty>
1000b560:	00ffffc4 	movi	r3,-1
1000b564:	10c00526 	beq	r2,r3,1000b57c <_isatty_r+0x44>
1000b568:	dfc00217 	ldw	ra,8(sp)
1000b56c:	dc400117 	ldw	r17,4(sp)
1000b570:	dc000017 	ldw	r16,0(sp)
1000b574:	dec00304 	addi	sp,sp,12
1000b578:	f800283a 	ret
1000b57c:	80c00017 	ldw	r3,0(r16)
1000b580:	183ff926 	beq	r3,zero,1000b568 <__alt_data_end+0xf800b568>
1000b584:	88c00015 	stw	r3,0(r17)
1000b588:	003ff706 	br	1000b568 <__alt_data_end+0xf800b568>

1000b58c <_lseek_r>:
1000b58c:	defffd04 	addi	sp,sp,-12
1000b590:	dc000015 	stw	r16,0(sp)
1000b594:	04040074 	movhi	r16,4097
1000b598:	dc400115 	stw	r17,4(sp)
1000b59c:	84164e04 	addi	r16,r16,22840
1000b5a0:	2023883a 	mov	r17,r4
1000b5a4:	2809883a 	mov	r4,r5
1000b5a8:	300b883a 	mov	r5,r6
1000b5ac:	380d883a 	mov	r6,r7
1000b5b0:	dfc00215 	stw	ra,8(sp)
1000b5b4:	80000015 	stw	zero,0(r16)
1000b5b8:	000f4f80 	call	1000f4f8 <lseek>
1000b5bc:	00ffffc4 	movi	r3,-1
1000b5c0:	10c00526 	beq	r2,r3,1000b5d8 <_lseek_r+0x4c>
1000b5c4:	dfc00217 	ldw	ra,8(sp)
1000b5c8:	dc400117 	ldw	r17,4(sp)
1000b5cc:	dc000017 	ldw	r16,0(sp)
1000b5d0:	dec00304 	addi	sp,sp,12
1000b5d4:	f800283a 	ret
1000b5d8:	80c00017 	ldw	r3,0(r16)
1000b5dc:	183ff926 	beq	r3,zero,1000b5c4 <__alt_data_end+0xf800b5c4>
1000b5e0:	88c00015 	stw	r3,0(r17)
1000b5e4:	003ff706 	br	1000b5c4 <__alt_data_end+0xf800b5c4>

1000b5e8 <_read_r>:
1000b5e8:	defffd04 	addi	sp,sp,-12
1000b5ec:	dc000015 	stw	r16,0(sp)
1000b5f0:	04040074 	movhi	r16,4097
1000b5f4:	dc400115 	stw	r17,4(sp)
1000b5f8:	84164e04 	addi	r16,r16,22840
1000b5fc:	2023883a 	mov	r17,r4
1000b600:	2809883a 	mov	r4,r5
1000b604:	300b883a 	mov	r5,r6
1000b608:	380d883a 	mov	r6,r7
1000b60c:	dfc00215 	stw	ra,8(sp)
1000b610:	80000015 	stw	zero,0(r16)
1000b614:	000f6dc0 	call	1000f6dc <read>
1000b618:	00ffffc4 	movi	r3,-1
1000b61c:	10c00526 	beq	r2,r3,1000b634 <_read_r+0x4c>
1000b620:	dfc00217 	ldw	ra,8(sp)
1000b624:	dc400117 	ldw	r17,4(sp)
1000b628:	dc000017 	ldw	r16,0(sp)
1000b62c:	dec00304 	addi	sp,sp,12
1000b630:	f800283a 	ret
1000b634:	80c00017 	ldw	r3,0(r16)
1000b638:	183ff926 	beq	r3,zero,1000b620 <__alt_data_end+0xf800b620>
1000b63c:	88c00015 	stw	r3,0(r17)
1000b640:	003ff706 	br	1000b620 <__alt_data_end+0xf800b620>

1000b644 <__swbuf_r>:
1000b644:	defffc04 	addi	sp,sp,-16
1000b648:	dc800215 	stw	r18,8(sp)
1000b64c:	dc400115 	stw	r17,4(sp)
1000b650:	dc000015 	stw	r16,0(sp)
1000b654:	dfc00315 	stw	ra,12(sp)
1000b658:	2025883a 	mov	r18,r4
1000b65c:	2823883a 	mov	r17,r5
1000b660:	3021883a 	mov	r16,r6
1000b664:	20000226 	beq	r4,zero,1000b670 <__swbuf_r+0x2c>
1000b668:	20800e17 	ldw	r2,56(r4)
1000b66c:	10004126 	beq	r2,zero,1000b774 <__swbuf_r+0x130>
1000b670:	80c00617 	ldw	r3,24(r16)
1000b674:	8180030b 	ldhu	r6,12(r16)
1000b678:	80c00215 	stw	r3,8(r16)
1000b67c:	30c0020c 	andi	r3,r6,8
1000b680:	18003526 	beq	r3,zero,1000b758 <__swbuf_r+0x114>
1000b684:	80c00417 	ldw	r3,16(r16)
1000b688:	18003326 	beq	r3,zero,1000b758 <__swbuf_r+0x114>
1000b68c:	3088000c 	andi	r2,r6,8192
1000b690:	8c403fcc 	andi	r17,r17,255
1000b694:	10001726 	beq	r2,zero,1000b6f4 <__swbuf_r+0xb0>
1000b698:	80800017 	ldw	r2,0(r16)
1000b69c:	81000517 	ldw	r4,20(r16)
1000b6a0:	10c7c83a 	sub	r3,r2,r3
1000b6a4:	19001d0e 	bge	r3,r4,1000b71c <__swbuf_r+0xd8>
1000b6a8:	18c00044 	addi	r3,r3,1
1000b6ac:	81400217 	ldw	r5,8(r16)
1000b6b0:	11000044 	addi	r4,r2,1
1000b6b4:	81000015 	stw	r4,0(r16)
1000b6b8:	297fffc4 	addi	r5,r5,-1
1000b6bc:	81400215 	stw	r5,8(r16)
1000b6c0:	14400005 	stb	r17,0(r2)
1000b6c4:	80800517 	ldw	r2,20(r16)
1000b6c8:	10c01d26 	beq	r2,r3,1000b740 <__swbuf_r+0xfc>
1000b6cc:	8080030b 	ldhu	r2,12(r16)
1000b6d0:	1080004c 	andi	r2,r2,1
1000b6d4:	1000181e 	bne	r2,zero,1000b738 <__swbuf_r+0xf4>
1000b6d8:	8805883a 	mov	r2,r17
1000b6dc:	dfc00317 	ldw	ra,12(sp)
1000b6e0:	dc800217 	ldw	r18,8(sp)
1000b6e4:	dc400117 	ldw	r17,4(sp)
1000b6e8:	dc000017 	ldw	r16,0(sp)
1000b6ec:	dec00404 	addi	sp,sp,16
1000b6f0:	f800283a 	ret
1000b6f4:	81001917 	ldw	r4,100(r16)
1000b6f8:	00b7ffc4 	movi	r2,-8193
1000b6fc:	31880014 	ori	r6,r6,8192
1000b700:	2084703a 	and	r2,r4,r2
1000b704:	80801915 	stw	r2,100(r16)
1000b708:	80800017 	ldw	r2,0(r16)
1000b70c:	81000517 	ldw	r4,20(r16)
1000b710:	8180030d 	sth	r6,12(r16)
1000b714:	10c7c83a 	sub	r3,r2,r3
1000b718:	193fe316 	blt	r3,r4,1000b6a8 <__alt_data_end+0xf800b6a8>
1000b71c:	9009883a 	mov	r4,r18
1000b720:	800b883a 	mov	r5,r16
1000b724:	00063680 	call	10006368 <_fflush_r>
1000b728:	1000091e 	bne	r2,zero,1000b750 <__swbuf_r+0x10c>
1000b72c:	80800017 	ldw	r2,0(r16)
1000b730:	00c00044 	movi	r3,1
1000b734:	003fdd06 	br	1000b6ac <__alt_data_end+0xf800b6ac>
1000b738:	00800284 	movi	r2,10
1000b73c:	88bfe61e 	bne	r17,r2,1000b6d8 <__alt_data_end+0xf800b6d8>
1000b740:	9009883a 	mov	r4,r18
1000b744:	800b883a 	mov	r5,r16
1000b748:	00063680 	call	10006368 <_fflush_r>
1000b74c:	103fe226 	beq	r2,zero,1000b6d8 <__alt_data_end+0xf800b6d8>
1000b750:	00bfffc4 	movi	r2,-1
1000b754:	003fe106 	br	1000b6dc <__alt_data_end+0xf800b6dc>
1000b758:	9009883a 	mov	r4,r18
1000b75c:	800b883a 	mov	r5,r16
1000b760:	00048e80 	call	100048e8 <__swsetup_r>
1000b764:	1000051e 	bne	r2,zero,1000b77c <__swbuf_r+0x138>
1000b768:	8180030b 	ldhu	r6,12(r16)
1000b76c:	80c00417 	ldw	r3,16(r16)
1000b770:	003fc606 	br	1000b68c <__alt_data_end+0xf800b68c>
1000b774:	00069240 	call	10006924 <__sinit>
1000b778:	003fbd06 	br	1000b670 <__alt_data_end+0xf800b670>
1000b77c:	80c0030b 	ldhu	r3,12(r16)
1000b780:	00bfffc4 	movi	r2,-1
1000b784:	18c01014 	ori	r3,r3,64
1000b788:	80c0030d 	sth	r3,12(r16)
1000b78c:	00c00244 	movi	r3,9
1000b790:	90c00015 	stw	r3,0(r18)
1000b794:	003fd106 	br	1000b6dc <__alt_data_end+0xf800b6dc>

1000b798 <__swbuf>:
1000b798:	00c40074 	movhi	r3,4097
1000b79c:	18cf7d04 	addi	r3,r3,15860
1000b7a0:	2005883a 	mov	r2,r4
1000b7a4:	19000017 	ldw	r4,0(r3)
1000b7a8:	280d883a 	mov	r6,r5
1000b7ac:	100b883a 	mov	r5,r2
1000b7b0:	000b6441 	jmpi	1000b644 <__swbuf_r>

1000b7b4 <_wcrtomb_r>:
1000b7b4:	defff604 	addi	sp,sp,-40
1000b7b8:	00840074 	movhi	r2,4097
1000b7bc:	dc800815 	stw	r18,32(sp)
1000b7c0:	dc400715 	stw	r17,28(sp)
1000b7c4:	dc000615 	stw	r16,24(sp)
1000b7c8:	108f8104 	addi	r2,r2,15876
1000b7cc:	dfc00915 	stw	ra,36(sp)
1000b7d0:	2021883a 	mov	r16,r4
1000b7d4:	3823883a 	mov	r17,r7
1000b7d8:	14800017 	ldw	r18,0(r2)
1000b7dc:	28001426 	beq	r5,zero,1000b830 <_wcrtomb_r+0x7c>
1000b7e0:	d9400415 	stw	r5,16(sp)
1000b7e4:	d9800515 	stw	r6,20(sp)
1000b7e8:	00074180 	call	10007418 <__locale_charset>
1000b7ec:	d9400417 	ldw	r5,16(sp)
1000b7f0:	d9800517 	ldw	r6,20(sp)
1000b7f4:	8009883a 	mov	r4,r16
1000b7f8:	dc400015 	stw	r17,0(sp)
1000b7fc:	100f883a 	mov	r7,r2
1000b800:	903ee83a 	callr	r18
1000b804:	00ffffc4 	movi	r3,-1
1000b808:	10c0031e 	bne	r2,r3,1000b818 <_wcrtomb_r+0x64>
1000b80c:	88000015 	stw	zero,0(r17)
1000b810:	00c02284 	movi	r3,138
1000b814:	80c00015 	stw	r3,0(r16)
1000b818:	dfc00917 	ldw	ra,36(sp)
1000b81c:	dc800817 	ldw	r18,32(sp)
1000b820:	dc400717 	ldw	r17,28(sp)
1000b824:	dc000617 	ldw	r16,24(sp)
1000b828:	dec00a04 	addi	sp,sp,40
1000b82c:	f800283a 	ret
1000b830:	00074180 	call	10007418 <__locale_charset>
1000b834:	8009883a 	mov	r4,r16
1000b838:	dc400015 	stw	r17,0(sp)
1000b83c:	d9400104 	addi	r5,sp,4
1000b840:	000d883a 	mov	r6,zero
1000b844:	100f883a 	mov	r7,r2
1000b848:	903ee83a 	callr	r18
1000b84c:	003fed06 	br	1000b804 <__alt_data_end+0xf800b804>

1000b850 <wcrtomb>:
1000b850:	defff504 	addi	sp,sp,-44
1000b854:	dc400515 	stw	r17,20(sp)
1000b858:	dc000415 	stw	r16,16(sp)
1000b85c:	dfc00a15 	stw	ra,40(sp)
1000b860:	dd400915 	stw	r21,36(sp)
1000b864:	dd000815 	stw	r20,32(sp)
1000b868:	dcc00715 	stw	r19,28(sp)
1000b86c:	dc800615 	stw	r18,24(sp)
1000b870:	2021883a 	mov	r16,r4
1000b874:	3023883a 	mov	r17,r6
1000b878:	20001d26 	beq	r4,zero,1000b8f0 <wcrtomb+0xa0>
1000b87c:	04840074 	movhi	r18,4097
1000b880:	948f7d04 	addi	r18,r18,15860
1000b884:	00840074 	movhi	r2,4097
1000b888:	95400017 	ldw	r21,0(r18)
1000b88c:	108f8104 	addi	r2,r2,15876
1000b890:	15000017 	ldw	r20,0(r2)
1000b894:	2827883a 	mov	r19,r5
1000b898:	00074180 	call	10007418 <__locale_charset>
1000b89c:	a809883a 	mov	r4,r21
1000b8a0:	dc400015 	stw	r17,0(sp)
1000b8a4:	800b883a 	mov	r5,r16
1000b8a8:	980d883a 	mov	r6,r19
1000b8ac:	100f883a 	mov	r7,r2
1000b8b0:	a03ee83a 	callr	r20
1000b8b4:	00ffffc4 	movi	r3,-1
1000b8b8:	10c0041e 	bne	r2,r3,1000b8cc <wcrtomb+0x7c>
1000b8bc:	90c00017 	ldw	r3,0(r18)
1000b8c0:	01002284 	movi	r4,138
1000b8c4:	88000015 	stw	zero,0(r17)
1000b8c8:	19000015 	stw	r4,0(r3)
1000b8cc:	dfc00a17 	ldw	ra,40(sp)
1000b8d0:	dd400917 	ldw	r21,36(sp)
1000b8d4:	dd000817 	ldw	r20,32(sp)
1000b8d8:	dcc00717 	ldw	r19,28(sp)
1000b8dc:	dc800617 	ldw	r18,24(sp)
1000b8e0:	dc400517 	ldw	r17,20(sp)
1000b8e4:	dc000417 	ldw	r16,16(sp)
1000b8e8:	dec00b04 	addi	sp,sp,44
1000b8ec:	f800283a 	ret
1000b8f0:	04840074 	movhi	r18,4097
1000b8f4:	948f7d04 	addi	r18,r18,15860
1000b8f8:	00840074 	movhi	r2,4097
1000b8fc:	94c00017 	ldw	r19,0(r18)
1000b900:	108f8104 	addi	r2,r2,15876
1000b904:	14000017 	ldw	r16,0(r2)
1000b908:	00074180 	call	10007418 <__locale_charset>
1000b90c:	9809883a 	mov	r4,r19
1000b910:	dc400015 	stw	r17,0(sp)
1000b914:	d9400104 	addi	r5,sp,4
1000b918:	000d883a 	mov	r6,zero
1000b91c:	100f883a 	mov	r7,r2
1000b920:	803ee83a 	callr	r16
1000b924:	003fe306 	br	1000b8b4 <__alt_data_end+0xf800b8b4>

1000b928 <__ascii_wctomb>:
1000b928:	28000526 	beq	r5,zero,1000b940 <__ascii_wctomb+0x18>
1000b92c:	00803fc4 	movi	r2,255
1000b930:	11800536 	bltu	r2,r6,1000b948 <__ascii_wctomb+0x20>
1000b934:	29800005 	stb	r6,0(r5)
1000b938:	00800044 	movi	r2,1
1000b93c:	f800283a 	ret
1000b940:	0005883a 	mov	r2,zero
1000b944:	f800283a 	ret
1000b948:	00802284 	movi	r2,138
1000b94c:	20800015 	stw	r2,0(r4)
1000b950:	00bfffc4 	movi	r2,-1
1000b954:	f800283a 	ret

1000b958 <_wctomb_r>:
1000b958:	00840074 	movhi	r2,4097
1000b95c:	defff904 	addi	sp,sp,-28
1000b960:	108f8104 	addi	r2,r2,15876
1000b964:	dfc00615 	stw	ra,24(sp)
1000b968:	dc400515 	stw	r17,20(sp)
1000b96c:	dc000415 	stw	r16,16(sp)
1000b970:	3823883a 	mov	r17,r7
1000b974:	14000017 	ldw	r16,0(r2)
1000b978:	d9000115 	stw	r4,4(sp)
1000b97c:	d9400215 	stw	r5,8(sp)
1000b980:	d9800315 	stw	r6,12(sp)
1000b984:	00074180 	call	10007418 <__locale_charset>
1000b988:	d9000117 	ldw	r4,4(sp)
1000b98c:	d9400217 	ldw	r5,8(sp)
1000b990:	d9800317 	ldw	r6,12(sp)
1000b994:	dc400015 	stw	r17,0(sp)
1000b998:	100f883a 	mov	r7,r2
1000b99c:	803ee83a 	callr	r16
1000b9a0:	dfc00617 	ldw	ra,24(sp)
1000b9a4:	dc400517 	ldw	r17,20(sp)
1000b9a8:	dc000417 	ldw	r16,16(sp)
1000b9ac:	dec00704 	addi	sp,sp,28
1000b9b0:	f800283a 	ret

1000b9b4 <__muldi3>:
1000b9b4:	defff604 	addi	sp,sp,-40
1000b9b8:	dd800615 	stw	r22,24(sp)
1000b9bc:	dd400515 	stw	r21,20(sp)
1000b9c0:	25bfffcc 	andi	r22,r4,65535
1000b9c4:	357fffcc 	andi	r21,r6,65535
1000b9c8:	dc400115 	stw	r17,4(sp)
1000b9cc:	2022d43a 	srli	r17,r4,16
1000b9d0:	dcc00315 	stw	r19,12(sp)
1000b9d4:	dc800215 	stw	r18,8(sp)
1000b9d8:	2027883a 	mov	r19,r4
1000b9dc:	2825883a 	mov	r18,r5
1000b9e0:	a809883a 	mov	r4,r21
1000b9e4:	b00b883a 	mov	r5,r22
1000b9e8:	dfc00915 	stw	ra,36(sp)
1000b9ec:	df000815 	stw	fp,32(sp)
1000b9f0:	ddc00715 	stw	r23,28(sp)
1000b9f4:	3839883a 	mov	fp,r7
1000b9f8:	302ed43a 	srli	r23,r6,16
1000b9fc:	dd000415 	stw	r20,16(sp)
1000ba00:	dc000015 	stw	r16,0(sp)
1000ba04:	3029883a 	mov	r20,r6
1000ba08:	000c8480 	call	1000c848 <__mulsi3>
1000ba0c:	a809883a 	mov	r4,r21
1000ba10:	880b883a 	mov	r5,r17
1000ba14:	1021883a 	mov	r16,r2
1000ba18:	000c8480 	call	1000c848 <__mulsi3>
1000ba1c:	880b883a 	mov	r5,r17
1000ba20:	b809883a 	mov	r4,r23
1000ba24:	102b883a 	mov	r21,r2
1000ba28:	000c8480 	call	1000c848 <__mulsi3>
1000ba2c:	b809883a 	mov	r4,r23
1000ba30:	b00b883a 	mov	r5,r22
1000ba34:	1023883a 	mov	r17,r2
1000ba38:	000c8480 	call	1000c848 <__mulsi3>
1000ba3c:	8012d43a 	srli	r9,r16,16
1000ba40:	a885883a 	add	r2,r21,r2
1000ba44:	1251883a 	add	r8,r2,r9
1000ba48:	4540022e 	bgeu	r8,r21,1000ba54 <__muldi3+0xa0>
1000ba4c:	00800074 	movhi	r2,1
1000ba50:	88a3883a 	add	r17,r17,r2
1000ba54:	4006d43a 	srli	r3,r8,16
1000ba58:	4010943a 	slli	r8,r8,16
1000ba5c:	9809883a 	mov	r4,r19
1000ba60:	e00b883a 	mov	r5,fp
1000ba64:	843fffcc 	andi	r16,r16,65535
1000ba68:	88e3883a 	add	r17,r17,r3
1000ba6c:	4421883a 	add	r16,r8,r16
1000ba70:	000c8480 	call	1000c848 <__mulsi3>
1000ba74:	a009883a 	mov	r4,r20
1000ba78:	900b883a 	mov	r5,r18
1000ba7c:	1027883a 	mov	r19,r2
1000ba80:	000c8480 	call	1000c848 <__mulsi3>
1000ba84:	9885883a 	add	r2,r19,r2
1000ba88:	1447883a 	add	r3,r2,r17
1000ba8c:	8005883a 	mov	r2,r16
1000ba90:	dfc00917 	ldw	ra,36(sp)
1000ba94:	df000817 	ldw	fp,32(sp)
1000ba98:	ddc00717 	ldw	r23,28(sp)
1000ba9c:	dd800617 	ldw	r22,24(sp)
1000baa0:	dd400517 	ldw	r21,20(sp)
1000baa4:	dd000417 	ldw	r20,16(sp)
1000baa8:	dcc00317 	ldw	r19,12(sp)
1000baac:	dc800217 	ldw	r18,8(sp)
1000bab0:	dc400117 	ldw	r17,4(sp)
1000bab4:	dc000017 	ldw	r16,0(sp)
1000bab8:	dec00a04 	addi	sp,sp,40
1000babc:	f800283a 	ret

1000bac0 <__udivdi3>:
1000bac0:	defff504 	addi	sp,sp,-44
1000bac4:	dcc00415 	stw	r19,16(sp)
1000bac8:	dc000115 	stw	r16,4(sp)
1000bacc:	dfc00a15 	stw	ra,40(sp)
1000bad0:	df000915 	stw	fp,36(sp)
1000bad4:	ddc00815 	stw	r23,32(sp)
1000bad8:	dd800715 	stw	r22,28(sp)
1000badc:	dd400615 	stw	r21,24(sp)
1000bae0:	dd000515 	stw	r20,20(sp)
1000bae4:	dc800315 	stw	r18,12(sp)
1000bae8:	dc400215 	stw	r17,8(sp)
1000baec:	2027883a 	mov	r19,r4
1000baf0:	2821883a 	mov	r16,r5
1000baf4:	3800471e 	bne	r7,zero,1000bc14 <__udivdi3+0x154>
1000baf8:	3025883a 	mov	r18,r6
1000bafc:	2023883a 	mov	r17,r4
1000bb00:	2980592e 	bgeu	r5,r6,1000bc68 <__udivdi3+0x1a8>
1000bb04:	00bfffd4 	movui	r2,65535
1000bb08:	2829883a 	mov	r20,r5
1000bb0c:	1180b236 	bltu	r2,r6,1000bdd8 <__udivdi3+0x318>
1000bb10:	00803fc4 	movi	r2,255
1000bb14:	1181622e 	bgeu	r2,r6,1000c0a0 <__udivdi3+0x5e0>
1000bb18:	00800204 	movi	r2,8
1000bb1c:	1007883a 	mov	r3,r2
1000bb20:	3084d83a 	srl	r2,r6,r2
1000bb24:	01040074 	movhi	r4,4097
1000bb28:	21088404 	addi	r4,r4,8720
1000bb2c:	2085883a 	add	r2,r4,r2
1000bb30:	11000003 	ldbu	r4,0(r2)
1000bb34:	20c9883a 	add	r4,r4,r3
1000bb38:	00c00804 	movi	r3,32
1000bb3c:	1907c83a 	sub	r3,r3,r4
1000bb40:	18000526 	beq	r3,zero,1000bb58 <__udivdi3+0x98>
1000bb44:	80e0983a 	sll	r16,r16,r3
1000bb48:	9908d83a 	srl	r4,r19,r4
1000bb4c:	30e4983a 	sll	r18,r6,r3
1000bb50:	98e2983a 	sll	r17,r19,r3
1000bb54:	8128b03a 	or	r20,r16,r4
1000bb58:	902ad43a 	srli	r21,r18,16
1000bb5c:	a009883a 	mov	r4,r20
1000bb60:	95bfffcc 	andi	r22,r18,65535
1000bb64:	a80b883a 	mov	r5,r21
1000bb68:	000c8400 	call	1000c840 <__umodsi3>
1000bb6c:	a009883a 	mov	r4,r20
1000bb70:	a80b883a 	mov	r5,r21
1000bb74:	102f883a 	mov	r23,r2
1000bb78:	000c8380 	call	1000c838 <__udivsi3>
1000bb7c:	1009883a 	mov	r4,r2
1000bb80:	b00b883a 	mov	r5,r22
1000bb84:	1021883a 	mov	r16,r2
1000bb88:	000c8480 	call	1000c848 <__mulsi3>
1000bb8c:	b82e943a 	slli	r23,r23,16
1000bb90:	8808d43a 	srli	r4,r17,16
1000bb94:	b906b03a 	or	r3,r23,r4
1000bb98:	1880052e 	bgeu	r3,r2,1000bbb0 <__udivdi3+0xf0>
1000bb9c:	1c87883a 	add	r3,r3,r18
1000bba0:	813fffc4 	addi	r4,r16,-1
1000bba4:	1c800136 	bltu	r3,r18,1000bbac <__udivdi3+0xec>
1000bba8:	18815236 	bltu	r3,r2,1000c0f4 <__udivdi3+0x634>
1000bbac:	2021883a 	mov	r16,r4
1000bbb0:	18a7c83a 	sub	r19,r3,r2
1000bbb4:	9809883a 	mov	r4,r19
1000bbb8:	a80b883a 	mov	r5,r21
1000bbbc:	000c8400 	call	1000c840 <__umodsi3>
1000bbc0:	1029883a 	mov	r20,r2
1000bbc4:	9809883a 	mov	r4,r19
1000bbc8:	a80b883a 	mov	r5,r21
1000bbcc:	a028943a 	slli	r20,r20,16
1000bbd0:	000c8380 	call	1000c838 <__udivsi3>
1000bbd4:	1009883a 	mov	r4,r2
1000bbd8:	b00b883a 	mov	r5,r22
1000bbdc:	8c7fffcc 	andi	r17,r17,65535
1000bbe0:	1027883a 	mov	r19,r2
1000bbe4:	a462b03a 	or	r17,r20,r17
1000bbe8:	000c8480 	call	1000c848 <__mulsi3>
1000bbec:	8880052e 	bgeu	r17,r2,1000bc04 <__udivdi3+0x144>
1000bbf0:	8ca3883a 	add	r17,r17,r18
1000bbf4:	98ffffc4 	addi	r3,r19,-1
1000bbf8:	8c811036 	bltu	r17,r18,1000c03c <__udivdi3+0x57c>
1000bbfc:	88810f2e 	bgeu	r17,r2,1000c03c <__udivdi3+0x57c>
1000bc00:	9cffff84 	addi	r19,r19,-2
1000bc04:	8020943a 	slli	r16,r16,16
1000bc08:	0007883a 	mov	r3,zero
1000bc0c:	9c04b03a 	or	r2,r19,r16
1000bc10:	00006006 	br	1000bd94 <__udivdi3+0x2d4>
1000bc14:	29c05d36 	bltu	r5,r7,1000bd8c <__udivdi3+0x2cc>
1000bc18:	00bfffd4 	movui	r2,65535
1000bc1c:	11c0692e 	bgeu	r2,r7,1000bdc4 <__udivdi3+0x304>
1000bc20:	00804034 	movhi	r2,256
1000bc24:	10bfffc4 	addi	r2,r2,-1
1000bc28:	11c10e2e 	bgeu	r2,r7,1000c064 <__udivdi3+0x5a4>
1000bc2c:	01400604 	movi	r5,24
1000bc30:	2811883a 	mov	r8,r5
1000bc34:	394ad83a 	srl	r5,r7,r5
1000bc38:	00840074 	movhi	r2,4097
1000bc3c:	10888404 	addi	r2,r2,8720
1000bc40:	114b883a 	add	r5,r2,r5
1000bc44:	29400003 	ldbu	r5,0(r5)
1000bc48:	00c00804 	movi	r3,32
1000bc4c:	2a0b883a 	add	r5,r5,r8
1000bc50:	196fc83a 	sub	r23,r3,r5
1000bc54:	b8006b1e 	bne	r23,zero,1000be04 <__udivdi3+0x344>
1000bc58:	3c011436 	bltu	r7,r16,1000c0ac <__udivdi3+0x5ec>
1000bc5c:	9985403a 	cmpgeu	r2,r19,r6
1000bc60:	0007883a 	mov	r3,zero
1000bc64:	00004b06 	br	1000bd94 <__udivdi3+0x2d4>
1000bc68:	3000041e 	bne	r6,zero,1000bc7c <__udivdi3+0x1bc>
1000bc6c:	01000044 	movi	r4,1
1000bc70:	000b883a 	mov	r5,zero
1000bc74:	000c8380 	call	1000c838 <__udivsi3>
1000bc78:	1025883a 	mov	r18,r2
1000bc7c:	00bfffd4 	movui	r2,65535
1000bc80:	14805b2e 	bgeu	r2,r18,1000bdf0 <__udivdi3+0x330>
1000bc84:	00804034 	movhi	r2,256
1000bc88:	10bfffc4 	addi	r2,r2,-1
1000bc8c:	1480fe2e 	bgeu	r2,r18,1000c088 <__udivdi3+0x5c8>
1000bc90:	00800604 	movi	r2,24
1000bc94:	1007883a 	mov	r3,r2
1000bc98:	9084d83a 	srl	r2,r18,r2
1000bc9c:	01040074 	movhi	r4,4097
1000bca0:	21088404 	addi	r4,r4,8720
1000bca4:	2085883a 	add	r2,r4,r2
1000bca8:	11800003 	ldbu	r6,0(r2)
1000bcac:	01c00804 	movi	r7,32
1000bcb0:	30c7883a 	add	r3,r6,r3
1000bcb4:	38cfc83a 	sub	r7,r7,r3
1000bcb8:	3800a71e 	bne	r7,zero,1000bf58 <__udivdi3+0x498>
1000bcbc:	9028d43a 	srli	r20,r18,16
1000bcc0:	84a1c83a 	sub	r16,r16,r18
1000bcc4:	957fffcc 	andi	r21,r18,65535
1000bcc8:	00c00044 	movi	r3,1
1000bccc:	8009883a 	mov	r4,r16
1000bcd0:	a00b883a 	mov	r5,r20
1000bcd4:	d8c00015 	stw	r3,0(sp)
1000bcd8:	000c8400 	call	1000c840 <__umodsi3>
1000bcdc:	8009883a 	mov	r4,r16
1000bce0:	a00b883a 	mov	r5,r20
1000bce4:	102d883a 	mov	r22,r2
1000bce8:	000c8380 	call	1000c838 <__udivsi3>
1000bcec:	1009883a 	mov	r4,r2
1000bcf0:	a80b883a 	mov	r5,r21
1000bcf4:	1021883a 	mov	r16,r2
1000bcf8:	000c8480 	call	1000c848 <__mulsi3>
1000bcfc:	b02c943a 	slli	r22,r22,16
1000bd00:	880ed43a 	srli	r7,r17,16
1000bd04:	d8c00017 	ldw	r3,0(sp)
1000bd08:	b1ccb03a 	or	r6,r22,r7
1000bd0c:	3080052e 	bgeu	r6,r2,1000bd24 <__udivdi3+0x264>
1000bd10:	348d883a 	add	r6,r6,r18
1000bd14:	813fffc4 	addi	r4,r16,-1
1000bd18:	34800136 	bltu	r6,r18,1000bd20 <__udivdi3+0x260>
1000bd1c:	3080f236 	bltu	r6,r2,1000c0e8 <__udivdi3+0x628>
1000bd20:	2021883a 	mov	r16,r4
1000bd24:	30a7c83a 	sub	r19,r6,r2
1000bd28:	9809883a 	mov	r4,r19
1000bd2c:	a00b883a 	mov	r5,r20
1000bd30:	d8c00015 	stw	r3,0(sp)
1000bd34:	000c8400 	call	1000c840 <__umodsi3>
1000bd38:	102d883a 	mov	r22,r2
1000bd3c:	9809883a 	mov	r4,r19
1000bd40:	a00b883a 	mov	r5,r20
1000bd44:	b02c943a 	slli	r22,r22,16
1000bd48:	000c8380 	call	1000c838 <__udivsi3>
1000bd4c:	1009883a 	mov	r4,r2
1000bd50:	a80b883a 	mov	r5,r21
1000bd54:	8c7fffcc 	andi	r17,r17,65535
1000bd58:	1027883a 	mov	r19,r2
1000bd5c:	b462b03a 	or	r17,r22,r17
1000bd60:	000c8480 	call	1000c848 <__mulsi3>
1000bd64:	d8c00017 	ldw	r3,0(sp)
1000bd68:	8880052e 	bgeu	r17,r2,1000bd80 <__udivdi3+0x2c0>
1000bd6c:	8ca3883a 	add	r17,r17,r18
1000bd70:	993fffc4 	addi	r4,r19,-1
1000bd74:	8c80af36 	bltu	r17,r18,1000c034 <__udivdi3+0x574>
1000bd78:	8880ae2e 	bgeu	r17,r2,1000c034 <__udivdi3+0x574>
1000bd7c:	9cffff84 	addi	r19,r19,-2
1000bd80:	8020943a 	slli	r16,r16,16
1000bd84:	9c04b03a 	or	r2,r19,r16
1000bd88:	00000206 	br	1000bd94 <__udivdi3+0x2d4>
1000bd8c:	0007883a 	mov	r3,zero
1000bd90:	0005883a 	mov	r2,zero
1000bd94:	dfc00a17 	ldw	ra,40(sp)
1000bd98:	df000917 	ldw	fp,36(sp)
1000bd9c:	ddc00817 	ldw	r23,32(sp)
1000bda0:	dd800717 	ldw	r22,28(sp)
1000bda4:	dd400617 	ldw	r21,24(sp)
1000bda8:	dd000517 	ldw	r20,20(sp)
1000bdac:	dcc00417 	ldw	r19,16(sp)
1000bdb0:	dc800317 	ldw	r18,12(sp)
1000bdb4:	dc400217 	ldw	r17,8(sp)
1000bdb8:	dc000117 	ldw	r16,4(sp)
1000bdbc:	dec00b04 	addi	sp,sp,44
1000bdc0:	f800283a 	ret
1000bdc4:	00803fc4 	movi	r2,255
1000bdc8:	11c0a92e 	bgeu	r2,r7,1000c070 <__udivdi3+0x5b0>
1000bdcc:	01400204 	movi	r5,8
1000bdd0:	2811883a 	mov	r8,r5
1000bdd4:	003f9706 	br	1000bc34 <__alt_data_end+0xf800bc34>
1000bdd8:	00804034 	movhi	r2,256
1000bddc:	10bfffc4 	addi	r2,r2,-1
1000bde0:	1180a62e 	bgeu	r2,r6,1000c07c <__udivdi3+0x5bc>
1000bde4:	00800604 	movi	r2,24
1000bde8:	1007883a 	mov	r3,r2
1000bdec:	003f4c06 	br	1000bb20 <__alt_data_end+0xf800bb20>
1000bdf0:	00803fc4 	movi	r2,255
1000bdf4:	1480a72e 	bgeu	r2,r18,1000c094 <__udivdi3+0x5d4>
1000bdf8:	00800204 	movi	r2,8
1000bdfc:	1007883a 	mov	r3,r2
1000be00:	003fa506 	br	1000bc98 <__alt_data_end+0xf800bc98>
1000be04:	3178d83a 	srl	fp,r6,r5
1000be08:	3dce983a 	sll	r7,r7,r23
1000be0c:	8168d83a 	srl	r20,r16,r5
1000be10:	9950d83a 	srl	r8,r19,r5
1000be14:	3f38b03a 	or	fp,r7,fp
1000be18:	e024d43a 	srli	r18,fp,16
1000be1c:	85e0983a 	sll	r16,r16,r23
1000be20:	a009883a 	mov	r4,r20
1000be24:	900b883a 	mov	r5,r18
1000be28:	8220b03a 	or	r16,r16,r8
1000be2c:	35ea983a 	sll	r21,r6,r23
1000be30:	000c8400 	call	1000c840 <__umodsi3>
1000be34:	a009883a 	mov	r4,r20
1000be38:	900b883a 	mov	r5,r18
1000be3c:	1023883a 	mov	r17,r2
1000be40:	e5bfffcc 	andi	r22,fp,65535
1000be44:	000c8380 	call	1000c838 <__udivsi3>
1000be48:	1009883a 	mov	r4,r2
1000be4c:	b00b883a 	mov	r5,r22
1000be50:	1029883a 	mov	r20,r2
1000be54:	000c8480 	call	1000c848 <__mulsi3>
1000be58:	8806943a 	slli	r3,r17,16
1000be5c:	8014d43a 	srli	r10,r16,16
1000be60:	1a92b03a 	or	r9,r3,r10
1000be64:	4880042e 	bgeu	r9,r2,1000be78 <__udivdi3+0x3b8>
1000be68:	4f13883a 	add	r9,r9,fp
1000be6c:	a0ffffc4 	addi	r3,r20,-1
1000be70:	4f00952e 	bgeu	r9,fp,1000c0c8 <__udivdi3+0x608>
1000be74:	1829883a 	mov	r20,r3
1000be78:	48a3c83a 	sub	r17,r9,r2
1000be7c:	8809883a 	mov	r4,r17
1000be80:	900b883a 	mov	r5,r18
1000be84:	000c8400 	call	1000c840 <__umodsi3>
1000be88:	8809883a 	mov	r4,r17
1000be8c:	900b883a 	mov	r5,r18
1000be90:	d8800015 	stw	r2,0(sp)
1000be94:	000c8380 	call	1000c838 <__udivsi3>
1000be98:	1009883a 	mov	r4,r2
1000be9c:	b00b883a 	mov	r5,r22
1000bea0:	1023883a 	mov	r17,r2
1000bea4:	000c8480 	call	1000c848 <__mulsi3>
1000bea8:	d8c00017 	ldw	r3,0(sp)
1000beac:	823fffcc 	andi	r8,r16,65535
1000beb0:	1806943a 	slli	r3,r3,16
1000beb4:	1a20b03a 	or	r16,r3,r8
1000beb8:	8080042e 	bgeu	r16,r2,1000becc <__udivdi3+0x40c>
1000bebc:	8721883a 	add	r16,r16,fp
1000bec0:	88ffffc4 	addi	r3,r17,-1
1000bec4:	87007c2e 	bgeu	r16,fp,1000c0b8 <__udivdi3+0x5f8>
1000bec8:	1823883a 	mov	r17,r3
1000becc:	a028943a 	slli	r20,r20,16
1000bed0:	acbfffcc 	andi	r18,r21,65535
1000bed4:	900b883a 	mov	r5,r18
1000bed8:	8d28b03a 	or	r20,r17,r20
1000bedc:	a022d43a 	srli	r17,r20,16
1000bee0:	a5bfffcc 	andi	r22,r20,65535
1000bee4:	b009883a 	mov	r4,r22
1000bee8:	a82ad43a 	srli	r21,r21,16
1000beec:	80a1c83a 	sub	r16,r16,r2
1000bef0:	000c8480 	call	1000c848 <__mulsi3>
1000bef4:	8809883a 	mov	r4,r17
1000bef8:	900b883a 	mov	r5,r18
1000befc:	1039883a 	mov	fp,r2
1000bf00:	000c8480 	call	1000c848 <__mulsi3>
1000bf04:	8809883a 	mov	r4,r17
1000bf08:	a80b883a 	mov	r5,r21
1000bf0c:	1025883a 	mov	r18,r2
1000bf10:	000c8480 	call	1000c848 <__mulsi3>
1000bf14:	b009883a 	mov	r4,r22
1000bf18:	a80b883a 	mov	r5,r21
1000bf1c:	1023883a 	mov	r17,r2
1000bf20:	000c8480 	call	1000c848 <__mulsi3>
1000bf24:	e006d43a 	srli	r3,fp,16
1000bf28:	9085883a 	add	r2,r18,r2
1000bf2c:	10c7883a 	add	r3,r2,r3
1000bf30:	1c80022e 	bgeu	r3,r18,1000bf3c <__udivdi3+0x47c>
1000bf34:	00800074 	movhi	r2,1
1000bf38:	88a3883a 	add	r17,r17,r2
1000bf3c:	1808d43a 	srli	r4,r3,16
1000bf40:	8909883a 	add	r4,r17,r4
1000bf44:	81004436 	bltu	r16,r4,1000c058 <__udivdi3+0x598>
1000bf48:	81003e26 	beq	r16,r4,1000c044 <__udivdi3+0x584>
1000bf4c:	a005883a 	mov	r2,r20
1000bf50:	0007883a 	mov	r3,zero
1000bf54:	003f8f06 	br	1000bd94 <__alt_data_end+0xf800bd94>
1000bf58:	91e4983a 	sll	r18,r18,r7
1000bf5c:	80eed83a 	srl	r23,r16,r3
1000bf60:	81cc983a 	sll	r6,r16,r7
1000bf64:	9028d43a 	srli	r20,r18,16
1000bf68:	98c6d83a 	srl	r3,r19,r3
1000bf6c:	b809883a 	mov	r4,r23
1000bf70:	a00b883a 	mov	r5,r20
1000bf74:	30ecb03a 	or	r22,r6,r3
1000bf78:	99e2983a 	sll	r17,r19,r7
1000bf7c:	000c8400 	call	1000c840 <__umodsi3>
1000bf80:	b809883a 	mov	r4,r23
1000bf84:	a00b883a 	mov	r5,r20
1000bf88:	1021883a 	mov	r16,r2
1000bf8c:	957fffcc 	andi	r21,r18,65535
1000bf90:	000c8380 	call	1000c838 <__udivsi3>
1000bf94:	a80b883a 	mov	r5,r21
1000bf98:	1009883a 	mov	r4,r2
1000bf9c:	102f883a 	mov	r23,r2
1000bfa0:	000c8480 	call	1000c848 <__mulsi3>
1000bfa4:	8020943a 	slli	r16,r16,16
1000bfa8:	b00ad43a 	srli	r5,r22,16
1000bfac:	814cb03a 	or	r6,r16,r5
1000bfb0:	3080062e 	bgeu	r6,r2,1000bfcc <__udivdi3+0x50c>
1000bfb4:	348d883a 	add	r6,r6,r18
1000bfb8:	b8ffffc4 	addi	r3,r23,-1
1000bfbc:	34804836 	bltu	r6,r18,1000c0e0 <__udivdi3+0x620>
1000bfc0:	3080472e 	bgeu	r6,r2,1000c0e0 <__udivdi3+0x620>
1000bfc4:	bdffff84 	addi	r23,r23,-2
1000bfc8:	348d883a 	add	r6,r6,r18
1000bfcc:	30a7c83a 	sub	r19,r6,r2
1000bfd0:	9809883a 	mov	r4,r19
1000bfd4:	a00b883a 	mov	r5,r20
1000bfd8:	000c8400 	call	1000c840 <__umodsi3>
1000bfdc:	9809883a 	mov	r4,r19
1000bfe0:	a00b883a 	mov	r5,r20
1000bfe4:	1039883a 	mov	fp,r2
1000bfe8:	000c8380 	call	1000c838 <__udivsi3>
1000bfec:	1009883a 	mov	r4,r2
1000bff0:	a80b883a 	mov	r5,r21
1000bff4:	e038943a 	slli	fp,fp,16
1000bff8:	1027883a 	mov	r19,r2
1000bffc:	000c8480 	call	1000c848 <__mulsi3>
1000c000:	b1bfffcc 	andi	r6,r22,65535
1000c004:	e18cb03a 	or	r6,fp,r6
1000c008:	3080062e 	bgeu	r6,r2,1000c024 <__udivdi3+0x564>
1000c00c:	348d883a 	add	r6,r6,r18
1000c010:	98ffffc4 	addi	r3,r19,-1
1000c014:	34803036 	bltu	r6,r18,1000c0d8 <__udivdi3+0x618>
1000c018:	30802f2e 	bgeu	r6,r2,1000c0d8 <__udivdi3+0x618>
1000c01c:	9cffff84 	addi	r19,r19,-2
1000c020:	348d883a 	add	r6,r6,r18
1000c024:	b82e943a 	slli	r23,r23,16
1000c028:	30a1c83a 	sub	r16,r6,r2
1000c02c:	9dc6b03a 	or	r3,r19,r23
1000c030:	003f2606 	br	1000bccc <__alt_data_end+0xf800bccc>
1000c034:	2027883a 	mov	r19,r4
1000c038:	003f5106 	br	1000bd80 <__alt_data_end+0xf800bd80>
1000c03c:	1827883a 	mov	r19,r3
1000c040:	003ef006 	br	1000bc04 <__alt_data_end+0xf800bc04>
1000c044:	1808943a 	slli	r4,r3,16
1000c048:	9dc6983a 	sll	r3,r19,r23
1000c04c:	e73fffcc 	andi	fp,fp,65535
1000c050:	2709883a 	add	r4,r4,fp
1000c054:	193fbd2e 	bgeu	r3,r4,1000bf4c <__alt_data_end+0xf800bf4c>
1000c058:	a0bfffc4 	addi	r2,r20,-1
1000c05c:	0007883a 	mov	r3,zero
1000c060:	003f4c06 	br	1000bd94 <__alt_data_end+0xf800bd94>
1000c064:	01400404 	movi	r5,16
1000c068:	2811883a 	mov	r8,r5
1000c06c:	003ef106 	br	1000bc34 <__alt_data_end+0xf800bc34>
1000c070:	000b883a 	mov	r5,zero
1000c074:	0011883a 	mov	r8,zero
1000c078:	003eee06 	br	1000bc34 <__alt_data_end+0xf800bc34>
1000c07c:	00800404 	movi	r2,16
1000c080:	1007883a 	mov	r3,r2
1000c084:	003ea606 	br	1000bb20 <__alt_data_end+0xf800bb20>
1000c088:	00800404 	movi	r2,16
1000c08c:	1007883a 	mov	r3,r2
1000c090:	003f0106 	br	1000bc98 <__alt_data_end+0xf800bc98>
1000c094:	0005883a 	mov	r2,zero
1000c098:	0007883a 	mov	r3,zero
1000c09c:	003efe06 	br	1000bc98 <__alt_data_end+0xf800bc98>
1000c0a0:	0005883a 	mov	r2,zero
1000c0a4:	0007883a 	mov	r3,zero
1000c0a8:	003e9d06 	br	1000bb20 <__alt_data_end+0xf800bb20>
1000c0ac:	0007883a 	mov	r3,zero
1000c0b0:	00800044 	movi	r2,1
1000c0b4:	003f3706 	br	1000bd94 <__alt_data_end+0xf800bd94>
1000c0b8:	80bf832e 	bgeu	r16,r2,1000bec8 <__alt_data_end+0xf800bec8>
1000c0bc:	8c7fff84 	addi	r17,r17,-2
1000c0c0:	8721883a 	add	r16,r16,fp
1000c0c4:	003f8106 	br	1000becc <__alt_data_end+0xf800becc>
1000c0c8:	48bf6a2e 	bgeu	r9,r2,1000be74 <__alt_data_end+0xf800be74>
1000c0cc:	a53fff84 	addi	r20,r20,-2
1000c0d0:	4f13883a 	add	r9,r9,fp
1000c0d4:	003f6806 	br	1000be78 <__alt_data_end+0xf800be78>
1000c0d8:	1827883a 	mov	r19,r3
1000c0dc:	003fd106 	br	1000c024 <__alt_data_end+0xf800c024>
1000c0e0:	182f883a 	mov	r23,r3
1000c0e4:	003fb906 	br	1000bfcc <__alt_data_end+0xf800bfcc>
1000c0e8:	843fff84 	addi	r16,r16,-2
1000c0ec:	348d883a 	add	r6,r6,r18
1000c0f0:	003f0c06 	br	1000bd24 <__alt_data_end+0xf800bd24>
1000c0f4:	843fff84 	addi	r16,r16,-2
1000c0f8:	1c87883a 	add	r3,r3,r18
1000c0fc:	003eac06 	br	1000bbb0 <__alt_data_end+0xf800bbb0>

1000c100 <__umoddi3>:
1000c100:	defff404 	addi	sp,sp,-48
1000c104:	dd800815 	stw	r22,32(sp)
1000c108:	dc400315 	stw	r17,12(sp)
1000c10c:	dc000215 	stw	r16,8(sp)
1000c110:	dfc00b15 	stw	ra,44(sp)
1000c114:	df000a15 	stw	fp,40(sp)
1000c118:	ddc00915 	stw	r23,36(sp)
1000c11c:	dd400715 	stw	r21,28(sp)
1000c120:	dd000615 	stw	r20,24(sp)
1000c124:	dcc00515 	stw	r19,20(sp)
1000c128:	dc800415 	stw	r18,16(sp)
1000c12c:	2021883a 	mov	r16,r4
1000c130:	2823883a 	mov	r17,r5
1000c134:	282d883a 	mov	r22,r5
1000c138:	38003c1e 	bne	r7,zero,1000c22c <__umoddi3+0x12c>
1000c13c:	3027883a 	mov	r19,r6
1000c140:	2029883a 	mov	r20,r4
1000c144:	2980522e 	bgeu	r5,r6,1000c290 <__umoddi3+0x190>
1000c148:	00bfffd4 	movui	r2,65535
1000c14c:	1180a436 	bltu	r2,r6,1000c3e0 <__umoddi3+0x2e0>
1000c150:	00803fc4 	movi	r2,255
1000c154:	11815e2e 	bgeu	r2,r6,1000c6d0 <__umoddi3+0x5d0>
1000c158:	01400204 	movi	r5,8
1000c15c:	2805883a 	mov	r2,r5
1000c160:	314ad83a 	srl	r5,r6,r5
1000c164:	00c40074 	movhi	r3,4097
1000c168:	18c88404 	addi	r3,r3,8720
1000c16c:	194b883a 	add	r5,r3,r5
1000c170:	29000003 	ldbu	r4,0(r5)
1000c174:	2089883a 	add	r4,r4,r2
1000c178:	00800804 	movi	r2,32
1000c17c:	1105c83a 	sub	r2,r2,r4
1000c180:	10010c26 	beq	r2,zero,1000c5b4 <__umoddi3+0x4b4>
1000c184:	88a2983a 	sll	r17,r17,r2
1000c188:	8108d83a 	srl	r4,r16,r4
1000c18c:	30a6983a 	sll	r19,r6,r2
1000c190:	80a8983a 	sll	r20,r16,r2
1000c194:	1025883a 	mov	r18,r2
1000c198:	892cb03a 	or	r22,r17,r4
1000c19c:	9822d43a 	srli	r17,r19,16
1000c1a0:	b009883a 	mov	r4,r22
1000c1a4:	9d7fffcc 	andi	r21,r19,65535
1000c1a8:	880b883a 	mov	r5,r17
1000c1ac:	000c8400 	call	1000c840 <__umodsi3>
1000c1b0:	b009883a 	mov	r4,r22
1000c1b4:	880b883a 	mov	r5,r17
1000c1b8:	102f883a 	mov	r23,r2
1000c1bc:	000c8380 	call	1000c838 <__udivsi3>
1000c1c0:	1009883a 	mov	r4,r2
1000c1c4:	a80b883a 	mov	r5,r21
1000c1c8:	000c8480 	call	1000c848 <__mulsi3>
1000c1cc:	b82e943a 	slli	r23,r23,16
1000c1d0:	a008d43a 	srli	r4,r20,16
1000c1d4:	b906b03a 	or	r3,r23,r4
1000c1d8:	1880042e 	bgeu	r3,r2,1000c1ec <__umoddi3+0xec>
1000c1dc:	1cc7883a 	add	r3,r3,r19
1000c1e0:	1cc00236 	bltu	r3,r19,1000c1ec <__umoddi3+0xec>
1000c1e4:	1880012e 	bgeu	r3,r2,1000c1ec <__umoddi3+0xec>
1000c1e8:	1cc7883a 	add	r3,r3,r19
1000c1ec:	18a1c83a 	sub	r16,r3,r2
1000c1f0:	8009883a 	mov	r4,r16
1000c1f4:	880b883a 	mov	r5,r17
1000c1f8:	000c8400 	call	1000c840 <__umodsi3>
1000c1fc:	8009883a 	mov	r4,r16
1000c200:	880b883a 	mov	r5,r17
1000c204:	102d883a 	mov	r22,r2
1000c208:	000c8380 	call	1000c838 <__udivsi3>
1000c20c:	1009883a 	mov	r4,r2
1000c210:	a80b883a 	mov	r5,r21
1000c214:	b02c943a 	slli	r22,r22,16
1000c218:	000c8480 	call	1000c848 <__mulsi3>
1000c21c:	a13fffcc 	andi	r4,r20,65535
1000c220:	b106b03a 	or	r3,r22,r4
1000c224:	1880572e 	bgeu	r3,r2,1000c384 <__umoddi3+0x284>
1000c228:	00005206 	br	1000c374 <__umoddi3+0x274>
1000c22c:	29c05936 	bltu	r5,r7,1000c394 <__umoddi3+0x294>
1000c230:	00bfffd4 	movui	r2,65535
1000c234:	11c0652e 	bgeu	r2,r7,1000c3cc <__umoddi3+0x2cc>
1000c238:	00804034 	movhi	r2,256
1000c23c:	10bfffc4 	addi	r2,r2,-1
1000c240:	11c1172e 	bgeu	r2,r7,1000c6a0 <__umoddi3+0x5a0>
1000c244:	01400604 	movi	r5,24
1000c248:	282b883a 	mov	r21,r5
1000c24c:	394ad83a 	srl	r5,r7,r5
1000c250:	00c40074 	movhi	r3,4097
1000c254:	18c88404 	addi	r3,r3,8720
1000c258:	194b883a 	add	r5,r3,r5
1000c25c:	28800003 	ldbu	r2,0(r5)
1000c260:	00c00804 	movi	r3,32
1000c264:	156b883a 	add	r21,r2,r21
1000c268:	1d69c83a 	sub	r20,r3,r21
1000c26c:	a000671e 	bne	r20,zero,1000c40c <__umoddi3+0x30c>
1000c270:	3c400136 	bltu	r7,r17,1000c278 <__umoddi3+0x178>
1000c274:	81812336 	bltu	r16,r6,1000c704 <__umoddi3+0x604>
1000c278:	8185c83a 	sub	r2,r16,r6
1000c27c:	89e3c83a 	sub	r17,r17,r7
1000c280:	8087803a 	cmpltu	r3,r16,r2
1000c284:	88edc83a 	sub	r22,r17,r3
1000c288:	b007883a 	mov	r3,r22
1000c28c:	00004306 	br	1000c39c <__umoddi3+0x29c>
1000c290:	3000041e 	bne	r6,zero,1000c2a4 <__umoddi3+0x1a4>
1000c294:	01000044 	movi	r4,1
1000c298:	000b883a 	mov	r5,zero
1000c29c:	000c8380 	call	1000c838 <__udivsi3>
1000c2a0:	1027883a 	mov	r19,r2
1000c2a4:	00bfffd4 	movui	r2,65535
1000c2a8:	14c0532e 	bgeu	r2,r19,1000c3f8 <__umoddi3+0x2f8>
1000c2ac:	00804034 	movhi	r2,256
1000c2b0:	10bfffc4 	addi	r2,r2,-1
1000c2b4:	14c1032e 	bgeu	r2,r19,1000c6c4 <__umoddi3+0x5c4>
1000c2b8:	00800604 	movi	r2,24
1000c2bc:	1007883a 	mov	r3,r2
1000c2c0:	9884d83a 	srl	r2,r19,r2
1000c2c4:	01040074 	movhi	r4,4097
1000c2c8:	21088404 	addi	r4,r4,8720
1000c2cc:	2085883a 	add	r2,r4,r2
1000c2d0:	11000003 	ldbu	r4,0(r2)
1000c2d4:	00800804 	movi	r2,32
1000c2d8:	20c7883a 	add	r3,r4,r3
1000c2dc:	10c5c83a 	sub	r2,r2,r3
1000c2e0:	1000b61e 	bne	r2,zero,1000c5bc <__umoddi3+0x4bc>
1000c2e4:	982ad43a 	srli	r21,r19,16
1000c2e8:	8ce3c83a 	sub	r17,r17,r19
1000c2ec:	9dbfffcc 	andi	r22,r19,65535
1000c2f0:	0025883a 	mov	r18,zero
1000c2f4:	8809883a 	mov	r4,r17
1000c2f8:	a80b883a 	mov	r5,r21
1000c2fc:	000c8400 	call	1000c840 <__umodsi3>
1000c300:	8809883a 	mov	r4,r17
1000c304:	a80b883a 	mov	r5,r21
1000c308:	102f883a 	mov	r23,r2
1000c30c:	000c8380 	call	1000c838 <__udivsi3>
1000c310:	1009883a 	mov	r4,r2
1000c314:	b00b883a 	mov	r5,r22
1000c318:	000c8480 	call	1000c848 <__mulsi3>
1000c31c:	b82e943a 	slli	r23,r23,16
1000c320:	a008d43a 	srli	r4,r20,16
1000c324:	b906b03a 	or	r3,r23,r4
1000c328:	1880032e 	bgeu	r3,r2,1000c338 <__umoddi3+0x238>
1000c32c:	1cc7883a 	add	r3,r3,r19
1000c330:	1cc00136 	bltu	r3,r19,1000c338 <__umoddi3+0x238>
1000c334:	1880f136 	bltu	r3,r2,1000c6fc <__umoddi3+0x5fc>
1000c338:	18a1c83a 	sub	r16,r3,r2
1000c33c:	8009883a 	mov	r4,r16
1000c340:	a80b883a 	mov	r5,r21
1000c344:	000c8400 	call	1000c840 <__umodsi3>
1000c348:	8009883a 	mov	r4,r16
1000c34c:	a80b883a 	mov	r5,r21
1000c350:	1023883a 	mov	r17,r2
1000c354:	000c8380 	call	1000c838 <__udivsi3>
1000c358:	1009883a 	mov	r4,r2
1000c35c:	b00b883a 	mov	r5,r22
1000c360:	8822943a 	slli	r17,r17,16
1000c364:	000c8480 	call	1000c848 <__mulsi3>
1000c368:	a13fffcc 	andi	r4,r20,65535
1000c36c:	8906b03a 	or	r3,r17,r4
1000c370:	1880042e 	bgeu	r3,r2,1000c384 <__umoddi3+0x284>
1000c374:	1cc7883a 	add	r3,r3,r19
1000c378:	1cc00236 	bltu	r3,r19,1000c384 <__umoddi3+0x284>
1000c37c:	1880012e 	bgeu	r3,r2,1000c384 <__umoddi3+0x284>
1000c380:	1cc7883a 	add	r3,r3,r19
1000c384:	1887c83a 	sub	r3,r3,r2
1000c388:	1c84d83a 	srl	r2,r3,r18
1000c38c:	0007883a 	mov	r3,zero
1000c390:	00000206 	br	1000c39c <__umoddi3+0x29c>
1000c394:	2005883a 	mov	r2,r4
1000c398:	2807883a 	mov	r3,r5
1000c39c:	dfc00b17 	ldw	ra,44(sp)
1000c3a0:	df000a17 	ldw	fp,40(sp)
1000c3a4:	ddc00917 	ldw	r23,36(sp)
1000c3a8:	dd800817 	ldw	r22,32(sp)
1000c3ac:	dd400717 	ldw	r21,28(sp)
1000c3b0:	dd000617 	ldw	r20,24(sp)
1000c3b4:	dcc00517 	ldw	r19,20(sp)
1000c3b8:	dc800417 	ldw	r18,16(sp)
1000c3bc:	dc400317 	ldw	r17,12(sp)
1000c3c0:	dc000217 	ldw	r16,8(sp)
1000c3c4:	dec00c04 	addi	sp,sp,48
1000c3c8:	f800283a 	ret
1000c3cc:	00803fc4 	movi	r2,255
1000c3d0:	11c0b02e 	bgeu	r2,r7,1000c694 <__umoddi3+0x594>
1000c3d4:	01400204 	movi	r5,8
1000c3d8:	282b883a 	mov	r21,r5
1000c3dc:	003f9b06 	br	1000c24c <__alt_data_end+0xf800c24c>
1000c3e0:	00804034 	movhi	r2,256
1000c3e4:	10bfffc4 	addi	r2,r2,-1
1000c3e8:	1180b02e 	bgeu	r2,r6,1000c6ac <__umoddi3+0x5ac>
1000c3ec:	01400604 	movi	r5,24
1000c3f0:	2805883a 	mov	r2,r5
1000c3f4:	003f5a06 	br	1000c160 <__alt_data_end+0xf800c160>
1000c3f8:	00803fc4 	movi	r2,255
1000c3fc:	14c0ae2e 	bgeu	r2,r19,1000c6b8 <__umoddi3+0x5b8>
1000c400:	00800204 	movi	r2,8
1000c404:	1007883a 	mov	r3,r2
1000c408:	003fad06 	br	1000c2c0 <__alt_data_end+0xf800c2c0>
1000c40c:	3d0a983a 	sll	r5,r7,r20
1000c410:	356cd83a 	srl	r22,r6,r21
1000c414:	8d78d83a 	srl	fp,r17,r21
1000c418:	8d10983a 	sll	r8,r17,r20
1000c41c:	2dacb03a 	or	r22,r5,r22
1000c420:	b02ed43a 	srli	r23,r22,16
1000c424:	8564d83a 	srl	r18,r16,r21
1000c428:	e009883a 	mov	r4,fp
1000c42c:	b80b883a 	mov	r5,r23
1000c430:	44a4b03a 	or	r18,r8,r18
1000c434:	3526983a 	sll	r19,r6,r20
1000c438:	000c8400 	call	1000c840 <__umodsi3>
1000c43c:	e009883a 	mov	r4,fp
1000c440:	b80b883a 	mov	r5,r23
1000c444:	b47fffcc 	andi	r17,r22,65535
1000c448:	d8800015 	stw	r2,0(sp)
1000c44c:	000c8380 	call	1000c838 <__udivsi3>
1000c450:	1009883a 	mov	r4,r2
1000c454:	880b883a 	mov	r5,r17
1000c458:	1039883a 	mov	fp,r2
1000c45c:	000c8480 	call	1000c848 <__mulsi3>
1000c460:	d9800017 	ldw	r6,0(sp)
1000c464:	9008d43a 	srli	r4,r18,16
1000c468:	8520983a 	sll	r16,r16,r20
1000c46c:	300c943a 	slli	r6,r6,16
1000c470:	3106b03a 	or	r3,r6,r4
1000c474:	1880042e 	bgeu	r3,r2,1000c488 <__umoddi3+0x388>
1000c478:	1d87883a 	add	r3,r3,r22
1000c47c:	e13fffc4 	addi	r4,fp,-1
1000c480:	1d809a2e 	bgeu	r3,r22,1000c6ec <__umoddi3+0x5ec>
1000c484:	2039883a 	mov	fp,r4
1000c488:	1887c83a 	sub	r3,r3,r2
1000c48c:	1809883a 	mov	r4,r3
1000c490:	b80b883a 	mov	r5,r23
1000c494:	d8c00115 	stw	r3,4(sp)
1000c498:	000c8400 	call	1000c840 <__umodsi3>
1000c49c:	d8c00117 	ldw	r3,4(sp)
1000c4a0:	b80b883a 	mov	r5,r23
1000c4a4:	d8800015 	stw	r2,0(sp)
1000c4a8:	1809883a 	mov	r4,r3
1000c4ac:	000c8380 	call	1000c838 <__udivsi3>
1000c4b0:	880b883a 	mov	r5,r17
1000c4b4:	1009883a 	mov	r4,r2
1000c4b8:	102f883a 	mov	r23,r2
1000c4bc:	000c8480 	call	1000c848 <__mulsi3>
1000c4c0:	d9800017 	ldw	r6,0(sp)
1000c4c4:	947fffcc 	andi	r17,r18,65535
1000c4c8:	300c943a 	slli	r6,r6,16
1000c4cc:	3464b03a 	or	r18,r6,r17
1000c4d0:	9080042e 	bgeu	r18,r2,1000c4e4 <__umoddi3+0x3e4>
1000c4d4:	95a5883a 	add	r18,r18,r22
1000c4d8:	b8ffffc4 	addi	r3,r23,-1
1000c4dc:	95807f2e 	bgeu	r18,r22,1000c6dc <__umoddi3+0x5dc>
1000c4e0:	182f883a 	mov	r23,r3
1000c4e4:	e038943a 	slli	fp,fp,16
1000c4e8:	980cd43a 	srli	r6,r19,16
1000c4ec:	98ffffcc 	andi	r3,r19,65535
1000c4f0:	bf38b03a 	or	fp,r23,fp
1000c4f4:	e02ed43a 	srli	r23,fp,16
1000c4f8:	e73fffcc 	andi	fp,fp,65535
1000c4fc:	180b883a 	mov	r5,r3
1000c500:	e009883a 	mov	r4,fp
1000c504:	d9800015 	stw	r6,0(sp)
1000c508:	d8c00115 	stw	r3,4(sp)
1000c50c:	90a5c83a 	sub	r18,r18,r2
1000c510:	000c8480 	call	1000c848 <__mulsi3>
1000c514:	d8c00117 	ldw	r3,4(sp)
1000c518:	b809883a 	mov	r4,r23
1000c51c:	1023883a 	mov	r17,r2
1000c520:	180b883a 	mov	r5,r3
1000c524:	000c8480 	call	1000c848 <__mulsi3>
1000c528:	d9800017 	ldw	r6,0(sp)
1000c52c:	b809883a 	mov	r4,r23
1000c530:	d8800115 	stw	r2,4(sp)
1000c534:	300b883a 	mov	r5,r6
1000c538:	302f883a 	mov	r23,r6
1000c53c:	000c8480 	call	1000c848 <__mulsi3>
1000c540:	e009883a 	mov	r4,fp
1000c544:	b80b883a 	mov	r5,r23
1000c548:	d8800015 	stw	r2,0(sp)
1000c54c:	000c8480 	call	1000c848 <__mulsi3>
1000c550:	d8c00117 	ldw	r3,4(sp)
1000c554:	880cd43a 	srli	r6,r17,16
1000c558:	d9c00017 	ldw	r7,0(sp)
1000c55c:	1885883a 	add	r2,r3,r2
1000c560:	118d883a 	add	r6,r2,r6
1000c564:	30c0022e 	bgeu	r6,r3,1000c570 <__umoddi3+0x470>
1000c568:	00800074 	movhi	r2,1
1000c56c:	388f883a 	add	r7,r7,r2
1000c570:	3006d43a 	srli	r3,r6,16
1000c574:	300c943a 	slli	r6,r6,16
1000c578:	8c7fffcc 	andi	r17,r17,65535
1000c57c:	38c7883a 	add	r3,r7,r3
1000c580:	3463883a 	add	r17,r6,r17
1000c584:	90c03d36 	bltu	r18,r3,1000c67c <__umoddi3+0x57c>
1000c588:	90c06026 	beq	r18,r3,1000c70c <__umoddi3+0x60c>
1000c58c:	90c9c83a 	sub	r4,r18,r3
1000c590:	880f883a 	mov	r7,r17
1000c594:	81cfc83a 	sub	r7,r16,r7
1000c598:	81c7803a 	cmpltu	r3,r16,r7
1000c59c:	20c7c83a 	sub	r3,r4,r3
1000c5a0:	1d44983a 	sll	r2,r3,r21
1000c5a4:	3d0ed83a 	srl	r7,r7,r20
1000c5a8:	1d06d83a 	srl	r3,r3,r20
1000c5ac:	11c4b03a 	or	r2,r2,r7
1000c5b0:	003f7a06 	br	1000c39c <__alt_data_end+0xf800c39c>
1000c5b4:	0025883a 	mov	r18,zero
1000c5b8:	003ef806 	br	1000c19c <__alt_data_end+0xf800c19c>
1000c5bc:	98a6983a 	sll	r19,r19,r2
1000c5c0:	88e8d83a 	srl	r20,r17,r3
1000c5c4:	80c6d83a 	srl	r3,r16,r3
1000c5c8:	982ad43a 	srli	r21,r19,16
1000c5cc:	88a2983a 	sll	r17,r17,r2
1000c5d0:	a009883a 	mov	r4,r20
1000c5d4:	a80b883a 	mov	r5,r21
1000c5d8:	88eeb03a 	or	r23,r17,r3
1000c5dc:	1025883a 	mov	r18,r2
1000c5e0:	000c8400 	call	1000c840 <__umodsi3>
1000c5e4:	a009883a 	mov	r4,r20
1000c5e8:	a80b883a 	mov	r5,r21
1000c5ec:	1023883a 	mov	r17,r2
1000c5f0:	9dbfffcc 	andi	r22,r19,65535
1000c5f4:	000c8380 	call	1000c838 <__udivsi3>
1000c5f8:	1009883a 	mov	r4,r2
1000c5fc:	b00b883a 	mov	r5,r22
1000c600:	000c8480 	call	1000c848 <__mulsi3>
1000c604:	8822943a 	slli	r17,r17,16
1000c608:	b808d43a 	srli	r4,r23,16
1000c60c:	84a8983a 	sll	r20,r16,r18
1000c610:	8906b03a 	or	r3,r17,r4
1000c614:	1880042e 	bgeu	r3,r2,1000c628 <__umoddi3+0x528>
1000c618:	1cc7883a 	add	r3,r3,r19
1000c61c:	1cc00236 	bltu	r3,r19,1000c628 <__umoddi3+0x528>
1000c620:	1880012e 	bgeu	r3,r2,1000c628 <__umoddi3+0x528>
1000c624:	1cc7883a 	add	r3,r3,r19
1000c628:	18a1c83a 	sub	r16,r3,r2
1000c62c:	8009883a 	mov	r4,r16
1000c630:	a80b883a 	mov	r5,r21
1000c634:	000c8400 	call	1000c840 <__umodsi3>
1000c638:	8009883a 	mov	r4,r16
1000c63c:	a80b883a 	mov	r5,r21
1000c640:	1039883a 	mov	fp,r2
1000c644:	000c8380 	call	1000c838 <__udivsi3>
1000c648:	1009883a 	mov	r4,r2
1000c64c:	b00b883a 	mov	r5,r22
1000c650:	000c8480 	call	1000c848 <__mulsi3>
1000c654:	e006943a 	slli	r3,fp,16
1000c658:	b93fffcc 	andi	r4,r23,65535
1000c65c:	1906b03a 	or	r3,r3,r4
1000c660:	1880042e 	bgeu	r3,r2,1000c674 <__umoddi3+0x574>
1000c664:	1cc7883a 	add	r3,r3,r19
1000c668:	1cc00236 	bltu	r3,r19,1000c674 <__umoddi3+0x574>
1000c66c:	1880012e 	bgeu	r3,r2,1000c674 <__umoddi3+0x574>
1000c670:	1cc7883a 	add	r3,r3,r19
1000c674:	18a3c83a 	sub	r17,r3,r2
1000c678:	003f1e06 	br	1000c2f4 <__alt_data_end+0xf800c2f4>
1000c67c:	8ccfc83a 	sub	r7,r17,r19
1000c680:	1d89c83a 	sub	r4,r3,r22
1000c684:	89e3803a 	cmpltu	r17,r17,r7
1000c688:	2463c83a 	sub	r17,r4,r17
1000c68c:	9449c83a 	sub	r4,r18,r17
1000c690:	003fc006 	br	1000c594 <__alt_data_end+0xf800c594>
1000c694:	000b883a 	mov	r5,zero
1000c698:	002b883a 	mov	r21,zero
1000c69c:	003eeb06 	br	1000c24c <__alt_data_end+0xf800c24c>
1000c6a0:	01400404 	movi	r5,16
1000c6a4:	282b883a 	mov	r21,r5
1000c6a8:	003ee806 	br	1000c24c <__alt_data_end+0xf800c24c>
1000c6ac:	01400404 	movi	r5,16
1000c6b0:	2805883a 	mov	r2,r5
1000c6b4:	003eaa06 	br	1000c160 <__alt_data_end+0xf800c160>
1000c6b8:	0005883a 	mov	r2,zero
1000c6bc:	0007883a 	mov	r3,zero
1000c6c0:	003eff06 	br	1000c2c0 <__alt_data_end+0xf800c2c0>
1000c6c4:	00800404 	movi	r2,16
1000c6c8:	1007883a 	mov	r3,r2
1000c6cc:	003efc06 	br	1000c2c0 <__alt_data_end+0xf800c2c0>
1000c6d0:	000b883a 	mov	r5,zero
1000c6d4:	0005883a 	mov	r2,zero
1000c6d8:	003ea106 	br	1000c160 <__alt_data_end+0xf800c160>
1000c6dc:	90bf802e 	bgeu	r18,r2,1000c4e0 <__alt_data_end+0xf800c4e0>
1000c6e0:	bdffff84 	addi	r23,r23,-2
1000c6e4:	95a5883a 	add	r18,r18,r22
1000c6e8:	003f7e06 	br	1000c4e4 <__alt_data_end+0xf800c4e4>
1000c6ec:	18bf652e 	bgeu	r3,r2,1000c484 <__alt_data_end+0xf800c484>
1000c6f0:	e73fff84 	addi	fp,fp,-2
1000c6f4:	1d87883a 	add	r3,r3,r22
1000c6f8:	003f6306 	br	1000c488 <__alt_data_end+0xf800c488>
1000c6fc:	1cc7883a 	add	r3,r3,r19
1000c700:	003f0d06 	br	1000c338 <__alt_data_end+0xf800c338>
1000c704:	8005883a 	mov	r2,r16
1000c708:	003edf06 	br	1000c288 <__alt_data_end+0xf800c288>
1000c70c:	847fdb36 	bltu	r16,r17,1000c67c <__alt_data_end+0xf800c67c>
1000c710:	880f883a 	mov	r7,r17
1000c714:	0009883a 	mov	r4,zero
1000c718:	003f9e06 	br	1000c594 <__alt_data_end+0xf800c594>

1000c71c <udivmodsi4>:
1000c71c:	2900182e 	bgeu	r5,r4,1000c780 <udivmodsi4+0x64>
1000c720:	28001716 	blt	r5,zero,1000c780 <udivmodsi4+0x64>
1000c724:	00800804 	movi	r2,32
1000c728:	00c00044 	movi	r3,1
1000c72c:	00000206 	br	1000c738 <udivmodsi4+0x1c>
1000c730:	10001126 	beq	r2,zero,1000c778 <udivmodsi4+0x5c>
1000c734:	28000516 	blt	r5,zero,1000c74c <udivmodsi4+0x30>
1000c738:	294b883a 	add	r5,r5,r5
1000c73c:	10bfffc4 	addi	r2,r2,-1
1000c740:	18c7883a 	add	r3,r3,r3
1000c744:	293ffa36 	bltu	r5,r4,1000c730 <__alt_data_end+0xf800c730>
1000c748:	18000b26 	beq	r3,zero,1000c778 <udivmodsi4+0x5c>
1000c74c:	0005883a 	mov	r2,zero
1000c750:	21400236 	bltu	r4,r5,1000c75c <udivmodsi4+0x40>
1000c754:	2149c83a 	sub	r4,r4,r5
1000c758:	10c4b03a 	or	r2,r2,r3
1000c75c:	1806d07a 	srli	r3,r3,1
1000c760:	280ad07a 	srli	r5,r5,1
1000c764:	183ffa1e 	bne	r3,zero,1000c750 <__alt_data_end+0xf800c750>
1000c768:	3000011e 	bne	r6,zero,1000c770 <udivmodsi4+0x54>
1000c76c:	f800283a 	ret
1000c770:	2005883a 	mov	r2,r4
1000c774:	f800283a 	ret
1000c778:	0005883a 	mov	r2,zero
1000c77c:	003ffa06 	br	1000c768 <__alt_data_end+0xf800c768>
1000c780:	00c00044 	movi	r3,1
1000c784:	003ff106 	br	1000c74c <__alt_data_end+0xf800c74c>

1000c788 <__divsi3>:
1000c788:	defffe04 	addi	sp,sp,-8
1000c78c:	dfc00115 	stw	ra,4(sp)
1000c790:	dc000015 	stw	r16,0(sp)
1000c794:	20000b16 	blt	r4,zero,1000c7c4 <__divsi3+0x3c>
1000c798:	0021883a 	mov	r16,zero
1000c79c:	28000c16 	blt	r5,zero,1000c7d0 <__divsi3+0x48>
1000c7a0:	000d883a 	mov	r6,zero
1000c7a4:	000c71c0 	call	1000c71c <udivmodsi4>
1000c7a8:	0407c83a 	sub	r3,zero,r16
1000c7ac:	1884f03a 	xor	r2,r3,r2
1000c7b0:	1405883a 	add	r2,r2,r16
1000c7b4:	dfc00117 	ldw	ra,4(sp)
1000c7b8:	dc000017 	ldw	r16,0(sp)
1000c7bc:	dec00204 	addi	sp,sp,8
1000c7c0:	f800283a 	ret
1000c7c4:	0109c83a 	sub	r4,zero,r4
1000c7c8:	04000044 	movi	r16,1
1000c7cc:	283ff40e 	bge	r5,zero,1000c7a0 <__alt_data_end+0xf800c7a0>
1000c7d0:	014bc83a 	sub	r5,zero,r5
1000c7d4:	8400005c 	xori	r16,r16,1
1000c7d8:	003ff106 	br	1000c7a0 <__alt_data_end+0xf800c7a0>

1000c7dc <__modsi3>:
1000c7dc:	defffd04 	addi	sp,sp,-12
1000c7e0:	dfc00215 	stw	ra,8(sp)
1000c7e4:	dc400115 	stw	r17,4(sp)
1000c7e8:	dc000015 	stw	r16,0(sp)
1000c7ec:	20000c16 	blt	r4,zero,1000c820 <__modsi3+0x44>
1000c7f0:	0023883a 	mov	r17,zero
1000c7f4:	0021883a 	mov	r16,zero
1000c7f8:	28000d16 	blt	r5,zero,1000c830 <__modsi3+0x54>
1000c7fc:	01800044 	movi	r6,1
1000c800:	000c71c0 	call	1000c71c <udivmodsi4>
1000c804:	1404f03a 	xor	r2,r2,r16
1000c808:	8885883a 	add	r2,r17,r2
1000c80c:	dfc00217 	ldw	ra,8(sp)
1000c810:	dc400117 	ldw	r17,4(sp)
1000c814:	dc000017 	ldw	r16,0(sp)
1000c818:	dec00304 	addi	sp,sp,12
1000c81c:	f800283a 	ret
1000c820:	0109c83a 	sub	r4,zero,r4
1000c824:	04400044 	movi	r17,1
1000c828:	043fffc4 	movi	r16,-1
1000c82c:	283ff30e 	bge	r5,zero,1000c7fc <__alt_data_end+0xf800c7fc>
1000c830:	014bc83a 	sub	r5,zero,r5
1000c834:	003ff106 	br	1000c7fc <__alt_data_end+0xf800c7fc>

1000c838 <__udivsi3>:
1000c838:	000d883a 	mov	r6,zero
1000c83c:	000c71c1 	jmpi	1000c71c <udivmodsi4>

1000c840 <__umodsi3>:
1000c840:	01800044 	movi	r6,1
1000c844:	000c71c1 	jmpi	1000c71c <udivmodsi4>

1000c848 <__mulsi3>:
1000c848:	0005883a 	mov	r2,zero
1000c84c:	20000726 	beq	r4,zero,1000c86c <__mulsi3+0x24>
1000c850:	20c0004c 	andi	r3,r4,1
1000c854:	2008d07a 	srli	r4,r4,1
1000c858:	18000126 	beq	r3,zero,1000c860 <__mulsi3+0x18>
1000c85c:	1145883a 	add	r2,r2,r5
1000c860:	294b883a 	add	r5,r5,r5
1000c864:	203ffa1e 	bne	r4,zero,1000c850 <__alt_data_end+0xf800c850>
1000c868:	f800283a 	ret
1000c86c:	f800283a 	ret

1000c870 <__adddf3>:
1000c870:	02000434 	movhi	r8,16
1000c874:	423fffc4 	addi	r8,r8,-1
1000c878:	defffb04 	addi	sp,sp,-20
1000c87c:	2a12703a 	and	r9,r5,r8
1000c880:	2806d7fa 	srli	r3,r5,31
1000c884:	3a10703a 	and	r8,r7,r8
1000c888:	3804d53a 	srli	r2,r7,20
1000c88c:	3014d77a 	srli	r10,r6,29
1000c890:	dc000015 	stw	r16,0(sp)
1000c894:	481290fa 	slli	r9,r9,3
1000c898:	2820d53a 	srli	r16,r5,20
1000c89c:	401090fa 	slli	r8,r8,3
1000c8a0:	200ad77a 	srli	r5,r4,29
1000c8a4:	380ed7fa 	srli	r7,r7,31
1000c8a8:	dc800215 	stw	r18,8(sp)
1000c8ac:	dc400115 	stw	r17,4(sp)
1000c8b0:	dfc00415 	stw	ra,16(sp)
1000c8b4:	dcc00315 	stw	r19,12(sp)
1000c8b8:	1c803fcc 	andi	r18,r3,255
1000c8bc:	8401ffcc 	andi	r16,r16,2047
1000c8c0:	494ab03a 	or	r5,r9,r5
1000c8c4:	202290fa 	slli	r17,r4,3
1000c8c8:	1081ffcc 	andi	r2,r2,2047
1000c8cc:	4290b03a 	or	r8,r8,r10
1000c8d0:	300c90fa 	slli	r6,r6,3
1000c8d4:	91c07026 	beq	r18,r7,1000ca98 <__adddf3+0x228>
1000c8d8:	8087c83a 	sub	r3,r16,r2
1000c8dc:	00c0b30e 	bge	zero,r3,1000cbac <__adddf3+0x33c>
1000c8e0:	10002a1e 	bne	r2,zero,1000c98c <__adddf3+0x11c>
1000c8e4:	4184b03a 	or	r2,r8,r6
1000c8e8:	1000991e 	bne	r2,zero,1000cb50 <__adddf3+0x2e0>
1000c8ec:	888001cc 	andi	r2,r17,7
1000c8f0:	10005b26 	beq	r2,zero,1000ca60 <__adddf3+0x1f0>
1000c8f4:	88c003cc 	andi	r3,r17,15
1000c8f8:	00800104 	movi	r2,4
1000c8fc:	18805826 	beq	r3,r2,1000ca60 <__adddf3+0x1f0>
1000c900:	89800104 	addi	r6,r17,4
1000c904:	3463803a 	cmpltu	r17,r6,r17
1000c908:	2c4b883a 	add	r5,r5,r17
1000c90c:	2880202c 	andhi	r2,r5,128
1000c910:	9007883a 	mov	r3,r18
1000c914:	3023883a 	mov	r17,r6
1000c918:	10005426 	beq	r2,zero,1000ca6c <__adddf3+0x1fc>
1000c91c:	84000044 	addi	r16,r16,1
1000c920:	0081ffc4 	movi	r2,2047
1000c924:	8080c126 	beq	r16,r2,1000cc2c <__adddf3+0x3bc>
1000c928:	013fe034 	movhi	r4,65408
1000c92c:	213fffc4 	addi	r4,r4,-1
1000c930:	290a703a 	and	r5,r5,r4
1000c934:	2804977a 	slli	r2,r5,29
1000c938:	280a927a 	slli	r5,r5,9
1000c93c:	8822d0fa 	srli	r17,r17,3
1000c940:	8401ffcc 	andi	r16,r16,2047
1000c944:	2808d33a 	srli	r4,r5,12
1000c948:	1444b03a 	or	r2,r2,r17
1000c94c:	8401ffcc 	andi	r16,r16,2047
1000c950:	800a953a 	slli	r5,r16,20
1000c954:	18c03fcc 	andi	r3,r3,255
1000c958:	04000434 	movhi	r16,16
1000c95c:	180697fa 	slli	r3,r3,31
1000c960:	843fffc4 	addi	r16,r16,-1
1000c964:	2420703a 	and	r16,r4,r16
1000c968:	8160b03a 	or	r16,r16,r5
1000c96c:	80c6b03a 	or	r3,r16,r3
1000c970:	dfc00417 	ldw	ra,16(sp)
1000c974:	dcc00317 	ldw	r19,12(sp)
1000c978:	dc800217 	ldw	r18,8(sp)
1000c97c:	dc400117 	ldw	r17,4(sp)
1000c980:	dc000017 	ldw	r16,0(sp)
1000c984:	dec00504 	addi	sp,sp,20
1000c988:	f800283a 	ret
1000c98c:	0081ffc4 	movi	r2,2047
1000c990:	80bfd626 	beq	r16,r2,1000c8ec <__alt_data_end+0xf800c8ec>
1000c994:	42002034 	orhi	r8,r8,128
1000c998:	00800e04 	movi	r2,56
1000c99c:	10c0a616 	blt	r2,r3,1000cc38 <__adddf3+0x3c8>
1000c9a0:	008007c4 	movi	r2,31
1000c9a4:	10c0c916 	blt	r2,r3,1000cccc <__adddf3+0x45c>
1000c9a8:	00800804 	movi	r2,32
1000c9ac:	10c5c83a 	sub	r2,r2,r3
1000c9b0:	408e983a 	sll	r7,r8,r2
1000c9b4:	30c8d83a 	srl	r4,r6,r3
1000c9b8:	3084983a 	sll	r2,r6,r2
1000c9bc:	40c6d83a 	srl	r3,r8,r3
1000c9c0:	390cb03a 	or	r6,r7,r4
1000c9c4:	1004c03a 	cmpne	r2,r2,zero
1000c9c8:	308cb03a 	or	r6,r6,r2
1000c9cc:	898dc83a 	sub	r6,r17,r6
1000c9d0:	89a3803a 	cmpltu	r17,r17,r6
1000c9d4:	28cbc83a 	sub	r5,r5,r3
1000c9d8:	2c4bc83a 	sub	r5,r5,r17
1000c9dc:	3023883a 	mov	r17,r6
1000c9e0:	2880202c 	andhi	r2,r5,128
1000c9e4:	10006d26 	beq	r2,zero,1000cb9c <__adddf3+0x32c>
1000c9e8:	04c02034 	movhi	r19,128
1000c9ec:	9cffffc4 	addi	r19,r19,-1
1000c9f0:	2ce6703a 	and	r19,r5,r19
1000c9f4:	98007e26 	beq	r19,zero,1000cbf0 <__adddf3+0x380>
1000c9f8:	9809883a 	mov	r4,r19
1000c9fc:	000f0080 	call	1000f008 <__clzsi2>
1000ca00:	10fffe04 	addi	r3,r2,-8
1000ca04:	010007c4 	movi	r4,31
1000ca08:	20c07f16 	blt	r4,r3,1000cc08 <__adddf3+0x398>
1000ca0c:	01400a04 	movi	r5,40
1000ca10:	2885c83a 	sub	r2,r5,r2
1000ca14:	888ad83a 	srl	r5,r17,r2
1000ca18:	98e6983a 	sll	r19,r19,r3
1000ca1c:	88e2983a 	sll	r17,r17,r3
1000ca20:	2ce6b03a 	or	r19,r5,r19
1000ca24:	1c007c16 	blt	r3,r16,1000cc18 <__adddf3+0x3a8>
1000ca28:	1c21c83a 	sub	r16,r3,r16
1000ca2c:	81400044 	addi	r5,r16,1
1000ca30:	00c007c4 	movi	r3,31
1000ca34:	19409816 	blt	r3,r5,1000cc98 <__adddf3+0x428>
1000ca38:	1c21c83a 	sub	r16,r3,r16
1000ca3c:	8c08983a 	sll	r4,r17,r16
1000ca40:	8946d83a 	srl	r3,r17,r5
1000ca44:	9c20983a 	sll	r16,r19,r16
1000ca48:	2008c03a 	cmpne	r4,r4,zero
1000ca4c:	994ad83a 	srl	r5,r19,r5
1000ca50:	1c06b03a 	or	r3,r3,r16
1000ca54:	1922b03a 	or	r17,r3,r4
1000ca58:	0021883a 	mov	r16,zero
1000ca5c:	003fa306 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000ca60:	2880202c 	andhi	r2,r5,128
1000ca64:	9007883a 	mov	r3,r18
1000ca68:	103fac1e 	bne	r2,zero,1000c91c <__alt_data_end+0xf800c91c>
1000ca6c:	2804977a 	slli	r2,r5,29
1000ca70:	8822d0fa 	srli	r17,r17,3
1000ca74:	0101ffc4 	movi	r4,2047
1000ca78:	280ad0fa 	srli	r5,r5,3
1000ca7c:	1444b03a 	or	r2,r2,r17
1000ca80:	81002c26 	beq	r16,r4,1000cb34 <__adddf3+0x2c4>
1000ca84:	8120703a 	and	r16,r16,r4
1000ca88:	01000434 	movhi	r4,16
1000ca8c:	213fffc4 	addi	r4,r4,-1
1000ca90:	2908703a 	and	r4,r5,r4
1000ca94:	003fad06 	br	1000c94c <__alt_data_end+0xf800c94c>
1000ca98:	8089c83a 	sub	r4,r16,r2
1000ca9c:	01006a0e 	bge	zero,r4,1000cc48 <__adddf3+0x3d8>
1000caa0:	10003326 	beq	r2,zero,1000cb70 <__adddf3+0x300>
1000caa4:	0081ffc4 	movi	r2,2047
1000caa8:	80bf9026 	beq	r16,r2,1000c8ec <__alt_data_end+0xf800c8ec>
1000caac:	42002034 	orhi	r8,r8,128
1000cab0:	00800e04 	movi	r2,56
1000cab4:	1100b116 	blt	r2,r4,1000cd7c <__adddf3+0x50c>
1000cab8:	008007c4 	movi	r2,31
1000cabc:	1100e216 	blt	r2,r4,1000ce48 <__adddf3+0x5d8>
1000cac0:	00800804 	movi	r2,32
1000cac4:	1105c83a 	sub	r2,r2,r4
1000cac8:	4092983a 	sll	r9,r8,r2
1000cacc:	310ed83a 	srl	r7,r6,r4
1000cad0:	3084983a 	sll	r2,r6,r2
1000cad4:	4110d83a 	srl	r8,r8,r4
1000cad8:	49ccb03a 	or	r6,r9,r7
1000cadc:	1004c03a 	cmpne	r2,r2,zero
1000cae0:	308cb03a 	or	r6,r6,r2
1000cae4:	344d883a 	add	r6,r6,r17
1000cae8:	3463803a 	cmpltu	r17,r6,r17
1000caec:	414b883a 	add	r5,r8,r5
1000caf0:	2c4b883a 	add	r5,r5,r17
1000caf4:	3023883a 	mov	r17,r6
1000caf8:	2880202c 	andhi	r2,r5,128
1000cafc:	10002726 	beq	r2,zero,1000cb9c <__adddf3+0x32c>
1000cb00:	84000044 	addi	r16,r16,1
1000cb04:	0081ffc4 	movi	r2,2047
1000cb08:	8080ae26 	beq	r16,r2,1000cdc4 <__adddf3+0x554>
1000cb0c:	00bfe034 	movhi	r2,65408
1000cb10:	10bfffc4 	addi	r2,r2,-1
1000cb14:	288a703a 	and	r5,r5,r2
1000cb18:	880cd07a 	srli	r6,r17,1
1000cb1c:	280897fa 	slli	r4,r5,31
1000cb20:	88c0004c 	andi	r3,r17,1
1000cb24:	30e2b03a 	or	r17,r6,r3
1000cb28:	280ad07a 	srli	r5,r5,1
1000cb2c:	8922b03a 	or	r17,r17,r4
1000cb30:	003f6e06 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000cb34:	1148b03a 	or	r4,r2,r5
1000cb38:	20003c26 	beq	r4,zero,1000cc2c <__adddf3+0x3bc>
1000cb3c:	29000234 	orhi	r4,r5,8
1000cb40:	01400434 	movhi	r5,16
1000cb44:	297fffc4 	addi	r5,r5,-1
1000cb48:	2148703a 	and	r4,r4,r5
1000cb4c:	003f7f06 	br	1000c94c <__alt_data_end+0xf800c94c>
1000cb50:	18ffffc4 	addi	r3,r3,-1
1000cb54:	18004d1e 	bne	r3,zero,1000cc8c <__adddf3+0x41c>
1000cb58:	898dc83a 	sub	r6,r17,r6
1000cb5c:	89a3803a 	cmpltu	r17,r17,r6
1000cb60:	2a0bc83a 	sub	r5,r5,r8
1000cb64:	2c4bc83a 	sub	r5,r5,r17
1000cb68:	3023883a 	mov	r17,r6
1000cb6c:	003f9c06 	br	1000c9e0 <__alt_data_end+0xf800c9e0>
1000cb70:	4184b03a 	or	r2,r8,r6
1000cb74:	103f5d26 	beq	r2,zero,1000c8ec <__alt_data_end+0xf800c8ec>
1000cb78:	213fffc4 	addi	r4,r4,-1
1000cb7c:	203fd926 	beq	r4,zero,1000cae4 <__alt_data_end+0xf800cae4>
1000cb80:	0081ffc4 	movi	r2,2047
1000cb84:	80bfca1e 	bne	r16,r2,1000cab0 <__alt_data_end+0xf800cab0>
1000cb88:	003f5806 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000cb8c:	10c8b03a 	or	r4,r2,r3
1000cb90:	20008b26 	beq	r4,zero,1000cdc0 <__adddf3+0x550>
1000cb94:	100b883a 	mov	r5,r2
1000cb98:	1823883a 	mov	r17,r3
1000cb9c:	888001cc 	andi	r2,r17,7
1000cba0:	103f541e 	bne	r2,zero,1000c8f4 <__alt_data_end+0xf800c8f4>
1000cba4:	9007883a 	mov	r3,r18
1000cba8:	003fb006 	br	1000ca6c <__alt_data_end+0xf800ca6c>
1000cbac:	1800531e 	bne	r3,zero,1000ccfc <__adddf3+0x48c>
1000cbb0:	80800044 	addi	r2,r16,1
1000cbb4:	1081ffcc 	andi	r2,r2,2047
1000cbb8:	00c00044 	movi	r3,1
1000cbbc:	1880990e 	bge	r3,r2,1000ce24 <__adddf3+0x5b4>
1000cbc0:	8985c83a 	sub	r2,r17,r6
1000cbc4:	8887803a 	cmpltu	r3,r17,r2
1000cbc8:	2a27c83a 	sub	r19,r5,r8
1000cbcc:	98e7c83a 	sub	r19,r19,r3
1000cbd0:	98c0202c 	andhi	r3,r19,128
1000cbd4:	18006226 	beq	r3,zero,1000cd60 <__adddf3+0x4f0>
1000cbd8:	3463c83a 	sub	r17,r6,r17
1000cbdc:	4151c83a 	sub	r8,r8,r5
1000cbe0:	344d803a 	cmpltu	r6,r6,r17
1000cbe4:	41a7c83a 	sub	r19,r8,r6
1000cbe8:	3825883a 	mov	r18,r7
1000cbec:	983f821e 	bne	r19,zero,1000c9f8 <__alt_data_end+0xf800c9f8>
1000cbf0:	8809883a 	mov	r4,r17
1000cbf4:	000f0080 	call	1000f008 <__clzsi2>
1000cbf8:	10800804 	addi	r2,r2,32
1000cbfc:	10fffe04 	addi	r3,r2,-8
1000cc00:	010007c4 	movi	r4,31
1000cc04:	20ff810e 	bge	r4,r3,1000ca0c <__alt_data_end+0xf800ca0c>
1000cc08:	14fff604 	addi	r19,r2,-40
1000cc0c:	8ce6983a 	sll	r19,r17,r19
1000cc10:	0023883a 	mov	r17,zero
1000cc14:	1c3f840e 	bge	r3,r16,1000ca28 <__alt_data_end+0xf800ca28>
1000cc18:	017fe034 	movhi	r5,65408
1000cc1c:	297fffc4 	addi	r5,r5,-1
1000cc20:	80e1c83a 	sub	r16,r16,r3
1000cc24:	994a703a 	and	r5,r19,r5
1000cc28:	003f3006 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000cc2c:	0009883a 	mov	r4,zero
1000cc30:	0005883a 	mov	r2,zero
1000cc34:	003f4506 	br	1000c94c <__alt_data_end+0xf800c94c>
1000cc38:	418cb03a 	or	r6,r8,r6
1000cc3c:	300cc03a 	cmpne	r6,r6,zero
1000cc40:	0007883a 	mov	r3,zero
1000cc44:	003f6106 	br	1000c9cc <__alt_data_end+0xf800c9cc>
1000cc48:	2000921e 	bne	r4,zero,1000ce94 <__adddf3+0x624>
1000cc4c:	80800044 	addi	r2,r16,1
1000cc50:	11c1ffcc 	andi	r7,r2,2047
1000cc54:	01000044 	movi	r4,1
1000cc58:	21c0610e 	bge	r4,r7,1000cde0 <__adddf3+0x570>
1000cc5c:	0101ffc4 	movi	r4,2047
1000cc60:	1100a326 	beq	r2,r4,1000cef0 <__adddf3+0x680>
1000cc64:	344d883a 	add	r6,r6,r17
1000cc68:	3463803a 	cmpltu	r17,r6,r17
1000cc6c:	414b883a 	add	r5,r8,r5
1000cc70:	2c4b883a 	add	r5,r5,r17
1000cc74:	282297fa 	slli	r17,r5,31
1000cc78:	300cd07a 	srli	r6,r6,1
1000cc7c:	280ad07a 	srli	r5,r5,1
1000cc80:	1021883a 	mov	r16,r2
1000cc84:	89a2b03a 	or	r17,r17,r6
1000cc88:	003f1806 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000cc8c:	0081ffc4 	movi	r2,2047
1000cc90:	80bf411e 	bne	r16,r2,1000c998 <__alt_data_end+0xf800c998>
1000cc94:	003f1506 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000cc98:	80bff844 	addi	r2,r16,-31
1000cc9c:	00c00804 	movi	r3,32
1000cca0:	9884d83a 	srl	r2,r19,r2
1000cca4:	28c04a26 	beq	r5,r3,1000cdd0 <__adddf3+0x560>
1000cca8:	00c00fc4 	movi	r3,63
1000ccac:	1c21c83a 	sub	r16,r3,r16
1000ccb0:	9c26983a 	sll	r19,r19,r16
1000ccb4:	9c62b03a 	or	r17,r19,r17
1000ccb8:	8822c03a 	cmpne	r17,r17,zero
1000ccbc:	88a2b03a 	or	r17,r17,r2
1000ccc0:	000b883a 	mov	r5,zero
1000ccc4:	0021883a 	mov	r16,zero
1000ccc8:	003fb406 	br	1000cb9c <__alt_data_end+0xf800cb9c>
1000cccc:	18bff804 	addi	r2,r3,-32
1000ccd0:	01000804 	movi	r4,32
1000ccd4:	4084d83a 	srl	r2,r8,r2
1000ccd8:	19003f26 	beq	r3,r4,1000cdd8 <__adddf3+0x568>
1000ccdc:	01001004 	movi	r4,64
1000cce0:	20c7c83a 	sub	r3,r4,r3
1000cce4:	40d0983a 	sll	r8,r8,r3
1000cce8:	418cb03a 	or	r6,r8,r6
1000ccec:	300cc03a 	cmpne	r6,r6,zero
1000ccf0:	308cb03a 	or	r6,r6,r2
1000ccf4:	0007883a 	mov	r3,zero
1000ccf8:	003f3406 	br	1000c9cc <__alt_data_end+0xf800c9cc>
1000ccfc:	80002326 	beq	r16,zero,1000cd8c <__adddf3+0x51c>
1000cd00:	0101ffc4 	movi	r4,2047
1000cd04:	11005e26 	beq	r2,r4,1000ce80 <__adddf3+0x610>
1000cd08:	00c7c83a 	sub	r3,zero,r3
1000cd0c:	29402034 	orhi	r5,r5,128
1000cd10:	01000e04 	movi	r4,56
1000cd14:	20c07216 	blt	r4,r3,1000cee0 <__adddf3+0x670>
1000cd18:	010007c4 	movi	r4,31
1000cd1c:	20c0ce16 	blt	r4,r3,1000d058 <__adddf3+0x7e8>
1000cd20:	01000804 	movi	r4,32
1000cd24:	20c9c83a 	sub	r4,r4,r3
1000cd28:	2914983a 	sll	r10,r5,r4
1000cd2c:	88d2d83a 	srl	r9,r17,r3
1000cd30:	8908983a 	sll	r4,r17,r4
1000cd34:	28c6d83a 	srl	r3,r5,r3
1000cd38:	5262b03a 	or	r17,r10,r9
1000cd3c:	2008c03a 	cmpne	r4,r4,zero
1000cd40:	8922b03a 	or	r17,r17,r4
1000cd44:	3463c83a 	sub	r17,r6,r17
1000cd48:	40c7c83a 	sub	r3,r8,r3
1000cd4c:	344d803a 	cmpltu	r6,r6,r17
1000cd50:	198bc83a 	sub	r5,r3,r6
1000cd54:	1021883a 	mov	r16,r2
1000cd58:	3825883a 	mov	r18,r7
1000cd5c:	003f2006 	br	1000c9e0 <__alt_data_end+0xf800c9e0>
1000cd60:	9886b03a 	or	r3,r19,r2
1000cd64:	1800141e 	bne	r3,zero,1000cdb8 <__adddf3+0x548>
1000cd68:	0007883a 	mov	r3,zero
1000cd6c:	000b883a 	mov	r5,zero
1000cd70:	0023883a 	mov	r17,zero
1000cd74:	0021883a 	mov	r16,zero
1000cd78:	003f3c06 	br	1000ca6c <__alt_data_end+0xf800ca6c>
1000cd7c:	418cb03a 	or	r6,r8,r6
1000cd80:	300cc03a 	cmpne	r6,r6,zero
1000cd84:	0011883a 	mov	r8,zero
1000cd88:	003f5606 	br	1000cae4 <__alt_data_end+0xf800cae4>
1000cd8c:	2c48b03a 	or	r4,r5,r17
1000cd90:	20003b26 	beq	r4,zero,1000ce80 <__adddf3+0x610>
1000cd94:	00c6303a 	nor	r3,zero,r3
1000cd98:	1800371e 	bne	r3,zero,1000ce78 <__adddf3+0x608>
1000cd9c:	3463c83a 	sub	r17,r6,r17
1000cda0:	414bc83a 	sub	r5,r8,r5
1000cda4:	344d803a 	cmpltu	r6,r6,r17
1000cda8:	298bc83a 	sub	r5,r5,r6
1000cdac:	1021883a 	mov	r16,r2
1000cdb0:	3825883a 	mov	r18,r7
1000cdb4:	003f0a06 	br	1000c9e0 <__alt_data_end+0xf800c9e0>
1000cdb8:	1023883a 	mov	r17,r2
1000cdbc:	003f0d06 	br	1000c9f4 <__alt_data_end+0xf800c9f4>
1000cdc0:	0007883a 	mov	r3,zero
1000cdc4:	000b883a 	mov	r5,zero
1000cdc8:	0023883a 	mov	r17,zero
1000cdcc:	003f2706 	br	1000ca6c <__alt_data_end+0xf800ca6c>
1000cdd0:	0027883a 	mov	r19,zero
1000cdd4:	003fb706 	br	1000ccb4 <__alt_data_end+0xf800ccb4>
1000cdd8:	0011883a 	mov	r8,zero
1000cddc:	003fc206 	br	1000cce8 <__alt_data_end+0xf800cce8>
1000cde0:	2c44b03a 	or	r2,r5,r17
1000cde4:	8000871e 	bne	r16,zero,1000d004 <__adddf3+0x794>
1000cde8:	1000b126 	beq	r2,zero,1000d0b0 <__adddf3+0x840>
1000cdec:	4184b03a 	or	r2,r8,r6
1000cdf0:	103ebe26 	beq	r2,zero,1000c8ec <__alt_data_end+0xf800c8ec>
1000cdf4:	3445883a 	add	r2,r6,r17
1000cdf8:	1463803a 	cmpltu	r17,r2,r17
1000cdfc:	414b883a 	add	r5,r8,r5
1000ce00:	2c4b883a 	add	r5,r5,r17
1000ce04:	28c0202c 	andhi	r3,r5,128
1000ce08:	1023883a 	mov	r17,r2
1000ce0c:	183f6326 	beq	r3,zero,1000cb9c <__alt_data_end+0xf800cb9c>
1000ce10:	00bfe034 	movhi	r2,65408
1000ce14:	10bfffc4 	addi	r2,r2,-1
1000ce18:	2021883a 	mov	r16,r4
1000ce1c:	288a703a 	and	r5,r5,r2
1000ce20:	003eb206 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000ce24:	2c44b03a 	or	r2,r5,r17
1000ce28:	8000251e 	bne	r16,zero,1000cec0 <__adddf3+0x650>
1000ce2c:	10004b1e 	bne	r2,zero,1000cf5c <__adddf3+0x6ec>
1000ce30:	4184b03a 	or	r2,r8,r6
1000ce34:	103fe226 	beq	r2,zero,1000cdc0 <__alt_data_end+0xf800cdc0>
1000ce38:	400b883a 	mov	r5,r8
1000ce3c:	3023883a 	mov	r17,r6
1000ce40:	3825883a 	mov	r18,r7
1000ce44:	003ea906 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000ce48:	20bff804 	addi	r2,r4,-32
1000ce4c:	01c00804 	movi	r7,32
1000ce50:	4084d83a 	srl	r2,r8,r2
1000ce54:	21c07e26 	beq	r4,r7,1000d050 <__adddf3+0x7e0>
1000ce58:	01c01004 	movi	r7,64
1000ce5c:	3909c83a 	sub	r4,r7,r4
1000ce60:	4110983a 	sll	r8,r8,r4
1000ce64:	418cb03a 	or	r6,r8,r6
1000ce68:	300cc03a 	cmpne	r6,r6,zero
1000ce6c:	308cb03a 	or	r6,r6,r2
1000ce70:	0011883a 	mov	r8,zero
1000ce74:	003f1b06 	br	1000cae4 <__alt_data_end+0xf800cae4>
1000ce78:	0101ffc4 	movi	r4,2047
1000ce7c:	113fa41e 	bne	r2,r4,1000cd10 <__alt_data_end+0xf800cd10>
1000ce80:	400b883a 	mov	r5,r8
1000ce84:	3023883a 	mov	r17,r6
1000ce88:	1021883a 	mov	r16,r2
1000ce8c:	3825883a 	mov	r18,r7
1000ce90:	003e9606 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000ce94:	80001a1e 	bne	r16,zero,1000cf00 <__adddf3+0x690>
1000ce98:	2c4eb03a 	or	r7,r5,r17
1000ce9c:	38005526 	beq	r7,zero,1000cff4 <__adddf3+0x784>
1000cea0:	0108303a 	nor	r4,zero,r4
1000cea4:	2000511e 	bne	r4,zero,1000cfec <__adddf3+0x77c>
1000cea8:	89a3883a 	add	r17,r17,r6
1000ceac:	414b883a 	add	r5,r8,r5
1000ceb0:	898d803a 	cmpltu	r6,r17,r6
1000ceb4:	298b883a 	add	r5,r5,r6
1000ceb8:	1021883a 	mov	r16,r2
1000cebc:	003f0e06 	br	1000caf8 <__alt_data_end+0xf800caf8>
1000cec0:	1000341e 	bne	r2,zero,1000cf94 <__adddf3+0x724>
1000cec4:	4184b03a 	or	r2,r8,r6
1000cec8:	10006f26 	beq	r2,zero,1000d088 <__adddf3+0x818>
1000cecc:	400b883a 	mov	r5,r8
1000ced0:	3023883a 	mov	r17,r6
1000ced4:	3825883a 	mov	r18,r7
1000ced8:	0401ffc4 	movi	r16,2047
1000cedc:	003e8306 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000cee0:	2c62b03a 	or	r17,r5,r17
1000cee4:	8822c03a 	cmpne	r17,r17,zero
1000cee8:	0007883a 	mov	r3,zero
1000ceec:	003f9506 	br	1000cd44 <__alt_data_end+0xf800cd44>
1000cef0:	1021883a 	mov	r16,r2
1000cef4:	000b883a 	mov	r5,zero
1000cef8:	0023883a 	mov	r17,zero
1000cefc:	003edb06 	br	1000ca6c <__alt_data_end+0xf800ca6c>
1000cf00:	01c1ffc4 	movi	r7,2047
1000cf04:	11c03b26 	beq	r2,r7,1000cff4 <__adddf3+0x784>
1000cf08:	0109c83a 	sub	r4,zero,r4
1000cf0c:	29402034 	orhi	r5,r5,128
1000cf10:	01c00e04 	movi	r7,56
1000cf14:	39006216 	blt	r7,r4,1000d0a0 <__adddf3+0x830>
1000cf18:	01c007c4 	movi	r7,31
1000cf1c:	39006b16 	blt	r7,r4,1000d0cc <__adddf3+0x85c>
1000cf20:	01c00804 	movi	r7,32
1000cf24:	390fc83a 	sub	r7,r7,r4
1000cf28:	29d4983a 	sll	r10,r5,r7
1000cf2c:	8912d83a 	srl	r9,r17,r4
1000cf30:	89ce983a 	sll	r7,r17,r7
1000cf34:	2908d83a 	srl	r4,r5,r4
1000cf38:	5262b03a 	or	r17,r10,r9
1000cf3c:	380ac03a 	cmpne	r5,r7,zero
1000cf40:	8962b03a 	or	r17,r17,r5
1000cf44:	89a3883a 	add	r17,r17,r6
1000cf48:	2211883a 	add	r8,r4,r8
1000cf4c:	898d803a 	cmpltu	r6,r17,r6
1000cf50:	418b883a 	add	r5,r8,r6
1000cf54:	1021883a 	mov	r16,r2
1000cf58:	003ee706 	br	1000caf8 <__alt_data_end+0xf800caf8>
1000cf5c:	4184b03a 	or	r2,r8,r6
1000cf60:	103e6226 	beq	r2,zero,1000c8ec <__alt_data_end+0xf800c8ec>
1000cf64:	8987c83a 	sub	r3,r17,r6
1000cf68:	88c9803a 	cmpltu	r4,r17,r3
1000cf6c:	2a05c83a 	sub	r2,r5,r8
1000cf70:	1105c83a 	sub	r2,r2,r4
1000cf74:	1100202c 	andhi	r4,r2,128
1000cf78:	203f0426 	beq	r4,zero,1000cb8c <__alt_data_end+0xf800cb8c>
1000cf7c:	3463c83a 	sub	r17,r6,r17
1000cf80:	414bc83a 	sub	r5,r8,r5
1000cf84:	344d803a 	cmpltu	r6,r6,r17
1000cf88:	298bc83a 	sub	r5,r5,r6
1000cf8c:	3825883a 	mov	r18,r7
1000cf90:	003e5606 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000cf94:	4184b03a 	or	r2,r8,r6
1000cf98:	10002b26 	beq	r2,zero,1000d048 <__adddf3+0x7d8>
1000cf9c:	2804d0fa 	srli	r2,r5,3
1000cfa0:	8822d0fa 	srli	r17,r17,3
1000cfa4:	280a977a 	slli	r5,r5,29
1000cfa8:	10c0022c 	andhi	r3,r2,8
1000cfac:	2c62b03a 	or	r17,r5,r17
1000cfb0:	18000826 	beq	r3,zero,1000cfd4 <__adddf3+0x764>
1000cfb4:	4008d0fa 	srli	r4,r8,3
1000cfb8:	20c0022c 	andhi	r3,r4,8
1000cfbc:	1800051e 	bne	r3,zero,1000cfd4 <__adddf3+0x764>
1000cfc0:	300cd0fa 	srli	r6,r6,3
1000cfc4:	4010977a 	slli	r8,r8,29
1000cfc8:	2005883a 	mov	r2,r4
1000cfcc:	3825883a 	mov	r18,r7
1000cfd0:	41a2b03a 	or	r17,r8,r6
1000cfd4:	880ad77a 	srli	r5,r17,29
1000cfd8:	100490fa 	slli	r2,r2,3
1000cfdc:	882290fa 	slli	r17,r17,3
1000cfe0:	0401ffc4 	movi	r16,2047
1000cfe4:	288ab03a 	or	r5,r5,r2
1000cfe8:	003e4006 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000cfec:	01c1ffc4 	movi	r7,2047
1000cff0:	11ffc71e 	bne	r2,r7,1000cf10 <__alt_data_end+0xf800cf10>
1000cff4:	400b883a 	mov	r5,r8
1000cff8:	3023883a 	mov	r17,r6
1000cffc:	1021883a 	mov	r16,r2
1000d000:	003e3a06 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000d004:	10002d26 	beq	r2,zero,1000d0bc <__adddf3+0x84c>
1000d008:	4184b03a 	or	r2,r8,r6
1000d00c:	10000e26 	beq	r2,zero,1000d048 <__adddf3+0x7d8>
1000d010:	2804d0fa 	srli	r2,r5,3
1000d014:	8822d0fa 	srli	r17,r17,3
1000d018:	280a977a 	slli	r5,r5,29
1000d01c:	10c0022c 	andhi	r3,r2,8
1000d020:	2c62b03a 	or	r17,r5,r17
1000d024:	183feb26 	beq	r3,zero,1000cfd4 <__alt_data_end+0xf800cfd4>
1000d028:	4008d0fa 	srli	r4,r8,3
1000d02c:	20c0022c 	andhi	r3,r4,8
1000d030:	183fe81e 	bne	r3,zero,1000cfd4 <__alt_data_end+0xf800cfd4>
1000d034:	300cd0fa 	srli	r6,r6,3
1000d038:	4010977a 	slli	r8,r8,29
1000d03c:	2005883a 	mov	r2,r4
1000d040:	41a2b03a 	or	r17,r8,r6
1000d044:	003fe306 	br	1000cfd4 <__alt_data_end+0xf800cfd4>
1000d048:	0401ffc4 	movi	r16,2047
1000d04c:	003e2706 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000d050:	0011883a 	mov	r8,zero
1000d054:	003f8306 	br	1000ce64 <__alt_data_end+0xf800ce64>
1000d058:	193ff804 	addi	r4,r3,-32
1000d05c:	02400804 	movi	r9,32
1000d060:	2908d83a 	srl	r4,r5,r4
1000d064:	1a402526 	beq	r3,r9,1000d0fc <__adddf3+0x88c>
1000d068:	02401004 	movi	r9,64
1000d06c:	48c7c83a 	sub	r3,r9,r3
1000d070:	28ca983a 	sll	r5,r5,r3
1000d074:	2c62b03a 	or	r17,r5,r17
1000d078:	8822c03a 	cmpne	r17,r17,zero
1000d07c:	8922b03a 	or	r17,r17,r4
1000d080:	0007883a 	mov	r3,zero
1000d084:	003f2f06 	br	1000cd44 <__alt_data_end+0xf800cd44>
1000d088:	01402034 	movhi	r5,128
1000d08c:	0007883a 	mov	r3,zero
1000d090:	297fffc4 	addi	r5,r5,-1
1000d094:	047ffe04 	movi	r17,-8
1000d098:	0401ffc4 	movi	r16,2047
1000d09c:	003e7306 	br	1000ca6c <__alt_data_end+0xf800ca6c>
1000d0a0:	2c62b03a 	or	r17,r5,r17
1000d0a4:	8822c03a 	cmpne	r17,r17,zero
1000d0a8:	0009883a 	mov	r4,zero
1000d0ac:	003fa506 	br	1000cf44 <__alt_data_end+0xf800cf44>
1000d0b0:	400b883a 	mov	r5,r8
1000d0b4:	3023883a 	mov	r17,r6
1000d0b8:	003e0c06 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000d0bc:	400b883a 	mov	r5,r8
1000d0c0:	3023883a 	mov	r17,r6
1000d0c4:	0401ffc4 	movi	r16,2047
1000d0c8:	003e0806 	br	1000c8ec <__alt_data_end+0xf800c8ec>
1000d0cc:	21fff804 	addi	r7,r4,-32
1000d0d0:	02400804 	movi	r9,32
1000d0d4:	29ced83a 	srl	r7,r5,r7
1000d0d8:	22400a26 	beq	r4,r9,1000d104 <__adddf3+0x894>
1000d0dc:	02401004 	movi	r9,64
1000d0e0:	4909c83a 	sub	r4,r9,r4
1000d0e4:	290a983a 	sll	r5,r5,r4
1000d0e8:	2c62b03a 	or	r17,r5,r17
1000d0ec:	8822c03a 	cmpne	r17,r17,zero
1000d0f0:	89e2b03a 	or	r17,r17,r7
1000d0f4:	0009883a 	mov	r4,zero
1000d0f8:	003f9206 	br	1000cf44 <__alt_data_end+0xf800cf44>
1000d0fc:	000b883a 	mov	r5,zero
1000d100:	003fdc06 	br	1000d074 <__alt_data_end+0xf800d074>
1000d104:	000b883a 	mov	r5,zero
1000d108:	003ff706 	br	1000d0e8 <__alt_data_end+0xf800d0e8>

1000d10c <__divdf3>:
1000d10c:	defff004 	addi	sp,sp,-64
1000d110:	dc800815 	stw	r18,32(sp)
1000d114:	2824d53a 	srli	r18,r5,20
1000d118:	dd800c15 	stw	r22,48(sp)
1000d11c:	282cd7fa 	srli	r22,r5,31
1000d120:	dc000615 	stw	r16,24(sp)
1000d124:	04000434 	movhi	r16,16
1000d128:	df000e15 	stw	fp,56(sp)
1000d12c:	dd000a15 	stw	r20,40(sp)
1000d130:	dcc00915 	stw	r19,36(sp)
1000d134:	dc400715 	stw	r17,28(sp)
1000d138:	843fffc4 	addi	r16,r16,-1
1000d13c:	dfc00f15 	stw	ra,60(sp)
1000d140:	ddc00d15 	stw	r23,52(sp)
1000d144:	dd400b15 	stw	r21,44(sp)
1000d148:	9481ffcc 	andi	r18,r18,2047
1000d14c:	2029883a 	mov	r20,r4
1000d150:	2027883a 	mov	r19,r4
1000d154:	2c22703a 	and	r17,r5,r16
1000d158:	b7003fcc 	andi	fp,r22,255
1000d15c:	90005e26 	beq	r18,zero,1000d2d8 <__divdf3+0x1cc>
1000d160:	0081ffc4 	movi	r2,2047
1000d164:	90803526 	beq	r18,r2,1000d23c <__divdf3+0x130>
1000d168:	8c000434 	orhi	r16,r17,16
1000d16c:	2004d77a 	srli	r2,r4,29
1000d170:	802090fa 	slli	r16,r16,3
1000d174:	202690fa 	slli	r19,r4,3
1000d178:	94bf0044 	addi	r18,r18,-1023
1000d17c:	80a2b03a 	or	r17,r16,r2
1000d180:	0029883a 	mov	r20,zero
1000d184:	0011883a 	mov	r8,zero
1000d188:	380ad53a 	srli	r5,r7,20
1000d18c:	382ed7fa 	srli	r23,r7,31
1000d190:	04000434 	movhi	r16,16
1000d194:	843fffc4 	addi	r16,r16,-1
1000d198:	2941ffcc 	andi	r5,r5,2047
1000d19c:	302b883a 	mov	r21,r6
1000d1a0:	3c20703a 	and	r16,r7,r16
1000d1a4:	ba403fcc 	andi	r9,r23,255
1000d1a8:	28006726 	beq	r5,zero,1000d348 <__divdf3+0x23c>
1000d1ac:	0081ffc4 	movi	r2,2047
1000d1b0:	28805f26 	beq	r5,r2,1000d330 <__divdf3+0x224>
1000d1b4:	84000434 	orhi	r16,r16,16
1000d1b8:	3004d77a 	srli	r2,r6,29
1000d1bc:	802090fa 	slli	r16,r16,3
1000d1c0:	302a90fa 	slli	r21,r6,3
1000d1c4:	297f0044 	addi	r5,r5,-1023
1000d1c8:	80a0b03a 	or	r16,r16,r2
1000d1cc:	000f883a 	mov	r7,zero
1000d1d0:	3d06b03a 	or	r3,r7,r20
1000d1d4:	180690ba 	slli	r3,r3,2
1000d1d8:	00840074 	movhi	r2,4097
1000d1dc:	10b47f04 	addi	r2,r2,-11780
1000d1e0:	1885883a 	add	r2,r3,r2
1000d1e4:	10800017 	ldw	r2,0(r2)
1000d1e8:	b5c8f03a 	xor	r4,r22,r23
1000d1ec:	200d883a 	mov	r6,r4
1000d1f0:	25003fcc 	andi	r20,r4,255
1000d1f4:	9165c83a 	sub	r18,r18,r5
1000d1f8:	1000683a 	jmp	r2
1000d1fc:	1000d444 	addi	zero,r2,849
1000d200:	1000d274 	orhi	zero,r2,841
1000d204:	1000d408 	cmpgei	zero,r2,848
1000d208:	1000d258 	cmpnei	zero,r2,841
1000d20c:	1000d408 	cmpgei	zero,r2,848
1000d210:	1000d3dc 	xori	zero,r2,847
1000d214:	1000d408 	cmpgei	zero,r2,848
1000d218:	1000d258 	cmpnei	zero,r2,841
1000d21c:	1000d274 	orhi	zero,r2,841
1000d220:	1000d274 	orhi	zero,r2,841
1000d224:	1000d3dc 	xori	zero,r2,847
1000d228:	1000d258 	cmpnei	zero,r2,841
1000d22c:	1000d268 	cmpgeui	zero,r2,841
1000d230:	1000d268 	cmpgeui	zero,r2,841
1000d234:	1000d268 	cmpgeui	zero,r2,841
1000d238:	1000d418 	cmpnei	zero,r2,848
1000d23c:	8904b03a 	or	r2,r17,r4
1000d240:	1000631e 	bne	r2,zero,1000d3d0 <__divdf3+0x2c4>
1000d244:	05000204 	movi	r20,8
1000d248:	0023883a 	mov	r17,zero
1000d24c:	0027883a 	mov	r19,zero
1000d250:	02000084 	movi	r8,2
1000d254:	003fcc06 	br	1000d188 <__alt_data_end+0xf800d188>
1000d258:	8023883a 	mov	r17,r16
1000d25c:	a827883a 	mov	r19,r21
1000d260:	4839883a 	mov	fp,r9
1000d264:	3811883a 	mov	r8,r7
1000d268:	00800084 	movi	r2,2
1000d26c:	4081531e 	bne	r8,r2,1000d7bc <__divdf3+0x6b0>
1000d270:	e029883a 	mov	r20,fp
1000d274:	a180004c 	andi	r6,r20,1
1000d278:	0201ffc4 	movi	r8,2047
1000d27c:	000b883a 	mov	r5,zero
1000d280:	0027883a 	mov	r19,zero
1000d284:	4010953a 	slli	r8,r8,20
1000d288:	30c03fcc 	andi	r3,r6,255
1000d28c:	04000434 	movhi	r16,16
1000d290:	180697fa 	slli	r3,r3,31
1000d294:	843fffc4 	addi	r16,r16,-1
1000d298:	2c20703a 	and	r16,r5,r16
1000d29c:	8220b03a 	or	r16,r16,r8
1000d2a0:	80c6b03a 	or	r3,r16,r3
1000d2a4:	9805883a 	mov	r2,r19
1000d2a8:	dfc00f17 	ldw	ra,60(sp)
1000d2ac:	df000e17 	ldw	fp,56(sp)
1000d2b0:	ddc00d17 	ldw	r23,52(sp)
1000d2b4:	dd800c17 	ldw	r22,48(sp)
1000d2b8:	dd400b17 	ldw	r21,44(sp)
1000d2bc:	dd000a17 	ldw	r20,40(sp)
1000d2c0:	dcc00917 	ldw	r19,36(sp)
1000d2c4:	dc800817 	ldw	r18,32(sp)
1000d2c8:	dc400717 	ldw	r17,28(sp)
1000d2cc:	dc000617 	ldw	r16,24(sp)
1000d2d0:	dec01004 	addi	sp,sp,64
1000d2d4:	f800283a 	ret
1000d2d8:	8904b03a 	or	r2,r17,r4
1000d2dc:	10003726 	beq	r2,zero,1000d3bc <__divdf3+0x2b0>
1000d2e0:	88014d26 	beq	r17,zero,1000d818 <__divdf3+0x70c>
1000d2e4:	8809883a 	mov	r4,r17
1000d2e8:	d9800215 	stw	r6,8(sp)
1000d2ec:	d9c00515 	stw	r7,20(sp)
1000d2f0:	000f0080 	call	1000f008 <__clzsi2>
1000d2f4:	d9800217 	ldw	r6,8(sp)
1000d2f8:	d9c00517 	ldw	r7,20(sp)
1000d2fc:	1007883a 	mov	r3,r2
1000d300:	01000a04 	movi	r4,40
1000d304:	1cfffe04 	addi	r19,r3,-8
1000d308:	20c9c83a 	sub	r4,r4,r3
1000d30c:	8cca983a 	sll	r5,r17,r19
1000d310:	a108d83a 	srl	r4,r20,r4
1000d314:	a4e6983a 	sll	r19,r20,r19
1000d318:	2162b03a 	or	r17,r4,r5
1000d31c:	04bf0344 	movi	r18,-1011
1000d320:	90e5c83a 	sub	r18,r18,r3
1000d324:	0029883a 	mov	r20,zero
1000d328:	0011883a 	mov	r8,zero
1000d32c:	003f9606 	br	1000d188 <__alt_data_end+0xf800d188>
1000d330:	8184b03a 	or	r2,r16,r6
1000d334:	10001f1e 	bne	r2,zero,1000d3b4 <__divdf3+0x2a8>
1000d338:	0021883a 	mov	r16,zero
1000d33c:	002b883a 	mov	r21,zero
1000d340:	01c00084 	movi	r7,2
1000d344:	003fa206 	br	1000d1d0 <__alt_data_end+0xf800d1d0>
1000d348:	8184b03a 	or	r2,r16,r6
1000d34c:	10001526 	beq	r2,zero,1000d3a4 <__divdf3+0x298>
1000d350:	80013d26 	beq	r16,zero,1000d848 <__divdf3+0x73c>
1000d354:	8009883a 	mov	r4,r16
1000d358:	d9800215 	stw	r6,8(sp)
1000d35c:	da000315 	stw	r8,12(sp)
1000d360:	da400415 	stw	r9,16(sp)
1000d364:	000f0080 	call	1000f008 <__clzsi2>
1000d368:	d9800217 	ldw	r6,8(sp)
1000d36c:	da000317 	ldw	r8,12(sp)
1000d370:	da400417 	ldw	r9,16(sp)
1000d374:	1007883a 	mov	r3,r2
1000d378:	01000a04 	movi	r4,40
1000d37c:	1d7ffe04 	addi	r21,r3,-8
1000d380:	20c9c83a 	sub	r4,r4,r3
1000d384:	8560983a 	sll	r16,r16,r21
1000d388:	3108d83a 	srl	r4,r6,r4
1000d38c:	356a983a 	sll	r21,r6,r21
1000d390:	2420b03a 	or	r16,r4,r16
1000d394:	017f0344 	movi	r5,-1011
1000d398:	28cbc83a 	sub	r5,r5,r3
1000d39c:	000f883a 	mov	r7,zero
1000d3a0:	003f8b06 	br	1000d1d0 <__alt_data_end+0xf800d1d0>
1000d3a4:	0021883a 	mov	r16,zero
1000d3a8:	002b883a 	mov	r21,zero
1000d3ac:	01c00044 	movi	r7,1
1000d3b0:	003f8706 	br	1000d1d0 <__alt_data_end+0xf800d1d0>
1000d3b4:	01c000c4 	movi	r7,3
1000d3b8:	003f8506 	br	1000d1d0 <__alt_data_end+0xf800d1d0>
1000d3bc:	05000104 	movi	r20,4
1000d3c0:	0023883a 	mov	r17,zero
1000d3c4:	0027883a 	mov	r19,zero
1000d3c8:	02000044 	movi	r8,1
1000d3cc:	003f6e06 	br	1000d188 <__alt_data_end+0xf800d188>
1000d3d0:	05000304 	movi	r20,12
1000d3d4:	020000c4 	movi	r8,3
1000d3d8:	003f6b06 	br	1000d188 <__alt_data_end+0xf800d188>
1000d3dc:	01400434 	movhi	r5,16
1000d3e0:	000d883a 	mov	r6,zero
1000d3e4:	297fffc4 	addi	r5,r5,-1
1000d3e8:	04ffffc4 	movi	r19,-1
1000d3ec:	0201ffc4 	movi	r8,2047
1000d3f0:	003fa406 	br	1000d284 <__alt_data_end+0xf800d284>
1000d3f4:	043f0084 	movi	r16,-1022
1000d3f8:	84a1c83a 	sub	r16,r16,r18
1000d3fc:	00800e04 	movi	r2,56
1000d400:	14014d0e 	bge	r2,r16,1000d938 <__divdf3+0x82c>
1000d404:	a180004c 	andi	r6,r20,1
1000d408:	0011883a 	mov	r8,zero
1000d40c:	000b883a 	mov	r5,zero
1000d410:	0027883a 	mov	r19,zero
1000d414:	003f9b06 	br	1000d284 <__alt_data_end+0xf800d284>
1000d418:	8880022c 	andhi	r2,r17,8
1000d41c:	1000f026 	beq	r2,zero,1000d7e0 <__divdf3+0x6d4>
1000d420:	8080022c 	andhi	r2,r16,8
1000d424:	1000ee1e 	bne	r2,zero,1000d7e0 <__divdf3+0x6d4>
1000d428:	00800434 	movhi	r2,16
1000d42c:	81400234 	orhi	r5,r16,8
1000d430:	10bfffc4 	addi	r2,r2,-1
1000d434:	b80d883a 	mov	r6,r23
1000d438:	288a703a 	and	r5,r5,r2
1000d43c:	a827883a 	mov	r19,r21
1000d440:	003fea06 	br	1000d3ec <__alt_data_end+0xf800d3ec>
1000d444:	84411c36 	bltu	r16,r17,1000d8b8 <__divdf3+0x7ac>
1000d448:	8c011a26 	beq	r17,r16,1000d8b4 <__divdf3+0x7a8>
1000d44c:	94bfffc4 	addi	r18,r18,-1
1000d450:	dcc00015 	stw	r19,0(sp)
1000d454:	8811883a 	mov	r8,r17
1000d458:	002d883a 	mov	r22,zero
1000d45c:	a80cd63a 	srli	r6,r21,24
1000d460:	8020923a 	slli	r16,r16,8
1000d464:	a82a923a 	slli	r21,r21,8
1000d468:	4009883a 	mov	r4,r8
1000d46c:	342eb03a 	or	r23,r6,r16
1000d470:	dd400115 	stw	r21,4(sp)
1000d474:	b82ad43a 	srli	r21,r23,16
1000d478:	da000315 	stw	r8,12(sp)
1000d47c:	bcffffcc 	andi	r19,r23,65535
1000d480:	a80b883a 	mov	r5,r21
1000d484:	000c8380 	call	1000c838 <__udivsi3>
1000d488:	1009883a 	mov	r4,r2
1000d48c:	980b883a 	mov	r5,r19
1000d490:	1023883a 	mov	r17,r2
1000d494:	000c8480 	call	1000c848 <__mulsi3>
1000d498:	da000317 	ldw	r8,12(sp)
1000d49c:	a80b883a 	mov	r5,r21
1000d4a0:	1039883a 	mov	fp,r2
1000d4a4:	4009883a 	mov	r4,r8
1000d4a8:	000c8400 	call	1000c840 <__umodsi3>
1000d4ac:	d8c00017 	ldw	r3,0(sp)
1000d4b0:	1004943a 	slli	r2,r2,16
1000d4b4:	1810d43a 	srli	r8,r3,16
1000d4b8:	120eb03a 	or	r7,r2,r8
1000d4bc:	3f00062e 	bgeu	r7,fp,1000d4d8 <__divdf3+0x3cc>
1000d4c0:	3dcf883a 	add	r7,r7,r23
1000d4c4:	88bfffc4 	addi	r2,r17,-1
1000d4c8:	3dc10a36 	bltu	r7,r23,1000d8f4 <__divdf3+0x7e8>
1000d4cc:	3f01092e 	bgeu	r7,fp,1000d8f4 <__divdf3+0x7e8>
1000d4d0:	8c7fff84 	addi	r17,r17,-2
1000d4d4:	3dcf883a 	add	r7,r7,r23
1000d4d8:	3f39c83a 	sub	fp,r7,fp
1000d4dc:	e009883a 	mov	r4,fp
1000d4e0:	a80b883a 	mov	r5,r21
1000d4e4:	000c8380 	call	1000c838 <__udivsi3>
1000d4e8:	1009883a 	mov	r4,r2
1000d4ec:	980b883a 	mov	r5,r19
1000d4f0:	1021883a 	mov	r16,r2
1000d4f4:	000c8480 	call	1000c848 <__mulsi3>
1000d4f8:	e009883a 	mov	r4,fp
1000d4fc:	a80b883a 	mov	r5,r21
1000d500:	d8800315 	stw	r2,12(sp)
1000d504:	000c8400 	call	1000c840 <__umodsi3>
1000d508:	d9000017 	ldw	r4,0(sp)
1000d50c:	1004943a 	slli	r2,r2,16
1000d510:	da000317 	ldw	r8,12(sp)
1000d514:	20ffffcc 	andi	r3,r4,65535
1000d518:	10ceb03a 	or	r7,r2,r3
1000d51c:	3a00062e 	bgeu	r7,r8,1000d538 <__divdf3+0x42c>
1000d520:	3dcf883a 	add	r7,r7,r23
1000d524:	80bfffc4 	addi	r2,r16,-1
1000d528:	3dc0f036 	bltu	r7,r23,1000d8ec <__divdf3+0x7e0>
1000d52c:	3a00ef2e 	bgeu	r7,r8,1000d8ec <__divdf3+0x7e0>
1000d530:	843fff84 	addi	r16,r16,-2
1000d534:	3dcf883a 	add	r7,r7,r23
1000d538:	d8c00117 	ldw	r3,4(sp)
1000d53c:	8822943a 	slli	r17,r17,16
1000d540:	3a0fc83a 	sub	r7,r7,r8
1000d544:	1806d43a 	srli	r3,r3,16
1000d548:	8462b03a 	or	r17,r16,r17
1000d54c:	8affffcc 	andi	r11,r17,65535
1000d550:	d8c00015 	stw	r3,0(sp)
1000d554:	d8c00117 	ldw	r3,4(sp)
1000d558:	8820d43a 	srli	r16,r17,16
1000d55c:	5809883a 	mov	r4,r11
1000d560:	1f3fffcc 	andi	fp,r3,65535
1000d564:	e00b883a 	mov	r5,fp
1000d568:	d9c00515 	stw	r7,20(sp)
1000d56c:	dac00215 	stw	r11,8(sp)
1000d570:	000c8480 	call	1000c848 <__mulsi3>
1000d574:	8009883a 	mov	r4,r16
1000d578:	e00b883a 	mov	r5,fp
1000d57c:	d8800415 	stw	r2,16(sp)
1000d580:	000c8480 	call	1000c848 <__mulsi3>
1000d584:	d9400017 	ldw	r5,0(sp)
1000d588:	8009883a 	mov	r4,r16
1000d58c:	d8800315 	stw	r2,12(sp)
1000d590:	000c8480 	call	1000c848 <__mulsi3>
1000d594:	dac00217 	ldw	r11,8(sp)
1000d598:	d9400017 	ldw	r5,0(sp)
1000d59c:	d8800215 	stw	r2,8(sp)
1000d5a0:	5809883a 	mov	r4,r11
1000d5a4:	000c8480 	call	1000c848 <__mulsi3>
1000d5a8:	da400417 	ldw	r9,16(sp)
1000d5ac:	da800317 	ldw	r10,12(sp)
1000d5b0:	d9c00517 	ldw	r7,20(sp)
1000d5b4:	480ad43a 	srli	r5,r9,16
1000d5b8:	5085883a 	add	r2,r10,r2
1000d5bc:	db000217 	ldw	r12,8(sp)
1000d5c0:	1151883a 	add	r8,r2,r5
1000d5c4:	4280022e 	bgeu	r8,r10,1000d5d0 <__divdf3+0x4c4>
1000d5c8:	00800074 	movhi	r2,1
1000d5cc:	6099883a 	add	r12,r12,r2
1000d5d0:	400ad43a 	srli	r5,r8,16
1000d5d4:	4010943a 	slli	r8,r8,16
1000d5d8:	4c3fffcc 	andi	r16,r9,65535
1000d5dc:	6149883a 	add	r4,r12,r5
1000d5e0:	4411883a 	add	r8,r8,r16
1000d5e4:	3900a736 	bltu	r7,r4,1000d884 <__divdf3+0x778>
1000d5e8:	3900c426 	beq	r7,r4,1000d8fc <__divdf3+0x7f0>
1000d5ec:	3909c83a 	sub	r4,r7,r4
1000d5f0:	b221c83a 	sub	r16,r22,r8
1000d5f4:	b42d803a 	cmpltu	r22,r22,r16
1000d5f8:	25adc83a 	sub	r22,r4,r22
1000d5fc:	b5c0c626 	beq	r22,r23,1000d918 <__divdf3+0x80c>
1000d600:	b009883a 	mov	r4,r22
1000d604:	a80b883a 	mov	r5,r21
1000d608:	000c8380 	call	1000c838 <__udivsi3>
1000d60c:	1009883a 	mov	r4,r2
1000d610:	980b883a 	mov	r5,r19
1000d614:	d8800315 	stw	r2,12(sp)
1000d618:	000c8480 	call	1000c848 <__mulsi3>
1000d61c:	a80b883a 	mov	r5,r21
1000d620:	b009883a 	mov	r4,r22
1000d624:	d8800415 	stw	r2,16(sp)
1000d628:	000c8400 	call	1000c840 <__umodsi3>
1000d62c:	1004943a 	slli	r2,r2,16
1000d630:	800ed43a 	srli	r7,r16,16
1000d634:	da400417 	ldw	r9,16(sp)
1000d638:	da000317 	ldw	r8,12(sp)
1000d63c:	11cab03a 	or	r5,r2,r7
1000d640:	2a40062e 	bgeu	r5,r9,1000d65c <__divdf3+0x550>
1000d644:	2dcb883a 	add	r5,r5,r23
1000d648:	40bfffc4 	addi	r2,r8,-1
1000d64c:	2dc0b436 	bltu	r5,r23,1000d920 <__divdf3+0x814>
1000d650:	2a40b32e 	bgeu	r5,r9,1000d920 <__divdf3+0x814>
1000d654:	423fff84 	addi	r8,r8,-2
1000d658:	2dcb883a 	add	r5,r5,r23
1000d65c:	2a6dc83a 	sub	r22,r5,r9
1000d660:	b009883a 	mov	r4,r22
1000d664:	a80b883a 	mov	r5,r21
1000d668:	da000315 	stw	r8,12(sp)
1000d66c:	000c8380 	call	1000c838 <__udivsi3>
1000d670:	980b883a 	mov	r5,r19
1000d674:	1009883a 	mov	r4,r2
1000d678:	d8800415 	stw	r2,16(sp)
1000d67c:	000c8480 	call	1000c848 <__mulsi3>
1000d680:	b009883a 	mov	r4,r22
1000d684:	a80b883a 	mov	r5,r21
1000d688:	1027883a 	mov	r19,r2
1000d68c:	000c8400 	call	1000c840 <__umodsi3>
1000d690:	1004943a 	slli	r2,r2,16
1000d694:	843fffcc 	andi	r16,r16,65535
1000d698:	da000317 	ldw	r8,12(sp)
1000d69c:	140eb03a 	or	r7,r2,r16
1000d6a0:	da400417 	ldw	r9,16(sp)
1000d6a4:	3cc0062e 	bgeu	r7,r19,1000d6c0 <__divdf3+0x5b4>
1000d6a8:	3dcf883a 	add	r7,r7,r23
1000d6ac:	48bfffc4 	addi	r2,r9,-1
1000d6b0:	3dc09d36 	bltu	r7,r23,1000d928 <__divdf3+0x81c>
1000d6b4:	3cc09c2e 	bgeu	r7,r19,1000d928 <__divdf3+0x81c>
1000d6b8:	4a7fff84 	addi	r9,r9,-2
1000d6bc:	3dcf883a 	add	r7,r7,r23
1000d6c0:	4010943a 	slli	r8,r8,16
1000d6c4:	3cebc83a 	sub	r21,r7,r19
1000d6c8:	e00b883a 	mov	r5,fp
1000d6cc:	4a26b03a 	or	r19,r9,r8
1000d6d0:	99ffffcc 	andi	r7,r19,65535
1000d6d4:	9820d43a 	srli	r16,r19,16
1000d6d8:	3809883a 	mov	r4,r7
1000d6dc:	d9c00515 	stw	r7,20(sp)
1000d6e0:	000c8480 	call	1000c848 <__mulsi3>
1000d6e4:	8009883a 	mov	r4,r16
1000d6e8:	e00b883a 	mov	r5,fp
1000d6ec:	102d883a 	mov	r22,r2
1000d6f0:	000c8480 	call	1000c848 <__mulsi3>
1000d6f4:	d9400017 	ldw	r5,0(sp)
1000d6f8:	8009883a 	mov	r4,r16
1000d6fc:	1039883a 	mov	fp,r2
1000d700:	000c8480 	call	1000c848 <__mulsi3>
1000d704:	d9c00517 	ldw	r7,20(sp)
1000d708:	d9400017 	ldw	r5,0(sp)
1000d70c:	1021883a 	mov	r16,r2
1000d710:	3809883a 	mov	r4,r7
1000d714:	000c8480 	call	1000c848 <__mulsi3>
1000d718:	b008d43a 	srli	r4,r22,16
1000d71c:	e085883a 	add	r2,fp,r2
1000d720:	1109883a 	add	r4,r2,r4
1000d724:	2700022e 	bgeu	r4,fp,1000d730 <__divdf3+0x624>
1000d728:	00800074 	movhi	r2,1
1000d72c:	80a1883a 	add	r16,r16,r2
1000d730:	200ad43a 	srli	r5,r4,16
1000d734:	2008943a 	slli	r4,r4,16
1000d738:	b5bfffcc 	andi	r22,r22,65535
1000d73c:	8145883a 	add	r2,r16,r5
1000d740:	2589883a 	add	r4,r4,r22
1000d744:	a8802c36 	bltu	r21,r2,1000d7f8 <__divdf3+0x6ec>
1000d748:	a880a426 	beq	r21,r2,1000d9dc <__divdf3+0x8d0>
1000d74c:	9cc00054 	ori	r19,r19,1
1000d750:	9200ffc4 	addi	r8,r18,1023
1000d754:	023f270e 	bge	zero,r8,1000d3f4 <__alt_data_end+0xf800d3f4>
1000d758:	988001cc 	andi	r2,r19,7
1000d75c:	10000726 	beq	r2,zero,1000d77c <__divdf3+0x670>
1000d760:	990003cc 	andi	r4,r19,15
1000d764:	00800104 	movi	r2,4
1000d768:	20800426 	beq	r4,r2,1000d77c <__divdf3+0x670>
1000d76c:	9885883a 	add	r2,r19,r2
1000d770:	14e7803a 	cmpltu	r19,r2,r19
1000d774:	8ce3883a 	add	r17,r17,r19
1000d778:	1027883a 	mov	r19,r2
1000d77c:	8880402c 	andhi	r2,r17,256
1000d780:	10000426 	beq	r2,zero,1000d794 <__divdf3+0x688>
1000d784:	00bfc034 	movhi	r2,65280
1000d788:	10bfffc4 	addi	r2,r2,-1
1000d78c:	92010004 	addi	r8,r18,1024
1000d790:	88a2703a 	and	r17,r17,r2
1000d794:	0081ff84 	movi	r2,2046
1000d798:	123eb616 	blt	r2,r8,1000d274 <__alt_data_end+0xf800d274>
1000d79c:	9826d0fa 	srli	r19,r19,3
1000d7a0:	8804977a 	slli	r2,r17,29
1000d7a4:	8820927a 	slli	r16,r17,9
1000d7a8:	4201ffcc 	andi	r8,r8,2047
1000d7ac:	14e6b03a 	or	r19,r2,r19
1000d7b0:	800ad33a 	srli	r5,r16,12
1000d7b4:	a180004c 	andi	r6,r20,1
1000d7b8:	003eb206 	br	1000d284 <__alt_data_end+0xf800d284>
1000d7bc:	008000c4 	movi	r2,3
1000d7c0:	4080ac26 	beq	r8,r2,1000da74 <__divdf3+0x968>
1000d7c4:	00800044 	movi	r2,1
1000d7c8:	4080591e 	bne	r8,r2,1000d930 <__divdf3+0x824>
1000d7cc:	e00d883a 	mov	r6,fp
1000d7d0:	0011883a 	mov	r8,zero
1000d7d4:	000b883a 	mov	r5,zero
1000d7d8:	0027883a 	mov	r19,zero
1000d7dc:	003ea906 	br	1000d284 <__alt_data_end+0xf800d284>
1000d7e0:	00800434 	movhi	r2,16
1000d7e4:	89400234 	orhi	r5,r17,8
1000d7e8:	10bfffc4 	addi	r2,r2,-1
1000d7ec:	b00d883a 	mov	r6,r22
1000d7f0:	288a703a 	and	r5,r5,r2
1000d7f4:	003efd06 	br	1000d3ec <__alt_data_end+0xf800d3ec>
1000d7f8:	adcf883a 	add	r7,r21,r23
1000d7fc:	997fffc4 	addi	r5,r19,-1
1000d800:	3dc0412e 	bgeu	r7,r23,1000d908 <__divdf3+0x7fc>
1000d804:	2827883a 	mov	r19,r5
1000d808:	38bfd01e 	bne	r7,r2,1000d74c <__alt_data_end+0xf800d74c>
1000d80c:	d8c00117 	ldw	r3,4(sp)
1000d810:	193fce1e 	bne	r3,r4,1000d74c <__alt_data_end+0xf800d74c>
1000d814:	003fce06 	br	1000d750 <__alt_data_end+0xf800d750>
1000d818:	d9800215 	stw	r6,8(sp)
1000d81c:	d9c00515 	stw	r7,20(sp)
1000d820:	000f0080 	call	1000f008 <__clzsi2>
1000d824:	10c00804 	addi	r3,r2,32
1000d828:	010009c4 	movi	r4,39
1000d82c:	d9800217 	ldw	r6,8(sp)
1000d830:	d9c00517 	ldw	r7,20(sp)
1000d834:	20feb20e 	bge	r4,r3,1000d300 <__alt_data_end+0xf800d300>
1000d838:	117ffe04 	addi	r5,r2,-8
1000d83c:	a162983a 	sll	r17,r20,r5
1000d840:	0027883a 	mov	r19,zero
1000d844:	003eb506 	br	1000d31c <__alt_data_end+0xf800d31c>
1000d848:	3009883a 	mov	r4,r6
1000d84c:	d9800215 	stw	r6,8(sp)
1000d850:	da000315 	stw	r8,12(sp)
1000d854:	da400415 	stw	r9,16(sp)
1000d858:	000f0080 	call	1000f008 <__clzsi2>
1000d85c:	10c00804 	addi	r3,r2,32
1000d860:	010009c4 	movi	r4,39
1000d864:	d9800217 	ldw	r6,8(sp)
1000d868:	da000317 	ldw	r8,12(sp)
1000d86c:	da400417 	ldw	r9,16(sp)
1000d870:	20fec10e 	bge	r4,r3,1000d378 <__alt_data_end+0xf800d378>
1000d874:	10bffe04 	addi	r2,r2,-8
1000d878:	a8a0983a 	sll	r16,r21,r2
1000d87c:	002b883a 	mov	r21,zero
1000d880:	003ec406 	br	1000d394 <__alt_data_end+0xf800d394>
1000d884:	d8c00117 	ldw	r3,4(sp)
1000d888:	b0ed883a 	add	r22,r22,r3
1000d88c:	b0c5803a 	cmpltu	r2,r22,r3
1000d890:	15c5883a 	add	r2,r2,r23
1000d894:	11cf883a 	add	r7,r2,r7
1000d898:	88bfffc4 	addi	r2,r17,-1
1000d89c:	b9c00d2e 	bgeu	r23,r7,1000d8d4 <__divdf3+0x7c8>
1000d8a0:	39003f36 	bltu	r7,r4,1000d9a0 <__divdf3+0x894>
1000d8a4:	21c06a26 	beq	r4,r7,1000da50 <__divdf3+0x944>
1000d8a8:	3909c83a 	sub	r4,r7,r4
1000d8ac:	1023883a 	mov	r17,r2
1000d8b0:	003f4f06 	br	1000d5f0 <__alt_data_end+0xf800d5f0>
1000d8b4:	9d7ee536 	bltu	r19,r21,1000d44c <__alt_data_end+0xf800d44c>
1000d8b8:	982ed07a 	srli	r23,r19,1
1000d8bc:	880497fa 	slli	r2,r17,31
1000d8c0:	8810d07a 	srli	r8,r17,1
1000d8c4:	982c97fa 	slli	r22,r19,31
1000d8c8:	b884b03a 	or	r2,r23,r2
1000d8cc:	d8800015 	stw	r2,0(sp)
1000d8d0:	003ee206 	br	1000d45c <__alt_data_end+0xf800d45c>
1000d8d4:	3dfff41e 	bne	r7,r23,1000d8a8 <__alt_data_end+0xf800d8a8>
1000d8d8:	d8c00117 	ldw	r3,4(sp)
1000d8dc:	b0fff02e 	bgeu	r22,r3,1000d8a0 <__alt_data_end+0xf800d8a0>
1000d8e0:	b909c83a 	sub	r4,r23,r4
1000d8e4:	1023883a 	mov	r17,r2
1000d8e8:	003f4106 	br	1000d5f0 <__alt_data_end+0xf800d5f0>
1000d8ec:	1021883a 	mov	r16,r2
1000d8f0:	003f1106 	br	1000d538 <__alt_data_end+0xf800d538>
1000d8f4:	1023883a 	mov	r17,r2
1000d8f8:	003ef706 	br	1000d4d8 <__alt_data_end+0xf800d4d8>
1000d8fc:	b23fe136 	bltu	r22,r8,1000d884 <__alt_data_end+0xf800d884>
1000d900:	0009883a 	mov	r4,zero
1000d904:	003f3a06 	br	1000d5f0 <__alt_data_end+0xf800d5f0>
1000d908:	38802c36 	bltu	r7,r2,1000d9bc <__divdf3+0x8b0>
1000d90c:	11c05326 	beq	r2,r7,1000da5c <__divdf3+0x950>
1000d910:	2827883a 	mov	r19,r5
1000d914:	003f8d06 	br	1000d74c <__alt_data_end+0xf800d74c>
1000d918:	04ffffc4 	movi	r19,-1
1000d91c:	003f8c06 	br	1000d750 <__alt_data_end+0xf800d750>
1000d920:	1011883a 	mov	r8,r2
1000d924:	003f4d06 	br	1000d65c <__alt_data_end+0xf800d65c>
1000d928:	1013883a 	mov	r9,r2
1000d92c:	003f6406 	br	1000d6c0 <__alt_data_end+0xf800d6c0>
1000d930:	e029883a 	mov	r20,fp
1000d934:	003f8606 	br	1000d750 <__alt_data_end+0xf800d750>
1000d938:	008007c4 	movi	r2,31
1000d93c:	14002a16 	blt	r2,r16,1000d9e8 <__divdf3+0x8dc>
1000d940:	91410784 	addi	r5,r18,1054
1000d944:	9c0cd83a 	srl	r6,r19,r16
1000d948:	8948983a 	sll	r4,r17,r5
1000d94c:	9944983a 	sll	r2,r19,r5
1000d950:	8c20d83a 	srl	r16,r17,r16
1000d954:	3108b03a 	or	r4,r6,r4
1000d958:	1004c03a 	cmpne	r2,r2,zero
1000d95c:	2084b03a 	or	r2,r4,r2
1000d960:	110001cc 	andi	r4,r2,7
1000d964:	20000726 	beq	r4,zero,1000d984 <__divdf3+0x878>
1000d968:	114003cc 	andi	r5,r2,15
1000d96c:	01000104 	movi	r4,4
1000d970:	29000426 	beq	r5,r4,1000d984 <__divdf3+0x878>
1000d974:	11000104 	addi	r4,r2,4
1000d978:	2085803a 	cmpltu	r2,r4,r2
1000d97c:	80a1883a 	add	r16,r16,r2
1000d980:	2005883a 	mov	r2,r4
1000d984:	8100202c 	andhi	r4,r16,128
1000d988:	20002d26 	beq	r4,zero,1000da40 <__divdf3+0x934>
1000d98c:	a180004c 	andi	r6,r20,1
1000d990:	02000044 	movi	r8,1
1000d994:	000b883a 	mov	r5,zero
1000d998:	0027883a 	mov	r19,zero
1000d99c:	003e3906 	br	1000d284 <__alt_data_end+0xf800d284>
1000d9a0:	d8c00117 	ldw	r3,4(sp)
1000d9a4:	8c7fff84 	addi	r17,r17,-2
1000d9a8:	b0ed883a 	add	r22,r22,r3
1000d9ac:	b0c5803a 	cmpltu	r2,r22,r3
1000d9b0:	15c5883a 	add	r2,r2,r23
1000d9b4:	11cf883a 	add	r7,r2,r7
1000d9b8:	003f0c06 	br	1000d5ec <__alt_data_end+0xf800d5ec>
1000d9bc:	d8c00117 	ldw	r3,4(sp)
1000d9c0:	997fff84 	addi	r5,r19,-2
1000d9c4:	18d1883a 	add	r8,r3,r3
1000d9c8:	40c7803a 	cmpltu	r3,r8,r3
1000d9cc:	1dcd883a 	add	r6,r3,r23
1000d9d0:	398f883a 	add	r7,r7,r6
1000d9d4:	da000115 	stw	r8,4(sp)
1000d9d8:	003f8a06 	br	1000d804 <__alt_data_end+0xf800d804>
1000d9dc:	203f861e 	bne	r4,zero,1000d7f8 <__alt_data_end+0xf800d7f8>
1000d9e0:	d8000115 	stw	zero,4(sp)
1000d9e4:	003f8906 	br	1000d80c <__alt_data_end+0xf800d80c>
1000d9e8:	00bef884 	movi	r2,-1054
1000d9ec:	1485c83a 	sub	r2,r2,r18
1000d9f0:	01000804 	movi	r4,32
1000d9f4:	8884d83a 	srl	r2,r17,r2
1000d9f8:	81001c26 	beq	r16,r4,1000da6c <__divdf3+0x960>
1000d9fc:	91010f84 	addi	r4,r18,1086
1000da00:	8908983a 	sll	r4,r17,r4
1000da04:	24c8b03a 	or	r4,r4,r19
1000da08:	2008c03a 	cmpne	r4,r4,zero
1000da0c:	2084b03a 	or	r2,r4,r2
1000da10:	140001cc 	andi	r16,r2,7
1000da14:	8000061e 	bne	r16,zero,1000da30 <__divdf3+0x924>
1000da18:	000b883a 	mov	r5,zero
1000da1c:	1004d0fa 	srli	r2,r2,3
1000da20:	a180004c 	andi	r6,r20,1
1000da24:	0011883a 	mov	r8,zero
1000da28:	1426b03a 	or	r19,r2,r16
1000da2c:	003e1506 	br	1000d284 <__alt_data_end+0xf800d284>
1000da30:	114003cc 	andi	r5,r2,15
1000da34:	01000104 	movi	r4,4
1000da38:	0021883a 	mov	r16,zero
1000da3c:	293fcd1e 	bne	r5,r4,1000d974 <__alt_data_end+0xf800d974>
1000da40:	800a927a 	slli	r5,r16,9
1000da44:	8020977a 	slli	r16,r16,29
1000da48:	280ad33a 	srli	r5,r5,12
1000da4c:	003ff306 	br	1000da1c <__alt_data_end+0xf800da1c>
1000da50:	b23fd336 	bltu	r22,r8,1000d9a0 <__alt_data_end+0xf800d9a0>
1000da54:	1023883a 	mov	r17,r2
1000da58:	003fa906 	br	1000d900 <__alt_data_end+0xf800d900>
1000da5c:	d8c00117 	ldw	r3,4(sp)
1000da60:	193fd636 	bltu	r3,r4,1000d9bc <__alt_data_end+0xf800d9bc>
1000da64:	2827883a 	mov	r19,r5
1000da68:	003f6806 	br	1000d80c <__alt_data_end+0xf800d80c>
1000da6c:	0009883a 	mov	r4,zero
1000da70:	003fe406 	br	1000da04 <__alt_data_end+0xf800da04>
1000da74:	00800434 	movhi	r2,16
1000da78:	89400234 	orhi	r5,r17,8
1000da7c:	10bfffc4 	addi	r2,r2,-1
1000da80:	e00d883a 	mov	r6,fp
1000da84:	288a703a 	and	r5,r5,r2
1000da88:	003e5806 	br	1000d3ec <__alt_data_end+0xf800d3ec>

1000da8c <__eqdf2>:
1000da8c:	2804d53a 	srli	r2,r5,20
1000da90:	3806d53a 	srli	r3,r7,20
1000da94:	02000434 	movhi	r8,16
1000da98:	423fffc4 	addi	r8,r8,-1
1000da9c:	1081ffcc 	andi	r2,r2,2047
1000daa0:	0241ffc4 	movi	r9,2047
1000daa4:	2a14703a 	and	r10,r5,r8
1000daa8:	18c1ffcc 	andi	r3,r3,2047
1000daac:	3a10703a 	and	r8,r7,r8
1000dab0:	280ad7fa 	srli	r5,r5,31
1000dab4:	380ed7fa 	srli	r7,r7,31
1000dab8:	12400f26 	beq	r2,r9,1000daf8 <__eqdf2+0x6c>
1000dabc:	0241ffc4 	movi	r9,2047
1000dac0:	1a400326 	beq	r3,r9,1000dad0 <__eqdf2+0x44>
1000dac4:	10c00526 	beq	r2,r3,1000dadc <__eqdf2+0x50>
1000dac8:	00800044 	movi	r2,1
1000dacc:	f800283a 	ret
1000dad0:	4192b03a 	or	r9,r8,r6
1000dad4:	483ffc1e 	bne	r9,zero,1000dac8 <__alt_data_end+0xf800dac8>
1000dad8:	10fffb1e 	bne	r2,r3,1000dac8 <__alt_data_end+0xf800dac8>
1000dadc:	523ffa1e 	bne	r10,r8,1000dac8 <__alt_data_end+0xf800dac8>
1000dae0:	21bff91e 	bne	r4,r6,1000dac8 <__alt_data_end+0xf800dac8>
1000dae4:	29c00826 	beq	r5,r7,1000db08 <__eqdf2+0x7c>
1000dae8:	103ff71e 	bne	r2,zero,1000dac8 <__alt_data_end+0xf800dac8>
1000daec:	5104b03a 	or	r2,r10,r4
1000daf0:	1004c03a 	cmpne	r2,r2,zero
1000daf4:	f800283a 	ret
1000daf8:	5112b03a 	or	r9,r10,r4
1000dafc:	483fef26 	beq	r9,zero,1000dabc <__alt_data_end+0xf800dabc>
1000db00:	00800044 	movi	r2,1
1000db04:	f800283a 	ret
1000db08:	0005883a 	mov	r2,zero
1000db0c:	f800283a 	ret

1000db10 <__gedf2>:
1000db10:	2804d53a 	srli	r2,r5,20
1000db14:	3806d53a 	srli	r3,r7,20
1000db18:	02000434 	movhi	r8,16
1000db1c:	423fffc4 	addi	r8,r8,-1
1000db20:	0241ffc4 	movi	r9,2047
1000db24:	1081ffcc 	andi	r2,r2,2047
1000db28:	2a14703a 	and	r10,r5,r8
1000db2c:	1a46703a 	and	r3,r3,r9
1000db30:	3a10703a 	and	r8,r7,r8
1000db34:	280ad7fa 	srli	r5,r5,31
1000db38:	380ed7fa 	srli	r7,r7,31
1000db3c:	12400b26 	beq	r2,r9,1000db6c <__gedf2+0x5c>
1000db40:	1a401626 	beq	r3,r9,1000db9c <__gedf2+0x8c>
1000db44:	10000c1e 	bne	r2,zero,1000db78 <__gedf2+0x68>
1000db48:	5112b03a 	or	r9,r10,r4
1000db4c:	4813003a 	cmpeq	r9,r9,zero
1000db50:	4817883a 	mov	r11,r9
1000db54:	18000c1e 	bne	r3,zero,1000db88 <__gedf2+0x78>
1000db58:	4198b03a 	or	r12,r8,r6
1000db5c:	60000a1e 	bne	r12,zero,1000db88 <__gedf2+0x78>
1000db60:	48001326 	beq	r9,zero,1000dbb0 <__gedf2+0xa0>
1000db64:	0005883a 	mov	r2,zero
1000db68:	f800283a 	ret
1000db6c:	5112b03a 	or	r9,r10,r4
1000db70:	4800191e 	bne	r9,zero,1000dbd8 <__gedf2+0xc8>
1000db74:	18800926 	beq	r3,r2,1000db9c <__gedf2+0x8c>
1000db78:	18000b1e 	bne	r3,zero,1000dba8 <__gedf2+0x98>
1000db7c:	4192b03a 	or	r9,r8,r6
1000db80:	0017883a 	mov	r11,zero
1000db84:	48000a26 	beq	r9,zero,1000dbb0 <__gedf2+0xa0>
1000db88:	39c03fcc 	andi	r7,r7,255
1000db8c:	58000726 	beq	r11,zero,1000dbac <__gedf2+0x9c>
1000db90:	3800081e 	bne	r7,zero,1000dbb4 <__gedf2+0xa4>
1000db94:	00bfffc4 	movi	r2,-1
1000db98:	f800283a 	ret
1000db9c:	4192b03a 	or	r9,r8,r6
1000dba0:	48000d1e 	bne	r9,zero,1000dbd8 <__gedf2+0xc8>
1000dba4:	103fe826 	beq	r2,zero,1000db48 <__alt_data_end+0xf800db48>
1000dba8:	39c03fcc 	andi	r7,r7,255
1000dbac:	29c00326 	beq	r5,r7,1000dbbc <__gedf2+0xac>
1000dbb0:	283ff81e 	bne	r5,zero,1000db94 <__alt_data_end+0xf800db94>
1000dbb4:	00800044 	movi	r2,1
1000dbb8:	f800283a 	ret
1000dbbc:	18bffc16 	blt	r3,r2,1000dbb0 <__alt_data_end+0xf800dbb0>
1000dbc0:	10c00316 	blt	r2,r3,1000dbd0 <__gedf2+0xc0>
1000dbc4:	42bffa36 	bltu	r8,r10,1000dbb0 <__alt_data_end+0xf800dbb0>
1000dbc8:	52000526 	beq	r10,r8,1000dbe0 <__gedf2+0xd0>
1000dbcc:	523fe52e 	bgeu	r10,r8,1000db64 <__alt_data_end+0xf800db64>
1000dbd0:	283ff026 	beq	r5,zero,1000db94 <__alt_data_end+0xf800db94>
1000dbd4:	003ff706 	br	1000dbb4 <__alt_data_end+0xf800dbb4>
1000dbd8:	00bfff84 	movi	r2,-2
1000dbdc:	f800283a 	ret
1000dbe0:	313ff336 	bltu	r6,r4,1000dbb0 <__alt_data_end+0xf800dbb0>
1000dbe4:	21bfdf2e 	bgeu	r4,r6,1000db64 <__alt_data_end+0xf800db64>
1000dbe8:	283fea26 	beq	r5,zero,1000db94 <__alt_data_end+0xf800db94>
1000dbec:	003ff106 	br	1000dbb4 <__alt_data_end+0xf800dbb4>

1000dbf0 <__ledf2>:
1000dbf0:	2804d53a 	srli	r2,r5,20
1000dbf4:	3810d53a 	srli	r8,r7,20
1000dbf8:	00c00434 	movhi	r3,16
1000dbfc:	18ffffc4 	addi	r3,r3,-1
1000dc00:	0241ffc4 	movi	r9,2047
1000dc04:	1081ffcc 	andi	r2,r2,2047
1000dc08:	28d4703a 	and	r10,r5,r3
1000dc0c:	4250703a 	and	r8,r8,r9
1000dc10:	38c6703a 	and	r3,r7,r3
1000dc14:	280ad7fa 	srli	r5,r5,31
1000dc18:	380ed7fa 	srli	r7,r7,31
1000dc1c:	12400b26 	beq	r2,r9,1000dc4c <__ledf2+0x5c>
1000dc20:	42401926 	beq	r8,r9,1000dc88 <__ledf2+0x98>
1000dc24:	10000c1e 	bne	r2,zero,1000dc58 <__ledf2+0x68>
1000dc28:	5112b03a 	or	r9,r10,r4
1000dc2c:	4813003a 	cmpeq	r9,r9,zero
1000dc30:	4817883a 	mov	r11,r9
1000dc34:	40000f26 	beq	r8,zero,1000dc74 <__ledf2+0x84>
1000dc38:	39c03fcc 	andi	r7,r7,255
1000dc3c:	58001826 	beq	r11,zero,1000dca0 <__ledf2+0xb0>
1000dc40:	38000a1e 	bne	r7,zero,1000dc6c <__ledf2+0x7c>
1000dc44:	00bfffc4 	movi	r2,-1
1000dc48:	f800283a 	ret
1000dc4c:	5112b03a 	or	r9,r10,r4
1000dc50:	48000f1e 	bne	r9,zero,1000dc90 <__ledf2+0xa0>
1000dc54:	40800c26 	beq	r8,r2,1000dc88 <__ledf2+0x98>
1000dc58:	4000101e 	bne	r8,zero,1000dc9c <__ledf2+0xac>
1000dc5c:	1992b03a 	or	r9,r3,r6
1000dc60:	0017883a 	mov	r11,zero
1000dc64:	483ff41e 	bne	r9,zero,1000dc38 <__alt_data_end+0xf800dc38>
1000dc68:	283ff61e 	bne	r5,zero,1000dc44 <__alt_data_end+0xf800dc44>
1000dc6c:	00800044 	movi	r2,1
1000dc70:	f800283a 	ret
1000dc74:	1998b03a 	or	r12,r3,r6
1000dc78:	603fef1e 	bne	r12,zero,1000dc38 <__alt_data_end+0xf800dc38>
1000dc7c:	483ffa26 	beq	r9,zero,1000dc68 <__alt_data_end+0xf800dc68>
1000dc80:	0005883a 	mov	r2,zero
1000dc84:	f800283a 	ret
1000dc88:	1992b03a 	or	r9,r3,r6
1000dc8c:	48000226 	beq	r9,zero,1000dc98 <__ledf2+0xa8>
1000dc90:	00800084 	movi	r2,2
1000dc94:	f800283a 	ret
1000dc98:	103fe326 	beq	r2,zero,1000dc28 <__alt_data_end+0xf800dc28>
1000dc9c:	39c03fcc 	andi	r7,r7,255
1000dca0:	29fff11e 	bne	r5,r7,1000dc68 <__alt_data_end+0xf800dc68>
1000dca4:	40bff016 	blt	r8,r2,1000dc68 <__alt_data_end+0xf800dc68>
1000dca8:	12000316 	blt	r2,r8,1000dcb8 <__ledf2+0xc8>
1000dcac:	1abfee36 	bltu	r3,r10,1000dc68 <__alt_data_end+0xf800dc68>
1000dcb0:	50c00326 	beq	r10,r3,1000dcc0 <__ledf2+0xd0>
1000dcb4:	50fff22e 	bgeu	r10,r3,1000dc80 <__alt_data_end+0xf800dc80>
1000dcb8:	283fe226 	beq	r5,zero,1000dc44 <__alt_data_end+0xf800dc44>
1000dcbc:	003feb06 	br	1000dc6c <__alt_data_end+0xf800dc6c>
1000dcc0:	313fe936 	bltu	r6,r4,1000dc68 <__alt_data_end+0xf800dc68>
1000dcc4:	21bfee2e 	bgeu	r4,r6,1000dc80 <__alt_data_end+0xf800dc80>
1000dcc8:	283fde26 	beq	r5,zero,1000dc44 <__alt_data_end+0xf800dc44>
1000dccc:	003fe706 	br	1000dc6c <__alt_data_end+0xf800dc6c>

1000dcd0 <__muldf3>:
1000dcd0:	deffee04 	addi	sp,sp,-72
1000dcd4:	dd000c15 	stw	r20,48(sp)
1000dcd8:	2828d53a 	srli	r20,r5,20
1000dcdc:	dd400d15 	stw	r21,52(sp)
1000dce0:	282ad7fa 	srli	r21,r5,31
1000dce4:	dc000815 	stw	r16,32(sp)
1000dce8:	04000434 	movhi	r16,16
1000dcec:	ddc00f15 	stw	r23,60(sp)
1000dcf0:	dcc00b15 	stw	r19,44(sp)
1000dcf4:	dc800a15 	stw	r18,40(sp)
1000dcf8:	843fffc4 	addi	r16,r16,-1
1000dcfc:	dfc01115 	stw	ra,68(sp)
1000dd00:	df001015 	stw	fp,64(sp)
1000dd04:	dd800e15 	stw	r22,56(sp)
1000dd08:	dc400915 	stw	r17,36(sp)
1000dd0c:	a501ffcc 	andi	r20,r20,2047
1000dd10:	2025883a 	mov	r18,r4
1000dd14:	202f883a 	mov	r23,r4
1000dd18:	2c20703a 	and	r16,r5,r16
1000dd1c:	a827883a 	mov	r19,r21
1000dd20:	aa403fcc 	andi	r9,r21,255
1000dd24:	a0005926 	beq	r20,zero,1000de8c <__muldf3+0x1bc>
1000dd28:	0081ffc4 	movi	r2,2047
1000dd2c:	a0803426 	beq	r20,r2,1000de00 <__muldf3+0x130>
1000dd30:	84000434 	orhi	r16,r16,16
1000dd34:	2004d77a 	srli	r2,r4,29
1000dd38:	802090fa 	slli	r16,r16,3
1000dd3c:	202e90fa 	slli	r23,r4,3
1000dd40:	a53f0044 	addi	r20,r20,-1023
1000dd44:	80a0b03a 	or	r16,r16,r2
1000dd48:	000b883a 	mov	r5,zero
1000dd4c:	0039883a 	mov	fp,zero
1000dd50:	3806d53a 	srli	r3,r7,20
1000dd54:	382cd7fa 	srli	r22,r7,31
1000dd58:	00800434 	movhi	r2,16
1000dd5c:	10bfffc4 	addi	r2,r2,-1
1000dd60:	18c1ffcc 	andi	r3,r3,2047
1000dd64:	3025883a 	mov	r18,r6
1000dd68:	38a2703a 	and	r17,r7,r2
1000dd6c:	b2803fcc 	andi	r10,r22,255
1000dd70:	18006426 	beq	r3,zero,1000df04 <__muldf3+0x234>
1000dd74:	0081ffc4 	movi	r2,2047
1000dd78:	18805c26 	beq	r3,r2,1000deec <__muldf3+0x21c>
1000dd7c:	8c400434 	orhi	r17,r17,16
1000dd80:	3004d77a 	srli	r2,r6,29
1000dd84:	882290fa 	slli	r17,r17,3
1000dd88:	302490fa 	slli	r18,r6,3
1000dd8c:	18ff0044 	addi	r3,r3,-1023
1000dd90:	88a2b03a 	or	r17,r17,r2
1000dd94:	000f883a 	mov	r7,zero
1000dd98:	394ab03a 	or	r5,r7,r5
1000dd9c:	280a90ba 	slli	r5,r5,2
1000dda0:	00840074 	movhi	r2,4097
1000dda4:	10b77004 	addi	r2,r2,-8768
1000dda8:	288b883a 	add	r5,r5,r2
1000ddac:	28800017 	ldw	r2,0(r5)
1000ddb0:	a0c7883a 	add	r3,r20,r3
1000ddb4:	b54cf03a 	xor	r6,r22,r21
1000ddb8:	1a000044 	addi	r8,r3,1
1000ddbc:	1000683a 	jmp	r2
1000ddc0:	1000e004 	addi	zero,r2,896
1000ddc4:	1000dff0 	cmpltui	zero,r2,895
1000ddc8:	1000dff0 	cmpltui	zero,r2,895
1000ddcc:	1000dfdc 	xori	zero,r2,895
1000ddd0:	1000de1c 	xori	zero,r2,888
1000ddd4:	1000de1c 	xori	zero,r2,888
1000ddd8:	1000dfc4 	addi	zero,r2,895
1000dddc:	1000dfdc 	xori	zero,r2,895
1000dde0:	1000de1c 	xori	zero,r2,888
1000dde4:	1000dfc4 	addi	zero,r2,895
1000dde8:	1000de1c 	xori	zero,r2,888
1000ddec:	1000dfdc 	xori	zero,r2,895
1000ddf0:	1000de20 	cmpeqi	zero,r2,888
1000ddf4:	1000de20 	cmpeqi	zero,r2,888
1000ddf8:	1000de20 	cmpeqi	zero,r2,888
1000ddfc:	1000e340 	call	11000e34 <_gp+0xfe5044>
1000de00:	8104b03a 	or	r2,r16,r4
1000de04:	10006c1e 	bne	r2,zero,1000dfb8 <__muldf3+0x2e8>
1000de08:	01400204 	movi	r5,8
1000de0c:	0021883a 	mov	r16,zero
1000de10:	002f883a 	mov	r23,zero
1000de14:	07000084 	movi	fp,2
1000de18:	003fcd06 	br	1000dd50 <__alt_data_end+0xf800dd50>
1000de1c:	3013883a 	mov	r9,r6
1000de20:	00800084 	movi	r2,2
1000de24:	e080501e 	bne	fp,r2,1000df68 <__muldf3+0x298>
1000de28:	4cc0004c 	andi	r19,r9,1
1000de2c:	0101ffc4 	movi	r4,2047
1000de30:	0021883a 	mov	r16,zero
1000de34:	002f883a 	mov	r23,zero
1000de38:	2008953a 	slli	r4,r4,20
1000de3c:	98c03fcc 	andi	r3,r19,255
1000de40:	04400434 	movhi	r17,16
1000de44:	8c7fffc4 	addi	r17,r17,-1
1000de48:	180697fa 	slli	r3,r3,31
1000de4c:	8460703a 	and	r16,r16,r17
1000de50:	8120b03a 	or	r16,r16,r4
1000de54:	80c6b03a 	or	r3,r16,r3
1000de58:	b805883a 	mov	r2,r23
1000de5c:	dfc01117 	ldw	ra,68(sp)
1000de60:	df001017 	ldw	fp,64(sp)
1000de64:	ddc00f17 	ldw	r23,60(sp)
1000de68:	dd800e17 	ldw	r22,56(sp)
1000de6c:	dd400d17 	ldw	r21,52(sp)
1000de70:	dd000c17 	ldw	r20,48(sp)
1000de74:	dcc00b17 	ldw	r19,44(sp)
1000de78:	dc800a17 	ldw	r18,40(sp)
1000de7c:	dc400917 	ldw	r17,36(sp)
1000de80:	dc000817 	ldw	r16,32(sp)
1000de84:	dec01204 	addi	sp,sp,72
1000de88:	f800283a 	ret
1000de8c:	8104b03a 	or	r2,r16,r4
1000de90:	10004426 	beq	r2,zero,1000dfa4 <__muldf3+0x2d4>
1000de94:	80014b26 	beq	r16,zero,1000e3c4 <__muldf3+0x6f4>
1000de98:	8009883a 	mov	r4,r16
1000de9c:	d9800715 	stw	r6,28(sp)
1000dea0:	d9c00215 	stw	r7,8(sp)
1000dea4:	da400415 	stw	r9,16(sp)
1000dea8:	000f0080 	call	1000f008 <__clzsi2>
1000deac:	d9800717 	ldw	r6,28(sp)
1000deb0:	d9c00217 	ldw	r7,8(sp)
1000deb4:	da400417 	ldw	r9,16(sp)
1000deb8:	1007883a 	mov	r3,r2
1000debc:	01000a04 	movi	r4,40
1000dec0:	1dfffe04 	addi	r23,r3,-8
1000dec4:	20c9c83a 	sub	r4,r4,r3
1000dec8:	85e0983a 	sll	r16,r16,r23
1000decc:	9108d83a 	srl	r4,r18,r4
1000ded0:	95ee983a 	sll	r23,r18,r23
1000ded4:	2420b03a 	or	r16,r4,r16
1000ded8:	053f0344 	movi	r20,-1011
1000dedc:	a0e9c83a 	sub	r20,r20,r3
1000dee0:	000b883a 	mov	r5,zero
1000dee4:	0039883a 	mov	fp,zero
1000dee8:	003f9906 	br	1000dd50 <__alt_data_end+0xf800dd50>
1000deec:	8984b03a 	or	r2,r17,r6
1000def0:	10002a1e 	bne	r2,zero,1000df9c <__muldf3+0x2cc>
1000def4:	0023883a 	mov	r17,zero
1000def8:	0025883a 	mov	r18,zero
1000defc:	01c00084 	movi	r7,2
1000df00:	003fa506 	br	1000dd98 <__alt_data_end+0xf800dd98>
1000df04:	8984b03a 	or	r2,r17,r6
1000df08:	10002026 	beq	r2,zero,1000df8c <__muldf3+0x2bc>
1000df0c:	88011c26 	beq	r17,zero,1000e380 <__muldf3+0x6b0>
1000df10:	8809883a 	mov	r4,r17
1000df14:	d9400215 	stw	r5,8(sp)
1000df18:	d9800715 	stw	r6,28(sp)
1000df1c:	da400415 	stw	r9,16(sp)
1000df20:	da800315 	stw	r10,12(sp)
1000df24:	000f0080 	call	1000f008 <__clzsi2>
1000df28:	d9400217 	ldw	r5,8(sp)
1000df2c:	d9800717 	ldw	r6,28(sp)
1000df30:	da400417 	ldw	r9,16(sp)
1000df34:	da800317 	ldw	r10,12(sp)
1000df38:	1007883a 	mov	r3,r2
1000df3c:	01000a04 	movi	r4,40
1000df40:	1cbffe04 	addi	r18,r3,-8
1000df44:	20c9c83a 	sub	r4,r4,r3
1000df48:	8ca2983a 	sll	r17,r17,r18
1000df4c:	3108d83a 	srl	r4,r6,r4
1000df50:	34a4983a 	sll	r18,r6,r18
1000df54:	2462b03a 	or	r17,r4,r17
1000df58:	00bf0344 	movi	r2,-1011
1000df5c:	10c7c83a 	sub	r3,r2,r3
1000df60:	000f883a 	mov	r7,zero
1000df64:	003f8c06 	br	1000dd98 <__alt_data_end+0xf800dd98>
1000df68:	008000c4 	movi	r2,3
1000df6c:	e0816d26 	beq	fp,r2,1000e524 <__muldf3+0x854>
1000df70:	00800044 	movi	r2,1
1000df74:	e081321e 	bne	fp,r2,1000e440 <__muldf3+0x770>
1000df78:	48a6703a 	and	r19,r9,r2
1000df7c:	0009883a 	mov	r4,zero
1000df80:	0021883a 	mov	r16,zero
1000df84:	002f883a 	mov	r23,zero
1000df88:	003fab06 	br	1000de38 <__alt_data_end+0xf800de38>
1000df8c:	0023883a 	mov	r17,zero
1000df90:	0025883a 	mov	r18,zero
1000df94:	01c00044 	movi	r7,1
1000df98:	003f7f06 	br	1000dd98 <__alt_data_end+0xf800dd98>
1000df9c:	01c000c4 	movi	r7,3
1000dfa0:	003f7d06 	br	1000dd98 <__alt_data_end+0xf800dd98>
1000dfa4:	01400104 	movi	r5,4
1000dfa8:	0021883a 	mov	r16,zero
1000dfac:	002f883a 	mov	r23,zero
1000dfb0:	07000044 	movi	fp,1
1000dfb4:	003f6606 	br	1000dd50 <__alt_data_end+0xf800dd50>
1000dfb8:	01400304 	movi	r5,12
1000dfbc:	070000c4 	movi	fp,3
1000dfc0:	003f6306 	br	1000dd50 <__alt_data_end+0xf800dd50>
1000dfc4:	04000434 	movhi	r16,16
1000dfc8:	0027883a 	mov	r19,zero
1000dfcc:	843fffc4 	addi	r16,r16,-1
1000dfd0:	05ffffc4 	movi	r23,-1
1000dfd4:	0101ffc4 	movi	r4,2047
1000dfd8:	003f9706 	br	1000de38 <__alt_data_end+0xf800de38>
1000dfdc:	8821883a 	mov	r16,r17
1000dfe0:	902f883a 	mov	r23,r18
1000dfe4:	5013883a 	mov	r9,r10
1000dfe8:	3839883a 	mov	fp,r7
1000dfec:	003f8c06 	br	1000de20 <__alt_data_end+0xf800de20>
1000dff0:	8821883a 	mov	r16,r17
1000dff4:	902f883a 	mov	r23,r18
1000dff8:	3013883a 	mov	r9,r6
1000dffc:	3839883a 	mov	fp,r7
1000e000:	003f8706 	br	1000de20 <__alt_data_end+0xf800de20>
1000e004:	b82ad43a 	srli	r21,r23,16
1000e008:	9038d43a 	srli	fp,r18,16
1000e00c:	bdffffcc 	andi	r23,r23,65535
1000e010:	94bfffcc 	andi	r18,r18,65535
1000e014:	9009883a 	mov	r4,r18
1000e018:	b80b883a 	mov	r5,r23
1000e01c:	d8c00515 	stw	r3,20(sp)
1000e020:	d9800715 	stw	r6,28(sp)
1000e024:	da000615 	stw	r8,24(sp)
1000e028:	000c8480 	call	1000c848 <__mulsi3>
1000e02c:	9009883a 	mov	r4,r18
1000e030:	a80b883a 	mov	r5,r21
1000e034:	1029883a 	mov	r20,r2
1000e038:	000c8480 	call	1000c848 <__mulsi3>
1000e03c:	e009883a 	mov	r4,fp
1000e040:	a80b883a 	mov	r5,r21
1000e044:	102d883a 	mov	r22,r2
1000e048:	000c8480 	call	1000c848 <__mulsi3>
1000e04c:	e009883a 	mov	r4,fp
1000e050:	b80b883a 	mov	r5,r23
1000e054:	1027883a 	mov	r19,r2
1000e058:	000c8480 	call	1000c848 <__mulsi3>
1000e05c:	a008d43a 	srli	r4,r20,16
1000e060:	b085883a 	add	r2,r22,r2
1000e064:	d8c00517 	ldw	r3,20(sp)
1000e068:	110f883a 	add	r7,r2,r4
1000e06c:	d9800717 	ldw	r6,28(sp)
1000e070:	da000617 	ldw	r8,24(sp)
1000e074:	3d80022e 	bgeu	r7,r22,1000e080 <__muldf3+0x3b0>
1000e078:	00800074 	movhi	r2,1
1000e07c:	98a7883a 	add	r19,r19,r2
1000e080:	3804943a 	slli	r2,r7,16
1000e084:	380ed43a 	srli	r7,r7,16
1000e088:	882cd43a 	srli	r22,r17,16
1000e08c:	a53fffcc 	andi	r20,r20,65535
1000e090:	8c7fffcc 	andi	r17,r17,65535
1000e094:	1529883a 	add	r20,r2,r20
1000e098:	8809883a 	mov	r4,r17
1000e09c:	b80b883a 	mov	r5,r23
1000e0a0:	d8c00515 	stw	r3,20(sp)
1000e0a4:	d9800715 	stw	r6,28(sp)
1000e0a8:	da000615 	stw	r8,24(sp)
1000e0ac:	d9c00015 	stw	r7,0(sp)
1000e0b0:	dd000115 	stw	r20,4(sp)
1000e0b4:	000c8480 	call	1000c848 <__mulsi3>
1000e0b8:	a80b883a 	mov	r5,r21
1000e0bc:	8809883a 	mov	r4,r17
1000e0c0:	d8800415 	stw	r2,16(sp)
1000e0c4:	000c8480 	call	1000c848 <__mulsi3>
1000e0c8:	a80b883a 	mov	r5,r21
1000e0cc:	b009883a 	mov	r4,r22
1000e0d0:	1029883a 	mov	r20,r2
1000e0d4:	000c8480 	call	1000c848 <__mulsi3>
1000e0d8:	b009883a 	mov	r4,r22
1000e0dc:	b80b883a 	mov	r5,r23
1000e0e0:	102b883a 	mov	r21,r2
1000e0e4:	000c8480 	call	1000c848 <__mulsi3>
1000e0e8:	da400417 	ldw	r9,16(sp)
1000e0ec:	a085883a 	add	r2,r20,r2
1000e0f0:	d8c00517 	ldw	r3,20(sp)
1000e0f4:	4808d43a 	srli	r4,r9,16
1000e0f8:	d9800717 	ldw	r6,28(sp)
1000e0fc:	da000617 	ldw	r8,24(sp)
1000e100:	1109883a 	add	r4,r2,r4
1000e104:	2500022e 	bgeu	r4,r20,1000e110 <__muldf3+0x440>
1000e108:	00800074 	movhi	r2,1
1000e10c:	a8ab883a 	add	r21,r21,r2
1000e110:	200e943a 	slli	r7,r4,16
1000e114:	2004d43a 	srli	r2,r4,16
1000e118:	802ed43a 	srli	r23,r16,16
1000e11c:	843fffcc 	andi	r16,r16,65535
1000e120:	4d3fffcc 	andi	r20,r9,65535
1000e124:	9009883a 	mov	r4,r18
1000e128:	800b883a 	mov	r5,r16
1000e12c:	3d29883a 	add	r20,r7,r20
1000e130:	d8c00515 	stw	r3,20(sp)
1000e134:	d9800715 	stw	r6,28(sp)
1000e138:	da000615 	stw	r8,24(sp)
1000e13c:	a8ab883a 	add	r21,r21,r2
1000e140:	000c8480 	call	1000c848 <__mulsi3>
1000e144:	9009883a 	mov	r4,r18
1000e148:	b80b883a 	mov	r5,r23
1000e14c:	d8800315 	stw	r2,12(sp)
1000e150:	000c8480 	call	1000c848 <__mulsi3>
1000e154:	e009883a 	mov	r4,fp
1000e158:	b80b883a 	mov	r5,r23
1000e15c:	1025883a 	mov	r18,r2
1000e160:	000c8480 	call	1000c848 <__mulsi3>
1000e164:	e009883a 	mov	r4,fp
1000e168:	800b883a 	mov	r5,r16
1000e16c:	d8800215 	stw	r2,8(sp)
1000e170:	000c8480 	call	1000c848 <__mulsi3>
1000e174:	da800317 	ldw	r10,12(sp)
1000e178:	d9400017 	ldw	r5,0(sp)
1000e17c:	9085883a 	add	r2,r18,r2
1000e180:	5008d43a 	srli	r4,r10,16
1000e184:	a153883a 	add	r9,r20,r5
1000e188:	d8c00517 	ldw	r3,20(sp)
1000e18c:	1109883a 	add	r4,r2,r4
1000e190:	d9800717 	ldw	r6,28(sp)
1000e194:	da000617 	ldw	r8,24(sp)
1000e198:	dac00217 	ldw	r11,8(sp)
1000e19c:	2480022e 	bgeu	r4,r18,1000e1a8 <__muldf3+0x4d8>
1000e1a0:	00800074 	movhi	r2,1
1000e1a4:	5897883a 	add	r11,r11,r2
1000e1a8:	200e943a 	slli	r7,r4,16
1000e1ac:	2038d43a 	srli	fp,r4,16
1000e1b0:	52bfffcc 	andi	r10,r10,65535
1000e1b4:	3a8f883a 	add	r7,r7,r10
1000e1b8:	8809883a 	mov	r4,r17
1000e1bc:	800b883a 	mov	r5,r16
1000e1c0:	d8c00515 	stw	r3,20(sp)
1000e1c4:	d9800715 	stw	r6,28(sp)
1000e1c8:	d9c00215 	stw	r7,8(sp)
1000e1cc:	da000615 	stw	r8,24(sp)
1000e1d0:	da400415 	stw	r9,16(sp)
1000e1d4:	5f39883a 	add	fp,r11,fp
1000e1d8:	000c8480 	call	1000c848 <__mulsi3>
1000e1dc:	8809883a 	mov	r4,r17
1000e1e0:	b80b883a 	mov	r5,r23
1000e1e4:	1025883a 	mov	r18,r2
1000e1e8:	000c8480 	call	1000c848 <__mulsi3>
1000e1ec:	b009883a 	mov	r4,r22
1000e1f0:	b80b883a 	mov	r5,r23
1000e1f4:	d8800315 	stw	r2,12(sp)
1000e1f8:	000c8480 	call	1000c848 <__mulsi3>
1000e1fc:	b009883a 	mov	r4,r22
1000e200:	800b883a 	mov	r5,r16
1000e204:	1023883a 	mov	r17,r2
1000e208:	000c8480 	call	1000c848 <__mulsi3>
1000e20c:	da800317 	ldw	r10,12(sp)
1000e210:	9008d43a 	srli	r4,r18,16
1000e214:	d8c00517 	ldw	r3,20(sp)
1000e218:	5085883a 	add	r2,r10,r2
1000e21c:	1109883a 	add	r4,r2,r4
1000e220:	d9800717 	ldw	r6,28(sp)
1000e224:	d9c00217 	ldw	r7,8(sp)
1000e228:	da000617 	ldw	r8,24(sp)
1000e22c:	da400417 	ldw	r9,16(sp)
1000e230:	2280022e 	bgeu	r4,r10,1000e23c <__muldf3+0x56c>
1000e234:	00800074 	movhi	r2,1
1000e238:	88a3883a 	add	r17,r17,r2
1000e23c:	2004943a 	slli	r2,r4,16
1000e240:	94bfffcc 	andi	r18,r18,65535
1000e244:	4ce7883a 	add	r19,r9,r19
1000e248:	14a5883a 	add	r18,r2,r18
1000e24c:	9d29803a 	cmpltu	r20,r19,r20
1000e250:	9565883a 	add	r18,r18,r21
1000e254:	9505883a 	add	r2,r18,r20
1000e258:	99e7883a 	add	r19,r19,r7
1000e25c:	99cf803a 	cmpltu	r7,r19,r7
1000e260:	e08b883a 	add	r5,fp,r2
1000e264:	2008d43a 	srli	r4,r4,16
1000e268:	29ef883a 	add	r23,r5,r7
1000e26c:	1529803a 	cmpltu	r20,r2,r20
1000e270:	956b803a 	cmpltu	r21,r18,r21
1000e274:	b9cf803a 	cmpltu	r7,r23,r7
1000e278:	a564b03a 	or	r18,r20,r21
1000e27c:	2f39803a 	cmpltu	fp,r5,fp
1000e280:	9125883a 	add	r18,r18,r4
1000e284:	3f38b03a 	or	fp,r7,fp
1000e288:	9725883a 	add	r18,r18,fp
1000e28c:	9804927a 	slli	r2,r19,9
1000e290:	9463883a 	add	r17,r18,r17
1000e294:	d9000117 	ldw	r4,4(sp)
1000e298:	b820d5fa 	srli	r16,r23,23
1000e29c:	8822927a 	slli	r17,r17,9
1000e2a0:	9826d5fa 	srli	r19,r19,23
1000e2a4:	1104b03a 	or	r2,r2,r4
1000e2a8:	b82e927a 	slli	r23,r23,9
1000e2ac:	1004c03a 	cmpne	r2,r2,zero
1000e2b0:	8c20b03a 	or	r16,r17,r16
1000e2b4:	14e6b03a 	or	r19,r2,r19
1000e2b8:	8080402c 	andhi	r2,r16,256
1000e2bc:	9deeb03a 	or	r23,r19,r23
1000e2c0:	10000726 	beq	r2,zero,1000e2e0 <__muldf3+0x610>
1000e2c4:	b804d07a 	srli	r2,r23,1
1000e2c8:	800697fa 	slli	r3,r16,31
1000e2cc:	bdc0004c 	andi	r23,r23,1
1000e2d0:	8020d07a 	srli	r16,r16,1
1000e2d4:	b8aeb03a 	or	r23,r23,r2
1000e2d8:	b8eeb03a 	or	r23,r23,r3
1000e2dc:	4007883a 	mov	r3,r8
1000e2e0:	1900ffc4 	addi	r4,r3,1023
1000e2e4:	01004d0e 	bge	zero,r4,1000e41c <__muldf3+0x74c>
1000e2e8:	b88001cc 	andi	r2,r23,7
1000e2ec:	10000726 	beq	r2,zero,1000e30c <__muldf3+0x63c>
1000e2f0:	b94003cc 	andi	r5,r23,15
1000e2f4:	00800104 	movi	r2,4
1000e2f8:	28800426 	beq	r5,r2,1000e30c <__muldf3+0x63c>
1000e2fc:	b885883a 	add	r2,r23,r2
1000e300:	15ef803a 	cmpltu	r23,r2,r23
1000e304:	85e1883a 	add	r16,r16,r23
1000e308:	102f883a 	mov	r23,r2
1000e30c:	8080402c 	andhi	r2,r16,256
1000e310:	10000426 	beq	r2,zero,1000e324 <__muldf3+0x654>
1000e314:	00bfc034 	movhi	r2,65280
1000e318:	10bfffc4 	addi	r2,r2,-1
1000e31c:	19010004 	addi	r4,r3,1024
1000e320:	80a0703a 	and	r16,r16,r2
1000e324:	0081ff84 	movi	r2,2046
1000e328:	1100340e 	bge	r2,r4,1000e3fc <__muldf3+0x72c>
1000e32c:	34c0004c 	andi	r19,r6,1
1000e330:	0101ffc4 	movi	r4,2047
1000e334:	0021883a 	mov	r16,zero
1000e338:	002f883a 	mov	r23,zero
1000e33c:	003ebe06 	br	1000de38 <__alt_data_end+0xf800de38>
1000e340:	8080022c 	andhi	r2,r16,8
1000e344:	10000926 	beq	r2,zero,1000e36c <__muldf3+0x69c>
1000e348:	8880022c 	andhi	r2,r17,8
1000e34c:	1000071e 	bne	r2,zero,1000e36c <__muldf3+0x69c>
1000e350:	00800434 	movhi	r2,16
1000e354:	8c000234 	orhi	r16,r17,8
1000e358:	10bfffc4 	addi	r2,r2,-1
1000e35c:	b027883a 	mov	r19,r22
1000e360:	80a0703a 	and	r16,r16,r2
1000e364:	902f883a 	mov	r23,r18
1000e368:	003f1a06 	br	1000dfd4 <__alt_data_end+0xf800dfd4>
1000e36c:	00800434 	movhi	r2,16
1000e370:	84000234 	orhi	r16,r16,8
1000e374:	10bfffc4 	addi	r2,r2,-1
1000e378:	80a0703a 	and	r16,r16,r2
1000e37c:	003f1506 	br	1000dfd4 <__alt_data_end+0xf800dfd4>
1000e380:	3009883a 	mov	r4,r6
1000e384:	d9400215 	stw	r5,8(sp)
1000e388:	d9800715 	stw	r6,28(sp)
1000e38c:	da400415 	stw	r9,16(sp)
1000e390:	da800315 	stw	r10,12(sp)
1000e394:	000f0080 	call	1000f008 <__clzsi2>
1000e398:	10c00804 	addi	r3,r2,32
1000e39c:	010009c4 	movi	r4,39
1000e3a0:	d9400217 	ldw	r5,8(sp)
1000e3a4:	d9800717 	ldw	r6,28(sp)
1000e3a8:	da400417 	ldw	r9,16(sp)
1000e3ac:	da800317 	ldw	r10,12(sp)
1000e3b0:	20fee20e 	bge	r4,r3,1000df3c <__alt_data_end+0xf800df3c>
1000e3b4:	147ffe04 	addi	r17,r2,-8
1000e3b8:	9462983a 	sll	r17,r18,r17
1000e3bc:	0025883a 	mov	r18,zero
1000e3c0:	003ee506 	br	1000df58 <__alt_data_end+0xf800df58>
1000e3c4:	d9800715 	stw	r6,28(sp)
1000e3c8:	d9c00215 	stw	r7,8(sp)
1000e3cc:	da400415 	stw	r9,16(sp)
1000e3d0:	000f0080 	call	1000f008 <__clzsi2>
1000e3d4:	10c00804 	addi	r3,r2,32
1000e3d8:	010009c4 	movi	r4,39
1000e3dc:	d9800717 	ldw	r6,28(sp)
1000e3e0:	d9c00217 	ldw	r7,8(sp)
1000e3e4:	da400417 	ldw	r9,16(sp)
1000e3e8:	20feb40e 	bge	r4,r3,1000debc <__alt_data_end+0xf800debc>
1000e3ec:	143ffe04 	addi	r16,r2,-8
1000e3f0:	9420983a 	sll	r16,r18,r16
1000e3f4:	002f883a 	mov	r23,zero
1000e3f8:	003eb706 	br	1000ded8 <__alt_data_end+0xf800ded8>
1000e3fc:	8004977a 	slli	r2,r16,29
1000e400:	b82ed0fa 	srli	r23,r23,3
1000e404:	8020927a 	slli	r16,r16,9
1000e408:	2101ffcc 	andi	r4,r4,2047
1000e40c:	15eeb03a 	or	r23,r2,r23
1000e410:	8020d33a 	srli	r16,r16,12
1000e414:	34c0004c 	andi	r19,r6,1
1000e418:	003e8706 	br	1000de38 <__alt_data_end+0xf800de38>
1000e41c:	00bf0084 	movi	r2,-1022
1000e420:	10c5c83a 	sub	r2,r2,r3
1000e424:	01000e04 	movi	r4,56
1000e428:	2080080e 	bge	r4,r2,1000e44c <__muldf3+0x77c>
1000e42c:	34c0004c 	andi	r19,r6,1
1000e430:	0009883a 	mov	r4,zero
1000e434:	0021883a 	mov	r16,zero
1000e438:	002f883a 	mov	r23,zero
1000e43c:	003e7e06 	br	1000de38 <__alt_data_end+0xf800de38>
1000e440:	4007883a 	mov	r3,r8
1000e444:	480d883a 	mov	r6,r9
1000e448:	003fa506 	br	1000e2e0 <__alt_data_end+0xf800e2e0>
1000e44c:	010007c4 	movi	r4,31
1000e450:	20801816 	blt	r4,r2,1000e4b4 <__muldf3+0x7e4>
1000e454:	18c10784 	addi	r3,r3,1054
1000e458:	80c8983a 	sll	r4,r16,r3
1000e45c:	b88ad83a 	srl	r5,r23,r2
1000e460:	b8c6983a 	sll	r3,r23,r3
1000e464:	80a0d83a 	srl	r16,r16,r2
1000e468:	2908b03a 	or	r4,r5,r4
1000e46c:	1804c03a 	cmpne	r2,r3,zero
1000e470:	2088b03a 	or	r4,r4,r2
1000e474:	208001cc 	andi	r2,r4,7
1000e478:	10000726 	beq	r2,zero,1000e498 <__muldf3+0x7c8>
1000e47c:	20c003cc 	andi	r3,r4,15
1000e480:	00800104 	movi	r2,4
1000e484:	18800426 	beq	r3,r2,1000e498 <__muldf3+0x7c8>
1000e488:	20c00104 	addi	r3,r4,4
1000e48c:	1905803a 	cmpltu	r2,r3,r4
1000e490:	80a1883a 	add	r16,r16,r2
1000e494:	1809883a 	mov	r4,r3
1000e498:	8080202c 	andhi	r2,r16,128
1000e49c:	10001b26 	beq	r2,zero,1000e50c <__muldf3+0x83c>
1000e4a0:	34c0004c 	andi	r19,r6,1
1000e4a4:	01000044 	movi	r4,1
1000e4a8:	0021883a 	mov	r16,zero
1000e4ac:	002f883a 	mov	r23,zero
1000e4b0:	003e6106 	br	1000de38 <__alt_data_end+0xf800de38>
1000e4b4:	013ef884 	movi	r4,-1054
1000e4b8:	20c9c83a 	sub	r4,r4,r3
1000e4bc:	01400804 	movi	r5,32
1000e4c0:	8108d83a 	srl	r4,r16,r4
1000e4c4:	11401526 	beq	r2,r5,1000e51c <__muldf3+0x84c>
1000e4c8:	18c10f84 	addi	r3,r3,1086
1000e4cc:	80e0983a 	sll	r16,r16,r3
1000e4d0:	85eeb03a 	or	r23,r16,r23
1000e4d4:	b804c03a 	cmpne	r2,r23,zero
1000e4d8:	1108b03a 	or	r4,r2,r4
1000e4dc:	20c001cc 	andi	r3,r4,7
1000e4e0:	1800061e 	bne	r3,zero,1000e4fc <__muldf3+0x82c>
1000e4e4:	0021883a 	mov	r16,zero
1000e4e8:	202ed0fa 	srli	r23,r4,3
1000e4ec:	34c0004c 	andi	r19,r6,1
1000e4f0:	0009883a 	mov	r4,zero
1000e4f4:	b8eeb03a 	or	r23,r23,r3
1000e4f8:	003e4f06 	br	1000de38 <__alt_data_end+0xf800de38>
1000e4fc:	20c003cc 	andi	r3,r4,15
1000e500:	00800104 	movi	r2,4
1000e504:	0021883a 	mov	r16,zero
1000e508:	18bfdf1e 	bne	r3,r2,1000e488 <__alt_data_end+0xf800e488>
1000e50c:	8004927a 	slli	r2,r16,9
1000e510:	8006977a 	slli	r3,r16,29
1000e514:	1020d33a 	srli	r16,r2,12
1000e518:	003ff306 	br	1000e4e8 <__alt_data_end+0xf800e4e8>
1000e51c:	0021883a 	mov	r16,zero
1000e520:	003feb06 	br	1000e4d0 <__alt_data_end+0xf800e4d0>
1000e524:	00800434 	movhi	r2,16
1000e528:	84000234 	orhi	r16,r16,8
1000e52c:	10bfffc4 	addi	r2,r2,-1
1000e530:	4cc0004c 	andi	r19,r9,1
1000e534:	80a0703a 	and	r16,r16,r2
1000e538:	003ea606 	br	1000dfd4 <__alt_data_end+0xf800dfd4>

1000e53c <__subdf3>:
1000e53c:	00c00434 	movhi	r3,16
1000e540:	18ffffc4 	addi	r3,r3,-1
1000e544:	defffb04 	addi	sp,sp,-20
1000e548:	28d2703a 	and	r9,r5,r3
1000e54c:	3814d53a 	srli	r10,r7,20
1000e550:	38c6703a 	and	r3,r7,r3
1000e554:	3004d77a 	srli	r2,r6,29
1000e558:	dc800215 	stw	r18,8(sp)
1000e55c:	dc000015 	stw	r16,0(sp)
1000e560:	2824d7fa 	srli	r18,r5,31
1000e564:	2820d53a 	srli	r16,r5,20
1000e568:	481290fa 	slli	r9,r9,3
1000e56c:	200ad77a 	srli	r5,r4,29
1000e570:	180690fa 	slli	r3,r3,3
1000e574:	dc400115 	stw	r17,4(sp)
1000e578:	dfc00415 	stw	ra,16(sp)
1000e57c:	202290fa 	slli	r17,r4,3
1000e580:	dcc00315 	stw	r19,12(sp)
1000e584:	5281ffcc 	andi	r10,r10,2047
1000e588:	0101ffc4 	movi	r4,2047
1000e58c:	9011883a 	mov	r8,r18
1000e590:	8401ffcc 	andi	r16,r16,2047
1000e594:	94803fcc 	andi	r18,r18,255
1000e598:	494ab03a 	or	r5,r9,r5
1000e59c:	380ed7fa 	srli	r7,r7,31
1000e5a0:	1886b03a 	or	r3,r3,r2
1000e5a4:	300c90fa 	slli	r6,r6,3
1000e5a8:	51009026 	beq	r10,r4,1000e7ec <__subdf3+0x2b0>
1000e5ac:	39c0005c 	xori	r7,r7,1
1000e5b0:	8285c83a 	sub	r2,r16,r10
1000e5b4:	91c06f26 	beq	r18,r7,1000e774 <__subdf3+0x238>
1000e5b8:	0080b10e 	bge	zero,r2,1000e880 <__subdf3+0x344>
1000e5bc:	50002a1e 	bne	r10,zero,1000e668 <__subdf3+0x12c>
1000e5c0:	1988b03a 	or	r4,r3,r6
1000e5c4:	2000941e 	bne	r4,zero,1000e818 <__subdf3+0x2dc>
1000e5c8:	888001cc 	andi	r2,r17,7
1000e5cc:	10005b26 	beq	r2,zero,1000e73c <__subdf3+0x200>
1000e5d0:	88c003cc 	andi	r3,r17,15
1000e5d4:	00800104 	movi	r2,4
1000e5d8:	18805826 	beq	r3,r2,1000e73c <__subdf3+0x200>
1000e5dc:	88c00104 	addi	r3,r17,4
1000e5e0:	1c63803a 	cmpltu	r17,r3,r17
1000e5e4:	2c4b883a 	add	r5,r5,r17
1000e5e8:	2880202c 	andhi	r2,r5,128
1000e5ec:	9200004c 	andi	r8,r18,1
1000e5f0:	1823883a 	mov	r17,r3
1000e5f4:	10005426 	beq	r2,zero,1000e748 <__subdf3+0x20c>
1000e5f8:	84000044 	addi	r16,r16,1
1000e5fc:	0081ffc4 	movi	r2,2047
1000e600:	8080bf26 	beq	r16,r2,1000e900 <__subdf3+0x3c4>
1000e604:	013fe034 	movhi	r4,65408
1000e608:	213fffc4 	addi	r4,r4,-1
1000e60c:	290a703a 	and	r5,r5,r4
1000e610:	2804977a 	slli	r2,r5,29
1000e614:	280a927a 	slli	r5,r5,9
1000e618:	8822d0fa 	srli	r17,r17,3
1000e61c:	8401ffcc 	andi	r16,r16,2047
1000e620:	2808d33a 	srli	r4,r5,12
1000e624:	1444b03a 	or	r2,r2,r17
1000e628:	8401ffcc 	andi	r16,r16,2047
1000e62c:	800a953a 	slli	r5,r16,20
1000e630:	40c03fcc 	andi	r3,r8,255
1000e634:	04000434 	movhi	r16,16
1000e638:	180697fa 	slli	r3,r3,31
1000e63c:	843fffc4 	addi	r16,r16,-1
1000e640:	2420703a 	and	r16,r4,r16
1000e644:	8160b03a 	or	r16,r16,r5
1000e648:	80c6b03a 	or	r3,r16,r3
1000e64c:	dfc00417 	ldw	ra,16(sp)
1000e650:	dcc00317 	ldw	r19,12(sp)
1000e654:	dc800217 	ldw	r18,8(sp)
1000e658:	dc400117 	ldw	r17,4(sp)
1000e65c:	dc000017 	ldw	r16,0(sp)
1000e660:	dec00504 	addi	sp,sp,20
1000e664:	f800283a 	ret
1000e668:	0101ffc4 	movi	r4,2047
1000e66c:	813fd626 	beq	r16,r4,1000e5c8 <__alt_data_end+0xf800e5c8>
1000e670:	18c02034 	orhi	r3,r3,128
1000e674:	01000e04 	movi	r4,56
1000e678:	2080a416 	blt	r4,r2,1000e90c <__subdf3+0x3d0>
1000e67c:	010007c4 	movi	r4,31
1000e680:	2080c716 	blt	r4,r2,1000e9a0 <__subdf3+0x464>
1000e684:	01000804 	movi	r4,32
1000e688:	2089c83a 	sub	r4,r4,r2
1000e68c:	1910983a 	sll	r8,r3,r4
1000e690:	308ed83a 	srl	r7,r6,r2
1000e694:	3108983a 	sll	r4,r6,r4
1000e698:	1884d83a 	srl	r2,r3,r2
1000e69c:	41ccb03a 	or	r6,r8,r7
1000e6a0:	2008c03a 	cmpne	r4,r4,zero
1000e6a4:	310cb03a 	or	r6,r6,r4
1000e6a8:	898dc83a 	sub	r6,r17,r6
1000e6ac:	89a3803a 	cmpltu	r17,r17,r6
1000e6b0:	288bc83a 	sub	r5,r5,r2
1000e6b4:	2c4bc83a 	sub	r5,r5,r17
1000e6b8:	3023883a 	mov	r17,r6
1000e6bc:	2880202c 	andhi	r2,r5,128
1000e6c0:	10006b26 	beq	r2,zero,1000e870 <__subdf3+0x334>
1000e6c4:	04c02034 	movhi	r19,128
1000e6c8:	9cffffc4 	addi	r19,r19,-1
1000e6cc:	2ce6703a 	and	r19,r5,r19
1000e6d0:	98007c26 	beq	r19,zero,1000e8c4 <__subdf3+0x388>
1000e6d4:	9809883a 	mov	r4,r19
1000e6d8:	000f0080 	call	1000f008 <__clzsi2>
1000e6dc:	10fffe04 	addi	r3,r2,-8
1000e6e0:	010007c4 	movi	r4,31
1000e6e4:	20c07d16 	blt	r4,r3,1000e8dc <__subdf3+0x3a0>
1000e6e8:	01400a04 	movi	r5,40
1000e6ec:	2885c83a 	sub	r2,r5,r2
1000e6f0:	888ad83a 	srl	r5,r17,r2
1000e6f4:	98e6983a 	sll	r19,r19,r3
1000e6f8:	88e2983a 	sll	r17,r17,r3
1000e6fc:	2ce6b03a 	or	r19,r5,r19
1000e700:	1c007a16 	blt	r3,r16,1000e8ec <__subdf3+0x3b0>
1000e704:	1c21c83a 	sub	r16,r3,r16
1000e708:	81400044 	addi	r5,r16,1
1000e70c:	00c007c4 	movi	r3,31
1000e710:	19409616 	blt	r3,r5,1000e96c <__subdf3+0x430>
1000e714:	1c21c83a 	sub	r16,r3,r16
1000e718:	8c08983a 	sll	r4,r17,r16
1000e71c:	8946d83a 	srl	r3,r17,r5
1000e720:	9c20983a 	sll	r16,r19,r16
1000e724:	2008c03a 	cmpne	r4,r4,zero
1000e728:	994ad83a 	srl	r5,r19,r5
1000e72c:	1c06b03a 	or	r3,r3,r16
1000e730:	1922b03a 	or	r17,r3,r4
1000e734:	0021883a 	mov	r16,zero
1000e738:	003fa306 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000e73c:	2880202c 	andhi	r2,r5,128
1000e740:	9200004c 	andi	r8,r18,1
1000e744:	103fac1e 	bne	r2,zero,1000e5f8 <__alt_data_end+0xf800e5f8>
1000e748:	2804977a 	slli	r2,r5,29
1000e74c:	8822d0fa 	srli	r17,r17,3
1000e750:	00c1ffc4 	movi	r3,2047
1000e754:	280ad0fa 	srli	r5,r5,3
1000e758:	1444b03a 	or	r2,r2,r17
1000e75c:	80c02726 	beq	r16,r3,1000e7fc <__subdf3+0x2c0>
1000e760:	01000434 	movhi	r4,16
1000e764:	213fffc4 	addi	r4,r4,-1
1000e768:	80e0703a 	and	r16,r16,r3
1000e76c:	2908703a 	and	r4,r5,r4
1000e770:	003fad06 	br	1000e628 <__alt_data_end+0xf800e628>
1000e774:	0080690e 	bge	zero,r2,1000e91c <__subdf3+0x3e0>
1000e778:	50002f26 	beq	r10,zero,1000e838 <__subdf3+0x2fc>
1000e77c:	0101ffc4 	movi	r4,2047
1000e780:	813f9126 	beq	r16,r4,1000e5c8 <__alt_data_end+0xf800e5c8>
1000e784:	18c02034 	orhi	r3,r3,128
1000e788:	01000e04 	movi	r4,56
1000e78c:	2080b00e 	bge	r4,r2,1000ea50 <__subdf3+0x514>
1000e790:	198cb03a 	or	r6,r3,r6
1000e794:	300ec03a 	cmpne	r7,r6,zero
1000e798:	0005883a 	mov	r2,zero
1000e79c:	3c4f883a 	add	r7,r7,r17
1000e7a0:	3c63803a 	cmpltu	r17,r7,r17
1000e7a4:	114b883a 	add	r5,r2,r5
1000e7a8:	2c4b883a 	add	r5,r5,r17
1000e7ac:	3823883a 	mov	r17,r7
1000e7b0:	2880202c 	andhi	r2,r5,128
1000e7b4:	10002e26 	beq	r2,zero,1000e870 <__subdf3+0x334>
1000e7b8:	84000044 	addi	r16,r16,1
1000e7bc:	0081ffc4 	movi	r2,2047
1000e7c0:	8080de26 	beq	r16,r2,1000eb3c <__subdf3+0x600>
1000e7c4:	00bfe034 	movhi	r2,65408
1000e7c8:	10bfffc4 	addi	r2,r2,-1
1000e7cc:	288a703a 	and	r5,r5,r2
1000e7d0:	880cd07a 	srli	r6,r17,1
1000e7d4:	280897fa 	slli	r4,r5,31
1000e7d8:	88c0004c 	andi	r3,r17,1
1000e7dc:	30e2b03a 	or	r17,r6,r3
1000e7e0:	280ad07a 	srli	r5,r5,1
1000e7e4:	8922b03a 	or	r17,r17,r4
1000e7e8:	003f7706 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000e7ec:	1984b03a 	or	r2,r3,r6
1000e7f0:	103f6e26 	beq	r2,zero,1000e5ac <__alt_data_end+0xf800e5ac>
1000e7f4:	39c03fcc 	andi	r7,r7,255
1000e7f8:	003f6d06 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000e7fc:	1146b03a 	or	r3,r2,r5
1000e800:	18003f26 	beq	r3,zero,1000e900 <__subdf3+0x3c4>
1000e804:	00c00434 	movhi	r3,16
1000e808:	29000234 	orhi	r4,r5,8
1000e80c:	18ffffc4 	addi	r3,r3,-1
1000e810:	20c8703a 	and	r4,r4,r3
1000e814:	003f8406 	br	1000e628 <__alt_data_end+0xf800e628>
1000e818:	10bfffc4 	addi	r2,r2,-1
1000e81c:	1000501e 	bne	r2,zero,1000e960 <__subdf3+0x424>
1000e820:	898fc83a 	sub	r7,r17,r6
1000e824:	89e3803a 	cmpltu	r17,r17,r7
1000e828:	28cbc83a 	sub	r5,r5,r3
1000e82c:	2c4bc83a 	sub	r5,r5,r17
1000e830:	3823883a 	mov	r17,r7
1000e834:	003fa106 	br	1000e6bc <__alt_data_end+0xf800e6bc>
1000e838:	1988b03a 	or	r4,r3,r6
1000e83c:	203f6226 	beq	r4,zero,1000e5c8 <__alt_data_end+0xf800e5c8>
1000e840:	10bfffc4 	addi	r2,r2,-1
1000e844:	10009b1e 	bne	r2,zero,1000eab4 <__subdf3+0x578>
1000e848:	344d883a 	add	r6,r6,r17
1000e84c:	3463803a 	cmpltu	r17,r6,r17
1000e850:	194b883a 	add	r5,r3,r5
1000e854:	2c4b883a 	add	r5,r5,r17
1000e858:	3023883a 	mov	r17,r6
1000e85c:	003fd406 	br	1000e7b0 <__alt_data_end+0xf800e7b0>
1000e860:	1106b03a 	or	r3,r2,r4
1000e864:	1800b426 	beq	r3,zero,1000eb38 <__subdf3+0x5fc>
1000e868:	100b883a 	mov	r5,r2
1000e86c:	2023883a 	mov	r17,r4
1000e870:	888001cc 	andi	r2,r17,7
1000e874:	103f561e 	bne	r2,zero,1000e5d0 <__alt_data_end+0xf800e5d0>
1000e878:	9200004c 	andi	r8,r18,1
1000e87c:	003fb206 	br	1000e748 <__alt_data_end+0xf800e748>
1000e880:	1000531e 	bne	r2,zero,1000e9d0 <__subdf3+0x494>
1000e884:	80800044 	addi	r2,r16,1
1000e888:	1081ffcc 	andi	r2,r2,2047
1000e88c:	01000044 	movi	r4,1
1000e890:	2080a00e 	bge	r4,r2,1000eb14 <__subdf3+0x5d8>
1000e894:	8985c83a 	sub	r2,r17,r6
1000e898:	8889803a 	cmpltu	r4,r17,r2
1000e89c:	28e7c83a 	sub	r19,r5,r3
1000e8a0:	9927c83a 	sub	r19,r19,r4
1000e8a4:	9900202c 	andhi	r4,r19,128
1000e8a8:	20006226 	beq	r4,zero,1000ea34 <__subdf3+0x4f8>
1000e8ac:	3463c83a 	sub	r17,r6,r17
1000e8b0:	194bc83a 	sub	r5,r3,r5
1000e8b4:	344d803a 	cmpltu	r6,r6,r17
1000e8b8:	29a7c83a 	sub	r19,r5,r6
1000e8bc:	3825883a 	mov	r18,r7
1000e8c0:	983f841e 	bne	r19,zero,1000e6d4 <__alt_data_end+0xf800e6d4>
1000e8c4:	8809883a 	mov	r4,r17
1000e8c8:	000f0080 	call	1000f008 <__clzsi2>
1000e8cc:	10800804 	addi	r2,r2,32
1000e8d0:	10fffe04 	addi	r3,r2,-8
1000e8d4:	010007c4 	movi	r4,31
1000e8d8:	20ff830e 	bge	r4,r3,1000e6e8 <__alt_data_end+0xf800e6e8>
1000e8dc:	14fff604 	addi	r19,r2,-40
1000e8e0:	8ce6983a 	sll	r19,r17,r19
1000e8e4:	0023883a 	mov	r17,zero
1000e8e8:	1c3f860e 	bge	r3,r16,1000e704 <__alt_data_end+0xf800e704>
1000e8ec:	017fe034 	movhi	r5,65408
1000e8f0:	297fffc4 	addi	r5,r5,-1
1000e8f4:	80e1c83a 	sub	r16,r16,r3
1000e8f8:	994a703a 	and	r5,r19,r5
1000e8fc:	003f3206 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000e900:	0009883a 	mov	r4,zero
1000e904:	0005883a 	mov	r2,zero
1000e908:	003f4706 	br	1000e628 <__alt_data_end+0xf800e628>
1000e90c:	198cb03a 	or	r6,r3,r6
1000e910:	300cc03a 	cmpne	r6,r6,zero
1000e914:	0005883a 	mov	r2,zero
1000e918:	003f6306 	br	1000e6a8 <__alt_data_end+0xf800e6a8>
1000e91c:	10009d1e 	bne	r2,zero,1000eb94 <__subdf3+0x658>
1000e920:	81c00044 	addi	r7,r16,1
1000e924:	3881ffcc 	andi	r2,r7,2047
1000e928:	02400044 	movi	r9,1
1000e92c:	4880680e 	bge	r9,r2,1000ead0 <__subdf3+0x594>
1000e930:	0081ffc4 	movi	r2,2047
1000e934:	3880ae26 	beq	r7,r2,1000ebf0 <__subdf3+0x6b4>
1000e938:	344d883a 	add	r6,r6,r17
1000e93c:	3463803a 	cmpltu	r17,r6,r17
1000e940:	194b883a 	add	r5,r3,r5
1000e944:	2c4b883a 	add	r5,r5,r17
1000e948:	282297fa 	slli	r17,r5,31
1000e94c:	300cd07a 	srli	r6,r6,1
1000e950:	280ad07a 	srli	r5,r5,1
1000e954:	3821883a 	mov	r16,r7
1000e958:	89a2b03a 	or	r17,r17,r6
1000e95c:	003f1a06 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000e960:	0101ffc4 	movi	r4,2047
1000e964:	813f431e 	bne	r16,r4,1000e674 <__alt_data_end+0xf800e674>
1000e968:	003f1706 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000e96c:	80bff844 	addi	r2,r16,-31
1000e970:	00c00804 	movi	r3,32
1000e974:	9884d83a 	srl	r2,r19,r2
1000e978:	28c05126 	beq	r5,r3,1000eac0 <__subdf3+0x584>
1000e97c:	00c00fc4 	movi	r3,63
1000e980:	1c21c83a 	sub	r16,r3,r16
1000e984:	9c26983a 	sll	r19,r19,r16
1000e988:	9c62b03a 	or	r17,r19,r17
1000e98c:	8822c03a 	cmpne	r17,r17,zero
1000e990:	88a2b03a 	or	r17,r17,r2
1000e994:	000b883a 	mov	r5,zero
1000e998:	0021883a 	mov	r16,zero
1000e99c:	003fb406 	br	1000e870 <__alt_data_end+0xf800e870>
1000e9a0:	113ff804 	addi	r4,r2,-32
1000e9a4:	01c00804 	movi	r7,32
1000e9a8:	1908d83a 	srl	r4,r3,r4
1000e9ac:	11c04626 	beq	r2,r7,1000eac8 <__subdf3+0x58c>
1000e9b0:	01c01004 	movi	r7,64
1000e9b4:	3885c83a 	sub	r2,r7,r2
1000e9b8:	1884983a 	sll	r2,r3,r2
1000e9bc:	118cb03a 	or	r6,r2,r6
1000e9c0:	300cc03a 	cmpne	r6,r6,zero
1000e9c4:	310cb03a 	or	r6,r6,r4
1000e9c8:	0005883a 	mov	r2,zero
1000e9cc:	003f3606 	br	1000e6a8 <__alt_data_end+0xf800e6a8>
1000e9d0:	80002b26 	beq	r16,zero,1000ea80 <__subdf3+0x544>
1000e9d4:	0101ffc4 	movi	r4,2047
1000e9d8:	51006926 	beq	r10,r4,1000eb80 <__subdf3+0x644>
1000e9dc:	0085c83a 	sub	r2,zero,r2
1000e9e0:	29402034 	orhi	r5,r5,128
1000e9e4:	01000e04 	movi	r4,56
1000e9e8:	20807d16 	blt	r4,r2,1000ebe0 <__subdf3+0x6a4>
1000e9ec:	010007c4 	movi	r4,31
1000e9f0:	2080d916 	blt	r4,r2,1000ed58 <__subdf3+0x81c>
1000e9f4:	01000804 	movi	r4,32
1000e9f8:	2089c83a 	sub	r4,r4,r2
1000e9fc:	2912983a 	sll	r9,r5,r4
1000ea00:	8890d83a 	srl	r8,r17,r2
1000ea04:	8908983a 	sll	r4,r17,r4
1000ea08:	2884d83a 	srl	r2,r5,r2
1000ea0c:	4a22b03a 	or	r17,r9,r8
1000ea10:	2008c03a 	cmpne	r4,r4,zero
1000ea14:	8922b03a 	or	r17,r17,r4
1000ea18:	3463c83a 	sub	r17,r6,r17
1000ea1c:	1885c83a 	sub	r2,r3,r2
1000ea20:	344d803a 	cmpltu	r6,r6,r17
1000ea24:	118bc83a 	sub	r5,r2,r6
1000ea28:	5021883a 	mov	r16,r10
1000ea2c:	3825883a 	mov	r18,r7
1000ea30:	003f2206 	br	1000e6bc <__alt_data_end+0xf800e6bc>
1000ea34:	9886b03a 	or	r3,r19,r2
1000ea38:	18001c1e 	bne	r3,zero,1000eaac <__subdf3+0x570>
1000ea3c:	0011883a 	mov	r8,zero
1000ea40:	000b883a 	mov	r5,zero
1000ea44:	0023883a 	mov	r17,zero
1000ea48:	0021883a 	mov	r16,zero
1000ea4c:	003f3e06 	br	1000e748 <__alt_data_end+0xf800e748>
1000ea50:	010007c4 	movi	r4,31
1000ea54:	20803c16 	blt	r4,r2,1000eb48 <__subdf3+0x60c>
1000ea58:	01000804 	movi	r4,32
1000ea5c:	2089c83a 	sub	r4,r4,r2
1000ea60:	1912983a 	sll	r9,r3,r4
1000ea64:	308ed83a 	srl	r7,r6,r2
1000ea68:	3108983a 	sll	r4,r6,r4
1000ea6c:	1884d83a 	srl	r2,r3,r2
1000ea70:	49ceb03a 	or	r7,r9,r7
1000ea74:	2008c03a 	cmpne	r4,r4,zero
1000ea78:	390eb03a 	or	r7,r7,r4
1000ea7c:	003f4706 	br	1000e79c <__alt_data_end+0xf800e79c>
1000ea80:	2c48b03a 	or	r4,r5,r17
1000ea84:	20003e26 	beq	r4,zero,1000eb80 <__subdf3+0x644>
1000ea88:	0084303a 	nor	r2,zero,r2
1000ea8c:	10003a1e 	bne	r2,zero,1000eb78 <__subdf3+0x63c>
1000ea90:	3463c83a 	sub	r17,r6,r17
1000ea94:	194bc83a 	sub	r5,r3,r5
1000ea98:	344d803a 	cmpltu	r6,r6,r17
1000ea9c:	298bc83a 	sub	r5,r5,r6
1000eaa0:	5021883a 	mov	r16,r10
1000eaa4:	3825883a 	mov	r18,r7
1000eaa8:	003f0406 	br	1000e6bc <__alt_data_end+0xf800e6bc>
1000eaac:	1023883a 	mov	r17,r2
1000eab0:	003f0706 	br	1000e6d0 <__alt_data_end+0xf800e6d0>
1000eab4:	0101ffc4 	movi	r4,2047
1000eab8:	813f331e 	bne	r16,r4,1000e788 <__alt_data_end+0xf800e788>
1000eabc:	003ec206 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000eac0:	0027883a 	mov	r19,zero
1000eac4:	003fb006 	br	1000e988 <__alt_data_end+0xf800e988>
1000eac8:	0005883a 	mov	r2,zero
1000eacc:	003fbb06 	br	1000e9bc <__alt_data_end+0xf800e9bc>
1000ead0:	2c44b03a 	or	r2,r5,r17
1000ead4:	80008b1e 	bne	r16,zero,1000ed04 <__subdf3+0x7c8>
1000ead8:	1000b526 	beq	r2,zero,1000edb0 <__subdf3+0x874>
1000eadc:	1984b03a 	or	r2,r3,r6
1000eae0:	103eb926 	beq	r2,zero,1000e5c8 <__alt_data_end+0xf800e5c8>
1000eae4:	3449883a 	add	r4,r6,r17
1000eae8:	2463803a 	cmpltu	r17,r4,r17
1000eaec:	194b883a 	add	r5,r3,r5
1000eaf0:	2c4b883a 	add	r5,r5,r17
1000eaf4:	2880202c 	andhi	r2,r5,128
1000eaf8:	2023883a 	mov	r17,r4
1000eafc:	103f5c26 	beq	r2,zero,1000e870 <__alt_data_end+0xf800e870>
1000eb00:	00bfe034 	movhi	r2,65408
1000eb04:	10bfffc4 	addi	r2,r2,-1
1000eb08:	4821883a 	mov	r16,r9
1000eb0c:	288a703a 	and	r5,r5,r2
1000eb10:	003ead06 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000eb14:	2c44b03a 	or	r2,r5,r17
1000eb18:	8000291e 	bne	r16,zero,1000ebc0 <__subdf3+0x684>
1000eb1c:	10004f1e 	bne	r2,zero,1000ec5c <__subdf3+0x720>
1000eb20:	1984b03a 	or	r2,r3,r6
1000eb24:	10000426 	beq	r2,zero,1000eb38 <__subdf3+0x5fc>
1000eb28:	180b883a 	mov	r5,r3
1000eb2c:	3023883a 	mov	r17,r6
1000eb30:	3825883a 	mov	r18,r7
1000eb34:	003ea406 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000eb38:	0011883a 	mov	r8,zero
1000eb3c:	000b883a 	mov	r5,zero
1000eb40:	0023883a 	mov	r17,zero
1000eb44:	003f0006 	br	1000e748 <__alt_data_end+0xf800e748>
1000eb48:	11fff804 	addi	r7,r2,-32
1000eb4c:	19c8d83a 	srl	r4,r3,r7
1000eb50:	01c00804 	movi	r7,32
1000eb54:	11c07e26 	beq	r2,r7,1000ed50 <__subdf3+0x814>
1000eb58:	01c01004 	movi	r7,64
1000eb5c:	3885c83a 	sub	r2,r7,r2
1000eb60:	1884983a 	sll	r2,r3,r2
1000eb64:	118cb03a 	or	r6,r2,r6
1000eb68:	300ec03a 	cmpne	r7,r6,zero
1000eb6c:	390eb03a 	or	r7,r7,r4
1000eb70:	0005883a 	mov	r2,zero
1000eb74:	003f0906 	br	1000e79c <__alt_data_end+0xf800e79c>
1000eb78:	0101ffc4 	movi	r4,2047
1000eb7c:	513f991e 	bne	r10,r4,1000e9e4 <__alt_data_end+0xf800e9e4>
1000eb80:	180b883a 	mov	r5,r3
1000eb84:	3023883a 	mov	r17,r6
1000eb88:	5021883a 	mov	r16,r10
1000eb8c:	3825883a 	mov	r18,r7
1000eb90:	003e8d06 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000eb94:	80001a1e 	bne	r16,zero,1000ec00 <__subdf3+0x6c4>
1000eb98:	2c48b03a 	or	r4,r5,r17
1000eb9c:	20005526 	beq	r4,zero,1000ecf4 <__subdf3+0x7b8>
1000eba0:	0084303a 	nor	r2,zero,r2
1000eba4:	1000511e 	bne	r2,zero,1000ecec <__subdf3+0x7b0>
1000eba8:	89a3883a 	add	r17,r17,r6
1000ebac:	194b883a 	add	r5,r3,r5
1000ebb0:	898d803a 	cmpltu	r6,r17,r6
1000ebb4:	298b883a 	add	r5,r5,r6
1000ebb8:	5021883a 	mov	r16,r10
1000ebbc:	003efc06 	br	1000e7b0 <__alt_data_end+0xf800e7b0>
1000ebc0:	1000341e 	bne	r2,zero,1000ec94 <__subdf3+0x758>
1000ebc4:	1984b03a 	or	r2,r3,r6
1000ebc8:	10006f26 	beq	r2,zero,1000ed88 <__subdf3+0x84c>
1000ebcc:	180b883a 	mov	r5,r3
1000ebd0:	3023883a 	mov	r17,r6
1000ebd4:	3825883a 	mov	r18,r7
1000ebd8:	0401ffc4 	movi	r16,2047
1000ebdc:	003e7a06 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000ebe0:	2c62b03a 	or	r17,r5,r17
1000ebe4:	8822c03a 	cmpne	r17,r17,zero
1000ebe8:	0005883a 	mov	r2,zero
1000ebec:	003f8a06 	br	1000ea18 <__alt_data_end+0xf800ea18>
1000ebf0:	3821883a 	mov	r16,r7
1000ebf4:	000b883a 	mov	r5,zero
1000ebf8:	0023883a 	mov	r17,zero
1000ebfc:	003ed206 	br	1000e748 <__alt_data_end+0xf800e748>
1000ec00:	0101ffc4 	movi	r4,2047
1000ec04:	51003b26 	beq	r10,r4,1000ecf4 <__subdf3+0x7b8>
1000ec08:	0085c83a 	sub	r2,zero,r2
1000ec0c:	29402034 	orhi	r5,r5,128
1000ec10:	01000e04 	movi	r4,56
1000ec14:	20806216 	blt	r4,r2,1000eda0 <__subdf3+0x864>
1000ec18:	010007c4 	movi	r4,31
1000ec1c:	20806b16 	blt	r4,r2,1000edcc <__subdf3+0x890>
1000ec20:	01000804 	movi	r4,32
1000ec24:	2089c83a 	sub	r4,r4,r2
1000ec28:	2912983a 	sll	r9,r5,r4
1000ec2c:	888ed83a 	srl	r7,r17,r2
1000ec30:	8908983a 	sll	r4,r17,r4
1000ec34:	2884d83a 	srl	r2,r5,r2
1000ec38:	49e2b03a 	or	r17,r9,r7
1000ec3c:	2008c03a 	cmpne	r4,r4,zero
1000ec40:	8922b03a 	or	r17,r17,r4
1000ec44:	89a3883a 	add	r17,r17,r6
1000ec48:	10c5883a 	add	r2,r2,r3
1000ec4c:	898d803a 	cmpltu	r6,r17,r6
1000ec50:	118b883a 	add	r5,r2,r6
1000ec54:	5021883a 	mov	r16,r10
1000ec58:	003ed506 	br	1000e7b0 <__alt_data_end+0xf800e7b0>
1000ec5c:	1984b03a 	or	r2,r3,r6
1000ec60:	103e5926 	beq	r2,zero,1000e5c8 <__alt_data_end+0xf800e5c8>
1000ec64:	8989c83a 	sub	r4,r17,r6
1000ec68:	8911803a 	cmpltu	r8,r17,r4
1000ec6c:	28c5c83a 	sub	r2,r5,r3
1000ec70:	1205c83a 	sub	r2,r2,r8
1000ec74:	1200202c 	andhi	r8,r2,128
1000ec78:	403ef926 	beq	r8,zero,1000e860 <__alt_data_end+0xf800e860>
1000ec7c:	3463c83a 	sub	r17,r6,r17
1000ec80:	194bc83a 	sub	r5,r3,r5
1000ec84:	344d803a 	cmpltu	r6,r6,r17
1000ec88:	298bc83a 	sub	r5,r5,r6
1000ec8c:	3825883a 	mov	r18,r7
1000ec90:	003e4d06 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000ec94:	1984b03a 	or	r2,r3,r6
1000ec98:	10002b26 	beq	r2,zero,1000ed48 <__subdf3+0x80c>
1000ec9c:	2808d0fa 	srli	r4,r5,3
1000eca0:	8822d0fa 	srli	r17,r17,3
1000eca4:	280a977a 	slli	r5,r5,29
1000eca8:	2080022c 	andhi	r2,r4,8
1000ecac:	2c62b03a 	or	r17,r5,r17
1000ecb0:	10000826 	beq	r2,zero,1000ecd4 <__subdf3+0x798>
1000ecb4:	1810d0fa 	srli	r8,r3,3
1000ecb8:	4080022c 	andhi	r2,r8,8
1000ecbc:	1000051e 	bne	r2,zero,1000ecd4 <__subdf3+0x798>
1000ecc0:	300cd0fa 	srli	r6,r6,3
1000ecc4:	1804977a 	slli	r2,r3,29
1000ecc8:	4009883a 	mov	r4,r8
1000eccc:	3825883a 	mov	r18,r7
1000ecd0:	11a2b03a 	or	r17,r2,r6
1000ecd4:	880ad77a 	srli	r5,r17,29
1000ecd8:	200890fa 	slli	r4,r4,3
1000ecdc:	882290fa 	slli	r17,r17,3
1000ece0:	0401ffc4 	movi	r16,2047
1000ece4:	290ab03a 	or	r5,r5,r4
1000ece8:	003e3706 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000ecec:	0101ffc4 	movi	r4,2047
1000ecf0:	513fc71e 	bne	r10,r4,1000ec10 <__alt_data_end+0xf800ec10>
1000ecf4:	180b883a 	mov	r5,r3
1000ecf8:	3023883a 	mov	r17,r6
1000ecfc:	5021883a 	mov	r16,r10
1000ed00:	003e3106 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000ed04:	10002d26 	beq	r2,zero,1000edbc <__subdf3+0x880>
1000ed08:	1984b03a 	or	r2,r3,r6
1000ed0c:	10000e26 	beq	r2,zero,1000ed48 <__subdf3+0x80c>
1000ed10:	2808d0fa 	srli	r4,r5,3
1000ed14:	8822d0fa 	srli	r17,r17,3
1000ed18:	280a977a 	slli	r5,r5,29
1000ed1c:	2080022c 	andhi	r2,r4,8
1000ed20:	2c62b03a 	or	r17,r5,r17
1000ed24:	103feb26 	beq	r2,zero,1000ecd4 <__alt_data_end+0xf800ecd4>
1000ed28:	180ed0fa 	srli	r7,r3,3
1000ed2c:	3880022c 	andhi	r2,r7,8
1000ed30:	103fe81e 	bne	r2,zero,1000ecd4 <__alt_data_end+0xf800ecd4>
1000ed34:	300cd0fa 	srli	r6,r6,3
1000ed38:	1804977a 	slli	r2,r3,29
1000ed3c:	3809883a 	mov	r4,r7
1000ed40:	11a2b03a 	or	r17,r2,r6
1000ed44:	003fe306 	br	1000ecd4 <__alt_data_end+0xf800ecd4>
1000ed48:	0401ffc4 	movi	r16,2047
1000ed4c:	003e1e06 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000ed50:	0005883a 	mov	r2,zero
1000ed54:	003f8306 	br	1000eb64 <__alt_data_end+0xf800eb64>
1000ed58:	113ff804 	addi	r4,r2,-32
1000ed5c:	02000804 	movi	r8,32
1000ed60:	2908d83a 	srl	r4,r5,r4
1000ed64:	12002526 	beq	r2,r8,1000edfc <__subdf3+0x8c0>
1000ed68:	02001004 	movi	r8,64
1000ed6c:	4085c83a 	sub	r2,r8,r2
1000ed70:	288a983a 	sll	r5,r5,r2
1000ed74:	2c62b03a 	or	r17,r5,r17
1000ed78:	8822c03a 	cmpne	r17,r17,zero
1000ed7c:	8922b03a 	or	r17,r17,r4
1000ed80:	0005883a 	mov	r2,zero
1000ed84:	003f2406 	br	1000ea18 <__alt_data_end+0xf800ea18>
1000ed88:	01402034 	movhi	r5,128
1000ed8c:	0011883a 	mov	r8,zero
1000ed90:	297fffc4 	addi	r5,r5,-1
1000ed94:	047ffe04 	movi	r17,-8
1000ed98:	0401ffc4 	movi	r16,2047
1000ed9c:	003e6a06 	br	1000e748 <__alt_data_end+0xf800e748>
1000eda0:	2c62b03a 	or	r17,r5,r17
1000eda4:	8822c03a 	cmpne	r17,r17,zero
1000eda8:	0005883a 	mov	r2,zero
1000edac:	003fa506 	br	1000ec44 <__alt_data_end+0xf800ec44>
1000edb0:	180b883a 	mov	r5,r3
1000edb4:	3023883a 	mov	r17,r6
1000edb8:	003e0306 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000edbc:	180b883a 	mov	r5,r3
1000edc0:	3023883a 	mov	r17,r6
1000edc4:	0401ffc4 	movi	r16,2047
1000edc8:	003dff06 	br	1000e5c8 <__alt_data_end+0xf800e5c8>
1000edcc:	113ff804 	addi	r4,r2,-32
1000edd0:	01c00804 	movi	r7,32
1000edd4:	2908d83a 	srl	r4,r5,r4
1000edd8:	11c00a26 	beq	r2,r7,1000ee04 <__subdf3+0x8c8>
1000eddc:	01c01004 	movi	r7,64
1000ede0:	3885c83a 	sub	r2,r7,r2
1000ede4:	288a983a 	sll	r5,r5,r2
1000ede8:	2c62b03a 	or	r17,r5,r17
1000edec:	8822c03a 	cmpne	r17,r17,zero
1000edf0:	8922b03a 	or	r17,r17,r4
1000edf4:	0005883a 	mov	r2,zero
1000edf8:	003f9206 	br	1000ec44 <__alt_data_end+0xf800ec44>
1000edfc:	000b883a 	mov	r5,zero
1000ee00:	003fdc06 	br	1000ed74 <__alt_data_end+0xf800ed74>
1000ee04:	000b883a 	mov	r5,zero
1000ee08:	003ff706 	br	1000ede8 <__alt_data_end+0xf800ede8>

1000ee0c <__fixdfsi>:
1000ee0c:	2806d53a 	srli	r3,r5,20
1000ee10:	00800434 	movhi	r2,16
1000ee14:	10bfffc4 	addi	r2,r2,-1
1000ee18:	18c1ffcc 	andi	r3,r3,2047
1000ee1c:	0180ff84 	movi	r6,1022
1000ee20:	2884703a 	and	r2,r5,r2
1000ee24:	280ad7fa 	srli	r5,r5,31
1000ee28:	30c0130e 	bge	r6,r3,1000ee78 <__fixdfsi+0x6c>
1000ee2c:	01810744 	movi	r6,1053
1000ee30:	30c00d16 	blt	r6,r3,1000ee68 <__fixdfsi+0x5c>
1000ee34:	01810cc4 	movi	r6,1075
1000ee38:	30cdc83a 	sub	r6,r6,r3
1000ee3c:	01c007c4 	movi	r7,31
1000ee40:	10800434 	orhi	r2,r2,16
1000ee44:	39800e0e 	bge	r7,r6,1000ee80 <__fixdfsi+0x74>
1000ee48:	010104c4 	movi	r4,1043
1000ee4c:	20c7c83a 	sub	r3,r4,r3
1000ee50:	10c6d83a 	srl	r3,r2,r3
1000ee54:	29403fcc 	andi	r5,r5,255
1000ee58:	0145c83a 	sub	r2,zero,r5
1000ee5c:	1884f03a 	xor	r2,r3,r2
1000ee60:	1145883a 	add	r2,r2,r5
1000ee64:	f800283a 	ret
1000ee68:	00a00034 	movhi	r2,32768
1000ee6c:	10bfffc4 	addi	r2,r2,-1
1000ee70:	2885883a 	add	r2,r5,r2
1000ee74:	f800283a 	ret
1000ee78:	0005883a 	mov	r2,zero
1000ee7c:	f800283a 	ret
1000ee80:	18fefb44 	addi	r3,r3,-1043
1000ee84:	2188d83a 	srl	r4,r4,r6
1000ee88:	10c6983a 	sll	r3,r2,r3
1000ee8c:	20c6b03a 	or	r3,r4,r3
1000ee90:	003ff006 	br	1000ee54 <__alt_data_end+0xf800ee54>

1000ee94 <__floatsidf>:
1000ee94:	defffd04 	addi	sp,sp,-12
1000ee98:	dc400115 	stw	r17,4(sp)
1000ee9c:	dfc00215 	stw	ra,8(sp)
1000eea0:	dc000015 	stw	r16,0(sp)
1000eea4:	2023883a 	mov	r17,r4
1000eea8:	20001426 	beq	r4,zero,1000eefc <__floatsidf+0x68>
1000eeac:	2020d7fa 	srli	r16,r4,31
1000eeb0:	80000126 	beq	r16,zero,1000eeb8 <__floatsidf+0x24>
1000eeb4:	0123c83a 	sub	r17,zero,r4
1000eeb8:	8809883a 	mov	r4,r17
1000eebc:	000f0080 	call	1000f008 <__clzsi2>
1000eec0:	01410784 	movi	r5,1054
1000eec4:	00c00284 	movi	r3,10
1000eec8:	288bc83a 	sub	r5,r5,r2
1000eecc:	18801c16 	blt	r3,r2,1000ef40 <__floatsidf+0xac>
1000eed0:	00c002c4 	movi	r3,11
1000eed4:	1887c83a 	sub	r3,r3,r2
1000eed8:	88c8d83a 	srl	r4,r17,r3
1000eedc:	00c00434 	movhi	r3,16
1000eee0:	18ffffc4 	addi	r3,r3,-1
1000eee4:	10800544 	addi	r2,r2,21
1000eee8:	20c8703a 	and	r4,r4,r3
1000eeec:	8884983a 	sll	r2,r17,r2
1000eef0:	28c1ffcc 	andi	r3,r5,2047
1000eef4:	800d883a 	mov	r6,r16
1000eef8:	00000406 	br	1000ef0c <__floatsidf+0x78>
1000eefc:	000d883a 	mov	r6,zero
1000ef00:	0007883a 	mov	r3,zero
1000ef04:	0009883a 	mov	r4,zero
1000ef08:	0005883a 	mov	r2,zero
1000ef0c:	180a953a 	slli	r5,r3,20
1000ef10:	31803fcc 	andi	r6,r6,255
1000ef14:	00c00434 	movhi	r3,16
1000ef18:	300c97fa 	slli	r6,r6,31
1000ef1c:	18ffffc4 	addi	r3,r3,-1
1000ef20:	20c6703a 	and	r3,r4,r3
1000ef24:	1946b03a 	or	r3,r3,r5
1000ef28:	1986b03a 	or	r3,r3,r6
1000ef2c:	dfc00217 	ldw	ra,8(sp)
1000ef30:	dc400117 	ldw	r17,4(sp)
1000ef34:	dc000017 	ldw	r16,0(sp)
1000ef38:	dec00304 	addi	sp,sp,12
1000ef3c:	f800283a 	ret
1000ef40:	10fffd44 	addi	r3,r2,-11
1000ef44:	88c8983a 	sll	r4,r17,r3
1000ef48:	00800434 	movhi	r2,16
1000ef4c:	10bfffc4 	addi	r2,r2,-1
1000ef50:	2088703a 	and	r4,r4,r2
1000ef54:	28c1ffcc 	andi	r3,r5,2047
1000ef58:	800d883a 	mov	r6,r16
1000ef5c:	0005883a 	mov	r2,zero
1000ef60:	003fea06 	br	1000ef0c <__alt_data_end+0xf800ef0c>

1000ef64 <__floatunsidf>:
1000ef64:	defffe04 	addi	sp,sp,-8
1000ef68:	dc000015 	stw	r16,0(sp)
1000ef6c:	dfc00115 	stw	ra,4(sp)
1000ef70:	2021883a 	mov	r16,r4
1000ef74:	20001026 	beq	r4,zero,1000efb8 <__floatunsidf+0x54>
1000ef78:	000f0080 	call	1000f008 <__clzsi2>
1000ef7c:	01410784 	movi	r5,1054
1000ef80:	100d883a 	mov	r6,r2
1000ef84:	288bc83a 	sub	r5,r5,r2
1000ef88:	00800284 	movi	r2,10
1000ef8c:	11801616 	blt	r2,r6,1000efe8 <__floatunsidf+0x84>
1000ef90:	008002c4 	movi	r2,11
1000ef94:	1185c83a 	sub	r2,r2,r6
1000ef98:	8084d83a 	srl	r2,r16,r2
1000ef9c:	00c00434 	movhi	r3,16
1000efa0:	31c00544 	addi	r7,r6,21
1000efa4:	18ffffc4 	addi	r3,r3,-1
1000efa8:	81e0983a 	sll	r16,r16,r7
1000efac:	10cc703a 	and	r6,r2,r3
1000efb0:	2941ffcc 	andi	r5,r5,2047
1000efb4:	00000206 	br	1000efc0 <__floatunsidf+0x5c>
1000efb8:	000b883a 	mov	r5,zero
1000efbc:	000d883a 	mov	r6,zero
1000efc0:	280a953a 	slli	r5,r5,20
1000efc4:	00c00434 	movhi	r3,16
1000efc8:	18ffffc4 	addi	r3,r3,-1
1000efcc:	30c6703a 	and	r3,r6,r3
1000efd0:	8005883a 	mov	r2,r16
1000efd4:	1946b03a 	or	r3,r3,r5
1000efd8:	dfc00117 	ldw	ra,4(sp)
1000efdc:	dc000017 	ldw	r16,0(sp)
1000efe0:	dec00204 	addi	sp,sp,8
1000efe4:	f800283a 	ret
1000efe8:	31bffd44 	addi	r6,r6,-11
1000efec:	818c983a 	sll	r6,r16,r6
1000eff0:	00800434 	movhi	r2,16
1000eff4:	10bfffc4 	addi	r2,r2,-1
1000eff8:	2941ffcc 	andi	r5,r5,2047
1000effc:	0021883a 	mov	r16,zero
1000f000:	308c703a 	and	r6,r6,r2
1000f004:	003fee06 	br	1000efc0 <__alt_data_end+0xf800efc0>

1000f008 <__clzsi2>:
1000f008:	00bfffd4 	movui	r2,65535
1000f00c:	11000b36 	bltu	r2,r4,1000f03c <__clzsi2+0x34>
1000f010:	00803fc4 	movi	r2,255
1000f014:	1100122e 	bgeu	r2,r4,1000f060 <__clzsi2+0x58>
1000f018:	00c00204 	movi	r3,8
1000f01c:	01400604 	movi	r5,24
1000f020:	20c8d83a 	srl	r4,r4,r3
1000f024:	00840074 	movhi	r2,4097
1000f028:	10888404 	addi	r2,r2,8720
1000f02c:	1109883a 	add	r4,r2,r4
1000f030:	20800003 	ldbu	r2,0(r4)
1000f034:	2885c83a 	sub	r2,r5,r2
1000f038:	f800283a 	ret
1000f03c:	00804034 	movhi	r2,256
1000f040:	10bfffc4 	addi	r2,r2,-1
1000f044:	11000336 	bltu	r2,r4,1000f054 <__clzsi2+0x4c>
1000f048:	00c00404 	movi	r3,16
1000f04c:	180b883a 	mov	r5,r3
1000f050:	003ff306 	br	1000f020 <__alt_data_end+0xf800f020>
1000f054:	00c00604 	movi	r3,24
1000f058:	01400204 	movi	r5,8
1000f05c:	003ff006 	br	1000f020 <__alt_data_end+0xf800f020>
1000f060:	0007883a 	mov	r3,zero
1000f064:	01400804 	movi	r5,32
1000f068:	003fed06 	br	1000f020 <__alt_data_end+0xf800f020>

1000f06c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f06c:	defffe04 	addi	sp,sp,-8
1000f070:	dfc00115 	stw	ra,4(sp)
1000f074:	df000015 	stw	fp,0(sp)
1000f078:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f07c:	00840074 	movhi	r2,4097
1000f080:	108f8704 	addi	r2,r2,15900
1000f084:	10800017 	ldw	r2,0(r2)
1000f088:	10000526 	beq	r2,zero,1000f0a0 <alt_get_errno+0x34>
1000f08c:	00840074 	movhi	r2,4097
1000f090:	108f8704 	addi	r2,r2,15900
1000f094:	10800017 	ldw	r2,0(r2)
1000f098:	103ee83a 	callr	r2
1000f09c:	00000206 	br	1000f0a8 <alt_get_errno+0x3c>
1000f0a0:	00840074 	movhi	r2,4097
1000f0a4:	10964e04 	addi	r2,r2,22840
}
1000f0a8:	e037883a 	mov	sp,fp
1000f0ac:	dfc00117 	ldw	ra,4(sp)
1000f0b0:	df000017 	ldw	fp,0(sp)
1000f0b4:	dec00204 	addi	sp,sp,8
1000f0b8:	f800283a 	ret

1000f0bc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f0bc:	defffb04 	addi	sp,sp,-20
1000f0c0:	dfc00415 	stw	ra,16(sp)
1000f0c4:	df000315 	stw	fp,12(sp)
1000f0c8:	df000304 	addi	fp,sp,12
1000f0cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000f0d0:	e0bfff17 	ldw	r2,-4(fp)
1000f0d4:	10000816 	blt	r2,zero,1000f0f8 <close+0x3c>
1000f0d8:	e13fff17 	ldw	r4,-4(fp)
1000f0dc:	01400304 	movi	r5,12
1000f0e0:	000c8480 	call	1000c848 <__mulsi3>
1000f0e4:	1007883a 	mov	r3,r2
1000f0e8:	00840074 	movhi	r2,4097
1000f0ec:	108b0404 	addi	r2,r2,11280
1000f0f0:	1885883a 	add	r2,r3,r2
1000f0f4:	00000106 	br	1000f0fc <close+0x40>
1000f0f8:	0005883a 	mov	r2,zero
1000f0fc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000f100:	e0bffd17 	ldw	r2,-12(fp)
1000f104:	10001926 	beq	r2,zero,1000f16c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000f108:	e0bffd17 	ldw	r2,-12(fp)
1000f10c:	10800017 	ldw	r2,0(r2)
1000f110:	10800417 	ldw	r2,16(r2)
1000f114:	10000626 	beq	r2,zero,1000f130 <close+0x74>
1000f118:	e0bffd17 	ldw	r2,-12(fp)
1000f11c:	10800017 	ldw	r2,0(r2)
1000f120:	10800417 	ldw	r2,16(r2)
1000f124:	e13ffd17 	ldw	r4,-12(fp)
1000f128:	103ee83a 	callr	r2
1000f12c:	00000106 	br	1000f134 <close+0x78>
1000f130:	0005883a 	mov	r2,zero
1000f134:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000f138:	e13fff17 	ldw	r4,-4(fp)
1000f13c:	000f7e00 	call	1000f7e0 <alt_release_fd>
    if (rval < 0)
1000f140:	e0bffe17 	ldw	r2,-8(fp)
1000f144:	1000070e 	bge	r2,zero,1000f164 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000f148:	000f06c0 	call	1000f06c <alt_get_errno>
1000f14c:	1007883a 	mov	r3,r2
1000f150:	e0bffe17 	ldw	r2,-8(fp)
1000f154:	0085c83a 	sub	r2,zero,r2
1000f158:	18800015 	stw	r2,0(r3)
      return -1;
1000f15c:	00bfffc4 	movi	r2,-1
1000f160:	00000706 	br	1000f180 <close+0xc4>
    }
    return 0;
1000f164:	0005883a 	mov	r2,zero
1000f168:	00000506 	br	1000f180 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f16c:	000f06c0 	call	1000f06c <alt_get_errno>
1000f170:	1007883a 	mov	r3,r2
1000f174:	00801444 	movi	r2,81
1000f178:	18800015 	stw	r2,0(r3)
    return -1;
1000f17c:	00bfffc4 	movi	r2,-1
  }
}
1000f180:	e037883a 	mov	sp,fp
1000f184:	dfc00117 	ldw	ra,4(sp)
1000f188:	df000017 	ldw	fp,0(sp)
1000f18c:	dec00204 	addi	sp,sp,8
1000f190:	f800283a 	ret

1000f194 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000f194:	defffc04 	addi	sp,sp,-16
1000f198:	df000315 	stw	fp,12(sp)
1000f19c:	df000304 	addi	fp,sp,12
1000f1a0:	e13ffd15 	stw	r4,-12(fp)
1000f1a4:	e17ffe15 	stw	r5,-8(fp)
1000f1a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000f1ac:	e0bfff17 	ldw	r2,-4(fp)
}
1000f1b0:	e037883a 	mov	sp,fp
1000f1b4:	df000017 	ldw	fp,0(sp)
1000f1b8:	dec00104 	addi	sp,sp,4
1000f1bc:	f800283a 	ret

1000f1c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f1c0:	defffe04 	addi	sp,sp,-8
1000f1c4:	dfc00115 	stw	ra,4(sp)
1000f1c8:	df000015 	stw	fp,0(sp)
1000f1cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f1d0:	00840074 	movhi	r2,4097
1000f1d4:	108f8704 	addi	r2,r2,15900
1000f1d8:	10800017 	ldw	r2,0(r2)
1000f1dc:	10000526 	beq	r2,zero,1000f1f4 <alt_get_errno+0x34>
1000f1e0:	00840074 	movhi	r2,4097
1000f1e4:	108f8704 	addi	r2,r2,15900
1000f1e8:	10800017 	ldw	r2,0(r2)
1000f1ec:	103ee83a 	callr	r2
1000f1f0:	00000206 	br	1000f1fc <alt_get_errno+0x3c>
1000f1f4:	00840074 	movhi	r2,4097
1000f1f8:	10964e04 	addi	r2,r2,22840
}
1000f1fc:	e037883a 	mov	sp,fp
1000f200:	dfc00117 	ldw	ra,4(sp)
1000f204:	df000017 	ldw	fp,0(sp)
1000f208:	dec00204 	addi	sp,sp,8
1000f20c:	f800283a 	ret

1000f210 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000f210:	defffb04 	addi	sp,sp,-20
1000f214:	dfc00415 	stw	ra,16(sp)
1000f218:	df000315 	stw	fp,12(sp)
1000f21c:	df000304 	addi	fp,sp,12
1000f220:	e13ffe15 	stw	r4,-8(fp)
1000f224:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f228:	e0bffe17 	ldw	r2,-8(fp)
1000f22c:	10000816 	blt	r2,zero,1000f250 <fstat+0x40>
1000f230:	e13ffe17 	ldw	r4,-8(fp)
1000f234:	01400304 	movi	r5,12
1000f238:	000c8480 	call	1000c848 <__mulsi3>
1000f23c:	1007883a 	mov	r3,r2
1000f240:	00840074 	movhi	r2,4097
1000f244:	108b0404 	addi	r2,r2,11280
1000f248:	1885883a 	add	r2,r3,r2
1000f24c:	00000106 	br	1000f254 <fstat+0x44>
1000f250:	0005883a 	mov	r2,zero
1000f254:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000f258:	e0bffd17 	ldw	r2,-12(fp)
1000f25c:	10001026 	beq	r2,zero,1000f2a0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000f260:	e0bffd17 	ldw	r2,-12(fp)
1000f264:	10800017 	ldw	r2,0(r2)
1000f268:	10800817 	ldw	r2,32(r2)
1000f26c:	10000726 	beq	r2,zero,1000f28c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000f270:	e0bffd17 	ldw	r2,-12(fp)
1000f274:	10800017 	ldw	r2,0(r2)
1000f278:	10800817 	ldw	r2,32(r2)
1000f27c:	e13ffd17 	ldw	r4,-12(fp)
1000f280:	e17fff17 	ldw	r5,-4(fp)
1000f284:	103ee83a 	callr	r2
1000f288:	00000a06 	br	1000f2b4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000f28c:	e0bfff17 	ldw	r2,-4(fp)
1000f290:	00c80004 	movi	r3,8192
1000f294:	10c00115 	stw	r3,4(r2)
      return 0;
1000f298:	0005883a 	mov	r2,zero
1000f29c:	00000506 	br	1000f2b4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f2a0:	000f1c00 	call	1000f1c0 <alt_get_errno>
1000f2a4:	1007883a 	mov	r3,r2
1000f2a8:	00801444 	movi	r2,81
1000f2ac:	18800015 	stw	r2,0(r3)
    return -1;
1000f2b0:	00bfffc4 	movi	r2,-1
  }
}
1000f2b4:	e037883a 	mov	sp,fp
1000f2b8:	dfc00117 	ldw	ra,4(sp)
1000f2bc:	df000017 	ldw	fp,0(sp)
1000f2c0:	dec00204 	addi	sp,sp,8
1000f2c4:	f800283a 	ret

1000f2c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f2c8:	defffe04 	addi	sp,sp,-8
1000f2cc:	dfc00115 	stw	ra,4(sp)
1000f2d0:	df000015 	stw	fp,0(sp)
1000f2d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f2d8:	00840074 	movhi	r2,4097
1000f2dc:	108f8704 	addi	r2,r2,15900
1000f2e0:	10800017 	ldw	r2,0(r2)
1000f2e4:	10000526 	beq	r2,zero,1000f2fc <alt_get_errno+0x34>
1000f2e8:	00840074 	movhi	r2,4097
1000f2ec:	108f8704 	addi	r2,r2,15900
1000f2f0:	10800017 	ldw	r2,0(r2)
1000f2f4:	103ee83a 	callr	r2
1000f2f8:	00000206 	br	1000f304 <alt_get_errno+0x3c>
1000f2fc:	00840074 	movhi	r2,4097
1000f300:	10964e04 	addi	r2,r2,22840
}
1000f304:	e037883a 	mov	sp,fp
1000f308:	dfc00117 	ldw	ra,4(sp)
1000f30c:	df000017 	ldw	fp,0(sp)
1000f310:	dec00204 	addi	sp,sp,8
1000f314:	f800283a 	ret

1000f318 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000f318:	deffed04 	addi	sp,sp,-76
1000f31c:	dfc01215 	stw	ra,72(sp)
1000f320:	df001115 	stw	fp,68(sp)
1000f324:	df001104 	addi	fp,sp,68
1000f328:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f32c:	e0bfff17 	ldw	r2,-4(fp)
1000f330:	10000816 	blt	r2,zero,1000f354 <isatty+0x3c>
1000f334:	e13fff17 	ldw	r4,-4(fp)
1000f338:	01400304 	movi	r5,12
1000f33c:	000c8480 	call	1000c848 <__mulsi3>
1000f340:	1007883a 	mov	r3,r2
1000f344:	00840074 	movhi	r2,4097
1000f348:	108b0404 	addi	r2,r2,11280
1000f34c:	1885883a 	add	r2,r3,r2
1000f350:	00000106 	br	1000f358 <isatty+0x40>
1000f354:	0005883a 	mov	r2,zero
1000f358:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000f35c:	e0bfef17 	ldw	r2,-68(fp)
1000f360:	10000e26 	beq	r2,zero,1000f39c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000f364:	e0bfef17 	ldw	r2,-68(fp)
1000f368:	10800017 	ldw	r2,0(r2)
1000f36c:	10800817 	ldw	r2,32(r2)
1000f370:	1000021e 	bne	r2,zero,1000f37c <isatty+0x64>
    {
      return 1;
1000f374:	00800044 	movi	r2,1
1000f378:	00000d06 	br	1000f3b0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000f37c:	e0bff004 	addi	r2,fp,-64
1000f380:	e13fff17 	ldw	r4,-4(fp)
1000f384:	100b883a 	mov	r5,r2
1000f388:	000f2100 	call	1000f210 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000f38c:	e0bff117 	ldw	r2,-60(fp)
1000f390:	10880020 	cmpeqi	r2,r2,8192
1000f394:	10803fcc 	andi	r2,r2,255
1000f398:	00000506 	br	1000f3b0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f39c:	000f2c80 	call	1000f2c8 <alt_get_errno>
1000f3a0:	1007883a 	mov	r3,r2
1000f3a4:	00801444 	movi	r2,81
1000f3a8:	18800015 	stw	r2,0(r3)
    return 0;
1000f3ac:	0005883a 	mov	r2,zero
  }
}
1000f3b0:	e037883a 	mov	sp,fp
1000f3b4:	dfc00117 	ldw	ra,4(sp)
1000f3b8:	df000017 	ldw	fp,0(sp)
1000f3bc:	dec00204 	addi	sp,sp,8
1000f3c0:	f800283a 	ret

1000f3c4 <alt_load_section>:
1000f3c4:	defffc04 	addi	sp,sp,-16
1000f3c8:	df000315 	stw	fp,12(sp)
1000f3cc:	df000304 	addi	fp,sp,12
1000f3d0:	e13ffd15 	stw	r4,-12(fp)
1000f3d4:	e17ffe15 	stw	r5,-8(fp)
1000f3d8:	e1bfff15 	stw	r6,-4(fp)
1000f3dc:	e0fffe17 	ldw	r3,-8(fp)
1000f3e0:	e0bffd17 	ldw	r2,-12(fp)
1000f3e4:	18800c26 	beq	r3,r2,1000f418 <alt_load_section+0x54>
1000f3e8:	00000806 	br	1000f40c <alt_load_section+0x48>
1000f3ec:	e0bffe17 	ldw	r2,-8(fp)
1000f3f0:	10c00104 	addi	r3,r2,4
1000f3f4:	e0fffe15 	stw	r3,-8(fp)
1000f3f8:	e0fffd17 	ldw	r3,-12(fp)
1000f3fc:	19000104 	addi	r4,r3,4
1000f400:	e13ffd15 	stw	r4,-12(fp)
1000f404:	18c00017 	ldw	r3,0(r3)
1000f408:	10c00015 	stw	r3,0(r2)
1000f40c:	e0fffe17 	ldw	r3,-8(fp)
1000f410:	e0bfff17 	ldw	r2,-4(fp)
1000f414:	18bff51e 	bne	r3,r2,1000f3ec <__alt_data_end+0xf800f3ec>
1000f418:	e037883a 	mov	sp,fp
1000f41c:	df000017 	ldw	fp,0(sp)
1000f420:	dec00104 	addi	sp,sp,4
1000f424:	f800283a 	ret

1000f428 <alt_load>:
1000f428:	defffe04 	addi	sp,sp,-8
1000f42c:	dfc00115 	stw	ra,4(sp)
1000f430:	df000015 	stw	fp,0(sp)
1000f434:	d839883a 	mov	fp,sp
1000f438:	01040074 	movhi	r4,4097
1000f43c:	210f8c04 	addi	r4,r4,15920
1000f440:	01440074 	movhi	r5,4097
1000f444:	2948d104 	addi	r5,r5,9028
1000f448:	01840074 	movhi	r6,4097
1000f44c:	318f8c04 	addi	r6,r6,15920
1000f450:	000f3c40 	call	1000f3c4 <alt_load_section>
1000f454:	01040034 	movhi	r4,4096
1000f458:	21000804 	addi	r4,r4,32
1000f45c:	01440034 	movhi	r5,4096
1000f460:	29400804 	addi	r5,r5,32
1000f464:	01840034 	movhi	r6,4096
1000f468:	31806f04 	addi	r6,r6,444
1000f46c:	000f3c40 	call	1000f3c4 <alt_load_section>
1000f470:	01040074 	movhi	r4,4097
1000f474:	21062c04 	addi	r4,r4,6320
1000f478:	01440074 	movhi	r5,4097
1000f47c:	29462c04 	addi	r5,r5,6320
1000f480:	01840074 	movhi	r6,4097
1000f484:	3188d104 	addi	r6,r6,9028
1000f488:	000f3c40 	call	1000f3c4 <alt_load_section>
1000f48c:	00108280 	call	10010828 <alt_dcache_flush_all>
1000f490:	00109f00 	call	100109f0 <alt_icache_flush_all>
1000f494:	e037883a 	mov	sp,fp
1000f498:	dfc00117 	ldw	ra,4(sp)
1000f49c:	df000017 	ldw	fp,0(sp)
1000f4a0:	dec00204 	addi	sp,sp,8
1000f4a4:	f800283a 	ret

1000f4a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f4a8:	defffe04 	addi	sp,sp,-8
1000f4ac:	dfc00115 	stw	ra,4(sp)
1000f4b0:	df000015 	stw	fp,0(sp)
1000f4b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f4b8:	00840074 	movhi	r2,4097
1000f4bc:	108f8704 	addi	r2,r2,15900
1000f4c0:	10800017 	ldw	r2,0(r2)
1000f4c4:	10000526 	beq	r2,zero,1000f4dc <alt_get_errno+0x34>
1000f4c8:	00840074 	movhi	r2,4097
1000f4cc:	108f8704 	addi	r2,r2,15900
1000f4d0:	10800017 	ldw	r2,0(r2)
1000f4d4:	103ee83a 	callr	r2
1000f4d8:	00000206 	br	1000f4e4 <alt_get_errno+0x3c>
1000f4dc:	00840074 	movhi	r2,4097
1000f4e0:	10964e04 	addi	r2,r2,22840
}
1000f4e4:	e037883a 	mov	sp,fp
1000f4e8:	dfc00117 	ldw	ra,4(sp)
1000f4ec:	df000017 	ldw	fp,0(sp)
1000f4f0:	dec00204 	addi	sp,sp,8
1000f4f4:	f800283a 	ret

1000f4f8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000f4f8:	defff904 	addi	sp,sp,-28
1000f4fc:	dfc00615 	stw	ra,24(sp)
1000f500:	df000515 	stw	fp,20(sp)
1000f504:	df000504 	addi	fp,sp,20
1000f508:	e13ffd15 	stw	r4,-12(fp)
1000f50c:	e17ffe15 	stw	r5,-8(fp)
1000f510:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000f514:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f518:	e0bffd17 	ldw	r2,-12(fp)
1000f51c:	10000816 	blt	r2,zero,1000f540 <lseek+0x48>
1000f520:	e13ffd17 	ldw	r4,-12(fp)
1000f524:	01400304 	movi	r5,12
1000f528:	000c8480 	call	1000c848 <__mulsi3>
1000f52c:	1007883a 	mov	r3,r2
1000f530:	00840074 	movhi	r2,4097
1000f534:	108b0404 	addi	r2,r2,11280
1000f538:	1885883a 	add	r2,r3,r2
1000f53c:	00000106 	br	1000f544 <lseek+0x4c>
1000f540:	0005883a 	mov	r2,zero
1000f544:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000f548:	e0bffc17 	ldw	r2,-16(fp)
1000f54c:	10001026 	beq	r2,zero,1000f590 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000f550:	e0bffc17 	ldw	r2,-16(fp)
1000f554:	10800017 	ldw	r2,0(r2)
1000f558:	10800717 	ldw	r2,28(r2)
1000f55c:	10000926 	beq	r2,zero,1000f584 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000f560:	e0bffc17 	ldw	r2,-16(fp)
1000f564:	10800017 	ldw	r2,0(r2)
1000f568:	10800717 	ldw	r2,28(r2)
1000f56c:	e13ffc17 	ldw	r4,-16(fp)
1000f570:	e17ffe17 	ldw	r5,-8(fp)
1000f574:	e1bfff17 	ldw	r6,-4(fp)
1000f578:	103ee83a 	callr	r2
1000f57c:	e0bffb15 	stw	r2,-20(fp)
1000f580:	00000506 	br	1000f598 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000f584:	00bfde84 	movi	r2,-134
1000f588:	e0bffb15 	stw	r2,-20(fp)
1000f58c:	00000206 	br	1000f598 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000f590:	00bfebc4 	movi	r2,-81
1000f594:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000f598:	e0bffb17 	ldw	r2,-20(fp)
1000f59c:	1000070e 	bge	r2,zero,1000f5bc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000f5a0:	000f4a80 	call	1000f4a8 <alt_get_errno>
1000f5a4:	1007883a 	mov	r3,r2
1000f5a8:	e0bffb17 	ldw	r2,-20(fp)
1000f5ac:	0085c83a 	sub	r2,zero,r2
1000f5b0:	18800015 	stw	r2,0(r3)
    rc = -1;
1000f5b4:	00bfffc4 	movi	r2,-1
1000f5b8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000f5bc:	e0bffb17 	ldw	r2,-20(fp)
}
1000f5c0:	e037883a 	mov	sp,fp
1000f5c4:	dfc00117 	ldw	ra,4(sp)
1000f5c8:	df000017 	ldw	fp,0(sp)
1000f5cc:	dec00204 	addi	sp,sp,8
1000f5d0:	f800283a 	ret

1000f5d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000f5d4:	defffd04 	addi	sp,sp,-12
1000f5d8:	dfc00215 	stw	ra,8(sp)
1000f5dc:	df000115 	stw	fp,4(sp)
1000f5e0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000f5e4:	0009883a 	mov	r4,zero
1000f5e8:	000fac80 	call	1000fac8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000f5ec:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000f5f0:	000fafc0 	call	1000fafc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000f5f4:	01040074 	movhi	r4,4097
1000f5f8:	2108c704 	addi	r4,r4,8988
1000f5fc:	01440074 	movhi	r5,4097
1000f600:	2948c704 	addi	r5,r5,8988
1000f604:	01840074 	movhi	r6,4097
1000f608:	3188c704 	addi	r6,r6,8988
1000f60c:	0010dbc0 	call	10010dbc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000f610:	00109380 	call	10010938 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000f614:	01040074 	movhi	r4,4097
1000f618:	21026504 	addi	r4,r4,2452
1000f61c:	001150c0 	call	1001150c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000f620:	d126d317 	ldw	r4,-25780(gp)
1000f624:	d0e6d417 	ldw	r3,-25776(gp)
1000f628:	d0a6d517 	ldw	r2,-25772(gp)
1000f62c:	180b883a 	mov	r5,r3
1000f630:	100d883a 	mov	r6,r2
1000f634:	00006d00 	call	100006d0 <main>
1000f638:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000f63c:	01000044 	movi	r4,1
1000f640:	000f0bc0 	call	1000f0bc <close>
  exit (result);
1000f644:	e13fff17 	ldw	r4,-4(fp)
1000f648:	00115200 	call	10011520 <exit>

1000f64c <__malloc_lock>:
1000f64c:	defffe04 	addi	sp,sp,-8
1000f650:	df000115 	stw	fp,4(sp)
1000f654:	df000104 	addi	fp,sp,4
1000f658:	e13fff15 	stw	r4,-4(fp)
1000f65c:	e037883a 	mov	sp,fp
1000f660:	df000017 	ldw	fp,0(sp)
1000f664:	dec00104 	addi	sp,sp,4
1000f668:	f800283a 	ret

1000f66c <__malloc_unlock>:
1000f66c:	defffe04 	addi	sp,sp,-8
1000f670:	df000115 	stw	fp,4(sp)
1000f674:	df000104 	addi	fp,sp,4
1000f678:	e13fff15 	stw	r4,-4(fp)
1000f67c:	e037883a 	mov	sp,fp
1000f680:	df000017 	ldw	fp,0(sp)
1000f684:	dec00104 	addi	sp,sp,4
1000f688:	f800283a 	ret

1000f68c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f68c:	defffe04 	addi	sp,sp,-8
1000f690:	dfc00115 	stw	ra,4(sp)
1000f694:	df000015 	stw	fp,0(sp)
1000f698:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f69c:	00840074 	movhi	r2,4097
1000f6a0:	108f8704 	addi	r2,r2,15900
1000f6a4:	10800017 	ldw	r2,0(r2)
1000f6a8:	10000526 	beq	r2,zero,1000f6c0 <alt_get_errno+0x34>
1000f6ac:	00840074 	movhi	r2,4097
1000f6b0:	108f8704 	addi	r2,r2,15900
1000f6b4:	10800017 	ldw	r2,0(r2)
1000f6b8:	103ee83a 	callr	r2
1000f6bc:	00000206 	br	1000f6c8 <alt_get_errno+0x3c>
1000f6c0:	00840074 	movhi	r2,4097
1000f6c4:	10964e04 	addi	r2,r2,22840
}
1000f6c8:	e037883a 	mov	sp,fp
1000f6cc:	dfc00117 	ldw	ra,4(sp)
1000f6d0:	df000017 	ldw	fp,0(sp)
1000f6d4:	dec00204 	addi	sp,sp,8
1000f6d8:	f800283a 	ret

1000f6dc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000f6dc:	defff904 	addi	sp,sp,-28
1000f6e0:	dfc00615 	stw	ra,24(sp)
1000f6e4:	df000515 	stw	fp,20(sp)
1000f6e8:	df000504 	addi	fp,sp,20
1000f6ec:	e13ffd15 	stw	r4,-12(fp)
1000f6f0:	e17ffe15 	stw	r5,-8(fp)
1000f6f4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f6f8:	e0bffd17 	ldw	r2,-12(fp)
1000f6fc:	10000816 	blt	r2,zero,1000f720 <read+0x44>
1000f700:	e13ffd17 	ldw	r4,-12(fp)
1000f704:	01400304 	movi	r5,12
1000f708:	000c8480 	call	1000c848 <__mulsi3>
1000f70c:	1007883a 	mov	r3,r2
1000f710:	00840074 	movhi	r2,4097
1000f714:	108b0404 	addi	r2,r2,11280
1000f718:	1885883a 	add	r2,r3,r2
1000f71c:	00000106 	br	1000f724 <read+0x48>
1000f720:	0005883a 	mov	r2,zero
1000f724:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f728:	e0bffb17 	ldw	r2,-20(fp)
1000f72c:	10002226 	beq	r2,zero,1000f7b8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f730:	e0bffb17 	ldw	r2,-20(fp)
1000f734:	10800217 	ldw	r2,8(r2)
1000f738:	108000cc 	andi	r2,r2,3
1000f73c:	10800060 	cmpeqi	r2,r2,1
1000f740:	1000181e 	bne	r2,zero,1000f7a4 <read+0xc8>
        (fd->dev->read))
1000f744:	e0bffb17 	ldw	r2,-20(fp)
1000f748:	10800017 	ldw	r2,0(r2)
1000f74c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f750:	10001426 	beq	r2,zero,1000f7a4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000f754:	e0bffb17 	ldw	r2,-20(fp)
1000f758:	10800017 	ldw	r2,0(r2)
1000f75c:	10800517 	ldw	r2,20(r2)
1000f760:	e0ffff17 	ldw	r3,-4(fp)
1000f764:	e13ffb17 	ldw	r4,-20(fp)
1000f768:	e17ffe17 	ldw	r5,-8(fp)
1000f76c:	180d883a 	mov	r6,r3
1000f770:	103ee83a 	callr	r2
1000f774:	e0bffc15 	stw	r2,-16(fp)
1000f778:	e0bffc17 	ldw	r2,-16(fp)
1000f77c:	1000070e 	bge	r2,zero,1000f79c <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000f780:	000f68c0 	call	1000f68c <alt_get_errno>
1000f784:	1007883a 	mov	r3,r2
1000f788:	e0bffc17 	ldw	r2,-16(fp)
1000f78c:	0085c83a 	sub	r2,zero,r2
1000f790:	18800015 	stw	r2,0(r3)
          return -1;
1000f794:	00bfffc4 	movi	r2,-1
1000f798:	00000c06 	br	1000f7cc <read+0xf0>
        }
        return rval;
1000f79c:	e0bffc17 	ldw	r2,-16(fp)
1000f7a0:	00000a06 	br	1000f7cc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000f7a4:	000f68c0 	call	1000f68c <alt_get_errno>
1000f7a8:	1007883a 	mov	r3,r2
1000f7ac:	00800344 	movi	r2,13
1000f7b0:	18800015 	stw	r2,0(r3)
1000f7b4:	00000406 	br	1000f7c8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000f7b8:	000f68c0 	call	1000f68c <alt_get_errno>
1000f7bc:	1007883a 	mov	r3,r2
1000f7c0:	00801444 	movi	r2,81
1000f7c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f7c8:	00bfffc4 	movi	r2,-1
}
1000f7cc:	e037883a 	mov	sp,fp
1000f7d0:	dfc00117 	ldw	ra,4(sp)
1000f7d4:	df000017 	ldw	fp,0(sp)
1000f7d8:	dec00204 	addi	sp,sp,8
1000f7dc:	f800283a 	ret

1000f7e0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000f7e0:	defffc04 	addi	sp,sp,-16
1000f7e4:	dfc00315 	stw	ra,12(sp)
1000f7e8:	df000215 	stw	fp,8(sp)
1000f7ec:	dc000115 	stw	r16,4(sp)
1000f7f0:	df000204 	addi	fp,sp,8
1000f7f4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000f7f8:	e0bffe17 	ldw	r2,-8(fp)
1000f7fc:	108000d0 	cmplti	r2,r2,3
1000f800:	1000111e 	bne	r2,zero,1000f848 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000f804:	04040074 	movhi	r16,4097
1000f808:	840b0404 	addi	r16,r16,11280
1000f80c:	e0bffe17 	ldw	r2,-8(fp)
1000f810:	1009883a 	mov	r4,r2
1000f814:	01400304 	movi	r5,12
1000f818:	000c8480 	call	1000c848 <__mulsi3>
1000f81c:	8085883a 	add	r2,r16,r2
1000f820:	10800204 	addi	r2,r2,8
1000f824:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000f828:	04040074 	movhi	r16,4097
1000f82c:	840b0404 	addi	r16,r16,11280
1000f830:	e0bffe17 	ldw	r2,-8(fp)
1000f834:	1009883a 	mov	r4,r2
1000f838:	01400304 	movi	r5,12
1000f83c:	000c8480 	call	1000c848 <__mulsi3>
1000f840:	8085883a 	add	r2,r16,r2
1000f844:	10000015 	stw	zero,0(r2)
  }
}
1000f848:	e6ffff04 	addi	sp,fp,-4
1000f84c:	dfc00217 	ldw	ra,8(sp)
1000f850:	df000117 	ldw	fp,4(sp)
1000f854:	dc000017 	ldw	r16,0(sp)
1000f858:	dec00304 	addi	sp,sp,12
1000f85c:	f800283a 	ret

1000f860 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000f860:	defff904 	addi	sp,sp,-28
1000f864:	df000615 	stw	fp,24(sp)
1000f868:	df000604 	addi	fp,sp,24
1000f86c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f870:	0005303a 	rdctl	r2,status
1000f874:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f878:	e0fffc17 	ldw	r3,-16(fp)
1000f87c:	00bfff84 	movi	r2,-2
1000f880:	1884703a 	and	r2,r3,r2
1000f884:	1001703a 	wrctl	status,r2
  
  return context;
1000f888:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000f88c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000f890:	d0a00c17 	ldw	r2,-32720(gp)
1000f894:	10c000c4 	addi	r3,r2,3
1000f898:	00bfff04 	movi	r2,-4
1000f89c:	1884703a 	and	r2,r3,r2
1000f8a0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000f8a4:	d0e00c17 	ldw	r3,-32720(gp)
1000f8a8:	e0bfff17 	ldw	r2,-4(fp)
1000f8ac:	1887883a 	add	r3,r3,r2
1000f8b0:	00860034 	movhi	r2,6144
1000f8b4:	10800004 	addi	r2,r2,0
1000f8b8:	10c0062e 	bgeu	r2,r3,1000f8d4 <sbrk+0x74>
1000f8bc:	e0bffa17 	ldw	r2,-24(fp)
1000f8c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f8c4:	e0bffd17 	ldw	r2,-12(fp)
1000f8c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000f8cc:	00bfffc4 	movi	r2,-1
1000f8d0:	00000b06 	br	1000f900 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000f8d4:	d0a00c17 	ldw	r2,-32720(gp)
1000f8d8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000f8dc:	d0e00c17 	ldw	r3,-32720(gp)
1000f8e0:	e0bfff17 	ldw	r2,-4(fp)
1000f8e4:	1885883a 	add	r2,r3,r2
1000f8e8:	d0a00c15 	stw	r2,-32720(gp)
1000f8ec:	e0bffa17 	ldw	r2,-24(fp)
1000f8f0:	e0bffe15 	stw	r2,-8(fp)
1000f8f4:	e0bffe17 	ldw	r2,-8(fp)
1000f8f8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000f8fc:	e0bffb17 	ldw	r2,-20(fp)
} 
1000f900:	e037883a 	mov	sp,fp
1000f904:	df000017 	ldw	fp,0(sp)
1000f908:	dec00104 	addi	sp,sp,4
1000f90c:	f800283a 	ret

1000f910 <usleep>:
1000f910:	defffd04 	addi	sp,sp,-12
1000f914:	dfc00215 	stw	ra,8(sp)
1000f918:	df000115 	stw	fp,4(sp)
1000f91c:	df000104 	addi	fp,sp,4
1000f920:	e13fff15 	stw	r4,-4(fp)
1000f924:	e13fff17 	ldw	r4,-4(fp)
1000f928:	00106d00 	call	100106d0 <alt_busy_sleep>
1000f92c:	e037883a 	mov	sp,fp
1000f930:	dfc00117 	ldw	ra,4(sp)
1000f934:	df000017 	ldw	fp,0(sp)
1000f938:	dec00204 	addi	sp,sp,8
1000f93c:	f800283a 	ret

1000f940 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f940:	defffe04 	addi	sp,sp,-8
1000f944:	dfc00115 	stw	ra,4(sp)
1000f948:	df000015 	stw	fp,0(sp)
1000f94c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f950:	00840074 	movhi	r2,4097
1000f954:	108f8704 	addi	r2,r2,15900
1000f958:	10800017 	ldw	r2,0(r2)
1000f95c:	10000526 	beq	r2,zero,1000f974 <alt_get_errno+0x34>
1000f960:	00840074 	movhi	r2,4097
1000f964:	108f8704 	addi	r2,r2,15900
1000f968:	10800017 	ldw	r2,0(r2)
1000f96c:	103ee83a 	callr	r2
1000f970:	00000206 	br	1000f97c <alt_get_errno+0x3c>
1000f974:	00840074 	movhi	r2,4097
1000f978:	10964e04 	addi	r2,r2,22840
}
1000f97c:	e037883a 	mov	sp,fp
1000f980:	dfc00117 	ldw	ra,4(sp)
1000f984:	df000017 	ldw	fp,0(sp)
1000f988:	dec00204 	addi	sp,sp,8
1000f98c:	f800283a 	ret

1000f990 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000f990:	defff904 	addi	sp,sp,-28
1000f994:	dfc00615 	stw	ra,24(sp)
1000f998:	df000515 	stw	fp,20(sp)
1000f99c:	df000504 	addi	fp,sp,20
1000f9a0:	e13ffd15 	stw	r4,-12(fp)
1000f9a4:	e17ffe15 	stw	r5,-8(fp)
1000f9a8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f9ac:	e0bffd17 	ldw	r2,-12(fp)
1000f9b0:	10000816 	blt	r2,zero,1000f9d4 <write+0x44>
1000f9b4:	e13ffd17 	ldw	r4,-12(fp)
1000f9b8:	01400304 	movi	r5,12
1000f9bc:	000c8480 	call	1000c848 <__mulsi3>
1000f9c0:	1007883a 	mov	r3,r2
1000f9c4:	00840074 	movhi	r2,4097
1000f9c8:	108b0404 	addi	r2,r2,11280
1000f9cc:	1885883a 	add	r2,r3,r2
1000f9d0:	00000106 	br	1000f9d8 <write+0x48>
1000f9d4:	0005883a 	mov	r2,zero
1000f9d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f9dc:	e0bffb17 	ldw	r2,-20(fp)
1000f9e0:	10002126 	beq	r2,zero,1000fa68 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000f9e4:	e0bffb17 	ldw	r2,-20(fp)
1000f9e8:	10800217 	ldw	r2,8(r2)
1000f9ec:	108000cc 	andi	r2,r2,3
1000f9f0:	10001826 	beq	r2,zero,1000fa54 <write+0xc4>
1000f9f4:	e0bffb17 	ldw	r2,-20(fp)
1000f9f8:	10800017 	ldw	r2,0(r2)
1000f9fc:	10800617 	ldw	r2,24(r2)
1000fa00:	10001426 	beq	r2,zero,1000fa54 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000fa04:	e0bffb17 	ldw	r2,-20(fp)
1000fa08:	10800017 	ldw	r2,0(r2)
1000fa0c:	10800617 	ldw	r2,24(r2)
1000fa10:	e0ffff17 	ldw	r3,-4(fp)
1000fa14:	e13ffb17 	ldw	r4,-20(fp)
1000fa18:	e17ffe17 	ldw	r5,-8(fp)
1000fa1c:	180d883a 	mov	r6,r3
1000fa20:	103ee83a 	callr	r2
1000fa24:	e0bffc15 	stw	r2,-16(fp)
1000fa28:	e0bffc17 	ldw	r2,-16(fp)
1000fa2c:	1000070e 	bge	r2,zero,1000fa4c <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000fa30:	000f9400 	call	1000f940 <alt_get_errno>
1000fa34:	1007883a 	mov	r3,r2
1000fa38:	e0bffc17 	ldw	r2,-16(fp)
1000fa3c:	0085c83a 	sub	r2,zero,r2
1000fa40:	18800015 	stw	r2,0(r3)
        return -1;
1000fa44:	00bfffc4 	movi	r2,-1
1000fa48:	00000c06 	br	1000fa7c <write+0xec>
      }
      return rval;
1000fa4c:	e0bffc17 	ldw	r2,-16(fp)
1000fa50:	00000a06 	br	1000fa7c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000fa54:	000f9400 	call	1000f940 <alt_get_errno>
1000fa58:	1007883a 	mov	r3,r2
1000fa5c:	00800344 	movi	r2,13
1000fa60:	18800015 	stw	r2,0(r3)
1000fa64:	00000406 	br	1000fa78 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000fa68:	000f9400 	call	1000f940 <alt_get_errno>
1000fa6c:	1007883a 	mov	r3,r2
1000fa70:	00801444 	movi	r2,81
1000fa74:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000fa78:	00bfffc4 	movi	r2,-1
}
1000fa7c:	e037883a 	mov	sp,fp
1000fa80:	dfc00117 	ldw	ra,4(sp)
1000fa84:	df000017 	ldw	fp,0(sp)
1000fa88:	dec00204 	addi	sp,sp,8
1000fa8c:	f800283a 	ret

1000fa90 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000fa90:	defffd04 	addi	sp,sp,-12
1000fa94:	dfc00215 	stw	ra,8(sp)
1000fa98:	df000115 	stw	fp,4(sp)
1000fa9c:	df000104 	addi	fp,sp,4
1000faa0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000faa4:	e13fff17 	ldw	r4,-4(fp)
1000faa8:	01440074 	movhi	r5,4097
1000faac:	294f8404 	addi	r5,r5,15888
1000fab0:	00108940 	call	10010894 <alt_dev_llist_insert>
}
1000fab4:	e037883a 	mov	sp,fp
1000fab8:	dfc00117 	ldw	ra,4(sp)
1000fabc:	df000017 	ldw	fp,0(sp)
1000fac0:	dec00204 	addi	sp,sp,8
1000fac4:	f800283a 	ret

1000fac8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000fac8:	defffd04 	addi	sp,sp,-12
1000facc:	dfc00215 	stw	ra,8(sp)
1000fad0:	df000115 	stw	fp,4(sp)
1000fad4:	df000104 	addi	fp,sp,4
1000fad8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000fadc:	00112740 	call	10011274 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000fae0:	00800044 	movi	r2,1
1000fae4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000fae8:	e037883a 	mov	sp,fp
1000faec:	dfc00117 	ldw	ra,4(sp)
1000faf0:	df000017 	ldw	fp,0(sp)
1000faf4:	dec00204 	addi	sp,sp,8
1000faf8:	f800283a 	ret

1000fafc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000fafc:	defffe04 	addi	sp,sp,-8
1000fb00:	dfc00115 	stw	ra,4(sp)
1000fb04:	df000015 	stw	fp,0(sp)
1000fb08:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000fb0c:	01040074 	movhi	r4,4097
1000fb10:	210b6e04 	addi	r4,r4,11704
1000fb14:	000b883a 	mov	r5,zero
1000fb18:	01800144 	movi	r6,5
1000fb1c:	000fca80 	call	1000fca8 <altera_avalon_jtag_uart_init>
1000fb20:	01040074 	movhi	r4,4097
1000fb24:	210b6404 	addi	r4,r4,11664
1000fb28:	000fa900 	call	1000fa90 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000fb2c:	0001883a 	nop
}
1000fb30:	e037883a 	mov	sp,fp
1000fb34:	dfc00117 	ldw	ra,4(sp)
1000fb38:	df000017 	ldw	fp,0(sp)
1000fb3c:	dec00204 	addi	sp,sp,8
1000fb40:	f800283a 	ret

1000fb44 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000fb44:	defffa04 	addi	sp,sp,-24
1000fb48:	dfc00515 	stw	ra,20(sp)
1000fb4c:	df000415 	stw	fp,16(sp)
1000fb50:	df000404 	addi	fp,sp,16
1000fb54:	e13ffd15 	stw	r4,-12(fp)
1000fb58:	e17ffe15 	stw	r5,-8(fp)
1000fb5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fb60:	e0bffd17 	ldw	r2,-12(fp)
1000fb64:	10800017 	ldw	r2,0(r2)
1000fb68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000fb6c:	e0bffc17 	ldw	r2,-16(fp)
1000fb70:	10c00a04 	addi	r3,r2,40
1000fb74:	e0bffd17 	ldw	r2,-12(fp)
1000fb78:	10800217 	ldw	r2,8(r2)
1000fb7c:	1809883a 	mov	r4,r3
1000fb80:	e17ffe17 	ldw	r5,-8(fp)
1000fb84:	e1bfff17 	ldw	r6,-4(fp)
1000fb88:	100f883a 	mov	r7,r2
1000fb8c:	001016c0 	call	1001016c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000fb90:	e037883a 	mov	sp,fp
1000fb94:	dfc00117 	ldw	ra,4(sp)
1000fb98:	df000017 	ldw	fp,0(sp)
1000fb9c:	dec00204 	addi	sp,sp,8
1000fba0:	f800283a 	ret

1000fba4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000fba4:	defffa04 	addi	sp,sp,-24
1000fba8:	dfc00515 	stw	ra,20(sp)
1000fbac:	df000415 	stw	fp,16(sp)
1000fbb0:	df000404 	addi	fp,sp,16
1000fbb4:	e13ffd15 	stw	r4,-12(fp)
1000fbb8:	e17ffe15 	stw	r5,-8(fp)
1000fbbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fbc0:	e0bffd17 	ldw	r2,-12(fp)
1000fbc4:	10800017 	ldw	r2,0(r2)
1000fbc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000fbcc:	e0bffc17 	ldw	r2,-16(fp)
1000fbd0:	10c00a04 	addi	r3,r2,40
1000fbd4:	e0bffd17 	ldw	r2,-12(fp)
1000fbd8:	10800217 	ldw	r2,8(r2)
1000fbdc:	1809883a 	mov	r4,r3
1000fbe0:	e17ffe17 	ldw	r5,-8(fp)
1000fbe4:	e1bfff17 	ldw	r6,-4(fp)
1000fbe8:	100f883a 	mov	r7,r2
1000fbec:	00103780 	call	10010378 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000fbf0:	e037883a 	mov	sp,fp
1000fbf4:	dfc00117 	ldw	ra,4(sp)
1000fbf8:	df000017 	ldw	fp,0(sp)
1000fbfc:	dec00204 	addi	sp,sp,8
1000fc00:	f800283a 	ret

1000fc04 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000fc04:	defffc04 	addi	sp,sp,-16
1000fc08:	dfc00315 	stw	ra,12(sp)
1000fc0c:	df000215 	stw	fp,8(sp)
1000fc10:	df000204 	addi	fp,sp,8
1000fc14:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fc18:	e0bfff17 	ldw	r2,-4(fp)
1000fc1c:	10800017 	ldw	r2,0(r2)
1000fc20:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000fc24:	e0bffe17 	ldw	r2,-8(fp)
1000fc28:	10c00a04 	addi	r3,r2,40
1000fc2c:	e0bfff17 	ldw	r2,-4(fp)
1000fc30:	10800217 	ldw	r2,8(r2)
1000fc34:	1809883a 	mov	r4,r3
1000fc38:	100b883a 	mov	r5,r2
1000fc3c:	00100180 	call	10010018 <altera_avalon_jtag_uart_close>
}
1000fc40:	e037883a 	mov	sp,fp
1000fc44:	dfc00117 	ldw	ra,4(sp)
1000fc48:	df000017 	ldw	fp,0(sp)
1000fc4c:	dec00204 	addi	sp,sp,8
1000fc50:	f800283a 	ret

1000fc54 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000fc54:	defffa04 	addi	sp,sp,-24
1000fc58:	dfc00515 	stw	ra,20(sp)
1000fc5c:	df000415 	stw	fp,16(sp)
1000fc60:	df000404 	addi	fp,sp,16
1000fc64:	e13ffd15 	stw	r4,-12(fp)
1000fc68:	e17ffe15 	stw	r5,-8(fp)
1000fc6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000fc70:	e0bffd17 	ldw	r2,-12(fp)
1000fc74:	10800017 	ldw	r2,0(r2)
1000fc78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000fc7c:	e0bffc17 	ldw	r2,-16(fp)
1000fc80:	10800a04 	addi	r2,r2,40
1000fc84:	1009883a 	mov	r4,r2
1000fc88:	e17ffe17 	ldw	r5,-8(fp)
1000fc8c:	e1bfff17 	ldw	r6,-4(fp)
1000fc90:	00100800 	call	10010080 <altera_avalon_jtag_uart_ioctl>
}
1000fc94:	e037883a 	mov	sp,fp
1000fc98:	dfc00117 	ldw	ra,4(sp)
1000fc9c:	df000017 	ldw	fp,0(sp)
1000fca0:	dec00204 	addi	sp,sp,8
1000fca4:	f800283a 	ret

1000fca8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000fca8:	defffa04 	addi	sp,sp,-24
1000fcac:	dfc00515 	stw	ra,20(sp)
1000fcb0:	df000415 	stw	fp,16(sp)
1000fcb4:	df000404 	addi	fp,sp,16
1000fcb8:	e13ffd15 	stw	r4,-12(fp)
1000fcbc:	e17ffe15 	stw	r5,-8(fp)
1000fcc0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fcc4:	e0bffd17 	ldw	r2,-12(fp)
1000fcc8:	00c00044 	movi	r3,1
1000fccc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000fcd0:	e0bffd17 	ldw	r2,-12(fp)
1000fcd4:	10800017 	ldw	r2,0(r2)
1000fcd8:	10800104 	addi	r2,r2,4
1000fcdc:	1007883a 	mov	r3,r2
1000fce0:	e0bffd17 	ldw	r2,-12(fp)
1000fce4:	10800817 	ldw	r2,32(r2)
1000fce8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000fcec:	e0fffe17 	ldw	r3,-8(fp)
1000fcf0:	e0bfff17 	ldw	r2,-4(fp)
1000fcf4:	d8000015 	stw	zero,0(sp)
1000fcf8:	1809883a 	mov	r4,r3
1000fcfc:	100b883a 	mov	r5,r2
1000fd00:	01840074 	movhi	r6,4097
1000fd04:	31bf5b04 	addi	r6,r6,-660
1000fd08:	e1fffd17 	ldw	r7,-12(fp)
1000fd0c:	0010a0c0 	call	10010a0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000fd10:	e0bffd17 	ldw	r2,-12(fp)
1000fd14:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000fd18:	e0bffd17 	ldw	r2,-12(fp)
1000fd1c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000fd20:	00840074 	movhi	r2,4097
1000fd24:	10965304 	addi	r2,r2,22860
1000fd28:	10800017 	ldw	r2,0(r2)
1000fd2c:	1809883a 	mov	r4,r3
1000fd30:	100b883a 	mov	r5,r2
1000fd34:	01840074 	movhi	r6,4097
1000fd38:	31bfdc04 	addi	r6,r6,-144
1000fd3c:	e1fffd17 	ldw	r7,-12(fp)
1000fd40:	00105900 	call	10010590 <alt_alarm_start>
1000fd44:	1000040e 	bge	r2,zero,1000fd58 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000fd48:	e0fffd17 	ldw	r3,-12(fp)
1000fd4c:	00a00034 	movhi	r2,32768
1000fd50:	10bfffc4 	addi	r2,r2,-1
1000fd54:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000fd58:	e037883a 	mov	sp,fp
1000fd5c:	dfc00117 	ldw	ra,4(sp)
1000fd60:	df000017 	ldw	fp,0(sp)
1000fd64:	dec00204 	addi	sp,sp,8
1000fd68:	f800283a 	ret

1000fd6c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000fd6c:	defff804 	addi	sp,sp,-32
1000fd70:	df000715 	stw	fp,28(sp)
1000fd74:	df000704 	addi	fp,sp,28
1000fd78:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000fd7c:	e0bfff17 	ldw	r2,-4(fp)
1000fd80:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000fd84:	e0bffb17 	ldw	r2,-20(fp)
1000fd88:	10800017 	ldw	r2,0(r2)
1000fd8c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000fd90:	e0bffc17 	ldw	r2,-16(fp)
1000fd94:	10800104 	addi	r2,r2,4
1000fd98:	10800037 	ldwio	r2,0(r2)
1000fd9c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000fda0:	e0bffd17 	ldw	r2,-12(fp)
1000fda4:	1080c00c 	andi	r2,r2,768
1000fda8:	1000011e 	bne	r2,zero,1000fdb0 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000fdac:	00006c06 	br	1000ff60 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000fdb0:	e0bffd17 	ldw	r2,-12(fp)
1000fdb4:	1080400c 	andi	r2,r2,256
1000fdb8:	10003426 	beq	r2,zero,1000fe8c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000fdbc:	00800074 	movhi	r2,1
1000fdc0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fdc4:	e0bffb17 	ldw	r2,-20(fp)
1000fdc8:	10800a17 	ldw	r2,40(r2)
1000fdcc:	10800044 	addi	r2,r2,1
1000fdd0:	1081ffcc 	andi	r2,r2,2047
1000fdd4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000fdd8:	e0bffb17 	ldw	r2,-20(fp)
1000fddc:	10c00b17 	ldw	r3,44(r2)
1000fde0:	e0bffe17 	ldw	r2,-8(fp)
1000fde4:	1880011e 	bne	r3,r2,1000fdec <altera_avalon_jtag_uart_irq+0x80>
          break;
1000fde8:	00001606 	br	1000fe44 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000fdec:	e0bffc17 	ldw	r2,-16(fp)
1000fdf0:	10800037 	ldwio	r2,0(r2)
1000fdf4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000fdf8:	e0bff917 	ldw	r2,-28(fp)
1000fdfc:	10a0000c 	andi	r2,r2,32768
1000fe00:	1000011e 	bne	r2,zero,1000fe08 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000fe04:	00000f06 	br	1000fe44 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000fe08:	e0bffb17 	ldw	r2,-20(fp)
1000fe0c:	10800a17 	ldw	r2,40(r2)
1000fe10:	e0fff917 	ldw	r3,-28(fp)
1000fe14:	1809883a 	mov	r4,r3
1000fe18:	e0fffb17 	ldw	r3,-20(fp)
1000fe1c:	1885883a 	add	r2,r3,r2
1000fe20:	10800e04 	addi	r2,r2,56
1000fe24:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fe28:	e0bffb17 	ldw	r2,-20(fp)
1000fe2c:	10800a17 	ldw	r2,40(r2)
1000fe30:	10800044 	addi	r2,r2,1
1000fe34:	10c1ffcc 	andi	r3,r2,2047
1000fe38:	e0bffb17 	ldw	r2,-20(fp)
1000fe3c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000fe40:	003fe006 	br	1000fdc4 <__alt_data_end+0xf800fdc4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000fe44:	e0bff917 	ldw	r2,-28(fp)
1000fe48:	10bfffec 	andhi	r2,r2,65535
1000fe4c:	10000f26 	beq	r2,zero,1000fe8c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fe50:	e0bffb17 	ldw	r2,-20(fp)
1000fe54:	10c00817 	ldw	r3,32(r2)
1000fe58:	00bfff84 	movi	r2,-2
1000fe5c:	1886703a 	and	r3,r3,r2
1000fe60:	e0bffb17 	ldw	r2,-20(fp)
1000fe64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000fe68:	e0bffc17 	ldw	r2,-16(fp)
1000fe6c:	10800104 	addi	r2,r2,4
1000fe70:	1007883a 	mov	r3,r2
1000fe74:	e0bffb17 	ldw	r2,-20(fp)
1000fe78:	10800817 	ldw	r2,32(r2)
1000fe7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000fe80:	e0bffc17 	ldw	r2,-16(fp)
1000fe84:	10800104 	addi	r2,r2,4
1000fe88:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000fe8c:	e0bffd17 	ldw	r2,-12(fp)
1000fe90:	1080800c 	andi	r2,r2,512
1000fe94:	10003126 	beq	r2,zero,1000ff5c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000fe98:	e0bffd17 	ldw	r2,-12(fp)
1000fe9c:	1004d43a 	srli	r2,r2,16
1000fea0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000fea4:	00001406 	br	1000fef8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000fea8:	e0bffc17 	ldw	r2,-16(fp)
1000feac:	e0fffb17 	ldw	r3,-20(fp)
1000feb0:	18c00d17 	ldw	r3,52(r3)
1000feb4:	e13ffb17 	ldw	r4,-20(fp)
1000feb8:	20c7883a 	add	r3,r4,r3
1000febc:	18c20e04 	addi	r3,r3,2104
1000fec0:	18c00003 	ldbu	r3,0(r3)
1000fec4:	18c03fcc 	andi	r3,r3,255
1000fec8:	18c0201c 	xori	r3,r3,128
1000fecc:	18ffe004 	addi	r3,r3,-128
1000fed0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fed4:	e0bffb17 	ldw	r2,-20(fp)
1000fed8:	10800d17 	ldw	r2,52(r2)
1000fedc:	10800044 	addi	r2,r2,1
1000fee0:	10c1ffcc 	andi	r3,r2,2047
1000fee4:	e0bffb17 	ldw	r2,-20(fp)
1000fee8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000feec:	e0bffa17 	ldw	r2,-24(fp)
1000fef0:	10bfffc4 	addi	r2,r2,-1
1000fef4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000fef8:	e0bffa17 	ldw	r2,-24(fp)
1000fefc:	10000526 	beq	r2,zero,1000ff14 <altera_avalon_jtag_uart_irq+0x1a8>
1000ff00:	e0bffb17 	ldw	r2,-20(fp)
1000ff04:	10c00d17 	ldw	r3,52(r2)
1000ff08:	e0bffb17 	ldw	r2,-20(fp)
1000ff0c:	10800c17 	ldw	r2,48(r2)
1000ff10:	18bfe51e 	bne	r3,r2,1000fea8 <__alt_data_end+0xf800fea8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000ff14:	e0bffa17 	ldw	r2,-24(fp)
1000ff18:	10001026 	beq	r2,zero,1000ff5c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000ff1c:	e0bffb17 	ldw	r2,-20(fp)
1000ff20:	10c00817 	ldw	r3,32(r2)
1000ff24:	00bfff44 	movi	r2,-3
1000ff28:	1886703a 	and	r3,r3,r2
1000ff2c:	e0bffb17 	ldw	r2,-20(fp)
1000ff30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000ff34:	e0bffb17 	ldw	r2,-20(fp)
1000ff38:	10800017 	ldw	r2,0(r2)
1000ff3c:	10800104 	addi	r2,r2,4
1000ff40:	1007883a 	mov	r3,r2
1000ff44:	e0bffb17 	ldw	r2,-20(fp)
1000ff48:	10800817 	ldw	r2,32(r2)
1000ff4c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000ff50:	e0bffc17 	ldw	r2,-16(fp)
1000ff54:	10800104 	addi	r2,r2,4
1000ff58:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000ff5c:	003f8c06 	br	1000fd90 <__alt_data_end+0xf800fd90>
}
1000ff60:	e037883a 	mov	sp,fp
1000ff64:	df000017 	ldw	fp,0(sp)
1000ff68:	dec00104 	addi	sp,sp,4
1000ff6c:	f800283a 	ret

1000ff70 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000ff70:	defff804 	addi	sp,sp,-32
1000ff74:	df000715 	stw	fp,28(sp)
1000ff78:	df000704 	addi	fp,sp,28
1000ff7c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000ff80:	e0bffb17 	ldw	r2,-20(fp)
1000ff84:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000ff88:	e0bff917 	ldw	r2,-28(fp)
1000ff8c:	10800017 	ldw	r2,0(r2)
1000ff90:	10800104 	addi	r2,r2,4
1000ff94:	10800037 	ldwio	r2,0(r2)
1000ff98:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000ff9c:	e0bffa17 	ldw	r2,-24(fp)
1000ffa0:	1081000c 	andi	r2,r2,1024
1000ffa4:	10000b26 	beq	r2,zero,1000ffd4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000ffa8:	e0bff917 	ldw	r2,-28(fp)
1000ffac:	10800017 	ldw	r2,0(r2)
1000ffb0:	10800104 	addi	r2,r2,4
1000ffb4:	1007883a 	mov	r3,r2
1000ffb8:	e0bff917 	ldw	r2,-28(fp)
1000ffbc:	10800817 	ldw	r2,32(r2)
1000ffc0:	10810014 	ori	r2,r2,1024
1000ffc4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000ffc8:	e0bff917 	ldw	r2,-28(fp)
1000ffcc:	10000915 	stw	zero,36(r2)
1000ffd0:	00000a06 	br	1000fffc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000ffd4:	e0bff917 	ldw	r2,-28(fp)
1000ffd8:	10c00917 	ldw	r3,36(r2)
1000ffdc:	00a00034 	movhi	r2,32768
1000ffe0:	10bfff04 	addi	r2,r2,-4
1000ffe4:	10c00536 	bltu	r2,r3,1000fffc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000ffe8:	e0bff917 	ldw	r2,-28(fp)
1000ffec:	10800917 	ldw	r2,36(r2)
1000fff0:	10c00044 	addi	r3,r2,1
1000fff4:	e0bff917 	ldw	r2,-28(fp)
1000fff8:	10c00915 	stw	r3,36(r2)
1000fffc:	00840074 	movhi	r2,4097
10010000:	10965304 	addi	r2,r2,22860
10010004:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10010008:	e037883a 	mov	sp,fp
1001000c:	df000017 	ldw	fp,0(sp)
10010010:	dec00104 	addi	sp,sp,4
10010014:	f800283a 	ret

10010018 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10010018:	defffd04 	addi	sp,sp,-12
1001001c:	df000215 	stw	fp,8(sp)
10010020:	df000204 	addi	fp,sp,8
10010024:	e13ffe15 	stw	r4,-8(fp)
10010028:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1001002c:	00000506 	br	10010044 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010030:	e0bfff17 	ldw	r2,-4(fp)
10010034:	1090000c 	andi	r2,r2,16384
10010038:	10000226 	beq	r2,zero,10010044 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1001003c:	00bffd44 	movi	r2,-11
10010040:	00000b06 	br	10010070 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010044:	e0bffe17 	ldw	r2,-8(fp)
10010048:	10c00d17 	ldw	r3,52(r2)
1001004c:	e0bffe17 	ldw	r2,-8(fp)
10010050:	10800c17 	ldw	r2,48(r2)
10010054:	18800526 	beq	r3,r2,1001006c <altera_avalon_jtag_uart_close+0x54>
10010058:	e0bffe17 	ldw	r2,-8(fp)
1001005c:	10c00917 	ldw	r3,36(r2)
10010060:	e0bffe17 	ldw	r2,-8(fp)
10010064:	10800117 	ldw	r2,4(r2)
10010068:	18bff136 	bltu	r3,r2,10010030 <__alt_data_end+0xf8010030>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1001006c:	0005883a 	mov	r2,zero
}
10010070:	e037883a 	mov	sp,fp
10010074:	df000017 	ldw	fp,0(sp)
10010078:	dec00104 	addi	sp,sp,4
1001007c:	f800283a 	ret

10010080 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010080:	defffa04 	addi	sp,sp,-24
10010084:	df000515 	stw	fp,20(sp)
10010088:	df000504 	addi	fp,sp,20
1001008c:	e13ffd15 	stw	r4,-12(fp)
10010090:	e17ffe15 	stw	r5,-8(fp)
10010094:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10010098:	00bff9c4 	movi	r2,-25
1001009c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100100a0:	e0bffe17 	ldw	r2,-8(fp)
100100a4:	10da8060 	cmpeqi	r3,r2,27137
100100a8:	1800031e 	bne	r3,zero,100100b8 <altera_avalon_jtag_uart_ioctl+0x38>
100100ac:	109a80a0 	cmpeqi	r2,r2,27138
100100b0:	1000191e 	bne	r2,zero,10010118 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
100100b4:	00002806 	br	10010158 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100100b8:	e0bffd17 	ldw	r2,-12(fp)
100100bc:	10c00117 	ldw	r3,4(r2)
100100c0:	00a00034 	movhi	r2,32768
100100c4:	10bfffc4 	addi	r2,r2,-1
100100c8:	18801226 	beq	r3,r2,10010114 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
100100cc:	e0bfff17 	ldw	r2,-4(fp)
100100d0:	10800017 	ldw	r2,0(r2)
100100d4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100100d8:	e0bffc17 	ldw	r2,-16(fp)
100100dc:	10800090 	cmplti	r2,r2,2
100100e0:	1000061e 	bne	r2,zero,100100fc <altera_avalon_jtag_uart_ioctl+0x7c>
100100e4:	e0fffc17 	ldw	r3,-16(fp)
100100e8:	00a00034 	movhi	r2,32768
100100ec:	10bfffc4 	addi	r2,r2,-1
100100f0:	18800226 	beq	r3,r2,100100fc <altera_avalon_jtag_uart_ioctl+0x7c>
100100f4:	e0bffc17 	ldw	r2,-16(fp)
100100f8:	00000206 	br	10010104 <altera_avalon_jtag_uart_ioctl+0x84>
100100fc:	00a00034 	movhi	r2,32768
10010100:	10bfff84 	addi	r2,r2,-2
10010104:	e0fffd17 	ldw	r3,-12(fp)
10010108:	18800115 	stw	r2,4(r3)
      rc = 0;
1001010c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010110:	00001106 	br	10010158 <altera_avalon_jtag_uart_ioctl+0xd8>
10010114:	00001006 	br	10010158 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10010118:	e0bffd17 	ldw	r2,-12(fp)
1001011c:	10c00117 	ldw	r3,4(r2)
10010120:	00a00034 	movhi	r2,32768
10010124:	10bfffc4 	addi	r2,r2,-1
10010128:	18800a26 	beq	r3,r2,10010154 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1001012c:	e0bffd17 	ldw	r2,-12(fp)
10010130:	10c00917 	ldw	r3,36(r2)
10010134:	e0bffd17 	ldw	r2,-12(fp)
10010138:	10800117 	ldw	r2,4(r2)
1001013c:	1885803a 	cmpltu	r2,r3,r2
10010140:	10c03fcc 	andi	r3,r2,255
10010144:	e0bfff17 	ldw	r2,-4(fp)
10010148:	10c00015 	stw	r3,0(r2)
      rc = 0;
1001014c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010150:	00000006 	br	10010154 <altera_avalon_jtag_uart_ioctl+0xd4>
10010154:	0001883a 	nop

  default:
    break;
  }

  return rc;
10010158:	e0bffb17 	ldw	r2,-20(fp)
}
1001015c:	e037883a 	mov	sp,fp
10010160:	df000017 	ldw	fp,0(sp)
10010164:	dec00104 	addi	sp,sp,4
10010168:	f800283a 	ret

1001016c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1001016c:	defff304 	addi	sp,sp,-52
10010170:	dfc00c15 	stw	ra,48(sp)
10010174:	df000b15 	stw	fp,44(sp)
10010178:	df000b04 	addi	fp,sp,44
1001017c:	e13ffc15 	stw	r4,-16(fp)
10010180:	e17ffd15 	stw	r5,-12(fp)
10010184:	e1bffe15 	stw	r6,-8(fp)
10010188:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1001018c:	e0bffd17 	ldw	r2,-12(fp)
10010190:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010194:	00004906 	br	100102bc <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10010198:	e0bffc17 	ldw	r2,-16(fp)
1001019c:	10800a17 	ldw	r2,40(r2)
100101a0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100101a4:	e0bffc17 	ldw	r2,-16(fp)
100101a8:	10800b17 	ldw	r2,44(r2)
100101ac:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100101b0:	e0fff717 	ldw	r3,-36(fp)
100101b4:	e0bff817 	ldw	r2,-32(fp)
100101b8:	18800536 	bltu	r3,r2,100101d0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100101bc:	e0fff717 	ldw	r3,-36(fp)
100101c0:	e0bff817 	ldw	r2,-32(fp)
100101c4:	1885c83a 	sub	r2,r3,r2
100101c8:	e0bff615 	stw	r2,-40(fp)
100101cc:	00000406 	br	100101e0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100101d0:	00c20004 	movi	r3,2048
100101d4:	e0bff817 	ldw	r2,-32(fp)
100101d8:	1885c83a 	sub	r2,r3,r2
100101dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100101e0:	e0bff617 	ldw	r2,-40(fp)
100101e4:	1000011e 	bne	r2,zero,100101ec <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
100101e8:	00001d06 	br	10010260 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
100101ec:	e0fffe17 	ldw	r3,-8(fp)
100101f0:	e0bff617 	ldw	r2,-40(fp)
100101f4:	1880022e 	bgeu	r3,r2,10010200 <altera_avalon_jtag_uart_read+0x94>
        n = space;
100101f8:	e0bffe17 	ldw	r2,-8(fp)
100101fc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10010200:	e0bff817 	ldw	r2,-32(fp)
10010204:	10800e04 	addi	r2,r2,56
10010208:	e0fffc17 	ldw	r3,-16(fp)
1001020c:	1885883a 	add	r2,r3,r2
10010210:	e13ff517 	ldw	r4,-44(fp)
10010214:	100b883a 	mov	r5,r2
10010218:	e1bff617 	ldw	r6,-40(fp)
1001021c:	0007ec40 	call	10007ec4 <memcpy>
      ptr   += n;
10010220:	e0fff517 	ldw	r3,-44(fp)
10010224:	e0bff617 	ldw	r2,-40(fp)
10010228:	1885883a 	add	r2,r3,r2
1001022c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010230:	e0fffe17 	ldw	r3,-8(fp)
10010234:	e0bff617 	ldw	r2,-40(fp)
10010238:	1885c83a 	sub	r2,r3,r2
1001023c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010240:	e0fff817 	ldw	r3,-32(fp)
10010244:	e0bff617 	ldw	r2,-40(fp)
10010248:	1885883a 	add	r2,r3,r2
1001024c:	10c1ffcc 	andi	r3,r2,2047
10010250:	e0bffc17 	ldw	r2,-16(fp)
10010254:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010258:	e0bffe17 	ldw	r2,-8(fp)
1001025c:	00bfce16 	blt	zero,r2,10010198 <__alt_data_end+0xf8010198>

    /* If we read any data then return it */
    if (ptr != buffer)
10010260:	e0fff517 	ldw	r3,-44(fp)
10010264:	e0bffd17 	ldw	r2,-12(fp)
10010268:	18800126 	beq	r3,r2,10010270 <altera_avalon_jtag_uart_read+0x104>
      break;
1001026c:	00001506 	br	100102c4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010270:	e0bfff17 	ldw	r2,-4(fp)
10010274:	1090000c 	andi	r2,r2,16384
10010278:	10000126 	beq	r2,zero,10010280 <altera_avalon_jtag_uart_read+0x114>
      break;
1001027c:	00001106 	br	100102c4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010280:	0001883a 	nop
10010284:	e0bffc17 	ldw	r2,-16(fp)
10010288:	10c00a17 	ldw	r3,40(r2)
1001028c:	e0bff717 	ldw	r2,-36(fp)
10010290:	1880051e 	bne	r3,r2,100102a8 <altera_avalon_jtag_uart_read+0x13c>
10010294:	e0bffc17 	ldw	r2,-16(fp)
10010298:	10c00917 	ldw	r3,36(r2)
1001029c:	e0bffc17 	ldw	r2,-16(fp)
100102a0:	10800117 	ldw	r2,4(r2)
100102a4:	18bff736 	bltu	r3,r2,10010284 <__alt_data_end+0xf8010284>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100102a8:	e0bffc17 	ldw	r2,-16(fp)
100102ac:	10c00a17 	ldw	r3,40(r2)
100102b0:	e0bff717 	ldw	r2,-36(fp)
100102b4:	1880011e 	bne	r3,r2,100102bc <altera_avalon_jtag_uart_read+0x150>
      break;
100102b8:	00000206 	br	100102c4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100102bc:	e0bffe17 	ldw	r2,-8(fp)
100102c0:	00bfb516 	blt	zero,r2,10010198 <__alt_data_end+0xf8010198>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100102c4:	e0fff517 	ldw	r3,-44(fp)
100102c8:	e0bffd17 	ldw	r2,-12(fp)
100102cc:	18801826 	beq	r3,r2,10010330 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100102d0:	0005303a 	rdctl	r2,status
100102d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100102d8:	e0fffa17 	ldw	r3,-24(fp)
100102dc:	00bfff84 	movi	r2,-2
100102e0:	1884703a 	and	r2,r3,r2
100102e4:	1001703a 	wrctl	status,r2
  
  return context;
100102e8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100102ec:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100102f0:	e0bffc17 	ldw	r2,-16(fp)
100102f4:	10800817 	ldw	r2,32(r2)
100102f8:	10c00054 	ori	r3,r2,1
100102fc:	e0bffc17 	ldw	r2,-16(fp)
10010300:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010304:	e0bffc17 	ldw	r2,-16(fp)
10010308:	10800017 	ldw	r2,0(r2)
1001030c:	10800104 	addi	r2,r2,4
10010310:	1007883a 	mov	r3,r2
10010314:	e0bffc17 	ldw	r2,-16(fp)
10010318:	10800817 	ldw	r2,32(r2)
1001031c:	18800035 	stwio	r2,0(r3)
10010320:	e0bff917 	ldw	r2,-28(fp)
10010324:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010328:	e0bffb17 	ldw	r2,-20(fp)
1001032c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010330:	e0fff517 	ldw	r3,-44(fp)
10010334:	e0bffd17 	ldw	r2,-12(fp)
10010338:	18800426 	beq	r3,r2,1001034c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1001033c:	e0fff517 	ldw	r3,-44(fp)
10010340:	e0bffd17 	ldw	r2,-12(fp)
10010344:	1885c83a 	sub	r2,r3,r2
10010348:	00000606 	br	10010364 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1001034c:	e0bfff17 	ldw	r2,-4(fp)
10010350:	1090000c 	andi	r2,r2,16384
10010354:	10000226 	beq	r2,zero,10010360 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10010358:	00bffd44 	movi	r2,-11
1001035c:	00000106 	br	10010364 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10010360:	00bffec4 	movi	r2,-5
}
10010364:	e037883a 	mov	sp,fp
10010368:	dfc00117 	ldw	ra,4(sp)
1001036c:	df000017 	ldw	fp,0(sp)
10010370:	dec00204 	addi	sp,sp,8
10010374:	f800283a 	ret

10010378 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010378:	defff304 	addi	sp,sp,-52
1001037c:	dfc00c15 	stw	ra,48(sp)
10010380:	df000b15 	stw	fp,44(sp)
10010384:	df000b04 	addi	fp,sp,44
10010388:	e13ffc15 	stw	r4,-16(fp)
1001038c:	e17ffd15 	stw	r5,-12(fp)
10010390:	e1bffe15 	stw	r6,-8(fp)
10010394:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10010398:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1001039c:	e0bffd17 	ldw	r2,-12(fp)
100103a0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100103a4:	00003806 	br	10010488 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100103a8:	e0bffc17 	ldw	r2,-16(fp)
100103ac:	10800c17 	ldw	r2,48(r2)
100103b0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
100103b4:	e0bffc17 	ldw	r2,-16(fp)
100103b8:	10800d17 	ldw	r2,52(r2)
100103bc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100103c0:	e0fff817 	ldw	r3,-32(fp)
100103c4:	e0bff517 	ldw	r2,-44(fp)
100103c8:	1880062e 	bgeu	r3,r2,100103e4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100103cc:	e0fff517 	ldw	r3,-44(fp)
100103d0:	e0bff817 	ldw	r2,-32(fp)
100103d4:	1885c83a 	sub	r2,r3,r2
100103d8:	10bfffc4 	addi	r2,r2,-1
100103dc:	e0bff615 	stw	r2,-40(fp)
100103e0:	00000b06 	br	10010410 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100103e4:	e0bff517 	ldw	r2,-44(fp)
100103e8:	10000526 	beq	r2,zero,10010400 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100103ec:	00c20004 	movi	r3,2048
100103f0:	e0bff817 	ldw	r2,-32(fp)
100103f4:	1885c83a 	sub	r2,r3,r2
100103f8:	e0bff615 	stw	r2,-40(fp)
100103fc:	00000406 	br	10010410 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10010400:	00c1ffc4 	movi	r3,2047
10010404:	e0bff817 	ldw	r2,-32(fp)
10010408:	1885c83a 	sub	r2,r3,r2
1001040c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10010410:	e0bff617 	ldw	r2,-40(fp)
10010414:	1000011e 	bne	r2,zero,1001041c <altera_avalon_jtag_uart_write+0xa4>
        break;
10010418:	00001d06 	br	10010490 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1001041c:	e0fffe17 	ldw	r3,-8(fp)
10010420:	e0bff617 	ldw	r2,-40(fp)
10010424:	1880022e 	bgeu	r3,r2,10010430 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10010428:	e0bffe17 	ldw	r2,-8(fp)
1001042c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10010430:	e0bff817 	ldw	r2,-32(fp)
10010434:	10820e04 	addi	r2,r2,2104
10010438:	e0fffc17 	ldw	r3,-16(fp)
1001043c:	1885883a 	add	r2,r3,r2
10010440:	1009883a 	mov	r4,r2
10010444:	e17ffd17 	ldw	r5,-12(fp)
10010448:	e1bff617 	ldw	r6,-40(fp)
1001044c:	0007ec40 	call	10007ec4 <memcpy>
      ptr   += n;
10010450:	e0fffd17 	ldw	r3,-12(fp)
10010454:	e0bff617 	ldw	r2,-40(fp)
10010458:	1885883a 	add	r2,r3,r2
1001045c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10010460:	e0fffe17 	ldw	r3,-8(fp)
10010464:	e0bff617 	ldw	r2,-40(fp)
10010468:	1885c83a 	sub	r2,r3,r2
1001046c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010470:	e0fff817 	ldw	r3,-32(fp)
10010474:	e0bff617 	ldw	r2,-40(fp)
10010478:	1885883a 	add	r2,r3,r2
1001047c:	10c1ffcc 	andi	r3,r2,2047
10010480:	e0bffc17 	ldw	r2,-16(fp)
10010484:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010488:	e0bffe17 	ldw	r2,-8(fp)
1001048c:	00bfc616 	blt	zero,r2,100103a8 <__alt_data_end+0xf80103a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010490:	0005303a 	rdctl	r2,status
10010494:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010498:	e0fffa17 	ldw	r3,-24(fp)
1001049c:	00bfff84 	movi	r2,-2
100104a0:	1884703a 	and	r2,r3,r2
100104a4:	1001703a 	wrctl	status,r2
  
  return context;
100104a8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100104ac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100104b0:	e0bffc17 	ldw	r2,-16(fp)
100104b4:	10800817 	ldw	r2,32(r2)
100104b8:	10c00094 	ori	r3,r2,2
100104bc:	e0bffc17 	ldw	r2,-16(fp)
100104c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100104c4:	e0bffc17 	ldw	r2,-16(fp)
100104c8:	10800017 	ldw	r2,0(r2)
100104cc:	10800104 	addi	r2,r2,4
100104d0:	1007883a 	mov	r3,r2
100104d4:	e0bffc17 	ldw	r2,-16(fp)
100104d8:	10800817 	ldw	r2,32(r2)
100104dc:	18800035 	stwio	r2,0(r3)
100104e0:	e0bff917 	ldw	r2,-28(fp)
100104e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100104e8:	e0bffb17 	ldw	r2,-20(fp)
100104ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100104f0:	e0bffe17 	ldw	r2,-8(fp)
100104f4:	0080120e 	bge	zero,r2,10010540 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
100104f8:	e0bfff17 	ldw	r2,-4(fp)
100104fc:	1090000c 	andi	r2,r2,16384
10010500:	10000126 	beq	r2,zero,10010508 <altera_avalon_jtag_uart_write+0x190>
        break;
10010504:	00001006 	br	10010548 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10010508:	0001883a 	nop
1001050c:	e0bffc17 	ldw	r2,-16(fp)
10010510:	10c00d17 	ldw	r3,52(r2)
10010514:	e0bff517 	ldw	r2,-44(fp)
10010518:	1880051e 	bne	r3,r2,10010530 <altera_avalon_jtag_uart_write+0x1b8>
1001051c:	e0bffc17 	ldw	r2,-16(fp)
10010520:	10c00917 	ldw	r3,36(r2)
10010524:	e0bffc17 	ldw	r2,-16(fp)
10010528:	10800117 	ldw	r2,4(r2)
1001052c:	18bff736 	bltu	r3,r2,1001050c <__alt_data_end+0xf801050c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010530:	e0bffc17 	ldw	r2,-16(fp)
10010534:	10800917 	ldw	r2,36(r2)
10010538:	10000126 	beq	r2,zero,10010540 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1001053c:	00000206 	br	10010548 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10010540:	e0bffe17 	ldw	r2,-8(fp)
10010544:	00bf9716 	blt	zero,r2,100103a4 <__alt_data_end+0xf80103a4>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010548:	e0fffd17 	ldw	r3,-12(fp)
1001054c:	e0bff717 	ldw	r2,-36(fp)
10010550:	18800426 	beq	r3,r2,10010564 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10010554:	e0fffd17 	ldw	r3,-12(fp)
10010558:	e0bff717 	ldw	r2,-36(fp)
1001055c:	1885c83a 	sub	r2,r3,r2
10010560:	00000606 	br	1001057c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10010564:	e0bfff17 	ldw	r2,-4(fp)
10010568:	1090000c 	andi	r2,r2,16384
1001056c:	10000226 	beq	r2,zero,10010578 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10010570:	00bffd44 	movi	r2,-11
10010574:	00000106 	br	1001057c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10010578:	00bffec4 	movi	r2,-5
}
1001057c:	e037883a 	mov	sp,fp
10010580:	dfc00117 	ldw	ra,4(sp)
10010584:	df000017 	ldw	fp,0(sp)
10010588:	dec00204 	addi	sp,sp,8
1001058c:	f800283a 	ret

10010590 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10010590:	defff504 	addi	sp,sp,-44
10010594:	df000a15 	stw	fp,40(sp)
10010598:	df000a04 	addi	fp,sp,40
1001059c:	e13ffc15 	stw	r4,-16(fp)
100105a0:	e17ffd15 	stw	r5,-12(fp)
100105a4:	e1bffe15 	stw	r6,-8(fp)
100105a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100105ac:	e03ff615 	stw	zero,-40(fp)
100105b0:	00840074 	movhi	r2,4097
100105b4:	10965304 	addi	r2,r2,22860
100105b8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
100105bc:	10003f26 	beq	r2,zero,100106bc <alt_alarm_start+0x12c>
  {
    if (alarm)
100105c0:	e0bffc17 	ldw	r2,-16(fp)
100105c4:	10003b26 	beq	r2,zero,100106b4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
100105c8:	e0bffc17 	ldw	r2,-16(fp)
100105cc:	e0fffe17 	ldw	r3,-8(fp)
100105d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100105d4:	e0bffc17 	ldw	r2,-16(fp)
100105d8:	e0ffff17 	ldw	r3,-4(fp)
100105dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100105e0:	0005303a 	rdctl	r2,status
100105e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100105e8:	e0fff817 	ldw	r3,-32(fp)
100105ec:	00bfff84 	movi	r2,-2
100105f0:	1884703a 	and	r2,r3,r2
100105f4:	1001703a 	wrctl	status,r2
  
  return context;
100105f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
100105fc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10010600:	00840074 	movhi	r2,4097
10010604:	10965404 	addi	r2,r2,22864
10010608:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1001060c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10010610:	e0fffd17 	ldw	r3,-12(fp)
10010614:	e0bff617 	ldw	r2,-40(fp)
10010618:	1885883a 	add	r2,r3,r2
1001061c:	10c00044 	addi	r3,r2,1
10010620:	e0bffc17 	ldw	r2,-16(fp)
10010624:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010628:	e0bffc17 	ldw	r2,-16(fp)
1001062c:	10c00217 	ldw	r3,8(r2)
10010630:	e0bff617 	ldw	r2,-40(fp)
10010634:	1880042e 	bgeu	r3,r2,10010648 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10010638:	e0bffc17 	ldw	r2,-16(fp)
1001063c:	00c00044 	movi	r3,1
10010640:	10c00405 	stb	r3,16(r2)
10010644:	00000206 	br	10010650 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10010648:	e0bffc17 	ldw	r2,-16(fp)
1001064c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010650:	e0fffc17 	ldw	r3,-16(fp)
10010654:	00840074 	movhi	r2,4097
10010658:	108f8a04 	addi	r2,r2,15912
1001065c:	e0bff915 	stw	r2,-28(fp)
10010660:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010664:	e0bffa17 	ldw	r2,-24(fp)
10010668:	e0fff917 	ldw	r3,-28(fp)
1001066c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010670:	e0bff917 	ldw	r2,-28(fp)
10010674:	10c00017 	ldw	r3,0(r2)
10010678:	e0bffa17 	ldw	r2,-24(fp)
1001067c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010680:	e0bff917 	ldw	r2,-28(fp)
10010684:	10800017 	ldw	r2,0(r2)
10010688:	e0fffa17 	ldw	r3,-24(fp)
1001068c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010690:	e0bff917 	ldw	r2,-28(fp)
10010694:	e0fffa17 	ldw	r3,-24(fp)
10010698:	10c00015 	stw	r3,0(r2)
1001069c:	e0bff717 	ldw	r2,-36(fp)
100106a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100106a4:	e0bffb17 	ldw	r2,-20(fp)
100106a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100106ac:	0005883a 	mov	r2,zero
100106b0:	00000306 	br	100106c0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
100106b4:	00bffa84 	movi	r2,-22
100106b8:	00000106 	br	100106c0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
100106bc:	00bfde84 	movi	r2,-134
  }
}
100106c0:	e037883a 	mov	sp,fp
100106c4:	df000017 	ldw	fp,0(sp)
100106c8:	dec00104 	addi	sp,sp,4
100106cc:	f800283a 	ret

100106d0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
100106d0:	defffa04 	addi	sp,sp,-24
100106d4:	dfc00515 	stw	ra,20(sp)
100106d8:	df000415 	stw	fp,16(sp)
100106dc:	df000404 	addi	fp,sp,16
100106e0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
100106e4:	00800244 	movi	r2,9
100106e8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
100106ec:	e13ffd17 	ldw	r4,-12(fp)
100106f0:	014003f4 	movhi	r5,15
100106f4:	29509004 	addi	r5,r5,16960
100106f8:	000c8480 	call	1000c848 <__mulsi3>
100106fc:	0100bef4 	movhi	r4,763
10010700:	213c2004 	addi	r4,r4,-3968
10010704:	100b883a 	mov	r5,r2
10010708:	000c8380 	call	1000c838 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1001070c:	01200034 	movhi	r4,32768
10010710:	213fffc4 	addi	r4,r4,-1
10010714:	100b883a 	mov	r5,r2
10010718:	000c8380 	call	1000c838 <__udivsi3>
1001071c:	e13fff17 	ldw	r4,-4(fp)
10010720:	100b883a 	mov	r5,r2
10010724:	000c8380 	call	1000c838 <__udivsi3>
10010728:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1001072c:	e0bffe17 	ldw	r2,-8(fp)
10010730:	10002a26 	beq	r2,zero,100107dc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10010734:	e03ffc15 	stw	zero,-16(fp)
10010738:	00001706 	br	10010798 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1001073c:	00a00034 	movhi	r2,32768
10010740:	10bfffc4 	addi	r2,r2,-1
10010744:	10bfffc4 	addi	r2,r2,-1
10010748:	103ffe1e 	bne	r2,zero,10010744 <__alt_data_end+0xf8010744>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1001074c:	e13ffd17 	ldw	r4,-12(fp)
10010750:	014003f4 	movhi	r5,15
10010754:	29509004 	addi	r5,r5,16960
10010758:	000c8480 	call	1000c848 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1001075c:	0100bef4 	movhi	r4,763
10010760:	213c2004 	addi	r4,r4,-3968
10010764:	100b883a 	mov	r5,r2
10010768:	000c8380 	call	1000c838 <__udivsi3>
1001076c:	01200034 	movhi	r4,32768
10010770:	213fffc4 	addi	r4,r4,-1
10010774:	100b883a 	mov	r5,r2
10010778:	000c8380 	call	1000c838 <__udivsi3>
1001077c:	1007883a 	mov	r3,r2
10010780:	e0bfff17 	ldw	r2,-4(fp)
10010784:	10c5c83a 	sub	r2,r2,r3
10010788:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1001078c:	e0bffc17 	ldw	r2,-16(fp)
10010790:	10800044 	addi	r2,r2,1
10010794:	e0bffc15 	stw	r2,-16(fp)
10010798:	e0fffc17 	ldw	r3,-16(fp)
1001079c:	e0bffe17 	ldw	r2,-8(fp)
100107a0:	18bfe616 	blt	r3,r2,1001073c <__alt_data_end+0xf801073c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100107a4:	e13ffd17 	ldw	r4,-12(fp)
100107a8:	014003f4 	movhi	r5,15
100107ac:	29509004 	addi	r5,r5,16960
100107b0:	000c8480 	call	1000c848 <__mulsi3>
100107b4:	0100bef4 	movhi	r4,763
100107b8:	213c2004 	addi	r4,r4,-3968
100107bc:	100b883a 	mov	r5,r2
100107c0:	000c8380 	call	1000c838 <__udivsi3>
100107c4:	1009883a 	mov	r4,r2
100107c8:	e17fff17 	ldw	r5,-4(fp)
100107cc:	000c8480 	call	1000c848 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100107d0:	10bfffc4 	addi	r2,r2,-1
100107d4:	103ffe1e 	bne	r2,zero,100107d0 <__alt_data_end+0xf80107d0>
100107d8:	00000d06 	br	10010810 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100107dc:	e13ffd17 	ldw	r4,-12(fp)
100107e0:	014003f4 	movhi	r5,15
100107e4:	29509004 	addi	r5,r5,16960
100107e8:	000c8480 	call	1000c848 <__mulsi3>
100107ec:	0100bef4 	movhi	r4,763
100107f0:	213c2004 	addi	r4,r4,-3968
100107f4:	100b883a 	mov	r5,r2
100107f8:	000c8380 	call	1000c838 <__udivsi3>
100107fc:	1009883a 	mov	r4,r2
10010800:	e17fff17 	ldw	r5,-4(fp)
10010804:	000c8480 	call	1000c848 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10010808:	10bfffc4 	addi	r2,r2,-1
1001080c:	00bffe16 	blt	zero,r2,10010808 <__alt_data_end+0xf8010808>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10010810:	0005883a 	mov	r2,zero
}
10010814:	e037883a 	mov	sp,fp
10010818:	dfc00117 	ldw	ra,4(sp)
1001081c:	df000017 	ldw	fp,0(sp)
10010820:	dec00204 	addi	sp,sp,8
10010824:	f800283a 	ret

10010828 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10010828:	deffff04 	addi	sp,sp,-4
1001082c:	df000015 	stw	fp,0(sp)
10010830:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10010834:	e037883a 	mov	sp,fp
10010838:	df000017 	ldw	fp,0(sp)
1001083c:	dec00104 	addi	sp,sp,4
10010840:	f800283a 	ret

10010844 <alt_get_errno>:
10010844:	defffe04 	addi	sp,sp,-8
10010848:	dfc00115 	stw	ra,4(sp)
1001084c:	df000015 	stw	fp,0(sp)
10010850:	d839883a 	mov	fp,sp
10010854:	00840074 	movhi	r2,4097
10010858:	108f8704 	addi	r2,r2,15900
1001085c:	10800017 	ldw	r2,0(r2)
10010860:	10000526 	beq	r2,zero,10010878 <alt_get_errno+0x34>
10010864:	00840074 	movhi	r2,4097
10010868:	108f8704 	addi	r2,r2,15900
1001086c:	10800017 	ldw	r2,0(r2)
10010870:	103ee83a 	callr	r2
10010874:	00000206 	br	10010880 <alt_get_errno+0x3c>
10010878:	00840074 	movhi	r2,4097
1001087c:	10964e04 	addi	r2,r2,22840
10010880:	e037883a 	mov	sp,fp
10010884:	dfc00117 	ldw	ra,4(sp)
10010888:	df000017 	ldw	fp,0(sp)
1001088c:	dec00204 	addi	sp,sp,8
10010890:	f800283a 	ret

10010894 <alt_dev_llist_insert>:
10010894:	defffa04 	addi	sp,sp,-24
10010898:	dfc00515 	stw	ra,20(sp)
1001089c:	df000415 	stw	fp,16(sp)
100108a0:	df000404 	addi	fp,sp,16
100108a4:	e13ffe15 	stw	r4,-8(fp)
100108a8:	e17fff15 	stw	r5,-4(fp)
100108ac:	e0bffe17 	ldw	r2,-8(fp)
100108b0:	10000326 	beq	r2,zero,100108c0 <alt_dev_llist_insert+0x2c>
100108b4:	e0bffe17 	ldw	r2,-8(fp)
100108b8:	10800217 	ldw	r2,8(r2)
100108bc:	1000061e 	bne	r2,zero,100108d8 <alt_dev_llist_insert+0x44>
100108c0:	00108440 	call	10010844 <alt_get_errno>
100108c4:	1007883a 	mov	r3,r2
100108c8:	00800584 	movi	r2,22
100108cc:	18800015 	stw	r2,0(r3)
100108d0:	00bffa84 	movi	r2,-22
100108d4:	00001306 	br	10010924 <alt_dev_llist_insert+0x90>
100108d8:	e0bffe17 	ldw	r2,-8(fp)
100108dc:	e0ffff17 	ldw	r3,-4(fp)
100108e0:	e0fffc15 	stw	r3,-16(fp)
100108e4:	e0bffd15 	stw	r2,-12(fp)
100108e8:	e0bffd17 	ldw	r2,-12(fp)
100108ec:	e0fffc17 	ldw	r3,-16(fp)
100108f0:	10c00115 	stw	r3,4(r2)
100108f4:	e0bffc17 	ldw	r2,-16(fp)
100108f8:	10c00017 	ldw	r3,0(r2)
100108fc:	e0bffd17 	ldw	r2,-12(fp)
10010900:	10c00015 	stw	r3,0(r2)
10010904:	e0bffc17 	ldw	r2,-16(fp)
10010908:	10800017 	ldw	r2,0(r2)
1001090c:	e0fffd17 	ldw	r3,-12(fp)
10010910:	10c00115 	stw	r3,4(r2)
10010914:	e0bffc17 	ldw	r2,-16(fp)
10010918:	e0fffd17 	ldw	r3,-12(fp)
1001091c:	10c00015 	stw	r3,0(r2)
10010920:	0005883a 	mov	r2,zero
10010924:	e037883a 	mov	sp,fp
10010928:	dfc00117 	ldw	ra,4(sp)
1001092c:	df000017 	ldw	fp,0(sp)
10010930:	dec00204 	addi	sp,sp,8
10010934:	f800283a 	ret

10010938 <_do_ctors>:
10010938:	defffd04 	addi	sp,sp,-12
1001093c:	dfc00215 	stw	ra,8(sp)
10010940:	df000115 	stw	fp,4(sp)
10010944:	df000104 	addi	fp,sp,4
10010948:	00840074 	movhi	r2,4097
1001094c:	10862b04 	addi	r2,r2,6316
10010950:	e0bfff15 	stw	r2,-4(fp)
10010954:	00000606 	br	10010970 <_do_ctors+0x38>
10010958:	e0bfff17 	ldw	r2,-4(fp)
1001095c:	10800017 	ldw	r2,0(r2)
10010960:	103ee83a 	callr	r2
10010964:	e0bfff17 	ldw	r2,-4(fp)
10010968:	10bfff04 	addi	r2,r2,-4
1001096c:	e0bfff15 	stw	r2,-4(fp)
10010970:	e0ffff17 	ldw	r3,-4(fp)
10010974:	00840074 	movhi	r2,4097
10010978:	10862c04 	addi	r2,r2,6320
1001097c:	18bff62e 	bgeu	r3,r2,10010958 <__alt_data_end+0xf8010958>
10010980:	e037883a 	mov	sp,fp
10010984:	dfc00117 	ldw	ra,4(sp)
10010988:	df000017 	ldw	fp,0(sp)
1001098c:	dec00204 	addi	sp,sp,8
10010990:	f800283a 	ret

10010994 <_do_dtors>:
10010994:	defffd04 	addi	sp,sp,-12
10010998:	dfc00215 	stw	ra,8(sp)
1001099c:	df000115 	stw	fp,4(sp)
100109a0:	df000104 	addi	fp,sp,4
100109a4:	00840074 	movhi	r2,4097
100109a8:	10862b04 	addi	r2,r2,6316
100109ac:	e0bfff15 	stw	r2,-4(fp)
100109b0:	00000606 	br	100109cc <_do_dtors+0x38>
100109b4:	e0bfff17 	ldw	r2,-4(fp)
100109b8:	10800017 	ldw	r2,0(r2)
100109bc:	103ee83a 	callr	r2
100109c0:	e0bfff17 	ldw	r2,-4(fp)
100109c4:	10bfff04 	addi	r2,r2,-4
100109c8:	e0bfff15 	stw	r2,-4(fp)
100109cc:	e0ffff17 	ldw	r3,-4(fp)
100109d0:	00840074 	movhi	r2,4097
100109d4:	10862c04 	addi	r2,r2,6320
100109d8:	18bff62e 	bgeu	r3,r2,100109b4 <__alt_data_end+0xf80109b4>
100109dc:	e037883a 	mov	sp,fp
100109e0:	dfc00117 	ldw	ra,4(sp)
100109e4:	df000017 	ldw	fp,0(sp)
100109e8:	dec00204 	addi	sp,sp,8
100109ec:	f800283a 	ret

100109f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100109f0:	deffff04 	addi	sp,sp,-4
100109f4:	df000015 	stw	fp,0(sp)
100109f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100109fc:	e037883a 	mov	sp,fp
10010a00:	df000017 	ldw	fp,0(sp)
10010a04:	dec00104 	addi	sp,sp,4
10010a08:	f800283a 	ret

10010a0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010a0c:	defff904 	addi	sp,sp,-28
10010a10:	dfc00615 	stw	ra,24(sp)
10010a14:	df000515 	stw	fp,20(sp)
10010a18:	df000504 	addi	fp,sp,20
10010a1c:	e13ffc15 	stw	r4,-16(fp)
10010a20:	e17ffd15 	stw	r5,-12(fp)
10010a24:	e1bffe15 	stw	r6,-8(fp)
10010a28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10010a2c:	e0800217 	ldw	r2,8(fp)
10010a30:	d8800015 	stw	r2,0(sp)
10010a34:	e13ffc17 	ldw	r4,-16(fp)
10010a38:	e17ffd17 	ldw	r5,-12(fp)
10010a3c:	e1bffe17 	ldw	r6,-8(fp)
10010a40:	e1ffff17 	ldw	r7,-4(fp)
10010a44:	0010bec0 	call	10010bec <alt_iic_isr_register>
}  
10010a48:	e037883a 	mov	sp,fp
10010a4c:	dfc00117 	ldw	ra,4(sp)
10010a50:	df000017 	ldw	fp,0(sp)
10010a54:	dec00204 	addi	sp,sp,8
10010a58:	f800283a 	ret

10010a5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10010a5c:	defff904 	addi	sp,sp,-28
10010a60:	df000615 	stw	fp,24(sp)
10010a64:	df000604 	addi	fp,sp,24
10010a68:	e13ffe15 	stw	r4,-8(fp)
10010a6c:	e17fff15 	stw	r5,-4(fp)
10010a70:	e0bfff17 	ldw	r2,-4(fp)
10010a74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010a78:	0005303a 	rdctl	r2,status
10010a7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010a80:	e0fffb17 	ldw	r3,-20(fp)
10010a84:	00bfff84 	movi	r2,-2
10010a88:	1884703a 	and	r2,r3,r2
10010a8c:	1001703a 	wrctl	status,r2
  
  return context;
10010a90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010a94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10010a98:	e0bffa17 	ldw	r2,-24(fp)
10010a9c:	00c00044 	movi	r3,1
10010aa0:	1884983a 	sll	r2,r3,r2
10010aa4:	1007883a 	mov	r3,r2
10010aa8:	00840074 	movhi	r2,4097
10010aac:	10965204 	addi	r2,r2,22856
10010ab0:	10800017 	ldw	r2,0(r2)
10010ab4:	1886b03a 	or	r3,r3,r2
10010ab8:	00840074 	movhi	r2,4097
10010abc:	10965204 	addi	r2,r2,22856
10010ac0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010ac4:	00840074 	movhi	r2,4097
10010ac8:	10965204 	addi	r2,r2,22856
10010acc:	10800017 	ldw	r2,0(r2)
10010ad0:	100170fa 	wrctl	ienable,r2
10010ad4:	e0bffc17 	ldw	r2,-16(fp)
10010ad8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010adc:	e0bffd17 	ldw	r2,-12(fp)
10010ae0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010ae4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10010ae8:	0001883a 	nop
}
10010aec:	e037883a 	mov	sp,fp
10010af0:	df000017 	ldw	fp,0(sp)
10010af4:	dec00104 	addi	sp,sp,4
10010af8:	f800283a 	ret

10010afc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10010afc:	defff904 	addi	sp,sp,-28
10010b00:	df000615 	stw	fp,24(sp)
10010b04:	df000604 	addi	fp,sp,24
10010b08:	e13ffe15 	stw	r4,-8(fp)
10010b0c:	e17fff15 	stw	r5,-4(fp)
10010b10:	e0bfff17 	ldw	r2,-4(fp)
10010b14:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010b18:	0005303a 	rdctl	r2,status
10010b1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010b20:	e0fffb17 	ldw	r3,-20(fp)
10010b24:	00bfff84 	movi	r2,-2
10010b28:	1884703a 	and	r2,r3,r2
10010b2c:	1001703a 	wrctl	status,r2
  
  return context;
10010b30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010b34:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10010b38:	e0bffa17 	ldw	r2,-24(fp)
10010b3c:	00c00044 	movi	r3,1
10010b40:	1884983a 	sll	r2,r3,r2
10010b44:	0084303a 	nor	r2,zero,r2
10010b48:	1007883a 	mov	r3,r2
10010b4c:	00840074 	movhi	r2,4097
10010b50:	10965204 	addi	r2,r2,22856
10010b54:	10800017 	ldw	r2,0(r2)
10010b58:	1886703a 	and	r3,r3,r2
10010b5c:	00840074 	movhi	r2,4097
10010b60:	10965204 	addi	r2,r2,22856
10010b64:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010b68:	00840074 	movhi	r2,4097
10010b6c:	10965204 	addi	r2,r2,22856
10010b70:	10800017 	ldw	r2,0(r2)
10010b74:	100170fa 	wrctl	ienable,r2
10010b78:	e0bffc17 	ldw	r2,-16(fp)
10010b7c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010b80:	e0bffd17 	ldw	r2,-12(fp)
10010b84:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010b88:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10010b8c:	0001883a 	nop
}
10010b90:	e037883a 	mov	sp,fp
10010b94:	df000017 	ldw	fp,0(sp)
10010b98:	dec00104 	addi	sp,sp,4
10010b9c:	f800283a 	ret

10010ba0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10010ba0:	defffc04 	addi	sp,sp,-16
10010ba4:	df000315 	stw	fp,12(sp)
10010ba8:	df000304 	addi	fp,sp,12
10010bac:	e13ffe15 	stw	r4,-8(fp)
10010bb0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10010bb4:	000530fa 	rdctl	r2,ienable
10010bb8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10010bbc:	e0bfff17 	ldw	r2,-4(fp)
10010bc0:	00c00044 	movi	r3,1
10010bc4:	1884983a 	sll	r2,r3,r2
10010bc8:	1007883a 	mov	r3,r2
10010bcc:	e0bffd17 	ldw	r2,-12(fp)
10010bd0:	1884703a 	and	r2,r3,r2
10010bd4:	1004c03a 	cmpne	r2,r2,zero
10010bd8:	10803fcc 	andi	r2,r2,255
}
10010bdc:	e037883a 	mov	sp,fp
10010be0:	df000017 	ldw	fp,0(sp)
10010be4:	dec00104 	addi	sp,sp,4
10010be8:	f800283a 	ret

10010bec <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010bec:	defff504 	addi	sp,sp,-44
10010bf0:	dfc00a15 	stw	ra,40(sp)
10010bf4:	df000915 	stw	fp,36(sp)
10010bf8:	df000904 	addi	fp,sp,36
10010bfc:	e13ffc15 	stw	r4,-16(fp)
10010c00:	e17ffd15 	stw	r5,-12(fp)
10010c04:	e1bffe15 	stw	r6,-8(fp)
10010c08:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10010c0c:	00bffa84 	movi	r2,-22
10010c10:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10010c14:	e0bffd17 	ldw	r2,-12(fp)
10010c18:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10010c1c:	e0bff817 	ldw	r2,-32(fp)
10010c20:	10800808 	cmpgei	r2,r2,32
10010c24:	1000271e 	bne	r2,zero,10010cc4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010c28:	0005303a 	rdctl	r2,status
10010c2c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010c30:	e0fffa17 	ldw	r3,-24(fp)
10010c34:	00bfff84 	movi	r2,-2
10010c38:	1884703a 	and	r2,r3,r2
10010c3c:	1001703a 	wrctl	status,r2
  
  return context;
10010c40:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10010c44:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10010c48:	00840074 	movhi	r2,4097
10010c4c:	10966404 	addi	r2,r2,22928
10010c50:	e0fff817 	ldw	r3,-32(fp)
10010c54:	180690fa 	slli	r3,r3,3
10010c58:	10c5883a 	add	r2,r2,r3
10010c5c:	e0fffe17 	ldw	r3,-8(fp)
10010c60:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10010c64:	00840074 	movhi	r2,4097
10010c68:	10966404 	addi	r2,r2,22928
10010c6c:	e0fff817 	ldw	r3,-32(fp)
10010c70:	180690fa 	slli	r3,r3,3
10010c74:	10c5883a 	add	r2,r2,r3
10010c78:	10800104 	addi	r2,r2,4
10010c7c:	e0ffff17 	ldw	r3,-4(fp)
10010c80:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10010c84:	e0bffe17 	ldw	r2,-8(fp)
10010c88:	10000526 	beq	r2,zero,10010ca0 <alt_iic_isr_register+0xb4>
10010c8c:	e0bff817 	ldw	r2,-32(fp)
10010c90:	e13ffc17 	ldw	r4,-16(fp)
10010c94:	100b883a 	mov	r5,r2
10010c98:	0010a5c0 	call	10010a5c <alt_ic_irq_enable>
10010c9c:	00000406 	br	10010cb0 <alt_iic_isr_register+0xc4>
10010ca0:	e0bff817 	ldw	r2,-32(fp)
10010ca4:	e13ffc17 	ldw	r4,-16(fp)
10010ca8:	100b883a 	mov	r5,r2
10010cac:	0010afc0 	call	10010afc <alt_ic_irq_disable>
10010cb0:	e0bff715 	stw	r2,-36(fp)
10010cb4:	e0bff917 	ldw	r2,-28(fp)
10010cb8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010cbc:	e0bffb17 	ldw	r2,-20(fp)
10010cc0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10010cc4:	e0bff717 	ldw	r2,-36(fp)
}
10010cc8:	e037883a 	mov	sp,fp
10010ccc:	dfc00117 	ldw	ra,4(sp)
10010cd0:	df000017 	ldw	fp,0(sp)
10010cd4:	dec00204 	addi	sp,sp,8
10010cd8:	f800283a 	ret

10010cdc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10010cdc:	defff804 	addi	sp,sp,-32
10010ce0:	dfc00715 	stw	ra,28(sp)
10010ce4:	df000615 	stw	fp,24(sp)
10010ce8:	dc000515 	stw	r16,20(sp)
10010cec:	df000604 	addi	fp,sp,24
10010cf0:	e13ffb15 	stw	r4,-20(fp)
10010cf4:	e17ffc15 	stw	r5,-16(fp)
10010cf8:	e1bffd15 	stw	r6,-12(fp)
10010cfc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10010d00:	e13ffc17 	ldw	r4,-16(fp)
10010d04:	e17ffd17 	ldw	r5,-12(fp)
10010d08:	e1bffe17 	ldw	r6,-8(fp)
10010d0c:	0010f780 	call	10010f78 <open>
10010d10:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10010d14:	e0bffa17 	ldw	r2,-24(fp)
10010d18:	10002216 	blt	r2,zero,10010da4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10010d1c:	04040074 	movhi	r16,4097
10010d20:	840b0404 	addi	r16,r16,11280
10010d24:	e0bffa17 	ldw	r2,-24(fp)
10010d28:	1009883a 	mov	r4,r2
10010d2c:	01400304 	movi	r5,12
10010d30:	000c8480 	call	1000c848 <__mulsi3>
10010d34:	8085883a 	add	r2,r16,r2
10010d38:	10c00017 	ldw	r3,0(r2)
10010d3c:	e0bffb17 	ldw	r2,-20(fp)
10010d40:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10010d44:	04040074 	movhi	r16,4097
10010d48:	840b0404 	addi	r16,r16,11280
10010d4c:	e0bffa17 	ldw	r2,-24(fp)
10010d50:	1009883a 	mov	r4,r2
10010d54:	01400304 	movi	r5,12
10010d58:	000c8480 	call	1000c848 <__mulsi3>
10010d5c:	8085883a 	add	r2,r16,r2
10010d60:	10800104 	addi	r2,r2,4
10010d64:	10c00017 	ldw	r3,0(r2)
10010d68:	e0bffb17 	ldw	r2,-20(fp)
10010d6c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10010d70:	04040074 	movhi	r16,4097
10010d74:	840b0404 	addi	r16,r16,11280
10010d78:	e0bffa17 	ldw	r2,-24(fp)
10010d7c:	1009883a 	mov	r4,r2
10010d80:	01400304 	movi	r5,12
10010d84:	000c8480 	call	1000c848 <__mulsi3>
10010d88:	8085883a 	add	r2,r16,r2
10010d8c:	10800204 	addi	r2,r2,8
10010d90:	10c00017 	ldw	r3,0(r2)
10010d94:	e0bffb17 	ldw	r2,-20(fp)
10010d98:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10010d9c:	e13ffa17 	ldw	r4,-24(fp)
10010da0:	000f7e00 	call	1000f7e0 <alt_release_fd>
  }
} 
10010da4:	e6ffff04 	addi	sp,fp,-4
10010da8:	dfc00217 	ldw	ra,8(sp)
10010dac:	df000117 	ldw	fp,4(sp)
10010db0:	dc000017 	ldw	r16,0(sp)
10010db4:	dec00304 	addi	sp,sp,12
10010db8:	f800283a 	ret

10010dbc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10010dbc:	defffb04 	addi	sp,sp,-20
10010dc0:	dfc00415 	stw	ra,16(sp)
10010dc4:	df000315 	stw	fp,12(sp)
10010dc8:	df000304 	addi	fp,sp,12
10010dcc:	e13ffd15 	stw	r4,-12(fp)
10010dd0:	e17ffe15 	stw	r5,-8(fp)
10010dd4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10010dd8:	01040074 	movhi	r4,4097
10010ddc:	210b0704 	addi	r4,r4,11292
10010de0:	e17ffd17 	ldw	r5,-12(fp)
10010de4:	01800044 	movi	r6,1
10010de8:	01c07fc4 	movi	r7,511
10010dec:	0010cdc0 	call	10010cdc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10010df0:	01040074 	movhi	r4,4097
10010df4:	210b0404 	addi	r4,r4,11280
10010df8:	e17ffe17 	ldw	r5,-8(fp)
10010dfc:	000d883a 	mov	r6,zero
10010e00:	01c07fc4 	movi	r7,511
10010e04:	0010cdc0 	call	10010cdc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10010e08:	01040074 	movhi	r4,4097
10010e0c:	210b0a04 	addi	r4,r4,11304
10010e10:	e17fff17 	ldw	r5,-4(fp)
10010e14:	01800044 	movi	r6,1
10010e18:	01c07fc4 	movi	r7,511
10010e1c:	0010cdc0 	call	10010cdc <alt_open_fd>
}  
10010e20:	e037883a 	mov	sp,fp
10010e24:	dfc00117 	ldw	ra,4(sp)
10010e28:	df000017 	ldw	fp,0(sp)
10010e2c:	dec00204 	addi	sp,sp,8
10010e30:	f800283a 	ret

10010e34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010e34:	defffe04 	addi	sp,sp,-8
10010e38:	dfc00115 	stw	ra,4(sp)
10010e3c:	df000015 	stw	fp,0(sp)
10010e40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010e44:	00840074 	movhi	r2,4097
10010e48:	108f8704 	addi	r2,r2,15900
10010e4c:	10800017 	ldw	r2,0(r2)
10010e50:	10000526 	beq	r2,zero,10010e68 <alt_get_errno+0x34>
10010e54:	00840074 	movhi	r2,4097
10010e58:	108f8704 	addi	r2,r2,15900
10010e5c:	10800017 	ldw	r2,0(r2)
10010e60:	103ee83a 	callr	r2
10010e64:	00000206 	br	10010e70 <alt_get_errno+0x3c>
10010e68:	00840074 	movhi	r2,4097
10010e6c:	10964e04 	addi	r2,r2,22840
}
10010e70:	e037883a 	mov	sp,fp
10010e74:	dfc00117 	ldw	ra,4(sp)
10010e78:	df000017 	ldw	fp,0(sp)
10010e7c:	dec00204 	addi	sp,sp,8
10010e80:	f800283a 	ret

10010e84 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10010e84:	defffb04 	addi	sp,sp,-20
10010e88:	dfc00415 	stw	ra,16(sp)
10010e8c:	df000315 	stw	fp,12(sp)
10010e90:	dc000215 	stw	r16,8(sp)
10010e94:	df000304 	addi	fp,sp,12
10010e98:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10010e9c:	e0bffe17 	ldw	r2,-8(fp)
10010ea0:	10800217 	ldw	r2,8(r2)
10010ea4:	10d00034 	orhi	r3,r2,16384
10010ea8:	e0bffe17 	ldw	r2,-8(fp)
10010eac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010eb0:	e03ffd15 	stw	zero,-12(fp)
10010eb4:	00002306 	br	10010f44 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010eb8:	04040074 	movhi	r16,4097
10010ebc:	840b0404 	addi	r16,r16,11280
10010ec0:	e0bffd17 	ldw	r2,-12(fp)
10010ec4:	1009883a 	mov	r4,r2
10010ec8:	01400304 	movi	r5,12
10010ecc:	000c8480 	call	1000c848 <__mulsi3>
10010ed0:	8085883a 	add	r2,r16,r2
10010ed4:	10c00017 	ldw	r3,0(r2)
10010ed8:	e0bffe17 	ldw	r2,-8(fp)
10010edc:	10800017 	ldw	r2,0(r2)
10010ee0:	1880151e 	bne	r3,r2,10010f38 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010ee4:	04040074 	movhi	r16,4097
10010ee8:	840b0404 	addi	r16,r16,11280
10010eec:	e0bffd17 	ldw	r2,-12(fp)
10010ef0:	1009883a 	mov	r4,r2
10010ef4:	01400304 	movi	r5,12
10010ef8:	000c8480 	call	1000c848 <__mulsi3>
10010efc:	8085883a 	add	r2,r16,r2
10010f00:	10800204 	addi	r2,r2,8
10010f04:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010f08:	10000b0e 	bge	r2,zero,10010f38 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10010f0c:	e13ffd17 	ldw	r4,-12(fp)
10010f10:	01400304 	movi	r5,12
10010f14:	000c8480 	call	1000c848 <__mulsi3>
10010f18:	1007883a 	mov	r3,r2
10010f1c:	00840074 	movhi	r2,4097
10010f20:	108b0404 	addi	r2,r2,11280
10010f24:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010f28:	e0bffe17 	ldw	r2,-8(fp)
10010f2c:	18800226 	beq	r3,r2,10010f38 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10010f30:	00bffcc4 	movi	r2,-13
10010f34:	00000a06 	br	10010f60 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010f38:	e0bffd17 	ldw	r2,-12(fp)
10010f3c:	10800044 	addi	r2,r2,1
10010f40:	e0bffd15 	stw	r2,-12(fp)
10010f44:	00840074 	movhi	r2,4097
10010f48:	108f8604 	addi	r2,r2,15896
10010f4c:	10800017 	ldw	r2,0(r2)
10010f50:	1007883a 	mov	r3,r2
10010f54:	e0bffd17 	ldw	r2,-12(fp)
10010f58:	18bfd72e 	bgeu	r3,r2,10010eb8 <__alt_data_end+0xf8010eb8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10010f5c:	0005883a 	mov	r2,zero
}
10010f60:	e6ffff04 	addi	sp,fp,-4
10010f64:	dfc00217 	ldw	ra,8(sp)
10010f68:	df000117 	ldw	fp,4(sp)
10010f6c:	dc000017 	ldw	r16,0(sp)
10010f70:	dec00304 	addi	sp,sp,12
10010f74:	f800283a 	ret

10010f78 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10010f78:	defff604 	addi	sp,sp,-40
10010f7c:	dfc00915 	stw	ra,36(sp)
10010f80:	df000815 	stw	fp,32(sp)
10010f84:	df000804 	addi	fp,sp,32
10010f88:	e13ffd15 	stw	r4,-12(fp)
10010f8c:	e17ffe15 	stw	r5,-8(fp)
10010f90:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10010f94:	00bfffc4 	movi	r2,-1
10010f98:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10010f9c:	00bffb44 	movi	r2,-19
10010fa0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10010fa4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10010fa8:	e13ffd17 	ldw	r4,-12(fp)
10010fac:	01440074 	movhi	r5,4097
10010fb0:	294f8404 	addi	r5,r5,15888
10010fb4:	00112940 	call	10011294 <alt_find_dev>
10010fb8:	e0bff815 	stw	r2,-32(fp)
10010fbc:	e0bff817 	ldw	r2,-32(fp)
10010fc0:	1000051e 	bne	r2,zero,10010fd8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10010fc4:	e13ffd17 	ldw	r4,-12(fp)
10010fc8:	00113240 	call	10011324 <alt_find_file>
10010fcc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10010fd0:	00800044 	movi	r2,1
10010fd4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10010fd8:	e0bff817 	ldw	r2,-32(fp)
10010fdc:	10002b26 	beq	r2,zero,1001108c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10010fe0:	e13ff817 	ldw	r4,-32(fp)
10010fe4:	00114380 	call	10011438 <alt_get_fd>
10010fe8:	e0bff915 	stw	r2,-28(fp)
10010fec:	e0bff917 	ldw	r2,-28(fp)
10010ff0:	1000030e 	bge	r2,zero,10011000 <open+0x88>
    {
      status = index;
10010ff4:	e0bff917 	ldw	r2,-28(fp)
10010ff8:	e0bffa15 	stw	r2,-24(fp)
10010ffc:	00002506 	br	10011094 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10011000:	e13ff917 	ldw	r4,-28(fp)
10011004:	01400304 	movi	r5,12
10011008:	000c8480 	call	1000c848 <__mulsi3>
1001100c:	1007883a 	mov	r3,r2
10011010:	00840074 	movhi	r2,4097
10011014:	108b0404 	addi	r2,r2,11280
10011018:	1885883a 	add	r2,r3,r2
1001101c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10011020:	e0fffe17 	ldw	r3,-8(fp)
10011024:	00900034 	movhi	r2,16384
10011028:	10bfffc4 	addi	r2,r2,-1
1001102c:	1886703a 	and	r3,r3,r2
10011030:	e0bffc17 	ldw	r2,-16(fp)
10011034:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011038:	e0bffb17 	ldw	r2,-20(fp)
1001103c:	1000051e 	bne	r2,zero,10011054 <open+0xdc>
10011040:	e13ffc17 	ldw	r4,-16(fp)
10011044:	0010e840 	call	10010e84 <alt_file_locked>
10011048:	e0bffa15 	stw	r2,-24(fp)
1001104c:	e0bffa17 	ldw	r2,-24(fp)
10011050:	10001016 	blt	r2,zero,10011094 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10011054:	e0bff817 	ldw	r2,-32(fp)
10011058:	10800317 	ldw	r2,12(r2)
1001105c:	10000826 	beq	r2,zero,10011080 <open+0x108>
10011060:	e0bff817 	ldw	r2,-32(fp)
10011064:	10800317 	ldw	r2,12(r2)
10011068:	e13ffc17 	ldw	r4,-16(fp)
1001106c:	e17ffd17 	ldw	r5,-12(fp)
10011070:	e1bffe17 	ldw	r6,-8(fp)
10011074:	e1ffff17 	ldw	r7,-4(fp)
10011078:	103ee83a 	callr	r2
1001107c:	00000106 	br	10011084 <open+0x10c>
10011080:	0005883a 	mov	r2,zero
10011084:	e0bffa15 	stw	r2,-24(fp)
10011088:	00000206 	br	10011094 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1001108c:	00bffb44 	movi	r2,-19
10011090:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10011094:	e0bffa17 	ldw	r2,-24(fp)
10011098:	1000090e 	bge	r2,zero,100110c0 <open+0x148>
  {
    alt_release_fd (index);  
1001109c:	e13ff917 	ldw	r4,-28(fp)
100110a0:	000f7e00 	call	1000f7e0 <alt_release_fd>
    ALT_ERRNO = -status;
100110a4:	0010e340 	call	10010e34 <alt_get_errno>
100110a8:	1007883a 	mov	r3,r2
100110ac:	e0bffa17 	ldw	r2,-24(fp)
100110b0:	0085c83a 	sub	r2,zero,r2
100110b4:	18800015 	stw	r2,0(r3)
    return -1;
100110b8:	00bfffc4 	movi	r2,-1
100110bc:	00000106 	br	100110c4 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
100110c0:	e0bff917 	ldw	r2,-28(fp)
}
100110c4:	e037883a 	mov	sp,fp
100110c8:	dfc00117 	ldw	ra,4(sp)
100110cc:	df000017 	ldw	fp,0(sp)
100110d0:	dec00204 	addi	sp,sp,8
100110d4:	f800283a 	ret

100110d8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100110d8:	defffa04 	addi	sp,sp,-24
100110dc:	df000515 	stw	fp,20(sp)
100110e0:	df000504 	addi	fp,sp,20
100110e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100110e8:	0005303a 	rdctl	r2,status
100110ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100110f0:	e0fffc17 	ldw	r3,-16(fp)
100110f4:	00bfff84 	movi	r2,-2
100110f8:	1884703a 	and	r2,r3,r2
100110fc:	1001703a 	wrctl	status,r2
  
  return context;
10011100:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10011104:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10011108:	e0bfff17 	ldw	r2,-4(fp)
1001110c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10011110:	e0bffd17 	ldw	r2,-12(fp)
10011114:	10800017 	ldw	r2,0(r2)
10011118:	e0fffd17 	ldw	r3,-12(fp)
1001111c:	18c00117 	ldw	r3,4(r3)
10011120:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10011124:	e0bffd17 	ldw	r2,-12(fp)
10011128:	10800117 	ldw	r2,4(r2)
1001112c:	e0fffd17 	ldw	r3,-12(fp)
10011130:	18c00017 	ldw	r3,0(r3)
10011134:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10011138:	e0bffd17 	ldw	r2,-12(fp)
1001113c:	e0fffd17 	ldw	r3,-12(fp)
10011140:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10011144:	e0bffd17 	ldw	r2,-12(fp)
10011148:	e0fffd17 	ldw	r3,-12(fp)
1001114c:	10c00015 	stw	r3,0(r2)
10011150:	e0bffb17 	ldw	r2,-20(fp)
10011154:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011158:	e0bffe17 	ldw	r2,-8(fp)
1001115c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10011160:	e037883a 	mov	sp,fp
10011164:	df000017 	ldw	fp,0(sp)
10011168:	dec00104 	addi	sp,sp,4
1001116c:	f800283a 	ret

10011170 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10011170:	defffb04 	addi	sp,sp,-20
10011174:	dfc00415 	stw	ra,16(sp)
10011178:	df000315 	stw	fp,12(sp)
1001117c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10011180:	d0a00e17 	ldw	r2,-32712(gp)
10011184:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10011188:	d0a6d817 	ldw	r2,-25760(gp)
1001118c:	10800044 	addi	r2,r2,1
10011190:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011194:	00002e06 	br	10011250 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10011198:	e0bffd17 	ldw	r2,-12(fp)
1001119c:	10800017 	ldw	r2,0(r2)
100111a0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100111a4:	e0bffd17 	ldw	r2,-12(fp)
100111a8:	10800403 	ldbu	r2,16(r2)
100111ac:	10803fcc 	andi	r2,r2,255
100111b0:	10000426 	beq	r2,zero,100111c4 <alt_tick+0x54>
100111b4:	d0a6d817 	ldw	r2,-25760(gp)
100111b8:	1000021e 	bne	r2,zero,100111c4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
100111bc:	e0bffd17 	ldw	r2,-12(fp)
100111c0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100111c4:	e0bffd17 	ldw	r2,-12(fp)
100111c8:	10800217 	ldw	r2,8(r2)
100111cc:	d0e6d817 	ldw	r3,-25760(gp)
100111d0:	18801d36 	bltu	r3,r2,10011248 <alt_tick+0xd8>
100111d4:	e0bffd17 	ldw	r2,-12(fp)
100111d8:	10800403 	ldbu	r2,16(r2)
100111dc:	10803fcc 	andi	r2,r2,255
100111e0:	1000191e 	bne	r2,zero,10011248 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100111e4:	e0bffd17 	ldw	r2,-12(fp)
100111e8:	10800317 	ldw	r2,12(r2)
100111ec:	e0fffd17 	ldw	r3,-12(fp)
100111f0:	18c00517 	ldw	r3,20(r3)
100111f4:	1809883a 	mov	r4,r3
100111f8:	103ee83a 	callr	r2
100111fc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10011200:	e0bfff17 	ldw	r2,-4(fp)
10011204:	1000031e 	bne	r2,zero,10011214 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10011208:	e13ffd17 	ldw	r4,-12(fp)
1001120c:	00110d80 	call	100110d8 <alt_alarm_stop>
10011210:	00000d06 	br	10011248 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10011214:	e0bffd17 	ldw	r2,-12(fp)
10011218:	10c00217 	ldw	r3,8(r2)
1001121c:	e0bfff17 	ldw	r2,-4(fp)
10011220:	1887883a 	add	r3,r3,r2
10011224:	e0bffd17 	ldw	r2,-12(fp)
10011228:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1001122c:	e0bffd17 	ldw	r2,-12(fp)
10011230:	10c00217 	ldw	r3,8(r2)
10011234:	d0a6d817 	ldw	r2,-25760(gp)
10011238:	1880032e 	bgeu	r3,r2,10011248 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1001123c:	e0bffd17 	ldw	r2,-12(fp)
10011240:	00c00044 	movi	r3,1
10011244:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10011248:	e0bffe17 	ldw	r2,-8(fp)
1001124c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011250:	e0fffd17 	ldw	r3,-12(fp)
10011254:	d0a00e04 	addi	r2,gp,-32712
10011258:	18bfcf1e 	bne	r3,r2,10011198 <__alt_data_end+0xf8011198>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1001125c:	0001883a 	nop
}
10011260:	e037883a 	mov	sp,fp
10011264:	dfc00117 	ldw	ra,4(sp)
10011268:	df000017 	ldw	fp,0(sp)
1001126c:	dec00204 	addi	sp,sp,8
10011270:	f800283a 	ret

10011274 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10011274:	deffff04 	addi	sp,sp,-4
10011278:	df000015 	stw	fp,0(sp)
1001127c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10011280:	000170fa 	wrctl	ienable,zero
}
10011284:	e037883a 	mov	sp,fp
10011288:	df000017 	ldw	fp,0(sp)
1001128c:	dec00104 	addi	sp,sp,4
10011290:	f800283a 	ret

10011294 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10011294:	defffa04 	addi	sp,sp,-24
10011298:	dfc00515 	stw	ra,20(sp)
1001129c:	df000415 	stw	fp,16(sp)
100112a0:	df000404 	addi	fp,sp,16
100112a4:	e13ffe15 	stw	r4,-8(fp)
100112a8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100112ac:	e0bfff17 	ldw	r2,-4(fp)
100112b0:	10800017 	ldw	r2,0(r2)
100112b4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100112b8:	e13ffe17 	ldw	r4,-8(fp)
100112bc:	00027300 	call	10002730 <strlen>
100112c0:	10800044 	addi	r2,r2,1
100112c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100112c8:	00000d06 	br	10011300 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100112cc:	e0bffc17 	ldw	r2,-16(fp)
100112d0:	10c00217 	ldw	r3,8(r2)
100112d4:	e0bffd17 	ldw	r2,-12(fp)
100112d8:	1809883a 	mov	r4,r3
100112dc:	e17ffe17 	ldw	r5,-8(fp)
100112e0:	100d883a 	mov	r6,r2
100112e4:	00115580 	call	10011558 <memcmp>
100112e8:	1000021e 	bne	r2,zero,100112f4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100112ec:	e0bffc17 	ldw	r2,-16(fp)
100112f0:	00000706 	br	10011310 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100112f4:	e0bffc17 	ldw	r2,-16(fp)
100112f8:	10800017 	ldw	r2,0(r2)
100112fc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011300:	e0fffc17 	ldw	r3,-16(fp)
10011304:	e0bfff17 	ldw	r2,-4(fp)
10011308:	18bff01e 	bne	r3,r2,100112cc <__alt_data_end+0xf80112cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1001130c:	0005883a 	mov	r2,zero
}
10011310:	e037883a 	mov	sp,fp
10011314:	dfc00117 	ldw	ra,4(sp)
10011318:	df000017 	ldw	fp,0(sp)
1001131c:	dec00204 	addi	sp,sp,8
10011320:	f800283a 	ret

10011324 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10011324:	defffb04 	addi	sp,sp,-20
10011328:	dfc00415 	stw	ra,16(sp)
1001132c:	df000315 	stw	fp,12(sp)
10011330:	df000304 	addi	fp,sp,12
10011334:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011338:	00840074 	movhi	r2,4097
1001133c:	108f8204 	addi	r2,r2,15880
10011340:	10800017 	ldw	r2,0(r2)
10011344:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011348:	00003106 	br	10011410 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1001134c:	e0bffd17 	ldw	r2,-12(fp)
10011350:	10800217 	ldw	r2,8(r2)
10011354:	1009883a 	mov	r4,r2
10011358:	00027300 	call	10002730 <strlen>
1001135c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10011360:	e0bffd17 	ldw	r2,-12(fp)
10011364:	10c00217 	ldw	r3,8(r2)
10011368:	e0bffe17 	ldw	r2,-8(fp)
1001136c:	10bfffc4 	addi	r2,r2,-1
10011370:	1885883a 	add	r2,r3,r2
10011374:	10800003 	ldbu	r2,0(r2)
10011378:	10803fcc 	andi	r2,r2,255
1001137c:	1080201c 	xori	r2,r2,128
10011380:	10bfe004 	addi	r2,r2,-128
10011384:	10800bd8 	cmpnei	r2,r2,47
10011388:	1000031e 	bne	r2,zero,10011398 <alt_find_file+0x74>
    {
      len -= 1;
1001138c:	e0bffe17 	ldw	r2,-8(fp)
10011390:	10bfffc4 	addi	r2,r2,-1
10011394:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011398:	e0bffe17 	ldw	r2,-8(fp)
1001139c:	e0ffff17 	ldw	r3,-4(fp)
100113a0:	1885883a 	add	r2,r3,r2
100113a4:	10800003 	ldbu	r2,0(r2)
100113a8:	10803fcc 	andi	r2,r2,255
100113ac:	1080201c 	xori	r2,r2,128
100113b0:	10bfe004 	addi	r2,r2,-128
100113b4:	10800be0 	cmpeqi	r2,r2,47
100113b8:	1000081e 	bne	r2,zero,100113dc <alt_find_file+0xb8>
100113bc:	e0bffe17 	ldw	r2,-8(fp)
100113c0:	e0ffff17 	ldw	r3,-4(fp)
100113c4:	1885883a 	add	r2,r3,r2
100113c8:	10800003 	ldbu	r2,0(r2)
100113cc:	10803fcc 	andi	r2,r2,255
100113d0:	1080201c 	xori	r2,r2,128
100113d4:	10bfe004 	addi	r2,r2,-128
100113d8:	10000a1e 	bne	r2,zero,10011404 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
100113dc:	e0bffd17 	ldw	r2,-12(fp)
100113e0:	10c00217 	ldw	r3,8(r2)
100113e4:	e0bffe17 	ldw	r2,-8(fp)
100113e8:	1809883a 	mov	r4,r3
100113ec:	e17fff17 	ldw	r5,-4(fp)
100113f0:	100d883a 	mov	r6,r2
100113f4:	00115580 	call	10011558 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100113f8:	1000021e 	bne	r2,zero,10011404 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100113fc:	e0bffd17 	ldw	r2,-12(fp)
10011400:	00000806 	br	10011424 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10011404:	e0bffd17 	ldw	r2,-12(fp)
10011408:	10800017 	ldw	r2,0(r2)
1001140c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011410:	e0fffd17 	ldw	r3,-12(fp)
10011414:	00840074 	movhi	r2,4097
10011418:	108f8204 	addi	r2,r2,15880
1001141c:	18bfcb1e 	bne	r3,r2,1001134c <__alt_data_end+0xf801134c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10011420:	0005883a 	mov	r2,zero
}
10011424:	e037883a 	mov	sp,fp
10011428:	dfc00117 	ldw	ra,4(sp)
1001142c:	df000017 	ldw	fp,0(sp)
10011430:	dec00204 	addi	sp,sp,8
10011434:	f800283a 	ret

10011438 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011438:	defffa04 	addi	sp,sp,-24
1001143c:	dfc00515 	stw	ra,20(sp)
10011440:	df000415 	stw	fp,16(sp)
10011444:	dc000315 	stw	r16,12(sp)
10011448:	df000404 	addi	fp,sp,16
1001144c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10011450:	00bffa04 	movi	r2,-24
10011454:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011458:	e03ffc15 	stw	zero,-16(fp)
1001145c:	00002106 	br	100114e4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10011460:	04040074 	movhi	r16,4097
10011464:	840b0404 	addi	r16,r16,11280
10011468:	e0bffc17 	ldw	r2,-16(fp)
1001146c:	1009883a 	mov	r4,r2
10011470:	01400304 	movi	r5,12
10011474:	000c8480 	call	1000c848 <__mulsi3>
10011478:	8085883a 	add	r2,r16,r2
1001147c:	10800017 	ldw	r2,0(r2)
10011480:	1000151e 	bne	r2,zero,100114d8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10011484:	04040074 	movhi	r16,4097
10011488:	840b0404 	addi	r16,r16,11280
1001148c:	e0bffc17 	ldw	r2,-16(fp)
10011490:	1009883a 	mov	r4,r2
10011494:	01400304 	movi	r5,12
10011498:	000c8480 	call	1000c848 <__mulsi3>
1001149c:	8085883a 	add	r2,r16,r2
100114a0:	e0fffe17 	ldw	r3,-8(fp)
100114a4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
100114a8:	00840074 	movhi	r2,4097
100114ac:	108f8604 	addi	r2,r2,15896
100114b0:	10c00017 	ldw	r3,0(r2)
100114b4:	e0bffc17 	ldw	r2,-16(fp)
100114b8:	1880040e 	bge	r3,r2,100114cc <alt_get_fd+0x94>
      {
        alt_max_fd = i;
100114bc:	00840074 	movhi	r2,4097
100114c0:	108f8604 	addi	r2,r2,15896
100114c4:	e0fffc17 	ldw	r3,-16(fp)
100114c8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
100114cc:	e0bffc17 	ldw	r2,-16(fp)
100114d0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
100114d4:	00000606 	br	100114f0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100114d8:	e0bffc17 	ldw	r2,-16(fp)
100114dc:	10800044 	addi	r2,r2,1
100114e0:	e0bffc15 	stw	r2,-16(fp)
100114e4:	e0bffc17 	ldw	r2,-16(fp)
100114e8:	10800810 	cmplti	r2,r2,32
100114ec:	103fdc1e 	bne	r2,zero,10011460 <__alt_data_end+0xf8011460>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100114f0:	e0bffd17 	ldw	r2,-12(fp)
}
100114f4:	e6ffff04 	addi	sp,fp,-4
100114f8:	dfc00217 	ldw	ra,8(sp)
100114fc:	df000117 	ldw	fp,4(sp)
10011500:	dc000017 	ldw	r16,0(sp)
10011504:	dec00304 	addi	sp,sp,12
10011508:	f800283a 	ret

1001150c <atexit>:
1001150c:	200b883a 	mov	r5,r4
10011510:	000d883a 	mov	r6,zero
10011514:	0009883a 	mov	r4,zero
10011518:	000f883a 	mov	r7,zero
1001151c:	00115d41 	jmpi	100115d4 <__register_exitproc>

10011520 <exit>:
10011520:	defffe04 	addi	sp,sp,-8
10011524:	000b883a 	mov	r5,zero
10011528:	dc000015 	stw	r16,0(sp)
1001152c:	dfc00115 	stw	ra,4(sp)
10011530:	2021883a 	mov	r16,r4
10011534:	00116e80 	call	100116e8 <__call_exitprocs>
10011538:	00840074 	movhi	r2,4097
1001153c:	108f7c04 	addi	r2,r2,15856
10011540:	11000017 	ldw	r4,0(r2)
10011544:	20800f17 	ldw	r2,60(r4)
10011548:	10000126 	beq	r2,zero,10011550 <exit+0x30>
1001154c:	103ee83a 	callr	r2
10011550:	8009883a 	mov	r4,r16
10011554:	001187c0 	call	1001187c <_exit>

10011558 <memcmp>:
10011558:	01c000c4 	movi	r7,3
1001155c:	3980192e 	bgeu	r7,r6,100115c4 <memcmp+0x6c>
10011560:	2144b03a 	or	r2,r4,r5
10011564:	11c4703a 	and	r2,r2,r7
10011568:	10000f26 	beq	r2,zero,100115a8 <memcmp+0x50>
1001156c:	20800003 	ldbu	r2,0(r4)
10011570:	28c00003 	ldbu	r3,0(r5)
10011574:	10c0151e 	bne	r2,r3,100115cc <memcmp+0x74>
10011578:	31bfff84 	addi	r6,r6,-2
1001157c:	01ffffc4 	movi	r7,-1
10011580:	00000406 	br	10011594 <memcmp+0x3c>
10011584:	20800003 	ldbu	r2,0(r4)
10011588:	28c00003 	ldbu	r3,0(r5)
1001158c:	31bfffc4 	addi	r6,r6,-1
10011590:	10c00e1e 	bne	r2,r3,100115cc <memcmp+0x74>
10011594:	21000044 	addi	r4,r4,1
10011598:	29400044 	addi	r5,r5,1
1001159c:	31fff91e 	bne	r6,r7,10011584 <__alt_data_end+0xf8011584>
100115a0:	0005883a 	mov	r2,zero
100115a4:	f800283a 	ret
100115a8:	20c00017 	ldw	r3,0(r4)
100115ac:	28800017 	ldw	r2,0(r5)
100115b0:	1880041e 	bne	r3,r2,100115c4 <memcmp+0x6c>
100115b4:	31bfff04 	addi	r6,r6,-4
100115b8:	21000104 	addi	r4,r4,4
100115bc:	29400104 	addi	r5,r5,4
100115c0:	39bff936 	bltu	r7,r6,100115a8 <__alt_data_end+0xf80115a8>
100115c4:	303fe91e 	bne	r6,zero,1001156c <__alt_data_end+0xf801156c>
100115c8:	003ff506 	br	100115a0 <__alt_data_end+0xf80115a0>
100115cc:	10c5c83a 	sub	r2,r2,r3
100115d0:	f800283a 	ret

100115d4 <__register_exitproc>:
100115d4:	00840074 	movhi	r2,4097
100115d8:	defffa04 	addi	sp,sp,-24
100115dc:	108f7c04 	addi	r2,r2,15856
100115e0:	dc000315 	stw	r16,12(sp)
100115e4:	14000017 	ldw	r16,0(r2)
100115e8:	dc400415 	stw	r17,16(sp)
100115ec:	dfc00515 	stw	ra,20(sp)
100115f0:	80805217 	ldw	r2,328(r16)
100115f4:	2023883a 	mov	r17,r4
100115f8:	10003626 	beq	r2,zero,100116d4 <__register_exitproc+0x100>
100115fc:	10c00117 	ldw	r3,4(r2)
10011600:	010007c4 	movi	r4,31
10011604:	20c00e16 	blt	r4,r3,10011640 <__register_exitproc+0x6c>
10011608:	1a400044 	addi	r9,r3,1
1001160c:	8800211e 	bne	r17,zero,10011694 <__register_exitproc+0xc0>
10011610:	18c00084 	addi	r3,r3,2
10011614:	18c7883a 	add	r3,r3,r3
10011618:	18c7883a 	add	r3,r3,r3
1001161c:	12400115 	stw	r9,4(r2)
10011620:	10c7883a 	add	r3,r2,r3
10011624:	19400015 	stw	r5,0(r3)
10011628:	0005883a 	mov	r2,zero
1001162c:	dfc00517 	ldw	ra,20(sp)
10011630:	dc400417 	ldw	r17,16(sp)
10011634:	dc000317 	ldw	r16,12(sp)
10011638:	dec00604 	addi	sp,sp,24
1001163c:	f800283a 	ret
10011640:	00800034 	movhi	r2,0
10011644:	10800004 	addi	r2,r2,0
10011648:	10002526 	beq	r2,zero,100116e0 <__register_exitproc+0x10c>
1001164c:	01006404 	movi	r4,400
10011650:	d9400015 	stw	r5,0(sp)
10011654:	d9800115 	stw	r6,4(sp)
10011658:	d9c00215 	stw	r7,8(sp)
1001165c:	00000000 	call	10000000 <__reset>
10011660:	d9400017 	ldw	r5,0(sp)
10011664:	d9800117 	ldw	r6,4(sp)
10011668:	d9c00217 	ldw	r7,8(sp)
1001166c:	10001c26 	beq	r2,zero,100116e0 <__register_exitproc+0x10c>
10011670:	80c05217 	ldw	r3,328(r16)
10011674:	10000115 	stw	zero,4(r2)
10011678:	02400044 	movi	r9,1
1001167c:	10c00015 	stw	r3,0(r2)
10011680:	80805215 	stw	r2,328(r16)
10011684:	10006215 	stw	zero,392(r2)
10011688:	10006315 	stw	zero,396(r2)
1001168c:	0007883a 	mov	r3,zero
10011690:	883fdf26 	beq	r17,zero,10011610 <__alt_data_end+0xf8011610>
10011694:	18d1883a 	add	r8,r3,r3
10011698:	4211883a 	add	r8,r8,r8
1001169c:	1211883a 	add	r8,r2,r8
100116a0:	41802215 	stw	r6,136(r8)
100116a4:	01000044 	movi	r4,1
100116a8:	11806217 	ldw	r6,392(r2)
100116ac:	20c8983a 	sll	r4,r4,r3
100116b0:	310cb03a 	or	r6,r6,r4
100116b4:	11806215 	stw	r6,392(r2)
100116b8:	41c04215 	stw	r7,264(r8)
100116bc:	01800084 	movi	r6,2
100116c0:	89bfd31e 	bne	r17,r6,10011610 <__alt_data_end+0xf8011610>
100116c4:	11806317 	ldw	r6,396(r2)
100116c8:	3108b03a 	or	r4,r6,r4
100116cc:	11006315 	stw	r4,396(r2)
100116d0:	003fcf06 	br	10011610 <__alt_data_end+0xf8011610>
100116d4:	80805304 	addi	r2,r16,332
100116d8:	80805215 	stw	r2,328(r16)
100116dc:	003fc706 	br	100115fc <__alt_data_end+0xf80115fc>
100116e0:	00bfffc4 	movi	r2,-1
100116e4:	003fd106 	br	1001162c <__alt_data_end+0xf801162c>

100116e8 <__call_exitprocs>:
100116e8:	00840074 	movhi	r2,4097
100116ec:	108f7c04 	addi	r2,r2,15856
100116f0:	10800017 	ldw	r2,0(r2)
100116f4:	defff404 	addi	sp,sp,-48
100116f8:	dd800815 	stw	r22,32(sp)
100116fc:	d8800015 	stw	r2,0(sp)
10011700:	10805204 	addi	r2,r2,328
10011704:	dd000615 	stw	r20,24(sp)
10011708:	dc800415 	stw	r18,16(sp)
1001170c:	dfc00b15 	stw	ra,44(sp)
10011710:	df000a15 	stw	fp,40(sp)
10011714:	ddc00915 	stw	r23,36(sp)
10011718:	dd400715 	stw	r21,28(sp)
1001171c:	dcc00515 	stw	r19,20(sp)
10011720:	dc400315 	stw	r17,12(sp)
10011724:	dc000215 	stw	r16,8(sp)
10011728:	2025883a 	mov	r18,r4
1001172c:	2829883a 	mov	r20,r5
10011730:	d8800115 	stw	r2,4(sp)
10011734:	05bfffc4 	movi	r22,-1
10011738:	d8800017 	ldw	r2,0(sp)
1001173c:	14c05217 	ldw	r19,328(r2)
10011740:	98001d26 	beq	r19,zero,100117b8 <__call_exitprocs+0xd0>
10011744:	dd400117 	ldw	r21,4(sp)
10011748:	98800117 	ldw	r2,4(r19)
1001174c:	173fffc4 	addi	fp,r2,-1
10011750:	e0000d16 	blt	fp,zero,10011788 <__call_exitprocs+0xa0>
10011754:	14000044 	addi	r16,r2,1
10011758:	8421883a 	add	r16,r16,r16
1001175c:	8421883a 	add	r16,r16,r16
10011760:	84402004 	addi	r17,r16,128
10011764:	9c63883a 	add	r17,r19,r17
10011768:	9c21883a 	add	r16,r19,r16
1001176c:	a0001e26 	beq	r20,zero,100117e8 <__call_exitprocs+0x100>
10011770:	80804017 	ldw	r2,256(r16)
10011774:	15001c26 	beq	r2,r20,100117e8 <__call_exitprocs+0x100>
10011778:	e73fffc4 	addi	fp,fp,-1
1001177c:	843fff04 	addi	r16,r16,-4
10011780:	8c7fff04 	addi	r17,r17,-4
10011784:	e5bff91e 	bne	fp,r22,1001176c <__alt_data_end+0xf801176c>
10011788:	00800034 	movhi	r2,0
1001178c:	10800004 	addi	r2,r2,0
10011790:	10000926 	beq	r2,zero,100117b8 <__call_exitprocs+0xd0>
10011794:	98800117 	ldw	r2,4(r19)
10011798:	1000311e 	bne	r2,zero,10011860 <__call_exitprocs+0x178>
1001179c:	98800017 	ldw	r2,0(r19)
100117a0:	10003426 	beq	r2,zero,10011874 <__call_exitprocs+0x18c>
100117a4:	9809883a 	mov	r4,r19
100117a8:	a8800015 	stw	r2,0(r21)
100117ac:	00000000 	call	10000000 <__reset>
100117b0:	acc00017 	ldw	r19,0(r21)
100117b4:	983fe41e 	bne	r19,zero,10011748 <__alt_data_end+0xf8011748>
100117b8:	dfc00b17 	ldw	ra,44(sp)
100117bc:	df000a17 	ldw	fp,40(sp)
100117c0:	ddc00917 	ldw	r23,36(sp)
100117c4:	dd800817 	ldw	r22,32(sp)
100117c8:	dd400717 	ldw	r21,28(sp)
100117cc:	dd000617 	ldw	r20,24(sp)
100117d0:	dcc00517 	ldw	r19,20(sp)
100117d4:	dc800417 	ldw	r18,16(sp)
100117d8:	dc400317 	ldw	r17,12(sp)
100117dc:	dc000217 	ldw	r16,8(sp)
100117e0:	dec00c04 	addi	sp,sp,48
100117e4:	f800283a 	ret
100117e8:	98800117 	ldw	r2,4(r19)
100117ec:	80c00017 	ldw	r3,0(r16)
100117f0:	10bfffc4 	addi	r2,r2,-1
100117f4:	17001526 	beq	r2,fp,1001184c <__call_exitprocs+0x164>
100117f8:	80000015 	stw	zero,0(r16)
100117fc:	183fde26 	beq	r3,zero,10011778 <__alt_data_end+0xf8011778>
10011800:	00800044 	movi	r2,1
10011804:	1708983a 	sll	r4,r2,fp
10011808:	98806217 	ldw	r2,392(r19)
1001180c:	9dc00117 	ldw	r23,4(r19)
10011810:	2084703a 	and	r2,r4,r2
10011814:	1000061e 	bne	r2,zero,10011830 <__call_exitprocs+0x148>
10011818:	183ee83a 	callr	r3
1001181c:	98800117 	ldw	r2,4(r19)
10011820:	15ffc51e 	bne	r2,r23,10011738 <__alt_data_end+0xf8011738>
10011824:	a8800017 	ldw	r2,0(r21)
10011828:	14ffd326 	beq	r2,r19,10011778 <__alt_data_end+0xf8011778>
1001182c:	003fc206 	br	10011738 <__alt_data_end+0xf8011738>
10011830:	98806317 	ldw	r2,396(r19)
10011834:	2084703a 	and	r2,r4,r2
10011838:	1000061e 	bne	r2,zero,10011854 <__call_exitprocs+0x16c>
1001183c:	89400017 	ldw	r5,0(r17)
10011840:	9009883a 	mov	r4,r18
10011844:	183ee83a 	callr	r3
10011848:	003ff406 	br	1001181c <__alt_data_end+0xf801181c>
1001184c:	9f000115 	stw	fp,4(r19)
10011850:	003fea06 	br	100117fc <__alt_data_end+0xf80117fc>
10011854:	89000017 	ldw	r4,0(r17)
10011858:	183ee83a 	callr	r3
1001185c:	003fef06 	br	1001181c <__alt_data_end+0xf801181c>
10011860:	98800017 	ldw	r2,0(r19)
10011864:	982b883a 	mov	r21,r19
10011868:	1027883a 	mov	r19,r2
1001186c:	983fb61e 	bne	r19,zero,10011748 <__alt_data_end+0xf8011748>
10011870:	003fd106 	br	100117b8 <__alt_data_end+0xf80117b8>
10011874:	0005883a 	mov	r2,zero
10011878:	003ffa06 	br	10011864 <__alt_data_end+0xf8011864>

1001187c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1001187c:	defffd04 	addi	sp,sp,-12
10011880:	df000215 	stw	fp,8(sp)
10011884:	df000204 	addi	fp,sp,8
10011888:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1001188c:	0001883a 	nop
10011890:	e0bfff17 	ldw	r2,-4(fp)
10011894:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10011898:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1001189c:	10000226 	beq	r2,zero,100118a8 <_exit+0x2c>
    ALT_SIM_FAIL();
100118a0:	002af070 	cmpltui	zero,zero,43969
100118a4:	00000106 	br	100118ac <_exit+0x30>
  } else {
    ALT_SIM_PASS();
100118a8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100118ac:	003fff06 	br	100118ac <__alt_data_end+0xf80118ac>
