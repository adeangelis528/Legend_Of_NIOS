
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0001230c memsz 0x0001230c flags r-x
    LOAD off    0x0001332c vaddr 0x1001232c paddr 0x10013e18 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015904 vaddr 0x10015904 paddr 0x10015904 align 2**12
         filesz 0x00000000 memsz 0x00000174 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000116dc  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a94  10011898  10011898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  1001232c  10013e18  0001332c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000174  10015904  10015904  00015904  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014e18  2**0
                  CONTENTS
  7 .sdram        00000000  10015a78  10015a78  00014e18  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014e18  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d88  00000000  00000000  00014e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002425d  00000000  00000000  00015bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009272  00000000  00000000  00039e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b4bd  00000000  00000000  00043097  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000239c  00000000  00000000  0004e554  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003412  00000000  00000000  000508f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016ea9  00000000  00000000  00053d02  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006abac  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013a8  00000000  00000000  0006abf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006f3c9  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006f3cc  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006f3d8  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006f3d9  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006f3da  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006f3de  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006f3e2  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006f3e6  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006f3f1  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006f3fc  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006f407  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000004b  00000000  00000000  0006f412  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000a34d7  00000000  00000000  0006f45d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
10011898 l    d  .rodata	00000000 .rodata
1001232c l    d  .rwdata	00000000 .rwdata
10015904 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10015a78 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 enemyController.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
10015904 l     O .bss	00000002 ctl_reg.3319
10015906 l     O .bss	00000002 no_device.3320
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10012072 l     O .rodata	00000010 zeroes.4181
10012082 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10004a00 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100065a8 l     F .text	00000008 __fp_lock
100065b0 l     F .text	00000008 __fp_unlock
100065c4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1001232c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10012770 l     O .rwdata	00000020 lc_ctype_charset
10012750 l     O .rwdata	00000020 lc_message_charset
10012790 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
100120b4 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10009af4 l     F .text	000000fc __sprint_r.part.0
100121e8 l     O .rodata	00000010 blanks.4125
100121d8 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000c704 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f054 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000f17c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000f1a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000f2b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000f3ac l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000f490 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000f674 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10013e08 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000f928 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000fa78 l     F .text	00000038 alt_dev_reg
10012d78 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000fd54 l     F .text	00000204 altera_avalon_jtag_uart_irq
1000ff58 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1001082c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10010cc4 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10010e1c l     F .text	00000050 alt_get_errno
10010e6c l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10009134 g     F .text	00000074 _mprec_log10
10009220 g     F .text	0000008c __any_on
1000b520 g     F .text	00000054 _isatty_r
100120c0 g     O .rodata	00000028 __mprec_tinytens
1000f5bc g     F .text	00000078 alt_main
100025d0 g     F .text	000000b8 _puts_r
10015978 g     O .bss	00000100 alt_irq
1000b574 g     F .text	0000005c _lseek_r
10013e18 g       *ABS*	00000000 __flash_rwdata_start
1000da74 g     F .text	00000084 .hidden __eqdf2
10015a78 g       *ABS*	00000000 __alt_heap_start
10002594 g     F .text	0000003c printf
1000b79c g     F .text	0000009c _wcrtomb_r
100099ec g     F .text	0000005c __sseek
1000690c g     F .text	00000010 __sinit
1000b62c g     F .text	00000154 __swbuf_r
10007384 g     F .text	0000007c _setlocale_r
10006764 g     F .text	00000078 __sfmoreglue
1000f654 g     F .text	00000020 __malloc_unlock
1000246c g     F .text	00000080 UsbGetRetryCnt
10007fe4 g     F .text	0000015c memmove
100005c0 g     F .text	0000004c IO_init
100068f4 g     F .text	00000018 _cleanup
10008264 g     F .text	000000a8 _Balloc
1000daf8 g     F .text	000000e0 .hidden __gtdf2
1001125c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000b4c8 g     F .text	00000058 _fstat_r
10015920 g     O .bss	00000004 errno
10009968 g     F .text	00000008 __seofread
10015928 g     O .bss	00000004 alt_argv
1001bdd8 g       *ABS*	00000000 _gp
1000f8f8 g     F .text	00000030 usleep
10012bf8 g     O .rwdata	00000180 alt_fd_list
1001127c g     F .text	00000090 alt_find_dev
10007eac g     F .text	00000138 memcpy
100065b8 g     F .text	0000000c _cleanup_r
1000ee7c g     F .text	000000d0 .hidden __floatsidf
10010da4 g     F .text	00000078 alt_io_redirect
1000dbd8 g     F .text	000000e0 .hidden __ltdf2
10011898 g       *ABS*	00000000 __DTOR_END__
10002688 g     F .text	00000014 puts
1000984c g     F .text	00000074 __fpclassifyd
10009090 g     F .text	000000a4 __ratio
1000b02c g     F .text	00000024 __vfiprintf_internal
10010154 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10002568 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000c820 g     F .text	00000008 .hidden __udivsi3
1000f300 g     F .text	000000ac isatty
10012110 g     O .rodata	000000c8 __mprec_tens
10007400 g     F .text	0000000c __locale_charset
1001591c g     O .bss	00000004 __malloc_top_pad
10001b0c g     F .text	00000264 UsbGetConfigDesc2
10013de0 g     O .rwdata	00000004 __mb_cur_max
10007430 g     F .text	0000000c _localeconv_r
1000868c g     F .text	0000003c __i2b
10006d70 g     F .text	000004a4 __sfvwrite_r
100098c0 g     F .text	00000054 _sbrk_r
1000b5d0 g     F .text	0000005c _read_r
10013e00 g     O .rwdata	00000004 alt_max_fd
1000b1d8 g     F .text	00000100 _fclose_r
10006578 g     F .text	00000030 fflush
10015918 g     O .bss	00000004 __malloc_max_sbrked_mem
1000c858 g     F .text	0000089c .hidden __adddf3
10008e38 g     F .text	0000011c __b2d
1000c0e8 g     F .text	0000061c .hidden __umoddi3
1000f4e0 g     F .text	000000dc lseek
10013dd8 g     O .rwdata	00000004 _global_impure_ptr
100092ac g     F .text	000005a0 _realloc_r
10015a78 g       *ABS*	00000000 __bss_end
10010bd4 g     F .text	000000f0 alt_iic_isr_register
10011158 g     F .text	00000104 alt_tick
1000baa8 g     F .text	00000640 .hidden __udivdi3
1000b2ec g     F .text	00000184 _fputwc_r
100120e8 g     O .rodata	00000028 __mprec_bigtens
10008470 g     F .text	00000104 __s2b
1000ef4c g     F .text	000000a4 .hidden __floatunsidf
10008be0 g     F .text	00000060 __mcmp
1000156c g     F .text	000000fc UsbSetAddress
1000692c g     F .text	00000018 __fp_lock_all
10010b88 g     F .text	0000004c alt_ic_irq_enabled
100110c0 g     F .text	00000098 alt_alarm_stop
10015930 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
10012bd0 g     O .rwdata	00000028 alt_dev_null
10010810 g     F .text	0000001c alt_dcache_flush_all
10008574 g     F .text	00000068 __hi0bits
10000664 g     F .text	00000054 IO_read
1000edf4 g     F .text	00000088 .hidden __fixdfsi
10013e18 g       *ABS*	00000000 __ram_rwdata_end
10013df8 g     O .rwdata	00000008 alt_dev_list
1000f978 g     F .text	00000100 write
1001232c g       *ABS*	00000000 __ram_rodata_end
1000f1f8 g     F .text	000000b8 fstat
1000dbd8 g     F .text	000000e0 .hidden __ledf2
100024ec g     F .text	0000007c UsbPrintMem
10008958 g     F .text	00000140 __pow5mult
10009c08 g     F .text	00001424 ___vfiprintf_internal_r
10015910 g     O .bss	00000004 __nlocale_changed
1000c828 g     F .text	00000008 .hidden __umodsi3
10015a78 g       *ABS*	00000000 end
1000fc90 g     F .text	000000c4 altera_avalon_jtag_uart_init
10011898 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000eff0 g     F .text	00000064 .hidden __clzsi2
10010360 g     F .text	00000218 altera_avalon_jtag_uart_write
1000691c g     F .text	00000004 __sfp_lock_acquire
10007dc4 g     F .text	000000e8 memchr
100027b0 g     F .text	000020fc ___vfprintf_internal_r
10001e6c g     F .text	000000fc UsbClassRequest
10006a80 g     F .text	000002f0 _free_r
1000740c g     F .text	00000010 __locale_mb_cur_max
100116d0 g     F .text	00000194 __call_exitprocs
1001590c g     O .bss	00000004 __mlocale_changed
10013de4 g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
10015934 g     O .bss	00000004 _alt_tick_rate
100026b4 g     F .text	00000064 rand
10008a98 g     F .text	00000148 __lshift
10015938 g     O .bss	00000004 _alt_nticks
1000f6c4 g     F .text	00000104 read
1000fae4 g     F .text	00000048 alt_sys_init
100115bc g     F .text	00000114 __register_exitproc
100086c8 g     F .text	00000290 __multiply
10010000 g     F .text	00000068 altera_avalon_jtag_uart_close
1000c830 g     F .text	00000028 .hidden __mulsi3
1001232c g       *ABS*	00000000 __ram_rwdata_start
10011898 g       *ABS*	00000000 __ram_rodata_start
10015950 g     O .bss	00000028 __malloc_current_mallinfo
10008f54 g     F .text	0000013c __d2b
10001668 g     F .text	00000144 UsbGetDeviceDesc1
1000fb2c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011420 g     F .text	000000d4 alt_get_fd
100106b8 g     F .text	00000158 alt_busy_sleep
1000b0ac g     F .text	00000054 _close_r
10011540 g     F .text	0000007c memcmp
1000fbec g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10015a78 g       *ABS*	00000000 __alt_stack_base
1000fc3c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100048d0 g     F .text	00000130 __swsetup_r
1000d0f4 g     F .text	00000980 .hidden __divdf3
100067dc g     F .text	00000118 __sfp
100091a8 g     F .text	00000078 __copybits
100127c8 g     O .rwdata	00000408 __malloc_av_
10006928 g     F .text	00000004 __sinit_lock_release
1000dcb8 g     F .text	0000086c .hidden __muldf3
10009914 g     F .text	00000054 __sread
100023e8 g     F .text	00000084 UsbWaitTDListDone
1001130c g     F .text	00000114 alt_find_file
1001087c g     F .text	000000a4 alt_dev_llist_insert
1000f634 g     F .text	00000020 __malloc_lock
1000f848 g     F .text	000000b0 sbrk
10006350 g     F .text	00000228 _fflush_r
1000b100 g     F .text	000000d8 _calloc_r
10015904 g       *ABS*	00000000 __bss_start
1001593c g     O .bss	00000014 enemyCounter
10008140 g     F .text	00000124 memset
100006b8 g     F .text	00000d5c main
1001592c g     O .bss	00000004 alt_envp
10015914 g     O .bss	00000004 __malloc_max_total_mem
1000fb8c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10001d70 g     F .text	000000fc UsbSetConfig
1000b780 g     F .text	0000001c __swbuf
1000269c g     F .text	00000018 srand
10009a48 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000b2d8 g     F .text	00000014 fclose
10004c28 g     F .text	00001728 _dtoa_r
1000761c g     F .text	000007a8 _malloc_r
1000b910 g     F .text	00000030 __ascii_wctomb
10013e04 g     O .rwdata	00000004 alt_errno
10007214 g     F .text	000000b8 _fwalk
1000c770 g     F .text	00000054 .hidden __divsi3
1000695c g     F .text	00000124 _malloc_trim_r
10001f68 g     F .text	00000144 UsbGetHidDesc
10011898 g       *ABS*	00000000 __CTOR_END__
10009a50 g     F .text	000000a4 strcmp
10011898 g       *ABS*	00000000 __flash_rodata_start
10011898 g       *ABS*	00000000 __DTOR_LIST__
1000da74 g     F .text	00000084 .hidden __nedf2
10001468 g     F .text	00000044 UsbRead
1000fab0 g     F .text	00000034 alt_irq_init
1000f7c8 g     F .text	00000080 alt_release_fd
100121f8 g     O .rodata	00000100 .hidden __clz_tab
10015908 g     O .bss	00000004 _PathLocale
100114f4 g     F .text	00000014 atexit
1000b050 g     F .text	0000005c _write_r
1000743c g     F .text	0000001c setlocale
10013ddc g     O .rwdata	00000004 _impure_ptr
10015924 g     O .bss	00000004 alt_argc
1001097c g     F .text	0000005c _do_dtors
10007428 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10008dd8 g     F .text	00000060 __ulp
10006944 g     F .text	00000018 __fp_unlock_all
10013df0 g     O .rwdata	00000008 alt_fs_list
100020ac g     F .text	0000033c UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10007458 g     F .text	0000000c localeconv
100109f4 g     F .text	00000050 alt_ic_isr_register
10013e18 g       *ABS*	00000000 _edata
10015a78 g       *ABS*	00000000 _end
10001414 g     F .text	00000054 UsbWrite
100001bc g       *ABS*	00000000 __ram_exceptions_end
10010068 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10010ae4 g     F .text	000000a4 alt_ic_irq_disable
10009970 g     F .text	0000007c __swrite
10013de8 g     O .rwdata	00000004 __malloc_trim_threshold
1000741c g     F .text	0000000c __locale_msgcharset
10011508 g     F .text	00000038 exit
100072cc g     F .text	000000b8 _fwalk_reent
10008c40 g     F .text	00000198 __mdiff
1000c7c4 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10006920 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000060c g     F .text	00000058 IO_write
10011864 g     F .text	00000034 _exit
10010578 g     F .text	00000140 alt_alarm_start
1000b99c g     F .text	0000010c .hidden __muldi3
10007464 g     F .text	000001b8 __smakebuf_r
10002718 g     F .text	00000098 strlen
10010f60 g     F .text	00000160 open
1000daf8 g     F .text	000000e0 .hidden __gedf2
10013dec g     O .rwdata	00000004 __wctomb
10009bf0 g     F .text	00000018 __sprint_r
100109d8 g     F .text	0000001c alt_icache_flush_all
10013e0c g     O .rwdata	00000004 alt_priority_mask
10010a44 g     F .text	000000a0 alt_ic_irq_enable
100048ac g     F .text	00000024 __vfprintf_internal
1000b940 g     F .text	0000005c _wctomb_r
1000e524 g     F .text	000008d0 .hidden __subdf3
100085dc g     F .text	000000b0 __lo0bits
10001980 g     F .text	0000018c UsbGetConfigDesc1
10013e10 g     O .rwdata	00000008 alt_alarm_list
10010920 g     F .text	0000005c _do_ctors
100014ac g     F .text	000000c0 UsbSoftReset
1000b838 g     F .text	000000d8 wcrtomb
1000f0a4 g     F .text	000000d8 close
100017ac g     F .text	000001d4 UsbGetDeviceDesc2
1000f410 g     F .text	00000080 alt_load
100001f8 g     F .text	000003c8 updateEnemies
1000b470 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
10006924 g     F .text	00000004 __sinit_lock_acquire
10008334 g     F .text	0000013c __multadd
1000830c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00840074 	movhi	r2,4097
10000130:	10965e04 	addi	r2,r2,22904
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	00840074 	movhi	r2,4097
10000148:	10965e04 	addi	r2,r2,22904
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6af7614 	ori	gp,gp,48600
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	10964114 	ori	r2,r2,22788

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18d69e14 	ori	r3,r3,23160

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	000f4100 	call	1000f410 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	000f5bc0 	call	1000f5bc <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <updateEnemies>:

int enemyCounter[5] = {0,0,0,0,0};


void updateEnemies()
{
100001f8:	defff604 	addi	sp,sp,-40
100001fc:	dfc00915 	stw	ra,36(sp)
10000200:	df000815 	stw	fp,32(sp)
10000204:	df000804 	addi	fp,sp,32

	*select_addr = 0;
10000208:	00802004 	movi	r2,128
1000020c:	10000015 	stw	zero,0(r2)
	*entity_read_addr = 1;
10000210:	00801c04 	movi	r2,112
10000214:	00c00044 	movi	r3,1
10000218:	10c00015 	stw	r3,0(r2)
	int player_x = *entity_x_addr;
1000021c:	00801004 	movi	r2,64
10000220:	10800017 	ldw	r2,0(r2)
10000224:	e0bff915 	stw	r2,-28(fp)
	int player_y = *entity_y_addr;
10000228:	00800c04 	movi	r2,48
1000022c:	10800017 	ldw	r2,0(r2)
10000230:	e0bffa15 	stw	r2,-24(fp)
	*entity_read_addr = 0;
10000234:	00801c04 	movi	r2,112
10000238:	10000015 	stw	zero,0(r2)

	int i = 0;
1000023c:	e03ff815 	stw	zero,-32(fp)
	for(i = 1; i <= 5; i++)
10000240:	00800044 	movi	r2,1
10000244:	e0bff815 	stw	r2,-32(fp)
10000248:	0000d506 	br	100005a0 <updateEnemies+0x3a8>
	{
		*select_addr = i;
1000024c:	00802004 	movi	r2,128
10000250:	e0fff817 	ldw	r3,-32(fp)
10000254:	10c00015 	stw	r3,0(r2)
		*entity_read_addr = 1;
10000258:	00801c04 	movi	r2,112
1000025c:	00c00044 	movi	r3,1
10000260:	10c00015 	stw	r3,0(r2)
		int enemy_x = *entity_x_addr;
10000264:	00801004 	movi	r2,64
10000268:	10800017 	ldw	r2,0(r2)
1000026c:	e0bffb15 	stw	r2,-20(fp)
		int enemy_y = *entity_y_addr;
10000270:	00800c04 	movi	r2,48
10000274:	10800017 	ldw	r2,0(r2)
10000278:	e0bffc15 	stw	r2,-16(fp)
		int enemy_active = *entity_active_addr;
1000027c:	00800804 	movi	r2,32
10000280:	10800017 	ldw	r2,0(r2)
10000284:	e0bffd15 	stw	r2,-12(fp)
		int enemy_type = *entity_type_addr;
10000288:	00803c04 	movi	r2,240
1000028c:	10800017 	ldw	r2,0(r2)
10000290:	e0bffe15 	stw	r2,-8(fp)
		*entity_read_addr = 0;
10000294:	00801c04 	movi	r2,112
10000298:	10000015 	stw	zero,0(r2)
		if(enemy_type == 1)
1000029c:	e0bffe17 	ldw	r2,-8(fp)
100002a0:	10800058 	cmpnei	r2,r2,1
100002a4:	10002c1e 	bne	r2,zero,10000358 <updateEnemies+0x160>
		{
			if(enemy_active && enemyCounter[i-1] >= 3)
100002a8:	e0bffd17 	ldw	r2,-12(fp)
100002ac:	1000aa26 	beq	r2,zero,10000558 <updateEnemies+0x360>
100002b0:	e0bff817 	ldw	r2,-32(fp)
100002b4:	10ffffc4 	addi	r3,r2,-1
100002b8:	00840074 	movhi	r2,4097
100002bc:	10964f04 	addi	r2,r2,22844
100002c0:	18c7883a 	add	r3,r3,r3
100002c4:	18c7883a 	add	r3,r3,r3
100002c8:	10c5883a 	add	r2,r2,r3
100002cc:	10800017 	ldw	r2,0(r2)
100002d0:	108000d0 	cmplti	r2,r2,3
100002d4:	1000a01e 	bne	r2,zero,10000558 <updateEnemies+0x360>
			{
				int dir = rand() % 4 + 1;
100002d8:	00026b40 	call	100026b4 <rand>
100002dc:	1007883a 	mov	r3,r2
100002e0:	00a00034 	movhi	r2,32768
100002e4:	108000c4 	addi	r2,r2,3
100002e8:	1884703a 	and	r2,r3,r2
100002ec:	1000040e 	bge	r2,zero,10000300 <updateEnemies+0x108>
100002f0:	10bfffc4 	addi	r2,r2,-1
100002f4:	00ffff04 	movi	r3,-4
100002f8:	10c4b03a 	or	r2,r2,r3
100002fc:	10800044 	addi	r2,r2,1
10000300:	10800044 	addi	r2,r2,1
10000304:	e0bfff15 	stw	r2,-4(fp)
				*entity_write_addr = 1;
10000308:	00801804 	movi	r2,96
1000030c:	00c00044 	movi	r3,1
10000310:	10c00015 	stw	r3,0(r2)
				*entity_dir_addr = dir;
10000314:	00801404 	movi	r2,80
10000318:	e0ffff17 	ldw	r3,-4(fp)
1000031c:	10c00015 	stw	r3,0(r2)
				*entity_write_addr = 0;
10000320:	00801804 	movi	r2,96
10000324:	10000015 	stw	zero,0(r2)
				enemyCounter[i-1] = 0;
10000328:	e0bff817 	ldw	r2,-32(fp)
1000032c:	10ffffc4 	addi	r3,r2,-1
10000330:	00840074 	movhi	r2,4097
10000334:	10964f04 	addi	r2,r2,22844
10000338:	18c7883a 	add	r3,r3,r3
1000033c:	18c7883a 	add	r3,r3,r3
10000340:	10c5883a 	add	r2,r2,r3
10000344:	10000015 	stw	zero,0(r2)
				printf("\nEnemy direction changed");
10000348:	01040074 	movhi	r4,4097
1000034c:	21062604 	addi	r4,r4,6296
10000350:	00025940 	call	10002594 <printf>
10000354:	00008006 	br	10000558 <updateEnemies+0x360>
			}
		}
		else if(enemy_type == 2)
10000358:	e0bffe17 	ldw	r2,-8(fp)
1000035c:	10800098 	cmpnei	r2,r2,2
10000360:	1000401e 	bne	r2,zero,10000464 <updateEnemies+0x26c>
		{
			if(enemy_x-player_x < -16)
10000364:	e0fffb17 	ldw	r3,-20(fp)
10000368:	e0bff917 	ldw	r2,-28(fp)
1000036c:	1885c83a 	sub	r2,r3,r2
10000370:	10bffc08 	cmpgei	r2,r2,-16
10000374:	1000091e 	bne	r2,zero,1000039c <updateEnemies+0x1a4>
			{
				*entity_write_addr = 1;
10000378:	00801804 	movi	r2,96
1000037c:	00c00044 	movi	r3,1
10000380:	10c00015 	stw	r3,0(r2)
				*entity_dir_addr = 2;
10000384:	00801404 	movi	r2,80
10000388:	00c00084 	movi	r3,2
1000038c:	10c00015 	stw	r3,0(r2)
				*entity_write_addr = 0;
10000390:	00801804 	movi	r2,96
10000394:	10000015 	stw	zero,0(r2)
10000398:	00006f06 	br	10000558 <updateEnemies+0x360>
			}
			else if(enemy_x - player_x > 16)
1000039c:	e0fffb17 	ldw	r3,-20(fp)
100003a0:	e0bff917 	ldw	r2,-28(fp)
100003a4:	1885c83a 	sub	r2,r3,r2
100003a8:	10800450 	cmplti	r2,r2,17
100003ac:	1000091e 	bne	r2,zero,100003d4 <updateEnemies+0x1dc>
			{
				*entity_write_addr = 1;
100003b0:	00801804 	movi	r2,96
100003b4:	00c00044 	movi	r3,1
100003b8:	10c00015 	stw	r3,0(r2)
				*entity_dir_addr = 1;
100003bc:	00801404 	movi	r2,80
100003c0:	00c00044 	movi	r3,1
100003c4:	10c00015 	stw	r3,0(r2)
				*entity_write_addr = 0;
100003c8:	00801804 	movi	r2,96
100003cc:	10000015 	stw	zero,0(r2)
100003d0:	00006106 	br	10000558 <updateEnemies+0x360>
			}
			else if(enemy_y - player_y < -16)
100003d4:	e0fffc17 	ldw	r3,-16(fp)
100003d8:	e0bffa17 	ldw	r2,-24(fp)
100003dc:	1885c83a 	sub	r2,r3,r2
100003e0:	10bffc08 	cmpgei	r2,r2,-16
100003e4:	1000091e 	bne	r2,zero,1000040c <updateEnemies+0x214>
			{
				*entity_write_addr = 1;
100003e8:	00801804 	movi	r2,96
100003ec:	00c00044 	movi	r3,1
100003f0:	10c00015 	stw	r3,0(r2)
				*entity_dir_addr = 3;
100003f4:	00801404 	movi	r2,80
100003f8:	00c000c4 	movi	r3,3
100003fc:	10c00015 	stw	r3,0(r2)
				*entity_write_addr = 0;
10000400:	00801804 	movi	r2,96
10000404:	10000015 	stw	zero,0(r2)
10000408:	00005306 	br	10000558 <updateEnemies+0x360>
			}
			else if(enemy_y - player_y > 16)
1000040c:	e0fffc17 	ldw	r3,-16(fp)
10000410:	e0bffa17 	ldw	r2,-24(fp)
10000414:	1885c83a 	sub	r2,r3,r2
10000418:	10800450 	cmplti	r2,r2,17
1000041c:	1000091e 	bne	r2,zero,10000444 <updateEnemies+0x24c>
			{
				*entity_write_addr = 1;
10000420:	00801804 	movi	r2,96
10000424:	00c00044 	movi	r3,1
10000428:	10c00015 	stw	r3,0(r2)
				*entity_dir_addr = 4;
1000042c:	00801404 	movi	r2,80
10000430:	00c00104 	movi	r3,4
10000434:	10c00015 	stw	r3,0(r2)
				*entity_write_addr = 0;
10000438:	00801804 	movi	r2,96
1000043c:	10000015 	stw	zero,0(r2)
10000440:	00004506 	br	10000558 <updateEnemies+0x360>
			}
			else
			{
				*entity_write_addr = 1;
10000444:	00801804 	movi	r2,96
10000448:	00c00044 	movi	r3,1
1000044c:	10c00015 	stw	r3,0(r2)
				*entity_dir_addr = 0;
10000450:	00801404 	movi	r2,80
10000454:	10000015 	stw	zero,0(r2)
				*entity_write_addr = 0;
10000458:	00801804 	movi	r2,96
1000045c:	10000015 	stw	zero,0(r2)
10000460:	00003d06 	br	10000558 <updateEnemies+0x360>
			}
		}
		else if(enemy_type == 3)
10000464:	e0bffe17 	ldw	r2,-8(fp)
10000468:	108000d8 	cmpnei	r2,r2,3
1000046c:	10003a1e 	bne	r2,zero,10000558 <updateEnemies+0x360>
		{
			if( (((player_x + 32) > enemy_x) && (player_x < enemy_x)) || ((player_x < (enemy_x + 32)) && ((player_x +32) > (enemy_x + 32) )))
10000470:	e0bff917 	ldw	r2,-28(fp)
10000474:	10800804 	addi	r2,r2,32
10000478:	e0fffb17 	ldw	r3,-20(fp)
1000047c:	1880030e 	bge	r3,r2,1000048c <updateEnemies+0x294>
10000480:	e0fff917 	ldw	r3,-28(fp)
10000484:	e0bffb17 	ldw	r2,-20(fp)
10000488:	18800916 	blt	r3,r2,100004b0 <updateEnemies+0x2b8>
1000048c:	e0bffb17 	ldw	r2,-20(fp)
10000490:	10800804 	addi	r2,r2,32
10000494:	e0fff917 	ldw	r3,-28(fp)
10000498:	1880280e 	bge	r3,r2,1000053c <updateEnemies+0x344>
1000049c:	e0bff917 	ldw	r2,-28(fp)
100004a0:	10800804 	addi	r2,r2,32
100004a4:	e0fffb17 	ldw	r3,-20(fp)
100004a8:	18c00804 	addi	r3,r3,32
100004ac:	1880230e 	bge	r3,r2,1000053c <updateEnemies+0x344>
			{
				if(player_y > (enemy_y + 32))
100004b0:	e0bffc17 	ldw	r2,-16(fp)
100004b4:	10c00804 	addi	r3,r2,32
100004b8:	e0bffa17 	ldw	r2,-24(fp)
100004bc:	1880090e 	bge	r3,r2,100004e4 <updateEnemies+0x2ec>
				{
					*entity_write_addr = 1;
100004c0:	00801804 	movi	r2,96
100004c4:	00c00044 	movi	r3,1
100004c8:	10c00015 	stw	r3,0(r2)
					*entity_dir_addr = 3;
100004cc:	00801404 	movi	r2,80
100004d0:	00c000c4 	movi	r3,3
100004d4:	10c00015 	stw	r3,0(r2)
					*entity_write_addr = 0;
100004d8:	00801804 	movi	r2,96
100004dc:	10000015 	stw	zero,0(r2)
100004e0:	00001506 	br	10000538 <updateEnemies+0x340>
				}
				else if(player_y < (enemy_y - 32))
100004e4:	e0bffc17 	ldw	r2,-16(fp)
100004e8:	10bff804 	addi	r2,r2,-32
100004ec:	e0fffa17 	ldw	r3,-24(fp)
100004f0:	1880090e 	bge	r3,r2,10000518 <updateEnemies+0x320>
				{
					*entity_write_addr = 1;
100004f4:	00801804 	movi	r2,96
100004f8:	00c00044 	movi	r3,1
100004fc:	10c00015 	stw	r3,0(r2)
					*entity_dir_addr = 4;
10000500:	00801404 	movi	r2,80
10000504:	00c00104 	movi	r3,4
10000508:	10c00015 	stw	r3,0(r2)
					*entity_write_addr = 0;
1000050c:	00801804 	movi	r2,96
10000510:	10000015 	stw	zero,0(r2)
10000514:	00000806 	br	10000538 <updateEnemies+0x340>
				}
				else
				{
					*entity_write_addr = 1;
10000518:	00801804 	movi	r2,96
1000051c:	00c00044 	movi	r3,1
10000520:	10c00015 	stw	r3,0(r2)
					*entity_dir_addr = 0;
10000524:	00801404 	movi	r2,80
10000528:	10000015 	stw	zero,0(r2)
					*entity_write_addr = 0;
1000052c:	00801804 	movi	r2,96
10000530:	10000015 	stw	zero,0(r2)
		}
		else if(enemy_type == 3)
		{
			if( (((player_x + 32) > enemy_x) && (player_x < enemy_x)) || ((player_x < (enemy_x + 32)) && ((player_x +32) > (enemy_x + 32) )))
			{
				if(player_y > (enemy_y + 32))
10000534:	00000806 	br	10000558 <updateEnemies+0x360>
10000538:	00000706 	br	10000558 <updateEnemies+0x360>
					*entity_write_addr = 0;
				}
			}
			else
			{
				*entity_write_addr = 1;
1000053c:	00801804 	movi	r2,96
10000540:	00c00044 	movi	r3,1
10000544:	10c00015 	stw	r3,0(r2)
				*entity_dir_addr = 0;
10000548:	00801404 	movi	r2,80
1000054c:	10000015 	stw	zero,0(r2)
				*entity_write_addr = 0;
10000550:	00801804 	movi	r2,96
10000554:	10000015 	stw	zero,0(r2)
			}
		}
		enemyCounter[i-1] ++;
10000558:	e0bff817 	ldw	r2,-32(fp)
1000055c:	10bfffc4 	addi	r2,r2,-1
10000560:	00c40074 	movhi	r3,4097
10000564:	18d64f04 	addi	r3,r3,22844
10000568:	1089883a 	add	r4,r2,r2
1000056c:	2109883a 	add	r4,r4,r4
10000570:	1907883a 	add	r3,r3,r4
10000574:	18c00017 	ldw	r3,0(r3)
10000578:	19000044 	addi	r4,r3,1
1000057c:	00c40074 	movhi	r3,4097
10000580:	18d64f04 	addi	r3,r3,22844
10000584:	1085883a 	add	r2,r2,r2
10000588:	1085883a 	add	r2,r2,r2
1000058c:	1885883a 	add	r2,r3,r2
10000590:	11000015 	stw	r4,0(r2)
	int player_x = *entity_x_addr;
	int player_y = *entity_y_addr;
	*entity_read_addr = 0;

	int i = 0;
	for(i = 1; i <= 5; i++)
10000594:	e0bff817 	ldw	r2,-32(fp)
10000598:	10800044 	addi	r2,r2,1
1000059c:	e0bff815 	stw	r2,-32(fp)
100005a0:	e0bff817 	ldw	r2,-32(fp)
100005a4:	10800190 	cmplti	r2,r2,6
100005a8:	103f281e 	bne	r2,zero,1000024c <__alt_data_end+0xf800024c>
			}
		}
		enemyCounter[i-1] ++;
	}

}
100005ac:	e037883a 	mov	sp,fp
100005b0:	dfc00117 	ldw	ra,4(sp)
100005b4:	df000017 	ldw	fp,0(sp)
100005b8:	dec00204 	addi	sp,sp,8
100005bc:	f800283a 	ret

100005c0 <IO_init>:
#define otg_hpi_cs			(volatile char*) 0x00d0 //OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*) OTG_HPI_W_BASE


void IO_init(void)
{
100005c0:	deffff04 	addi	sp,sp,-4
100005c4:	df000015 	stw	fp,0(sp)
100005c8:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 0;
100005cc:	00803404 	movi	r2,208
100005d0:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1;
100005d4:	00802804 	movi	r2,160
100005d8:	00c00044 	movi	r3,1
100005dc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
100005e0:	00802404 	movi	r2,144
100005e4:	00c00044 	movi	r3,1
100005e8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100005ec:	00803004 	movi	r2,192
100005f0:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100005f4:	00802c04 	movi	r2,176
100005f8:	10000015 	stw	zero,0(r2)
}
100005fc:	e037883a 	mov	sp,fp
10000600:	df000017 	ldw	fp,0(sp)
10000604:	dec00104 	addi	sp,sp,4
10000608:	f800283a 	ret

1000060c <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
1000060c:	defffd04 	addi	sp,sp,-12
10000610:	df000215 	stw	fp,8(sp)
10000614:	df000204 	addi	fp,sp,8
10000618:	2007883a 	mov	r3,r4
1000061c:	2805883a 	mov	r2,r5
10000620:	e0fffe05 	stb	r3,-8(fp)
10000624:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10000628:	00803004 	movi	r2,192
1000062c:	e0fffe03 	ldbu	r3,-8(fp)
10000630:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 0;
10000634:	00802404 	movi	r2,144
10000638:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
1000063c:	00802c04 	movi	r2,176
10000640:	e0ffff0b 	ldhu	r3,-4(fp)
10000644:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
10000648:	00802404 	movi	r2,144
1000064c:	00c00044 	movi	r3,1
10000650:	10c00005 	stb	r3,0(r2)
}
10000654:	e037883a 	mov	sp,fp
10000658:	df000017 	ldw	fp,0(sp)
1000065c:	dec00104 	addi	sp,sp,4
10000660:	f800283a 	ret

10000664 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10000664:	defffd04 	addi	sp,sp,-12
10000668:	df000215 	stw	fp,8(sp)
1000066c:	df000204 	addi	fp,sp,8
10000670:	2005883a 	mov	r2,r4
10000674:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10000678:	00803004 	movi	r2,192
1000067c:	e0ffff03 	ldbu	r3,-4(fp)
10000680:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
10000684:	00802804 	movi	r2,160
10000688:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
1000068c:	00802c04 	movi	r2,176
10000690:	10800017 	ldw	r2,0(r2)
10000694:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
10000698:	00802804 	movi	r2,160
1000069c:	00c00044 	movi	r3,1
100006a0:	10c00005 	stb	r3,0(r2)

	return temp;
100006a4:	e0bffe0b 	ldhu	r2,-8(fp)
}
100006a8:	e037883a 	mov	sp,fp
100006ac:	df000017 	ldw	fp,0(sp)
100006b0:	dec00104 	addi	sp,sp,4
100006b4:	f800283a 	ret

100006b8 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
100006b8:	defff904 	addi	sp,sp,-28
100006bc:	dfc00615 	stw	ra,24(sp)
100006c0:	df000515 	stw	fp,20(sp)
100006c4:	df000504 	addi	fp,sp,20
	IO_init();
100006c8:	00005c00 	call	100005c0 <IO_init>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		//UsbWrite(0xc008,0x000f);
		//UsbRead(0xc008);
		usleep(10*10000);
	}*/
	srand(424242);
100006cc:	010001b4 	movhi	r4,6
100006d0:	211e4c84 	addi	r4,r4,31026
100006d4:	000269c0 	call	1000269c <srand>
	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
100006d8:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
100006dc:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
100006e0:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
100006e4:	01040074 	movhi	r4,4097
100006e8:	21062d04 	addi	r4,r4,6324
100006ec:	00026880 	call	10002688 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
100006f0:	00014ac0 	call	100014ac <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100006f4:	01005104 	movi	r4,324
100006f8:	000b883a 	mov	r5,zero
100006fc:	00014140 	call	10001414 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000700:	01302414 	movui	r4,49296
10000704:	017fffd4 	movui	r5,65535
10000708:	00014140 	call	10001414 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
1000070c:	01006d04 	movi	r4,436
10000710:	01409604 	movi	r5,600
10000714:	00014140 	call	10001414 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000718:	00811004 	movi	r2,1088
1000071c:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000720:	e0bffb0b 	ldhu	r2,-20(fp)
10000724:	01005084 	movi	r4,322
10000728:	100b883a 	mov	r5,r2
1000072c:	00014140 	call	10001414 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000730:	00808404 	movi	r2,528
10000734:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10000738:	e0bffe0b 	ldhu	r2,-8(fp)
1000073c:	01302314 	movui	r4,49292
10000740:	100b883a 	mov	r5,r2
10000744:	00014140 	call	10001414 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10000748:	01007104 	movi	r4,452
1000074c:	000b883a 	mov	r5,zero
10000750:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000754:	01007184 	movi	r4,454
10000758:	000b883a 	mov	r5,zero
1000075c:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000760:	01007204 	movi	r4,456
10000764:	000b883a 	mov	r5,zero
10000768:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
1000076c:	01007284 	movi	r4,458
10000770:	000b883a 	mov	r5,zero
10000774:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000778:	01007304 	movi	r4,460
1000077c:	000b883a 	mov	r5,zero
10000780:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000784:	01007384 	movi	r4,462
10000788:	000b883a 	mov	r5,zero
1000078c:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000790:	01007404 	movi	r4,464
10000794:	000b883a 	mov	r5,zero
10000798:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
1000079c:	01007484 	movi	r4,466
100007a0:	000b883a 	mov	r5,zero
100007a4:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100007a8:	01007504 	movi	r4,468
100007ac:	000b883a 	mov	r5,zero
100007b0:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100007b4:	01007584 	movi	r4,470
100007b8:	000b883a 	mov	r5,zero
100007bc:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100007c0:	01007604 	movi	r4,472
100007c4:	000b883a 	mov	r5,zero
100007c8:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100007cc:	01007684 	movi	r4,474
100007d0:	000b883a 	mov	r5,zero
100007d4:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100007d8:	01007704 	movi	r4,476
100007dc:	000b883a 	mov	r5,zero
100007e0:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100007e4:	01007784 	movi	r4,478
100007e8:	000b883a 	mov	r5,zero
100007ec:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
100007f0:	01007084 	movi	r4,450
100007f4:	01401c84 	movi	r5,114
100007f8:	00014140 	call	10001414 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100007fc:	01000044 	movi	r4,1
10000800:	01738054 	movui	r5,52737
10000804:	000060c0 	call	1000060c <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000808:	0001883a 	nop
1000080c:	010000c4 	movi	r4,3
10000810:	00006640 	call	10000664 <IO_read>
10000814:	10bfffcc 	andi	r2,r2,65535
10000818:	103ffc26 	beq	r2,zero,1000080c <__alt_data_end+0xf800080c>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000081c:	0001883a 	nop
10000820:	01000044 	movi	r4,1
10000824:	00006640 	call	10000664 <IO_read>
10000828:	10bfffcc 	andi	r2,r2,65535
1000082c:	1083fb58 	cmpnei	r2,r2,4077
10000830:	10000826 	beq	r2,zero,10000854 <main+0x19c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000834:	01000044 	movi	r4,1
10000838:	00006640 	call	10000664 <IO_read>
1000083c:	10bfffcc 	andi	r2,r2,65535
10000840:	01040074 	movhi	r4,4097
10000844:	21063304 	addi	r4,r4,6348
10000848:	100b883a 	mov	r5,r2
1000084c:	00025940 	call	10002594 <printf>
		goto USB_HOT_PLUG;
10000850:	003fa706 	br	100006f0 <__alt_data_end+0xf80006f0>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10000854:	01040074 	movhi	r4,4097
10000858:	21063c04 	addi	r4,r4,6384
1000085c:	00025940 	call	10002594 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10000860:	01007084 	movi	r4,450
10000864:	01401d04 	movi	r5,116
10000868:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
1000086c:	01007104 	movi	r4,452
10000870:	01400f04 	movi	r5,60
10000874:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000878:	01007184 	movi	r4,454
1000087c:	000b883a 	mov	r5,zero
10000880:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000884:	01007204 	movi	r4,456
10000888:	000b883a 	mov	r5,zero
1000088c:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000890:	01007284 	movi	r4,458
10000894:	000b883a 	mov	r5,zero
10000898:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
1000089c:	01007304 	movi	r4,460
100008a0:	000b883a 	mov	r5,zero
100008a4:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100008a8:	01007384 	movi	r4,462
100008ac:	000b883a 	mov	r5,zero
100008b0:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100008b4:	01007404 	movi	r4,464
100008b8:	000b883a 	mov	r5,zero
100008bc:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100008c0:	01007484 	movi	r4,466
100008c4:	000b883a 	mov	r5,zero
100008c8:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100008cc:	01007504 	movi	r4,468
100008d0:	000b883a 	mov	r5,zero
100008d4:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100008d8:	01007584 	movi	r4,470
100008dc:	000b883a 	mov	r5,zero
100008e0:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100008e4:	01007604 	movi	r4,472
100008e8:	000b883a 	mov	r5,zero
100008ec:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100008f0:	01007684 	movi	r4,474
100008f4:	000b883a 	mov	r5,zero
100008f8:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100008fc:	01007704 	movi	r4,476
10000900:	000b883a 	mov	r5,zero
10000904:	00014140 	call	10001414 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000908:	01007784 	movi	r4,478
1000090c:	000b883a 	mov	r5,zero
10000910:	00014140 	call	10001414 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000914:	01000044 	movi	r4,1
10000918:	01738054 	movui	r5,52737
1000091c:	000060c0 	call	1000060c <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000920:	0001883a 	nop
10000924:	01000044 	movi	r4,1
10000928:	00006640 	call	10000664 <IO_read>
1000092c:	10bfffcc 	andi	r2,r2,65535
10000930:	1083fb58 	cmpnei	r2,r2,4077
10000934:	10000826 	beq	r2,zero,10000958 <main+0x2a0>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000938:	01000044 	movi	r4,1
1000093c:	00006640 	call	10000664 <IO_read>
10000940:	10bfffcc 	andi	r2,r2,65535
10000944:	01040074 	movhi	r4,4097
10000948:	21063304 	addi	r4,r4,6348
1000094c:	100b883a 	mov	r5,r2
10000950:	00025940 	call	10002594 <printf>
		goto USB_HOT_PLUG;
10000954:	003f6606 	br	100006f0 <__alt_data_end+0xf80006f0>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10000958:	00b02284 	movi	r2,-16246
1000095c:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10000960:	008c0004 	movi	r2,12288
10000964:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
10000968:	00880004 	movi	r2,8192
1000096c:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10000970:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000974:	10bfffcc 	andi	r2,r2,65535
10000978:	1009883a 	mov	r4,r2
1000097c:	00014680 	call	10001468 <UsbRead>
10000980:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
10000984:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000988:	e0fffb0b 	ldhu	r3,-20(fp)
1000098c:	1884703a 	and	r2,r3,r2
10000990:	10bfffcc 	andi	r2,r2,65535
10000994:	1000341e 	bne	r2,zero,10000a68 <main+0x3b0>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000998:	e03ffbc5 	stb	zero,-17(fp)
1000099c:	00001006 	br	100009e0 <main+0x328>
		{
			usleep(5*1000);
100009a0:	0104e204 	movi	r4,5000
100009a4:	000f8f80 	call	1000f8f8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100009a8:	d0a6cb0b 	ldhu	r2,-25812(gp)
100009ac:	10bfffcc 	andi	r2,r2,65535
100009b0:	1009883a 	mov	r4,r2
100009b4:	00014680 	call	10001468 <UsbRead>
100009b8:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
100009bc:	d0a6cb8b 	ldhu	r2,-25810(gp)
100009c0:	e0fffb0b 	ldhu	r3,-20(fp)
100009c4:	1884703a 	and	r2,r3,r2
100009c8:	10bfffcc 	andi	r2,r2,65535
100009cc:	10000126 	beq	r2,zero,100009d4 <main+0x31c>
100009d0:	00000606 	br	100009ec <main+0x334>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100009d4:	e0bffbc3 	ldbu	r2,-17(fp)
100009d8:	10800044 	addi	r2,r2,1
100009dc:	e0bffbc5 	stb	r2,-17(fp)
100009e0:	e0bffbc3 	ldbu	r2,-17(fp)
100009e4:	10800170 	cmpltui	r2,r2,5
100009e8:	103fed1e 	bne	r2,zero,100009a0 <__alt_data_end+0xf80009a0>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
100009ec:	d0a6cb8b 	ldhu	r2,-25810(gp)
100009f0:	e0fffb0b 	ldhu	r3,-20(fp)
100009f4:	1884703a 	and	r2,r3,r2
100009f8:	10bfffcc 	andi	r2,r2,65535
100009fc:	1000261e 	bne	r2,zero,10000a98 <main+0x3e0>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10000a00:	01040074 	movhi	r4,4097
10000a04:	21064004 	addi	r4,r4,6400
10000a08:	00026880 	call	10002688 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000a0c:	01040074 	movhi	r4,4097
10000a10:	21064a04 	addi	r4,r4,6440
10000a14:	00026880 	call	10002688 <puts>
			while (!(usb_ctl_val & no_device))
10000a18:	00000d06 	br	10000a50 <main+0x398>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000a1c:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000a20:	10bfffcc 	andi	r2,r2,65535
10000a24:	1009883a 	mov	r4,r2
10000a28:	00014680 	call	10001468 <UsbRead>
10000a2c:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
10000a30:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000a34:	e0fffb0b 	ldhu	r3,-20(fp)
10000a38:	1884703a 	and	r2,r3,r2
10000a3c:	10bfffcc 	andi	r2,r2,65535
10000a40:	10000126 	beq	r2,zero,10000a48 <main+0x390>
					goto USB_HOT_PLUG;
10000a44:	003f2a06 	br	100006f0 <__alt_data_end+0xf80006f0>

				usleep(2000);
10000a48:	0101f404 	movi	r4,2000
10000a4c:	000f8f80 	call	1000f8f8 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10000a50:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000a54:	e0fffb0b 	ldhu	r3,-20(fp)
10000a58:	1884703a 	and	r2,r3,r2
10000a5c:	10bfffcc 	andi	r2,r2,65535
10000a60:	103fee26 	beq	r2,zero,10000a1c <__alt_data_end+0xf8000a1c>
10000a64:	00000c06 	br	10000a98 <main+0x3e0>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10000a68:	e0fffb0b 	ldhu	r3,-20(fp)
10000a6c:	e0bffc0b 	ldhu	r2,-16(fp)
10000a70:	1884703a 	and	r2,r3,r2
10000a74:	10bfffcc 	andi	r2,r2,65535
10000a78:	10000426 	beq	r2,zero,10000a8c <main+0x3d4>
		{
			printf("[INFO]: full speed device\n");
10000a7c:	01040074 	movhi	r4,4097
10000a80:	21065604 	addi	r4,r4,6488
10000a84:	00026880 	call	10002688 <puts>
10000a88:	00000306 	br	10000a98 <main+0x3e0>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000a8c:	01040074 	movhi	r4,4097
10000a90:	21065d04 	addi	r4,r4,6516
10000a94:	00026880 	call	10002688 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10000a98:	000156c0 	call	1000156c <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a9c:	00000306 	br	10000aac <main+0x3f4>
	{
		UsbSetAddress();
10000aa0:	000156c0 	call	1000156c <UsbSetAddress>
		usleep(10*1000);
10000aa4:	0109c404 	movi	r4,10000
10000aa8:	000f8f80 	call	1000f8f8 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000aac:	010000c4 	movi	r4,3
10000ab0:	00006640 	call	10000664 <IO_read>
10000ab4:	10bfffcc 	andi	r2,r2,65535
10000ab8:	1080040c 	andi	r2,r2,16
10000abc:	103ff826 	beq	r2,zero,10000aa0 <__alt_data_end+0xf8000aa0>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000ac0:	00023e80 	call	100023e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10000ac4:	01000084 	movi	r4,2
10000ac8:	01414184 	movi	r5,1286
10000acc:	000060c0 	call	1000060c <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000ad0:	0009883a 	mov	r4,zero
10000ad4:	00006640 	call	10000664 <IO_read>
10000ad8:	10bfffcc 	andi	r2,r2,65535
10000adc:	01040074 	movhi	r4,4097
10000ae0:	21066404 	addi	r4,r4,6544
10000ae4:	100b883a 	mov	r5,r2
10000ae8:	00025940 	call	10002594 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000aec:	01000084 	movi	r4,2
10000af0:	01414204 	movi	r5,1288
10000af4:	000060c0 	call	1000060c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000af8:	0009883a 	mov	r4,zero
10000afc:	00006640 	call	10000664 <IO_read>
10000b00:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10000b04:	e0bffb0b 	ldhu	r2,-20(fp)
10000b08:	01040074 	movhi	r4,4097
10000b0c:	21066f04 	addi	r4,r4,6588
10000b10:	100b883a 	mov	r5,r2
10000b14:	00025940 	call	10002594 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000b18:	e0bffb0b 	ldhu	r2,-20(fp)
10000b1c:	108000e0 	cmpeqi	r2,r2,3
10000b20:	1000031e 	bne	r2,zero,10000b30 <main+0x478>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000b24:	000246c0 	call	1000246c <UsbGetRetryCnt>
10000b28:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
10000b2c:	003ef006 	br	100006f0 <__alt_data_end+0xf80006f0>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10000b30:	01040074 	movhi	r4,4097
10000b34:	21067b04 	addi	r4,r4,6636
10000b38:	00026880 	call	10002688 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10000b3c:	00016680 	call	10001668 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b40:	00000306 	br	10000b50 <main+0x498>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10000b44:	00016680 	call	10001668 <UsbGetDeviceDesc1>
		usleep(10*1000);
10000b48:	0109c404 	movi	r4,10000
10000b4c:	000f8f80 	call	1000f8f8 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b50:	010000c4 	movi	r4,3
10000b54:	00006640 	call	10000664 <IO_read>
10000b58:	10bfffcc 	andi	r2,r2,65535
10000b5c:	1080040c 	andi	r2,r2,16
10000b60:	103ff826 	beq	r2,zero,10000b44 <__alt_data_end+0xf8000b44>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000b64:	00023e80 	call	100023e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000b68:	01000084 	movi	r4,2
10000b6c:	01414184 	movi	r5,1286
10000b70:	000060c0 	call	1000060c <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000b74:	0009883a 	mov	r4,zero
10000b78:	00006640 	call	10000664 <IO_read>
10000b7c:	10bfffcc 	andi	r2,r2,65535
10000b80:	01040074 	movhi	r4,4097
10000b84:	21068a04 	addi	r4,r4,6696
10000b88:	100b883a 	mov	r5,r2
10000b8c:	00025940 	call	10002594 <printf>

	IO_write(HPI_ADDR,0x0508);
10000b90:	01000084 	movi	r4,2
10000b94:	01414204 	movi	r5,1288
10000b98:	000060c0 	call	1000060c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000b9c:	0009883a 	mov	r4,zero
10000ba0:	00006640 	call	10000664 <IO_read>
10000ba4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000ba8:	e0bffb0b 	ldhu	r2,-20(fp)
10000bac:	01040074 	movhi	r4,4097
10000bb0:	21069504 	addi	r4,r4,6740
10000bb4:	100b883a 	mov	r5,r2
10000bb8:	00025940 	call	10002594 <printf>
	while (usb_ctl_val != 0x03)
10000bbc:	00000206 	br	10000bc8 <main+0x510>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000bc0:	000246c0 	call	1000246c <UsbGetRetryCnt>
10000bc4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000bc8:	e0bffb0b 	ldhu	r2,-20(fp)
10000bcc:	108000d8 	cmpnei	r2,r2,3
10000bd0:	103ffb1e 	bne	r2,zero,10000bc0 <__alt_data_end+0xf8000bc0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10000bd4:	01040074 	movhi	r4,4097
10000bd8:	2106a104 	addi	r4,r4,6788
10000bdc:	00026880 	call	10002688 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10000be0:	00017ac0 	call	100017ac <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000be4:	00000306 	br	10000bf4 <main+0x53c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000be8:	00017ac0 	call	100017ac <UsbGetDeviceDesc2>
		usleep(10*1000);
10000bec:	0109c404 	movi	r4,10000
10000bf0:	000f8f80 	call	1000f8f8 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bf4:	010000c4 	movi	r4,3
10000bf8:	00006640 	call	10000664 <IO_read>
10000bfc:	10bfffcc 	andi	r2,r2,65535
10000c00:	1080040c 	andi	r2,r2,16
10000c04:	103ff826 	beq	r2,zero,10000be8 <__alt_data_end+0xf8000be8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c08:	00023e80 	call	100023e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c0c:	01000084 	movi	r4,2
10000c10:	01414184 	movi	r5,1286
10000c14:	000060c0 	call	1000060c <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c18:	0009883a 	mov	r4,zero
10000c1c:	00006640 	call	10000664 <IO_read>
10000c20:	10bfffcc 	andi	r2,r2,65535
10000c24:	01040074 	movhi	r4,4097
10000c28:	21068a04 	addi	r4,r4,6696
10000c2c:	100b883a 	mov	r5,r2
10000c30:	00025940 	call	10002594 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c34:	01000084 	movi	r4,2
10000c38:	01414204 	movi	r5,1288
10000c3c:	000060c0 	call	1000060c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c40:	0009883a 	mov	r4,zero
10000c44:	00006640 	call	10000664 <IO_read>
10000c48:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000c4c:	e0bffb0b 	ldhu	r2,-20(fp)
10000c50:	01040074 	movhi	r4,4097
10000c54:	21069504 	addi	r4,r4,6740
10000c58:	100b883a 	mov	r5,r2
10000c5c:	00025940 	call	10002594 <printf>
	while (usb_ctl_val != 0x03)
10000c60:	00000206 	br	10000c6c <main+0x5b4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c64:	000246c0 	call	1000246c <UsbGetRetryCnt>
10000c68:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c6c:	e0bffb0b 	ldhu	r2,-20(fp)
10000c70:	108000d8 	cmpnei	r2,r2,3
10000c74:	103ffb1e 	bne	r2,zero,10000c64 <__alt_data_end+0xf8000c64>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10000c78:	01040074 	movhi	r4,4097
10000c7c:	2106b504 	addi	r4,r4,6868
10000c80:	00026880 	call	10002688 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000c84:	00019800 	call	10001980 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c88:	00000306 	br	10000c98 <main+0x5e0>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10000c8c:	00019800 	call	10001980 <UsbGetConfigDesc1>
		usleep(10*1000);
10000c90:	0109c404 	movi	r4,10000
10000c94:	000f8f80 	call	1000f8f8 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c98:	010000c4 	movi	r4,3
10000c9c:	00006640 	call	10000664 <IO_read>
10000ca0:	10bfffcc 	andi	r2,r2,65535
10000ca4:	1080040c 	andi	r2,r2,16
10000ca8:	103ff826 	beq	r2,zero,10000c8c <__alt_data_end+0xf8000c8c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000cac:	00023e80 	call	100023e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000cb0:	01000084 	movi	r4,2
10000cb4:	01414184 	movi	r5,1286
10000cb8:	000060c0 	call	1000060c <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000cbc:	0009883a 	mov	r4,zero
10000cc0:	00006640 	call	10000664 <IO_read>
10000cc4:	10bfffcc 	andi	r2,r2,65535
10000cc8:	01040074 	movhi	r4,4097
10000ccc:	2106c704 	addi	r4,r4,6940
10000cd0:	100b883a 	mov	r5,r2
10000cd4:	00025940 	call	10002594 <printf>

	IO_write(HPI_ADDR,0x0508);
10000cd8:	01000084 	movi	r4,2
10000cdc:	01414204 	movi	r5,1288
10000ce0:	000060c0 	call	1000060c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000ce4:	0009883a 	mov	r4,zero
10000ce8:	00006640 	call	10000664 <IO_read>
10000cec:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10000cf0:	e0bffb0b 	ldhu	r2,-20(fp)
10000cf4:	01040074 	movhi	r4,4097
10000cf8:	2106d204 	addi	r4,r4,6984
10000cfc:	100b883a 	mov	r5,r2
10000d00:	00025940 	call	10002594 <printf>
	while (usb_ctl_val != 0x03)
10000d04:	00000206 	br	10000d10 <main+0x658>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d08:	000246c0 	call	1000246c <UsbGetRetryCnt>
10000d0c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d10:	e0bffb0b 	ldhu	r2,-20(fp)
10000d14:	108000d8 	cmpnei	r2,r2,3
10000d18:	103ffb1e 	bne	r2,zero,10000d08 <__alt_data_end+0xf8000d08>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000d1c:	01040074 	movhi	r4,4097
10000d20:	2106de04 	addi	r4,r4,7032
10000d24:	00026880 	call	10002688 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000d28:	0001b0c0 	call	10001b0c <UsbGetConfigDesc2>

	usleep(100*1000);
10000d2c:	010000b4 	movhi	r4,2
10000d30:	2121a804 	addi	r4,r4,-31072
10000d34:	000f8f80 	call	1000f8f8 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d38:	00000306 	br	10000d48 <main+0x690>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000d3c:	0001b0c0 	call	10001b0c <UsbGetConfigDesc2>
		usleep(10*1000);
10000d40:	0109c404 	movi	r4,10000
10000d44:	000f8f80 	call	1000f8f8 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d48:	010000c4 	movi	r4,3
10000d4c:	00006640 	call	10000664 <IO_read>
10000d50:	10bfffcc 	andi	r2,r2,65535
10000d54:	1080040c 	andi	r2,r2,16
10000d58:	103ff826 	beq	r2,zero,10000d3c <__alt_data_end+0xf8000d3c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d5c:	00023e80 	call	100023e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d60:	01000084 	movi	r4,2
10000d64:	01414184 	movi	r5,1286
10000d68:	000060c0 	call	1000060c <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d6c:	0009883a 	mov	r4,zero
10000d70:	00006640 	call	10000664 <IO_read>
10000d74:	10bfffcc 	andi	r2,r2,65535
10000d78:	01040074 	movhi	r4,4097
10000d7c:	2106f104 	addi	r4,r4,7108
10000d80:	100b883a 	mov	r5,r2
10000d84:	00025940 	call	10002594 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d88:	01000084 	movi	r4,2
10000d8c:	01414204 	movi	r5,1288
10000d90:	000060c0 	call	1000060c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d94:	0009883a 	mov	r4,zero
10000d98:	00006640 	call	10000664 <IO_read>
10000d9c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000da0:	e0bffb0b 	ldhu	r2,-20(fp)
10000da4:	01040074 	movhi	r4,4097
10000da8:	2106fc04 	addi	r4,r4,7152
10000dac:	100b883a 	mov	r5,r2
10000db0:	00025940 	call	10002594 <printf>
	while (usb_ctl_val != 0x03)
10000db4:	00000206 	br	10000dc0 <main+0x708>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000db8:	000246c0 	call	1000246c <UsbGetRetryCnt>
10000dbc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000dc0:	e0bffb0b 	ldhu	r2,-20(fp)
10000dc4:	108000d8 	cmpnei	r2,r2,3
10000dc8:	103ffb1e 	bne	r2,zero,10000db8 <__alt_data_end+0xf8000db8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000dcc:	01040074 	movhi	r4,4097
10000dd0:	21070804 	addi	r4,r4,7200
10000dd4:	00026880 	call	10002688 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000dd8:	01000084 	movi	r4,2
10000ddc:	01415b04 	movi	r5,1388
10000de0:	000060c0 	call	1000060c <IO_write>
	code = IO_read(HPI_DATA);
10000de4:	0009883a 	mov	r4,zero
10000de8:	00006640 	call	10000664 <IO_read>
10000dec:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
10000df0:	e0bffe8b 	ldhu	r2,-6(fp)
10000df4:	108000cc 	andi	r2,r2,3
10000df8:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
10000dfc:	e0bffe8b 	ldhu	r2,-6(fp)
10000e00:	01040074 	movhi	r4,4097
10000e04:	21071b04 	addi	r4,r4,7276
10000e08:	100b883a 	mov	r5,r2
10000e0c:	00025940 	call	10002594 <printf>

	if (code == 0x01)
10000e10:	e0bffe8b 	ldhu	r2,-6(fp)
10000e14:	10800058 	cmpnei	r2,r2,1
10000e18:	1000041e 	bne	r2,zero,10000e2c <main+0x774>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000e1c:	01040074 	movhi	r4,4097
10000e20:	21071e04 	addi	r4,r4,7288
10000e24:	00026880 	call	10002688 <puts>
10000e28:	00000306 	br	10000e38 <main+0x780>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000e2c:	01040074 	movhi	r4,4097
10000e30:	21072d04 	addi	r4,r4,7348
10000e34:	00026880 	call	10002688 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000e38:	01000084 	movi	r4,2
10000e3c:	01415d84 	movi	r5,1398
10000e40:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x073F);
10000e44:	0009883a 	mov	r4,zero
10000e48:	0141cfc4 	movi	r5,1855
10000e4c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x8105);
10000e50:	0009883a 	mov	r4,zero
10000e54:	01604154 	movui	r5,33029
10000e58:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0003);
10000e5c:	0009883a 	mov	r4,zero
10000e60:	014000c4 	movi	r5,3
10000e64:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);
10000e68:	0009883a 	mov	r4,zero
10000e6c:	01400204 	movi	r5,8
10000e70:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000e74:	0009883a 	mov	r4,zero
10000e78:	016b0294 	movui	r5,44042
10000e7c:	000060c0 	call	1000060c <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000e80:	01006c04 	movi	r4,432
10000e84:	01415d84 	movi	r5,1398
10000e88:	00014140 	call	10001414 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000e8c:	01000084 	movi	r4,2
10000e90:	01415f04 	movi	r5,1404
10000e94:	000060c0 	call	1000060c <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000e98:	0009883a 	mov	r4,zero
10000e9c:	00006640 	call	10000664 <IO_read>
10000ea0:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000ea4:	e0bfff03 	ldbu	r2,-4(fp)
10000ea8:	01040074 	movhi	r4,4097
10000eac:	21073604 	addi	r4,r4,7384
10000eb0:	100b883a 	mov	r5,r2
10000eb4:	00025940 	call	10002594 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000eb8:	0001d700 	call	10001d70 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ebc:	00000306 	br	10000ecc <main+0x814>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000ec0:	0001d700 	call	10001d70 <UsbSetConfig>
		usleep(10*1000);
10000ec4:	0109c404 	movi	r4,10000
10000ec8:	000f8f80 	call	1000f8f8 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ecc:	010000c4 	movi	r4,3
10000ed0:	00006640 	call	10000664 <IO_read>
10000ed4:	10bfffcc 	andi	r2,r2,65535
10000ed8:	1080040c 	andi	r2,r2,16
10000edc:	103ff826 	beq	r2,zero,10000ec0 <__alt_data_end+0xf8000ec0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000ee0:	00023e80 	call	100023e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000ee4:	01000084 	movi	r4,2
10000ee8:	01414184 	movi	r5,1286
10000eec:	000060c0 	call	1000060c <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000ef0:	0009883a 	mov	r4,zero
10000ef4:	00006640 	call	10000664 <IO_read>
10000ef8:	10bfffcc 	andi	r2,r2,65535
10000efc:	01040074 	movhi	r4,4097
10000f00:	21074004 	addi	r4,r4,7424
10000f04:	100b883a 	mov	r5,r2
10000f08:	00025940 	call	10002594 <printf>

	IO_write(HPI_ADDR,0x0508);
10000f0c:	01000084 	movi	r4,2
10000f10:	01414204 	movi	r5,1288
10000f14:	000060c0 	call	1000060c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000f18:	0009883a 	mov	r4,zero
10000f1c:	00006640 	call	10000664 <IO_read>
10000f20:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000f24:	e0bffb0b 	ldhu	r2,-20(fp)
10000f28:	01040074 	movhi	r4,4097
10000f2c:	21074b04 	addi	r4,r4,7468
10000f30:	100b883a 	mov	r5,r2
10000f34:	00025940 	call	10002594 <printf>
	while (usb_ctl_val != 0x03)
10000f38:	00000206 	br	10000f44 <main+0x88c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000f3c:	000246c0 	call	1000246c <UsbGetRetryCnt>
10000f40:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000f44:	e0bffb0b 	ldhu	r2,-20(fp)
10000f48:	108000d8 	cmpnei	r2,r2,3
10000f4c:	103ffb1e 	bne	r2,zero,10000f3c <__alt_data_end+0xf8000f3c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000f50:	01040074 	movhi	r4,4097
10000f54:	21075704 	addi	r4,r4,7516
10000f58:	00026880 	call	10002688 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000f5c:	0001e6c0 	call	10001e6c <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f60:	00000306 	br	10000f70 <main+0x8b8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000f64:	0001e6c0 	call	10001e6c <UsbClassRequest>
		usleep(10*1000);
10000f68:	0109c404 	movi	r4,10000
10000f6c:	000f8f80 	call	1000f8f8 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f70:	010000c4 	movi	r4,3
10000f74:	00006640 	call	10000664 <IO_read>
10000f78:	10bfffcc 	andi	r2,r2,65535
10000f7c:	1080040c 	andi	r2,r2,16
10000f80:	103ff826 	beq	r2,zero,10000f64 <__alt_data_end+0xf8000f64>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000f84:	00023e80 	call	100023e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000f88:	01000084 	movi	r4,2
10000f8c:	01414184 	movi	r5,1286
10000f90:	000060c0 	call	1000060c <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000f94:	0009883a 	mov	r4,zero
10000f98:	00006640 	call	10000664 <IO_read>
10000f9c:	10bfffcc 	andi	r2,r2,65535
10000fa0:	01040074 	movhi	r4,4097
10000fa4:	21076904 	addi	r4,r4,7588
10000fa8:	100b883a 	mov	r5,r2
10000fac:	00025940 	call	10002594 <printf>

	IO_write(HPI_ADDR,0x0508);
10000fb0:	01000084 	movi	r4,2
10000fb4:	01414204 	movi	r5,1288
10000fb8:	000060c0 	call	1000060c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000fbc:	0009883a 	mov	r4,zero
10000fc0:	00006640 	call	10000664 <IO_read>
10000fc4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000fc8:	e0bffb0b 	ldhu	r2,-20(fp)
10000fcc:	01040074 	movhi	r4,4097
10000fd0:	21077404 	addi	r4,r4,7632
10000fd4:	100b883a 	mov	r5,r2
10000fd8:	00025940 	call	10002594 <printf>
	while (usb_ctl_val != 0x03)
10000fdc:	00000206 	br	10000fe8 <main+0x930>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000fe0:	000246c0 	call	1000246c <UsbGetRetryCnt>
10000fe4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000fe8:	e0bffb0b 	ldhu	r2,-20(fp)
10000fec:	108000d8 	cmpnei	r2,r2,3
10000ff0:	103ffb1e 	bne	r2,zero,10000fe0 <__alt_data_end+0xf8000fe0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000ff4:	01040074 	movhi	r4,4097
10000ff8:	21078004 	addi	r4,r4,7680
10000ffc:	00026880 	call	10002688 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10001000:	0001f680 	call	10001f68 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001004:	00000306 	br	10001014 <main+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10001008:	0001f680 	call	10001f68 <UsbGetHidDesc>
		usleep(10*1000);
1000100c:	0109c404 	movi	r4,10000
10001010:	000f8f80 	call	1000f8f8 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001014:	010000c4 	movi	r4,3
10001018:	00006640 	call	10000664 <IO_read>
1000101c:	10bfffcc 	andi	r2,r2,65535
10001020:	1080040c 	andi	r2,r2,16
10001024:	103ff826 	beq	r2,zero,10001008 <__alt_data_end+0xf8001008>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10001028:	00023e80 	call	100023e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000102c:	01000084 	movi	r4,2
10001030:	01414184 	movi	r5,1286
10001034:	000060c0 	call	1000060c <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10001038:	0009883a 	mov	r4,zero
1000103c:	00006640 	call	10000664 <IO_read>
10001040:	10bfffcc 	andi	r2,r2,65535
10001044:	01040074 	movhi	r4,4097
10001048:	21076904 	addi	r4,r4,7588
1000104c:	100b883a 	mov	r5,r2
10001050:	00025940 	call	10002594 <printf>

	IO_write(HPI_ADDR,0x0508);
10001054:	01000084 	movi	r4,2
10001058:	01414204 	movi	r5,1288
1000105c:	000060c0 	call	1000060c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001060:	0009883a 	mov	r4,zero
10001064:	00006640 	call	10000664 <IO_read>
10001068:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
1000106c:	e0bffb0b 	ldhu	r2,-20(fp)
10001070:	01040074 	movhi	r4,4097
10001074:	21077404 	addi	r4,r4,7632
10001078:	100b883a 	mov	r5,r2
1000107c:	00025940 	call	10002594 <printf>
	while (usb_ctl_val != 0x03)
10001080:	00000206 	br	1000108c <main+0x9d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001084:	000246c0 	call	1000246c <UsbGetRetryCnt>
10001088:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000108c:	e0bffb0b 	ldhu	r2,-20(fp)
10001090:	108000d8 	cmpnei	r2,r2,3
10001094:	103ffb1e 	bne	r2,zero,10001084 <__alt_data_end+0xf8001084>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10001098:	01040074 	movhi	r4,4097
1000109c:	21079204 	addi	r4,r4,7752
100010a0:	00026880 	call	10002688 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
100010a4:	00020ac0 	call	100020ac <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100010a8:	00000306 	br	100010b8 <main+0xa00>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
100010ac:	00020ac0 	call	100020ac <UsbGetReportDesc>
		usleep(10*1000);
100010b0:	0109c404 	movi	r4,10000
100010b4:	000f8f80 	call	1000f8f8 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100010b8:	010000c4 	movi	r4,3
100010bc:	00006640 	call	10000664 <IO_read>
100010c0:	10bfffcc 	andi	r2,r2,65535
100010c4:	1080040c 	andi	r2,r2,16
100010c8:	103ff826 	beq	r2,zero,100010ac <__alt_data_end+0xf80010ac>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100010cc:	00023e80 	call	100023e8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100010d0:	01000084 	movi	r4,2
100010d4:	01414184 	movi	r5,1286
100010d8:	000060c0 	call	1000060c <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
100010dc:	0009883a 	mov	r4,zero
100010e0:	00006640 	call	10000664 <IO_read>
100010e4:	10bfffcc 	andi	r2,r2,65535
100010e8:	01040074 	movhi	r4,4097
100010ec:	2107a604 	addi	r4,r4,7832
100010f0:	100b883a 	mov	r5,r2
100010f4:	00025940 	call	10002594 <printf>

	IO_write(HPI_ADDR,0x0508);
100010f8:	01000084 	movi	r4,2
100010fc:	01414204 	movi	r5,1288
10001100:	000060c0 	call	1000060c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10001104:	0009883a 	mov	r4,zero
10001108:	00006640 	call	10000664 <IO_read>
1000110c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10001110:	e0bffb0b 	ldhu	r2,-20(fp)
10001114:	01040074 	movhi	r4,4097
10001118:	2107b204 	addi	r4,r4,7880
1000111c:	100b883a 	mov	r5,r2
10001120:	00025940 	call	10002594 <printf>
	while (usb_ctl_val != 0x03)
10001124:	00000206 	br	10001130 <main+0xa78>
	{
		usb_ctl_val = UsbGetRetryCnt();
10001128:	000246c0 	call	1000246c <UsbGetRetryCnt>
1000112c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10001130:	e0bffb0b 	ldhu	r2,-20(fp)
10001134:	108000d8 	cmpnei	r2,r2,3
10001138:	103ffb1e 	bne	r2,zero,10001128 <__alt_data_end+0xf8001128>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
1000113c:	01040074 	movhi	r4,4097
10001140:	2107be04 	addi	r4,r4,7928
10001144:	00026880 	call	10002688 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10001148:	0109c404 	movi	r4,10000
1000114c:	000f8f80 	call	1000f8f8 <usleep>
	while(1)
	{
		toggle++;
10001150:	e0bffb83 	ldbu	r2,-18(fp)
10001154:	10800044 	addi	r2,r2,1
10001158:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
1000115c:	01000084 	movi	r4,2
10001160:	01414004 	movi	r5,1280
10001164:	000060c0 	call	1000060c <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10001168:	0009883a 	mov	r4,zero
1000116c:	01414704 	movi	r5,1308
10001170:	000060c0 	call	1000060c <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10001174:	e0bfff03 	ldbu	r2,-4(fp)
10001178:	108003cc 	andi	r2,r2,15
1000117c:	0009883a 	mov	r4,zero
10001180:	100b883a 	mov	r5,r2
10001184:	000060c0 	call	1000060c <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10001188:	0009883a 	mov	r4,zero
1000118c:	0140a444 	movi	r5,657
10001190:	000060c0 	call	1000060c <IO_write>
		if(toggle%2)
10001194:	e0bffb83 	ldbu	r2,-18(fp)
10001198:	1080004c 	andi	r2,r2,1
1000119c:	10803fcc 	andi	r2,r2,255
100011a0:	10000426 	beq	r2,zero,100011b4 <main+0xafc>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
100011a4:	0009883a 	mov	r4,zero
100011a8:	01400044 	movi	r5,1
100011ac:	000060c0 	call	1000060c <IO_write>
100011b0:	00000306 	br	100011c0 <main+0xb08>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
100011b4:	0009883a 	mov	r4,zero
100011b8:	01401044 	movi	r5,65
100011bc:	000060c0 	call	1000060c <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
100011c0:	0009883a 	mov	r4,zero
100011c4:	014004c4 	movi	r5,19
100011c8:	000060c0 	call	1000060c <IO_write>
		IO_write(HPI_DATA,0x0000);//a
100011cc:	0009883a 	mov	r4,zero
100011d0:	000b883a 	mov	r5,zero
100011d4:	000060c0 	call	1000060c <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100011d8:	01006c04 	movi	r4,432
100011dc:	01414004 	movi	r5,1280
100011e0:	00014140 	call	10001414 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100011e4:	00002406 	br	10001278 <main+0xbc0>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
100011e8:	01000084 	movi	r4,2
100011ec:	01414004 	movi	r5,1280
100011f0:	000060c0 	call	1000060c <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
100011f4:	0009883a 	mov	r4,zero
100011f8:	01414704 	movi	r5,1308
100011fc:	000060c0 	call	1000060c <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10001200:	e0bfff03 	ldbu	r2,-4(fp)
10001204:	108003cc 	andi	r2,r2,15
10001208:	0009883a 	mov	r4,zero
1000120c:	100b883a 	mov	r5,r2
10001210:	000060c0 	call	1000060c <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10001214:	0009883a 	mov	r4,zero
10001218:	0140a444 	movi	r5,657
1000121c:	000060c0 	call	1000060c <IO_write>
			if(toggle%2)
10001220:	e0bffb83 	ldbu	r2,-18(fp)
10001224:	1080004c 	andi	r2,r2,1
10001228:	10803fcc 	andi	r2,r2,255
1000122c:	10000426 	beq	r2,zero,10001240 <main+0xb88>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10001230:	0009883a 	mov	r4,zero
10001234:	01400044 	movi	r5,1
10001238:	000060c0 	call	1000060c <IO_write>
1000123c:	00000306 	br	1000124c <main+0xb94>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10001240:	0009883a 	mov	r4,zero
10001244:	01401044 	movi	r5,65
10001248:	000060c0 	call	1000060c <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
1000124c:	0009883a 	mov	r4,zero
10001250:	014004c4 	movi	r5,19
10001254:	000060c0 	call	1000060c <IO_write>
			IO_write(HPI_DATA,0x0000);//
10001258:	0009883a 	mov	r4,zero
1000125c:	000b883a 	mov	r5,zero
10001260:	000060c0 	call	1000060c <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001264:	01006c04 	movi	r4,432
10001268:	01414004 	movi	r5,1280
1000126c:	00014140 	call	10001414 <UsbWrite>
			usleep(10*1000);
10001270:	0109c404 	movi	r4,10000
10001274:	000f8f80 	call	1000f8f8 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001278:	010000c4 	movi	r4,3
1000127c:	00006640 	call	10000664 <IO_read>
10001280:	10bfffcc 	andi	r2,r2,65535
10001284:	1080040c 	andi	r2,r2,16
10001288:	103fd726 	beq	r2,zero,100011e8 <__alt_data_end+0xf80011e8>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
1000128c:	00023e80 	call	100023e8 <UsbWaitTDListDone>
10001290:	e0bffb0d 	sth	r2,-20(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
10001294:	01000084 	movi	r4,2
10001298:	01414784 	movi	r5,1310
1000129c:	000060c0 	call	1000060c <IO_write>
		keycode = IO_read(HPI_DATA);
100012a0:	0009883a 	mov	r4,zero
100012a4:	00006640 	call	10000664 <IO_read>
100012a8:	10bfffcc 	andi	r2,r2,65535
100012ac:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
100012b0:	01040074 	movhi	r4,4097
100012b4:	2107d204 	addi	r4,r4,8008
100012b8:	e17ffd17 	ldw	r5,-12(fp)
100012bc:	00025940 	call	10002594 <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
100012c0:	e0bffd17 	ldw	r2,-12(fp)
100012c4:	10c03fcc 	andi	r3,r2,255
100012c8:	00803804 	movi	r2,224
100012cc:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
100012d0:	01003204 	movi	r4,200
100012d4:	000f8f80 	call	1000f8f8 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
100012d8:	d0a6cb0b 	ldhu	r2,-25812(gp)
100012dc:	10bfffcc 	andi	r2,r2,65535
100012e0:	1009883a 	mov	r4,r2
100012e4:	00014680 	call	10001468 <UsbRead>
100012e8:	e0bffb0d 	sth	r2,-20(fp)

		updateEnemies();
100012ec:	00001f80 	call	100001f8 <updateEnemies>

		if(!(usb_ctl_val & no_device))
100012f0:	d0a6cb8b 	ldhu	r2,-25810(gp)
100012f4:	e0fffb0b 	ldhu	r3,-20(fp)
100012f8:	1884703a 	and	r2,r3,r2
100012fc:	10bfffcc 	andi	r2,r2,65535
10001300:	1000201e 	bne	r2,zero,10001384 <main+0xccc>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001304:	e03ffbc5 	stb	zero,-17(fp)
10001308:	00001006 	br	1000134c <main+0xc94>
			{
				usleep(5*1000);
1000130c:	0104e204 	movi	r4,5000
10001310:	000f8f80 	call	1000f8f8 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10001314:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001318:	10bfffcc 	andi	r2,r2,65535
1000131c:	1009883a 	mov	r4,r2
10001320:	00014680 	call	10001468 <UsbRead>
10001324:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
10001328:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000132c:	e0fffb0b 	ldhu	r3,-20(fp)
10001330:	1884703a 	and	r2,r3,r2
10001334:	10bfffcc 	andi	r2,r2,65535
10001338:	10000126 	beq	r2,zero,10001340 <main+0xc88>
1000133c:	00000606 	br	10001358 <main+0xca0>
		updateEnemies();

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001340:	e0bffbc3 	ldbu	r2,-17(fp)
10001344:	10800044 	addi	r2,r2,1
10001348:	e0bffbc5 	stb	r2,-17(fp)
1000134c:	e0bffbc3 	ldbu	r2,-17(fp)
10001350:	108001f0 	cmpltui	r2,r2,7
10001354:	103fed1e 	bne	r2,zero,1000130c <__alt_data_end+0xf800130c>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
10001358:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000135c:	e0fffb0b 	ldhu	r3,-20(fp)
10001360:	1884703a 	and	r2,r3,r2
10001364:	10bfffcc 	andi	r2,r2,65535
10001368:	1000061e 	bne	r2,zero,10001384 <main+0xccc>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
1000136c:	01040074 	movhi	r4,4097
10001370:	2107db04 	addi	r4,r4,8044
10001374:	00026880 	call	10002688 <puts>
				printf("[INFO]: please insert again!!! \n");
10001378:	01040074 	movhi	r4,4097
1000137c:	2107e604 	addi	r4,r4,8088
10001380:	00026880 	call	10002688 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10001384:	00001d06 	br	100013fc <main+0xd44>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10001388:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000138c:	10bfffcc 	andi	r2,r2,65535
10001390:	1009883a 	mov	r4,r2
10001394:	00014680 	call	10001468 <UsbRead>
10001398:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
1000139c:	0104e204 	movi	r4,5000
100013a0:	000f8f80 	call	1000f8f8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100013a4:	d0a6cb0b 	ldhu	r2,-25812(gp)
100013a8:	10bfffcc 	andi	r2,r2,65535
100013ac:	1009883a 	mov	r4,r2
100013b0:	00014680 	call	10001468 <UsbRead>
100013b4:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
100013b8:	0104e204 	movi	r4,5000
100013bc:	000f8f80 	call	1000f8f8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100013c0:	d0a6cb0b 	ldhu	r2,-25812(gp)
100013c4:	10bfffcc 	andi	r2,r2,65535
100013c8:	1009883a 	mov	r4,r2
100013cc:	00014680 	call	10001468 <UsbRead>
100013d0:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
100013d4:	0104e204 	movi	r4,5000
100013d8:	000f8f80 	call	1000f8f8 <usleep>

			if(usb_ctl_val & no_device)
100013dc:	d0a6cb8b 	ldhu	r2,-25810(gp)
100013e0:	e0fffb0b 	ldhu	r3,-20(fp)
100013e4:	1884703a 	and	r2,r3,r2
100013e8:	10bfffcc 	andi	r2,r2,65535
100013ec:	10000126 	beq	r2,zero,100013f4 <main+0xd3c>
				goto USB_HOT_PLUG;
100013f0:	003cbf06 	br	100006f0 <__alt_data_end+0xf80006f0>

			usleep(200);
100013f4:	01003204 	movi	r4,200
100013f8:	000f8f80 	call	1000f8f8 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
100013fc:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001400:	e0fffb0b 	ldhu	r3,-20(fp)
10001404:	1884703a 	and	r2,r3,r2
10001408:	10bfffcc 	andi	r2,r2,65535
1000140c:	103fde26 	beq	r2,zero,10001388 <__alt_data_end+0xf8001388>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
10001410:	003f4f06 	br	10001150 <__alt_data_end+0xf8001150>

10001414 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10001414:	defffc04 	addi	sp,sp,-16
10001418:	dfc00315 	stw	ra,12(sp)
1000141c:	df000215 	stw	fp,8(sp)
10001420:	df000204 	addi	fp,sp,8
10001424:	2007883a 	mov	r3,r4
10001428:	2805883a 	mov	r2,r5
1000142c:	e0fffe0d 	sth	r3,-8(fp)
10001430:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
//	IO_write(0b10, Address);
//	IO_write(0b11, Data);
	IO_write(HPI_ADDR, Address);
10001434:	e0bffe0b 	ldhu	r2,-8(fp)
10001438:	01000084 	movi	r4,2
1000143c:	100b883a 	mov	r5,r2
10001440:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA, Data);
10001444:	e0bfff0b 	ldhu	r2,-4(fp)
10001448:	0009883a 	mov	r4,zero
1000144c:	100b883a 	mov	r5,r2
10001450:	000060c0 	call	1000060c <IO_write>
}
10001454:	e037883a 	mov	sp,fp
10001458:	dfc00117 	ldw	ra,4(sp)
1000145c:	df000017 	ldw	fp,0(sp)
10001460:	dec00204 	addi	sp,sp,8
10001464:	f800283a 	ret

10001468 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001468:	defffd04 	addi	sp,sp,-12
1000146c:	dfc00215 	stw	ra,8(sp)
10001470:	df000115 	stw	fp,4(sp)
10001474:	df000104 	addi	fp,sp,4
10001478:	2005883a 	mov	r2,r4
1000147c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10001480:	e0bfff0b 	ldhu	r2,-4(fp)
10001484:	01000084 	movi	r4,2
10001488:	100b883a 	mov	r5,r2
1000148c:	000060c0 	call	1000060c <IO_write>
	return IO_read(HPI_DATA);
10001490:	0009883a 	mov	r4,zero
10001494:	00006640 	call	10000664 <IO_read>
}
10001498:	e037883a 	mov	sp,fp
1000149c:	dfc00117 	ldw	ra,4(sp)
100014a0:	df000017 	ldw	fp,0(sp)
100014a4:	dec00204 	addi	sp,sp,8
100014a8:	f800283a 	ret

100014ac <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
100014ac:	defffe04 	addi	sp,sp,-8
100014b0:	dfc00115 	stw	ra,4(sp)
100014b4:	df000015 	stw	fp,0(sp)
100014b8:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
100014bc:	01000044 	movi	r4,1
100014c0:	017e9414 	movui	r5,64080
100014c4:	000060c0 	call	1000060c <IO_write>
	usleep(100000);
100014c8:	010000b4 	movhi	r4,2
100014cc:	2121a804 	addi	r4,r4,-31072
100014d0:	000f8f80 	call	1000f8f8 <usleep>
	printf("[USB INIT]:reset finished!\n");
100014d4:	01040074 	movhi	r4,4097
100014d8:	2107ee04 	addi	r4,r4,8120
100014dc:	00026880 	call	10002688 <puts>

	usleep(500000);
100014e0:	01000234 	movhi	r4,8
100014e4:	21284804 	addi	r4,r4,-24288
100014e8:	000f8f80 	call	1000f8f8 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
100014ec:	01040074 	movhi	r4,4097
100014f0:	2107f504 	addi	r4,r4,8148
100014f4:	00026880 	call	10002688 <puts>
	IO_read(HPI_MAILBOX);
100014f8:	01000044 	movi	r4,1
100014fc:	00006640 	call	10000664 <IO_read>
	IO_read(HPI_STATUS);
10001500:	010000c4 	movi	r4,3
10001504:	00006640 	call	10000664 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001508:	01005104 	movi	r4,324
1000150c:	00014680 	call	10001468 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001510:	01005104 	movi	r4,324
10001514:	000b883a 	mov	r5,zero
10001518:	00014140 	call	10001414 <UsbWrite>
	UsbRead (HPI_SIE1_MSG_ADR); //Debug
1000151c:	01005104 	movi	r4,324
10001520:	00014680 	call	10001468 <UsbRead>

	UsbRead (HPI_SIE2_MSG_ADR);
10001524:	01005204 	movi	r4,328
10001528:	00014680 	call	10001468 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
1000152c:	01005204 	movi	r4,328
10001530:	000b883a 	mov	r5,zero
10001534:	00014140 	call	10001414 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR); //Debug
10001538:	01005204 	movi	r4,328
1000153c:	00014680 	call	10001468 <UsbRead>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001540:	01302414 	movui	r4,49296
10001544:	017fffd4 	movui	r5,65535
10001548:	00014140 	call	10001414 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
1000154c:	01302c14 	movui	r4,49328
10001550:	017fffd4 	movui	r5,65535
10001554:	00014140 	call	10001414 <UsbWrite>

}
10001558:	e037883a 	mov	sp,fp
1000155c:	dfc00117 	ldw	ra,4(sp)
10001560:	df000017 	ldw	fp,0(sp)
10001564:	dec00204 	addi	sp,sp,8
10001568:	f800283a 	ret

1000156c <UsbSetAddress>:


void UsbSetAddress()
{
1000156c:	defffe04 	addi	sp,sp,-8
10001570:	dfc00115 	stw	ra,4(sp)
10001574:	df000015 	stw	fp,0(sp)
10001578:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000157c:	01000084 	movi	r4,2
10001580:	01414004 	movi	r5,1280
10001584:	000060c0 	call	1000060c <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10001588:	0009883a 	mov	r4,zero
1000158c:	01414304 	movi	r5,1292
10001590:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001594:	0009883a 	mov	r4,zero
10001598:	01400204 	movi	r5,8
1000159c:	000060c0 	call	1000060c <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
100015a0:	0009883a 	mov	r4,zero
100015a4:	01403404 	movi	r5,208
100015a8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);
100015ac:	0009883a 	mov	r4,zero
100015b0:	01400044 	movi	r5,1
100015b4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);
100015b8:	0009883a 	mov	r4,zero
100015bc:	014004c4 	movi	r5,19
100015c0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0514);
100015c4:	0009883a 	mov	r4,zero
100015c8:	01414504 	movi	r5,1300
100015cc:	000060c0 	call	1000060c <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
100015d0:	0009883a 	mov	r4,zero
100015d4:	01414004 	movi	r5,1280
100015d8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0002);
100015dc:	0009883a 	mov	r4,zero
100015e0:	01400084 	movi	r5,2
100015e4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);
100015e8:	0009883a 	mov	r4,zero
100015ec:	000b883a 	mov	r5,zero
100015f0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);
100015f4:	0009883a 	mov	r4,zero
100015f8:	000b883a 	mov	r5,zero
100015fc:	000060c0 	call	1000060c <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10001600:	0009883a 	mov	r4,zero
10001604:	000b883a 	mov	r5,zero
10001608:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//
1000160c:	0009883a 	mov	r4,zero
10001610:	000b883a 	mov	r5,zero
10001614:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0090);//
10001618:	0009883a 	mov	r4,zero
1000161c:	01402404 	movi	r5,144
10001620:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);
10001624:	0009883a 	mov	r4,zero
10001628:	01401044 	movi	r5,65
1000162c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);
10001630:	0009883a 	mov	r4,zero
10001634:	014004c4 	movi	r5,19
10001638:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);
1000163c:	0009883a 	mov	r4,zero
10001640:	000b883a 	mov	r5,zero
10001644:	000060c0 	call	1000060c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001648:	01006c04 	movi	r4,432
1000164c:	01414004 	movi	r5,1280
10001650:	00014140 	call	10001414 <UsbWrite>
}
10001654:	e037883a 	mov	sp,fp
10001658:	dfc00117 	ldw	ra,4(sp)
1000165c:	df000017 	ldw	fp,0(sp)
10001660:	dec00204 	addi	sp,sp,8
10001664:	f800283a 	ret

10001668 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10001668:	defffe04 	addi	sp,sp,-8
1000166c:	dfc00115 	stw	ra,4(sp)
10001670:	df000015 	stw	fp,0(sp)
10001674:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001678:	01000084 	movi	r4,2
1000167c:	01414004 	movi	r5,1280
10001680:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x050C);
10001684:	0009883a 	mov	r4,zero
10001688:	01414304 	movi	r5,1292
1000168c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001690:	0009883a 	mov	r4,zero
10001694:	01400204 	movi	r5,8
10001698:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000169c:	0009883a 	mov	r4,zero
100016a0:	0140b404 	movi	r5,720
100016a4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);
100016a8:	0009883a 	mov	r4,zero
100016ac:	01400044 	movi	r5,1
100016b0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);
100016b4:	0009883a 	mov	r4,zero
100016b8:	014004c4 	movi	r5,19
100016bc:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0514);
100016c0:	0009883a 	mov	r4,zero
100016c4:	01414504 	movi	r5,1300
100016c8:	000060c0 	call	1000060c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100016cc:	0009883a 	mov	r4,zero
100016d0:	0141a004 	movi	r5,1664
100016d4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
100016d8:	0009883a 	mov	r4,zero
100016dc:	01404004 	movi	r5,256
100016e0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);
100016e4:	0009883a 	mov	r4,zero
100016e8:	000b883a 	mov	r5,zero
100016ec:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);
100016f0:	0009883a 	mov	r4,zero
100016f4:	01400204 	movi	r5,8
100016f8:	000060c0 	call	1000060c <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
100016fc:	0009883a 	mov	r4,zero
10001700:	01414b04 	movi	r5,1324
10001704:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//
10001708:	0009883a 	mov	r4,zero
1000170c:	01400204 	movi	r5,8
10001710:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//
10001714:	0009883a 	mov	r4,zero
10001718:	0140a404 	movi	r5,656
1000171c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);
10001720:	0009883a 	mov	r4,zero
10001724:	01401044 	movi	r5,65
10001728:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);
1000172c:	0009883a 	mov	r4,zero
10001730:	014004c4 	movi	r5,19
10001734:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0520);
10001738:	0009883a 	mov	r4,zero
1000173c:	01414804 	movi	r5,1312
10001740:	000060c0 	call	1000060c <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10001744:	0009883a 	mov	r4,zero
10001748:	000b883a 	mov	r5,zero
1000174c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001750:	0009883a 	mov	r4,zero
10001754:	000b883a 	mov	r5,zero
10001758:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
1000175c:	0009883a 	mov	r4,zero
10001760:	01408404 	movi	r5,528
10001764:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);
10001768:	0009883a 	mov	r4,zero
1000176c:	01401044 	movi	r5,65
10001770:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);
10001774:	0009883a 	mov	r4,zero
10001778:	014004c4 	movi	r5,19
1000177c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);
10001780:	0009883a 	mov	r4,zero
10001784:	000b883a 	mov	r5,zero
10001788:	000060c0 	call	1000060c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000178c:	01006c04 	movi	r4,432
10001790:	01414004 	movi	r5,1280
10001794:	00014140 	call	10001414 <UsbWrite>
}
10001798:	e037883a 	mov	sp,fp
1000179c:	dfc00117 	ldw	ra,4(sp)
100017a0:	df000017 	ldw	fp,0(sp)
100017a4:	dec00204 	addi	sp,sp,8
100017a8:	f800283a 	ret

100017ac <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
100017ac:	defffe04 	addi	sp,sp,-8
100017b0:	dfc00115 	stw	ra,4(sp)
100017b4:	df000015 	stw	fp,0(sp)
100017b8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100017bc:	01000084 	movi	r4,2
100017c0:	01414004 	movi	r5,1280
100017c4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x050C);
100017c8:	0009883a 	mov	r4,zero
100017cc:	01414304 	movi	r5,1292
100017d0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100017d4:	0009883a 	mov	r4,zero
100017d8:	01400204 	movi	r5,8
100017dc:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100017e0:	0009883a 	mov	r4,zero
100017e4:	0140b404 	movi	r5,720
100017e8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);
100017ec:	0009883a 	mov	r4,zero
100017f0:	01400044 	movi	r5,1
100017f4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);
100017f8:	0009883a 	mov	r4,zero
100017fc:	014004c4 	movi	r5,19
10001800:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0514);
10001804:	0009883a 	mov	r4,zero
10001808:	01414504 	movi	r5,1300
1000180c:	000060c0 	call	1000060c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001810:	0009883a 	mov	r4,zero
10001814:	0141a004 	movi	r5,1664
10001818:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
1000181c:	0009883a 	mov	r4,zero
10001820:	01404004 	movi	r5,256
10001824:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001828:	0009883a 	mov	r4,zero
1000182c:	000b883a 	mov	r5,zero
10001830:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10001834:	0009883a 	mov	r4,zero
10001838:	01400484 	movi	r5,18
1000183c:	000060c0 	call	1000060c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001840:	0009883a 	mov	r4,zero
10001844:	01415104 	movi	r5,1348
10001848:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000184c:	0009883a 	mov	r4,zero
10001850:	01400204 	movi	r5,8
10001854:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001858:	0009883a 	mov	r4,zero
1000185c:	0140a404 	movi	r5,656
10001860:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001864:	0009883a 	mov	r4,zero
10001868:	01401044 	movi	r5,65
1000186c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001870:	0009883a 	mov	r4,zero
10001874:	014004c4 	movi	r5,19
10001878:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000187c:	0009883a 	mov	r4,zero
10001880:	01414804 	movi	r5,1312
10001884:	000060c0 	call	1000060c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001888:	0009883a 	mov	r4,zero
1000188c:	01415304 	movi	r5,1356
10001890:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001894:	0009883a 	mov	r4,zero
10001898:	01400204 	movi	r5,8
1000189c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100018a0:	0009883a 	mov	r4,zero
100018a4:	0140a404 	movi	r5,656
100018a8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);//6
100018ac:	0009883a 	mov	r4,zero
100018b0:	01400044 	movi	r5,1
100018b4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100018b8:	0009883a 	mov	r4,zero
100018bc:	014004c4 	movi	r5,19
100018c0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100018c4:	0009883a 	mov	r4,zero
100018c8:	01414b04 	movi	r5,1324
100018cc:	000060c0 	call	1000060c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
100018d0:	0009883a 	mov	r4,zero
100018d4:	01415504 	movi	r5,1364
100018d8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0002);//e
100018dc:	0009883a 	mov	r4,zero
100018e0:	01400084 	movi	r5,2
100018e4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100018e8:	0009883a 	mov	r4,zero
100018ec:	0140a404 	movi	r5,656
100018f0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100018f4:	0009883a 	mov	r4,zero
100018f8:	01401044 	movi	r5,65
100018fc:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001900:	0009883a 	mov	r4,zero
10001904:	014004c4 	movi	r5,19
10001908:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
1000190c:	0009883a 	mov	r4,zero
10001910:	01414e04 	movi	r5,1336
10001914:	000060c0 	call	1000060c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10001918:	0009883a 	mov	r4,zero
1000191c:	000b883a 	mov	r5,zero
10001920:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001924:	0009883a 	mov	r4,zero
10001928:	000b883a 	mov	r5,zero
1000192c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10001930:	0009883a 	mov	r4,zero
10001934:	01408404 	movi	r5,528
10001938:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//e
1000193c:	0009883a 	mov	r4,zero
10001940:	01401044 	movi	r5,65
10001944:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001948:	0009883a 	mov	r4,zero
1000194c:	014004c4 	movi	r5,19
10001950:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001954:	0009883a 	mov	r4,zero
10001958:	000b883a 	mov	r5,zero
1000195c:	000060c0 	call	1000060c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001960:	01006c04 	movi	r4,432
10001964:	01414004 	movi	r5,1280
10001968:	00014140 	call	10001414 <UsbWrite>
}
1000196c:	e037883a 	mov	sp,fp
10001970:	dfc00117 	ldw	ra,4(sp)
10001974:	df000017 	ldw	fp,0(sp)
10001978:	dec00204 	addi	sp,sp,8
1000197c:	f800283a 	ret

10001980 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10001980:	defffe04 	addi	sp,sp,-8
10001984:	dfc00115 	stw	ra,4(sp)
10001988:	df000015 	stw	fp,0(sp)
1000198c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001990:	01000084 	movi	r4,2
10001994:	01414004 	movi	r5,1280
10001998:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x050C);
1000199c:	0009883a 	mov	r4,zero
100019a0:	01414304 	movi	r5,1292
100019a4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100019a8:	0009883a 	mov	r4,zero
100019ac:	01400204 	movi	r5,8
100019b0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100019b4:	0009883a 	mov	r4,zero
100019b8:	0140b404 	movi	r5,720
100019bc:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);
100019c0:	0009883a 	mov	r4,zero
100019c4:	01400044 	movi	r5,1
100019c8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);
100019cc:	0009883a 	mov	r4,zero
100019d0:	014004c4 	movi	r5,19
100019d4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0514);
100019d8:	0009883a 	mov	r4,zero
100019dc:	01414504 	movi	r5,1300
100019e0:	000060c0 	call	1000060c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100019e4:	0009883a 	mov	r4,zero
100019e8:	0141a004 	movi	r5,1664
100019ec:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100019f0:	0009883a 	mov	r4,zero
100019f4:	01408004 	movi	r5,512
100019f8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100019fc:	0009883a 	mov	r4,zero
10001a00:	000b883a 	mov	r5,zero
10001a04:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10001a08:	0009883a 	mov	r4,zero
10001a0c:	01400244 	movi	r5,9
10001a10:	000060c0 	call	1000060c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001a14:	0009883a 	mov	r4,zero
10001a18:	01415104 	movi	r5,1348
10001a1c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001a20:	0009883a 	mov	r4,zero
10001a24:	01400204 	movi	r5,8
10001a28:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001a2c:	0009883a 	mov	r4,zero
10001a30:	0140a404 	movi	r5,656
10001a34:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001a38:	0009883a 	mov	r4,zero
10001a3c:	01401044 	movi	r5,65
10001a40:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001a44:	0009883a 	mov	r4,zero
10001a48:	014004c4 	movi	r5,19
10001a4c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001a50:	0009883a 	mov	r4,zero
10001a54:	01414804 	movi	r5,1312
10001a58:	000060c0 	call	1000060c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001a5c:	0009883a 	mov	r4,zero
10001a60:	01415304 	movi	r5,1356
10001a64:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10001a68:	0009883a 	mov	r4,zero
10001a6c:	01400044 	movi	r5,1
10001a70:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001a74:	0009883a 	mov	r4,zero
10001a78:	0140a404 	movi	r5,656
10001a7c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001a80:	0009883a 	mov	r4,zero
10001a84:	01400044 	movi	r5,1
10001a88:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001a8c:	0009883a 	mov	r4,zero
10001a90:	014004c4 	movi	r5,19
10001a94:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001a98:	0009883a 	mov	r4,zero
10001a9c:	01414b04 	movi	r5,1324
10001aa0:	000060c0 	call	1000060c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001aa4:	0009883a 	mov	r4,zero
10001aa8:	000b883a 	mov	r5,zero
10001aac:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001ab0:	0009883a 	mov	r4,zero
10001ab4:	000b883a 	mov	r5,zero
10001ab8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001abc:	0009883a 	mov	r4,zero
10001ac0:	01408404 	movi	r5,528
10001ac4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001ac8:	0009883a 	mov	r4,zero
10001acc:	01401044 	movi	r5,65
10001ad0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001ad4:	0009883a 	mov	r4,zero
10001ad8:	014004c4 	movi	r5,19
10001adc:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001ae0:	0009883a 	mov	r4,zero
10001ae4:	000b883a 	mov	r5,zero
10001ae8:	000060c0 	call	1000060c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001aec:	01006c04 	movi	r4,432
10001af0:	01414004 	movi	r5,1280
10001af4:	00014140 	call	10001414 <UsbWrite>
}
10001af8:	e037883a 	mov	sp,fp
10001afc:	dfc00117 	ldw	ra,4(sp)
10001b00:	df000017 	ldw	fp,0(sp)
10001b04:	dec00204 	addi	sp,sp,8
10001b08:	f800283a 	ret

10001b0c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10001b0c:	defffe04 	addi	sp,sp,-8
10001b10:	dfc00115 	stw	ra,4(sp)
10001b14:	df000015 	stw	fp,0(sp)
10001b18:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001b1c:	01000084 	movi	r4,2
10001b20:	01414004 	movi	r5,1280
10001b24:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x050C);
10001b28:	0009883a 	mov	r4,zero
10001b2c:	01414304 	movi	r5,1292
10001b30:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001b34:	0009883a 	mov	r4,zero
10001b38:	01400204 	movi	r5,8
10001b3c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001b40:	0009883a 	mov	r4,zero
10001b44:	0140b404 	movi	r5,720
10001b48:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);
10001b4c:	0009883a 	mov	r4,zero
10001b50:	01400044 	movi	r5,1
10001b54:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b58:	0009883a 	mov	r4,zero
10001b5c:	014004c4 	movi	r5,19
10001b60:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0514);
10001b64:	0009883a 	mov	r4,zero
10001b68:	01414504 	movi	r5,1300
10001b6c:	000060c0 	call	1000060c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001b70:	0009883a 	mov	r4,zero
10001b74:	0141a004 	movi	r5,1664
10001b78:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001b7c:	0009883a 	mov	r4,zero
10001b80:	01408004 	movi	r5,512
10001b84:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001b88:	0009883a 	mov	r4,zero
10001b8c:	000b883a 	mov	r5,zero
10001b90:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10001b94:	0009883a 	mov	r4,zero
10001b98:	01403fc4 	movi	r5,255
10001b9c:	000060c0 	call	1000060c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10001ba0:	0009883a 	mov	r4,zero
10001ba4:	01415704 	movi	r5,1372
10001ba8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001bac:	0009883a 	mov	r4,zero
10001bb0:	01400204 	movi	r5,8
10001bb4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001bb8:	0009883a 	mov	r4,zero
10001bbc:	0140a404 	movi	r5,656
10001bc0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001bc4:	0009883a 	mov	r4,zero
10001bc8:	01401044 	movi	r5,65
10001bcc:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001bd0:	0009883a 	mov	r4,zero
10001bd4:	014004c4 	movi	r5,19
10001bd8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001bdc:	0009883a 	mov	r4,zero
10001be0:	01414804 	movi	r5,1312
10001be4:	000060c0 	call	1000060c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10001be8:	0009883a 	mov	r4,zero
10001bec:	01415904 	movi	r5,1380
10001bf0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001bf4:	0009883a 	mov	r4,zero
10001bf8:	01400204 	movi	r5,8
10001bfc:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001c00:	0009883a 	mov	r4,zero
10001c04:	0140a404 	movi	r5,656
10001c08:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001c0c:	0009883a 	mov	r4,zero
10001c10:	01400044 	movi	r5,1
10001c14:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001c18:	0009883a 	mov	r4,zero
10001c1c:	014004c4 	movi	r5,19
10001c20:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001c24:	0009883a 	mov	r4,zero
10001c28:	01414b04 	movi	r5,1324
10001c2c:	000060c0 	call	1000060c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10001c30:	0009883a 	mov	r4,zero
10001c34:	01415b04 	movi	r5,1388
10001c38:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001c3c:	0009883a 	mov	r4,zero
10001c40:	01400204 	movi	r5,8
10001c44:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001c48:	0009883a 	mov	r4,zero
10001c4c:	0140a404 	movi	r5,656
10001c50:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001c54:	0009883a 	mov	r4,zero
10001c58:	01401044 	movi	r5,65
10001c5c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001c60:	0009883a 	mov	r4,zero
10001c64:	014004c4 	movi	r5,19
10001c68:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001c6c:	0009883a 	mov	r4,zero
10001c70:	01414e04 	movi	r5,1336
10001c74:	000060c0 	call	1000060c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10001c78:	0009883a 	mov	r4,zero
10001c7c:	01415d04 	movi	r5,1396
10001c80:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001c84:	0009883a 	mov	r4,zero
10001c88:	01400204 	movi	r5,8
10001c8c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001c90:	0009883a 	mov	r4,zero
10001c94:	0140a404 	movi	r5,656
10001c98:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001c9c:	0009883a 	mov	r4,zero
10001ca0:	01400044 	movi	r5,1
10001ca4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001ca8:	0009883a 	mov	r4,zero
10001cac:	014004c4 	movi	r5,19
10001cb0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001cb4:	0009883a 	mov	r4,zero
10001cb8:	01415104 	movi	r5,1348
10001cbc:	000060c0 	call	1000060c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10001cc0:	0009883a 	mov	r4,zero
10001cc4:	01415f04 	movi	r5,1404
10001cc8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10001ccc:	0009883a 	mov	r4,zero
10001cd0:	01400084 	movi	r5,2
10001cd4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001cd8:	0009883a 	mov	r4,zero
10001cdc:	0140a404 	movi	r5,656
10001ce0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001ce4:	0009883a 	mov	r4,zero
10001ce8:	01401044 	movi	r5,65
10001cec:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001cf0:	0009883a 	mov	r4,zero
10001cf4:	014004c4 	movi	r5,19
10001cf8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001cfc:	0009883a 	mov	r4,zero
10001d00:	01415404 	movi	r5,1360
10001d04:	000060c0 	call	1000060c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10001d08:	0009883a 	mov	r4,zero
10001d0c:	000b883a 	mov	r5,zero
10001d10:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001d14:	0009883a 	mov	r4,zero
10001d18:	000b883a 	mov	r5,zero
10001d1c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10001d20:	0009883a 	mov	r4,zero
10001d24:	01408404 	movi	r5,528
10001d28:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10001d2c:	0009883a 	mov	r4,zero
10001d30:	01401044 	movi	r5,65
10001d34:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001d38:	0009883a 	mov	r4,zero
10001d3c:	014004c4 	movi	r5,19
10001d40:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001d44:	0009883a 	mov	r4,zero
10001d48:	000b883a 	mov	r5,zero
10001d4c:	000060c0 	call	1000060c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001d50:	01006c04 	movi	r4,432
10001d54:	01414004 	movi	r5,1280
10001d58:	00014140 	call	10001414 <UsbWrite>
}
10001d5c:	e037883a 	mov	sp,fp
10001d60:	dfc00117 	ldw	ra,4(sp)
10001d64:	df000017 	ldw	fp,0(sp)
10001d68:	dec00204 	addi	sp,sp,8
10001d6c:	f800283a 	ret

10001d70 <UsbSetConfig>:

void UsbSetConfig()
{
10001d70:	defffe04 	addi	sp,sp,-8
10001d74:	dfc00115 	stw	ra,4(sp)
10001d78:	df000015 	stw	fp,0(sp)
10001d7c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001d80:	01000084 	movi	r4,2
10001d84:	01414004 	movi	r5,1280
10001d88:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x050C);
10001d8c:	0009883a 	mov	r4,zero
10001d90:	01414304 	movi	r5,1292
10001d94:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001d98:	0009883a 	mov	r4,zero
10001d9c:	01400204 	movi	r5,8
10001da0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001da4:	0009883a 	mov	r4,zero
10001da8:	0140b404 	movi	r5,720
10001dac:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);
10001db0:	0009883a 	mov	r4,zero
10001db4:	01400044 	movi	r5,1
10001db8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);
10001dbc:	0009883a 	mov	r4,zero
10001dc0:	014004c4 	movi	r5,19
10001dc4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0514);
10001dc8:	0009883a 	mov	r4,zero
10001dcc:	01414504 	movi	r5,1300
10001dd0:	000060c0 	call	1000060c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001dd4:	0009883a 	mov	r4,zero
10001dd8:	01424004 	movi	r5,2304
10001ddc:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10001de0:	0009883a 	mov	r4,zero
10001de4:	01400044 	movi	r5,1
10001de8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);
10001dec:	0009883a 	mov	r4,zero
10001df0:	000b883a 	mov	r5,zero
10001df4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);
10001df8:	0009883a 	mov	r4,zero
10001dfc:	000b883a 	mov	r5,zero
10001e00:	000060c0 	call	1000060c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001e04:	0009883a 	mov	r4,zero
10001e08:	000b883a 	mov	r5,zero
10001e0c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001e10:	0009883a 	mov	r4,zero
10001e14:	000b883a 	mov	r5,zero
10001e18:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001e1c:	0009883a 	mov	r4,zero
10001e20:	0140a404 	movi	r5,656
10001e24:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001e28:	0009883a 	mov	r4,zero
10001e2c:	01401044 	movi	r5,65
10001e30:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);
10001e34:	0009883a 	mov	r4,zero
10001e38:	014004c4 	movi	r5,19
10001e3c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);
10001e40:	0009883a 	mov	r4,zero
10001e44:	000b883a 	mov	r5,zero
10001e48:	000060c0 	call	1000060c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001e4c:	01006c04 	movi	r4,432
10001e50:	01414004 	movi	r5,1280
10001e54:	00014140 	call	10001414 <UsbWrite>

}
10001e58:	e037883a 	mov	sp,fp
10001e5c:	dfc00117 	ldw	ra,4(sp)
10001e60:	df000017 	ldw	fp,0(sp)
10001e64:	dec00204 	addi	sp,sp,8
10001e68:	f800283a 	ret

10001e6c <UsbClassRequest>:

void UsbClassRequest()
{
10001e6c:	defffe04 	addi	sp,sp,-8
10001e70:	dfc00115 	stw	ra,4(sp)
10001e74:	df000015 	stw	fp,0(sp)
10001e78:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001e7c:	01000084 	movi	r4,2
10001e80:	01414004 	movi	r5,1280
10001e84:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x050C);
10001e88:	0009883a 	mov	r4,zero
10001e8c:	01414304 	movi	r5,1292
10001e90:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001e94:	0009883a 	mov	r4,zero
10001e98:	01400204 	movi	r5,8
10001e9c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001ea0:	0009883a 	mov	r4,zero
10001ea4:	0140b404 	movi	r5,720
10001ea8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);
10001eac:	0009883a 	mov	r4,zero
10001eb0:	01400044 	movi	r5,1
10001eb4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);
10001eb8:	0009883a 	mov	r4,zero
10001ebc:	014004c4 	movi	r5,19
10001ec0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0514);
10001ec4:	0009883a 	mov	r4,zero
10001ec8:	01414504 	movi	r5,1300
10001ecc:	000060c0 	call	1000060c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001ed0:	0009883a 	mov	r4,zero
10001ed4:	01428844 	movi	r5,2593
10001ed8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10001edc:	0009883a 	mov	r4,zero
10001ee0:	000b883a 	mov	r5,zero
10001ee4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);
10001ee8:	0009883a 	mov	r4,zero
10001eec:	000b883a 	mov	r5,zero
10001ef0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);
10001ef4:	0009883a 	mov	r4,zero
10001ef8:	000b883a 	mov	r5,zero
10001efc:	000060c0 	call	1000060c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001f00:	0009883a 	mov	r4,zero
10001f04:	000b883a 	mov	r5,zero
10001f08:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001f0c:	0009883a 	mov	r4,zero
10001f10:	000b883a 	mov	r5,zero
10001f14:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001f18:	0009883a 	mov	r4,zero
10001f1c:	0140a404 	movi	r5,656
10001f20:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001f24:	0009883a 	mov	r4,zero
10001f28:	01401044 	movi	r5,65
10001f2c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);
10001f30:	0009883a 	mov	r4,zero
10001f34:	014004c4 	movi	r5,19
10001f38:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);
10001f3c:	0009883a 	mov	r4,zero
10001f40:	000b883a 	mov	r5,zero
10001f44:	000060c0 	call	1000060c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001f48:	01006c04 	movi	r4,432
10001f4c:	01414004 	movi	r5,1280
10001f50:	00014140 	call	10001414 <UsbWrite>
}
10001f54:	e037883a 	mov	sp,fp
10001f58:	dfc00117 	ldw	ra,4(sp)
10001f5c:	df000017 	ldw	fp,0(sp)
10001f60:	dec00204 	addi	sp,sp,8
10001f64:	f800283a 	ret

10001f68 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10001f68:	defffe04 	addi	sp,sp,-8
10001f6c:	dfc00115 	stw	ra,4(sp)
10001f70:	df000015 	stw	fp,0(sp)
10001f74:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001f78:	01000084 	movi	r4,2
10001f7c:	01414004 	movi	r5,1280
10001f80:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x050C);
10001f84:	0009883a 	mov	r4,zero
10001f88:	01414304 	movi	r5,1292
10001f8c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001f90:	0009883a 	mov	r4,zero
10001f94:	01400204 	movi	r5,8
10001f98:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001f9c:	0009883a 	mov	r4,zero
10001fa0:	0140b404 	movi	r5,720
10001fa4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);
10001fa8:	0009883a 	mov	r4,zero
10001fac:	01400044 	movi	r5,1
10001fb0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);
10001fb4:	0009883a 	mov	r4,zero
10001fb8:	014004c4 	movi	r5,19
10001fbc:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0514);
10001fc0:	0009883a 	mov	r4,zero
10001fc4:	01414504 	movi	r5,1300
10001fc8:	000060c0 	call	1000060c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001fcc:	0009883a 	mov	r4,zero
10001fd0:	0141a044 	movi	r5,1665
10001fd4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001fd8:	0009883a 	mov	r4,zero
10001fdc:	01484004 	movi	r5,8448
10001fe0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001fe4:	0009883a 	mov	r4,zero
10001fe8:	000b883a 	mov	r5,zero
10001fec:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001ff0:	0009883a 	mov	r4,zero
10001ff4:	01401ec4 	movi	r5,123
10001ff8:	000060c0 	call	1000060c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001ffc:	0009883a 	mov	r4,zero
10002000:	01415104 	movi	r5,1348
10002004:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002008:	0009883a 	mov	r4,zero
1000200c:	01400204 	movi	r5,8
10002010:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002014:	0009883a 	mov	r4,zero
10002018:	0140a404 	movi	r5,656
1000201c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002020:	0009883a 	mov	r4,zero
10002024:	01401044 	movi	r5,65
10002028:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000202c:	0009883a 	mov	r4,zero
10002030:	014004c4 	movi	r5,19
10002034:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002038:	0009883a 	mov	r4,zero
1000203c:	01414804 	movi	r5,1312
10002040:	000060c0 	call	1000060c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10002044:	0009883a 	mov	r4,zero
10002048:	000b883a 	mov	r5,zero
1000204c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002050:	0009883a 	mov	r4,zero
10002054:	000b883a 	mov	r5,zero
10002058:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
1000205c:	0009883a 	mov	r4,zero
10002060:	01408404 	movi	r5,528
10002064:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002068:	0009883a 	mov	r4,zero
1000206c:	01401044 	movi	r5,65
10002070:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002074:	0009883a 	mov	r4,zero
10002078:	014004c4 	movi	r5,19
1000207c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002080:	0009883a 	mov	r4,zero
10002084:	000b883a 	mov	r5,zero
10002088:	000060c0 	call	1000060c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000208c:	01006c04 	movi	r4,432
10002090:	01414004 	movi	r5,1280
10002094:	00014140 	call	10001414 <UsbWrite>

}
10002098:	e037883a 	mov	sp,fp
1000209c:	dfc00117 	ldw	ra,4(sp)
100020a0:	df000017 	ldw	fp,0(sp)
100020a4:	dec00204 	addi	sp,sp,8
100020a8:	f800283a 	ret

100020ac <UsbGetReportDesc>:


void UsbGetReportDesc()
{
100020ac:	defffe04 	addi	sp,sp,-8
100020b0:	dfc00115 	stw	ra,4(sp)
100020b4:	df000015 	stw	fp,0(sp)
100020b8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100020bc:	01000084 	movi	r4,2
100020c0:	01414004 	movi	r5,1280
100020c4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x050C);
100020c8:	0009883a 	mov	r4,zero
100020cc:	01414304 	movi	r5,1292
100020d0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100020d4:	0009883a 	mov	r4,zero
100020d8:	01400204 	movi	r5,8
100020dc:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100020e0:	0009883a 	mov	r4,zero
100020e4:	0140b404 	movi	r5,720
100020e8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);
100020ec:	0009883a 	mov	r4,zero
100020f0:	01400044 	movi	r5,1
100020f4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);
100020f8:	0009883a 	mov	r4,zero
100020fc:	014004c4 	movi	r5,19
10002100:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0514);
10002104:	0009883a 	mov	r4,zero
10002108:	01414504 	movi	r5,1300
1000210c:	000060c0 	call	1000060c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10002110:	0009883a 	mov	r4,zero
10002114:	0141a044 	movi	r5,1665
10002118:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
1000211c:	0009883a 	mov	r4,zero
10002120:	01488004 	movi	r5,8704
10002124:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002128:	0009883a 	mov	r4,zero
1000212c:	000b883a 	mov	r5,zero
10002130:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002134:	0009883a 	mov	r4,zero
10002138:	01401ec4 	movi	r5,123
1000213c:	000060c0 	call	1000060c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10002140:	0009883a 	mov	r4,zero
10002144:	01416004 	movi	r5,1408
10002148:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000214c:	0009883a 	mov	r4,zero
10002150:	01400204 	movi	r5,8
10002154:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002158:	0009883a 	mov	r4,zero
1000215c:	0140a404 	movi	r5,656
10002160:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002164:	0009883a 	mov	r4,zero
10002168:	01401044 	movi	r5,65
1000216c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002170:	0009883a 	mov	r4,zero
10002174:	014004c4 	movi	r5,19
10002178:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000217c:	0009883a 	mov	r4,zero
10002180:	01414804 	movi	r5,1312
10002184:	000060c0 	call	1000060c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10002188:	0009883a 	mov	r4,zero
1000218c:	01416204 	movi	r5,1416
10002190:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002194:	0009883a 	mov	r4,zero
10002198:	01400204 	movi	r5,8
1000219c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100021a0:	0009883a 	mov	r4,zero
100021a4:	0140a404 	movi	r5,656
100021a8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100021ac:	0009883a 	mov	r4,zero
100021b0:	01400044 	movi	r5,1
100021b4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100021b8:	0009883a 	mov	r4,zero
100021bc:	014004c4 	movi	r5,19
100021c0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100021c4:	0009883a 	mov	r4,zero
100021c8:	01414b04 	movi	r5,1324
100021cc:	000060c0 	call	1000060c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
100021d0:	0009883a 	mov	r4,zero
100021d4:	01416404 	movi	r5,1424
100021d8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100021dc:	0009883a 	mov	r4,zero
100021e0:	01400204 	movi	r5,8
100021e4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100021e8:	0009883a 	mov	r4,zero
100021ec:	0140a404 	movi	r5,656
100021f0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100021f4:	0009883a 	mov	r4,zero
100021f8:	01401044 	movi	r5,65
100021fc:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002200:	0009883a 	mov	r4,zero
10002204:	014004c4 	movi	r5,19
10002208:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
1000220c:	0009883a 	mov	r4,zero
10002210:	01414e04 	movi	r5,1336
10002214:	000060c0 	call	1000060c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10002218:	0009883a 	mov	r4,zero
1000221c:	01416604 	movi	r5,1432
10002220:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002224:	0009883a 	mov	r4,zero
10002228:	01400204 	movi	r5,8
1000222c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002230:	0009883a 	mov	r4,zero
10002234:	0140a404 	movi	r5,656
10002238:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
1000223c:	0009883a 	mov	r4,zero
10002240:	01400044 	movi	r5,1
10002244:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002248:	0009883a 	mov	r4,zero
1000224c:	014004c4 	movi	r5,19
10002250:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10002254:	0009883a 	mov	r4,zero
10002258:	01415104 	movi	r5,1348
1000225c:	000060c0 	call	1000060c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10002260:	0009883a 	mov	r4,zero
10002264:	01416804 	movi	r5,1440
10002268:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000226c:	0009883a 	mov	r4,zero
10002270:	01400204 	movi	r5,8
10002274:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002278:	0009883a 	mov	r4,zero
1000227c:	0140a404 	movi	r5,656
10002280:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10002284:	0009883a 	mov	r4,zero
10002288:	01401044 	movi	r5,65
1000228c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002290:	0009883a 	mov	r4,zero
10002294:	014004c4 	movi	r5,19
10002298:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
1000229c:	0009883a 	mov	r4,zero
100022a0:	01415404 	movi	r5,1360
100022a4:	000060c0 	call	1000060c <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
100022a8:	0009883a 	mov	r4,zero
100022ac:	01416a04 	movi	r5,1448
100022b0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100022b4:	0009883a 	mov	r4,zero
100022b8:	01400204 	movi	r5,8
100022bc:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100022c0:	0009883a 	mov	r4,zero
100022c4:	0140a404 	movi	r5,656
100022c8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100022cc:	0009883a 	mov	r4,zero
100022d0:	01400044 	movi	r5,1
100022d4:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100022d8:	0009883a 	mov	r4,zero
100022dc:	014004c4 	movi	r5,19
100022e0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x055c);//a
100022e4:	0009883a 	mov	r4,zero
100022e8:	01415704 	movi	r5,1372
100022ec:	000060c0 	call	1000060c <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
100022f0:	0009883a 	mov	r4,zero
100022f4:	01416c04 	movi	r5,1456
100022f8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100022fc:	0009883a 	mov	r4,zero
10002300:	01400204 	movi	r5,8
10002304:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10002308:	0009883a 	mov	r4,zero
1000230c:	0140a404 	movi	r5,656
10002310:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10002314:	0009883a 	mov	r4,zero
10002318:	01401044 	movi	r5,65
1000231c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002320:	0009883a 	mov	r4,zero
10002324:	014004c4 	movi	r5,19
10002328:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0568);//6
1000232c:	0009883a 	mov	r4,zero
10002330:	01415a04 	movi	r5,1384
10002334:	000060c0 	call	1000060c <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10002338:	0009883a 	mov	r4,zero
1000233c:	01416e04 	movi	r5,1464
10002340:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10002344:	0009883a 	mov	r4,zero
10002348:	014000c4 	movi	r5,3
1000234c:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002350:	0009883a 	mov	r4,zero
10002354:	0140a404 	movi	r5,656
10002358:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
1000235c:	0009883a 	mov	r4,zero
10002360:	01400044 	movi	r5,1
10002364:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10002368:	0009883a 	mov	r4,zero
1000236c:	014004c4 	movi	r5,19
10002370:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10002374:	0009883a 	mov	r4,zero
10002378:	01415d04 	movi	r5,1396
1000237c:	000060c0 	call	1000060c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10002380:	0009883a 	mov	r4,zero
10002384:	000b883a 	mov	r5,zero
10002388:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
1000238c:	0009883a 	mov	r4,zero
10002390:	000b883a 	mov	r5,zero
10002394:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10002398:	0009883a 	mov	r4,zero
1000239c:	01408404 	movi	r5,528
100023a0:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100023a4:	0009883a 	mov	r4,zero
100023a8:	01401044 	movi	r5,65
100023ac:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100023b0:	0009883a 	mov	r4,zero
100023b4:	014004c4 	movi	r5,19
100023b8:	000060c0 	call	1000060c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100023bc:	0009883a 	mov	r4,zero
100023c0:	000b883a 	mov	r5,zero
100023c4:	000060c0 	call	1000060c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100023c8:	01006c04 	movi	r4,432
100023cc:	01414004 	movi	r5,1280
100023d0:	00014140 	call	10001414 <UsbWrite>

}
100023d4:	e037883a 	mov	sp,fp
100023d8:	dfc00117 	ldw	ra,4(sp)
100023dc:	df000017 	ldw	fp,0(sp)
100023e0:	dec00204 	addi	sp,sp,8
100023e4:	f800283a 	ret

100023e8 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
100023e8:	defffd04 	addi	sp,sp,-12
100023ec:	dfc00215 	stw	ra,8(sp)
100023f0:	df000115 	stw	fp,4(sp)
100023f4:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
100023f8:	01005104 	movi	r4,324
100023fc:	00014680 	call	10001468 <UsbRead>
10002400:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002404:	01005104 	movi	r4,324
10002408:	000b883a 	mov	r5,zero
1000240c:	00014140 	call	10001414 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002410:	00000d06 	br	10002448 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10002414:	e0bfff0b 	ldhu	r2,-4(fp)
10002418:	10000526 	beq	r2,zero,10002430 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
1000241c:	e0bfff0b 	ldhu	r2,-4(fp)
10002420:	01040074 	movhi	r4,4097
10002424:	2107fe04 	addi	r4,r4,8184
10002428:	100b883a 	mov	r5,r2
1000242c:	00025940 	call	10002594 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002430:	01005104 	movi	r4,324
10002434:	00014680 	call	10001468 <UsbRead>
10002438:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
1000243c:	01005104 	movi	r4,324
10002440:	000b883a 	mov	r5,zero
10002444:	00014140 	call	10001414 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002448:	e0bfff0b 	ldhu	r2,-4(fp)
1000244c:	10840018 	cmpnei	r2,r2,4096
10002450:	103ff01e 	bne	r2,zero,10002414 <__alt_data_end+0xf8002414>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10002454:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002458:	e037883a 	mov	sp,fp
1000245c:	dfc00117 	ldw	ra,4(sp)
10002460:	df000017 	ldw	fp,0(sp)
10002464:	dec00204 	addi	sp,sp,8
10002468:	f800283a 	ret

1000246c <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
1000246c:	defffd04 	addi	sp,sp,-12
10002470:	dfc00215 	stw	ra,8(sp)
10002474:	df000115 	stw	fp,4(sp)
10002478:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
1000247c:	010000c4 	movi	r4,3
10002480:	00006640 	call	10000664 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10002484:	01005104 	movi	r4,324
10002488:	00014680 	call	10001468 <UsbRead>
1000248c:	10bfffcc 	andi	r2,r2,65535
10002490:	10840018 	cmpnei	r2,r2,4096
10002494:	1000091e 	bne	r2,zero,100024bc <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002498:	01005104 	movi	r4,324
1000249c:	000b883a 	mov	r5,zero
100024a0:	00014140 	call	10001414 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100024a4:	0001883a 	nop
100024a8:	010000c4 	movi	r4,3
100024ac:	00006640 	call	10000664 <IO_read>
100024b0:	10bfffcc 	andi	r2,r2,65535
100024b4:	1080040c 	andi	r2,r2,16
100024b8:	103ffb26 	beq	r2,zero,100024a8 <__alt_data_end+0xf80024a8>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
100024bc:	01000084 	movi	r4,2
100024c0:	01414204 	movi	r5,1288
100024c4:	000060c0 	call	1000060c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100024c8:	0009883a 	mov	r4,zero
100024cc:	00006640 	call	10000664 <IO_read>
100024d0:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
100024d4:	e0bfff0b 	ldhu	r2,-4(fp)
}
100024d8:	e037883a 	mov	sp,fp
100024dc:	dfc00117 	ldw	ra,4(sp)
100024e0:	df000017 	ldw	fp,0(sp)
100024e4:	dec00204 	addi	sp,sp,8
100024e8:	f800283a 	ret

100024ec <UsbPrintMem>:


void UsbPrintMem()
{
100024ec:	defffc04 	addi	sp,sp,-16
100024f0:	dfc00315 	stw	ra,12(sp)
100024f4:	df000215 	stw	fp,8(sp)
100024f8:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
100024fc:	01000084 	movi	r4,2
10002500:	01414004 	movi	r5,1280
10002504:	000060c0 	call	1000060c <IO_write>
	for (i = 0; i <= 200; i += 2)
10002508:	e03ffe15 	stw	zero,-8(fp)
1000250c:	00000e06 	br	10002548 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10002510:	0009883a 	mov	r4,zero
10002514:	00006640 	call	10000664 <IO_read>
10002518:	10bfffcc 	andi	r2,r2,65535
1000251c:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10002520:	e0bffe17 	ldw	r2,-8(fp)
10002524:	10814004 	addi	r2,r2,1280
10002528:	01040074 	movhi	r4,4097
1000252c:	21080604 	addi	r4,r4,8216
10002530:	100b883a 	mov	r5,r2
10002534:	e1bfff17 	ldw	r6,-4(fp)
10002538:	00025940 	call	10002594 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
1000253c:	e0bffe17 	ldw	r2,-8(fp)
10002540:	10800084 	addi	r2,r2,2
10002544:	e0bffe15 	stw	r2,-8(fp)
10002548:	e0bffe17 	ldw	r2,-8(fp)
1000254c:	10803250 	cmplti	r2,r2,201
10002550:	103fef1e 	bne	r2,zero,10002510 <__alt_data_end+0xf8002510>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10002554:	e037883a 	mov	sp,fp
10002558:	dfc00117 	ldw	ra,4(sp)
1000255c:	df000017 	ldw	fp,0(sp)
10002560:	dec00204 	addi	sp,sp,8
10002564:	f800283a 	ret

10002568 <_printf_r>:
10002568:	defffd04 	addi	sp,sp,-12
1000256c:	dfc00015 	stw	ra,0(sp)
10002570:	d9800115 	stw	r6,4(sp)
10002574:	d9c00215 	stw	r7,8(sp)
10002578:	280d883a 	mov	r6,r5
1000257c:	21400217 	ldw	r5,8(r4)
10002580:	d9c00104 	addi	r7,sp,4
10002584:	00027b00 	call	100027b0 <___vfprintf_internal_r>
10002588:	dfc00017 	ldw	ra,0(sp)
1000258c:	dec00304 	addi	sp,sp,12
10002590:	f800283a 	ret

10002594 <printf>:
10002594:	defffc04 	addi	sp,sp,-16
10002598:	dfc00015 	stw	ra,0(sp)
1000259c:	d9400115 	stw	r5,4(sp)
100025a0:	d9800215 	stw	r6,8(sp)
100025a4:	d9c00315 	stw	r7,12(sp)
100025a8:	00840074 	movhi	r2,4097
100025ac:	108f7704 	addi	r2,r2,15836
100025b0:	10800017 	ldw	r2,0(r2)
100025b4:	200b883a 	mov	r5,r4
100025b8:	d9800104 	addi	r6,sp,4
100025bc:	11000217 	ldw	r4,8(r2)
100025c0:	00048ac0 	call	100048ac <__vfprintf_internal>
100025c4:	dfc00017 	ldw	ra,0(sp)
100025c8:	dec00404 	addi	sp,sp,16
100025cc:	f800283a 	ret

100025d0 <_puts_r>:
100025d0:	defff604 	addi	sp,sp,-40
100025d4:	dc000715 	stw	r16,28(sp)
100025d8:	2021883a 	mov	r16,r4
100025dc:	2809883a 	mov	r4,r5
100025e0:	dc400815 	stw	r17,32(sp)
100025e4:	dfc00915 	stw	ra,36(sp)
100025e8:	2823883a 	mov	r17,r5
100025ec:	00027180 	call	10002718 <strlen>
100025f0:	00c40074 	movhi	r3,4097
100025f4:	18cf7704 	addi	r3,r3,15836
100025f8:	18c00017 	ldw	r3,0(r3)
100025fc:	11000044 	addi	r4,r2,1
10002600:	d8800115 	stw	r2,4(sp)
10002604:	18c00217 	ldw	r3,8(r3)
10002608:	01440074 	movhi	r5,4097
1000260c:	29480b04 	addi	r5,r5,8236
10002610:	1880030b 	ldhu	r2,12(r3)
10002614:	d9400215 	stw	r5,8(sp)
10002618:	d9000615 	stw	r4,24(sp)
1000261c:	01400044 	movi	r5,1
10002620:	01000084 	movi	r4,2
10002624:	d9000515 	stw	r4,20(sp)
10002628:	dc400015 	stw	r17,0(sp)
1000262c:	d9400315 	stw	r5,12(sp)
10002630:	dec00415 	stw	sp,16(sp)
10002634:	1108000c 	andi	r4,r2,8192
10002638:	2000061e 	bne	r4,zero,10002654 <_puts_r+0x84>
1000263c:	19401917 	ldw	r5,100(r3)
10002640:	0137ffc4 	movi	r4,-8193
10002644:	10880014 	ori	r2,r2,8192
10002648:	2908703a 	and	r4,r5,r4
1000264c:	1880030d 	sth	r2,12(r3)
10002650:	19001915 	stw	r4,100(r3)
10002654:	81400217 	ldw	r5,8(r16)
10002658:	8009883a 	mov	r4,r16
1000265c:	d9800404 	addi	r6,sp,16
10002660:	0006d700 	call	10006d70 <__sfvwrite_r>
10002664:	1000061e 	bne	r2,zero,10002680 <_puts_r+0xb0>
10002668:	00800284 	movi	r2,10
1000266c:	dfc00917 	ldw	ra,36(sp)
10002670:	dc400817 	ldw	r17,32(sp)
10002674:	dc000717 	ldw	r16,28(sp)
10002678:	dec00a04 	addi	sp,sp,40
1000267c:	f800283a 	ret
10002680:	00bfffc4 	movi	r2,-1
10002684:	003ff906 	br	1000266c <__alt_data_end+0xf800266c>

10002688 <puts>:
10002688:	00840074 	movhi	r2,4097
1000268c:	108f7704 	addi	r2,r2,15836
10002690:	200b883a 	mov	r5,r4
10002694:	11000017 	ldw	r4,0(r2)
10002698:	00025d01 	jmpi	100025d0 <_puts_r>

1000269c <srand>:
1000269c:	00840074 	movhi	r2,4097
100026a0:	108f7704 	addi	r2,r2,15836
100026a4:	10800017 	ldw	r2,0(r2)
100026a8:	11002915 	stw	r4,164(r2)
100026ac:	10002a15 	stw	zero,168(r2)
100026b0:	f800283a 	ret

100026b4 <rand>:
100026b4:	00840074 	movhi	r2,4097
100026b8:	defffe04 	addi	sp,sp,-8
100026bc:	108f7704 	addi	r2,r2,15836
100026c0:	dc000015 	stw	r16,0(sp)
100026c4:	14000017 	ldw	r16,0(r2)
100026c8:	dfc00115 	stw	ra,4(sp)
100026cc:	01932574 	movhi	r6,19605
100026d0:	81002917 	ldw	r4,164(r16)
100026d4:	81402a17 	ldw	r5,168(r16)
100026d8:	01d614b4 	movhi	r7,22610
100026dc:	319fcb44 	addi	r6,r6,32557
100026e0:	39fd0b44 	addi	r7,r7,-3027
100026e4:	000b99c0 	call	1000b99c <__muldi3>
100026e8:	11000044 	addi	r4,r2,1
100026ec:	2085803a 	cmpltu	r2,r4,r2
100026f0:	10c7883a 	add	r3,r2,r3
100026f4:	00a00034 	movhi	r2,32768
100026f8:	10bfffc4 	addi	r2,r2,-1
100026fc:	1884703a 	and	r2,r3,r2
10002700:	81002915 	stw	r4,164(r16)
10002704:	80c02a15 	stw	r3,168(r16)
10002708:	dfc00117 	ldw	ra,4(sp)
1000270c:	dc000017 	ldw	r16,0(sp)
10002710:	dec00204 	addi	sp,sp,8
10002714:	f800283a 	ret

10002718 <strlen>:
10002718:	208000cc 	andi	r2,r4,3
1000271c:	10002026 	beq	r2,zero,100027a0 <strlen+0x88>
10002720:	20800007 	ldb	r2,0(r4)
10002724:	10002026 	beq	r2,zero,100027a8 <strlen+0x90>
10002728:	2005883a 	mov	r2,r4
1000272c:	00000206 	br	10002738 <strlen+0x20>
10002730:	10c00007 	ldb	r3,0(r2)
10002734:	18001826 	beq	r3,zero,10002798 <strlen+0x80>
10002738:	10800044 	addi	r2,r2,1
1000273c:	10c000cc 	andi	r3,r2,3
10002740:	183ffb1e 	bne	r3,zero,10002730 <__alt_data_end+0xf8002730>
10002744:	10c00017 	ldw	r3,0(r2)
10002748:	01ffbff4 	movhi	r7,65279
1000274c:	39ffbfc4 	addi	r7,r7,-257
10002750:	00ca303a 	nor	r5,zero,r3
10002754:	01a02074 	movhi	r6,32897
10002758:	19c7883a 	add	r3,r3,r7
1000275c:	31a02004 	addi	r6,r6,-32640
10002760:	1946703a 	and	r3,r3,r5
10002764:	1986703a 	and	r3,r3,r6
10002768:	1800091e 	bne	r3,zero,10002790 <strlen+0x78>
1000276c:	10800104 	addi	r2,r2,4
10002770:	10c00017 	ldw	r3,0(r2)
10002774:	19cb883a 	add	r5,r3,r7
10002778:	00c6303a 	nor	r3,zero,r3
1000277c:	28c6703a 	and	r3,r5,r3
10002780:	1986703a 	and	r3,r3,r6
10002784:	183ff926 	beq	r3,zero,1000276c <__alt_data_end+0xf800276c>
10002788:	00000106 	br	10002790 <strlen+0x78>
1000278c:	10800044 	addi	r2,r2,1
10002790:	10c00007 	ldb	r3,0(r2)
10002794:	183ffd1e 	bne	r3,zero,1000278c <__alt_data_end+0xf800278c>
10002798:	1105c83a 	sub	r2,r2,r4
1000279c:	f800283a 	ret
100027a0:	2005883a 	mov	r2,r4
100027a4:	003fe706 	br	10002744 <__alt_data_end+0xf8002744>
100027a8:	0005883a 	mov	r2,zero
100027ac:	f800283a 	ret

100027b0 <___vfprintf_internal_r>:
100027b0:	defeb604 	addi	sp,sp,-1320
100027b4:	dfc14915 	stw	ra,1316(sp)
100027b8:	ddc14715 	stw	r23,1308(sp)
100027bc:	dd814615 	stw	r22,1304(sp)
100027c0:	202f883a 	mov	r23,r4
100027c4:	282d883a 	mov	r22,r5
100027c8:	d9812a15 	stw	r6,1192(sp)
100027cc:	d9c12d15 	stw	r7,1204(sp)
100027d0:	df014815 	stw	fp,1312(sp)
100027d4:	dd414515 	stw	r21,1300(sp)
100027d8:	dd014415 	stw	r20,1296(sp)
100027dc:	dcc14315 	stw	r19,1292(sp)
100027e0:	dc814215 	stw	r18,1288(sp)
100027e4:	dc414115 	stw	r17,1284(sp)
100027e8:	dc014015 	stw	r16,1280(sp)
100027ec:	00074300 	call	10007430 <_localeconv_r>
100027f0:	10800017 	ldw	r2,0(r2)
100027f4:	1009883a 	mov	r4,r2
100027f8:	d8813515 	stw	r2,1236(sp)
100027fc:	00027180 	call	10002718 <strlen>
10002800:	d8813815 	stw	r2,1248(sp)
10002804:	b8000226 	beq	r23,zero,10002810 <___vfprintf_internal_r+0x60>
10002808:	b8800e17 	ldw	r2,56(r23)
1000280c:	10010526 	beq	r2,zero,10002c24 <___vfprintf_internal_r+0x474>
10002810:	b0c0030b 	ldhu	r3,12(r22)
10002814:	1908000c 	andi	r4,r3,8192
10002818:	1805883a 	mov	r2,r3
1000281c:	2000071e 	bne	r4,zero,1000283c <___vfprintf_internal_r+0x8c>
10002820:	b1001917 	ldw	r4,100(r22)
10002824:	18880014 	ori	r2,r3,8192
10002828:	00f7ffc4 	movi	r3,-8193
1000282c:	20c8703a 	and	r4,r4,r3
10002830:	b080030d 	sth	r2,12(r22)
10002834:	1007883a 	mov	r3,r2
10002838:	b1001915 	stw	r4,100(r22)
1000283c:	1100020c 	andi	r4,r2,8
10002840:	2000a826 	beq	r4,zero,10002ae4 <___vfprintf_internal_r+0x334>
10002844:	b1000417 	ldw	r4,16(r22)
10002848:	2000a626 	beq	r4,zero,10002ae4 <___vfprintf_internal_r+0x334>
1000284c:	1080068c 	andi	r2,r2,26
10002850:	01000284 	movi	r4,10
10002854:	1100ac26 	beq	r2,r4,10002b08 <___vfprintf_internal_r+0x358>
10002858:	d8c10e04 	addi	r3,sp,1080
1000285c:	d9010dc4 	addi	r4,sp,1079
10002860:	d9400404 	addi	r5,sp,16
10002864:	05040074 	movhi	r20,4097
10002868:	1905c83a 	sub	r2,r3,r4
1000286c:	a5081c84 	addi	r20,r20,8306
10002870:	d8c12815 	stw	r3,1184(sp)
10002874:	d9012915 	stw	r4,1188(sp)
10002878:	d9411e15 	stw	r5,1144(sp)
1000287c:	d8012015 	stw	zero,1152(sp)
10002880:	d8011f15 	stw	zero,1148(sp)
10002884:	d8013315 	stw	zero,1228(sp)
10002888:	d8013715 	stw	zero,1244(sp)
1000288c:	d8013915 	stw	zero,1252(sp)
10002890:	d8013b15 	stw	zero,1260(sp)
10002894:	d8013a15 	stw	zero,1256(sp)
10002898:	d8012f15 	stw	zero,1212(sp)
1000289c:	2811883a 	mov	r8,r5
100028a0:	d8813c15 	stw	r2,1264(sp)
100028a4:	d8c12a17 	ldw	r3,1192(sp)
100028a8:	18800007 	ldb	r2,0(r3)
100028ac:	10021326 	beq	r2,zero,100030fc <___vfprintf_internal_r+0x94c>
100028b0:	00c00944 	movi	r3,37
100028b4:	dc012a17 	ldw	r16,1192(sp)
100028b8:	10c0021e 	bne	r2,r3,100028c4 <___vfprintf_internal_r+0x114>
100028bc:	00001606 	br	10002918 <___vfprintf_internal_r+0x168>
100028c0:	10c08526 	beq	r2,r3,10002ad8 <___vfprintf_internal_r+0x328>
100028c4:	84000044 	addi	r16,r16,1
100028c8:	80800007 	ldb	r2,0(r16)
100028cc:	103ffc1e 	bne	r2,zero,100028c0 <__alt_data_end+0xf80028c0>
100028d0:	d9012a17 	ldw	r4,1192(sp)
100028d4:	8123c83a 	sub	r17,r16,r4
100028d8:	88000f26 	beq	r17,zero,10002918 <___vfprintf_internal_r+0x168>
100028dc:	d8812a17 	ldw	r2,1192(sp)
100028e0:	d8c12017 	ldw	r3,1152(sp)
100028e4:	44400115 	stw	r17,4(r8)
100028e8:	40800015 	stw	r2,0(r8)
100028ec:	d8811f17 	ldw	r2,1148(sp)
100028f0:	1c47883a 	add	r3,r3,r17
100028f4:	d8c12015 	stw	r3,1152(sp)
100028f8:	10800044 	addi	r2,r2,1
100028fc:	d8811f15 	stw	r2,1148(sp)
10002900:	00c001c4 	movi	r3,7
10002904:	1880b516 	blt	r3,r2,10002bdc <___vfprintf_internal_r+0x42c>
10002908:	42000204 	addi	r8,r8,8
1000290c:	d8c12f17 	ldw	r3,1212(sp)
10002910:	1c47883a 	add	r3,r3,r17
10002914:	d8c12f15 	stw	r3,1212(sp)
10002918:	80800007 	ldb	r2,0(r16)
1000291c:	1000b626 	beq	r2,zero,10002bf8 <___vfprintf_internal_r+0x448>
10002920:	80800044 	addi	r2,r16,1
10002924:	84000047 	ldb	r16,1(r16)
10002928:	0027883a 	mov	r19,zero
1000292c:	0039883a 	mov	fp,zero
10002930:	dcc12b05 	stb	r19,1196(sp)
10002934:	d8012785 	stb	zero,1182(sp)
10002938:	027fffc4 	movi	r9,-1
1000293c:	d8012e15 	stw	zero,1208(sp)
10002940:	04401604 	movi	r17,88
10002944:	04800244 	movi	r18,9
10002948:	da012a15 	stw	r8,1192(sp)
1000294c:	e027883a 	mov	r19,fp
10002950:	17000044 	addi	fp,r2,1
10002954:	80bff804 	addi	r2,r16,-32
10002958:	88831236 	bltu	r17,r2,100035a4 <___vfprintf_internal_r+0xdf4>
1000295c:	100490ba 	slli	r2,r2,2
10002960:	01040034 	movhi	r4,4096
10002964:	210a5d04 	addi	r4,r4,10612
10002968:	1105883a 	add	r2,r2,r4
1000296c:	10800017 	ldw	r2,0(r2)
10002970:	1000683a 	jmp	r2
10002974:	100034c0 	call	1100034c <_gp+0xfe4574>
10002978:	100035a4 	muli	zero,r2,214
1000297c:	100035a4 	muli	zero,r2,214
10002980:	100034dc 	xori	zero,r2,211
10002984:	100035a4 	muli	zero,r2,214
10002988:	100035a4 	muli	zero,r2,214
1000298c:	100035a4 	muli	zero,r2,214
10002990:	100035a4 	muli	zero,r2,214
10002994:	100035a4 	muli	zero,r2,214
10002998:	100035a4 	muli	zero,r2,214
1000299c:	100034ec 	andhi	zero,r2,211
100029a0:	10003514 	ori	zero,r2,212
100029a4:	100035a4 	muli	zero,r2,214
100029a8:	10002c30 	cmpltui	zero,r2,176
100029ac:	10002c40 	call	110002c4 <_gp+0xfe44ec>
100029b0:	100035a4 	muli	zero,r2,214
100029b4:	10002c90 	cmplti	zero,r2,178
100029b8:	10002ca0 	cmpeqi	zero,r2,178
100029bc:	10002ca0 	cmpeqi	zero,r2,178
100029c0:	10002ca0 	cmpeqi	zero,r2,178
100029c4:	10002ca0 	cmpeqi	zero,r2,178
100029c8:	10002ca0 	cmpeqi	zero,r2,178
100029cc:	10002ca0 	cmpeqi	zero,r2,178
100029d0:	10002ca0 	cmpeqi	zero,r2,178
100029d4:	10002ca0 	cmpeqi	zero,r2,178
100029d8:	10002ca0 	cmpeqi	zero,r2,178
100029dc:	100035a4 	muli	zero,r2,214
100029e0:	100035a4 	muli	zero,r2,214
100029e4:	100035a4 	muli	zero,r2,214
100029e8:	100035a4 	muli	zero,r2,214
100029ec:	100035a4 	muli	zero,r2,214
100029f0:	100035a4 	muli	zero,r2,214
100029f4:	100035a4 	muli	zero,r2,214
100029f8:	100035a4 	muli	zero,r2,214
100029fc:	100035a4 	muli	zero,r2,214
10002a00:	100035a4 	muli	zero,r2,214
10002a04:	10002ce4 	muli	zero,r2,179
10002a08:	10003104 	addi	zero,r2,196
10002a0c:	100035a4 	muli	zero,r2,214
10002a10:	10003104 	addi	zero,r2,196
10002a14:	100035a4 	muli	zero,r2,214
10002a18:	100035a4 	muli	zero,r2,214
10002a1c:	100035a4 	muli	zero,r2,214
10002a20:	100035a4 	muli	zero,r2,214
10002a24:	100031ac 	andhi	zero,r2,198
10002a28:	100035a4 	muli	zero,r2,214
10002a2c:	100035a4 	muli	zero,r2,214
10002a30:	100031bc 	xorhi	zero,r2,198
10002a34:	100035a4 	muli	zero,r2,214
10002a38:	100035a4 	muli	zero,r2,214
10002a3c:	100035a4 	muli	zero,r2,214
10002a40:	100035a4 	muli	zero,r2,214
10002a44:	100035a4 	muli	zero,r2,214
10002a48:	10003200 	call	11000320 <_gp+0xfe4548>
10002a4c:	100035a4 	muli	zero,r2,214
10002a50:	100035a4 	muli	zero,r2,214
10002a54:	10003238 	rdprs	zero,r2,200
10002a58:	100035a4 	muli	zero,r2,214
10002a5c:	100035a4 	muli	zero,r2,214
10002a60:	100035a4 	muli	zero,r2,214
10002a64:	100035a4 	muli	zero,r2,214
10002a68:	100035a4 	muli	zero,r2,214
10002a6c:	100035a4 	muli	zero,r2,214
10002a70:	100035a4 	muli	zero,r2,214
10002a74:	100035a4 	muli	zero,r2,214
10002a78:	100035a4 	muli	zero,r2,214
10002a7c:	100035a4 	muli	zero,r2,214
10002a80:	10003474 	orhi	zero,r2,209
10002a84:	10003420 	cmpeqi	zero,r2,208
10002a88:	10003104 	addi	zero,r2,196
10002a8c:	10003104 	addi	zero,r2,196
10002a90:	10003104 	addi	zero,r2,196
10002a94:	10003464 	muli	zero,r2,209
10002a98:	10003420 	cmpeqi	zero,r2,208
10002a9c:	100035a4 	muli	zero,r2,214
10002aa0:	100035a4 	muli	zero,r2,214
10002aa4:	1000333c 	xorhi	zero,r2,204
10002aa8:	100035a4 	muli	zero,r2,214
10002aac:	10003354 	ori	zero,r2,205
10002ab0:	10003394 	ori	zero,r2,206
10002ab4:	100033d4 	ori	zero,r2,207
10002ab8:	100032a0 	cmpeqi	zero,r2,202
10002abc:	100035a4 	muli	zero,r2,214
10002ac0:	10003528 	cmpgeui	zero,r2,212
10002ac4:	100035a4 	muli	zero,r2,214
10002ac8:	100032b0 	cmpltui	zero,r2,202
10002acc:	100035a4 	muli	zero,r2,214
10002ad0:	100035a4 	muli	zero,r2,214
10002ad4:	100032f0 	cmpltui	zero,r2,203
10002ad8:	d9412a17 	ldw	r5,1192(sp)
10002adc:	8163c83a 	sub	r17,r16,r5
10002ae0:	003f7d06 	br	100028d8 <__alt_data_end+0xf80028d8>
10002ae4:	b809883a 	mov	r4,r23
10002ae8:	b00b883a 	mov	r5,r22
10002aec:	00048d00 	call	100048d0 <__swsetup_r>
10002af0:	10002d1e 	bne	r2,zero,10002ba8 <___vfprintf_internal_r+0x3f8>
10002af4:	b0c0030b 	ldhu	r3,12(r22)
10002af8:	01000284 	movi	r4,10
10002afc:	1805883a 	mov	r2,r3
10002b00:	1080068c 	andi	r2,r2,26
10002b04:	113f541e 	bne	r2,r4,10002858 <__alt_data_end+0xf8002858>
10002b08:	b080038b 	ldhu	r2,14(r22)
10002b0c:	113fffcc 	andi	r4,r2,65535
10002b10:	2120001c 	xori	r4,r4,32768
10002b14:	21200004 	addi	r4,r4,-32768
10002b18:	203f4f16 	blt	r4,zero,10002858 <__alt_data_end+0xf8002858>
10002b1c:	b2c01917 	ldw	r11,100(r22)
10002b20:	b2800717 	ldw	r10,28(r22)
10002b24:	b2400917 	ldw	r9,36(r22)
10002b28:	d9812a17 	ldw	r6,1192(sp)
10002b2c:	d9c12d17 	ldw	r7,1204(sp)
10002b30:	02010004 	movi	r8,1024
10002b34:	18ffff4c 	andi	r3,r3,65533
10002b38:	d881078d 	sth	r2,1054(sp)
10002b3c:	b809883a 	mov	r4,r23
10002b40:	d8800404 	addi	r2,sp,16
10002b44:	d9410404 	addi	r5,sp,1040
10002b48:	d8c1070d 	sth	r3,1052(sp)
10002b4c:	dac11d15 	stw	r11,1140(sp)
10002b50:	da810b15 	stw	r10,1068(sp)
10002b54:	da410d15 	stw	r9,1076(sp)
10002b58:	d8810415 	stw	r2,1040(sp)
10002b5c:	d8810815 	stw	r2,1056(sp)
10002b60:	da010615 	stw	r8,1048(sp)
10002b64:	da010915 	stw	r8,1060(sp)
10002b68:	d8010a15 	stw	zero,1064(sp)
10002b6c:	00027b00 	call	100027b0 <___vfprintf_internal_r>
10002b70:	1021883a 	mov	r16,r2
10002b74:	10000416 	blt	r2,zero,10002b88 <___vfprintf_internal_r+0x3d8>
10002b78:	b809883a 	mov	r4,r23
10002b7c:	d9410404 	addi	r5,sp,1040
10002b80:	00063500 	call	10006350 <_fflush_r>
10002b84:	1007301e 	bne	r2,zero,10004848 <___vfprintf_internal_r+0x2098>
10002b88:	d881070b 	ldhu	r2,1052(sp)
10002b8c:	1080100c 	andi	r2,r2,64
10002b90:	10000326 	beq	r2,zero,10002ba0 <___vfprintf_internal_r+0x3f0>
10002b94:	b080030b 	ldhu	r2,12(r22)
10002b98:	10801014 	ori	r2,r2,64
10002b9c:	b080030d 	sth	r2,12(r22)
10002ba0:	8005883a 	mov	r2,r16
10002ba4:	00000106 	br	10002bac <___vfprintf_internal_r+0x3fc>
10002ba8:	00bfffc4 	movi	r2,-1
10002bac:	dfc14917 	ldw	ra,1316(sp)
10002bb0:	df014817 	ldw	fp,1312(sp)
10002bb4:	ddc14717 	ldw	r23,1308(sp)
10002bb8:	dd814617 	ldw	r22,1304(sp)
10002bbc:	dd414517 	ldw	r21,1300(sp)
10002bc0:	dd014417 	ldw	r20,1296(sp)
10002bc4:	dcc14317 	ldw	r19,1292(sp)
10002bc8:	dc814217 	ldw	r18,1288(sp)
10002bcc:	dc414117 	ldw	r17,1284(sp)
10002bd0:	dc014017 	ldw	r16,1280(sp)
10002bd4:	dec14a04 	addi	sp,sp,1320
10002bd8:	f800283a 	ret
10002bdc:	b809883a 	mov	r4,r23
10002be0:	b00b883a 	mov	r5,r22
10002be4:	d9811e04 	addi	r6,sp,1144
10002be8:	0009bf00 	call	10009bf0 <__sprint_r>
10002bec:	1000081e 	bne	r2,zero,10002c10 <___vfprintf_internal_r+0x460>
10002bf0:	da000404 	addi	r8,sp,16
10002bf4:	003f4506 	br	1000290c <__alt_data_end+0xf800290c>
10002bf8:	d8812017 	ldw	r2,1152(sp)
10002bfc:	10000426 	beq	r2,zero,10002c10 <___vfprintf_internal_r+0x460>
10002c00:	b809883a 	mov	r4,r23
10002c04:	b00b883a 	mov	r5,r22
10002c08:	d9811e04 	addi	r6,sp,1144
10002c0c:	0009bf00 	call	10009bf0 <__sprint_r>
10002c10:	b080030b 	ldhu	r2,12(r22)
10002c14:	1080100c 	andi	r2,r2,64
10002c18:	103fe31e 	bne	r2,zero,10002ba8 <__alt_data_end+0xf8002ba8>
10002c1c:	d8812f17 	ldw	r2,1212(sp)
10002c20:	003fe206 	br	10002bac <__alt_data_end+0xf8002bac>
10002c24:	b809883a 	mov	r4,r23
10002c28:	000690c0 	call	1000690c <__sinit>
10002c2c:	003ef806 	br	10002810 <__alt_data_end+0xf8002810>
10002c30:	e005883a 	mov	r2,fp
10002c34:	9cc00114 	ori	r19,r19,4
10002c38:	e4000007 	ldb	r16,0(fp)
10002c3c:	003f4406 	br	10002950 <__alt_data_end+0xf8002950>
10002c40:	e4000007 	ldb	r16,0(fp)
10002c44:	01000a84 	movi	r4,42
10002c48:	e0800044 	addi	r2,fp,1
10002c4c:	8106f626 	beq	r16,r4,10004828 <___vfprintf_internal_r+0x2078>
10002c50:	857ff404 	addi	r21,r16,-48
10002c54:	1039883a 	mov	fp,r2
10002c58:	0013883a 	mov	r9,zero
10002c5c:	957f3d36 	bltu	r18,r21,10002954 <__alt_data_end+0xf8002954>
10002c60:	0009883a 	mov	r4,zero
10002c64:	01400284 	movi	r5,10
10002c68:	000c8300 	call	1000c830 <__mulsi3>
10002c6c:	e4000007 	ldb	r16,0(fp)
10002c70:	a889883a 	add	r4,r21,r2
10002c74:	e7000044 	addi	fp,fp,1
10002c78:	857ff404 	addi	r21,r16,-48
10002c7c:	957ff92e 	bgeu	r18,r21,10002c64 <__alt_data_end+0xf8002c64>
10002c80:	2013883a 	mov	r9,r4
10002c84:	203f330e 	bge	r4,zero,10002954 <__alt_data_end+0xf8002954>
10002c88:	027fffc4 	movi	r9,-1
10002c8c:	003f3106 	br	10002954 <__alt_data_end+0xf8002954>
10002c90:	9cc02014 	ori	r19,r19,128
10002c94:	e005883a 	mov	r2,fp
10002c98:	e4000007 	ldb	r16,0(fp)
10002c9c:	003f2c06 	br	10002950 <__alt_data_end+0xf8002950>
10002ca0:	857ff404 	addi	r21,r16,-48
10002ca4:	d8012e15 	stw	zero,1208(sp)
10002ca8:	e021883a 	mov	r16,fp
10002cac:	0009883a 	mov	r4,zero
10002cb0:	da412c15 	stw	r9,1200(sp)
10002cb4:	01400284 	movi	r5,10
10002cb8:	000c8300 	call	1000c830 <__mulsi3>
10002cbc:	81400007 	ldb	r5,0(r16)
10002cc0:	1549883a 	add	r4,r2,r21
10002cc4:	e7000044 	addi	fp,fp,1
10002cc8:	2d7ff404 	addi	r21,r5,-48
10002ccc:	e021883a 	mov	r16,fp
10002cd0:	957ff82e 	bgeu	r18,r21,10002cb4 <__alt_data_end+0xf8002cb4>
10002cd4:	2821883a 	mov	r16,r5
10002cd8:	d9012e15 	stw	r4,1208(sp)
10002cdc:	da412c17 	ldw	r9,1200(sp)
10002ce0:	003f1c06 	br	10002954 <__alt_data_end+0xf8002954>
10002ce4:	da012a17 	ldw	r8,1192(sp)
10002ce8:	df012a15 	stw	fp,1192(sp)
10002cec:	9839883a 	mov	fp,r19
10002cf0:	dcc12b03 	ldbu	r19,1196(sp)
10002cf4:	e7000414 	ori	fp,fp,16
10002cf8:	e080080c 	andi	r2,fp,32
10002cfc:	dcc12785 	stb	r19,1182(sp)
10002d00:	d8c12d17 	ldw	r3,1204(sp)
10002d04:	1001ce26 	beq	r2,zero,10003440 <___vfprintf_internal_r+0xc90>
10002d08:	d9012d17 	ldw	r4,1204(sp)
10002d0c:	18800117 	ldw	r2,4(r3)
10002d10:	1c800017 	ldw	r18,0(r3)
10002d14:	21000204 	addi	r4,r4,8
10002d18:	d9012d15 	stw	r4,1204(sp)
10002d1c:	102b883a 	mov	r21,r2
10002d20:	10044916 	blt	r2,zero,10003e48 <___vfprintf_internal_r+0x1698>
10002d24:	dcc12783 	ldbu	r19,1182(sp)
10002d28:	da413215 	stw	r9,1224(sp)
10002d2c:	00800044 	movi	r2,1
10002d30:	9546b03a 	or	r3,r18,r21
10002d34:	48000216 	blt	r9,zero,10002d40 <___vfprintf_internal_r+0x590>
10002d38:	013fdfc4 	movi	r4,-129
10002d3c:	e138703a 	and	fp,fp,r4
10002d40:	1802251e 	bne	r3,zero,100035d8 <___vfprintf_internal_r+0xe28>
10002d44:	48031726 	beq	r9,zero,100039a4 <___vfprintf_internal_r+0x11f4>
10002d48:	10803fcc 	andi	r2,r2,255
10002d4c:	00c00044 	movi	r3,1
10002d50:	10c24526 	beq	r2,r3,10003668 <___vfprintf_internal_r+0xeb8>
10002d54:	00c00084 	movi	r3,2
10002d58:	10c33426 	beq	r2,r3,10003a2c <___vfprintf_internal_r+0x127c>
10002d5c:	d8c10e04 	addi	r3,sp,1080
10002d60:	9008d0fa 	srli	r4,r18,3
10002d64:	a80a977a 	slli	r5,r21,29
10002d68:	a82ad0fa 	srli	r21,r21,3
10002d6c:	948001cc 	andi	r18,r18,7
10002d70:	90800c04 	addi	r2,r18,48
10002d74:	18ffffc4 	addi	r3,r3,-1
10002d78:	2924b03a 	or	r18,r5,r4
10002d7c:	18800005 	stb	r2,0(r3)
10002d80:	9548b03a 	or	r4,r18,r21
10002d84:	203ff61e 	bne	r4,zero,10002d60 <__alt_data_end+0xf8002d60>
10002d88:	e100004c 	andi	r4,fp,1
10002d8c:	d8c13115 	stw	r3,1220(sp)
10002d90:	20039a1e 	bne	r4,zero,10003bfc <___vfprintf_internal_r+0x144c>
10002d94:	d8812817 	ldw	r2,1184(sp)
10002d98:	10e3c83a 	sub	r17,r2,r3
10002d9c:	8805883a 	mov	r2,r17
10002da0:	8a40010e 	bge	r17,r9,10002da8 <___vfprintf_internal_r+0x5f8>
10002da4:	4805883a 	mov	r2,r9
10002da8:	d8812b15 	stw	r2,1196(sp)
10002dac:	d8013415 	stw	zero,1232(sp)
10002db0:	98803fcc 	andi	r2,r19,255
10002db4:	1080201c 	xori	r2,r2,128
10002db8:	10bfe004 	addi	r2,r2,-128
10002dbc:	10000326 	beq	r2,zero,10002dcc <___vfprintf_internal_r+0x61c>
10002dc0:	d8c12b17 	ldw	r3,1196(sp)
10002dc4:	18c00044 	addi	r3,r3,1
10002dc8:	d8c12b15 	stw	r3,1196(sp)
10002dcc:	e0c0008c 	andi	r3,fp,2
10002dd0:	d8c12c15 	stw	r3,1200(sp)
10002dd4:	18000326 	beq	r3,zero,10002de4 <___vfprintf_internal_r+0x634>
10002dd8:	d8c12b17 	ldw	r3,1196(sp)
10002ddc:	18c00084 	addi	r3,r3,2
10002de0:	d8c12b15 	stw	r3,1196(sp)
10002de4:	e0c0210c 	andi	r3,fp,132
10002de8:	d8c13015 	stw	r3,1216(sp)
10002dec:	1801f81e 	bne	r3,zero,100035d0 <___vfprintf_internal_r+0xe20>
10002df0:	d9012e17 	ldw	r4,1208(sp)
10002df4:	d8c12b17 	ldw	r3,1196(sp)
10002df8:	20ebc83a 	sub	r21,r4,r3
10002dfc:	0541f40e 	bge	zero,r21,100035d0 <___vfprintf_internal_r+0xe20>
10002e00:	02400404 	movi	r9,16
10002e04:	d8c12017 	ldw	r3,1152(sp)
10002e08:	d8811f17 	ldw	r2,1148(sp)
10002e0c:	4d45750e 	bge	r9,r21,100043e4 <___vfprintf_internal_r+0x1c34>
10002e10:	01440074 	movhi	r5,4097
10002e14:	29482084 	addi	r5,r5,8322
10002e18:	d9413615 	stw	r5,1240(sp)
10002e1c:	4827883a 	mov	r19,r9
10002e20:	048001c4 	movi	r18,7
10002e24:	00000306 	br	10002e34 <___vfprintf_internal_r+0x684>
10002e28:	ad7ffc04 	addi	r21,r21,-16
10002e2c:	42000204 	addi	r8,r8,8
10002e30:	9d40130e 	bge	r19,r21,10002e80 <___vfprintf_internal_r+0x6d0>
10002e34:	01040074 	movhi	r4,4097
10002e38:	18c00404 	addi	r3,r3,16
10002e3c:	10800044 	addi	r2,r2,1
10002e40:	21082084 	addi	r4,r4,8322
10002e44:	41000015 	stw	r4,0(r8)
10002e48:	44c00115 	stw	r19,4(r8)
10002e4c:	d8c12015 	stw	r3,1152(sp)
10002e50:	d8811f15 	stw	r2,1148(sp)
10002e54:	90bff40e 	bge	r18,r2,10002e28 <__alt_data_end+0xf8002e28>
10002e58:	b809883a 	mov	r4,r23
10002e5c:	b00b883a 	mov	r5,r22
10002e60:	d9811e04 	addi	r6,sp,1144
10002e64:	0009bf00 	call	10009bf0 <__sprint_r>
10002e68:	103f691e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10002e6c:	ad7ffc04 	addi	r21,r21,-16
10002e70:	d8c12017 	ldw	r3,1152(sp)
10002e74:	d8811f17 	ldw	r2,1148(sp)
10002e78:	da000404 	addi	r8,sp,16
10002e7c:	9d7fed16 	blt	r19,r21,10002e34 <__alt_data_end+0xf8002e34>
10002e80:	d9413617 	ldw	r5,1240(sp)
10002e84:	a8c7883a 	add	r3,r21,r3
10002e88:	10800044 	addi	r2,r2,1
10002e8c:	41400015 	stw	r5,0(r8)
10002e90:	45400115 	stw	r21,4(r8)
10002e94:	d8c12015 	stw	r3,1152(sp)
10002e98:	d8811f15 	stw	r2,1148(sp)
10002e9c:	010001c4 	movi	r4,7
10002ea0:	20832b16 	blt	r4,r2,10003b50 <___vfprintf_internal_r+0x13a0>
10002ea4:	d8812787 	ldb	r2,1182(sp)
10002ea8:	42000204 	addi	r8,r8,8
10002eac:	10000c26 	beq	r2,zero,10002ee0 <___vfprintf_internal_r+0x730>
10002eb0:	d8811f17 	ldw	r2,1148(sp)
10002eb4:	d9012784 	addi	r4,sp,1182
10002eb8:	18c00044 	addi	r3,r3,1
10002ebc:	10800044 	addi	r2,r2,1
10002ec0:	41000015 	stw	r4,0(r8)
10002ec4:	01000044 	movi	r4,1
10002ec8:	41000115 	stw	r4,4(r8)
10002ecc:	d8c12015 	stw	r3,1152(sp)
10002ed0:	d8811f15 	stw	r2,1148(sp)
10002ed4:	010001c4 	movi	r4,7
10002ed8:	2082c416 	blt	r4,r2,100039ec <___vfprintf_internal_r+0x123c>
10002edc:	42000204 	addi	r8,r8,8
10002ee0:	d8812c17 	ldw	r2,1200(sp)
10002ee4:	10000c26 	beq	r2,zero,10002f18 <___vfprintf_internal_r+0x768>
10002ee8:	d8811f17 	ldw	r2,1148(sp)
10002eec:	d9012704 	addi	r4,sp,1180
10002ef0:	18c00084 	addi	r3,r3,2
10002ef4:	10800044 	addi	r2,r2,1
10002ef8:	41000015 	stw	r4,0(r8)
10002efc:	01000084 	movi	r4,2
10002f00:	41000115 	stw	r4,4(r8)
10002f04:	d8c12015 	stw	r3,1152(sp)
10002f08:	d8811f15 	stw	r2,1148(sp)
10002f0c:	010001c4 	movi	r4,7
10002f10:	2082be16 	blt	r4,r2,10003a0c <___vfprintf_internal_r+0x125c>
10002f14:	42000204 	addi	r8,r8,8
10002f18:	d9013017 	ldw	r4,1216(sp)
10002f1c:	00802004 	movi	r2,128
10002f20:	20822026 	beq	r4,r2,100037a4 <___vfprintf_internal_r+0xff4>
10002f24:	d9413217 	ldw	r5,1224(sp)
10002f28:	2c67c83a 	sub	r19,r5,r17
10002f2c:	04c0260e 	bge	zero,r19,10002fc8 <___vfprintf_internal_r+0x818>
10002f30:	05400404 	movi	r21,16
10002f34:	d8811f17 	ldw	r2,1148(sp)
10002f38:	acc4720e 	bge	r21,r19,10004104 <___vfprintf_internal_r+0x1954>
10002f3c:	01440074 	movhi	r5,4097
10002f40:	29481c84 	addi	r5,r5,8306
10002f44:	d9412c15 	stw	r5,1200(sp)
10002f48:	048001c4 	movi	r18,7
10002f4c:	00000306 	br	10002f5c <___vfprintf_internal_r+0x7ac>
10002f50:	9cfffc04 	addi	r19,r19,-16
10002f54:	42000204 	addi	r8,r8,8
10002f58:	acc0110e 	bge	r21,r19,10002fa0 <___vfprintf_internal_r+0x7f0>
10002f5c:	18c00404 	addi	r3,r3,16
10002f60:	10800044 	addi	r2,r2,1
10002f64:	45000015 	stw	r20,0(r8)
10002f68:	45400115 	stw	r21,4(r8)
10002f6c:	d8c12015 	stw	r3,1152(sp)
10002f70:	d8811f15 	stw	r2,1148(sp)
10002f74:	90bff60e 	bge	r18,r2,10002f50 <__alt_data_end+0xf8002f50>
10002f78:	b809883a 	mov	r4,r23
10002f7c:	b00b883a 	mov	r5,r22
10002f80:	d9811e04 	addi	r6,sp,1144
10002f84:	0009bf00 	call	10009bf0 <__sprint_r>
10002f88:	103f211e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10002f8c:	9cfffc04 	addi	r19,r19,-16
10002f90:	d8c12017 	ldw	r3,1152(sp)
10002f94:	d8811f17 	ldw	r2,1148(sp)
10002f98:	da000404 	addi	r8,sp,16
10002f9c:	acffef16 	blt	r21,r19,10002f5c <__alt_data_end+0xf8002f5c>
10002fa0:	d9012c17 	ldw	r4,1200(sp)
10002fa4:	1cc7883a 	add	r3,r3,r19
10002fa8:	10800044 	addi	r2,r2,1
10002fac:	41000015 	stw	r4,0(r8)
10002fb0:	44c00115 	stw	r19,4(r8)
10002fb4:	d8c12015 	stw	r3,1152(sp)
10002fb8:	d8811f15 	stw	r2,1148(sp)
10002fbc:	010001c4 	movi	r4,7
10002fc0:	20828216 	blt	r4,r2,100039cc <___vfprintf_internal_r+0x121c>
10002fc4:	42000204 	addi	r8,r8,8
10002fc8:	e080400c 	andi	r2,fp,256
10002fcc:	1001ac1e 	bne	r2,zero,10003680 <___vfprintf_internal_r+0xed0>
10002fd0:	d8811f17 	ldw	r2,1148(sp)
10002fd4:	d9413117 	ldw	r5,1220(sp)
10002fd8:	1c47883a 	add	r3,r3,r17
10002fdc:	10800044 	addi	r2,r2,1
10002fe0:	41400015 	stw	r5,0(r8)
10002fe4:	44400115 	stw	r17,4(r8)
10002fe8:	d8c12015 	stw	r3,1152(sp)
10002fec:	d8811f15 	stw	r2,1148(sp)
10002ff0:	010001c4 	movi	r4,7
10002ff4:	20825d16 	blt	r4,r2,1000396c <___vfprintf_internal_r+0x11bc>
10002ff8:	42000204 	addi	r8,r8,8
10002ffc:	e080010c 	andi	r2,fp,4
10003000:	10003126 	beq	r2,zero,100030c8 <___vfprintf_internal_r+0x918>
10003004:	d8812e17 	ldw	r2,1208(sp)
10003008:	d9012b17 	ldw	r4,1196(sp)
1000300c:	1121c83a 	sub	r16,r2,r4
10003010:	04002d0e 	bge	zero,r16,100030c8 <___vfprintf_internal_r+0x918>
10003014:	04400404 	movi	r17,16
10003018:	d8811f17 	ldw	r2,1148(sp)
1000301c:	8c05340e 	bge	r17,r16,100044f0 <___vfprintf_internal_r+0x1d40>
10003020:	01040074 	movhi	r4,4097
10003024:	21082084 	addi	r4,r4,8322
10003028:	d9013615 	stw	r4,1240(sp)
1000302c:	048001c4 	movi	r18,7
10003030:	00000306 	br	10003040 <___vfprintf_internal_r+0x890>
10003034:	843ffc04 	addi	r16,r16,-16
10003038:	42000204 	addi	r8,r8,8
1000303c:	8c00130e 	bge	r17,r16,1000308c <___vfprintf_internal_r+0x8dc>
10003040:	01440074 	movhi	r5,4097
10003044:	18c00404 	addi	r3,r3,16
10003048:	10800044 	addi	r2,r2,1
1000304c:	29482084 	addi	r5,r5,8322
10003050:	41400015 	stw	r5,0(r8)
10003054:	44400115 	stw	r17,4(r8)
10003058:	d8c12015 	stw	r3,1152(sp)
1000305c:	d8811f15 	stw	r2,1148(sp)
10003060:	90bff40e 	bge	r18,r2,10003034 <__alt_data_end+0xf8003034>
10003064:	b809883a 	mov	r4,r23
10003068:	b00b883a 	mov	r5,r22
1000306c:	d9811e04 	addi	r6,sp,1144
10003070:	0009bf00 	call	10009bf0 <__sprint_r>
10003074:	103ee61e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10003078:	843ffc04 	addi	r16,r16,-16
1000307c:	d8c12017 	ldw	r3,1152(sp)
10003080:	d8811f17 	ldw	r2,1148(sp)
10003084:	da000404 	addi	r8,sp,16
10003088:	8c3fed16 	blt	r17,r16,10003040 <__alt_data_end+0xf8003040>
1000308c:	d9013617 	ldw	r4,1240(sp)
10003090:	1c07883a 	add	r3,r3,r16
10003094:	10800044 	addi	r2,r2,1
10003098:	41000015 	stw	r4,0(r8)
1000309c:	44000115 	stw	r16,4(r8)
100030a0:	d8c12015 	stw	r3,1152(sp)
100030a4:	d8811f15 	stw	r2,1148(sp)
100030a8:	010001c4 	movi	r4,7
100030ac:	2080060e 	bge	r4,r2,100030c8 <___vfprintf_internal_r+0x918>
100030b0:	b809883a 	mov	r4,r23
100030b4:	b00b883a 	mov	r5,r22
100030b8:	d9811e04 	addi	r6,sp,1144
100030bc:	0009bf00 	call	10009bf0 <__sprint_r>
100030c0:	103ed31e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
100030c4:	d8c12017 	ldw	r3,1152(sp)
100030c8:	df012b17 	ldw	fp,1196(sp)
100030cc:	d9412e17 	ldw	r5,1208(sp)
100030d0:	e140010e 	bge	fp,r5,100030d8 <___vfprintf_internal_r+0x928>
100030d4:	2839883a 	mov	fp,r5
100030d8:	d8812f17 	ldw	r2,1212(sp)
100030dc:	1705883a 	add	r2,r2,fp
100030e0:	d8812f15 	stw	r2,1212(sp)
100030e4:	1802291e 	bne	r3,zero,1000398c <___vfprintf_internal_r+0x11dc>
100030e8:	d8c12a17 	ldw	r3,1192(sp)
100030ec:	d8011f15 	stw	zero,1148(sp)
100030f0:	da000404 	addi	r8,sp,16
100030f4:	18800007 	ldb	r2,0(r3)
100030f8:	103ded1e 	bne	r2,zero,100028b0 <__alt_data_end+0xf80028b0>
100030fc:	dc012a17 	ldw	r16,1192(sp)
10003100:	003e0506 	br	10002918 <__alt_data_end+0xf8002918>
10003104:	d9012d17 	ldw	r4,1204(sp)
10003108:	d9412d17 	ldw	r5,1204(sp)
1000310c:	da012a17 	ldw	r8,1192(sp)
10003110:	21000017 	ldw	r4,0(r4)
10003114:	29400117 	ldw	r5,4(r5)
10003118:	df012a15 	stw	fp,1192(sp)
1000311c:	9839883a 	mov	fp,r19
10003120:	dcc12b03 	ldbu	r19,1196(sp)
10003124:	d9013715 	stw	r4,1244(sp)
10003128:	d9413915 	stw	r5,1252(sp)
1000312c:	da013f15 	stw	r8,1276(sp)
10003130:	da413e15 	stw	r9,1272(sp)
10003134:	dcc12785 	stb	r19,1182(sp)
10003138:	000984c0 	call	1000984c <__fpclassifyd>
1000313c:	d8c12d17 	ldw	r3,1204(sp)
10003140:	04400044 	movi	r17,1
10003144:	da013f17 	ldw	r8,1276(sp)
10003148:	1c800204 	addi	r18,r3,8
1000314c:	da413e17 	ldw	r9,1272(sp)
10003150:	d9013717 	ldw	r4,1244(sp)
10003154:	d9413917 	ldw	r5,1252(sp)
10003158:	1443451e 	bne	r2,r17,10003e70 <___vfprintf_internal_r+0x16c0>
1000315c:	000d883a 	mov	r6,zero
10003160:	000f883a 	mov	r7,zero
10003164:	000dbd80 	call	1000dbd8 <__ledf2>
10003168:	da013f17 	ldw	r8,1276(sp)
1000316c:	1004fe16 	blt	r2,zero,10004568 <___vfprintf_internal_r+0x1db8>
10003170:	dcc12783 	ldbu	r19,1182(sp)
10003174:	008011c4 	movi	r2,71
10003178:	14045d0e 	bge	r2,r16,100042f0 <___vfprintf_internal_r+0x1b40>
1000317c:	01440074 	movhi	r5,4097
10003180:	29480d04 	addi	r5,r5,8244
10003184:	d9413115 	stw	r5,1220(sp)
10003188:	00c000c4 	movi	r3,3
1000318c:	00bfdfc4 	movi	r2,-129
10003190:	d8c12b15 	stw	r3,1196(sp)
10003194:	e0b8703a 	and	fp,fp,r2
10003198:	dc812d15 	stw	r18,1204(sp)
1000319c:	1823883a 	mov	r17,r3
100031a0:	d8013215 	stw	zero,1224(sp)
100031a4:	d8013415 	stw	zero,1232(sp)
100031a8:	003f0106 	br	10002db0 <__alt_data_end+0xf8002db0>
100031ac:	9cc00214 	ori	r19,r19,8
100031b0:	e005883a 	mov	r2,fp
100031b4:	e4000007 	ldb	r16,0(fp)
100031b8:	003de506 	br	10002950 <__alt_data_end+0xf8002950>
100031bc:	da012a17 	ldw	r8,1192(sp)
100031c0:	df012a15 	stw	fp,1192(sp)
100031c4:	9f000414 	ori	fp,r19,16
100031c8:	e0c0080c 	andi	r3,fp,32
100031cc:	d8812d17 	ldw	r2,1204(sp)
100031d0:	18007626 	beq	r3,zero,100033ac <___vfprintf_internal_r+0xbfc>
100031d4:	d9412d17 	ldw	r5,1204(sp)
100031d8:	14800017 	ldw	r18,0(r2)
100031dc:	15400117 	ldw	r21,4(r2)
100031e0:	29400204 	addi	r5,r5,8
100031e4:	d9412d15 	stw	r5,1204(sp)
100031e8:	0005883a 	mov	r2,zero
100031ec:	9546b03a 	or	r3,r18,r21
100031f0:	d8012785 	stb	zero,1182(sp)
100031f4:	da413215 	stw	r9,1224(sp)
100031f8:	0027883a 	mov	r19,zero
100031fc:	003ecd06 	br	10002d34 <__alt_data_end+0xf8002d34>
10003200:	da012a17 	ldw	r8,1192(sp)
10003204:	df012a15 	stw	fp,1192(sp)
10003208:	9f000414 	ori	fp,r19,16
1000320c:	e0c0080c 	andi	r3,fp,32
10003210:	d8812d17 	ldw	r2,1204(sp)
10003214:	18002c26 	beq	r3,zero,100032c8 <___vfprintf_internal_r+0xb18>
10003218:	d9012d17 	ldw	r4,1204(sp)
1000321c:	14800017 	ldw	r18,0(r2)
10003220:	15400117 	ldw	r21,4(r2)
10003224:	21000204 	addi	r4,r4,8
10003228:	d9012d15 	stw	r4,1204(sp)
1000322c:	00800044 	movi	r2,1
10003230:	9546b03a 	or	r3,r18,r21
10003234:	003fee06 	br	100031f0 <__alt_data_end+0xf80031f0>
10003238:	da012a17 	ldw	r8,1192(sp)
1000323c:	df012a15 	stw	fp,1192(sp)
10003240:	9839883a 	mov	fp,r19
10003244:	dcc12b03 	ldbu	r19,1196(sp)
10003248:	01440074 	movhi	r5,4097
1000324c:	29481004 	addi	r5,r5,8256
10003250:	dcc12785 	stb	r19,1182(sp)
10003254:	d9413b15 	stw	r5,1260(sp)
10003258:	e0c0080c 	andi	r3,fp,32
1000325c:	d8812d17 	ldw	r2,1204(sp)
10003260:	18002e26 	beq	r3,zero,1000331c <___vfprintf_internal_r+0xb6c>
10003264:	d9412d17 	ldw	r5,1204(sp)
10003268:	14800017 	ldw	r18,0(r2)
1000326c:	15400117 	ldw	r21,4(r2)
10003270:	29400204 	addi	r5,r5,8
10003274:	d9412d15 	stw	r5,1204(sp)
10003278:	e080004c 	andi	r2,fp,1
1000327c:	10025c26 	beq	r2,zero,10003bf0 <___vfprintf_internal_r+0x1440>
10003280:	9546b03a 	or	r3,r18,r21
10003284:	18038f26 	beq	r3,zero,100040c4 <___vfprintf_internal_r+0x1914>
10003288:	00800c04 	movi	r2,48
1000328c:	d8812705 	stb	r2,1180(sp)
10003290:	dc012745 	stb	r16,1181(sp)
10003294:	e7000094 	ori	fp,fp,2
10003298:	00800084 	movi	r2,2
1000329c:	003fd406 	br	100031f0 <__alt_data_end+0xf80031f0>
100032a0:	9cc00814 	ori	r19,r19,32
100032a4:	e005883a 	mov	r2,fp
100032a8:	e4000007 	ldb	r16,0(fp)
100032ac:	003da806 	br	10002950 <__alt_data_end+0xf8002950>
100032b0:	da012a17 	ldw	r8,1192(sp)
100032b4:	df012a15 	stw	fp,1192(sp)
100032b8:	9839883a 	mov	fp,r19
100032bc:	e0c0080c 	andi	r3,fp,32
100032c0:	d8812d17 	ldw	r2,1204(sp)
100032c4:	183fd41e 	bne	r3,zero,10003218 <__alt_data_end+0xf8003218>
100032c8:	e0c0040c 	andi	r3,fp,16
100032cc:	18035f26 	beq	r3,zero,1000404c <___vfprintf_internal_r+0x189c>
100032d0:	d9412d17 	ldw	r5,1204(sp)
100032d4:	14800017 	ldw	r18,0(r2)
100032d8:	002b883a 	mov	r21,zero
100032dc:	29400104 	addi	r5,r5,4
100032e0:	d9412d15 	stw	r5,1204(sp)
100032e4:	00800044 	movi	r2,1
100032e8:	9007883a 	mov	r3,r18
100032ec:	003fc006 	br	100031f0 <__alt_data_end+0xf80031f0>
100032f0:	da012a17 	ldw	r8,1192(sp)
100032f4:	df012a15 	stw	fp,1192(sp)
100032f8:	9839883a 	mov	fp,r19
100032fc:	dcc12b03 	ldbu	r19,1196(sp)
10003300:	01040074 	movhi	r4,4097
10003304:	21081504 	addi	r4,r4,8276
10003308:	d9013b15 	stw	r4,1260(sp)
1000330c:	dcc12785 	stb	r19,1182(sp)
10003310:	e0c0080c 	andi	r3,fp,32
10003314:	d8812d17 	ldw	r2,1204(sp)
10003318:	183fd21e 	bne	r3,zero,10003264 <__alt_data_end+0xf8003264>
1000331c:	e0c0040c 	andi	r3,fp,16
10003320:	18035426 	beq	r3,zero,10004074 <___vfprintf_internal_r+0x18c4>
10003324:	d8c12d17 	ldw	r3,1204(sp)
10003328:	14800017 	ldw	r18,0(r2)
1000332c:	002b883a 	mov	r21,zero
10003330:	18c00104 	addi	r3,r3,4
10003334:	d8c12d15 	stw	r3,1204(sp)
10003338:	003fcf06 	br	10003278 <__alt_data_end+0xf8003278>
1000333c:	e4000007 	ldb	r16,0(fp)
10003340:	00801b04 	movi	r2,108
10003344:	8083f726 	beq	r16,r2,10004324 <___vfprintf_internal_r+0x1b74>
10003348:	9cc00414 	ori	r19,r19,16
1000334c:	e005883a 	mov	r2,fp
10003350:	003d7f06 	br	10002950 <__alt_data_end+0xf8002950>
10003354:	da012a17 	ldw	r8,1192(sp)
10003358:	df012a15 	stw	fp,1192(sp)
1000335c:	9839883a 	mov	fp,r19
10003360:	dcc12b03 	ldbu	r19,1196(sp)
10003364:	e080080c 	andi	r2,fp,32
10003368:	dcc12785 	stb	r19,1182(sp)
1000336c:	10032226 	beq	r2,zero,10003ff8 <___vfprintf_internal_r+0x1848>
10003370:	d9412d17 	ldw	r5,1204(sp)
10003374:	d9012f17 	ldw	r4,1212(sp)
10003378:	28800017 	ldw	r2,0(r5)
1000337c:	2007d7fa 	srai	r3,r4,31
10003380:	29400104 	addi	r5,r5,4
10003384:	d9412d15 	stw	r5,1204(sp)
10003388:	11000015 	stw	r4,0(r2)
1000338c:	10c00115 	stw	r3,4(r2)
10003390:	003d4406 	br	100028a4 <__alt_data_end+0xf80028a4>
10003394:	da012a17 	ldw	r8,1192(sp)
10003398:	df012a15 	stw	fp,1192(sp)
1000339c:	9839883a 	mov	fp,r19
100033a0:	e0c0080c 	andi	r3,fp,32
100033a4:	d8812d17 	ldw	r2,1204(sp)
100033a8:	183f8a1e 	bne	r3,zero,100031d4 <__alt_data_end+0xf80031d4>
100033ac:	e0c0040c 	andi	r3,fp,16
100033b0:	18031c26 	beq	r3,zero,10004024 <___vfprintf_internal_r+0x1874>
100033b4:	14800017 	ldw	r18,0(r2)
100033b8:	d8812d17 	ldw	r2,1204(sp)
100033bc:	002b883a 	mov	r21,zero
100033c0:	9007883a 	mov	r3,r18
100033c4:	10800104 	addi	r2,r2,4
100033c8:	d8812d15 	stw	r2,1204(sp)
100033cc:	0005883a 	mov	r2,zero
100033d0:	003f8706 	br	100031f0 <__alt_data_end+0xf80031f0>
100033d4:	d9412d17 	ldw	r5,1204(sp)
100033d8:	00800c04 	movi	r2,48
100033dc:	d8812705 	stb	r2,1180(sp)
100033e0:	2c800017 	ldw	r18,0(r5)
100033e4:	00801e04 	movi	r2,120
100033e8:	d8812745 	stb	r2,1181(sp)
100033ec:	00840074 	movhi	r2,4097
100033f0:	10881504 	addi	r2,r2,8276
100033f4:	29400104 	addi	r5,r5,4
100033f8:	da012a17 	ldw	r8,1192(sp)
100033fc:	d8813b15 	stw	r2,1260(sp)
10003400:	df012a15 	stw	fp,1192(sp)
10003404:	002b883a 	mov	r21,zero
10003408:	9f000094 	ori	fp,r19,2
1000340c:	d9412d15 	stw	r5,1204(sp)
10003410:	00800084 	movi	r2,2
10003414:	04001e04 	movi	r16,120
10003418:	9007883a 	mov	r3,r18
1000341c:	003f7406 	br	100031f0 <__alt_data_end+0xf80031f0>
10003420:	da012a17 	ldw	r8,1192(sp)
10003424:	df012a15 	stw	fp,1192(sp)
10003428:	9839883a 	mov	fp,r19
1000342c:	dcc12b03 	ldbu	r19,1196(sp)
10003430:	e080080c 	andi	r2,fp,32
10003434:	d8c12d17 	ldw	r3,1204(sp)
10003438:	dcc12785 	stb	r19,1182(sp)
1000343c:	103e321e 	bne	r2,zero,10002d08 <__alt_data_end+0xf8002d08>
10003440:	e080040c 	andi	r2,fp,16
10003444:	10031326 	beq	r2,zero,10004094 <___vfprintf_internal_r+0x18e4>
10003448:	1c800017 	ldw	r18,0(r3)
1000344c:	d9412d17 	ldw	r5,1204(sp)
10003450:	902bd7fa 	srai	r21,r18,31
10003454:	29400104 	addi	r5,r5,4
10003458:	d9412d15 	stw	r5,1204(sp)
1000345c:	a805883a 	mov	r2,r21
10003460:	003e2f06 	br	10002d20 <__alt_data_end+0xf8002d20>
10003464:	9cc01014 	ori	r19,r19,64
10003468:	e005883a 	mov	r2,fp
1000346c:	e4000007 	ldb	r16,0(fp)
10003470:	003d3706 	br	10002950 <__alt_data_end+0xf8002950>
10003474:	d8c12d17 	ldw	r3,1204(sp)
10003478:	d9012d17 	ldw	r4,1204(sp)
1000347c:	da012a17 	ldw	r8,1192(sp)
10003480:	18800017 	ldw	r2,0(r3)
10003484:	21000104 	addi	r4,r4,4
10003488:	00c00044 	movi	r3,1
1000348c:	df012a15 	stw	fp,1192(sp)
10003490:	d8c12b15 	stw	r3,1196(sp)
10003494:	9839883a 	mov	fp,r19
10003498:	d8012785 	stb	zero,1182(sp)
1000349c:	d8810405 	stb	r2,1040(sp)
100034a0:	d9012d15 	stw	r4,1204(sp)
100034a4:	1823883a 	mov	r17,r3
100034a8:	d8c10404 	addi	r3,sp,1040
100034ac:	d8013215 	stw	zero,1224(sp)
100034b0:	d8013415 	stw	zero,1232(sp)
100034b4:	d8c13115 	stw	r3,1220(sp)
100034b8:	0005883a 	mov	r2,zero
100034bc:	003e4306 	br	10002dcc <__alt_data_end+0xf8002dcc>
100034c0:	d8812b07 	ldb	r2,1196(sp)
100034c4:	1002fc1e 	bne	r2,zero,100040b8 <___vfprintf_internal_r+0x1908>
100034c8:	00c00804 	movi	r3,32
100034cc:	d8c12b05 	stb	r3,1196(sp)
100034d0:	e005883a 	mov	r2,fp
100034d4:	e4000007 	ldb	r16,0(fp)
100034d8:	003d1d06 	br	10002950 <__alt_data_end+0xf8002950>
100034dc:	9cc00054 	ori	r19,r19,1
100034e0:	e005883a 	mov	r2,fp
100034e4:	e4000007 	ldb	r16,0(fp)
100034e8:	003d1906 	br	10002950 <__alt_data_end+0xf8002950>
100034ec:	d9012d17 	ldw	r4,1204(sp)
100034f0:	d9412d17 	ldw	r5,1204(sp)
100034f4:	21000017 	ldw	r4,0(r4)
100034f8:	28c00104 	addi	r3,r5,4
100034fc:	d9012e15 	stw	r4,1208(sp)
10003500:	20038c16 	blt	r4,zero,10004334 <___vfprintf_internal_r+0x1b84>
10003504:	d8c12d15 	stw	r3,1204(sp)
10003508:	e005883a 	mov	r2,fp
1000350c:	e4000007 	ldb	r16,0(fp)
10003510:	003d0f06 	br	10002950 <__alt_data_end+0xf8002950>
10003514:	00c00ac4 	movi	r3,43
10003518:	d8c12b05 	stb	r3,1196(sp)
1000351c:	e005883a 	mov	r2,fp
10003520:	e4000007 	ldb	r16,0(fp)
10003524:	003d0a06 	br	10002950 <__alt_data_end+0xf8002950>
10003528:	d8c12d17 	ldw	r3,1204(sp)
1000352c:	d9012d17 	ldw	r4,1204(sp)
10003530:	da012a17 	ldw	r8,1192(sp)
10003534:	18c00017 	ldw	r3,0(r3)
10003538:	df012a15 	stw	fp,1192(sp)
1000353c:	d8012785 	stb	zero,1182(sp)
10003540:	d8c13115 	stw	r3,1220(sp)
10003544:	9839883a 	mov	fp,r19
10003548:	24800104 	addi	r18,r4,4
1000354c:	1803f726 	beq	r3,zero,1000452c <___vfprintf_internal_r+0x1d7c>
10003550:	d9013117 	ldw	r4,1220(sp)
10003554:	48038916 	blt	r9,zero,1000437c <___vfprintf_internal_r+0x1bcc>
10003558:	480d883a 	mov	r6,r9
1000355c:	000b883a 	mov	r5,zero
10003560:	da013f15 	stw	r8,1276(sp)
10003564:	da413e15 	stw	r9,1272(sp)
10003568:	0007dc40 	call	10007dc4 <memchr>
1000356c:	da013f17 	ldw	r8,1276(sp)
10003570:	da413e17 	ldw	r9,1272(sp)
10003574:	10045926 	beq	r2,zero,100046dc <___vfprintf_internal_r+0x1f2c>
10003578:	d8c13117 	ldw	r3,1220(sp)
1000357c:	10e3c83a 	sub	r17,r2,r3
10003580:	4c433516 	blt	r9,r17,10004258 <___vfprintf_internal_r+0x1aa8>
10003584:	8805883a 	mov	r2,r17
10003588:	88038116 	blt	r17,zero,10004390 <___vfprintf_internal_r+0x1be0>
1000358c:	dcc12783 	ldbu	r19,1182(sp)
10003590:	d8812b15 	stw	r2,1196(sp)
10003594:	dc812d15 	stw	r18,1204(sp)
10003598:	d8013215 	stw	zero,1224(sp)
1000359c:	d8013415 	stw	zero,1232(sp)
100035a0:	003e0306 	br	10002db0 <__alt_data_end+0xf8002db0>
100035a4:	da012a17 	ldw	r8,1192(sp)
100035a8:	df012a15 	stw	fp,1192(sp)
100035ac:	9839883a 	mov	fp,r19
100035b0:	dcc12b03 	ldbu	r19,1196(sp)
100035b4:	dcc12785 	stb	r19,1182(sp)
100035b8:	803d8f26 	beq	r16,zero,10002bf8 <__alt_data_end+0xf8002bf8>
100035bc:	00c00044 	movi	r3,1
100035c0:	d8c12b15 	stw	r3,1196(sp)
100035c4:	dc010405 	stb	r16,1040(sp)
100035c8:	d8012785 	stb	zero,1182(sp)
100035cc:	003fb506 	br	100034a4 <__alt_data_end+0xf80034a4>
100035d0:	d8c12017 	ldw	r3,1152(sp)
100035d4:	003e3506 	br	10002eac <__alt_data_end+0xf8002eac>
100035d8:	10803fcc 	andi	r2,r2,255
100035dc:	00c00044 	movi	r3,1
100035e0:	10fddc1e 	bne	r2,r3,10002d54 <__alt_data_end+0xf8002d54>
100035e4:	a800021e 	bne	r21,zero,100035f0 <___vfprintf_internal_r+0xe40>
100035e8:	00800244 	movi	r2,9
100035ec:	14801e2e 	bgeu	r2,r18,10003668 <___vfprintf_internal_r+0xeb8>
100035f0:	dc012b15 	stw	r16,1196(sp)
100035f4:	dc410e04 	addi	r17,sp,1080
100035f8:	9021883a 	mov	r16,r18
100035fc:	da012c15 	stw	r8,1200(sp)
10003600:	a825883a 	mov	r18,r21
10003604:	482b883a 	mov	r21,r9
10003608:	8009883a 	mov	r4,r16
1000360c:	900b883a 	mov	r5,r18
10003610:	01800284 	movi	r6,10
10003614:	000f883a 	mov	r7,zero
10003618:	000c0e80 	call	1000c0e8 <__umoddi3>
1000361c:	10800c04 	addi	r2,r2,48
10003620:	8c7fffc4 	addi	r17,r17,-1
10003624:	8009883a 	mov	r4,r16
10003628:	900b883a 	mov	r5,r18
1000362c:	01800284 	movi	r6,10
10003630:	000f883a 	mov	r7,zero
10003634:	88800005 	stb	r2,0(r17)
10003638:	000baa80 	call	1000baa8 <__udivdi3>
1000363c:	1021883a 	mov	r16,r2
10003640:	10c4b03a 	or	r2,r2,r3
10003644:	1825883a 	mov	r18,r3
10003648:	103fef1e 	bne	r2,zero,10003608 <__alt_data_end+0xf8003608>
1000364c:	d9012817 	ldw	r4,1184(sp)
10003650:	dc413115 	stw	r17,1220(sp)
10003654:	dc012b17 	ldw	r16,1196(sp)
10003658:	da012c17 	ldw	r8,1200(sp)
1000365c:	a813883a 	mov	r9,r21
10003660:	2463c83a 	sub	r17,r4,r17
10003664:	003dcd06 	br	10002d9c <__alt_data_end+0xf8002d9c>
10003668:	94800c04 	addi	r18,r18,48
1000366c:	d8c10dc4 	addi	r3,sp,1079
10003670:	dc810dc5 	stb	r18,1079(sp)
10003674:	dc413c17 	ldw	r17,1264(sp)
10003678:	d8c13115 	stw	r3,1220(sp)
1000367c:	003dc706 	br	10002d9c <__alt_data_end+0xf8002d9c>
10003680:	00801944 	movi	r2,101
10003684:	1400720e 	bge	r2,r16,10003850 <___vfprintf_internal_r+0x10a0>
10003688:	d9013717 	ldw	r4,1244(sp)
1000368c:	d9413917 	ldw	r5,1252(sp)
10003690:	000d883a 	mov	r6,zero
10003694:	000f883a 	mov	r7,zero
10003698:	d8c13d15 	stw	r3,1268(sp)
1000369c:	da013f15 	stw	r8,1276(sp)
100036a0:	000da740 	call	1000da74 <__eqdf2>
100036a4:	d8c13d17 	ldw	r3,1268(sp)
100036a8:	da013f17 	ldw	r8,1276(sp)
100036ac:	1000f41e 	bne	r2,zero,10003a80 <___vfprintf_internal_r+0x12d0>
100036b0:	d8811f17 	ldw	r2,1148(sp)
100036b4:	01040074 	movhi	r4,4097
100036b8:	21081c04 	addi	r4,r4,8304
100036bc:	18c00044 	addi	r3,r3,1
100036c0:	10800044 	addi	r2,r2,1
100036c4:	41000015 	stw	r4,0(r8)
100036c8:	01000044 	movi	r4,1
100036cc:	41000115 	stw	r4,4(r8)
100036d0:	d8c12015 	stw	r3,1152(sp)
100036d4:	d8811f15 	stw	r2,1148(sp)
100036d8:	010001c4 	movi	r4,7
100036dc:	20828d16 	blt	r4,r2,10004114 <___vfprintf_internal_r+0x1964>
100036e0:	42000204 	addi	r8,r8,8
100036e4:	d8812617 	ldw	r2,1176(sp)
100036e8:	d9413317 	ldw	r5,1228(sp)
100036ec:	11400216 	blt	r2,r5,100036f8 <___vfprintf_internal_r+0xf48>
100036f0:	e080004c 	andi	r2,fp,1
100036f4:	103e4126 	beq	r2,zero,10002ffc <__alt_data_end+0xf8002ffc>
100036f8:	d8813817 	ldw	r2,1248(sp)
100036fc:	d9013517 	ldw	r4,1236(sp)
10003700:	d9413817 	ldw	r5,1248(sp)
10003704:	1887883a 	add	r3,r3,r2
10003708:	d8811f17 	ldw	r2,1148(sp)
1000370c:	41000015 	stw	r4,0(r8)
10003710:	41400115 	stw	r5,4(r8)
10003714:	10800044 	addi	r2,r2,1
10003718:	d8c12015 	stw	r3,1152(sp)
1000371c:	d8811f15 	stw	r2,1148(sp)
10003720:	010001c4 	movi	r4,7
10003724:	20830916 	blt	r4,r2,1000434c <___vfprintf_internal_r+0x1b9c>
10003728:	42000204 	addi	r8,r8,8
1000372c:	d8813317 	ldw	r2,1228(sp)
10003730:	143fffc4 	addi	r16,r2,-1
10003734:	043e310e 	bge	zero,r16,10002ffc <__alt_data_end+0xf8002ffc>
10003738:	04400404 	movi	r17,16
1000373c:	d8811f17 	ldw	r2,1148(sp)
10003740:	8c007e0e 	bge	r17,r16,1000393c <___vfprintf_internal_r+0x118c>
10003744:	01440074 	movhi	r5,4097
10003748:	29481c84 	addi	r5,r5,8306
1000374c:	d9412c15 	stw	r5,1200(sp)
10003750:	04c001c4 	movi	r19,7
10003754:	00000306 	br	10003764 <___vfprintf_internal_r+0xfb4>
10003758:	42000204 	addi	r8,r8,8
1000375c:	843ffc04 	addi	r16,r16,-16
10003760:	8c00790e 	bge	r17,r16,10003948 <___vfprintf_internal_r+0x1198>
10003764:	18c00404 	addi	r3,r3,16
10003768:	10800044 	addi	r2,r2,1
1000376c:	45000015 	stw	r20,0(r8)
10003770:	44400115 	stw	r17,4(r8)
10003774:	d8c12015 	stw	r3,1152(sp)
10003778:	d8811f15 	stw	r2,1148(sp)
1000377c:	98bff60e 	bge	r19,r2,10003758 <__alt_data_end+0xf8003758>
10003780:	b809883a 	mov	r4,r23
10003784:	b00b883a 	mov	r5,r22
10003788:	d9811e04 	addi	r6,sp,1144
1000378c:	0009bf00 	call	10009bf0 <__sprint_r>
10003790:	103d1f1e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10003794:	d8c12017 	ldw	r3,1152(sp)
10003798:	d8811f17 	ldw	r2,1148(sp)
1000379c:	da000404 	addi	r8,sp,16
100037a0:	003fee06 	br	1000375c <__alt_data_end+0xf800375c>
100037a4:	d9412e17 	ldw	r5,1208(sp)
100037a8:	d8812b17 	ldw	r2,1196(sp)
100037ac:	28a7c83a 	sub	r19,r5,r2
100037b0:	04fddc0e 	bge	zero,r19,10002f24 <__alt_data_end+0xf8002f24>
100037b4:	05400404 	movi	r21,16
100037b8:	d8811f17 	ldw	r2,1148(sp)
100037bc:	acc3870e 	bge	r21,r19,100045dc <___vfprintf_internal_r+0x1e2c>
100037c0:	01440074 	movhi	r5,4097
100037c4:	29481c84 	addi	r5,r5,8306
100037c8:	d9412c15 	stw	r5,1200(sp)
100037cc:	048001c4 	movi	r18,7
100037d0:	00000306 	br	100037e0 <___vfprintf_internal_r+0x1030>
100037d4:	9cfffc04 	addi	r19,r19,-16
100037d8:	42000204 	addi	r8,r8,8
100037dc:	acc0110e 	bge	r21,r19,10003824 <___vfprintf_internal_r+0x1074>
100037e0:	18c00404 	addi	r3,r3,16
100037e4:	10800044 	addi	r2,r2,1
100037e8:	45000015 	stw	r20,0(r8)
100037ec:	45400115 	stw	r21,4(r8)
100037f0:	d8c12015 	stw	r3,1152(sp)
100037f4:	d8811f15 	stw	r2,1148(sp)
100037f8:	90bff60e 	bge	r18,r2,100037d4 <__alt_data_end+0xf80037d4>
100037fc:	b809883a 	mov	r4,r23
10003800:	b00b883a 	mov	r5,r22
10003804:	d9811e04 	addi	r6,sp,1144
10003808:	0009bf00 	call	10009bf0 <__sprint_r>
1000380c:	103d001e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10003810:	9cfffc04 	addi	r19,r19,-16
10003814:	d8c12017 	ldw	r3,1152(sp)
10003818:	d8811f17 	ldw	r2,1148(sp)
1000381c:	da000404 	addi	r8,sp,16
10003820:	acffef16 	blt	r21,r19,100037e0 <__alt_data_end+0xf80037e0>
10003824:	d9012c17 	ldw	r4,1200(sp)
10003828:	1cc7883a 	add	r3,r3,r19
1000382c:	10800044 	addi	r2,r2,1
10003830:	41000015 	stw	r4,0(r8)
10003834:	44c00115 	stw	r19,4(r8)
10003838:	d8c12015 	stw	r3,1152(sp)
1000383c:	d8811f15 	stw	r2,1148(sp)
10003840:	010001c4 	movi	r4,7
10003844:	20817816 	blt	r4,r2,10003e28 <___vfprintf_internal_r+0x1678>
10003848:	42000204 	addi	r8,r8,8
1000384c:	003db506 	br	10002f24 <__alt_data_end+0xf8002f24>
10003850:	d9413317 	ldw	r5,1228(sp)
10003854:	00800044 	movi	r2,1
10003858:	18c00044 	addi	r3,r3,1
1000385c:	11413e0e 	bge	r2,r5,10003d58 <___vfprintf_internal_r+0x15a8>
10003860:	dc011f17 	ldw	r16,1148(sp)
10003864:	d8813117 	ldw	r2,1220(sp)
10003868:	d8c12015 	stw	r3,1152(sp)
1000386c:	84000044 	addi	r16,r16,1
10003870:	40800015 	stw	r2,0(r8)
10003874:	00800044 	movi	r2,1
10003878:	40800115 	stw	r2,4(r8)
1000387c:	dc011f15 	stw	r16,1148(sp)
10003880:	008001c4 	movi	r2,7
10003884:	14015616 	blt	r2,r16,10003de0 <___vfprintf_internal_r+0x1630>
10003888:	42000204 	addi	r8,r8,8
1000388c:	d9013817 	ldw	r4,1248(sp)
10003890:	d9413517 	ldw	r5,1236(sp)
10003894:	84000044 	addi	r16,r16,1
10003898:	1907883a 	add	r3,r3,r4
1000389c:	41400015 	stw	r5,0(r8)
100038a0:	41000115 	stw	r4,4(r8)
100038a4:	d8c12015 	stw	r3,1152(sp)
100038a8:	dc011f15 	stw	r16,1148(sp)
100038ac:	008001c4 	movi	r2,7
100038b0:	14015416 	blt	r2,r16,10003e04 <___vfprintf_internal_r+0x1654>
100038b4:	44400204 	addi	r17,r8,8
100038b8:	d9013717 	ldw	r4,1244(sp)
100038bc:	d9413917 	ldw	r5,1252(sp)
100038c0:	000d883a 	mov	r6,zero
100038c4:	000f883a 	mov	r7,zero
100038c8:	d8c13d15 	stw	r3,1268(sp)
100038cc:	000da740 	call	1000da74 <__eqdf2>
100038d0:	d8c13d17 	ldw	r3,1268(sp)
100038d4:	1000a726 	beq	r2,zero,10003b74 <___vfprintf_internal_r+0x13c4>
100038d8:	d9013317 	ldw	r4,1228(sp)
100038dc:	d9413117 	ldw	r5,1220(sp)
100038e0:	84000044 	addi	r16,r16,1
100038e4:	20bfffc4 	addi	r2,r4,-1
100038e8:	1887883a 	add	r3,r3,r2
100038ec:	29000044 	addi	r4,r5,1
100038f0:	88800115 	stw	r2,4(r17)
100038f4:	89000015 	stw	r4,0(r17)
100038f8:	d8c12015 	stw	r3,1152(sp)
100038fc:	dc011f15 	stw	r16,1148(sp)
10003900:	008001c4 	movi	r2,7
10003904:	14012d16 	blt	r2,r16,10003dbc <___vfprintf_internal_r+0x160c>
10003908:	8c400204 	addi	r17,r17,8
1000390c:	d9413a17 	ldw	r5,1256(sp)
10003910:	dcc122c4 	addi	r19,sp,1163
10003914:	84000044 	addi	r16,r16,1
10003918:	28c7883a 	add	r3,r5,r3
1000391c:	8cc00015 	stw	r19,0(r17)
10003920:	89400115 	stw	r5,4(r17)
10003924:	d8c12015 	stw	r3,1152(sp)
10003928:	dc011f15 	stw	r16,1148(sp)
1000392c:	008001c4 	movi	r2,7
10003930:	14000e16 	blt	r2,r16,1000396c <___vfprintf_internal_r+0x11bc>
10003934:	8a000204 	addi	r8,r17,8
10003938:	003db006 	br	10002ffc <__alt_data_end+0xf8002ffc>
1000393c:	01040074 	movhi	r4,4097
10003940:	21081c84 	addi	r4,r4,8306
10003944:	d9012c15 	stw	r4,1200(sp)
10003948:	d9012c17 	ldw	r4,1200(sp)
1000394c:	1c07883a 	add	r3,r3,r16
10003950:	44000115 	stw	r16,4(r8)
10003954:	41000015 	stw	r4,0(r8)
10003958:	10800044 	addi	r2,r2,1
1000395c:	d8c12015 	stw	r3,1152(sp)
10003960:	d8811f15 	stw	r2,1148(sp)
10003964:	010001c4 	movi	r4,7
10003968:	20bda30e 	bge	r4,r2,10002ff8 <__alt_data_end+0xf8002ff8>
1000396c:	b809883a 	mov	r4,r23
10003970:	b00b883a 	mov	r5,r22
10003974:	d9811e04 	addi	r6,sp,1144
10003978:	0009bf00 	call	10009bf0 <__sprint_r>
1000397c:	103ca41e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10003980:	d8c12017 	ldw	r3,1152(sp)
10003984:	da000404 	addi	r8,sp,16
10003988:	003d9c06 	br	10002ffc <__alt_data_end+0xf8002ffc>
1000398c:	b809883a 	mov	r4,r23
10003990:	b00b883a 	mov	r5,r22
10003994:	d9811e04 	addi	r6,sp,1144
10003998:	0009bf00 	call	10009bf0 <__sprint_r>
1000399c:	103dd226 	beq	r2,zero,100030e8 <__alt_data_end+0xf80030e8>
100039a0:	003c9b06 	br	10002c10 <__alt_data_end+0xf8002c10>
100039a4:	10803fcc 	andi	r2,r2,255
100039a8:	1000311e 	bne	r2,zero,10003a70 <___vfprintf_internal_r+0x12c0>
100039ac:	e080004c 	andi	r2,fp,1
100039b0:	10002f26 	beq	r2,zero,10003a70 <___vfprintf_internal_r+0x12c0>
100039b4:	00800c04 	movi	r2,48
100039b8:	d8c10dc4 	addi	r3,sp,1079
100039bc:	d8810dc5 	stb	r2,1079(sp)
100039c0:	dc413c17 	ldw	r17,1264(sp)
100039c4:	d8c13115 	stw	r3,1220(sp)
100039c8:	003cf406 	br	10002d9c <__alt_data_end+0xf8002d9c>
100039cc:	b809883a 	mov	r4,r23
100039d0:	b00b883a 	mov	r5,r22
100039d4:	d9811e04 	addi	r6,sp,1144
100039d8:	0009bf00 	call	10009bf0 <__sprint_r>
100039dc:	103c8c1e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
100039e0:	d8c12017 	ldw	r3,1152(sp)
100039e4:	da000404 	addi	r8,sp,16
100039e8:	003d7706 	br	10002fc8 <__alt_data_end+0xf8002fc8>
100039ec:	b809883a 	mov	r4,r23
100039f0:	b00b883a 	mov	r5,r22
100039f4:	d9811e04 	addi	r6,sp,1144
100039f8:	0009bf00 	call	10009bf0 <__sprint_r>
100039fc:	103c841e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10003a00:	d8c12017 	ldw	r3,1152(sp)
10003a04:	da000404 	addi	r8,sp,16
10003a08:	003d3506 	br	10002ee0 <__alt_data_end+0xf8002ee0>
10003a0c:	b809883a 	mov	r4,r23
10003a10:	b00b883a 	mov	r5,r22
10003a14:	d9811e04 	addi	r6,sp,1144
10003a18:	0009bf00 	call	10009bf0 <__sprint_r>
10003a1c:	103c7c1e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10003a20:	d8c12017 	ldw	r3,1152(sp)
10003a24:	da000404 	addi	r8,sp,16
10003a28:	003d3b06 	br	10002f18 <__alt_data_end+0xf8002f18>
10003a2c:	d9413b17 	ldw	r5,1260(sp)
10003a30:	d8c10e04 	addi	r3,sp,1080
10003a34:	908003cc 	andi	r2,r18,15
10003a38:	a808973a 	slli	r4,r21,28
10003a3c:	2885883a 	add	r2,r5,r2
10003a40:	9024d13a 	srli	r18,r18,4
10003a44:	10800003 	ldbu	r2,0(r2)
10003a48:	a82ad13a 	srli	r21,r21,4
10003a4c:	18ffffc4 	addi	r3,r3,-1
10003a50:	24a4b03a 	or	r18,r4,r18
10003a54:	18800005 	stb	r2,0(r3)
10003a58:	9544b03a 	or	r2,r18,r21
10003a5c:	103ff51e 	bne	r2,zero,10003a34 <__alt_data_end+0xf8003a34>
10003a60:	d9412817 	ldw	r5,1184(sp)
10003a64:	d8c13115 	stw	r3,1220(sp)
10003a68:	28e3c83a 	sub	r17,r5,r3
10003a6c:	003ccb06 	br	10002d9c <__alt_data_end+0xf8002d9c>
10003a70:	d8c10e04 	addi	r3,sp,1080
10003a74:	0023883a 	mov	r17,zero
10003a78:	d8c13115 	stw	r3,1220(sp)
10003a7c:	003cc706 	br	10002d9c <__alt_data_end+0xf8002d9c>
10003a80:	dc012617 	ldw	r16,1176(sp)
10003a84:	0401ab0e 	bge	zero,r16,10004134 <___vfprintf_internal_r+0x1984>
10003a88:	d8813317 	ldw	r2,1228(sp)
10003a8c:	d9413117 	ldw	r5,1220(sp)
10003a90:	d9013417 	ldw	r4,1232(sp)
10003a94:	1023883a 	mov	r17,r2
10003a98:	28a1883a 	add	r16,r5,r2
10003a9c:	2080010e 	bge	r4,r2,10003aa4 <___vfprintf_internal_r+0x12f4>
10003aa0:	2023883a 	mov	r17,r4
10003aa4:	04400b0e 	bge	zero,r17,10003ad4 <___vfprintf_internal_r+0x1324>
10003aa8:	d8811f17 	ldw	r2,1148(sp)
10003aac:	d9413117 	ldw	r5,1220(sp)
10003ab0:	1c47883a 	add	r3,r3,r17
10003ab4:	10800044 	addi	r2,r2,1
10003ab8:	41400015 	stw	r5,0(r8)
10003abc:	44400115 	stw	r17,4(r8)
10003ac0:	d8c12015 	stw	r3,1152(sp)
10003ac4:	d8811f15 	stw	r2,1148(sp)
10003ac8:	010001c4 	movi	r4,7
10003acc:	20826716 	blt	r4,r2,1000446c <___vfprintf_internal_r+0x1cbc>
10003ad0:	42000204 	addi	r8,r8,8
10003ad4:	88026316 	blt	r17,zero,10004464 <___vfprintf_internal_r+0x1cb4>
10003ad8:	d8813417 	ldw	r2,1232(sp)
10003adc:	1463c83a 	sub	r17,r2,r17
10003ae0:	0440590e 	bge	zero,r17,10003c48 <___vfprintf_internal_r+0x1498>
10003ae4:	04c00404 	movi	r19,16
10003ae8:	d8811f17 	ldw	r2,1148(sp)
10003aec:	9c41770e 	bge	r19,r17,100040cc <___vfprintf_internal_r+0x191c>
10003af0:	01440074 	movhi	r5,4097
10003af4:	29481c84 	addi	r5,r5,8306
10003af8:	d9412c15 	stw	r5,1200(sp)
10003afc:	054001c4 	movi	r21,7
10003b00:	00000306 	br	10003b10 <___vfprintf_internal_r+0x1360>
10003b04:	42000204 	addi	r8,r8,8
10003b08:	8c7ffc04 	addi	r17,r17,-16
10003b0c:	9c41720e 	bge	r19,r17,100040d8 <___vfprintf_internal_r+0x1928>
10003b10:	18c00404 	addi	r3,r3,16
10003b14:	10800044 	addi	r2,r2,1
10003b18:	45000015 	stw	r20,0(r8)
10003b1c:	44c00115 	stw	r19,4(r8)
10003b20:	d8c12015 	stw	r3,1152(sp)
10003b24:	d8811f15 	stw	r2,1148(sp)
10003b28:	a8bff60e 	bge	r21,r2,10003b04 <__alt_data_end+0xf8003b04>
10003b2c:	b809883a 	mov	r4,r23
10003b30:	b00b883a 	mov	r5,r22
10003b34:	d9811e04 	addi	r6,sp,1144
10003b38:	0009bf00 	call	10009bf0 <__sprint_r>
10003b3c:	103c341e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10003b40:	d8c12017 	ldw	r3,1152(sp)
10003b44:	d8811f17 	ldw	r2,1148(sp)
10003b48:	da000404 	addi	r8,sp,16
10003b4c:	003fee06 	br	10003b08 <__alt_data_end+0xf8003b08>
10003b50:	b809883a 	mov	r4,r23
10003b54:	b00b883a 	mov	r5,r22
10003b58:	d9811e04 	addi	r6,sp,1144
10003b5c:	0009bf00 	call	10009bf0 <__sprint_r>
10003b60:	103c2b1e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10003b64:	d8c12017 	ldw	r3,1152(sp)
10003b68:	d8812787 	ldb	r2,1182(sp)
10003b6c:	da000404 	addi	r8,sp,16
10003b70:	003cce06 	br	10002eac <__alt_data_end+0xf8002eac>
10003b74:	d8813317 	ldw	r2,1228(sp)
10003b78:	14ffffc4 	addi	r19,r2,-1
10003b7c:	04ff630e 	bge	zero,r19,1000390c <__alt_data_end+0xf800390c>
10003b80:	05400404 	movi	r21,16
10003b84:	acc0810e 	bge	r21,r19,10003d8c <___vfprintf_internal_r+0x15dc>
10003b88:	01440074 	movhi	r5,4097
10003b8c:	29481c84 	addi	r5,r5,8306
10003b90:	d9412c15 	stw	r5,1200(sp)
10003b94:	01c001c4 	movi	r7,7
10003b98:	00000306 	br	10003ba8 <___vfprintf_internal_r+0x13f8>
10003b9c:	8c400204 	addi	r17,r17,8
10003ba0:	9cfffc04 	addi	r19,r19,-16
10003ba4:	acc07c0e 	bge	r21,r19,10003d98 <___vfprintf_internal_r+0x15e8>
10003ba8:	18c00404 	addi	r3,r3,16
10003bac:	84000044 	addi	r16,r16,1
10003bb0:	8d000015 	stw	r20,0(r17)
10003bb4:	8d400115 	stw	r21,4(r17)
10003bb8:	d8c12015 	stw	r3,1152(sp)
10003bbc:	dc011f15 	stw	r16,1148(sp)
10003bc0:	3c3ff60e 	bge	r7,r16,10003b9c <__alt_data_end+0xf8003b9c>
10003bc4:	b809883a 	mov	r4,r23
10003bc8:	b00b883a 	mov	r5,r22
10003bcc:	d9811e04 	addi	r6,sp,1144
10003bd0:	d9c13d15 	stw	r7,1268(sp)
10003bd4:	0009bf00 	call	10009bf0 <__sprint_r>
10003bd8:	d9c13d17 	ldw	r7,1268(sp)
10003bdc:	103c0c1e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10003be0:	d8c12017 	ldw	r3,1152(sp)
10003be4:	dc011f17 	ldw	r16,1148(sp)
10003be8:	dc400404 	addi	r17,sp,16
10003bec:	003fec06 	br	10003ba0 <__alt_data_end+0xf8003ba0>
10003bf0:	00800084 	movi	r2,2
10003bf4:	9546b03a 	or	r3,r18,r21
10003bf8:	003d7d06 	br	100031f0 <__alt_data_end+0xf80031f0>
10003bfc:	10803fcc 	andi	r2,r2,255
10003c00:	1080201c 	xori	r2,r2,128
10003c04:	10bfe004 	addi	r2,r2,-128
10003c08:	01000c04 	movi	r4,48
10003c0c:	1101d726 	beq	r2,r4,1000436c <___vfprintf_internal_r+0x1bbc>
10003c10:	d9413117 	ldw	r5,1220(sp)
10003c14:	d8812817 	ldw	r2,1184(sp)
10003c18:	193fffc5 	stb	r4,-1(r3)
10003c1c:	297fffc4 	addi	r5,r5,-1
10003c20:	d9413115 	stw	r5,1220(sp)
10003c24:	1163c83a 	sub	r17,r2,r5
10003c28:	003c5c06 	br	10002d9c <__alt_data_end+0xf8002d9c>
10003c2c:	b809883a 	mov	r4,r23
10003c30:	b00b883a 	mov	r5,r22
10003c34:	d9811e04 	addi	r6,sp,1144
10003c38:	0009bf00 	call	10009bf0 <__sprint_r>
10003c3c:	103bf41e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10003c40:	d8c12017 	ldw	r3,1152(sp)
10003c44:	da000404 	addi	r8,sp,16
10003c48:	d9413117 	ldw	r5,1220(sp)
10003c4c:	d9013417 	ldw	r4,1232(sp)
10003c50:	d8812617 	ldw	r2,1176(sp)
10003c54:	2923883a 	add	r17,r5,r4
10003c58:	d9413317 	ldw	r5,1228(sp)
10003c5c:	11400216 	blt	r2,r5,10003c68 <___vfprintf_internal_r+0x14b8>
10003c60:	e100004c 	andi	r4,fp,1
10003c64:	20000d26 	beq	r4,zero,10003c9c <___vfprintf_internal_r+0x14ec>
10003c68:	d9013817 	ldw	r4,1248(sp)
10003c6c:	d9413517 	ldw	r5,1236(sp)
10003c70:	1907883a 	add	r3,r3,r4
10003c74:	d9011f17 	ldw	r4,1148(sp)
10003c78:	41400015 	stw	r5,0(r8)
10003c7c:	d9413817 	ldw	r5,1248(sp)
10003c80:	21000044 	addi	r4,r4,1
10003c84:	d8c12015 	stw	r3,1152(sp)
10003c88:	41400115 	stw	r5,4(r8)
10003c8c:	d9011f15 	stw	r4,1148(sp)
10003c90:	014001c4 	movi	r5,7
10003c94:	2901fd16 	blt	r5,r4,1000448c <___vfprintf_internal_r+0x1cdc>
10003c98:	42000204 	addi	r8,r8,8
10003c9c:	d9013317 	ldw	r4,1228(sp)
10003ca0:	2085c83a 	sub	r2,r4,r2
10003ca4:	8449c83a 	sub	r4,r16,r17
10003ca8:	1021883a 	mov	r16,r2
10003cac:	2080010e 	bge	r4,r2,10003cb4 <___vfprintf_internal_r+0x1504>
10003cb0:	2021883a 	mov	r16,r4
10003cb4:	04000a0e 	bge	zero,r16,10003ce0 <___vfprintf_internal_r+0x1530>
10003cb8:	d9011f17 	ldw	r4,1148(sp)
10003cbc:	1c07883a 	add	r3,r3,r16
10003cc0:	44400015 	stw	r17,0(r8)
10003cc4:	21000044 	addi	r4,r4,1
10003cc8:	44000115 	stw	r16,4(r8)
10003ccc:	d8c12015 	stw	r3,1152(sp)
10003cd0:	d9011f15 	stw	r4,1148(sp)
10003cd4:	014001c4 	movi	r5,7
10003cd8:	29020916 	blt	r5,r4,10004500 <___vfprintf_internal_r+0x1d50>
10003cdc:	42000204 	addi	r8,r8,8
10003ce0:	80020116 	blt	r16,zero,100044e8 <___vfprintf_internal_r+0x1d38>
10003ce4:	1421c83a 	sub	r16,r2,r16
10003ce8:	043cc40e 	bge	zero,r16,10002ffc <__alt_data_end+0xf8002ffc>
10003cec:	04400404 	movi	r17,16
10003cf0:	d8811f17 	ldw	r2,1148(sp)
10003cf4:	8c3f110e 	bge	r17,r16,1000393c <__alt_data_end+0xf800393c>
10003cf8:	01440074 	movhi	r5,4097
10003cfc:	29481c84 	addi	r5,r5,8306
10003d00:	d9412c15 	stw	r5,1200(sp)
10003d04:	04c001c4 	movi	r19,7
10003d08:	00000306 	br	10003d18 <___vfprintf_internal_r+0x1568>
10003d0c:	42000204 	addi	r8,r8,8
10003d10:	843ffc04 	addi	r16,r16,-16
10003d14:	8c3f0c0e 	bge	r17,r16,10003948 <__alt_data_end+0xf8003948>
10003d18:	18c00404 	addi	r3,r3,16
10003d1c:	10800044 	addi	r2,r2,1
10003d20:	45000015 	stw	r20,0(r8)
10003d24:	44400115 	stw	r17,4(r8)
10003d28:	d8c12015 	stw	r3,1152(sp)
10003d2c:	d8811f15 	stw	r2,1148(sp)
10003d30:	98bff60e 	bge	r19,r2,10003d0c <__alt_data_end+0xf8003d0c>
10003d34:	b809883a 	mov	r4,r23
10003d38:	b00b883a 	mov	r5,r22
10003d3c:	d9811e04 	addi	r6,sp,1144
10003d40:	0009bf00 	call	10009bf0 <__sprint_r>
10003d44:	103bb21e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10003d48:	d8c12017 	ldw	r3,1152(sp)
10003d4c:	d8811f17 	ldw	r2,1148(sp)
10003d50:	da000404 	addi	r8,sp,16
10003d54:	003fee06 	br	10003d10 <__alt_data_end+0xf8003d10>
10003d58:	e088703a 	and	r4,fp,r2
10003d5c:	203ec01e 	bne	r4,zero,10003860 <__alt_data_end+0xf8003860>
10003d60:	dc011f17 	ldw	r16,1148(sp)
10003d64:	d9013117 	ldw	r4,1220(sp)
10003d68:	40800115 	stw	r2,4(r8)
10003d6c:	84000044 	addi	r16,r16,1
10003d70:	41000015 	stw	r4,0(r8)
10003d74:	d8c12015 	stw	r3,1152(sp)
10003d78:	dc011f15 	stw	r16,1148(sp)
10003d7c:	008001c4 	movi	r2,7
10003d80:	14000e16 	blt	r2,r16,10003dbc <___vfprintf_internal_r+0x160c>
10003d84:	44400204 	addi	r17,r8,8
10003d88:	003ee006 	br	1000390c <__alt_data_end+0xf800390c>
10003d8c:	01040074 	movhi	r4,4097
10003d90:	21081c84 	addi	r4,r4,8306
10003d94:	d9012c15 	stw	r4,1200(sp)
10003d98:	d8812c17 	ldw	r2,1200(sp)
10003d9c:	1cc7883a 	add	r3,r3,r19
10003da0:	84000044 	addi	r16,r16,1
10003da4:	88800015 	stw	r2,0(r17)
10003da8:	8cc00115 	stw	r19,4(r17)
10003dac:	d8c12015 	stw	r3,1152(sp)
10003db0:	dc011f15 	stw	r16,1148(sp)
10003db4:	008001c4 	movi	r2,7
10003db8:	143ed30e 	bge	r2,r16,10003908 <__alt_data_end+0xf8003908>
10003dbc:	b809883a 	mov	r4,r23
10003dc0:	b00b883a 	mov	r5,r22
10003dc4:	d9811e04 	addi	r6,sp,1144
10003dc8:	0009bf00 	call	10009bf0 <__sprint_r>
10003dcc:	103b901e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10003dd0:	d8c12017 	ldw	r3,1152(sp)
10003dd4:	dc011f17 	ldw	r16,1148(sp)
10003dd8:	dc400404 	addi	r17,sp,16
10003ddc:	003ecb06 	br	1000390c <__alt_data_end+0xf800390c>
10003de0:	b809883a 	mov	r4,r23
10003de4:	b00b883a 	mov	r5,r22
10003de8:	d9811e04 	addi	r6,sp,1144
10003dec:	0009bf00 	call	10009bf0 <__sprint_r>
10003df0:	103b871e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10003df4:	d8c12017 	ldw	r3,1152(sp)
10003df8:	dc011f17 	ldw	r16,1148(sp)
10003dfc:	da000404 	addi	r8,sp,16
10003e00:	003ea206 	br	1000388c <__alt_data_end+0xf800388c>
10003e04:	b809883a 	mov	r4,r23
10003e08:	b00b883a 	mov	r5,r22
10003e0c:	d9811e04 	addi	r6,sp,1144
10003e10:	0009bf00 	call	10009bf0 <__sprint_r>
10003e14:	103b7e1e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10003e18:	d8c12017 	ldw	r3,1152(sp)
10003e1c:	dc011f17 	ldw	r16,1148(sp)
10003e20:	dc400404 	addi	r17,sp,16
10003e24:	003ea406 	br	100038b8 <__alt_data_end+0xf80038b8>
10003e28:	b809883a 	mov	r4,r23
10003e2c:	b00b883a 	mov	r5,r22
10003e30:	d9811e04 	addi	r6,sp,1144
10003e34:	0009bf00 	call	10009bf0 <__sprint_r>
10003e38:	103b751e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10003e3c:	d8c12017 	ldw	r3,1152(sp)
10003e40:	da000404 	addi	r8,sp,16
10003e44:	003c3706 	br	10002f24 <__alt_data_end+0xf8002f24>
10003e48:	04a5c83a 	sub	r18,zero,r18
10003e4c:	9004c03a 	cmpne	r2,r18,zero
10003e50:	056bc83a 	sub	r21,zero,r21
10003e54:	a8abc83a 	sub	r21,r21,r2
10003e58:	04c00b44 	movi	r19,45
10003e5c:	dcc12785 	stb	r19,1182(sp)
10003e60:	da413215 	stw	r9,1224(sp)
10003e64:	00800044 	movi	r2,1
10003e68:	9546b03a 	or	r3,r18,r21
10003e6c:	003bb106 	br	10002d34 <__alt_data_end+0xf8002d34>
10003e70:	da013f15 	stw	r8,1276(sp)
10003e74:	da413e15 	stw	r9,1272(sp)
10003e78:	000984c0 	call	1000984c <__fpclassifyd>
10003e7c:	da013f17 	ldw	r8,1276(sp)
10003e80:	da413e17 	ldw	r9,1272(sp)
10003e84:	1000e526 	beq	r2,zero,1000421c <___vfprintf_internal_r+0x1a6c>
10003e88:	04fff7c4 	movi	r19,-33
10003e8c:	00bfffc4 	movi	r2,-1
10003e90:	84e6703a 	and	r19,r16,r19
10003e94:	48822926 	beq	r9,r2,1000473c <___vfprintf_internal_r+0x1f8c>
10003e98:	008011c4 	movi	r2,71
10003e9c:	98821626 	beq	r19,r2,100046f8 <___vfprintf_internal_r+0x1f48>
10003ea0:	d9013917 	ldw	r4,1252(sp)
10003ea4:	e0c04014 	ori	r3,fp,256
10003ea8:	d8c12d15 	stw	r3,1204(sp)
10003eac:	20021f16 	blt	r4,zero,1000472c <___vfprintf_internal_r+0x1f7c>
10003eb0:	dc413917 	ldw	r17,1252(sp)
10003eb4:	d8012b05 	stb	zero,1196(sp)
10003eb8:	00801984 	movi	r2,102
10003ebc:	80814d26 	beq	r16,r2,100043f4 <___vfprintf_internal_r+0x1c44>
10003ec0:	00801184 	movi	r2,70
10003ec4:	80814b26 	beq	r16,r2,100043f4 <___vfprintf_internal_r+0x1c44>
10003ec8:	00801144 	movi	r2,69
10003ecc:	98821d26 	beq	r19,r2,10004744 <___vfprintf_internal_r+0x1f94>
10003ed0:	482b883a 	mov	r21,r9
10003ed4:	d8812604 	addi	r2,sp,1176
10003ed8:	d8800115 	stw	r2,4(sp)
10003edc:	d9413717 	ldw	r5,1244(sp)
10003ee0:	d8812504 	addi	r2,sp,1172
10003ee4:	d8800215 	stw	r2,8(sp)
10003ee8:	d8812104 	addi	r2,sp,1156
10003eec:	dd400015 	stw	r21,0(sp)
10003ef0:	d8800315 	stw	r2,12(sp)
10003ef4:	b809883a 	mov	r4,r23
10003ef8:	880d883a 	mov	r6,r17
10003efc:	01c00084 	movi	r7,2
10003f00:	da013f15 	stw	r8,1276(sp)
10003f04:	da413e15 	stw	r9,1272(sp)
10003f08:	0004c280 	call	10004c28 <_dtoa_r>
10003f0c:	d8813115 	stw	r2,1220(sp)
10003f10:	008019c4 	movi	r2,103
10003f14:	da013f17 	ldw	r8,1276(sp)
10003f18:	da413e17 	ldw	r9,1272(sp)
10003f1c:	80800226 	beq	r16,r2,10003f28 <___vfprintf_internal_r+0x1778>
10003f20:	008011c4 	movi	r2,71
10003f24:	8081451e 	bne	r16,r2,1000443c <___vfprintf_internal_r+0x1c8c>
10003f28:	e080004c 	andi	r2,fp,1
10003f2c:	10021e26 	beq	r2,zero,100047a8 <___vfprintf_internal_r+0x1ff8>
10003f30:	d8c13117 	ldw	r3,1220(sp)
10003f34:	1d55883a 	add	r10,r3,r21
10003f38:	d9013717 	ldw	r4,1244(sp)
10003f3c:	880b883a 	mov	r5,r17
10003f40:	000d883a 	mov	r6,zero
10003f44:	000f883a 	mov	r7,zero
10003f48:	da013f15 	stw	r8,1276(sp)
10003f4c:	da413e15 	stw	r9,1272(sp)
10003f50:	da813d15 	stw	r10,1268(sp)
10003f54:	000da740 	call	1000da74 <__eqdf2>
10003f58:	da013f17 	ldw	r8,1276(sp)
10003f5c:	da413e17 	ldw	r9,1272(sp)
10003f60:	da813d17 	ldw	r10,1268(sp)
10003f64:	1001a126 	beq	r2,zero,100045ec <___vfprintf_internal_r+0x1e3c>
10003f68:	d8812117 	ldw	r2,1156(sp)
10003f6c:	1280062e 	bgeu	r2,r10,10003f88 <___vfprintf_internal_r+0x17d8>
10003f70:	01000c04 	movi	r4,48
10003f74:	10c00044 	addi	r3,r2,1
10003f78:	d8c12115 	stw	r3,1156(sp)
10003f7c:	11000005 	stb	r4,0(r2)
10003f80:	d8812117 	ldw	r2,1156(sp)
10003f84:	12bffb36 	bltu	r2,r10,10003f74 <__alt_data_end+0xf8003f74>
10003f88:	d8c13117 	ldw	r3,1220(sp)
10003f8c:	10c5c83a 	sub	r2,r2,r3
10003f90:	d8813315 	stw	r2,1228(sp)
10003f94:	008011c4 	movi	r2,71
10003f98:	98818926 	beq	r19,r2,100045c0 <___vfprintf_internal_r+0x1e10>
10003f9c:	00801944 	movi	r2,101
10003fa0:	14023c0e 	bge	r2,r16,10004894 <___vfprintf_internal_r+0x20e4>
10003fa4:	d8c12617 	ldw	r3,1176(sp)
10003fa8:	00801984 	movi	r2,102
10003fac:	d8c13415 	stw	r3,1232(sp)
10003fb0:	8081ef26 	beq	r16,r2,10004770 <___vfprintf_internal_r+0x1fc0>
10003fb4:	d8c13417 	ldw	r3,1232(sp)
10003fb8:	d9013317 	ldw	r4,1228(sp)
10003fbc:	1901e316 	blt	r3,r4,1000474c <___vfprintf_internal_r+0x1f9c>
10003fc0:	e080004c 	andi	r2,fp,1
10003fc4:	1001f426 	beq	r2,zero,10004798 <___vfprintf_internal_r+0x1fe8>
10003fc8:	d8c13417 	ldw	r3,1232(sp)
10003fcc:	1c400044 	addi	r17,r3,1
10003fd0:	8839883a 	mov	fp,r17
10003fd4:	8801e416 	blt	r17,zero,10004768 <___vfprintf_internal_r+0x1fb8>
10003fd8:	dd412b07 	ldb	r21,1196(sp)
10003fdc:	a801701e 	bne	r21,zero,100045a0 <___vfprintf_internal_r+0x1df0>
10003fe0:	df012b15 	stw	fp,1196(sp)
10003fe4:	dcc12783 	ldbu	r19,1182(sp)
10003fe8:	df012d17 	ldw	fp,1204(sp)
10003fec:	d8013215 	stw	zero,1224(sp)
10003ff0:	dc812d15 	stw	r18,1204(sp)
10003ff4:	003b6e06 	br	10002db0 <__alt_data_end+0xf8002db0>
10003ff8:	e080040c 	andi	r2,fp,16
10003ffc:	1000b51e 	bne	r2,zero,100042d4 <___vfprintf_internal_r+0x1b24>
10004000:	e080100c 	andi	r2,fp,64
10004004:	10015b26 	beq	r2,zero,10004574 <___vfprintf_internal_r+0x1dc4>
10004008:	d9012d17 	ldw	r4,1204(sp)
1000400c:	d9412f17 	ldw	r5,1212(sp)
10004010:	20800017 	ldw	r2,0(r4)
10004014:	21000104 	addi	r4,r4,4
10004018:	d9012d15 	stw	r4,1204(sp)
1000401c:	1140000d 	sth	r5,0(r2)
10004020:	003a2006 	br	100028a4 <__alt_data_end+0xf80028a4>
10004024:	e0c0100c 	andi	r3,fp,64
10004028:	1800a226 	beq	r3,zero,100042b4 <___vfprintf_internal_r+0x1b04>
1000402c:	d8c12d17 	ldw	r3,1204(sp)
10004030:	1480000b 	ldhu	r18,0(r2)
10004034:	002b883a 	mov	r21,zero
10004038:	18c00104 	addi	r3,r3,4
1000403c:	d8c12d15 	stw	r3,1204(sp)
10004040:	0005883a 	mov	r2,zero
10004044:	9007883a 	mov	r3,r18
10004048:	003c6906 	br	100031f0 <__alt_data_end+0xf80031f0>
1000404c:	e0c0100c 	andi	r3,fp,64
10004050:	18009026 	beq	r3,zero,10004294 <___vfprintf_internal_r+0x1ae4>
10004054:	1480000b 	ldhu	r18,0(r2)
10004058:	d8812d17 	ldw	r2,1204(sp)
1000405c:	002b883a 	mov	r21,zero
10004060:	9007883a 	mov	r3,r18
10004064:	10800104 	addi	r2,r2,4
10004068:	d8812d15 	stw	r2,1204(sp)
1000406c:	00800044 	movi	r2,1
10004070:	003c5f06 	br	100031f0 <__alt_data_end+0xf80031f0>
10004074:	e0c0100c 	andi	r3,fp,64
10004078:	18008026 	beq	r3,zero,1000427c <___vfprintf_internal_r+0x1acc>
1000407c:	d9012d17 	ldw	r4,1204(sp)
10004080:	1480000b 	ldhu	r18,0(r2)
10004084:	002b883a 	mov	r21,zero
10004088:	21000104 	addi	r4,r4,4
1000408c:	d9012d15 	stw	r4,1204(sp)
10004090:	003c7906 	br	10003278 <__alt_data_end+0xf8003278>
10004094:	e080100c 	andi	r2,fp,64
10004098:	10007126 	beq	r2,zero,10004260 <___vfprintf_internal_r+0x1ab0>
1000409c:	1c80000f 	ldh	r18,0(r3)
100040a0:	d8812d17 	ldw	r2,1204(sp)
100040a4:	902bd7fa 	srai	r21,r18,31
100040a8:	10800104 	addi	r2,r2,4
100040ac:	d8812d15 	stw	r2,1204(sp)
100040b0:	a805883a 	mov	r2,r21
100040b4:	003b1a06 	br	10002d20 <__alt_data_end+0xf8002d20>
100040b8:	e4000007 	ldb	r16,0(fp)
100040bc:	e005883a 	mov	r2,fp
100040c0:	003a2306 	br	10002950 <__alt_data_end+0xf8002950>
100040c4:	00800084 	movi	r2,2
100040c8:	003c4906 	br	100031f0 <__alt_data_end+0xf80031f0>
100040cc:	01040074 	movhi	r4,4097
100040d0:	21081c84 	addi	r4,r4,8306
100040d4:	d9012c15 	stw	r4,1200(sp)
100040d8:	d9012c17 	ldw	r4,1200(sp)
100040dc:	1c47883a 	add	r3,r3,r17
100040e0:	10800044 	addi	r2,r2,1
100040e4:	41000015 	stw	r4,0(r8)
100040e8:	44400115 	stw	r17,4(r8)
100040ec:	d8c12015 	stw	r3,1152(sp)
100040f0:	d8811f15 	stw	r2,1148(sp)
100040f4:	010001c4 	movi	r4,7
100040f8:	20becc16 	blt	r4,r2,10003c2c <__alt_data_end+0xf8003c2c>
100040fc:	42000204 	addi	r8,r8,8
10004100:	003ed106 	br	10003c48 <__alt_data_end+0xf8003c48>
10004104:	01040074 	movhi	r4,4097
10004108:	21081c84 	addi	r4,r4,8306
1000410c:	d9012c15 	stw	r4,1200(sp)
10004110:	003ba306 	br	10002fa0 <__alt_data_end+0xf8002fa0>
10004114:	b809883a 	mov	r4,r23
10004118:	b00b883a 	mov	r5,r22
1000411c:	d9811e04 	addi	r6,sp,1144
10004120:	0009bf00 	call	10009bf0 <__sprint_r>
10004124:	103aba1e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10004128:	d8c12017 	ldw	r3,1152(sp)
1000412c:	da000404 	addi	r8,sp,16
10004130:	003d6c06 	br	100036e4 <__alt_data_end+0xf80036e4>
10004134:	d8811f17 	ldw	r2,1148(sp)
10004138:	01440074 	movhi	r5,4097
1000413c:	01000044 	movi	r4,1
10004140:	18c00044 	addi	r3,r3,1
10004144:	10800044 	addi	r2,r2,1
10004148:	29481c04 	addi	r5,r5,8304
1000414c:	41000115 	stw	r4,4(r8)
10004150:	41400015 	stw	r5,0(r8)
10004154:	d8c12015 	stw	r3,1152(sp)
10004158:	d8811f15 	stw	r2,1148(sp)
1000415c:	010001c4 	movi	r4,7
10004160:	20806716 	blt	r4,r2,10004300 <___vfprintf_internal_r+0x1b50>
10004164:	42000204 	addi	r8,r8,8
10004168:	8000041e 	bne	r16,zero,1000417c <___vfprintf_internal_r+0x19cc>
1000416c:	d8813317 	ldw	r2,1228(sp)
10004170:	1000021e 	bne	r2,zero,1000417c <___vfprintf_internal_r+0x19cc>
10004174:	e080004c 	andi	r2,fp,1
10004178:	103ba026 	beq	r2,zero,10002ffc <__alt_data_end+0xf8002ffc>
1000417c:	d9013817 	ldw	r4,1248(sp)
10004180:	d8811f17 	ldw	r2,1148(sp)
10004184:	d9413517 	ldw	r5,1236(sp)
10004188:	1907883a 	add	r3,r3,r4
1000418c:	10800044 	addi	r2,r2,1
10004190:	41000115 	stw	r4,4(r8)
10004194:	41400015 	stw	r5,0(r8)
10004198:	d8c12015 	stw	r3,1152(sp)
1000419c:	d8811f15 	stw	r2,1148(sp)
100041a0:	010001c4 	movi	r4,7
100041a4:	20815716 	blt	r4,r2,10004704 <___vfprintf_internal_r+0x1f54>
100041a8:	42000204 	addi	r8,r8,8
100041ac:	0421c83a 	sub	r16,zero,r16
100041b0:	0400810e 	bge	zero,r16,100043b8 <___vfprintf_internal_r+0x1c08>
100041b4:	04400404 	movi	r17,16
100041b8:	8c00bd0e 	bge	r17,r16,100044b0 <___vfprintf_internal_r+0x1d00>
100041bc:	01440074 	movhi	r5,4097
100041c0:	29481c84 	addi	r5,r5,8306
100041c4:	d9412c15 	stw	r5,1200(sp)
100041c8:	04c001c4 	movi	r19,7
100041cc:	00000306 	br	100041dc <___vfprintf_internal_r+0x1a2c>
100041d0:	42000204 	addi	r8,r8,8
100041d4:	843ffc04 	addi	r16,r16,-16
100041d8:	8c00b80e 	bge	r17,r16,100044bc <___vfprintf_internal_r+0x1d0c>
100041dc:	18c00404 	addi	r3,r3,16
100041e0:	10800044 	addi	r2,r2,1
100041e4:	45000015 	stw	r20,0(r8)
100041e8:	44400115 	stw	r17,4(r8)
100041ec:	d8c12015 	stw	r3,1152(sp)
100041f0:	d8811f15 	stw	r2,1148(sp)
100041f4:	98bff60e 	bge	r19,r2,100041d0 <__alt_data_end+0xf80041d0>
100041f8:	b809883a 	mov	r4,r23
100041fc:	b00b883a 	mov	r5,r22
10004200:	d9811e04 	addi	r6,sp,1144
10004204:	0009bf00 	call	10009bf0 <__sprint_r>
10004208:	103a811e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
1000420c:	d8c12017 	ldw	r3,1152(sp)
10004210:	d8811f17 	ldw	r2,1148(sp)
10004214:	da000404 	addi	r8,sp,16
10004218:	003fee06 	br	100041d4 <__alt_data_end+0xf80041d4>
1000421c:	008011c4 	movi	r2,71
10004220:	1400db16 	blt	r2,r16,10004590 <___vfprintf_internal_r+0x1de0>
10004224:	01040074 	movhi	r4,4097
10004228:	21080e04 	addi	r4,r4,8248
1000422c:	d9013115 	stw	r4,1220(sp)
10004230:	00c000c4 	movi	r3,3
10004234:	00bfdfc4 	movi	r2,-129
10004238:	d8c12b15 	stw	r3,1196(sp)
1000423c:	e0b8703a 	and	fp,fp,r2
10004240:	dcc12783 	ldbu	r19,1182(sp)
10004244:	dc812d15 	stw	r18,1204(sp)
10004248:	1823883a 	mov	r17,r3
1000424c:	d8013215 	stw	zero,1224(sp)
10004250:	d8013415 	stw	zero,1232(sp)
10004254:	003ad606 	br	10002db0 <__alt_data_end+0xf8002db0>
10004258:	4823883a 	mov	r17,r9
1000425c:	003cc906 	br	10003584 <__alt_data_end+0xf8003584>
10004260:	1c800017 	ldw	r18,0(r3)
10004264:	d8c12d17 	ldw	r3,1204(sp)
10004268:	902bd7fa 	srai	r21,r18,31
1000426c:	18c00104 	addi	r3,r3,4
10004270:	d8c12d15 	stw	r3,1204(sp)
10004274:	a805883a 	mov	r2,r21
10004278:	003aa906 	br	10002d20 <__alt_data_end+0xf8002d20>
1000427c:	d9412d17 	ldw	r5,1204(sp)
10004280:	14800017 	ldw	r18,0(r2)
10004284:	002b883a 	mov	r21,zero
10004288:	29400104 	addi	r5,r5,4
1000428c:	d9412d15 	stw	r5,1204(sp)
10004290:	003bf906 	br	10003278 <__alt_data_end+0xf8003278>
10004294:	d8c12d17 	ldw	r3,1204(sp)
10004298:	14800017 	ldw	r18,0(r2)
1000429c:	002b883a 	mov	r21,zero
100042a0:	18c00104 	addi	r3,r3,4
100042a4:	d8c12d15 	stw	r3,1204(sp)
100042a8:	00800044 	movi	r2,1
100042ac:	9007883a 	mov	r3,r18
100042b0:	003bcf06 	br	100031f0 <__alt_data_end+0xf80031f0>
100042b4:	d9012d17 	ldw	r4,1204(sp)
100042b8:	14800017 	ldw	r18,0(r2)
100042bc:	002b883a 	mov	r21,zero
100042c0:	21000104 	addi	r4,r4,4
100042c4:	d9012d15 	stw	r4,1204(sp)
100042c8:	0005883a 	mov	r2,zero
100042cc:	9007883a 	mov	r3,r18
100042d0:	003bc706 	br	100031f0 <__alt_data_end+0xf80031f0>
100042d4:	d9412d17 	ldw	r5,1204(sp)
100042d8:	d8c12f17 	ldw	r3,1212(sp)
100042dc:	28800017 	ldw	r2,0(r5)
100042e0:	29400104 	addi	r5,r5,4
100042e4:	d9412d15 	stw	r5,1204(sp)
100042e8:	10c00015 	stw	r3,0(r2)
100042ec:	00396d06 	br	100028a4 <__alt_data_end+0xf80028a4>
100042f0:	01040074 	movhi	r4,4097
100042f4:	21080c04 	addi	r4,r4,8240
100042f8:	d9013115 	stw	r4,1220(sp)
100042fc:	003ba206 	br	10003188 <__alt_data_end+0xf8003188>
10004300:	b809883a 	mov	r4,r23
10004304:	b00b883a 	mov	r5,r22
10004308:	d9811e04 	addi	r6,sp,1144
1000430c:	0009bf00 	call	10009bf0 <__sprint_r>
10004310:	103a3f1e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10004314:	dc012617 	ldw	r16,1176(sp)
10004318:	d8c12017 	ldw	r3,1152(sp)
1000431c:	da000404 	addi	r8,sp,16
10004320:	003f9106 	br	10004168 <__alt_data_end+0xf8004168>
10004324:	e0800044 	addi	r2,fp,1
10004328:	9cc00814 	ori	r19,r19,32
1000432c:	e4000047 	ldb	r16,1(fp)
10004330:	00398706 	br	10002950 <__alt_data_end+0xf8002950>
10004334:	d8812e17 	ldw	r2,1208(sp)
10004338:	d8c12d15 	stw	r3,1204(sp)
1000433c:	0085c83a 	sub	r2,zero,r2
10004340:	d8812e15 	stw	r2,1208(sp)
10004344:	e005883a 	mov	r2,fp
10004348:	003a3a06 	br	10002c34 <__alt_data_end+0xf8002c34>
1000434c:	b809883a 	mov	r4,r23
10004350:	b00b883a 	mov	r5,r22
10004354:	d9811e04 	addi	r6,sp,1144
10004358:	0009bf00 	call	10009bf0 <__sprint_r>
1000435c:	103a2c1e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10004360:	d8c12017 	ldw	r3,1152(sp)
10004364:	da000404 	addi	r8,sp,16
10004368:	003cf006 	br	1000372c <__alt_data_end+0xf800372c>
1000436c:	d8c12817 	ldw	r3,1184(sp)
10004370:	d9013117 	ldw	r4,1220(sp)
10004374:	1923c83a 	sub	r17,r3,r4
10004378:	003a8806 	br	10002d9c <__alt_data_end+0xf8002d9c>
1000437c:	da013f15 	stw	r8,1276(sp)
10004380:	00027180 	call	10002718 <strlen>
10004384:	1023883a 	mov	r17,r2
10004388:	da013f17 	ldw	r8,1276(sp)
1000438c:	883c7f0e 	bge	r17,zero,1000358c <__alt_data_end+0xf800358c>
10004390:	0005883a 	mov	r2,zero
10004394:	003c7d06 	br	1000358c <__alt_data_end+0xf800358c>
10004398:	b809883a 	mov	r4,r23
1000439c:	b00b883a 	mov	r5,r22
100043a0:	d9811e04 	addi	r6,sp,1144
100043a4:	0009bf00 	call	10009bf0 <__sprint_r>
100043a8:	103a191e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
100043ac:	d8c12017 	ldw	r3,1152(sp)
100043b0:	d8811f17 	ldw	r2,1148(sp)
100043b4:	da000404 	addi	r8,sp,16
100043b8:	d9413317 	ldw	r5,1228(sp)
100043bc:	d9013117 	ldw	r4,1220(sp)
100043c0:	10800044 	addi	r2,r2,1
100043c4:	28c7883a 	add	r3,r5,r3
100043c8:	41000015 	stw	r4,0(r8)
100043cc:	41400115 	stw	r5,4(r8)
100043d0:	d8c12015 	stw	r3,1152(sp)
100043d4:	d8811f15 	stw	r2,1148(sp)
100043d8:	010001c4 	movi	r4,7
100043dc:	20bb060e 	bge	r4,r2,10002ff8 <__alt_data_end+0xf8002ff8>
100043e0:	003d6206 	br	1000396c <__alt_data_end+0xf800396c>
100043e4:	01040074 	movhi	r4,4097
100043e8:	21082084 	addi	r4,r4,8322
100043ec:	d9013615 	stw	r4,1240(sp)
100043f0:	003aa306 	br	10002e80 <__alt_data_end+0xf8002e80>
100043f4:	d8812604 	addi	r2,sp,1176
100043f8:	d8800115 	stw	r2,4(sp)
100043fc:	d9413717 	ldw	r5,1244(sp)
10004400:	d8812504 	addi	r2,sp,1172
10004404:	d8800215 	stw	r2,8(sp)
10004408:	d8812104 	addi	r2,sp,1156
1000440c:	da400015 	stw	r9,0(sp)
10004410:	d8800315 	stw	r2,12(sp)
10004414:	b809883a 	mov	r4,r23
10004418:	880d883a 	mov	r6,r17
1000441c:	01c000c4 	movi	r7,3
10004420:	da013f15 	stw	r8,1276(sp)
10004424:	da413e15 	stw	r9,1272(sp)
10004428:	0004c280 	call	10004c28 <_dtoa_r>
1000442c:	da413e17 	ldw	r9,1272(sp)
10004430:	da013f17 	ldw	r8,1276(sp)
10004434:	d8813115 	stw	r2,1220(sp)
10004438:	482b883a 	mov	r21,r9
1000443c:	d8c13117 	ldw	r3,1220(sp)
10004440:	00801184 	movi	r2,70
10004444:	1d55883a 	add	r10,r3,r21
10004448:	98bebb1e 	bne	r19,r2,10003f38 <__alt_data_end+0xf8003f38>
1000444c:	19000007 	ldb	r4,0(r3)
10004450:	00800c04 	movi	r2,48
10004454:	2080dd26 	beq	r4,r2,100047cc <___vfprintf_internal_r+0x201c>
10004458:	d8c12617 	ldw	r3,1176(sp)
1000445c:	50d5883a 	add	r10,r10,r3
10004460:	003eb506 	br	10003f38 <__alt_data_end+0xf8003f38>
10004464:	0023883a 	mov	r17,zero
10004468:	003d9b06 	br	10003ad8 <__alt_data_end+0xf8003ad8>
1000446c:	b809883a 	mov	r4,r23
10004470:	b00b883a 	mov	r5,r22
10004474:	d9811e04 	addi	r6,sp,1144
10004478:	0009bf00 	call	10009bf0 <__sprint_r>
1000447c:	1039e41e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10004480:	d8c12017 	ldw	r3,1152(sp)
10004484:	da000404 	addi	r8,sp,16
10004488:	003d9206 	br	10003ad4 <__alt_data_end+0xf8003ad4>
1000448c:	b809883a 	mov	r4,r23
10004490:	b00b883a 	mov	r5,r22
10004494:	d9811e04 	addi	r6,sp,1144
10004498:	0009bf00 	call	10009bf0 <__sprint_r>
1000449c:	1039dc1e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
100044a0:	d8812617 	ldw	r2,1176(sp)
100044a4:	d8c12017 	ldw	r3,1152(sp)
100044a8:	da000404 	addi	r8,sp,16
100044ac:	003dfb06 	br	10003c9c <__alt_data_end+0xf8003c9c>
100044b0:	01040074 	movhi	r4,4097
100044b4:	21081c84 	addi	r4,r4,8306
100044b8:	d9012c15 	stw	r4,1200(sp)
100044bc:	d9012c17 	ldw	r4,1200(sp)
100044c0:	1c07883a 	add	r3,r3,r16
100044c4:	10800044 	addi	r2,r2,1
100044c8:	41000015 	stw	r4,0(r8)
100044cc:	44000115 	stw	r16,4(r8)
100044d0:	d8c12015 	stw	r3,1152(sp)
100044d4:	d8811f15 	stw	r2,1148(sp)
100044d8:	010001c4 	movi	r4,7
100044dc:	20bfae16 	blt	r4,r2,10004398 <__alt_data_end+0xf8004398>
100044e0:	42000204 	addi	r8,r8,8
100044e4:	003fb406 	br	100043b8 <__alt_data_end+0xf80043b8>
100044e8:	0021883a 	mov	r16,zero
100044ec:	003dfd06 	br	10003ce4 <__alt_data_end+0xf8003ce4>
100044f0:	01440074 	movhi	r5,4097
100044f4:	29482084 	addi	r5,r5,8322
100044f8:	d9413615 	stw	r5,1240(sp)
100044fc:	003ae306 	br	1000308c <__alt_data_end+0xf800308c>
10004500:	b809883a 	mov	r4,r23
10004504:	b00b883a 	mov	r5,r22
10004508:	d9811e04 	addi	r6,sp,1144
1000450c:	0009bf00 	call	10009bf0 <__sprint_r>
10004510:	1039bf1e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10004514:	d8812617 	ldw	r2,1176(sp)
10004518:	d9413317 	ldw	r5,1228(sp)
1000451c:	d8c12017 	ldw	r3,1152(sp)
10004520:	da000404 	addi	r8,sp,16
10004524:	2885c83a 	sub	r2,r5,r2
10004528:	003ded06 	br	10003ce0 <__alt_data_end+0xf8003ce0>
1000452c:	00800184 	movi	r2,6
10004530:	1240012e 	bgeu	r2,r9,10004538 <___vfprintf_internal_r+0x1d88>
10004534:	1013883a 	mov	r9,r2
10004538:	4823883a 	mov	r17,r9
1000453c:	4805883a 	mov	r2,r9
10004540:	4800b216 	blt	r9,zero,1000480c <___vfprintf_internal_r+0x205c>
10004544:	01440074 	movhi	r5,4097
10004548:	29481a04 	addi	r5,r5,8296
1000454c:	d8812b15 	stw	r2,1196(sp)
10004550:	dc812d15 	stw	r18,1204(sp)
10004554:	d8013215 	stw	zero,1224(sp)
10004558:	d8013415 	stw	zero,1232(sp)
1000455c:	d9413115 	stw	r5,1220(sp)
10004560:	0005883a 	mov	r2,zero
10004564:	003a1906 	br	10002dcc <__alt_data_end+0xf8002dcc>
10004568:	04c00b44 	movi	r19,45
1000456c:	dcc12785 	stb	r19,1182(sp)
10004570:	003b0006 	br	10003174 <__alt_data_end+0xf8003174>
10004574:	d8c12d17 	ldw	r3,1204(sp)
10004578:	d9012f17 	ldw	r4,1212(sp)
1000457c:	18800017 	ldw	r2,0(r3)
10004580:	18c00104 	addi	r3,r3,4
10004584:	d8c12d15 	stw	r3,1204(sp)
10004588:	11000015 	stw	r4,0(r2)
1000458c:	0038c506 	br	100028a4 <__alt_data_end+0xf80028a4>
10004590:	01440074 	movhi	r5,4097
10004594:	29480f04 	addi	r5,r5,8252
10004598:	d9413115 	stw	r5,1220(sp)
1000459c:	003f2406 	br	10004230 <__alt_data_end+0xf8004230>
100045a0:	00800b44 	movi	r2,45
100045a4:	d8812785 	stb	r2,1182(sp)
100045a8:	df012b15 	stw	fp,1196(sp)
100045ac:	d8013215 	stw	zero,1224(sp)
100045b0:	df012d17 	ldw	fp,1204(sp)
100045b4:	00800b44 	movi	r2,45
100045b8:	dc812d15 	stw	r18,1204(sp)
100045bc:	003a0006 	br	10002dc0 <__alt_data_end+0xf8002dc0>
100045c0:	d8c12617 	ldw	r3,1176(sp)
100045c4:	00bfff44 	movi	r2,-3
100045c8:	18800a16 	blt	r3,r2,100045f4 <___vfprintf_internal_r+0x1e44>
100045cc:	48c00916 	blt	r9,r3,100045f4 <___vfprintf_internal_r+0x1e44>
100045d0:	d8c13415 	stw	r3,1232(sp)
100045d4:	040019c4 	movi	r16,103
100045d8:	003e7606 	br	10003fb4 <__alt_data_end+0xf8003fb4>
100045dc:	01040074 	movhi	r4,4097
100045e0:	21081c84 	addi	r4,r4,8306
100045e4:	d9012c15 	stw	r4,1200(sp)
100045e8:	003c8e06 	br	10003824 <__alt_data_end+0xf8003824>
100045ec:	5005883a 	mov	r2,r10
100045f0:	003e6506 	br	10003f88 <__alt_data_end+0xf8003f88>
100045f4:	843fff84 	addi	r16,r16,-2
100045f8:	1d7fffc4 	addi	r21,r3,-1
100045fc:	dd412615 	stw	r21,1176(sp)
10004600:	dc0122c5 	stb	r16,1163(sp)
10004604:	a8009216 	blt	r21,zero,10004850 <___vfprintf_internal_r+0x20a0>
10004608:	00800ac4 	movi	r2,43
1000460c:	d8812305 	stb	r2,1164(sp)
10004610:	00800244 	movi	r2,9
10004614:	1540660e 	bge	r2,r21,100047b0 <___vfprintf_internal_r+0x2000>
10004618:	dcc122c4 	addi	r19,sp,1163
1000461c:	dc012c15 	stw	r16,1200(sp)
10004620:	4023883a 	mov	r17,r8
10004624:	9821883a 	mov	r16,r19
10004628:	a809883a 	mov	r4,r21
1000462c:	01400284 	movi	r5,10
10004630:	000c7c40 	call	1000c7c4 <__modsi3>
10004634:	10800c04 	addi	r2,r2,48
10004638:	843fffc4 	addi	r16,r16,-1
1000463c:	a809883a 	mov	r4,r21
10004640:	01400284 	movi	r5,10
10004644:	80800005 	stb	r2,0(r16)
10004648:	000c7700 	call	1000c770 <__divsi3>
1000464c:	01000244 	movi	r4,9
10004650:	102b883a 	mov	r21,r2
10004654:	20bff416 	blt	r4,r2,10004628 <__alt_data_end+0xf8004628>
10004658:	8811883a 	mov	r8,r17
1000465c:	10800c04 	addi	r2,r2,48
10004660:	8023883a 	mov	r17,r16
10004664:	897fffc4 	addi	r5,r17,-1
10004668:	88bfffc5 	stb	r2,-1(r17)
1000466c:	dc012c17 	ldw	r16,1200(sp)
10004670:	2cc08a2e 	bgeu	r5,r19,1000489c <___vfprintf_internal_r+0x20ec>
10004674:	d9812384 	addi	r6,sp,1166
10004678:	344dc83a 	sub	r6,r6,r17
1000467c:	d9012344 	addi	r4,sp,1165
10004680:	998d883a 	add	r6,r19,r6
10004684:	00000106 	br	1000468c <___vfprintf_internal_r+0x1edc>
10004688:	28800003 	ldbu	r2,0(r5)
1000468c:	20800005 	stb	r2,0(r4)
10004690:	21000044 	addi	r4,r4,1
10004694:	29400044 	addi	r5,r5,1
10004698:	21bffb1e 	bne	r4,r6,10004688 <__alt_data_end+0xf8004688>
1000469c:	d8812304 	addi	r2,sp,1164
100046a0:	1445c83a 	sub	r2,r2,r17
100046a4:	d9412344 	addi	r5,sp,1165
100046a8:	2885883a 	add	r2,r5,r2
100046ac:	14e7c83a 	sub	r19,r2,r19
100046b0:	d8813317 	ldw	r2,1228(sp)
100046b4:	d8c13317 	ldw	r3,1228(sp)
100046b8:	dcc13a15 	stw	r19,1256(sp)
100046bc:	14e3883a 	add	r17,r2,r19
100046c0:	00800044 	movi	r2,1
100046c4:	10c0550e 	bge	r2,r3,1000481c <___vfprintf_internal_r+0x206c>
100046c8:	8c400044 	addi	r17,r17,1
100046cc:	8839883a 	mov	fp,r17
100046d0:	88005016 	blt	r17,zero,10004814 <___vfprintf_internal_r+0x2064>
100046d4:	d8013415 	stw	zero,1232(sp)
100046d8:	003e3f06 	br	10003fd8 <__alt_data_end+0xf8003fd8>
100046dc:	da412b15 	stw	r9,1196(sp)
100046e0:	dcc12783 	ldbu	r19,1182(sp)
100046e4:	4823883a 	mov	r17,r9
100046e8:	dc812d15 	stw	r18,1204(sp)
100046ec:	d8013215 	stw	zero,1224(sp)
100046f0:	d8013415 	stw	zero,1232(sp)
100046f4:	0039ae06 	br	10002db0 <__alt_data_end+0xf8002db0>
100046f8:	483de91e 	bne	r9,zero,10003ea0 <__alt_data_end+0xf8003ea0>
100046fc:	8813883a 	mov	r9,r17
10004700:	003de706 	br	10003ea0 <__alt_data_end+0xf8003ea0>
10004704:	b809883a 	mov	r4,r23
10004708:	b00b883a 	mov	r5,r22
1000470c:	d9811e04 	addi	r6,sp,1144
10004710:	0009bf00 	call	10009bf0 <__sprint_r>
10004714:	10393e1e 	bne	r2,zero,10002c10 <__alt_data_end+0xf8002c10>
10004718:	dc012617 	ldw	r16,1176(sp)
1000471c:	d8c12017 	ldw	r3,1152(sp)
10004720:	d8811f17 	ldw	r2,1148(sp)
10004724:	da000404 	addi	r8,sp,16
10004728:	003ea006 	br	100041ac <__alt_data_end+0xf80041ac>
1000472c:	00c00b44 	movi	r3,45
10004730:	2460003c 	xorhi	r17,r4,32768
10004734:	d8c12b05 	stb	r3,1196(sp)
10004738:	003ddf06 	br	10003eb8 <__alt_data_end+0xf8003eb8>
1000473c:	02400184 	movi	r9,6
10004740:	003dd706 	br	10003ea0 <__alt_data_end+0xf8003ea0>
10004744:	4d400044 	addi	r21,r9,1
10004748:	003de206 	br	10003ed4 <__alt_data_end+0xf8003ed4>
1000474c:	d8c13417 	ldw	r3,1232(sp)
10004750:	00c0490e 	bge	zero,r3,10004878 <___vfprintf_internal_r+0x20c8>
10004754:	04400044 	movi	r17,1
10004758:	d9013317 	ldw	r4,1228(sp)
1000475c:	8923883a 	add	r17,r17,r4
10004760:	8839883a 	mov	fp,r17
10004764:	883e1c0e 	bge	r17,zero,10003fd8 <__alt_data_end+0xf8003fd8>
10004768:	0039883a 	mov	fp,zero
1000476c:	003e1a06 	br	10003fd8 <__alt_data_end+0xf8003fd8>
10004770:	00c03b0e 	bge	zero,r3,10004860 <___vfprintf_internal_r+0x20b0>
10004774:	4800021e 	bne	r9,zero,10004780 <___vfprintf_internal_r+0x1fd0>
10004778:	e080004c 	andi	r2,fp,1
1000477c:	10000626 	beq	r2,zero,10004798 <___vfprintf_internal_r+0x1fe8>
10004780:	d8c13417 	ldw	r3,1232(sp)
10004784:	4a400044 	addi	r9,r9,1
10004788:	1a63883a 	add	r17,r3,r9
1000478c:	8839883a 	mov	fp,r17
10004790:	883e110e 	bge	r17,zero,10003fd8 <__alt_data_end+0xf8003fd8>
10004794:	003ff406 	br	10004768 <__alt_data_end+0xf8004768>
10004798:	1839883a 	mov	fp,r3
1000479c:	18004116 	blt	r3,zero,100048a4 <___vfprintf_internal_r+0x20f4>
100047a0:	dc413417 	ldw	r17,1232(sp)
100047a4:	003e0c06 	br	10003fd8 <__alt_data_end+0xf8003fd8>
100047a8:	d8812117 	ldw	r2,1156(sp)
100047ac:	003df606 	br	10003f88 <__alt_data_end+0xf8003f88>
100047b0:	00800c04 	movi	r2,48
100047b4:	a8c00c04 	addi	r3,r21,48
100047b8:	d8812345 	stb	r2,1165(sp)
100047bc:	d8c12385 	stb	r3,1166(sp)
100047c0:	d88123c4 	addi	r2,sp,1167
100047c4:	dcc122c4 	addi	r19,sp,1163
100047c8:	003fb806 	br	100046ac <__alt_data_end+0xf80046ac>
100047cc:	d9013717 	ldw	r4,1244(sp)
100047d0:	880b883a 	mov	r5,r17
100047d4:	000d883a 	mov	r6,zero
100047d8:	000f883a 	mov	r7,zero
100047dc:	da013f15 	stw	r8,1276(sp)
100047e0:	da413e15 	stw	r9,1272(sp)
100047e4:	da813d15 	stw	r10,1268(sp)
100047e8:	000da740 	call	1000da74 <__eqdf2>
100047ec:	da013f17 	ldw	r8,1276(sp)
100047f0:	da413e17 	ldw	r9,1272(sp)
100047f4:	da813d17 	ldw	r10,1268(sp)
100047f8:	103f1726 	beq	r2,zero,10004458 <__alt_data_end+0xf8004458>
100047fc:	00800044 	movi	r2,1
10004800:	1547c83a 	sub	r3,r2,r21
10004804:	d8c12615 	stw	r3,1176(sp)
10004808:	003f1406 	br	1000445c <__alt_data_end+0xf800445c>
1000480c:	0005883a 	mov	r2,zero
10004810:	003f4c06 	br	10004544 <__alt_data_end+0xf8004544>
10004814:	0039883a 	mov	fp,zero
10004818:	003fae06 	br	100046d4 <__alt_data_end+0xf80046d4>
1000481c:	e084703a 	and	r2,fp,r2
10004820:	103faa26 	beq	r2,zero,100046cc <__alt_data_end+0xf80046cc>
10004824:	003fa806 	br	100046c8 <__alt_data_end+0xf80046c8>
10004828:	d9412d17 	ldw	r5,1204(sp)
1000482c:	2a400017 	ldw	r9,0(r5)
10004830:	28c00104 	addi	r3,r5,4
10004834:	d8c12d15 	stw	r3,1204(sp)
10004838:	483ebc0e 	bge	r9,zero,1000432c <__alt_data_end+0xf800432c>
1000483c:	027fffc4 	movi	r9,-1
10004840:	e4000047 	ldb	r16,1(fp)
10004844:	00384206 	br	10002950 <__alt_data_end+0xf8002950>
10004848:	043fffc4 	movi	r16,-1
1000484c:	0038ce06 	br	10002b88 <__alt_data_end+0xf8002b88>
10004850:	00800b44 	movi	r2,45
10004854:	056bc83a 	sub	r21,zero,r21
10004858:	d8812305 	stb	r2,1164(sp)
1000485c:	003f6c06 	br	10004610 <__alt_data_end+0xf8004610>
10004860:	4800081e 	bne	r9,zero,10004884 <___vfprintf_internal_r+0x20d4>
10004864:	e080004c 	andi	r2,fp,1
10004868:	1000061e 	bne	r2,zero,10004884 <___vfprintf_internal_r+0x20d4>
1000486c:	07000044 	movi	fp,1
10004870:	e023883a 	mov	r17,fp
10004874:	003dd806 	br	10003fd8 <__alt_data_end+0xf8003fd8>
10004878:	04400084 	movi	r17,2
1000487c:	88e3c83a 	sub	r17,r17,r3
10004880:	003fb506 	br	10004758 <__alt_data_end+0xf8004758>
10004884:	4c400084 	addi	r17,r9,2
10004888:	8839883a 	mov	fp,r17
1000488c:	883dd20e 	bge	r17,zero,10003fd8 <__alt_data_end+0xf8003fd8>
10004890:	003fb506 	br	10004768 <__alt_data_end+0xf8004768>
10004894:	d8c12617 	ldw	r3,1176(sp)
10004898:	003f5706 	br	100045f8 <__alt_data_end+0xf80045f8>
1000489c:	d8812344 	addi	r2,sp,1165
100048a0:	003f8206 	br	100046ac <__alt_data_end+0xf80046ac>
100048a4:	0039883a 	mov	fp,zero
100048a8:	003fbd06 	br	100047a0 <__alt_data_end+0xf80047a0>

100048ac <__vfprintf_internal>:
100048ac:	2007883a 	mov	r3,r4
100048b0:	01040074 	movhi	r4,4097
100048b4:	210f7704 	addi	r4,r4,15836
100048b8:	21000017 	ldw	r4,0(r4)
100048bc:	2805883a 	mov	r2,r5
100048c0:	300f883a 	mov	r7,r6
100048c4:	180b883a 	mov	r5,r3
100048c8:	100d883a 	mov	r6,r2
100048cc:	00027b01 	jmpi	100027b0 <___vfprintf_internal_r>

100048d0 <__swsetup_r>:
100048d0:	00840074 	movhi	r2,4097
100048d4:	defffd04 	addi	sp,sp,-12
100048d8:	108f7704 	addi	r2,r2,15836
100048dc:	dc400115 	stw	r17,4(sp)
100048e0:	2023883a 	mov	r17,r4
100048e4:	11000017 	ldw	r4,0(r2)
100048e8:	dc000015 	stw	r16,0(sp)
100048ec:	dfc00215 	stw	ra,8(sp)
100048f0:	2821883a 	mov	r16,r5
100048f4:	20000226 	beq	r4,zero,10004900 <__swsetup_r+0x30>
100048f8:	20c00e17 	ldw	r3,56(r4)
100048fc:	18002e26 	beq	r3,zero,100049b8 <__swsetup_r+0xe8>
10004900:	8080030b 	ldhu	r2,12(r16)
10004904:	10c0020c 	andi	r3,r2,8
10004908:	100d883a 	mov	r6,r2
1000490c:	18000f26 	beq	r3,zero,1000494c <__swsetup_r+0x7c>
10004910:	80c00417 	ldw	r3,16(r16)
10004914:	18001526 	beq	r3,zero,1000496c <__swsetup_r+0x9c>
10004918:	1100004c 	andi	r4,r2,1
1000491c:	20001c1e 	bne	r4,zero,10004990 <__swsetup_r+0xc0>
10004920:	1080008c 	andi	r2,r2,2
10004924:	1000261e 	bne	r2,zero,100049c0 <__swsetup_r+0xf0>
10004928:	80800517 	ldw	r2,20(r16)
1000492c:	80800215 	stw	r2,8(r16)
10004930:	18001c26 	beq	r3,zero,100049a4 <__swsetup_r+0xd4>
10004934:	0005883a 	mov	r2,zero
10004938:	dfc00217 	ldw	ra,8(sp)
1000493c:	dc400117 	ldw	r17,4(sp)
10004940:	dc000017 	ldw	r16,0(sp)
10004944:	dec00304 	addi	sp,sp,12
10004948:	f800283a 	ret
1000494c:	3080040c 	andi	r2,r6,16
10004950:	10001726 	beq	r2,zero,100049b0 <__swsetup_r+0xe0>
10004954:	3080010c 	andi	r2,r6,4
10004958:	10001b1e 	bne	r2,zero,100049c8 <__swsetup_r+0xf8>
1000495c:	80c00417 	ldw	r3,16(r16)
10004960:	30800214 	ori	r2,r6,8
10004964:	8080030d 	sth	r2,12(r16)
10004968:	183feb1e 	bne	r3,zero,10004918 <__alt_data_end+0xf8004918>
1000496c:	1140a00c 	andi	r5,r2,640
10004970:	01008004 	movi	r4,512
10004974:	293fe826 	beq	r5,r4,10004918 <__alt_data_end+0xf8004918>
10004978:	8809883a 	mov	r4,r17
1000497c:	800b883a 	mov	r5,r16
10004980:	00074640 	call	10007464 <__smakebuf_r>
10004984:	8080030b 	ldhu	r2,12(r16)
10004988:	80c00417 	ldw	r3,16(r16)
1000498c:	003fe206 	br	10004918 <__alt_data_end+0xf8004918>
10004990:	80800517 	ldw	r2,20(r16)
10004994:	80000215 	stw	zero,8(r16)
10004998:	0085c83a 	sub	r2,zero,r2
1000499c:	80800615 	stw	r2,24(r16)
100049a0:	183fe41e 	bne	r3,zero,10004934 <__alt_data_end+0xf8004934>
100049a4:	8080030b 	ldhu	r2,12(r16)
100049a8:	1080200c 	andi	r2,r2,128
100049ac:	103fe226 	beq	r2,zero,10004938 <__alt_data_end+0xf8004938>
100049b0:	00bfffc4 	movi	r2,-1
100049b4:	003fe006 	br	10004938 <__alt_data_end+0xf8004938>
100049b8:	000690c0 	call	1000690c <__sinit>
100049bc:	003fd006 	br	10004900 <__alt_data_end+0xf8004900>
100049c0:	0005883a 	mov	r2,zero
100049c4:	003fd906 	br	1000492c <__alt_data_end+0xf800492c>
100049c8:	81400c17 	ldw	r5,48(r16)
100049cc:	28000626 	beq	r5,zero,100049e8 <__swsetup_r+0x118>
100049d0:	80801004 	addi	r2,r16,64
100049d4:	28800326 	beq	r5,r2,100049e4 <__swsetup_r+0x114>
100049d8:	8809883a 	mov	r4,r17
100049dc:	0006a800 	call	10006a80 <_free_r>
100049e0:	8180030b 	ldhu	r6,12(r16)
100049e4:	80000c15 	stw	zero,48(r16)
100049e8:	80c00417 	ldw	r3,16(r16)
100049ec:	00bff6c4 	movi	r2,-37
100049f0:	118c703a 	and	r6,r2,r6
100049f4:	80000115 	stw	zero,4(r16)
100049f8:	80c00015 	stw	r3,0(r16)
100049fc:	003fd806 	br	10004960 <__alt_data_end+0xf8004960>

10004a00 <quorem>:
10004a00:	defff204 	addi	sp,sp,-56
10004a04:	ddc00b15 	stw	r23,44(sp)
10004a08:	20800417 	ldw	r2,16(r4)
10004a0c:	2dc00417 	ldw	r23,16(r5)
10004a10:	dfc00d15 	stw	ra,52(sp)
10004a14:	df000c15 	stw	fp,48(sp)
10004a18:	dd800a15 	stw	r22,40(sp)
10004a1c:	dd400915 	stw	r21,36(sp)
10004a20:	dd000815 	stw	r20,32(sp)
10004a24:	dcc00715 	stw	r19,28(sp)
10004a28:	dc800615 	stw	r18,24(sp)
10004a2c:	dc400515 	stw	r17,20(sp)
10004a30:	dc000415 	stw	r16,16(sp)
10004a34:	15c07a16 	blt	r2,r23,10004c20 <quorem+0x220>
10004a38:	bdffffc4 	addi	r23,r23,-1
10004a3c:	bde9883a 	add	r20,r23,r23
10004a40:	28c00504 	addi	r3,r5,20
10004a44:	a529883a 	add	r20,r20,r20
10004a48:	1d39883a 	add	fp,r3,r20
10004a4c:	24c00504 	addi	r19,r4,20
10004a50:	d9400215 	stw	r5,8(sp)
10004a54:	9d29883a 	add	r20,r19,r20
10004a58:	e1400017 	ldw	r5,0(fp)
10004a5c:	d9000015 	stw	r4,0(sp)
10004a60:	a1000017 	ldw	r4,0(r20)
10004a64:	29400044 	addi	r5,r5,1
10004a68:	d8c00115 	stw	r3,4(sp)
10004a6c:	dd000315 	stw	r20,12(sp)
10004a70:	000c8200 	call	1000c820 <__udivsi3>
10004a74:	1025883a 	mov	r18,r2
10004a78:	10003026 	beq	r2,zero,10004b3c <quorem+0x13c>
10004a7c:	dc400117 	ldw	r17,4(sp)
10004a80:	9829883a 	mov	r20,r19
10004a84:	002d883a 	mov	r22,zero
10004a88:	0021883a 	mov	r16,zero
10004a8c:	8d400017 	ldw	r21,0(r17)
10004a90:	900b883a 	mov	r5,r18
10004a94:	8c400104 	addi	r17,r17,4
10004a98:	a93fffcc 	andi	r4,r21,65535
10004a9c:	000c8300 	call	1000c830 <__mulsi3>
10004aa0:	a808d43a 	srli	r4,r21,16
10004aa4:	900b883a 	mov	r5,r18
10004aa8:	b0ad883a 	add	r22,r22,r2
10004aac:	000c8300 	call	1000c830 <__mulsi3>
10004ab0:	a1000017 	ldw	r4,0(r20)
10004ab4:	b00cd43a 	srli	r6,r22,16
10004ab8:	b0ffffcc 	andi	r3,r22,65535
10004abc:	217fffcc 	andi	r5,r4,65535
10004ac0:	2c21883a 	add	r16,r5,r16
10004ac4:	80c7c83a 	sub	r3,r16,r3
10004ac8:	2008d43a 	srli	r4,r4,16
10004acc:	3085883a 	add	r2,r6,r2
10004ad0:	1821d43a 	srai	r16,r3,16
10004ad4:	117fffcc 	andi	r5,r2,65535
10004ad8:	2149c83a 	sub	r4,r4,r5
10004adc:	2421883a 	add	r16,r4,r16
10004ae0:	8008943a 	slli	r4,r16,16
10004ae4:	18ffffcc 	andi	r3,r3,65535
10004ae8:	102cd43a 	srli	r22,r2,16
10004aec:	20c8b03a 	or	r4,r4,r3
10004af0:	a1000015 	stw	r4,0(r20)
10004af4:	8021d43a 	srai	r16,r16,16
10004af8:	a5000104 	addi	r20,r20,4
10004afc:	e47fe32e 	bgeu	fp,r17,10004a8c <__alt_data_end+0xf8004a8c>
10004b00:	d8c00317 	ldw	r3,12(sp)
10004b04:	18800017 	ldw	r2,0(r3)
10004b08:	10000c1e 	bne	r2,zero,10004b3c <quorem+0x13c>
10004b0c:	18bfff04 	addi	r2,r3,-4
10004b10:	9880082e 	bgeu	r19,r2,10004b34 <quorem+0x134>
10004b14:	18ffff17 	ldw	r3,-4(r3)
10004b18:	18000326 	beq	r3,zero,10004b28 <quorem+0x128>
10004b1c:	00000506 	br	10004b34 <quorem+0x134>
10004b20:	10c00017 	ldw	r3,0(r2)
10004b24:	1800031e 	bne	r3,zero,10004b34 <quorem+0x134>
10004b28:	10bfff04 	addi	r2,r2,-4
10004b2c:	bdffffc4 	addi	r23,r23,-1
10004b30:	98bffb36 	bltu	r19,r2,10004b20 <__alt_data_end+0xf8004b20>
10004b34:	d8c00017 	ldw	r3,0(sp)
10004b38:	1dc00415 	stw	r23,16(r3)
10004b3c:	d9000017 	ldw	r4,0(sp)
10004b40:	d9400217 	ldw	r5,8(sp)
10004b44:	0008be00 	call	10008be0 <__mcmp>
10004b48:	10002816 	blt	r2,zero,10004bec <quorem+0x1ec>
10004b4c:	dc400117 	ldw	r17,4(sp)
10004b50:	94800044 	addi	r18,r18,1
10004b54:	980d883a 	mov	r6,r19
10004b58:	0007883a 	mov	r3,zero
10004b5c:	31000017 	ldw	r4,0(r6)
10004b60:	89400017 	ldw	r5,0(r17)
10004b64:	31800104 	addi	r6,r6,4
10004b68:	20bfffcc 	andi	r2,r4,65535
10004b6c:	10c7883a 	add	r3,r2,r3
10004b70:	28bfffcc 	andi	r2,r5,65535
10004b74:	1885c83a 	sub	r2,r3,r2
10004b78:	280ad43a 	srli	r5,r5,16
10004b7c:	2008d43a 	srli	r4,r4,16
10004b80:	1007d43a 	srai	r3,r2,16
10004b84:	10bfffcc 	andi	r2,r2,65535
10004b88:	2149c83a 	sub	r4,r4,r5
10004b8c:	20c9883a 	add	r4,r4,r3
10004b90:	200a943a 	slli	r5,r4,16
10004b94:	8c400104 	addi	r17,r17,4
10004b98:	2007d43a 	srai	r3,r4,16
10004b9c:	2884b03a 	or	r2,r5,r2
10004ba0:	30bfff15 	stw	r2,-4(r6)
10004ba4:	e47fed2e 	bgeu	fp,r17,10004b5c <__alt_data_end+0xf8004b5c>
10004ba8:	bdc5883a 	add	r2,r23,r23
10004bac:	1085883a 	add	r2,r2,r2
10004bb0:	9887883a 	add	r3,r19,r2
10004bb4:	18800017 	ldw	r2,0(r3)
10004bb8:	10000c1e 	bne	r2,zero,10004bec <quorem+0x1ec>
10004bbc:	18bfff04 	addi	r2,r3,-4
10004bc0:	9880082e 	bgeu	r19,r2,10004be4 <quorem+0x1e4>
10004bc4:	18ffff17 	ldw	r3,-4(r3)
10004bc8:	18000326 	beq	r3,zero,10004bd8 <quorem+0x1d8>
10004bcc:	00000506 	br	10004be4 <quorem+0x1e4>
10004bd0:	10c00017 	ldw	r3,0(r2)
10004bd4:	1800031e 	bne	r3,zero,10004be4 <quorem+0x1e4>
10004bd8:	10bfff04 	addi	r2,r2,-4
10004bdc:	bdffffc4 	addi	r23,r23,-1
10004be0:	98bffb36 	bltu	r19,r2,10004bd0 <__alt_data_end+0xf8004bd0>
10004be4:	d8c00017 	ldw	r3,0(sp)
10004be8:	1dc00415 	stw	r23,16(r3)
10004bec:	9005883a 	mov	r2,r18
10004bf0:	dfc00d17 	ldw	ra,52(sp)
10004bf4:	df000c17 	ldw	fp,48(sp)
10004bf8:	ddc00b17 	ldw	r23,44(sp)
10004bfc:	dd800a17 	ldw	r22,40(sp)
10004c00:	dd400917 	ldw	r21,36(sp)
10004c04:	dd000817 	ldw	r20,32(sp)
10004c08:	dcc00717 	ldw	r19,28(sp)
10004c0c:	dc800617 	ldw	r18,24(sp)
10004c10:	dc400517 	ldw	r17,20(sp)
10004c14:	dc000417 	ldw	r16,16(sp)
10004c18:	dec00e04 	addi	sp,sp,56
10004c1c:	f800283a 	ret
10004c20:	0005883a 	mov	r2,zero
10004c24:	003ff206 	br	10004bf0 <__alt_data_end+0xf8004bf0>

10004c28 <_dtoa_r>:
10004c28:	20801017 	ldw	r2,64(r4)
10004c2c:	deffde04 	addi	sp,sp,-136
10004c30:	dd401d15 	stw	r21,116(sp)
10004c34:	dcc01b15 	stw	r19,108(sp)
10004c38:	dc801a15 	stw	r18,104(sp)
10004c3c:	dc401915 	stw	r17,100(sp)
10004c40:	dc001815 	stw	r16,96(sp)
10004c44:	dfc02115 	stw	ra,132(sp)
10004c48:	df002015 	stw	fp,128(sp)
10004c4c:	ddc01f15 	stw	r23,124(sp)
10004c50:	dd801e15 	stw	r22,120(sp)
10004c54:	dd001c15 	stw	r20,112(sp)
10004c58:	d9c00315 	stw	r7,12(sp)
10004c5c:	2021883a 	mov	r16,r4
10004c60:	302b883a 	mov	r21,r6
10004c64:	2825883a 	mov	r18,r5
10004c68:	dc402417 	ldw	r17,144(sp)
10004c6c:	3027883a 	mov	r19,r6
10004c70:	10000826 	beq	r2,zero,10004c94 <_dtoa_r+0x6c>
10004c74:	21801117 	ldw	r6,68(r4)
10004c78:	00c00044 	movi	r3,1
10004c7c:	100b883a 	mov	r5,r2
10004c80:	1986983a 	sll	r3,r3,r6
10004c84:	11800115 	stw	r6,4(r2)
10004c88:	10c00215 	stw	r3,8(r2)
10004c8c:	000830c0 	call	1000830c <_Bfree>
10004c90:	80001015 	stw	zero,64(r16)
10004c94:	a8002d16 	blt	r21,zero,10004d4c <_dtoa_r+0x124>
10004c98:	88000015 	stw	zero,0(r17)
10004c9c:	a8dffc2c 	andhi	r3,r21,32752
10004ca0:	009ffc34 	movhi	r2,32752
10004ca4:	18801b26 	beq	r3,r2,10004d14 <_dtoa_r+0xec>
10004ca8:	9009883a 	mov	r4,r18
10004cac:	980b883a 	mov	r5,r19
10004cb0:	000d883a 	mov	r6,zero
10004cb4:	000f883a 	mov	r7,zero
10004cb8:	000da740 	call	1000da74 <__eqdf2>
10004cbc:	10002a1e 	bne	r2,zero,10004d68 <_dtoa_r+0x140>
10004cc0:	d8c02317 	ldw	r3,140(sp)
10004cc4:	d9002517 	ldw	r4,148(sp)
10004cc8:	00800044 	movi	r2,1
10004ccc:	18800015 	stw	r2,0(r3)
10004cd0:	2001a226 	beq	r4,zero,1000535c <_dtoa_r+0x734>
10004cd4:	00840074 	movhi	r2,4097
10004cd8:	10881c44 	addi	r2,r2,8305
10004cdc:	20800015 	stw	r2,0(r4)
10004ce0:	10bfffc4 	addi	r2,r2,-1
10004ce4:	dfc02117 	ldw	ra,132(sp)
10004ce8:	df002017 	ldw	fp,128(sp)
10004cec:	ddc01f17 	ldw	r23,124(sp)
10004cf0:	dd801e17 	ldw	r22,120(sp)
10004cf4:	dd401d17 	ldw	r21,116(sp)
10004cf8:	dd001c17 	ldw	r20,112(sp)
10004cfc:	dcc01b17 	ldw	r19,108(sp)
10004d00:	dc801a17 	ldw	r18,104(sp)
10004d04:	dc401917 	ldw	r17,100(sp)
10004d08:	dc001817 	ldw	r16,96(sp)
10004d0c:	dec02204 	addi	sp,sp,136
10004d10:	f800283a 	ret
10004d14:	d8c02317 	ldw	r3,140(sp)
10004d18:	0089c3c4 	movi	r2,9999
10004d1c:	18800015 	stw	r2,0(r3)
10004d20:	90017c26 	beq	r18,zero,10005314 <_dtoa_r+0x6ec>
10004d24:	00840074 	movhi	r2,4097
10004d28:	10882804 	addi	r2,r2,8352
10004d2c:	d9002517 	ldw	r4,148(sp)
10004d30:	203fec26 	beq	r4,zero,10004ce4 <__alt_data_end+0xf8004ce4>
10004d34:	10c000c7 	ldb	r3,3(r2)
10004d38:	18017d1e 	bne	r3,zero,10005330 <_dtoa_r+0x708>
10004d3c:	10c000c4 	addi	r3,r2,3
10004d40:	d9802517 	ldw	r6,148(sp)
10004d44:	30c00015 	stw	r3,0(r6)
10004d48:	003fe606 	br	10004ce4 <__alt_data_end+0xf8004ce4>
10004d4c:	04e00034 	movhi	r19,32768
10004d50:	9cffffc4 	addi	r19,r19,-1
10004d54:	00800044 	movi	r2,1
10004d58:	ace6703a 	and	r19,r21,r19
10004d5c:	88800015 	stw	r2,0(r17)
10004d60:	982b883a 	mov	r21,r19
10004d64:	003fcd06 	br	10004c9c <__alt_data_end+0xf8004c9c>
10004d68:	d8800204 	addi	r2,sp,8
10004d6c:	a822d53a 	srli	r17,r21,20
10004d70:	d8800015 	stw	r2,0(sp)
10004d74:	8009883a 	mov	r4,r16
10004d78:	900b883a 	mov	r5,r18
10004d7c:	980d883a 	mov	r6,r19
10004d80:	d9c00104 	addi	r7,sp,4
10004d84:	0008f540 	call	10008f54 <__d2b>
10004d88:	1039883a 	mov	fp,r2
10004d8c:	88016a1e 	bne	r17,zero,10005338 <_dtoa_r+0x710>
10004d90:	dd000217 	ldw	r20,8(sp)
10004d94:	dc400117 	ldw	r17,4(sp)
10004d98:	00befbc4 	movi	r2,-1041
10004d9c:	a463883a 	add	r17,r20,r17
10004da0:	8882ea16 	blt	r17,r2,1000594c <_dtoa_r+0xd24>
10004da4:	00bf0384 	movi	r2,-1010
10004da8:	1445c83a 	sub	r2,r2,r17
10004dac:	89010484 	addi	r4,r17,1042
10004db0:	a8aa983a 	sll	r21,r21,r2
10004db4:	9108d83a 	srl	r4,r18,r4
10004db8:	a908b03a 	or	r4,r21,r4
10004dbc:	000ef4c0 	call	1000ef4c <__floatunsidf>
10004dc0:	017f8434 	movhi	r5,65040
10004dc4:	01800044 	movi	r6,1
10004dc8:	1009883a 	mov	r4,r2
10004dcc:	194b883a 	add	r5,r3,r5
10004dd0:	8c7fffc4 	addi	r17,r17,-1
10004dd4:	d9800f15 	stw	r6,60(sp)
10004dd8:	000d883a 	mov	r6,zero
10004ddc:	01cffe34 	movhi	r7,16376
10004de0:	000e5240 	call	1000e524 <__subdf3>
10004de4:	0198dbf4 	movhi	r6,25455
10004de8:	01cff4f4 	movhi	r7,16339
10004dec:	1009883a 	mov	r4,r2
10004df0:	180b883a 	mov	r5,r3
10004df4:	3190d844 	addi	r6,r6,17249
10004df8:	39e1e9c4 	addi	r7,r7,-30809
10004dfc:	000dcb80 	call	1000dcb8 <__muldf3>
10004e00:	01a2d874 	movhi	r6,35681
10004e04:	01cff1f4 	movhi	r7,16327
10004e08:	180b883a 	mov	r5,r3
10004e0c:	31b22cc4 	addi	r6,r6,-14157
10004e10:	39e28a04 	addi	r7,r7,-30168
10004e14:	1009883a 	mov	r4,r2
10004e18:	000c8580 	call	1000c858 <__adddf3>
10004e1c:	8809883a 	mov	r4,r17
10004e20:	102d883a 	mov	r22,r2
10004e24:	182b883a 	mov	r21,r3
10004e28:	000ee7c0 	call	1000ee7c <__floatsidf>
10004e2c:	019427f4 	movhi	r6,20639
10004e30:	01cff4f4 	movhi	r7,16339
10004e34:	1009883a 	mov	r4,r2
10004e38:	180b883a 	mov	r5,r3
10004e3c:	319e7ec4 	addi	r6,r6,31227
10004e40:	39d104c4 	addi	r7,r7,17427
10004e44:	000dcb80 	call	1000dcb8 <__muldf3>
10004e48:	b009883a 	mov	r4,r22
10004e4c:	a80b883a 	mov	r5,r21
10004e50:	100d883a 	mov	r6,r2
10004e54:	180f883a 	mov	r7,r3
10004e58:	000c8580 	call	1000c858 <__adddf3>
10004e5c:	1009883a 	mov	r4,r2
10004e60:	180b883a 	mov	r5,r3
10004e64:	102d883a 	mov	r22,r2
10004e68:	182b883a 	mov	r21,r3
10004e6c:	000edf40 	call	1000edf4 <__fixdfsi>
10004e70:	b009883a 	mov	r4,r22
10004e74:	a80b883a 	mov	r5,r21
10004e78:	000d883a 	mov	r6,zero
10004e7c:	000f883a 	mov	r7,zero
10004e80:	d8800515 	stw	r2,20(sp)
10004e84:	000dbd80 	call	1000dbd8 <__ledf2>
10004e88:	10023116 	blt	r2,zero,10005750 <_dtoa_r+0xb28>
10004e8c:	d8c00517 	ldw	r3,20(sp)
10004e90:	00800584 	movi	r2,22
10004e94:	10c21f36 	bltu	r2,r3,10005714 <_dtoa_r+0xaec>
10004e98:	180490fa 	slli	r2,r3,3
10004e9c:	00c40074 	movhi	r3,4097
10004ea0:	18c84404 	addi	r3,r3,8464
10004ea4:	1885883a 	add	r2,r3,r2
10004ea8:	11000017 	ldw	r4,0(r2)
10004eac:	11400117 	ldw	r5,4(r2)
10004eb0:	900d883a 	mov	r6,r18
10004eb4:	980f883a 	mov	r7,r19
10004eb8:	000daf80 	call	1000daf8 <__gedf2>
10004ebc:	0082a70e 	bge	zero,r2,1000595c <_dtoa_r+0xd34>
10004ec0:	d9000517 	ldw	r4,20(sp)
10004ec4:	d8000c15 	stw	zero,48(sp)
10004ec8:	213fffc4 	addi	r4,r4,-1
10004ecc:	d9000515 	stw	r4,20(sp)
10004ed0:	a463c83a 	sub	r17,r20,r17
10004ed4:	8dbfffc4 	addi	r22,r17,-1
10004ed8:	b0021916 	blt	r22,zero,10005740 <_dtoa_r+0xb18>
10004edc:	d8000815 	stw	zero,32(sp)
10004ee0:	d8800517 	ldw	r2,20(sp)
10004ee4:	10020e16 	blt	r2,zero,10005720 <_dtoa_r+0xaf8>
10004ee8:	b0ad883a 	add	r22,r22,r2
10004eec:	d8800a15 	stw	r2,40(sp)
10004ef0:	d8000915 	stw	zero,36(sp)
10004ef4:	d8c00317 	ldw	r3,12(sp)
10004ef8:	00800244 	movi	r2,9
10004efc:	10c11a36 	bltu	r2,r3,10005368 <_dtoa_r+0x740>
10004f00:	00800144 	movi	r2,5
10004f04:	10c4fc0e 	bge	r2,r3,100062f8 <_dtoa_r+0x16d0>
10004f08:	18ffff04 	addi	r3,r3,-4
10004f0c:	d8c00315 	stw	r3,12(sp)
10004f10:	0029883a 	mov	r20,zero
10004f14:	d9800317 	ldw	r6,12(sp)
10004f18:	008000c4 	movi	r2,3
10004f1c:	3083bd26 	beq	r6,r2,10005e14 <_dtoa_r+0x11ec>
10004f20:	1183670e 	bge	r2,r6,10005cc0 <_dtoa_r+0x1098>
10004f24:	d8c00317 	ldw	r3,12(sp)
10004f28:	00800104 	movi	r2,4
10004f2c:	1882e726 	beq	r3,r2,10005acc <_dtoa_r+0xea4>
10004f30:	00800144 	movi	r2,5
10004f34:	1884f21e 	bne	r3,r2,10006300 <_dtoa_r+0x16d8>
10004f38:	00800044 	movi	r2,1
10004f3c:	d8800b15 	stw	r2,44(sp)
10004f40:	d8c02217 	ldw	r3,136(sp)
10004f44:	d9000517 	ldw	r4,20(sp)
10004f48:	1907883a 	add	r3,r3,r4
10004f4c:	19800044 	addi	r6,r3,1
10004f50:	d8c00d15 	stw	r3,52(sp)
10004f54:	d9800615 	stw	r6,24(sp)
10004f58:	0183c30e 	bge	zero,r6,10005e68 <_dtoa_r+0x1240>
10004f5c:	d9800617 	ldw	r6,24(sp)
10004f60:	3023883a 	mov	r17,r6
10004f64:	80001115 	stw	zero,68(r16)
10004f68:	008005c4 	movi	r2,23
10004f6c:	1184f62e 	bgeu	r2,r6,10006348 <_dtoa_r+0x1720>
10004f70:	00c00044 	movi	r3,1
10004f74:	00800104 	movi	r2,4
10004f78:	1085883a 	add	r2,r2,r2
10004f7c:	11000504 	addi	r4,r2,20
10004f80:	180b883a 	mov	r5,r3
10004f84:	18c00044 	addi	r3,r3,1
10004f88:	313ffb2e 	bgeu	r6,r4,10004f78 <__alt_data_end+0xf8004f78>
10004f8c:	81401115 	stw	r5,68(r16)
10004f90:	8009883a 	mov	r4,r16
10004f94:	00082640 	call	10008264 <_Balloc>
10004f98:	d8800715 	stw	r2,28(sp)
10004f9c:	80801015 	stw	r2,64(r16)
10004fa0:	00800384 	movi	r2,14
10004fa4:	1440fd36 	bltu	r2,r17,1000539c <_dtoa_r+0x774>
10004fa8:	a000fc26 	beq	r20,zero,1000539c <_dtoa_r+0x774>
10004fac:	d8800517 	ldw	r2,20(sp)
10004fb0:	0083b90e 	bge	zero,r2,10005e98 <_dtoa_r+0x1270>
10004fb4:	d8c00517 	ldw	r3,20(sp)
10004fb8:	108003cc 	andi	r2,r2,15
10004fbc:	100490fa 	slli	r2,r2,3
10004fc0:	182fd13a 	srai	r23,r3,4
10004fc4:	00c40074 	movhi	r3,4097
10004fc8:	18c84404 	addi	r3,r3,8464
10004fcc:	1885883a 	add	r2,r3,r2
10004fd0:	b8c0040c 	andi	r3,r23,16
10004fd4:	12c00017 	ldw	r11,0(r2)
10004fd8:	12800117 	ldw	r10,4(r2)
10004fdc:	18039726 	beq	r3,zero,10005e3c <_dtoa_r+0x1214>
10004fe0:	00840074 	movhi	r2,4097
10004fe4:	10883a04 	addi	r2,r2,8424
10004fe8:	11800817 	ldw	r6,32(r2)
10004fec:	11c00917 	ldw	r7,36(r2)
10004ff0:	9009883a 	mov	r4,r18
10004ff4:	980b883a 	mov	r5,r19
10004ff8:	da801615 	stw	r10,88(sp)
10004ffc:	dac01515 	stw	r11,84(sp)
10005000:	000d0f40 	call	1000d0f4 <__divdf3>
10005004:	da801617 	ldw	r10,88(sp)
10005008:	dac01517 	ldw	r11,84(sp)
1000500c:	bdc003cc 	andi	r23,r23,15
10005010:	044000c4 	movi	r17,3
10005014:	d8800e15 	stw	r2,56(sp)
10005018:	182b883a 	mov	r21,r3
1000501c:	b8001126 	beq	r23,zero,10005064 <_dtoa_r+0x43c>
10005020:	05040074 	movhi	r20,4097
10005024:	a5083a04 	addi	r20,r20,8424
10005028:	5805883a 	mov	r2,r11
1000502c:	5007883a 	mov	r3,r10
10005030:	b980004c 	andi	r6,r23,1
10005034:	1009883a 	mov	r4,r2
10005038:	b82fd07a 	srai	r23,r23,1
1000503c:	180b883a 	mov	r5,r3
10005040:	30000426 	beq	r6,zero,10005054 <_dtoa_r+0x42c>
10005044:	a1800017 	ldw	r6,0(r20)
10005048:	a1c00117 	ldw	r7,4(r20)
1000504c:	8c400044 	addi	r17,r17,1
10005050:	000dcb80 	call	1000dcb8 <__muldf3>
10005054:	a5000204 	addi	r20,r20,8
10005058:	b83ff51e 	bne	r23,zero,10005030 <__alt_data_end+0xf8005030>
1000505c:	1017883a 	mov	r11,r2
10005060:	1815883a 	mov	r10,r3
10005064:	d9000e17 	ldw	r4,56(sp)
10005068:	a80b883a 	mov	r5,r21
1000506c:	580d883a 	mov	r6,r11
10005070:	500f883a 	mov	r7,r10
10005074:	000d0f40 	call	1000d0f4 <__divdf3>
10005078:	1029883a 	mov	r20,r2
1000507c:	182b883a 	mov	r21,r3
10005080:	d9800c17 	ldw	r6,48(sp)
10005084:	30000626 	beq	r6,zero,100050a0 <_dtoa_r+0x478>
10005088:	a009883a 	mov	r4,r20
1000508c:	a80b883a 	mov	r5,r21
10005090:	000d883a 	mov	r6,zero
10005094:	01cffc34 	movhi	r7,16368
10005098:	000dbd80 	call	1000dbd8 <__ledf2>
1000509c:	10043216 	blt	r2,zero,10006168 <_dtoa_r+0x1540>
100050a0:	8809883a 	mov	r4,r17
100050a4:	000ee7c0 	call	1000ee7c <__floatsidf>
100050a8:	1009883a 	mov	r4,r2
100050ac:	180b883a 	mov	r5,r3
100050b0:	a00d883a 	mov	r6,r20
100050b4:	a80f883a 	mov	r7,r21
100050b8:	000dcb80 	call	1000dcb8 <__muldf3>
100050bc:	000d883a 	mov	r6,zero
100050c0:	1009883a 	mov	r4,r2
100050c4:	180b883a 	mov	r5,r3
100050c8:	01d00734 	movhi	r7,16412
100050cc:	000c8580 	call	1000c858 <__adddf3>
100050d0:	1023883a 	mov	r17,r2
100050d4:	d9800617 	ldw	r6,24(sp)
100050d8:	00bf3034 	movhi	r2,64704
100050dc:	1885883a 	add	r2,r3,r2
100050e0:	d8800e15 	stw	r2,56(sp)
100050e4:	30032e26 	beq	r6,zero,10005da0 <_dtoa_r+0x1178>
100050e8:	d8c00517 	ldw	r3,20(sp)
100050ec:	da800617 	ldw	r10,24(sp)
100050f0:	d8c01215 	stw	r3,72(sp)
100050f4:	d9000b17 	ldw	r4,44(sp)
100050f8:	2003b026 	beq	r4,zero,10005fbc <_dtoa_r+0x1394>
100050fc:	50bfffc4 	addi	r2,r10,-1
10005100:	100490fa 	slli	r2,r2,3
10005104:	00c40074 	movhi	r3,4097
10005108:	18c84404 	addi	r3,r3,8464
1000510c:	1885883a 	add	r2,r3,r2
10005110:	11800017 	ldw	r6,0(r2)
10005114:	11c00117 	ldw	r7,4(r2)
10005118:	d8800717 	ldw	r2,28(sp)
1000511c:	0009883a 	mov	r4,zero
10005120:	014ff834 	movhi	r5,16352
10005124:	da801615 	stw	r10,88(sp)
10005128:	15c00044 	addi	r23,r2,1
1000512c:	000d0f40 	call	1000d0f4 <__divdf3>
10005130:	d9c00e17 	ldw	r7,56(sp)
10005134:	880d883a 	mov	r6,r17
10005138:	1009883a 	mov	r4,r2
1000513c:	180b883a 	mov	r5,r3
10005140:	000e5240 	call	1000e524 <__subdf3>
10005144:	a80b883a 	mov	r5,r21
10005148:	a009883a 	mov	r4,r20
1000514c:	d8c01015 	stw	r3,64(sp)
10005150:	d8800e15 	stw	r2,56(sp)
10005154:	000edf40 	call	1000edf4 <__fixdfsi>
10005158:	1009883a 	mov	r4,r2
1000515c:	d8801715 	stw	r2,92(sp)
10005160:	000ee7c0 	call	1000ee7c <__floatsidf>
10005164:	a009883a 	mov	r4,r20
10005168:	a80b883a 	mov	r5,r21
1000516c:	100d883a 	mov	r6,r2
10005170:	180f883a 	mov	r7,r3
10005174:	000e5240 	call	1000e524 <__subdf3>
10005178:	da001717 	ldw	r8,92(sp)
1000517c:	1829883a 	mov	r20,r3
10005180:	d8c00717 	ldw	r3,28(sp)
10005184:	d9000e17 	ldw	r4,56(sp)
10005188:	d9401017 	ldw	r5,64(sp)
1000518c:	42000c04 	addi	r8,r8,48
10005190:	1023883a 	mov	r17,r2
10005194:	1a000005 	stb	r8,0(r3)
10005198:	880d883a 	mov	r6,r17
1000519c:	a00f883a 	mov	r7,r20
100051a0:	402b883a 	mov	r21,r8
100051a4:	000daf80 	call	1000daf8 <__gedf2>
100051a8:	00844516 	blt	zero,r2,100062c0 <_dtoa_r+0x1698>
100051ac:	0009883a 	mov	r4,zero
100051b0:	014ffc34 	movhi	r5,16368
100051b4:	880d883a 	mov	r6,r17
100051b8:	a00f883a 	mov	r7,r20
100051bc:	000e5240 	call	1000e524 <__subdf3>
100051c0:	d9000e17 	ldw	r4,56(sp)
100051c4:	d9401017 	ldw	r5,64(sp)
100051c8:	100d883a 	mov	r6,r2
100051cc:	180f883a 	mov	r7,r3
100051d0:	000daf80 	call	1000daf8 <__gedf2>
100051d4:	da801617 	ldw	r10,88(sp)
100051d8:	00843616 	blt	zero,r2,100062b4 <_dtoa_r+0x168c>
100051dc:	00800044 	movi	r2,1
100051e0:	12806e0e 	bge	r2,r10,1000539c <_dtoa_r+0x774>
100051e4:	d9000717 	ldw	r4,28(sp)
100051e8:	dd801315 	stw	r22,76(sp)
100051ec:	dc001115 	stw	r16,68(sp)
100051f0:	2295883a 	add	r10,r4,r10
100051f4:	dcc01415 	stw	r19,80(sp)
100051f8:	502d883a 	mov	r22,r10
100051fc:	dcc01017 	ldw	r19,64(sp)
10005200:	b821883a 	mov	r16,r23
10005204:	dc801015 	stw	r18,64(sp)
10005208:	dc800e17 	ldw	r18,56(sp)
1000520c:	00000906 	br	10005234 <_dtoa_r+0x60c>
10005210:	000e5240 	call	1000e524 <__subdf3>
10005214:	1009883a 	mov	r4,r2
10005218:	180b883a 	mov	r5,r3
1000521c:	900d883a 	mov	r6,r18
10005220:	980f883a 	mov	r7,r19
10005224:	000dbd80 	call	1000dbd8 <__ledf2>
10005228:	10040e16 	blt	r2,zero,10006264 <_dtoa_r+0x163c>
1000522c:	b821883a 	mov	r16,r23
10005230:	bd841026 	beq	r23,r22,10006274 <_dtoa_r+0x164c>
10005234:	9009883a 	mov	r4,r18
10005238:	980b883a 	mov	r5,r19
1000523c:	000d883a 	mov	r6,zero
10005240:	01d00934 	movhi	r7,16420
10005244:	000dcb80 	call	1000dcb8 <__muldf3>
10005248:	000d883a 	mov	r6,zero
1000524c:	01d00934 	movhi	r7,16420
10005250:	8809883a 	mov	r4,r17
10005254:	a00b883a 	mov	r5,r20
10005258:	1025883a 	mov	r18,r2
1000525c:	1827883a 	mov	r19,r3
10005260:	000dcb80 	call	1000dcb8 <__muldf3>
10005264:	180b883a 	mov	r5,r3
10005268:	1009883a 	mov	r4,r2
1000526c:	1823883a 	mov	r17,r3
10005270:	1029883a 	mov	r20,r2
10005274:	000edf40 	call	1000edf4 <__fixdfsi>
10005278:	1009883a 	mov	r4,r2
1000527c:	102b883a 	mov	r21,r2
10005280:	000ee7c0 	call	1000ee7c <__floatsidf>
10005284:	a009883a 	mov	r4,r20
10005288:	880b883a 	mov	r5,r17
1000528c:	100d883a 	mov	r6,r2
10005290:	180f883a 	mov	r7,r3
10005294:	000e5240 	call	1000e524 <__subdf3>
10005298:	ad400c04 	addi	r21,r21,48
1000529c:	1009883a 	mov	r4,r2
100052a0:	180b883a 	mov	r5,r3
100052a4:	900d883a 	mov	r6,r18
100052a8:	980f883a 	mov	r7,r19
100052ac:	85400005 	stb	r21,0(r16)
100052b0:	1023883a 	mov	r17,r2
100052b4:	1829883a 	mov	r20,r3
100052b8:	000dbd80 	call	1000dbd8 <__ledf2>
100052bc:	bdc00044 	addi	r23,r23,1
100052c0:	0009883a 	mov	r4,zero
100052c4:	014ffc34 	movhi	r5,16368
100052c8:	880d883a 	mov	r6,r17
100052cc:	a00f883a 	mov	r7,r20
100052d0:	103fcf0e 	bge	r2,zero,10005210 <__alt_data_end+0xf8005210>
100052d4:	d9801217 	ldw	r6,72(sp)
100052d8:	dc001117 	ldw	r16,68(sp)
100052dc:	d9800515 	stw	r6,20(sp)
100052e0:	8009883a 	mov	r4,r16
100052e4:	e00b883a 	mov	r5,fp
100052e8:	000830c0 	call	1000830c <_Bfree>
100052ec:	d8c00517 	ldw	r3,20(sp)
100052f0:	d9002317 	ldw	r4,140(sp)
100052f4:	d9802517 	ldw	r6,148(sp)
100052f8:	b8000005 	stb	zero,0(r23)
100052fc:	18800044 	addi	r2,r3,1
10005300:	20800015 	stw	r2,0(r4)
10005304:	30027226 	beq	r6,zero,10005cd0 <_dtoa_r+0x10a8>
10005308:	35c00015 	stw	r23,0(r6)
1000530c:	d8800717 	ldw	r2,28(sp)
10005310:	003e7406 	br	10004ce4 <__alt_data_end+0xf8004ce4>
10005314:	00800434 	movhi	r2,16
10005318:	10bfffc4 	addi	r2,r2,-1
1000531c:	a8aa703a 	and	r21,r21,r2
10005320:	a83e801e 	bne	r21,zero,10004d24 <__alt_data_end+0xf8004d24>
10005324:	00840074 	movhi	r2,4097
10005328:	10882504 	addi	r2,r2,8340
1000532c:	003e7f06 	br	10004d2c <__alt_data_end+0xf8004d2c>
10005330:	10c00204 	addi	r3,r2,8
10005334:	003e8206 	br	10004d40 <__alt_data_end+0xf8004d40>
10005338:	01400434 	movhi	r5,16
1000533c:	297fffc4 	addi	r5,r5,-1
10005340:	994a703a 	and	r5,r19,r5
10005344:	9009883a 	mov	r4,r18
10005348:	8c7f0044 	addi	r17,r17,-1023
1000534c:	294ffc34 	orhi	r5,r5,16368
10005350:	dd000217 	ldw	r20,8(sp)
10005354:	d8000f15 	stw	zero,60(sp)
10005358:	003e9f06 	br	10004dd8 <__alt_data_end+0xf8004dd8>
1000535c:	00840074 	movhi	r2,4097
10005360:	10881c04 	addi	r2,r2,8304
10005364:	003e5f06 	br	10004ce4 <__alt_data_end+0xf8004ce4>
10005368:	80001115 	stw	zero,68(r16)
1000536c:	8009883a 	mov	r4,r16
10005370:	000b883a 	mov	r5,zero
10005374:	00082640 	call	10008264 <_Balloc>
10005378:	01bfffc4 	movi	r6,-1
1000537c:	d8800715 	stw	r2,28(sp)
10005380:	80801015 	stw	r2,64(r16)
10005384:	00800044 	movi	r2,1
10005388:	d9800615 	stw	r6,24(sp)
1000538c:	d8800b15 	stw	r2,44(sp)
10005390:	d8002215 	stw	zero,136(sp)
10005394:	d9800d15 	stw	r6,52(sp)
10005398:	d8000315 	stw	zero,12(sp)
1000539c:	d8800117 	ldw	r2,4(sp)
100053a0:	10008e16 	blt	r2,zero,100055dc <_dtoa_r+0x9b4>
100053a4:	d9000517 	ldw	r4,20(sp)
100053a8:	00c00384 	movi	r3,14
100053ac:	19008b16 	blt	r3,r4,100055dc <_dtoa_r+0x9b4>
100053b0:	200490fa 	slli	r2,r4,3
100053b4:	00c40074 	movhi	r3,4097
100053b8:	d9802217 	ldw	r6,136(sp)
100053bc:	18c84404 	addi	r3,r3,8464
100053c0:	1885883a 	add	r2,r3,r2
100053c4:	14400017 	ldw	r17,0(r2)
100053c8:	15000117 	ldw	r20,4(r2)
100053cc:	3001c716 	blt	r6,zero,10005aec <_dtoa_r+0xec4>
100053d0:	880d883a 	mov	r6,r17
100053d4:	a00f883a 	mov	r7,r20
100053d8:	9009883a 	mov	r4,r18
100053dc:	980b883a 	mov	r5,r19
100053e0:	000d0f40 	call	1000d0f4 <__divdf3>
100053e4:	180b883a 	mov	r5,r3
100053e8:	1009883a 	mov	r4,r2
100053ec:	000edf40 	call	1000edf4 <__fixdfsi>
100053f0:	1009883a 	mov	r4,r2
100053f4:	102d883a 	mov	r22,r2
100053f8:	000ee7c0 	call	1000ee7c <__floatsidf>
100053fc:	1009883a 	mov	r4,r2
10005400:	180b883a 	mov	r5,r3
10005404:	880d883a 	mov	r6,r17
10005408:	a00f883a 	mov	r7,r20
1000540c:	000dcb80 	call	1000dcb8 <__muldf3>
10005410:	9009883a 	mov	r4,r18
10005414:	980b883a 	mov	r5,r19
10005418:	100d883a 	mov	r6,r2
1000541c:	180f883a 	mov	r7,r3
10005420:	000e5240 	call	1000e524 <__subdf3>
10005424:	d9000717 	ldw	r4,28(sp)
10005428:	d9800617 	ldw	r6,24(sp)
1000542c:	180b883a 	mov	r5,r3
10005430:	b0c00c04 	addi	r3,r22,48
10005434:	20c00005 	stb	r3,0(r4)
10005438:	25c00044 	addi	r23,r4,1
1000543c:	01000044 	movi	r4,1
10005440:	1011883a 	mov	r8,r2
10005444:	2807883a 	mov	r3,r5
10005448:	31003d26 	beq	r6,r4,10005540 <_dtoa_r+0x918>
1000544c:	000d883a 	mov	r6,zero
10005450:	01d00934 	movhi	r7,16420
10005454:	1009883a 	mov	r4,r2
10005458:	000dcb80 	call	1000dcb8 <__muldf3>
1000545c:	1009883a 	mov	r4,r2
10005460:	180b883a 	mov	r5,r3
10005464:	000d883a 	mov	r6,zero
10005468:	000f883a 	mov	r7,zero
1000546c:	1027883a 	mov	r19,r2
10005470:	182b883a 	mov	r21,r3
10005474:	000da740 	call	1000da74 <__eqdf2>
10005478:	103f9926 	beq	r2,zero,100052e0 <__alt_data_end+0xf80052e0>
1000547c:	d8c00617 	ldw	r3,24(sp)
10005480:	d9000717 	ldw	r4,28(sp)
10005484:	b825883a 	mov	r18,r23
10005488:	18bfffc4 	addi	r2,r3,-1
1000548c:	20ad883a 	add	r22,r4,r2
10005490:	dc000315 	stw	r16,12(sp)
10005494:	00000a06 	br	100054c0 <_dtoa_r+0x898>
10005498:	000dcb80 	call	1000dcb8 <__muldf3>
1000549c:	1009883a 	mov	r4,r2
100054a0:	180b883a 	mov	r5,r3
100054a4:	000d883a 	mov	r6,zero
100054a8:	000f883a 	mov	r7,zero
100054ac:	1027883a 	mov	r19,r2
100054b0:	182b883a 	mov	r21,r3
100054b4:	b825883a 	mov	r18,r23
100054b8:	000da740 	call	1000da74 <__eqdf2>
100054bc:	10022626 	beq	r2,zero,10005d58 <_dtoa_r+0x1130>
100054c0:	880d883a 	mov	r6,r17
100054c4:	a00f883a 	mov	r7,r20
100054c8:	9809883a 	mov	r4,r19
100054cc:	a80b883a 	mov	r5,r21
100054d0:	000d0f40 	call	1000d0f4 <__divdf3>
100054d4:	180b883a 	mov	r5,r3
100054d8:	1009883a 	mov	r4,r2
100054dc:	000edf40 	call	1000edf4 <__fixdfsi>
100054e0:	1009883a 	mov	r4,r2
100054e4:	1021883a 	mov	r16,r2
100054e8:	000ee7c0 	call	1000ee7c <__floatsidf>
100054ec:	1009883a 	mov	r4,r2
100054f0:	180b883a 	mov	r5,r3
100054f4:	880d883a 	mov	r6,r17
100054f8:	a00f883a 	mov	r7,r20
100054fc:	000dcb80 	call	1000dcb8 <__muldf3>
10005500:	9809883a 	mov	r4,r19
10005504:	a80b883a 	mov	r5,r21
10005508:	100d883a 	mov	r6,r2
1000550c:	180f883a 	mov	r7,r3
10005510:	000e5240 	call	1000e524 <__subdf3>
10005514:	82000c04 	addi	r8,r16,48
10005518:	92000005 	stb	r8,0(r18)
1000551c:	1009883a 	mov	r4,r2
10005520:	180b883a 	mov	r5,r3
10005524:	000d883a 	mov	r6,zero
10005528:	01d00934 	movhi	r7,16420
1000552c:	1011883a 	mov	r8,r2
10005530:	bdc00044 	addi	r23,r23,1
10005534:	95bfd81e 	bne	r18,r22,10005498 <__alt_data_end+0xf8005498>
10005538:	802d883a 	mov	r22,r16
1000553c:	dc000317 	ldw	r16,12(sp)
10005540:	4009883a 	mov	r4,r8
10005544:	180b883a 	mov	r5,r3
10005548:	400d883a 	mov	r6,r8
1000554c:	180f883a 	mov	r7,r3
10005550:	000c8580 	call	1000c858 <__adddf3>
10005554:	8809883a 	mov	r4,r17
10005558:	a00b883a 	mov	r5,r20
1000555c:	100d883a 	mov	r6,r2
10005560:	180f883a 	mov	r7,r3
10005564:	1027883a 	mov	r19,r2
10005568:	1825883a 	mov	r18,r3
1000556c:	000dbd80 	call	1000dbd8 <__ledf2>
10005570:	10000816 	blt	r2,zero,10005594 <_dtoa_r+0x96c>
10005574:	8809883a 	mov	r4,r17
10005578:	a00b883a 	mov	r5,r20
1000557c:	980d883a 	mov	r6,r19
10005580:	900f883a 	mov	r7,r18
10005584:	000da740 	call	1000da74 <__eqdf2>
10005588:	103f551e 	bne	r2,zero,100052e0 <__alt_data_end+0xf80052e0>
1000558c:	b580004c 	andi	r22,r22,1
10005590:	b03f5326 	beq	r22,zero,100052e0 <__alt_data_end+0xf80052e0>
10005594:	bd7fffc3 	ldbu	r21,-1(r23)
10005598:	b8bfffc4 	addi	r2,r23,-1
1000559c:	1007883a 	mov	r3,r2
100055a0:	01400e44 	movi	r5,57
100055a4:	d9800717 	ldw	r6,28(sp)
100055a8:	00000506 	br	100055c0 <_dtoa_r+0x998>
100055ac:	18ffffc4 	addi	r3,r3,-1
100055b0:	30825e26 	beq	r6,r2,10005f2c <_dtoa_r+0x1304>
100055b4:	1d400003 	ldbu	r21,0(r3)
100055b8:	102f883a 	mov	r23,r2
100055bc:	10bfffc4 	addi	r2,r2,-1
100055c0:	a9003fcc 	andi	r4,r21,255
100055c4:	2100201c 	xori	r4,r4,128
100055c8:	213fe004 	addi	r4,r4,-128
100055cc:	217ff726 	beq	r4,r5,100055ac <__alt_data_end+0xf80055ac>
100055d0:	aa000044 	addi	r8,r21,1
100055d4:	12000005 	stb	r8,0(r2)
100055d8:	003f4106 	br	100052e0 <__alt_data_end+0xf80052e0>
100055dc:	d8c00b17 	ldw	r3,44(sp)
100055e0:	18006726 	beq	r3,zero,10005780 <_dtoa_r+0xb58>
100055e4:	d9000317 	ldw	r4,12(sp)
100055e8:	00c00044 	movi	r3,1
100055ec:	19016a0e 	bge	r3,r4,10005b98 <_dtoa_r+0xf70>
100055f0:	d8800617 	ldw	r2,24(sp)
100055f4:	d8c00917 	ldw	r3,36(sp)
100055f8:	157fffc4 	addi	r21,r2,-1
100055fc:	1d420716 	blt	r3,r21,10005e1c <_dtoa_r+0x11f4>
10005600:	1d6bc83a 	sub	r21,r3,r21
10005604:	d8800617 	ldw	r2,24(sp)
10005608:	1002c716 	blt	r2,zero,10006128 <_dtoa_r+0x1500>
1000560c:	dd000817 	ldw	r20,32(sp)
10005610:	d8800617 	ldw	r2,24(sp)
10005614:	d9800817 	ldw	r6,32(sp)
10005618:	8009883a 	mov	r4,r16
1000561c:	01400044 	movi	r5,1
10005620:	308d883a 	add	r6,r6,r2
10005624:	d9800815 	stw	r6,32(sp)
10005628:	b0ad883a 	add	r22,r22,r2
1000562c:	000868c0 	call	1000868c <__i2b>
10005630:	1023883a 	mov	r17,r2
10005634:	a0000826 	beq	r20,zero,10005658 <_dtoa_r+0xa30>
10005638:	0580070e 	bge	zero,r22,10005658 <_dtoa_r+0xa30>
1000563c:	b005883a 	mov	r2,r22
10005640:	a5812016 	blt	r20,r22,10005ac4 <_dtoa_r+0xe9c>
10005644:	d8c00817 	ldw	r3,32(sp)
10005648:	a0a9c83a 	sub	r20,r20,r2
1000564c:	b0adc83a 	sub	r22,r22,r2
10005650:	1887c83a 	sub	r3,r3,r2
10005654:	d8c00815 	stw	r3,32(sp)
10005658:	d9000917 	ldw	r4,36(sp)
1000565c:	0100140e 	bge	zero,r4,100056b0 <_dtoa_r+0xa88>
10005660:	d9800b17 	ldw	r6,44(sp)
10005664:	3001e526 	beq	r6,zero,10005dfc <_dtoa_r+0x11d4>
10005668:	05400e0e 	bge	zero,r21,100056a4 <_dtoa_r+0xa7c>
1000566c:	880b883a 	mov	r5,r17
10005670:	8009883a 	mov	r4,r16
10005674:	a80d883a 	mov	r6,r21
10005678:	00089580 	call	10008958 <__pow5mult>
1000567c:	e00d883a 	mov	r6,fp
10005680:	8009883a 	mov	r4,r16
10005684:	100b883a 	mov	r5,r2
10005688:	1023883a 	mov	r17,r2
1000568c:	00086c80 	call	100086c8 <__multiply>
10005690:	102f883a 	mov	r23,r2
10005694:	e00b883a 	mov	r5,fp
10005698:	8009883a 	mov	r4,r16
1000569c:	000830c0 	call	1000830c <_Bfree>
100056a0:	b839883a 	mov	fp,r23
100056a4:	d8800917 	ldw	r2,36(sp)
100056a8:	154dc83a 	sub	r6,r2,r21
100056ac:	3001281e 	bne	r6,zero,10005b50 <_dtoa_r+0xf28>
100056b0:	05c00044 	movi	r23,1
100056b4:	8009883a 	mov	r4,r16
100056b8:	b80b883a 	mov	r5,r23
100056bc:	000868c0 	call	1000868c <__i2b>
100056c0:	d8c00a17 	ldw	r3,40(sp)
100056c4:	102b883a 	mov	r21,r2
100056c8:	00c0310e 	bge	zero,r3,10005790 <_dtoa_r+0xb68>
100056cc:	8009883a 	mov	r4,r16
100056d0:	100b883a 	mov	r5,r2
100056d4:	180d883a 	mov	r6,r3
100056d8:	00089580 	call	10008958 <__pow5mult>
100056dc:	d9000317 	ldw	r4,12(sp)
100056e0:	102b883a 	mov	r21,r2
100056e4:	b9011f0e 	bge	r23,r4,10005b64 <_dtoa_r+0xf3c>
100056e8:	0027883a 	mov	r19,zero
100056ec:	a8800417 	ldw	r2,16(r21)
100056f0:	10800104 	addi	r2,r2,4
100056f4:	1085883a 	add	r2,r2,r2
100056f8:	1085883a 	add	r2,r2,r2
100056fc:	a885883a 	add	r2,r21,r2
10005700:	11000017 	ldw	r4,0(r2)
10005704:	00085740 	call	10008574 <__hi0bits>
10005708:	00c00804 	movi	r3,32
1000570c:	1885c83a 	sub	r2,r3,r2
10005710:	00002506 	br	100057a8 <_dtoa_r+0xb80>
10005714:	01800044 	movi	r6,1
10005718:	d9800c15 	stw	r6,48(sp)
1000571c:	003dec06 	br	10004ed0 <__alt_data_end+0xf8004ed0>
10005720:	d8c00817 	ldw	r3,32(sp)
10005724:	d9000517 	ldw	r4,20(sp)
10005728:	d8000a15 	stw	zero,40(sp)
1000572c:	1907c83a 	sub	r3,r3,r4
10005730:	010dc83a 	sub	r6,zero,r4
10005734:	d8c00815 	stw	r3,32(sp)
10005738:	d9800915 	stw	r6,36(sp)
1000573c:	003ded06 	br	10004ef4 <__alt_data_end+0xf8004ef4>
10005740:	05adc83a 	sub	r22,zero,r22
10005744:	dd800815 	stw	r22,32(sp)
10005748:	002d883a 	mov	r22,zero
1000574c:	003de406 	br	10004ee0 <__alt_data_end+0xf8004ee0>
10005750:	d9000517 	ldw	r4,20(sp)
10005754:	000ee7c0 	call	1000ee7c <__floatsidf>
10005758:	1009883a 	mov	r4,r2
1000575c:	180b883a 	mov	r5,r3
10005760:	b00d883a 	mov	r6,r22
10005764:	a80f883a 	mov	r7,r21
10005768:	000da740 	call	1000da74 <__eqdf2>
1000576c:	103dc726 	beq	r2,zero,10004e8c <__alt_data_end+0xf8004e8c>
10005770:	d8800517 	ldw	r2,20(sp)
10005774:	10bfffc4 	addi	r2,r2,-1
10005778:	d8800515 	stw	r2,20(sp)
1000577c:	003dc306 	br	10004e8c <__alt_data_end+0xf8004e8c>
10005780:	dd400917 	ldw	r21,36(sp)
10005784:	dd000817 	ldw	r20,32(sp)
10005788:	0023883a 	mov	r17,zero
1000578c:	003fa906 	br	10005634 <__alt_data_end+0xf8005634>
10005790:	d9800317 	ldw	r6,12(sp)
10005794:	b981670e 	bge	r23,r6,10005d34 <_dtoa_r+0x110c>
10005798:	0027883a 	mov	r19,zero
1000579c:	d8c00a17 	ldw	r3,40(sp)
100057a0:	183fd21e 	bne	r3,zero,100056ec <__alt_data_end+0xf80056ec>
100057a4:	00800044 	movi	r2,1
100057a8:	1585883a 	add	r2,r2,r22
100057ac:	108007cc 	andi	r2,r2,31
100057b0:	10005f26 	beq	r2,zero,10005930 <_dtoa_r+0xd08>
100057b4:	00c00804 	movi	r3,32
100057b8:	1887c83a 	sub	r3,r3,r2
100057bc:	01000104 	movi	r4,4
100057c0:	20c2dd0e 	bge	r4,r3,10006338 <_dtoa_r+0x1710>
100057c4:	d9000817 	ldw	r4,32(sp)
100057c8:	00c00704 	movi	r3,28
100057cc:	1885c83a 	sub	r2,r3,r2
100057d0:	2089883a 	add	r4,r4,r2
100057d4:	d9000815 	stw	r4,32(sp)
100057d8:	a0a9883a 	add	r20,r20,r2
100057dc:	b0ad883a 	add	r22,r22,r2
100057e0:	d8800817 	ldw	r2,32(sp)
100057e4:	0080050e 	bge	zero,r2,100057fc <_dtoa_r+0xbd4>
100057e8:	e00b883a 	mov	r5,fp
100057ec:	8009883a 	mov	r4,r16
100057f0:	100d883a 	mov	r6,r2
100057f4:	0008a980 	call	10008a98 <__lshift>
100057f8:	1039883a 	mov	fp,r2
100057fc:	0580050e 	bge	zero,r22,10005814 <_dtoa_r+0xbec>
10005800:	a80b883a 	mov	r5,r21
10005804:	8009883a 	mov	r4,r16
10005808:	b00d883a 	mov	r6,r22
1000580c:	0008a980 	call	10008a98 <__lshift>
10005810:	102b883a 	mov	r21,r2
10005814:	d8c00c17 	ldw	r3,48(sp)
10005818:	1801161e 	bne	r3,zero,10005c74 <_dtoa_r+0x104c>
1000581c:	d8c00617 	ldw	r3,24(sp)
10005820:	00c12d0e 	bge	zero,r3,10005cd8 <_dtoa_r+0x10b0>
10005824:	d8c00b17 	ldw	r3,44(sp)
10005828:	1800571e 	bne	r3,zero,10005988 <_dtoa_r+0xd60>
1000582c:	dc800717 	ldw	r18,28(sp)
10005830:	dcc00617 	ldw	r19,24(sp)
10005834:	9029883a 	mov	r20,r18
10005838:	00000206 	br	10005844 <_dtoa_r+0xc1c>
1000583c:	00083340 	call	10008334 <__multadd>
10005840:	1039883a 	mov	fp,r2
10005844:	e009883a 	mov	r4,fp
10005848:	a80b883a 	mov	r5,r21
1000584c:	0004a000 	call	10004a00 <quorem>
10005850:	10800c04 	addi	r2,r2,48
10005854:	90800005 	stb	r2,0(r18)
10005858:	94800044 	addi	r18,r18,1
1000585c:	9507c83a 	sub	r3,r18,r20
10005860:	8009883a 	mov	r4,r16
10005864:	e00b883a 	mov	r5,fp
10005868:	01800284 	movi	r6,10
1000586c:	000f883a 	mov	r7,zero
10005870:	1cfff216 	blt	r3,r19,1000583c <__alt_data_end+0xf800583c>
10005874:	1011883a 	mov	r8,r2
10005878:	d8800617 	ldw	r2,24(sp)
1000587c:	00822e0e 	bge	zero,r2,10006138 <_dtoa_r+0x1510>
10005880:	d9000717 	ldw	r4,28(sp)
10005884:	0025883a 	mov	r18,zero
10005888:	20af883a 	add	r23,r4,r2
1000588c:	e00b883a 	mov	r5,fp
10005890:	01800044 	movi	r6,1
10005894:	8009883a 	mov	r4,r16
10005898:	da001715 	stw	r8,92(sp)
1000589c:	0008a980 	call	10008a98 <__lshift>
100058a0:	1009883a 	mov	r4,r2
100058a4:	a80b883a 	mov	r5,r21
100058a8:	1039883a 	mov	fp,r2
100058ac:	0008be00 	call	10008be0 <__mcmp>
100058b0:	da001717 	ldw	r8,92(sp)
100058b4:	00816e0e 	bge	zero,r2,10005e70 <_dtoa_r+0x1248>
100058b8:	b93fffc3 	ldbu	r4,-1(r23)
100058bc:	b8bfffc4 	addi	r2,r23,-1
100058c0:	1007883a 	mov	r3,r2
100058c4:	01800e44 	movi	r6,57
100058c8:	d9c00717 	ldw	r7,28(sp)
100058cc:	00000506 	br	100058e4 <_dtoa_r+0xcbc>
100058d0:	18ffffc4 	addi	r3,r3,-1
100058d4:	38811926 	beq	r7,r2,10005d3c <_dtoa_r+0x1114>
100058d8:	19000003 	ldbu	r4,0(r3)
100058dc:	102f883a 	mov	r23,r2
100058e0:	10bfffc4 	addi	r2,r2,-1
100058e4:	21403fcc 	andi	r5,r4,255
100058e8:	2940201c 	xori	r5,r5,128
100058ec:	297fe004 	addi	r5,r5,-128
100058f0:	29bff726 	beq	r5,r6,100058d0 <__alt_data_end+0xf80058d0>
100058f4:	21000044 	addi	r4,r4,1
100058f8:	11000005 	stb	r4,0(r2)
100058fc:	8009883a 	mov	r4,r16
10005900:	a80b883a 	mov	r5,r21
10005904:	000830c0 	call	1000830c <_Bfree>
10005908:	883e7526 	beq	r17,zero,100052e0 <__alt_data_end+0xf80052e0>
1000590c:	90000426 	beq	r18,zero,10005920 <_dtoa_r+0xcf8>
10005910:	94400326 	beq	r18,r17,10005920 <_dtoa_r+0xcf8>
10005914:	8009883a 	mov	r4,r16
10005918:	900b883a 	mov	r5,r18
1000591c:	000830c0 	call	1000830c <_Bfree>
10005920:	8009883a 	mov	r4,r16
10005924:	880b883a 	mov	r5,r17
10005928:	000830c0 	call	1000830c <_Bfree>
1000592c:	003e6c06 	br	100052e0 <__alt_data_end+0xf80052e0>
10005930:	00800704 	movi	r2,28
10005934:	d9800817 	ldw	r6,32(sp)
10005938:	a0a9883a 	add	r20,r20,r2
1000593c:	b0ad883a 	add	r22,r22,r2
10005940:	308d883a 	add	r6,r6,r2
10005944:	d9800815 	stw	r6,32(sp)
10005948:	003fa506 	br	100057e0 <__alt_data_end+0xf80057e0>
1000594c:	013efb84 	movi	r4,-1042
10005950:	246bc83a 	sub	r21,r4,r17
10005954:	9548983a 	sll	r4,r18,r21
10005958:	003d1806 	br	10004dbc <__alt_data_end+0xf8004dbc>
1000595c:	d8000c15 	stw	zero,48(sp)
10005960:	003d5b06 	br	10004ed0 <__alt_data_end+0xf8004ed0>
10005964:	880b883a 	mov	r5,r17
10005968:	8009883a 	mov	r4,r16
1000596c:	01800284 	movi	r6,10
10005970:	000f883a 	mov	r7,zero
10005974:	00083340 	call	10008334 <__multadd>
10005978:	1023883a 	mov	r17,r2
1000597c:	d8800d17 	ldw	r2,52(sp)
10005980:	0082550e 	bge	zero,r2,100062d8 <_dtoa_r+0x16b0>
10005984:	d8800615 	stw	r2,24(sp)
10005988:	0500050e 	bge	zero,r20,100059a0 <_dtoa_r+0xd78>
1000598c:	880b883a 	mov	r5,r17
10005990:	8009883a 	mov	r4,r16
10005994:	a00d883a 	mov	r6,r20
10005998:	0008a980 	call	10008a98 <__lshift>
1000599c:	1023883a 	mov	r17,r2
100059a0:	98016a1e 	bne	r19,zero,10005f4c <_dtoa_r+0x1324>
100059a4:	8829883a 	mov	r20,r17
100059a8:	d9000617 	ldw	r4,24(sp)
100059ac:	dcc00717 	ldw	r19,28(sp)
100059b0:	9480004c 	andi	r18,r18,1
100059b4:	20bfffc4 	addi	r2,r4,-1
100059b8:	9885883a 	add	r2,r19,r2
100059bc:	d8800415 	stw	r2,16(sp)
100059c0:	dc800615 	stw	r18,24(sp)
100059c4:	e009883a 	mov	r4,fp
100059c8:	a80b883a 	mov	r5,r21
100059cc:	0004a000 	call	10004a00 <quorem>
100059d0:	e009883a 	mov	r4,fp
100059d4:	880b883a 	mov	r5,r17
100059d8:	102f883a 	mov	r23,r2
100059dc:	0008be00 	call	10008be0 <__mcmp>
100059e0:	8009883a 	mov	r4,r16
100059e4:	a80b883a 	mov	r5,r21
100059e8:	a00d883a 	mov	r6,r20
100059ec:	102d883a 	mov	r22,r2
100059f0:	0008c400 	call	10008c40 <__mdiff>
100059f4:	1007883a 	mov	r3,r2
100059f8:	10800317 	ldw	r2,12(r2)
100059fc:	bc800c04 	addi	r18,r23,48
10005a00:	1000971e 	bne	r2,zero,10005c60 <_dtoa_r+0x1038>
10005a04:	180b883a 	mov	r5,r3
10005a08:	e009883a 	mov	r4,fp
10005a0c:	d8c01515 	stw	r3,84(sp)
10005a10:	0008be00 	call	10008be0 <__mcmp>
10005a14:	d8c01517 	ldw	r3,84(sp)
10005a18:	8009883a 	mov	r4,r16
10005a1c:	d8801515 	stw	r2,84(sp)
10005a20:	180b883a 	mov	r5,r3
10005a24:	000830c0 	call	1000830c <_Bfree>
10005a28:	d8801517 	ldw	r2,84(sp)
10005a2c:	1000041e 	bne	r2,zero,10005a40 <_dtoa_r+0xe18>
10005a30:	d9800317 	ldw	r6,12(sp)
10005a34:	3000021e 	bne	r6,zero,10005a40 <_dtoa_r+0xe18>
10005a38:	d8c00617 	ldw	r3,24(sp)
10005a3c:	18007626 	beq	r3,zero,10005c18 <_dtoa_r+0xff0>
10005a40:	b0005b16 	blt	r22,zero,10005bb0 <_dtoa_r+0xf88>
10005a44:	b000041e 	bne	r22,zero,10005a58 <_dtoa_r+0xe30>
10005a48:	d9000317 	ldw	r4,12(sp)
10005a4c:	2000021e 	bne	r4,zero,10005a58 <_dtoa_r+0xe30>
10005a50:	d8c00617 	ldw	r3,24(sp)
10005a54:	18005626 	beq	r3,zero,10005bb0 <_dtoa_r+0xf88>
10005a58:	00814d16 	blt	zero,r2,10005f90 <_dtoa_r+0x1368>
10005a5c:	d8c00417 	ldw	r3,16(sp)
10005a60:	9d800044 	addi	r22,r19,1
10005a64:	9c800005 	stb	r18,0(r19)
10005a68:	b02f883a 	mov	r23,r22
10005a6c:	98c14c26 	beq	r19,r3,10005fa0 <_dtoa_r+0x1378>
10005a70:	e00b883a 	mov	r5,fp
10005a74:	8009883a 	mov	r4,r16
10005a78:	01800284 	movi	r6,10
10005a7c:	000f883a 	mov	r7,zero
10005a80:	00083340 	call	10008334 <__multadd>
10005a84:	1039883a 	mov	fp,r2
10005a88:	8d006d26 	beq	r17,r20,10005c40 <_dtoa_r+0x1018>
10005a8c:	880b883a 	mov	r5,r17
10005a90:	01800284 	movi	r6,10
10005a94:	000f883a 	mov	r7,zero
10005a98:	8009883a 	mov	r4,r16
10005a9c:	00083340 	call	10008334 <__multadd>
10005aa0:	a00b883a 	mov	r5,r20
10005aa4:	8009883a 	mov	r4,r16
10005aa8:	01800284 	movi	r6,10
10005aac:	000f883a 	mov	r7,zero
10005ab0:	1023883a 	mov	r17,r2
10005ab4:	00083340 	call	10008334 <__multadd>
10005ab8:	1029883a 	mov	r20,r2
10005abc:	b027883a 	mov	r19,r22
10005ac0:	003fc006 	br	100059c4 <__alt_data_end+0xf80059c4>
10005ac4:	a005883a 	mov	r2,r20
10005ac8:	003ede06 	br	10005644 <__alt_data_end+0xf8005644>
10005acc:	01000044 	movi	r4,1
10005ad0:	d9000b15 	stw	r4,44(sp)
10005ad4:	d9802217 	ldw	r6,136(sp)
10005ad8:	0180dc0e 	bge	zero,r6,10005e4c <_dtoa_r+0x1224>
10005adc:	3023883a 	mov	r17,r6
10005ae0:	d9800d15 	stw	r6,52(sp)
10005ae4:	d9800615 	stw	r6,24(sp)
10005ae8:	003d1e06 	br	10004f64 <__alt_data_end+0xf8004f64>
10005aec:	d8800617 	ldw	r2,24(sp)
10005af0:	00be3716 	blt	zero,r2,100053d0 <__alt_data_end+0xf80053d0>
10005af4:	1000be1e 	bne	r2,zero,10005df0 <_dtoa_r+0x11c8>
10005af8:	8809883a 	mov	r4,r17
10005afc:	a00b883a 	mov	r5,r20
10005b00:	000d883a 	mov	r6,zero
10005b04:	01d00534 	movhi	r7,16404
10005b08:	000dcb80 	call	1000dcb8 <__muldf3>
10005b0c:	1009883a 	mov	r4,r2
10005b10:	180b883a 	mov	r5,r3
10005b14:	900d883a 	mov	r6,r18
10005b18:	980f883a 	mov	r7,r19
10005b1c:	000daf80 	call	1000daf8 <__gedf2>
10005b20:	002b883a 	mov	r21,zero
10005b24:	0023883a 	mov	r17,zero
10005b28:	10007a16 	blt	r2,zero,10005d14 <_dtoa_r+0x10ec>
10005b2c:	d9002217 	ldw	r4,136(sp)
10005b30:	ddc00717 	ldw	r23,28(sp)
10005b34:	0108303a 	nor	r4,zero,r4
10005b38:	d9000515 	stw	r4,20(sp)
10005b3c:	8009883a 	mov	r4,r16
10005b40:	a80b883a 	mov	r5,r21
10005b44:	000830c0 	call	1000830c <_Bfree>
10005b48:	883f751e 	bne	r17,zero,10005920 <__alt_data_end+0xf8005920>
10005b4c:	003de406 	br	100052e0 <__alt_data_end+0xf80052e0>
10005b50:	e00b883a 	mov	r5,fp
10005b54:	8009883a 	mov	r4,r16
10005b58:	00089580 	call	10008958 <__pow5mult>
10005b5c:	1039883a 	mov	fp,r2
10005b60:	003ed306 	br	100056b0 <__alt_data_end+0xf80056b0>
10005b64:	903ee01e 	bne	r18,zero,100056e8 <__alt_data_end+0xf80056e8>
10005b68:	00800434 	movhi	r2,16
10005b6c:	10bfffc4 	addi	r2,r2,-1
10005b70:	9884703a 	and	r2,r19,r2
10005b74:	103f081e 	bne	r2,zero,10005798 <__alt_data_end+0xf8005798>
10005b78:	9cdffc2c 	andhi	r19,r19,32752
10005b7c:	983f0626 	beq	r19,zero,10005798 <__alt_data_end+0xf8005798>
10005b80:	d8800817 	ldw	r2,32(sp)
10005b84:	b5800044 	addi	r22,r22,1
10005b88:	04c00044 	movi	r19,1
10005b8c:	10800044 	addi	r2,r2,1
10005b90:	d8800815 	stw	r2,32(sp)
10005b94:	003f0106 	br	1000579c <__alt_data_end+0xf800579c>
10005b98:	d9800f17 	ldw	r6,60(sp)
10005b9c:	30016826 	beq	r6,zero,10006140 <_dtoa_r+0x1518>
10005ba0:	10810cc4 	addi	r2,r2,1075
10005ba4:	dd400917 	ldw	r21,36(sp)
10005ba8:	dd000817 	ldw	r20,32(sp)
10005bac:	003e9906 	br	10005614 <__alt_data_end+0xf8005614>
10005bb0:	9011883a 	mov	r8,r18
10005bb4:	4007883a 	mov	r3,r8
10005bb8:	e02d883a 	mov	r22,fp
10005bbc:	0080100e 	bge	zero,r2,10005c00 <_dtoa_r+0xfd8>
10005bc0:	01800044 	movi	r6,1
10005bc4:	8009883a 	mov	r4,r16
10005bc8:	e00b883a 	mov	r5,fp
10005bcc:	da001515 	stw	r8,84(sp)
10005bd0:	da001715 	stw	r8,92(sp)
10005bd4:	0008a980 	call	10008a98 <__lshift>
10005bd8:	1009883a 	mov	r4,r2
10005bdc:	a80b883a 	mov	r5,r21
10005be0:	102d883a 	mov	r22,r2
10005be4:	0008be00 	call	10008be0 <__mcmp>
10005be8:	d8c01517 	ldw	r3,84(sp)
10005bec:	da001717 	ldw	r8,92(sp)
10005bf0:	0081a50e 	bge	zero,r2,10006288 <_dtoa_r+0x1660>
10005bf4:	00800e44 	movi	r2,57
10005bf8:	40817b26 	beq	r8,r2,100061e8 <_dtoa_r+0x15c0>
10005bfc:	40c00044 	addi	r3,r8,1
10005c00:	8825883a 	mov	r18,r17
10005c04:	9dc00044 	addi	r23,r19,1
10005c08:	98c00005 	stb	r3,0(r19)
10005c0c:	a023883a 	mov	r17,r20
10005c10:	b039883a 	mov	fp,r22
10005c14:	003f3906 	br	100058fc <__alt_data_end+0xf80058fc>
10005c18:	00800e44 	movi	r2,57
10005c1c:	9011883a 	mov	r8,r18
10005c20:	90817226 	beq	r18,r2,100061ec <_dtoa_r+0x15c4>
10005c24:	0580010e 	bge	zero,r22,10005c2c <_dtoa_r+0x1004>
10005c28:	ba000c44 	addi	r8,r23,49
10005c2c:	8825883a 	mov	r18,r17
10005c30:	9dc00044 	addi	r23,r19,1
10005c34:	9a000005 	stb	r8,0(r19)
10005c38:	a023883a 	mov	r17,r20
10005c3c:	003f2f06 	br	100058fc <__alt_data_end+0xf80058fc>
10005c40:	880b883a 	mov	r5,r17
10005c44:	8009883a 	mov	r4,r16
10005c48:	01800284 	movi	r6,10
10005c4c:	000f883a 	mov	r7,zero
10005c50:	00083340 	call	10008334 <__multadd>
10005c54:	1023883a 	mov	r17,r2
10005c58:	1029883a 	mov	r20,r2
10005c5c:	003f9706 	br	10005abc <__alt_data_end+0xf8005abc>
10005c60:	8009883a 	mov	r4,r16
10005c64:	180b883a 	mov	r5,r3
10005c68:	000830c0 	call	1000830c <_Bfree>
10005c6c:	00800044 	movi	r2,1
10005c70:	003f7306 	br	10005a40 <__alt_data_end+0xf8005a40>
10005c74:	e009883a 	mov	r4,fp
10005c78:	a80b883a 	mov	r5,r21
10005c7c:	0008be00 	call	10008be0 <__mcmp>
10005c80:	103ee60e 	bge	r2,zero,1000581c <__alt_data_end+0xf800581c>
10005c84:	8009883a 	mov	r4,r16
10005c88:	e00b883a 	mov	r5,fp
10005c8c:	01800284 	movi	r6,10
10005c90:	000f883a 	mov	r7,zero
10005c94:	00083340 	call	10008334 <__multadd>
10005c98:	d9000517 	ldw	r4,20(sp)
10005c9c:	d9800b17 	ldw	r6,44(sp)
10005ca0:	1039883a 	mov	fp,r2
10005ca4:	213fffc4 	addi	r4,r4,-1
10005ca8:	d9000515 	stw	r4,20(sp)
10005cac:	303f2d1e 	bne	r6,zero,10005964 <__alt_data_end+0xf8005964>
10005cb0:	d9000d17 	ldw	r4,52(sp)
10005cb4:	0101780e 	bge	zero,r4,10006298 <_dtoa_r+0x1670>
10005cb8:	d9000615 	stw	r4,24(sp)
10005cbc:	003edb06 	br	1000582c <__alt_data_end+0xf800582c>
10005cc0:	00800084 	movi	r2,2
10005cc4:	30818e1e 	bne	r6,r2,10006300 <_dtoa_r+0x16d8>
10005cc8:	d8000b15 	stw	zero,44(sp)
10005ccc:	003f8106 	br	10005ad4 <__alt_data_end+0xf8005ad4>
10005cd0:	d8800717 	ldw	r2,28(sp)
10005cd4:	003c0306 	br	10004ce4 <__alt_data_end+0xf8004ce4>
10005cd8:	d9000317 	ldw	r4,12(sp)
10005cdc:	00800084 	movi	r2,2
10005ce0:	113ed00e 	bge	r2,r4,10005824 <__alt_data_end+0xf8005824>
10005ce4:	d8c00617 	ldw	r3,24(sp)
10005ce8:	183f901e 	bne	r3,zero,10005b2c <__alt_data_end+0xf8005b2c>
10005cec:	a80b883a 	mov	r5,r21
10005cf0:	8009883a 	mov	r4,r16
10005cf4:	01800144 	movi	r6,5
10005cf8:	000f883a 	mov	r7,zero
10005cfc:	00083340 	call	10008334 <__multadd>
10005d00:	e009883a 	mov	r4,fp
10005d04:	100b883a 	mov	r5,r2
10005d08:	102b883a 	mov	r21,r2
10005d0c:	0008be00 	call	10008be0 <__mcmp>
10005d10:	00bf860e 	bge	zero,r2,10005b2c <__alt_data_end+0xf8005b2c>
10005d14:	d9800717 	ldw	r6,28(sp)
10005d18:	00800c44 	movi	r2,49
10005d1c:	30800005 	stb	r2,0(r6)
10005d20:	d8800517 	ldw	r2,20(sp)
10005d24:	35c00044 	addi	r23,r6,1
10005d28:	10800044 	addi	r2,r2,1
10005d2c:	d8800515 	stw	r2,20(sp)
10005d30:	003f8206 	br	10005b3c <__alt_data_end+0xf8005b3c>
10005d34:	903e981e 	bne	r18,zero,10005798 <__alt_data_end+0xf8005798>
10005d38:	003f8b06 	br	10005b68 <__alt_data_end+0xf8005b68>
10005d3c:	d9800517 	ldw	r6,20(sp)
10005d40:	d8c00717 	ldw	r3,28(sp)
10005d44:	00800c44 	movi	r2,49
10005d48:	31800044 	addi	r6,r6,1
10005d4c:	d9800515 	stw	r6,20(sp)
10005d50:	18800005 	stb	r2,0(r3)
10005d54:	003ee906 	br	100058fc <__alt_data_end+0xf80058fc>
10005d58:	dc000317 	ldw	r16,12(sp)
10005d5c:	003d6006 	br	100052e0 <__alt_data_end+0xf80052e0>
10005d60:	8809883a 	mov	r4,r17
10005d64:	000ee7c0 	call	1000ee7c <__floatsidf>
10005d68:	a009883a 	mov	r4,r20
10005d6c:	a80b883a 	mov	r5,r21
10005d70:	100d883a 	mov	r6,r2
10005d74:	180f883a 	mov	r7,r3
10005d78:	000dcb80 	call	1000dcb8 <__muldf3>
10005d7c:	1009883a 	mov	r4,r2
10005d80:	180b883a 	mov	r5,r3
10005d84:	000d883a 	mov	r6,zero
10005d88:	01d00734 	movhi	r7,16412
10005d8c:	000c8580 	call	1000c858 <__adddf3>
10005d90:	1023883a 	mov	r17,r2
10005d94:	00bf3034 	movhi	r2,64704
10005d98:	1885883a 	add	r2,r3,r2
10005d9c:	d8800e15 	stw	r2,56(sp)
10005da0:	a009883a 	mov	r4,r20
10005da4:	a80b883a 	mov	r5,r21
10005da8:	000d883a 	mov	r6,zero
10005dac:	01d00534 	movhi	r7,16404
10005db0:	000e5240 	call	1000e524 <__subdf3>
10005db4:	d9c00e17 	ldw	r7,56(sp)
10005db8:	1009883a 	mov	r4,r2
10005dbc:	180b883a 	mov	r5,r3
10005dc0:	880d883a 	mov	r6,r17
10005dc4:	102b883a 	mov	r21,r2
10005dc8:	1829883a 	mov	r20,r3
10005dcc:	000daf80 	call	1000daf8 <__gedf2>
10005dd0:	00807716 	blt	zero,r2,10005fb0 <_dtoa_r+0x1388>
10005dd4:	d8800e17 	ldw	r2,56(sp)
10005dd8:	a809883a 	mov	r4,r21
10005ddc:	a00b883a 	mov	r5,r20
10005de0:	11e0003c 	xorhi	r7,r2,32768
10005de4:	880d883a 	mov	r6,r17
10005de8:	000dbd80 	call	1000dbd8 <__ledf2>
10005dec:	103d6b0e 	bge	r2,zero,1000539c <__alt_data_end+0xf800539c>
10005df0:	002b883a 	mov	r21,zero
10005df4:	0023883a 	mov	r17,zero
10005df8:	003f4c06 	br	10005b2c <__alt_data_end+0xf8005b2c>
10005dfc:	d9800917 	ldw	r6,36(sp)
10005e00:	e00b883a 	mov	r5,fp
10005e04:	8009883a 	mov	r4,r16
10005e08:	00089580 	call	10008958 <__pow5mult>
10005e0c:	1039883a 	mov	fp,r2
10005e10:	003e2706 	br	100056b0 <__alt_data_end+0xf80056b0>
10005e14:	d8000b15 	stw	zero,44(sp)
10005e18:	003c4906 	br	10004f40 <__alt_data_end+0xf8004f40>
10005e1c:	d9000917 	ldw	r4,36(sp)
10005e20:	d9800a17 	ldw	r6,40(sp)
10005e24:	dd400915 	stw	r21,36(sp)
10005e28:	a905c83a 	sub	r2,r21,r4
10005e2c:	308d883a 	add	r6,r6,r2
10005e30:	d9800a15 	stw	r6,40(sp)
10005e34:	002b883a 	mov	r21,zero
10005e38:	003df206 	br	10005604 <__alt_data_end+0xf8005604>
10005e3c:	dc800e15 	stw	r18,56(sp)
10005e40:	982b883a 	mov	r21,r19
10005e44:	04400084 	movi	r17,2
10005e48:	003c7406 	br	1000501c <__alt_data_end+0xf800501c>
10005e4c:	04400044 	movi	r17,1
10005e50:	dc400d15 	stw	r17,52(sp)
10005e54:	dc400615 	stw	r17,24(sp)
10005e58:	dc402215 	stw	r17,136(sp)
10005e5c:	80001115 	stw	zero,68(r16)
10005e60:	000b883a 	mov	r5,zero
10005e64:	003c4a06 	br	10004f90 <__alt_data_end+0xf8004f90>
10005e68:	3023883a 	mov	r17,r6
10005e6c:	003ffb06 	br	10005e5c <__alt_data_end+0xf8005e5c>
10005e70:	1000021e 	bne	r2,zero,10005e7c <_dtoa_r+0x1254>
10005e74:	4200004c 	andi	r8,r8,1
10005e78:	403e8f1e 	bne	r8,zero,100058b8 <__alt_data_end+0xf80058b8>
10005e7c:	01000c04 	movi	r4,48
10005e80:	00000106 	br	10005e88 <_dtoa_r+0x1260>
10005e84:	102f883a 	mov	r23,r2
10005e88:	b8bfffc4 	addi	r2,r23,-1
10005e8c:	10c00007 	ldb	r3,0(r2)
10005e90:	193ffc26 	beq	r3,r4,10005e84 <__alt_data_end+0xf8005e84>
10005e94:	003e9906 	br	100058fc <__alt_data_end+0xf80058fc>
10005e98:	d9000517 	ldw	r4,20(sp)
10005e9c:	012fc83a 	sub	r23,zero,r4
10005ea0:	b800ad26 	beq	r23,zero,10006158 <_dtoa_r+0x1530>
10005ea4:	b88003cc 	andi	r2,r23,15
10005ea8:	100490fa 	slli	r2,r2,3
10005eac:	00c40074 	movhi	r3,4097
10005eb0:	18c84404 	addi	r3,r3,8464
10005eb4:	1885883a 	add	r2,r3,r2
10005eb8:	11800017 	ldw	r6,0(r2)
10005ebc:	11c00117 	ldw	r7,4(r2)
10005ec0:	b82fd13a 	srai	r23,r23,4
10005ec4:	9009883a 	mov	r4,r18
10005ec8:	980b883a 	mov	r5,r19
10005ecc:	000dcb80 	call	1000dcb8 <__muldf3>
10005ed0:	1029883a 	mov	r20,r2
10005ed4:	182b883a 	mov	r21,r3
10005ed8:	b800f426 	beq	r23,zero,100062ac <_dtoa_r+0x1684>
10005edc:	02040074 	movhi	r8,4097
10005ee0:	42083a04 	addi	r8,r8,8424
10005ee4:	8029883a 	mov	r20,r16
10005ee8:	04400084 	movi	r17,2
10005eec:	4021883a 	mov	r16,r8
10005ef0:	b980004c 	andi	r6,r23,1
10005ef4:	1009883a 	mov	r4,r2
10005ef8:	b82fd07a 	srai	r23,r23,1
10005efc:	180b883a 	mov	r5,r3
10005f00:	30000426 	beq	r6,zero,10005f14 <_dtoa_r+0x12ec>
10005f04:	81800017 	ldw	r6,0(r16)
10005f08:	81c00117 	ldw	r7,4(r16)
10005f0c:	8c400044 	addi	r17,r17,1
10005f10:	000dcb80 	call	1000dcb8 <__muldf3>
10005f14:	84000204 	addi	r16,r16,8
10005f18:	b83ff51e 	bne	r23,zero,10005ef0 <__alt_data_end+0xf8005ef0>
10005f1c:	a021883a 	mov	r16,r20
10005f20:	182b883a 	mov	r21,r3
10005f24:	1029883a 	mov	r20,r2
10005f28:	003c5506 	br	10005080 <__alt_data_end+0xf8005080>
10005f2c:	d9800517 	ldw	r6,20(sp)
10005f30:	d9000717 	ldw	r4,28(sp)
10005f34:	00c00c04 	movi	r3,48
10005f38:	31800044 	addi	r6,r6,1
10005f3c:	d9800515 	stw	r6,20(sp)
10005f40:	20c00005 	stb	r3,0(r4)
10005f44:	02000c44 	movi	r8,49
10005f48:	003da206 	br	100055d4 <__alt_data_end+0xf80055d4>
10005f4c:	89400117 	ldw	r5,4(r17)
10005f50:	8009883a 	mov	r4,r16
10005f54:	00082640 	call	10008264 <_Balloc>
10005f58:	89800417 	ldw	r6,16(r17)
10005f5c:	11000304 	addi	r4,r2,12
10005f60:	89400304 	addi	r5,r17,12
10005f64:	31800084 	addi	r6,r6,2
10005f68:	318d883a 	add	r6,r6,r6
10005f6c:	318d883a 	add	r6,r6,r6
10005f70:	1027883a 	mov	r19,r2
10005f74:	0007eac0 	call	10007eac <memcpy>
10005f78:	8009883a 	mov	r4,r16
10005f7c:	980b883a 	mov	r5,r19
10005f80:	01800044 	movi	r6,1
10005f84:	0008a980 	call	10008a98 <__lshift>
10005f88:	1029883a 	mov	r20,r2
10005f8c:	003e8606 	br	100059a8 <__alt_data_end+0xf80059a8>
10005f90:	00800e44 	movi	r2,57
10005f94:	90809526 	beq	r18,r2,100061ec <_dtoa_r+0x15c4>
10005f98:	92000044 	addi	r8,r18,1
10005f9c:	003f2306 	br	10005c2c <__alt_data_end+0xf8005c2c>
10005fa0:	9011883a 	mov	r8,r18
10005fa4:	8825883a 	mov	r18,r17
10005fa8:	a023883a 	mov	r17,r20
10005fac:	003e3706 	br	1000588c <__alt_data_end+0xf800588c>
10005fb0:	002b883a 	mov	r21,zero
10005fb4:	0023883a 	mov	r17,zero
10005fb8:	003f5606 	br	10005d14 <__alt_data_end+0xf8005d14>
10005fbc:	51bfffc4 	addi	r6,r10,-1
10005fc0:	300490fa 	slli	r2,r6,3
10005fc4:	00c40074 	movhi	r3,4097
10005fc8:	18c84404 	addi	r3,r3,8464
10005fcc:	1885883a 	add	r2,r3,r2
10005fd0:	d9c00e17 	ldw	r7,56(sp)
10005fd4:	11000017 	ldw	r4,0(r2)
10005fd8:	11400117 	ldw	r5,4(r2)
10005fdc:	d8800717 	ldw	r2,28(sp)
10005fe0:	d9801015 	stw	r6,64(sp)
10005fe4:	880d883a 	mov	r6,r17
10005fe8:	da801615 	stw	r10,88(sp)
10005fec:	15c00044 	addi	r23,r2,1
10005ff0:	000dcb80 	call	1000dcb8 <__muldf3>
10005ff4:	a80b883a 	mov	r5,r21
10005ff8:	a009883a 	mov	r4,r20
10005ffc:	d8c01115 	stw	r3,68(sp)
10006000:	d8800e15 	stw	r2,56(sp)
10006004:	000edf40 	call	1000edf4 <__fixdfsi>
10006008:	1009883a 	mov	r4,r2
1000600c:	1023883a 	mov	r17,r2
10006010:	000ee7c0 	call	1000ee7c <__floatsidf>
10006014:	a009883a 	mov	r4,r20
10006018:	a80b883a 	mov	r5,r21
1000601c:	100d883a 	mov	r6,r2
10006020:	180f883a 	mov	r7,r3
10006024:	000e5240 	call	1000e524 <__subdf3>
10006028:	1813883a 	mov	r9,r3
1000602c:	d8c00717 	ldw	r3,28(sp)
10006030:	8c400c04 	addi	r17,r17,48
10006034:	1011883a 	mov	r8,r2
10006038:	1c400005 	stb	r17,0(r3)
1000603c:	da801617 	ldw	r10,88(sp)
10006040:	00800044 	movi	r2,1
10006044:	50802326 	beq	r10,r2,100060d4 <_dtoa_r+0x14ac>
10006048:	d8800717 	ldw	r2,28(sp)
1000604c:	b82b883a 	mov	r21,r23
10006050:	dc001315 	stw	r16,76(sp)
10006054:	12a9883a 	add	r20,r2,r10
10006058:	4807883a 	mov	r3,r9
1000605c:	4005883a 	mov	r2,r8
10006060:	dc801415 	stw	r18,80(sp)
10006064:	000d883a 	mov	r6,zero
10006068:	01d00934 	movhi	r7,16420
1000606c:	1009883a 	mov	r4,r2
10006070:	180b883a 	mov	r5,r3
10006074:	000dcb80 	call	1000dcb8 <__muldf3>
10006078:	180b883a 	mov	r5,r3
1000607c:	1009883a 	mov	r4,r2
10006080:	1821883a 	mov	r16,r3
10006084:	1025883a 	mov	r18,r2
10006088:	000edf40 	call	1000edf4 <__fixdfsi>
1000608c:	1009883a 	mov	r4,r2
10006090:	1023883a 	mov	r17,r2
10006094:	000ee7c0 	call	1000ee7c <__floatsidf>
10006098:	9009883a 	mov	r4,r18
1000609c:	800b883a 	mov	r5,r16
100060a0:	100d883a 	mov	r6,r2
100060a4:	180f883a 	mov	r7,r3
100060a8:	8c400c04 	addi	r17,r17,48
100060ac:	000e5240 	call	1000e524 <__subdf3>
100060b0:	ad400044 	addi	r21,r21,1
100060b4:	ac7fffc5 	stb	r17,-1(r21)
100060b8:	ad3fea1e 	bne	r21,r20,10006064 <__alt_data_end+0xf8006064>
100060bc:	1813883a 	mov	r9,r3
100060c0:	d8c01017 	ldw	r3,64(sp)
100060c4:	dc001317 	ldw	r16,76(sp)
100060c8:	dc801417 	ldw	r18,80(sp)
100060cc:	1011883a 	mov	r8,r2
100060d0:	b8ef883a 	add	r23,r23,r3
100060d4:	d9000e17 	ldw	r4,56(sp)
100060d8:	d9401117 	ldw	r5,68(sp)
100060dc:	000d883a 	mov	r6,zero
100060e0:	01cff834 	movhi	r7,16352
100060e4:	da001715 	stw	r8,92(sp)
100060e8:	da401515 	stw	r9,84(sp)
100060ec:	000c8580 	call	1000c858 <__adddf3>
100060f0:	da001717 	ldw	r8,92(sp)
100060f4:	da401517 	ldw	r9,84(sp)
100060f8:	1009883a 	mov	r4,r2
100060fc:	400d883a 	mov	r6,r8
10006100:	480f883a 	mov	r7,r9
10006104:	180b883a 	mov	r5,r3
10006108:	000dbd80 	call	1000dbd8 <__ledf2>
1000610c:	da001717 	ldw	r8,92(sp)
10006110:	da401517 	ldw	r9,84(sp)
10006114:	10003b0e 	bge	r2,zero,10006204 <_dtoa_r+0x15dc>
10006118:	d9001217 	ldw	r4,72(sp)
1000611c:	bd7fffc3 	ldbu	r21,-1(r23)
10006120:	d9000515 	stw	r4,20(sp)
10006124:	003d1c06 	br	10005598 <__alt_data_end+0xf8005598>
10006128:	d8c00817 	ldw	r3,32(sp)
1000612c:	18a9c83a 	sub	r20,r3,r2
10006130:	0005883a 	mov	r2,zero
10006134:	003d3706 	br	10005614 <__alt_data_end+0xf8005614>
10006138:	00800044 	movi	r2,1
1000613c:	003dd006 	br	10005880 <__alt_data_end+0xf8005880>
10006140:	d8c00217 	ldw	r3,8(sp)
10006144:	00800d84 	movi	r2,54
10006148:	dd400917 	ldw	r21,36(sp)
1000614c:	10c5c83a 	sub	r2,r2,r3
10006150:	dd000817 	ldw	r20,32(sp)
10006154:	003d2f06 	br	10005614 <__alt_data_end+0xf8005614>
10006158:	9029883a 	mov	r20,r18
1000615c:	982b883a 	mov	r21,r19
10006160:	04400084 	movi	r17,2
10006164:	003bc606 	br	10005080 <__alt_data_end+0xf8005080>
10006168:	d8800617 	ldw	r2,24(sp)
1000616c:	103efc26 	beq	r2,zero,10005d60 <__alt_data_end+0xf8005d60>
10006170:	d8c00d17 	ldw	r3,52(sp)
10006174:	00fc890e 	bge	zero,r3,1000539c <__alt_data_end+0xf800539c>
10006178:	a80b883a 	mov	r5,r21
1000617c:	a009883a 	mov	r4,r20
10006180:	000d883a 	mov	r6,zero
10006184:	01d00934 	movhi	r7,16420
10006188:	000dcb80 	call	1000dcb8 <__muldf3>
1000618c:	89000044 	addi	r4,r17,1
10006190:	1029883a 	mov	r20,r2
10006194:	182b883a 	mov	r21,r3
10006198:	000ee7c0 	call	1000ee7c <__floatsidf>
1000619c:	a009883a 	mov	r4,r20
100061a0:	a80b883a 	mov	r5,r21
100061a4:	100d883a 	mov	r6,r2
100061a8:	180f883a 	mov	r7,r3
100061ac:	000dcb80 	call	1000dcb8 <__muldf3>
100061b0:	1009883a 	mov	r4,r2
100061b4:	180b883a 	mov	r5,r3
100061b8:	000d883a 	mov	r6,zero
100061bc:	01d00734 	movhi	r7,16412
100061c0:	000c8580 	call	1000c858 <__adddf3>
100061c4:	d9000517 	ldw	r4,20(sp)
100061c8:	1023883a 	mov	r17,r2
100061cc:	00bf3034 	movhi	r2,64704
100061d0:	213fffc4 	addi	r4,r4,-1
100061d4:	1885883a 	add	r2,r3,r2
100061d8:	d9001215 	stw	r4,72(sp)
100061dc:	d8800e15 	stw	r2,56(sp)
100061e0:	da800d17 	ldw	r10,52(sp)
100061e4:	003bc306 	br	100050f4 <__alt_data_end+0xf80050f4>
100061e8:	b039883a 	mov	fp,r22
100061ec:	01000e44 	movi	r4,57
100061f0:	8825883a 	mov	r18,r17
100061f4:	9dc00044 	addi	r23,r19,1
100061f8:	99000005 	stb	r4,0(r19)
100061fc:	a023883a 	mov	r17,r20
10006200:	003dae06 	br	100058bc <__alt_data_end+0xf80058bc>
10006204:	d9800e17 	ldw	r6,56(sp)
10006208:	d9c01117 	ldw	r7,68(sp)
1000620c:	0009883a 	mov	r4,zero
10006210:	014ff834 	movhi	r5,16352
10006214:	da001715 	stw	r8,92(sp)
10006218:	da401515 	stw	r9,84(sp)
1000621c:	000e5240 	call	1000e524 <__subdf3>
10006220:	da001717 	ldw	r8,92(sp)
10006224:	da401517 	ldw	r9,84(sp)
10006228:	1009883a 	mov	r4,r2
1000622c:	180b883a 	mov	r5,r3
10006230:	400d883a 	mov	r6,r8
10006234:	480f883a 	mov	r7,r9
10006238:	000daf80 	call	1000daf8 <__gedf2>
1000623c:	00bc570e 	bge	zero,r2,1000539c <__alt_data_end+0xf800539c>
10006240:	01000c04 	movi	r4,48
10006244:	00000106 	br	1000624c <_dtoa_r+0x1624>
10006248:	102f883a 	mov	r23,r2
1000624c:	b8bfffc4 	addi	r2,r23,-1
10006250:	10c00007 	ldb	r3,0(r2)
10006254:	193ffc26 	beq	r3,r4,10006248 <__alt_data_end+0xf8006248>
10006258:	d9801217 	ldw	r6,72(sp)
1000625c:	d9800515 	stw	r6,20(sp)
10006260:	003c1f06 	br	100052e0 <__alt_data_end+0xf80052e0>
10006264:	d8801217 	ldw	r2,72(sp)
10006268:	dc001117 	ldw	r16,68(sp)
1000626c:	d8800515 	stw	r2,20(sp)
10006270:	003cc906 	br	10005598 <__alt_data_end+0xf8005598>
10006274:	dd801317 	ldw	r22,76(sp)
10006278:	dc001117 	ldw	r16,68(sp)
1000627c:	dcc01417 	ldw	r19,80(sp)
10006280:	dc801017 	ldw	r18,64(sp)
10006284:	003c4506 	br	1000539c <__alt_data_end+0xf800539c>
10006288:	103e5d1e 	bne	r2,zero,10005c00 <__alt_data_end+0xf8005c00>
1000628c:	4080004c 	andi	r2,r8,1
10006290:	103e5b26 	beq	r2,zero,10005c00 <__alt_data_end+0xf8005c00>
10006294:	003e5706 	br	10005bf4 <__alt_data_end+0xf8005bf4>
10006298:	d8c00317 	ldw	r3,12(sp)
1000629c:	00800084 	movi	r2,2
100062a0:	10c00a16 	blt	r2,r3,100062cc <_dtoa_r+0x16a4>
100062a4:	d9000d17 	ldw	r4,52(sp)
100062a8:	003e8306 	br	10005cb8 <__alt_data_end+0xf8005cb8>
100062ac:	04400084 	movi	r17,2
100062b0:	003b7306 	br	10005080 <__alt_data_end+0xf8005080>
100062b4:	d9801217 	ldw	r6,72(sp)
100062b8:	d9800515 	stw	r6,20(sp)
100062bc:	003cb606 	br	10005598 <__alt_data_end+0xf8005598>
100062c0:	d9001217 	ldw	r4,72(sp)
100062c4:	d9000515 	stw	r4,20(sp)
100062c8:	003c0506 	br	100052e0 <__alt_data_end+0xf80052e0>
100062cc:	d9800d17 	ldw	r6,52(sp)
100062d0:	d9800615 	stw	r6,24(sp)
100062d4:	003e8306 	br	10005ce4 <__alt_data_end+0xf8005ce4>
100062d8:	d9800317 	ldw	r6,12(sp)
100062dc:	00800084 	movi	r2,2
100062e0:	11800216 	blt	r2,r6,100062ec <_dtoa_r+0x16c4>
100062e4:	d8800d17 	ldw	r2,52(sp)
100062e8:	003da606 	br	10005984 <__alt_data_end+0xf8005984>
100062ec:	d8800d17 	ldw	r2,52(sp)
100062f0:	d8800615 	stw	r2,24(sp)
100062f4:	003e7b06 	br	10005ce4 <__alt_data_end+0xf8005ce4>
100062f8:	05000044 	movi	r20,1
100062fc:	003b0506 	br	10004f14 <__alt_data_end+0xf8004f14>
10006300:	8009883a 	mov	r4,r16
10006304:	80001115 	stw	zero,68(r16)
10006308:	000b883a 	mov	r5,zero
1000630c:	00082640 	call	10008264 <_Balloc>
10006310:	d8800715 	stw	r2,28(sp)
10006314:	d8c00717 	ldw	r3,28(sp)
10006318:	00bfffc4 	movi	r2,-1
1000631c:	01000044 	movi	r4,1
10006320:	d8800615 	stw	r2,24(sp)
10006324:	80c01015 	stw	r3,64(r16)
10006328:	d9000b15 	stw	r4,44(sp)
1000632c:	d8002215 	stw	zero,136(sp)
10006330:	d8800d15 	stw	r2,52(sp)
10006334:	003c1906 	br	1000539c <__alt_data_end+0xf800539c>
10006338:	193d2926 	beq	r3,r4,100057e0 <__alt_data_end+0xf80057e0>
1000633c:	00c00f04 	movi	r3,60
10006340:	1885c83a 	sub	r2,r3,r2
10006344:	003d7b06 	br	10005934 <__alt_data_end+0xf8005934>
10006348:	000b883a 	mov	r5,zero
1000634c:	003b1006 	br	10004f90 <__alt_data_end+0xf8004f90>

10006350 <_fflush_r>:
10006350:	defffb04 	addi	sp,sp,-20
10006354:	dcc00315 	stw	r19,12(sp)
10006358:	dc000015 	stw	r16,0(sp)
1000635c:	dfc00415 	stw	ra,16(sp)
10006360:	dc800215 	stw	r18,8(sp)
10006364:	dc400115 	stw	r17,4(sp)
10006368:	2027883a 	mov	r19,r4
1000636c:	2821883a 	mov	r16,r5
10006370:	20000226 	beq	r4,zero,1000637c <_fflush_r+0x2c>
10006374:	20800e17 	ldw	r2,56(r4)
10006378:	10005326 	beq	r2,zero,100064c8 <_fflush_r+0x178>
1000637c:	8080030b 	ldhu	r2,12(r16)
10006380:	10ffffcc 	andi	r3,r2,65535
10006384:	18e0001c 	xori	r3,r3,32768
10006388:	18e00004 	addi	r3,r3,-32768
1000638c:	18002c26 	beq	r3,zero,10006440 <_fflush_r+0xf0>
10006390:	10c0020c 	andi	r3,r2,8
10006394:	1800321e 	bne	r3,zero,10006460 <_fflush_r+0x110>
10006398:	80c00117 	ldw	r3,4(r16)
1000639c:	10820014 	ori	r2,r2,2048
100063a0:	8080030d 	sth	r2,12(r16)
100063a4:	00c0570e 	bge	zero,r3,10006504 <_fflush_r+0x1b4>
100063a8:	82000a17 	ldw	r8,40(r16)
100063ac:	40002426 	beq	r8,zero,10006440 <_fflush_r+0xf0>
100063b0:	9c400017 	ldw	r17,0(r19)
100063b4:	10c4000c 	andi	r3,r2,4096
100063b8:	98000015 	stw	zero,0(r19)
100063bc:	18004626 	beq	r3,zero,100064d8 <_fflush_r+0x188>
100063c0:	81801417 	ldw	r6,80(r16)
100063c4:	10c0010c 	andi	r3,r2,4
100063c8:	18000626 	beq	r3,zero,100063e4 <_fflush_r+0x94>
100063cc:	80c00117 	ldw	r3,4(r16)
100063d0:	80800c17 	ldw	r2,48(r16)
100063d4:	30cdc83a 	sub	r6,r6,r3
100063d8:	10000226 	beq	r2,zero,100063e4 <_fflush_r+0x94>
100063dc:	80800f17 	ldw	r2,60(r16)
100063e0:	308dc83a 	sub	r6,r6,r2
100063e4:	81400717 	ldw	r5,28(r16)
100063e8:	9809883a 	mov	r4,r19
100063ec:	000f883a 	mov	r7,zero
100063f0:	403ee83a 	callr	r8
100063f4:	00ffffc4 	movi	r3,-1
100063f8:	10c04526 	beq	r2,r3,10006510 <_fflush_r+0x1c0>
100063fc:	80c0030b 	ldhu	r3,12(r16)
10006400:	81000417 	ldw	r4,16(r16)
10006404:	80000115 	stw	zero,4(r16)
10006408:	197dffcc 	andi	r5,r3,63487
1000640c:	8140030d 	sth	r5,12(r16)
10006410:	81000015 	stw	r4,0(r16)
10006414:	18c4000c 	andi	r3,r3,4096
10006418:	18000126 	beq	r3,zero,10006420 <_fflush_r+0xd0>
1000641c:	80801415 	stw	r2,80(r16)
10006420:	81400c17 	ldw	r5,48(r16)
10006424:	9c400015 	stw	r17,0(r19)
10006428:	28000526 	beq	r5,zero,10006440 <_fflush_r+0xf0>
1000642c:	80801004 	addi	r2,r16,64
10006430:	28800226 	beq	r5,r2,1000643c <_fflush_r+0xec>
10006434:	9809883a 	mov	r4,r19
10006438:	0006a800 	call	10006a80 <_free_r>
1000643c:	80000c15 	stw	zero,48(r16)
10006440:	0005883a 	mov	r2,zero
10006444:	dfc00417 	ldw	ra,16(sp)
10006448:	dcc00317 	ldw	r19,12(sp)
1000644c:	dc800217 	ldw	r18,8(sp)
10006450:	dc400117 	ldw	r17,4(sp)
10006454:	dc000017 	ldw	r16,0(sp)
10006458:	dec00504 	addi	sp,sp,20
1000645c:	f800283a 	ret
10006460:	84800417 	ldw	r18,16(r16)
10006464:	903ff626 	beq	r18,zero,10006440 <__alt_data_end+0xf8006440>
10006468:	84400017 	ldw	r17,0(r16)
1000646c:	108000cc 	andi	r2,r2,3
10006470:	84800015 	stw	r18,0(r16)
10006474:	8ca3c83a 	sub	r17,r17,r18
10006478:	10001526 	beq	r2,zero,100064d0 <_fflush_r+0x180>
1000647c:	0005883a 	mov	r2,zero
10006480:	80800215 	stw	r2,8(r16)
10006484:	04400316 	blt	zero,r17,10006494 <_fflush_r+0x144>
10006488:	003fed06 	br	10006440 <__alt_data_end+0xf8006440>
1000648c:	90a5883a 	add	r18,r18,r2
10006490:	047feb0e 	bge	zero,r17,10006440 <__alt_data_end+0xf8006440>
10006494:	80800917 	ldw	r2,36(r16)
10006498:	81400717 	ldw	r5,28(r16)
1000649c:	880f883a 	mov	r7,r17
100064a0:	900d883a 	mov	r6,r18
100064a4:	9809883a 	mov	r4,r19
100064a8:	103ee83a 	callr	r2
100064ac:	88a3c83a 	sub	r17,r17,r2
100064b0:	00bff616 	blt	zero,r2,1000648c <__alt_data_end+0xf800648c>
100064b4:	80c0030b 	ldhu	r3,12(r16)
100064b8:	00bfffc4 	movi	r2,-1
100064bc:	18c01014 	ori	r3,r3,64
100064c0:	80c0030d 	sth	r3,12(r16)
100064c4:	003fdf06 	br	10006444 <__alt_data_end+0xf8006444>
100064c8:	000690c0 	call	1000690c <__sinit>
100064cc:	003fab06 	br	1000637c <__alt_data_end+0xf800637c>
100064d0:	80800517 	ldw	r2,20(r16)
100064d4:	003fea06 	br	10006480 <__alt_data_end+0xf8006480>
100064d8:	81400717 	ldw	r5,28(r16)
100064dc:	000d883a 	mov	r6,zero
100064e0:	9809883a 	mov	r4,r19
100064e4:	01c00044 	movi	r7,1
100064e8:	403ee83a 	callr	r8
100064ec:	100d883a 	mov	r6,r2
100064f0:	00bfffc4 	movi	r2,-1
100064f4:	30801326 	beq	r6,r2,10006544 <_fflush_r+0x1f4>
100064f8:	8080030b 	ldhu	r2,12(r16)
100064fc:	82000a17 	ldw	r8,40(r16)
10006500:	003fb006 	br	100063c4 <__alt_data_end+0xf80063c4>
10006504:	80c00f17 	ldw	r3,60(r16)
10006508:	00ffa716 	blt	zero,r3,100063a8 <__alt_data_end+0xf80063a8>
1000650c:	003fcc06 	br	10006440 <__alt_data_end+0xf8006440>
10006510:	98c00017 	ldw	r3,0(r19)
10006514:	183fb926 	beq	r3,zero,100063fc <__alt_data_end+0xf80063fc>
10006518:	01000744 	movi	r4,29
1000651c:	19000226 	beq	r3,r4,10006528 <_fflush_r+0x1d8>
10006520:	01000584 	movi	r4,22
10006524:	1900101e 	bne	r3,r4,10006568 <_fflush_r+0x218>
10006528:	8080030b 	ldhu	r2,12(r16)
1000652c:	80c00417 	ldw	r3,16(r16)
10006530:	80000115 	stw	zero,4(r16)
10006534:	10bdffcc 	andi	r2,r2,63487
10006538:	8080030d 	sth	r2,12(r16)
1000653c:	80c00015 	stw	r3,0(r16)
10006540:	003fb706 	br	10006420 <__alt_data_end+0xf8006420>
10006544:	98800017 	ldw	r2,0(r19)
10006548:	103feb26 	beq	r2,zero,100064f8 <__alt_data_end+0xf80064f8>
1000654c:	00c00744 	movi	r3,29
10006550:	10c00226 	beq	r2,r3,1000655c <_fflush_r+0x20c>
10006554:	00c00584 	movi	r3,22
10006558:	10ffd61e 	bne	r2,r3,100064b4 <__alt_data_end+0xf80064b4>
1000655c:	9c400015 	stw	r17,0(r19)
10006560:	0005883a 	mov	r2,zero
10006564:	003fb706 	br	10006444 <__alt_data_end+0xf8006444>
10006568:	80c0030b 	ldhu	r3,12(r16)
1000656c:	18c01014 	ori	r3,r3,64
10006570:	80c0030d 	sth	r3,12(r16)
10006574:	003fb306 	br	10006444 <__alt_data_end+0xf8006444>

10006578 <fflush>:
10006578:	20000526 	beq	r4,zero,10006590 <fflush+0x18>
1000657c:	00840074 	movhi	r2,4097
10006580:	108f7704 	addi	r2,r2,15836
10006584:	200b883a 	mov	r5,r4
10006588:	11000017 	ldw	r4,0(r2)
1000658c:	00063501 	jmpi	10006350 <_fflush_r>
10006590:	00840074 	movhi	r2,4097
10006594:	108f7604 	addi	r2,r2,15832
10006598:	11000017 	ldw	r4,0(r2)
1000659c:	01440034 	movhi	r5,4096
100065a0:	2958d404 	addi	r5,r5,25424
100065a4:	00072cc1 	jmpi	100072cc <_fwalk_reent>

100065a8 <__fp_lock>:
100065a8:	0005883a 	mov	r2,zero
100065ac:	f800283a 	ret

100065b0 <__fp_unlock>:
100065b0:	0005883a 	mov	r2,zero
100065b4:	f800283a 	ret

100065b8 <_cleanup_r>:
100065b8:	01440074 	movhi	r5,4097
100065bc:	296cb604 	addi	r5,r5,-19752
100065c0:	00072141 	jmpi	10007214 <_fwalk>

100065c4 <__sinit.part.1>:
100065c4:	defff604 	addi	sp,sp,-40
100065c8:	00c40034 	movhi	r3,4096
100065cc:	dfc00915 	stw	ra,36(sp)
100065d0:	df000815 	stw	fp,32(sp)
100065d4:	ddc00715 	stw	r23,28(sp)
100065d8:	dd800615 	stw	r22,24(sp)
100065dc:	dd400515 	stw	r21,20(sp)
100065e0:	dd000415 	stw	r20,16(sp)
100065e4:	dcc00315 	stw	r19,12(sp)
100065e8:	dc800215 	stw	r18,8(sp)
100065ec:	dc400115 	stw	r17,4(sp)
100065f0:	dc000015 	stw	r16,0(sp)
100065f4:	18d96e04 	addi	r3,r3,26040
100065f8:	24000117 	ldw	r16,4(r4)
100065fc:	20c00f15 	stw	r3,60(r4)
10006600:	07000044 	movi	fp,1
10006604:	00c000c4 	movi	r3,3
10006608:	2080bb04 	addi	r2,r4,748
1000660c:	20c0b915 	stw	r3,740(r4)
10006610:	27000e15 	stw	fp,56(r4)
10006614:	2080ba15 	stw	r2,744(r4)
10006618:	2000b815 	stw	zero,736(r4)
1000661c:	05c00204 	movi	r23,8
10006620:	00800104 	movi	r2,4
10006624:	2025883a 	mov	r18,r4
10006628:	b80d883a 	mov	r6,r23
1000662c:	81001704 	addi	r4,r16,92
10006630:	000b883a 	mov	r5,zero
10006634:	80000015 	stw	zero,0(r16)
10006638:	80000115 	stw	zero,4(r16)
1000663c:	80000215 	stw	zero,8(r16)
10006640:	8080030d 	sth	r2,12(r16)
10006644:	80001915 	stw	zero,100(r16)
10006648:	8000038d 	sth	zero,14(r16)
1000664c:	80000415 	stw	zero,16(r16)
10006650:	80000515 	stw	zero,20(r16)
10006654:	80000615 	stw	zero,24(r16)
10006658:	00081400 	call	10008140 <memset>
1000665c:	05840074 	movhi	r22,4097
10006660:	94400217 	ldw	r17,8(r18)
10006664:	05440074 	movhi	r21,4097
10006668:	05040074 	movhi	r20,4097
1000666c:	04c40074 	movhi	r19,4097
10006670:	b5a64504 	addi	r22,r22,-26348
10006674:	ad665c04 	addi	r21,r21,-26256
10006678:	a5267b04 	addi	r20,r20,-26132
1000667c:	9ce69204 	addi	r19,r19,-26040
10006680:	85800815 	stw	r22,32(r16)
10006684:	85400915 	stw	r21,36(r16)
10006688:	85000a15 	stw	r20,40(r16)
1000668c:	84c00b15 	stw	r19,44(r16)
10006690:	84000715 	stw	r16,28(r16)
10006694:	00800284 	movi	r2,10
10006698:	89001704 	addi	r4,r17,92
1000669c:	b80d883a 	mov	r6,r23
100066a0:	000b883a 	mov	r5,zero
100066a4:	88000015 	stw	zero,0(r17)
100066a8:	88000115 	stw	zero,4(r17)
100066ac:	88000215 	stw	zero,8(r17)
100066b0:	8880030d 	sth	r2,12(r17)
100066b4:	88001915 	stw	zero,100(r17)
100066b8:	8f00038d 	sth	fp,14(r17)
100066bc:	88000415 	stw	zero,16(r17)
100066c0:	88000515 	stw	zero,20(r17)
100066c4:	88000615 	stw	zero,24(r17)
100066c8:	00081400 	call	10008140 <memset>
100066cc:	94000317 	ldw	r16,12(r18)
100066d0:	00800484 	movi	r2,18
100066d4:	8c400715 	stw	r17,28(r17)
100066d8:	8d800815 	stw	r22,32(r17)
100066dc:	8d400915 	stw	r21,36(r17)
100066e0:	8d000a15 	stw	r20,40(r17)
100066e4:	8cc00b15 	stw	r19,44(r17)
100066e8:	8080030d 	sth	r2,12(r16)
100066ec:	00800084 	movi	r2,2
100066f0:	80000015 	stw	zero,0(r16)
100066f4:	80000115 	stw	zero,4(r16)
100066f8:	80000215 	stw	zero,8(r16)
100066fc:	80001915 	stw	zero,100(r16)
10006700:	8080038d 	sth	r2,14(r16)
10006704:	80000415 	stw	zero,16(r16)
10006708:	80000515 	stw	zero,20(r16)
1000670c:	80000615 	stw	zero,24(r16)
10006710:	81001704 	addi	r4,r16,92
10006714:	000b883a 	mov	r5,zero
10006718:	b80d883a 	mov	r6,r23
1000671c:	00081400 	call	10008140 <memset>
10006720:	84000715 	stw	r16,28(r16)
10006724:	85800815 	stw	r22,32(r16)
10006728:	85400915 	stw	r21,36(r16)
1000672c:	85000a15 	stw	r20,40(r16)
10006730:	84c00b15 	stw	r19,44(r16)
10006734:	dfc00917 	ldw	ra,36(sp)
10006738:	df000817 	ldw	fp,32(sp)
1000673c:	ddc00717 	ldw	r23,28(sp)
10006740:	dd800617 	ldw	r22,24(sp)
10006744:	dd400517 	ldw	r21,20(sp)
10006748:	dd000417 	ldw	r20,16(sp)
1000674c:	dcc00317 	ldw	r19,12(sp)
10006750:	dc800217 	ldw	r18,8(sp)
10006754:	dc400117 	ldw	r17,4(sp)
10006758:	dc000017 	ldw	r16,0(sp)
1000675c:	dec00a04 	addi	sp,sp,40
10006760:	f800283a 	ret

10006764 <__sfmoreglue>:
10006764:	defffc04 	addi	sp,sp,-16
10006768:	dc800215 	stw	r18,8(sp)
1000676c:	2825883a 	mov	r18,r5
10006770:	dc000015 	stw	r16,0(sp)
10006774:	01401a04 	movi	r5,104
10006778:	2021883a 	mov	r16,r4
1000677c:	9009883a 	mov	r4,r18
10006780:	dfc00315 	stw	ra,12(sp)
10006784:	dc400115 	stw	r17,4(sp)
10006788:	000c8300 	call	1000c830 <__mulsi3>
1000678c:	8009883a 	mov	r4,r16
10006790:	11400304 	addi	r5,r2,12
10006794:	1023883a 	mov	r17,r2
10006798:	000761c0 	call	1000761c <_malloc_r>
1000679c:	1021883a 	mov	r16,r2
100067a0:	10000726 	beq	r2,zero,100067c0 <__sfmoreglue+0x5c>
100067a4:	11000304 	addi	r4,r2,12
100067a8:	10000015 	stw	zero,0(r2)
100067ac:	14800115 	stw	r18,4(r2)
100067b0:	11000215 	stw	r4,8(r2)
100067b4:	000b883a 	mov	r5,zero
100067b8:	880d883a 	mov	r6,r17
100067bc:	00081400 	call	10008140 <memset>
100067c0:	8005883a 	mov	r2,r16
100067c4:	dfc00317 	ldw	ra,12(sp)
100067c8:	dc800217 	ldw	r18,8(sp)
100067cc:	dc400117 	ldw	r17,4(sp)
100067d0:	dc000017 	ldw	r16,0(sp)
100067d4:	dec00404 	addi	sp,sp,16
100067d8:	f800283a 	ret

100067dc <__sfp>:
100067dc:	00840074 	movhi	r2,4097
100067e0:	defffb04 	addi	sp,sp,-20
100067e4:	108f7604 	addi	r2,r2,15832
100067e8:	dc800215 	stw	r18,8(sp)
100067ec:	14800017 	ldw	r18,0(r2)
100067f0:	dcc00315 	stw	r19,12(sp)
100067f4:	dfc00415 	stw	ra,16(sp)
100067f8:	90800e17 	ldw	r2,56(r18)
100067fc:	dc400115 	stw	r17,4(sp)
10006800:	dc000015 	stw	r16,0(sp)
10006804:	2027883a 	mov	r19,r4
10006808:	1000021e 	bne	r2,zero,10006814 <__sfp+0x38>
1000680c:	9009883a 	mov	r4,r18
10006810:	00065c40 	call	100065c4 <__sinit.part.1>
10006814:	9480b804 	addi	r18,r18,736
10006818:	047fffc4 	movi	r17,-1
1000681c:	91400117 	ldw	r5,4(r18)
10006820:	94000217 	ldw	r16,8(r18)
10006824:	297fffc4 	addi	r5,r5,-1
10006828:	28000a16 	blt	r5,zero,10006854 <__sfp+0x78>
1000682c:	8080030f 	ldh	r2,12(r16)
10006830:	10000c26 	beq	r2,zero,10006864 <__sfp+0x88>
10006834:	80c01d04 	addi	r3,r16,116
10006838:	00000206 	br	10006844 <__sfp+0x68>
1000683c:	18bfe60f 	ldh	r2,-104(r3)
10006840:	10000826 	beq	r2,zero,10006864 <__sfp+0x88>
10006844:	297fffc4 	addi	r5,r5,-1
10006848:	1c3ffd04 	addi	r16,r3,-12
1000684c:	18c01a04 	addi	r3,r3,104
10006850:	2c7ffa1e 	bne	r5,r17,1000683c <__alt_data_end+0xf800683c>
10006854:	90800017 	ldw	r2,0(r18)
10006858:	10001d26 	beq	r2,zero,100068d0 <__sfp+0xf4>
1000685c:	1025883a 	mov	r18,r2
10006860:	003fee06 	br	1000681c <__alt_data_end+0xf800681c>
10006864:	00bfffc4 	movi	r2,-1
10006868:	8080038d 	sth	r2,14(r16)
1000686c:	00800044 	movi	r2,1
10006870:	8080030d 	sth	r2,12(r16)
10006874:	80001915 	stw	zero,100(r16)
10006878:	80000015 	stw	zero,0(r16)
1000687c:	80000215 	stw	zero,8(r16)
10006880:	80000115 	stw	zero,4(r16)
10006884:	80000415 	stw	zero,16(r16)
10006888:	80000515 	stw	zero,20(r16)
1000688c:	80000615 	stw	zero,24(r16)
10006890:	81001704 	addi	r4,r16,92
10006894:	000b883a 	mov	r5,zero
10006898:	01800204 	movi	r6,8
1000689c:	00081400 	call	10008140 <memset>
100068a0:	8005883a 	mov	r2,r16
100068a4:	80000c15 	stw	zero,48(r16)
100068a8:	80000d15 	stw	zero,52(r16)
100068ac:	80001115 	stw	zero,68(r16)
100068b0:	80001215 	stw	zero,72(r16)
100068b4:	dfc00417 	ldw	ra,16(sp)
100068b8:	dcc00317 	ldw	r19,12(sp)
100068bc:	dc800217 	ldw	r18,8(sp)
100068c0:	dc400117 	ldw	r17,4(sp)
100068c4:	dc000017 	ldw	r16,0(sp)
100068c8:	dec00504 	addi	sp,sp,20
100068cc:	f800283a 	ret
100068d0:	9809883a 	mov	r4,r19
100068d4:	01400104 	movi	r5,4
100068d8:	00067640 	call	10006764 <__sfmoreglue>
100068dc:	90800015 	stw	r2,0(r18)
100068e0:	103fde1e 	bne	r2,zero,1000685c <__alt_data_end+0xf800685c>
100068e4:	00800304 	movi	r2,12
100068e8:	98800015 	stw	r2,0(r19)
100068ec:	0005883a 	mov	r2,zero
100068f0:	003ff006 	br	100068b4 <__alt_data_end+0xf80068b4>

100068f4 <_cleanup>:
100068f4:	00840074 	movhi	r2,4097
100068f8:	108f7604 	addi	r2,r2,15832
100068fc:	11000017 	ldw	r4,0(r2)
10006900:	01440074 	movhi	r5,4097
10006904:	296cb604 	addi	r5,r5,-19752
10006908:	00072141 	jmpi	10007214 <_fwalk>

1000690c <__sinit>:
1000690c:	20800e17 	ldw	r2,56(r4)
10006910:	10000126 	beq	r2,zero,10006918 <__sinit+0xc>
10006914:	f800283a 	ret
10006918:	00065c41 	jmpi	100065c4 <__sinit.part.1>

1000691c <__sfp_lock_acquire>:
1000691c:	f800283a 	ret

10006920 <__sfp_lock_release>:
10006920:	f800283a 	ret

10006924 <__sinit_lock_acquire>:
10006924:	f800283a 	ret

10006928 <__sinit_lock_release>:
10006928:	f800283a 	ret

1000692c <__fp_lock_all>:
1000692c:	00840074 	movhi	r2,4097
10006930:	108f7704 	addi	r2,r2,15836
10006934:	11000017 	ldw	r4,0(r2)
10006938:	01440034 	movhi	r5,4096
1000693c:	29596a04 	addi	r5,r5,26024
10006940:	00072141 	jmpi	10007214 <_fwalk>

10006944 <__fp_unlock_all>:
10006944:	00840074 	movhi	r2,4097
10006948:	108f7704 	addi	r2,r2,15836
1000694c:	11000017 	ldw	r4,0(r2)
10006950:	01440034 	movhi	r5,4096
10006954:	29596c04 	addi	r5,r5,26032
10006958:	00072141 	jmpi	10007214 <_fwalk>

1000695c <_malloc_trim_r>:
1000695c:	defffb04 	addi	sp,sp,-20
10006960:	dcc00315 	stw	r19,12(sp)
10006964:	04c40074 	movhi	r19,4097
10006968:	dc800215 	stw	r18,8(sp)
1000696c:	dc400115 	stw	r17,4(sp)
10006970:	dc000015 	stw	r16,0(sp)
10006974:	dfc00415 	stw	ra,16(sp)
10006978:	2821883a 	mov	r16,r5
1000697c:	9cc9f204 	addi	r19,r19,10184
10006980:	2025883a 	mov	r18,r4
10006984:	000f6340 	call	1000f634 <__malloc_lock>
10006988:	98800217 	ldw	r2,8(r19)
1000698c:	14400117 	ldw	r17,4(r2)
10006990:	00bfff04 	movi	r2,-4
10006994:	88a2703a 	and	r17,r17,r2
10006998:	8c21c83a 	sub	r16,r17,r16
1000699c:	8403fbc4 	addi	r16,r16,4079
100069a0:	8020d33a 	srli	r16,r16,12
100069a4:	0083ffc4 	movi	r2,4095
100069a8:	843fffc4 	addi	r16,r16,-1
100069ac:	8020933a 	slli	r16,r16,12
100069b0:	1400060e 	bge	r2,r16,100069cc <_malloc_trim_r+0x70>
100069b4:	9009883a 	mov	r4,r18
100069b8:	000b883a 	mov	r5,zero
100069bc:	00098c00 	call	100098c0 <_sbrk_r>
100069c0:	98c00217 	ldw	r3,8(r19)
100069c4:	1c47883a 	add	r3,r3,r17
100069c8:	10c00a26 	beq	r2,r3,100069f4 <_malloc_trim_r+0x98>
100069cc:	9009883a 	mov	r4,r18
100069d0:	000f6540 	call	1000f654 <__malloc_unlock>
100069d4:	0005883a 	mov	r2,zero
100069d8:	dfc00417 	ldw	ra,16(sp)
100069dc:	dcc00317 	ldw	r19,12(sp)
100069e0:	dc800217 	ldw	r18,8(sp)
100069e4:	dc400117 	ldw	r17,4(sp)
100069e8:	dc000017 	ldw	r16,0(sp)
100069ec:	dec00504 	addi	sp,sp,20
100069f0:	f800283a 	ret
100069f4:	9009883a 	mov	r4,r18
100069f8:	040bc83a 	sub	r5,zero,r16
100069fc:	00098c00 	call	100098c0 <_sbrk_r>
10006a00:	00ffffc4 	movi	r3,-1
10006a04:	10c00d26 	beq	r2,r3,10006a3c <_malloc_trim_r+0xe0>
10006a08:	00c40074 	movhi	r3,4097
10006a0c:	18d65404 	addi	r3,r3,22864
10006a10:	18800017 	ldw	r2,0(r3)
10006a14:	99000217 	ldw	r4,8(r19)
10006a18:	8c23c83a 	sub	r17,r17,r16
10006a1c:	8c400054 	ori	r17,r17,1
10006a20:	1421c83a 	sub	r16,r2,r16
10006a24:	24400115 	stw	r17,4(r4)
10006a28:	9009883a 	mov	r4,r18
10006a2c:	1c000015 	stw	r16,0(r3)
10006a30:	000f6540 	call	1000f654 <__malloc_unlock>
10006a34:	00800044 	movi	r2,1
10006a38:	003fe706 	br	100069d8 <__alt_data_end+0xf80069d8>
10006a3c:	9009883a 	mov	r4,r18
10006a40:	000b883a 	mov	r5,zero
10006a44:	00098c00 	call	100098c0 <_sbrk_r>
10006a48:	99000217 	ldw	r4,8(r19)
10006a4c:	014003c4 	movi	r5,15
10006a50:	1107c83a 	sub	r3,r2,r4
10006a54:	28ffdd0e 	bge	r5,r3,100069cc <__alt_data_end+0xf80069cc>
10006a58:	01440074 	movhi	r5,4097
10006a5c:	294f7904 	addi	r5,r5,15844
10006a60:	29400017 	ldw	r5,0(r5)
10006a64:	18c00054 	ori	r3,r3,1
10006a68:	20c00115 	stw	r3,4(r4)
10006a6c:	00c40074 	movhi	r3,4097
10006a70:	1145c83a 	sub	r2,r2,r5
10006a74:	18d65404 	addi	r3,r3,22864
10006a78:	18800015 	stw	r2,0(r3)
10006a7c:	003fd306 	br	100069cc <__alt_data_end+0xf80069cc>

10006a80 <_free_r>:
10006a80:	28004c26 	beq	r5,zero,10006bb4 <_free_r+0x134>
10006a84:	defffd04 	addi	sp,sp,-12
10006a88:	dc400115 	stw	r17,4(sp)
10006a8c:	dc000015 	stw	r16,0(sp)
10006a90:	2023883a 	mov	r17,r4
10006a94:	2821883a 	mov	r16,r5
10006a98:	dfc00215 	stw	ra,8(sp)
10006a9c:	000f6340 	call	1000f634 <__malloc_lock>
10006aa0:	813fff17 	ldw	r4,-4(r16)
10006aa4:	00bfff84 	movi	r2,-2
10006aa8:	02440074 	movhi	r9,4097
10006aac:	81bffe04 	addi	r6,r16,-8
10006ab0:	2084703a 	and	r2,r4,r2
10006ab4:	4a49f204 	addi	r9,r9,10184
10006ab8:	308b883a 	add	r5,r6,r2
10006abc:	2a000117 	ldw	r8,4(r5)
10006ac0:	49c00217 	ldw	r7,8(r9)
10006ac4:	00ffff04 	movi	r3,-4
10006ac8:	40c6703a 	and	r3,r8,r3
10006acc:	39405326 	beq	r7,r5,10006c1c <_free_r+0x19c>
10006ad0:	28c00115 	stw	r3,4(r5)
10006ad4:	2100004c 	andi	r4,r4,1
10006ad8:	2000091e 	bne	r4,zero,10006b00 <_free_r+0x80>
10006adc:	81fffe17 	ldw	r7,-8(r16)
10006ae0:	4a000204 	addi	r8,r9,8
10006ae4:	31cdc83a 	sub	r6,r6,r7
10006ae8:	31000217 	ldw	r4,8(r6)
10006aec:	11c5883a 	add	r2,r2,r7
10006af0:	22006126 	beq	r4,r8,10006c78 <_free_r+0x1f8>
10006af4:	31c00317 	ldw	r7,12(r6)
10006af8:	21c00315 	stw	r7,12(r4)
10006afc:	39000215 	stw	r4,8(r7)
10006b00:	28c9883a 	add	r4,r5,r3
10006b04:	21c00117 	ldw	r7,4(r4)
10006b08:	39c0004c 	andi	r7,r7,1
10006b0c:	38000d1e 	bne	r7,zero,10006b44 <_free_r+0xc4>
10006b10:	29000217 	ldw	r4,8(r5)
10006b14:	10c5883a 	add	r2,r2,r3
10006b18:	00c40074 	movhi	r3,4097
10006b1c:	18c9f404 	addi	r3,r3,10192
10006b20:	20c07526 	beq	r4,r3,10006cf8 <_free_r+0x278>
10006b24:	29c00317 	ldw	r7,12(r5)
10006b28:	11400054 	ori	r5,r2,1
10006b2c:	3087883a 	add	r3,r6,r2
10006b30:	21c00315 	stw	r7,12(r4)
10006b34:	39000215 	stw	r4,8(r7)
10006b38:	31400115 	stw	r5,4(r6)
10006b3c:	18800015 	stw	r2,0(r3)
10006b40:	00000406 	br	10006b54 <_free_r+0xd4>
10006b44:	10c00054 	ori	r3,r2,1
10006b48:	30c00115 	stw	r3,4(r6)
10006b4c:	3087883a 	add	r3,r6,r2
10006b50:	18800015 	stw	r2,0(r3)
10006b54:	00c07fc4 	movi	r3,511
10006b58:	18801736 	bltu	r3,r2,10006bb8 <_free_r+0x138>
10006b5c:	1004d0fa 	srli	r2,r2,3
10006b60:	01400044 	movi	r5,1
10006b64:	49000117 	ldw	r4,4(r9)
10006b68:	1087883a 	add	r3,r2,r2
10006b6c:	18c7883a 	add	r3,r3,r3
10006b70:	1005d0ba 	srai	r2,r2,2
10006b74:	18c7883a 	add	r3,r3,r3
10006b78:	1a47883a 	add	r3,r3,r9
10006b7c:	19c00217 	ldw	r7,8(r3)
10006b80:	2884983a 	sll	r2,r5,r2
10006b84:	30c00315 	stw	r3,12(r6)
10006b88:	31c00215 	stw	r7,8(r6)
10006b8c:	1104b03a 	or	r2,r2,r4
10006b90:	19800215 	stw	r6,8(r3)
10006b94:	48800115 	stw	r2,4(r9)
10006b98:	39800315 	stw	r6,12(r7)
10006b9c:	8809883a 	mov	r4,r17
10006ba0:	dfc00217 	ldw	ra,8(sp)
10006ba4:	dc400117 	ldw	r17,4(sp)
10006ba8:	dc000017 	ldw	r16,0(sp)
10006bac:	dec00304 	addi	sp,sp,12
10006bb0:	000f6541 	jmpi	1000f654 <__malloc_unlock>
10006bb4:	f800283a 	ret
10006bb8:	1006d27a 	srli	r3,r2,9
10006bbc:	01000104 	movi	r4,4
10006bc0:	20c04036 	bltu	r4,r3,10006cc4 <_free_r+0x244>
10006bc4:	1006d1ba 	srli	r3,r2,6
10006bc8:	19400e04 	addi	r5,r3,56
10006bcc:	2947883a 	add	r3,r5,r5
10006bd0:	18c7883a 	add	r3,r3,r3
10006bd4:	18c7883a 	add	r3,r3,r3
10006bd8:	1a49883a 	add	r4,r3,r9
10006bdc:	20c00217 	ldw	r3,8(r4)
10006be0:	01c40074 	movhi	r7,4097
10006be4:	39c9f204 	addi	r7,r7,10184
10006be8:	19003b26 	beq	r3,r4,10006cd8 <_free_r+0x258>
10006bec:	01ffff04 	movi	r7,-4
10006bf0:	19400117 	ldw	r5,4(r3)
10006bf4:	29ca703a 	and	r5,r5,r7
10006bf8:	1140022e 	bgeu	r2,r5,10006c04 <_free_r+0x184>
10006bfc:	18c00217 	ldw	r3,8(r3)
10006c00:	20fffb1e 	bne	r4,r3,10006bf0 <__alt_data_end+0xf8006bf0>
10006c04:	18800317 	ldw	r2,12(r3)
10006c08:	30800315 	stw	r2,12(r6)
10006c0c:	30c00215 	stw	r3,8(r6)
10006c10:	11800215 	stw	r6,8(r2)
10006c14:	19800315 	stw	r6,12(r3)
10006c18:	003fe006 	br	10006b9c <__alt_data_end+0xf8006b9c>
10006c1c:	2100004c 	andi	r4,r4,1
10006c20:	1885883a 	add	r2,r3,r2
10006c24:	2000071e 	bne	r4,zero,10006c44 <_free_r+0x1c4>
10006c28:	817ffe17 	ldw	r5,-8(r16)
10006c2c:	314dc83a 	sub	r6,r6,r5
10006c30:	30c00317 	ldw	r3,12(r6)
10006c34:	31000217 	ldw	r4,8(r6)
10006c38:	1145883a 	add	r2,r2,r5
10006c3c:	20c00315 	stw	r3,12(r4)
10006c40:	19000215 	stw	r4,8(r3)
10006c44:	10c00054 	ori	r3,r2,1
10006c48:	30c00115 	stw	r3,4(r6)
10006c4c:	00c40074 	movhi	r3,4097
10006c50:	18cf7a04 	addi	r3,r3,15848
10006c54:	18c00017 	ldw	r3,0(r3)
10006c58:	49800215 	stw	r6,8(r9)
10006c5c:	10ffcf36 	bltu	r2,r3,10006b9c <__alt_data_end+0xf8006b9c>
10006c60:	00840074 	movhi	r2,4097
10006c64:	10964704 	addi	r2,r2,22812
10006c68:	11400017 	ldw	r5,0(r2)
10006c6c:	8809883a 	mov	r4,r17
10006c70:	000695c0 	call	1000695c <_malloc_trim_r>
10006c74:	003fc906 	br	10006b9c <__alt_data_end+0xf8006b9c>
10006c78:	28c9883a 	add	r4,r5,r3
10006c7c:	21000117 	ldw	r4,4(r4)
10006c80:	2100004c 	andi	r4,r4,1
10006c84:	20000a1e 	bne	r4,zero,10006cb0 <_free_r+0x230>
10006c88:	29000317 	ldw	r4,12(r5)
10006c8c:	29400217 	ldw	r5,8(r5)
10006c90:	10c5883a 	add	r2,r2,r3
10006c94:	10c00054 	ori	r3,r2,1
10006c98:	29000315 	stw	r4,12(r5)
10006c9c:	21400215 	stw	r5,8(r4)
10006ca0:	30c00115 	stw	r3,4(r6)
10006ca4:	308d883a 	add	r6,r6,r2
10006ca8:	30800015 	stw	r2,0(r6)
10006cac:	003fbb06 	br	10006b9c <__alt_data_end+0xf8006b9c>
10006cb0:	10c00054 	ori	r3,r2,1
10006cb4:	30c00115 	stw	r3,4(r6)
10006cb8:	308d883a 	add	r6,r6,r2
10006cbc:	30800015 	stw	r2,0(r6)
10006cc0:	003fb606 	br	10006b9c <__alt_data_end+0xf8006b9c>
10006cc4:	01000504 	movi	r4,20
10006cc8:	20c01436 	bltu	r4,r3,10006d1c <_free_r+0x29c>
10006ccc:	194016c4 	addi	r5,r3,91
10006cd0:	2947883a 	add	r3,r5,r5
10006cd4:	003fbe06 	br	10006bd0 <__alt_data_end+0xf8006bd0>
10006cd8:	280bd0ba 	srai	r5,r5,2
10006cdc:	00800044 	movi	r2,1
10006ce0:	39000117 	ldw	r4,4(r7)
10006ce4:	114a983a 	sll	r5,r2,r5
10006ce8:	1805883a 	mov	r2,r3
10006cec:	2908b03a 	or	r4,r5,r4
10006cf0:	39000115 	stw	r4,4(r7)
10006cf4:	003fc406 	br	10006c08 <__alt_data_end+0xf8006c08>
10006cf8:	49800515 	stw	r6,20(r9)
10006cfc:	49800415 	stw	r6,16(r9)
10006d00:	10c00054 	ori	r3,r2,1
10006d04:	31000315 	stw	r4,12(r6)
10006d08:	31000215 	stw	r4,8(r6)
10006d0c:	30c00115 	stw	r3,4(r6)
10006d10:	308d883a 	add	r6,r6,r2
10006d14:	30800015 	stw	r2,0(r6)
10006d18:	003fa006 	br	10006b9c <__alt_data_end+0xf8006b9c>
10006d1c:	01001504 	movi	r4,84
10006d20:	20c00436 	bltu	r4,r3,10006d34 <_free_r+0x2b4>
10006d24:	1006d33a 	srli	r3,r2,12
10006d28:	19401b84 	addi	r5,r3,110
10006d2c:	2947883a 	add	r3,r5,r5
10006d30:	003fa706 	br	10006bd0 <__alt_data_end+0xf8006bd0>
10006d34:	01005504 	movi	r4,340
10006d38:	20c00436 	bltu	r4,r3,10006d4c <_free_r+0x2cc>
10006d3c:	1006d3fa 	srli	r3,r2,15
10006d40:	19401dc4 	addi	r5,r3,119
10006d44:	2947883a 	add	r3,r5,r5
10006d48:	003fa106 	br	10006bd0 <__alt_data_end+0xf8006bd0>
10006d4c:	01015504 	movi	r4,1364
10006d50:	20c00436 	bltu	r4,r3,10006d64 <_free_r+0x2e4>
10006d54:	1006d4ba 	srli	r3,r2,18
10006d58:	19401f04 	addi	r5,r3,124
10006d5c:	2947883a 	add	r3,r5,r5
10006d60:	003f9b06 	br	10006bd0 <__alt_data_end+0xf8006bd0>
10006d64:	00c03f04 	movi	r3,252
10006d68:	01401f84 	movi	r5,126
10006d6c:	003f9806 	br	10006bd0 <__alt_data_end+0xf8006bd0>

10006d70 <__sfvwrite_r>:
10006d70:	30800217 	ldw	r2,8(r6)
10006d74:	10004526 	beq	r2,zero,10006e8c <__sfvwrite_r+0x11c>
10006d78:	28c0030b 	ldhu	r3,12(r5)
10006d7c:	defff404 	addi	sp,sp,-48
10006d80:	dd400715 	stw	r21,28(sp)
10006d84:	dcc00515 	stw	r19,20(sp)
10006d88:	dc000215 	stw	r16,8(sp)
10006d8c:	dfc00b15 	stw	ra,44(sp)
10006d90:	df000a15 	stw	fp,40(sp)
10006d94:	ddc00915 	stw	r23,36(sp)
10006d98:	dd800815 	stw	r22,32(sp)
10006d9c:	dd000615 	stw	r20,24(sp)
10006da0:	dc800415 	stw	r18,16(sp)
10006da4:	dc400315 	stw	r17,12(sp)
10006da8:	1880020c 	andi	r2,r3,8
10006dac:	2821883a 	mov	r16,r5
10006db0:	202b883a 	mov	r21,r4
10006db4:	3027883a 	mov	r19,r6
10006db8:	10002526 	beq	r2,zero,10006e50 <__sfvwrite_r+0xe0>
10006dbc:	28800417 	ldw	r2,16(r5)
10006dc0:	10002326 	beq	r2,zero,10006e50 <__sfvwrite_r+0xe0>
10006dc4:	1880008c 	andi	r2,r3,2
10006dc8:	9c400017 	ldw	r17,0(r19)
10006dcc:	10003126 	beq	r2,zero,10006e94 <__sfvwrite_r+0x124>
10006dd0:	0029883a 	mov	r20,zero
10006dd4:	0025883a 	mov	r18,zero
10006dd8:	05810004 	movi	r22,1024
10006ddc:	a00d883a 	mov	r6,r20
10006de0:	a809883a 	mov	r4,r21
10006de4:	90002526 	beq	r18,zero,10006e7c <__sfvwrite_r+0x10c>
10006de8:	900f883a 	mov	r7,r18
10006dec:	81400717 	ldw	r5,28(r16)
10006df0:	b480012e 	bgeu	r22,r18,10006df8 <__sfvwrite_r+0x88>
10006df4:	01c10004 	movi	r7,1024
10006df8:	80800917 	ldw	r2,36(r16)
10006dfc:	103ee83a 	callr	r2
10006e00:	0080510e 	bge	zero,r2,10006f48 <__sfvwrite_r+0x1d8>
10006e04:	98c00217 	ldw	r3,8(r19)
10006e08:	a0a9883a 	add	r20,r20,r2
10006e0c:	90a5c83a 	sub	r18,r18,r2
10006e10:	1885c83a 	sub	r2,r3,r2
10006e14:	98800215 	stw	r2,8(r19)
10006e18:	103ff01e 	bne	r2,zero,10006ddc <__alt_data_end+0xf8006ddc>
10006e1c:	0005883a 	mov	r2,zero
10006e20:	dfc00b17 	ldw	ra,44(sp)
10006e24:	df000a17 	ldw	fp,40(sp)
10006e28:	ddc00917 	ldw	r23,36(sp)
10006e2c:	dd800817 	ldw	r22,32(sp)
10006e30:	dd400717 	ldw	r21,28(sp)
10006e34:	dd000617 	ldw	r20,24(sp)
10006e38:	dcc00517 	ldw	r19,20(sp)
10006e3c:	dc800417 	ldw	r18,16(sp)
10006e40:	dc400317 	ldw	r17,12(sp)
10006e44:	dc000217 	ldw	r16,8(sp)
10006e48:	dec00c04 	addi	sp,sp,48
10006e4c:	f800283a 	ret
10006e50:	a809883a 	mov	r4,r21
10006e54:	800b883a 	mov	r5,r16
10006e58:	00048d00 	call	100048d0 <__swsetup_r>
10006e5c:	80c0030b 	ldhu	r3,12(r16)
10006e60:	103fd826 	beq	r2,zero,10006dc4 <__alt_data_end+0xf8006dc4>
10006e64:	18c01014 	ori	r3,r3,64
10006e68:	80c0030d 	sth	r3,12(r16)
10006e6c:	00c00244 	movi	r3,9
10006e70:	00bfffc4 	movi	r2,-1
10006e74:	a8c00015 	stw	r3,0(r21)
10006e78:	003fe906 	br	10006e20 <__alt_data_end+0xf8006e20>
10006e7c:	8d000017 	ldw	r20,0(r17)
10006e80:	8c800117 	ldw	r18,4(r17)
10006e84:	8c400204 	addi	r17,r17,8
10006e88:	003fd406 	br	10006ddc <__alt_data_end+0xf8006ddc>
10006e8c:	0005883a 	mov	r2,zero
10006e90:	f800283a 	ret
10006e94:	1880004c 	andi	r2,r3,1
10006e98:	1000301e 	bne	r2,zero,10006f5c <__sfvwrite_r+0x1ec>
10006e9c:	002f883a 	mov	r23,zero
10006ea0:	0025883a 	mov	r18,zero
10006ea4:	90001c26 	beq	r18,zero,10006f18 <__sfvwrite_r+0x1a8>
10006ea8:	1880800c 	andi	r2,r3,512
10006eac:	85000217 	ldw	r20,8(r16)
10006eb0:	10006c26 	beq	r2,zero,10007064 <__sfvwrite_r+0x2f4>
10006eb4:	a02d883a 	mov	r22,r20
10006eb8:	95008536 	bltu	r18,r20,100070d0 <__sfvwrite_r+0x360>
10006ebc:	1881200c 	andi	r2,r3,1152
10006ec0:	10009d1e 	bne	r2,zero,10007138 <__sfvwrite_r+0x3c8>
10006ec4:	81000017 	ldw	r4,0(r16)
10006ec8:	a039883a 	mov	fp,r20
10006ecc:	9029883a 	mov	r20,r18
10006ed0:	b80b883a 	mov	r5,r23
10006ed4:	b00d883a 	mov	r6,r22
10006ed8:	0007fe40 	call	10007fe4 <memmove>
10006edc:	80c00217 	ldw	r3,8(r16)
10006ee0:	81000017 	ldw	r4,0(r16)
10006ee4:	9005883a 	mov	r2,r18
10006ee8:	1f39c83a 	sub	fp,r3,fp
10006eec:	258f883a 	add	r7,r4,r22
10006ef0:	87000215 	stw	fp,8(r16)
10006ef4:	81c00015 	stw	r7,0(r16)
10006ef8:	98c00217 	ldw	r3,8(r19)
10006efc:	b8af883a 	add	r23,r23,r2
10006f00:	90a5c83a 	sub	r18,r18,r2
10006f04:	1d05c83a 	sub	r2,r3,r20
10006f08:	98800215 	stw	r2,8(r19)
10006f0c:	103fc326 	beq	r2,zero,10006e1c <__alt_data_end+0xf8006e1c>
10006f10:	80c0030b 	ldhu	r3,12(r16)
10006f14:	903fe41e 	bne	r18,zero,10006ea8 <__alt_data_end+0xf8006ea8>
10006f18:	8dc00017 	ldw	r23,0(r17)
10006f1c:	8c800117 	ldw	r18,4(r17)
10006f20:	8c400204 	addi	r17,r17,8
10006f24:	003fdf06 	br	10006ea4 <__alt_data_end+0xf8006ea4>
10006f28:	00092ac0 	call	100092ac <_realloc_r>
10006f2c:	102d883a 	mov	r22,r2
10006f30:	1000a01e 	bne	r2,zero,100071b4 <__sfvwrite_r+0x444>
10006f34:	81400417 	ldw	r5,16(r16)
10006f38:	a809883a 	mov	r4,r21
10006f3c:	0006a800 	call	10006a80 <_free_r>
10006f40:	00800304 	movi	r2,12
10006f44:	a8800015 	stw	r2,0(r21)
10006f48:	80c0030b 	ldhu	r3,12(r16)
10006f4c:	00bfffc4 	movi	r2,-1
10006f50:	18c01014 	ori	r3,r3,64
10006f54:	80c0030d 	sth	r3,12(r16)
10006f58:	003fb106 	br	10006e20 <__alt_data_end+0xf8006e20>
10006f5c:	0029883a 	mov	r20,zero
10006f60:	0011883a 	mov	r8,zero
10006f64:	0039883a 	mov	fp,zero
10006f68:	0025883a 	mov	r18,zero
10006f6c:	90001f26 	beq	r18,zero,10006fec <__sfvwrite_r+0x27c>
10006f70:	40006826 	beq	r8,zero,10007114 <__sfvwrite_r+0x3a4>
10006f74:	a02f883a 	mov	r23,r20
10006f78:	9500012e 	bgeu	r18,r20,10006f80 <__sfvwrite_r+0x210>
10006f7c:	902f883a 	mov	r23,r18
10006f80:	81000017 	ldw	r4,0(r16)
10006f84:	80800417 	ldw	r2,16(r16)
10006f88:	b82d883a 	mov	r22,r23
10006f8c:	81800217 	ldw	r6,8(r16)
10006f90:	81c00517 	ldw	r7,20(r16)
10006f94:	1100022e 	bgeu	r2,r4,10006fa0 <__sfvwrite_r+0x230>
10006f98:	31c7883a 	add	r3,r6,r7
10006f9c:	1dc01816 	blt	r3,r23,10007000 <__sfvwrite_r+0x290>
10006fa0:	b9c03f16 	blt	r23,r7,100070a0 <__sfvwrite_r+0x330>
10006fa4:	80800917 	ldw	r2,36(r16)
10006fa8:	81400717 	ldw	r5,28(r16)
10006fac:	a809883a 	mov	r4,r21
10006fb0:	da000115 	stw	r8,4(sp)
10006fb4:	e00d883a 	mov	r6,fp
10006fb8:	103ee83a 	callr	r2
10006fbc:	102d883a 	mov	r22,r2
10006fc0:	da000117 	ldw	r8,4(sp)
10006fc4:	00bfe00e 	bge	zero,r2,10006f48 <__alt_data_end+0xf8006f48>
10006fc8:	a5a9c83a 	sub	r20,r20,r22
10006fcc:	a0001f26 	beq	r20,zero,1000704c <__sfvwrite_r+0x2dc>
10006fd0:	98800217 	ldw	r2,8(r19)
10006fd4:	e5b9883a 	add	fp,fp,r22
10006fd8:	95a5c83a 	sub	r18,r18,r22
10006fdc:	15adc83a 	sub	r22,r2,r22
10006fe0:	9d800215 	stw	r22,8(r19)
10006fe4:	b03f8d26 	beq	r22,zero,10006e1c <__alt_data_end+0xf8006e1c>
10006fe8:	903fe11e 	bne	r18,zero,10006f70 <__alt_data_end+0xf8006f70>
10006fec:	8f000017 	ldw	fp,0(r17)
10006ff0:	8c800117 	ldw	r18,4(r17)
10006ff4:	0011883a 	mov	r8,zero
10006ff8:	8c400204 	addi	r17,r17,8
10006ffc:	003fdb06 	br	10006f6c <__alt_data_end+0xf8006f6c>
10007000:	180d883a 	mov	r6,r3
10007004:	e00b883a 	mov	r5,fp
10007008:	da000115 	stw	r8,4(sp)
1000700c:	d8c00015 	stw	r3,0(sp)
10007010:	0007fe40 	call	10007fe4 <memmove>
10007014:	d8c00017 	ldw	r3,0(sp)
10007018:	80800017 	ldw	r2,0(r16)
1000701c:	a809883a 	mov	r4,r21
10007020:	800b883a 	mov	r5,r16
10007024:	10c5883a 	add	r2,r2,r3
10007028:	80800015 	stw	r2,0(r16)
1000702c:	d8c00015 	stw	r3,0(sp)
10007030:	00063500 	call	10006350 <_fflush_r>
10007034:	d8c00017 	ldw	r3,0(sp)
10007038:	da000117 	ldw	r8,4(sp)
1000703c:	103fc21e 	bne	r2,zero,10006f48 <__alt_data_end+0xf8006f48>
10007040:	182d883a 	mov	r22,r3
10007044:	a5a9c83a 	sub	r20,r20,r22
10007048:	a03fe11e 	bne	r20,zero,10006fd0 <__alt_data_end+0xf8006fd0>
1000704c:	a809883a 	mov	r4,r21
10007050:	800b883a 	mov	r5,r16
10007054:	00063500 	call	10006350 <_fflush_r>
10007058:	103fbb1e 	bne	r2,zero,10006f48 <__alt_data_end+0xf8006f48>
1000705c:	0011883a 	mov	r8,zero
10007060:	003fdb06 	br	10006fd0 <__alt_data_end+0xf8006fd0>
10007064:	81000017 	ldw	r4,0(r16)
10007068:	80800417 	ldw	r2,16(r16)
1000706c:	1100012e 	bgeu	r2,r4,10007074 <__sfvwrite_r+0x304>
10007070:	a4805a36 	bltu	r20,r18,100071dc <__sfvwrite_r+0x46c>
10007074:	81c00517 	ldw	r7,20(r16)
10007078:	91c01a36 	bltu	r18,r7,100070e4 <__sfvwrite_r+0x374>
1000707c:	80800917 	ldw	r2,36(r16)
10007080:	81400717 	ldw	r5,28(r16)
10007084:	a809883a 	mov	r4,r21
10007088:	b80d883a 	mov	r6,r23
1000708c:	103ee83a 	callr	r2
10007090:	1029883a 	mov	r20,r2
10007094:	00bfac0e 	bge	zero,r2,10006f48 <__alt_data_end+0xf8006f48>
10007098:	a005883a 	mov	r2,r20
1000709c:	003f9606 	br	10006ef8 <__alt_data_end+0xf8006ef8>
100070a0:	b80d883a 	mov	r6,r23
100070a4:	e00b883a 	mov	r5,fp
100070a8:	da000115 	stw	r8,4(sp)
100070ac:	0007fe40 	call	10007fe4 <memmove>
100070b0:	80800217 	ldw	r2,8(r16)
100070b4:	80c00017 	ldw	r3,0(r16)
100070b8:	da000117 	ldw	r8,4(sp)
100070bc:	15c5c83a 	sub	r2,r2,r23
100070c0:	1def883a 	add	r23,r3,r23
100070c4:	80800215 	stw	r2,8(r16)
100070c8:	85c00015 	stw	r23,0(r16)
100070cc:	003fbe06 	br	10006fc8 <__alt_data_end+0xf8006fc8>
100070d0:	81000017 	ldw	r4,0(r16)
100070d4:	9039883a 	mov	fp,r18
100070d8:	9029883a 	mov	r20,r18
100070dc:	902d883a 	mov	r22,r18
100070e0:	003f7b06 	br	10006ed0 <__alt_data_end+0xf8006ed0>
100070e4:	b80b883a 	mov	r5,r23
100070e8:	900d883a 	mov	r6,r18
100070ec:	0007fe40 	call	10007fe4 <memmove>
100070f0:	80c00217 	ldw	r3,8(r16)
100070f4:	80800017 	ldw	r2,0(r16)
100070f8:	9029883a 	mov	r20,r18
100070fc:	1c87c83a 	sub	r3,r3,r18
10007100:	1485883a 	add	r2,r2,r18
10007104:	80800015 	stw	r2,0(r16)
10007108:	80c00215 	stw	r3,8(r16)
1000710c:	9005883a 	mov	r2,r18
10007110:	003f7906 	br	10006ef8 <__alt_data_end+0xf8006ef8>
10007114:	e009883a 	mov	r4,fp
10007118:	01400284 	movi	r5,10
1000711c:	900d883a 	mov	r6,r18
10007120:	0007dc40 	call	10007dc4 <memchr>
10007124:	10003826 	beq	r2,zero,10007208 <__sfvwrite_r+0x498>
10007128:	10800044 	addi	r2,r2,1
1000712c:	1729c83a 	sub	r20,r2,fp
10007130:	02000044 	movi	r8,1
10007134:	003f8f06 	br	10006f74 <__alt_data_end+0xf8006f74>
10007138:	80800517 	ldw	r2,20(r16)
1000713c:	81400417 	ldw	r5,16(r16)
10007140:	87000017 	ldw	fp,0(r16)
10007144:	10a9883a 	add	r20,r2,r2
10007148:	a085883a 	add	r2,r20,r2
1000714c:	1028d7fa 	srli	r20,r2,31
10007150:	e179c83a 	sub	fp,fp,r5
10007154:	e1000044 	addi	r4,fp,1
10007158:	a085883a 	add	r2,r20,r2
1000715c:	1029d07a 	srai	r20,r2,1
10007160:	2485883a 	add	r2,r4,r18
10007164:	a00d883a 	mov	r6,r20
10007168:	a080022e 	bgeu	r20,r2,10007174 <__sfvwrite_r+0x404>
1000716c:	1029883a 	mov	r20,r2
10007170:	100d883a 	mov	r6,r2
10007174:	18c1000c 	andi	r3,r3,1024
10007178:	a809883a 	mov	r4,r21
1000717c:	183f6a26 	beq	r3,zero,10006f28 <__alt_data_end+0xf8006f28>
10007180:	300b883a 	mov	r5,r6
10007184:	000761c0 	call	1000761c <_malloc_r>
10007188:	102d883a 	mov	r22,r2
1000718c:	103f6c26 	beq	r2,zero,10006f40 <__alt_data_end+0xf8006f40>
10007190:	81400417 	ldw	r5,16(r16)
10007194:	1009883a 	mov	r4,r2
10007198:	e00d883a 	mov	r6,fp
1000719c:	0007eac0 	call	10007eac <memcpy>
100071a0:	8080030b 	ldhu	r2,12(r16)
100071a4:	00fedfc4 	movi	r3,-1153
100071a8:	10c4703a 	and	r2,r2,r3
100071ac:	10802014 	ori	r2,r2,128
100071b0:	8080030d 	sth	r2,12(r16)
100071b4:	b709883a 	add	r4,r22,fp
100071b8:	a707c83a 	sub	r3,r20,fp
100071bc:	85800415 	stw	r22,16(r16)
100071c0:	85000515 	stw	r20,20(r16)
100071c4:	81000015 	stw	r4,0(r16)
100071c8:	9039883a 	mov	fp,r18
100071cc:	80c00215 	stw	r3,8(r16)
100071d0:	9029883a 	mov	r20,r18
100071d4:	902d883a 	mov	r22,r18
100071d8:	003f3d06 	br	10006ed0 <__alt_data_end+0xf8006ed0>
100071dc:	b80b883a 	mov	r5,r23
100071e0:	a00d883a 	mov	r6,r20
100071e4:	0007fe40 	call	10007fe4 <memmove>
100071e8:	80800017 	ldw	r2,0(r16)
100071ec:	a809883a 	mov	r4,r21
100071f0:	800b883a 	mov	r5,r16
100071f4:	1505883a 	add	r2,r2,r20
100071f8:	80800015 	stw	r2,0(r16)
100071fc:	00063500 	call	10006350 <_fflush_r>
10007200:	103fa526 	beq	r2,zero,10007098 <__alt_data_end+0xf8007098>
10007204:	003f5006 	br	10006f48 <__alt_data_end+0xf8006f48>
10007208:	95000044 	addi	r20,r18,1
1000720c:	02000044 	movi	r8,1
10007210:	003f5806 	br	10006f74 <__alt_data_end+0xf8006f74>

10007214 <_fwalk>:
10007214:	defff804 	addi	sp,sp,-32
10007218:	dd400515 	stw	r21,20(sp)
1000721c:	2540b804 	addi	r21,r4,736
10007220:	dd800615 	stw	r22,24(sp)
10007224:	dd000415 	stw	r20,16(sp)
10007228:	dfc00715 	stw	ra,28(sp)
1000722c:	dcc00315 	stw	r19,12(sp)
10007230:	dc800215 	stw	r18,8(sp)
10007234:	dc400115 	stw	r17,4(sp)
10007238:	dc000015 	stw	r16,0(sp)
1000723c:	2829883a 	mov	r20,r5
10007240:	002d883a 	mov	r22,zero
10007244:	000691c0 	call	1000691c <__sfp_lock_acquire>
10007248:	a8001426 	beq	r21,zero,1000729c <_fwalk+0x88>
1000724c:	04ffffc4 	movi	r19,-1
10007250:	ac400117 	ldw	r17,4(r21)
10007254:	ac800217 	ldw	r18,8(r21)
10007258:	8c7fffc4 	addi	r17,r17,-1
1000725c:	88000d16 	blt	r17,zero,10007294 <_fwalk+0x80>
10007260:	94000304 	addi	r16,r18,12
10007264:	94800384 	addi	r18,r18,14
10007268:	80c0000f 	ldh	r3,0(r16)
1000726c:	8c7fffc4 	addi	r17,r17,-1
10007270:	813ffd04 	addi	r4,r16,-12
10007274:	18000426 	beq	r3,zero,10007288 <_fwalk+0x74>
10007278:	90c0000f 	ldh	r3,0(r18)
1000727c:	1cc00226 	beq	r3,r19,10007288 <_fwalk+0x74>
10007280:	a03ee83a 	callr	r20
10007284:	b0acb03a 	or	r22,r22,r2
10007288:	84001a04 	addi	r16,r16,104
1000728c:	94801a04 	addi	r18,r18,104
10007290:	8cfff51e 	bne	r17,r19,10007268 <__alt_data_end+0xf8007268>
10007294:	ad400017 	ldw	r21,0(r21)
10007298:	a83fed1e 	bne	r21,zero,10007250 <__alt_data_end+0xf8007250>
1000729c:	00069200 	call	10006920 <__sfp_lock_release>
100072a0:	b005883a 	mov	r2,r22
100072a4:	dfc00717 	ldw	ra,28(sp)
100072a8:	dd800617 	ldw	r22,24(sp)
100072ac:	dd400517 	ldw	r21,20(sp)
100072b0:	dd000417 	ldw	r20,16(sp)
100072b4:	dcc00317 	ldw	r19,12(sp)
100072b8:	dc800217 	ldw	r18,8(sp)
100072bc:	dc400117 	ldw	r17,4(sp)
100072c0:	dc000017 	ldw	r16,0(sp)
100072c4:	dec00804 	addi	sp,sp,32
100072c8:	f800283a 	ret

100072cc <_fwalk_reent>:
100072cc:	defff804 	addi	sp,sp,-32
100072d0:	dd400515 	stw	r21,20(sp)
100072d4:	2540b804 	addi	r21,r4,736
100072d8:	dd800615 	stw	r22,24(sp)
100072dc:	dd000415 	stw	r20,16(sp)
100072e0:	dcc00315 	stw	r19,12(sp)
100072e4:	dfc00715 	stw	ra,28(sp)
100072e8:	dc800215 	stw	r18,8(sp)
100072ec:	dc400115 	stw	r17,4(sp)
100072f0:	dc000015 	stw	r16,0(sp)
100072f4:	2027883a 	mov	r19,r4
100072f8:	2829883a 	mov	r20,r5
100072fc:	002d883a 	mov	r22,zero
10007300:	000691c0 	call	1000691c <__sfp_lock_acquire>
10007304:	a8001326 	beq	r21,zero,10007354 <_fwalk_reent+0x88>
10007308:	04bfffc4 	movi	r18,-1
1000730c:	ac400117 	ldw	r17,4(r21)
10007310:	ac000217 	ldw	r16,8(r21)
10007314:	8c7fffc4 	addi	r17,r17,-1
10007318:	88000c16 	blt	r17,zero,1000734c <_fwalk_reent+0x80>
1000731c:	84000304 	addi	r16,r16,12
10007320:	80c0000f 	ldh	r3,0(r16)
10007324:	8c7fffc4 	addi	r17,r17,-1
10007328:	817ffd04 	addi	r5,r16,-12
1000732c:	18000526 	beq	r3,zero,10007344 <_fwalk_reent+0x78>
10007330:	80c0008f 	ldh	r3,2(r16)
10007334:	9809883a 	mov	r4,r19
10007338:	1c800226 	beq	r3,r18,10007344 <_fwalk_reent+0x78>
1000733c:	a03ee83a 	callr	r20
10007340:	b0acb03a 	or	r22,r22,r2
10007344:	84001a04 	addi	r16,r16,104
10007348:	8cbff51e 	bne	r17,r18,10007320 <__alt_data_end+0xf8007320>
1000734c:	ad400017 	ldw	r21,0(r21)
10007350:	a83fee1e 	bne	r21,zero,1000730c <__alt_data_end+0xf800730c>
10007354:	00069200 	call	10006920 <__sfp_lock_release>
10007358:	b005883a 	mov	r2,r22
1000735c:	dfc00717 	ldw	ra,28(sp)
10007360:	dd800617 	ldw	r22,24(sp)
10007364:	dd400517 	ldw	r21,20(sp)
10007368:	dd000417 	ldw	r20,16(sp)
1000736c:	dcc00317 	ldw	r19,12(sp)
10007370:	dc800217 	ldw	r18,8(sp)
10007374:	dc400117 	ldw	r17,4(sp)
10007378:	dc000017 	ldw	r16,0(sp)
1000737c:	dec00804 	addi	sp,sp,32
10007380:	f800283a 	ret

10007384 <_setlocale_r>:
10007384:	30001b26 	beq	r6,zero,100073f4 <_setlocale_r+0x70>
10007388:	01440074 	movhi	r5,4097
1000738c:	defffe04 	addi	sp,sp,-8
10007390:	29482a04 	addi	r5,r5,8360
10007394:	3009883a 	mov	r4,r6
10007398:	dc000015 	stw	r16,0(sp)
1000739c:	dfc00115 	stw	ra,4(sp)
100073a0:	3021883a 	mov	r16,r6
100073a4:	0009a500 	call	10009a50 <strcmp>
100073a8:	1000061e 	bne	r2,zero,100073c4 <_setlocale_r+0x40>
100073ac:	00840074 	movhi	r2,4097
100073b0:	10882904 	addi	r2,r2,8356
100073b4:	dfc00117 	ldw	ra,4(sp)
100073b8:	dc000017 	ldw	r16,0(sp)
100073bc:	dec00204 	addi	sp,sp,8
100073c0:	f800283a 	ret
100073c4:	01440074 	movhi	r5,4097
100073c8:	29482904 	addi	r5,r5,8356
100073cc:	8009883a 	mov	r4,r16
100073d0:	0009a500 	call	10009a50 <strcmp>
100073d4:	103ff526 	beq	r2,zero,100073ac <__alt_data_end+0xf80073ac>
100073d8:	01440074 	movhi	r5,4097
100073dc:	29481404 	addi	r5,r5,8272
100073e0:	8009883a 	mov	r4,r16
100073e4:	0009a500 	call	10009a50 <strcmp>
100073e8:	103ff026 	beq	r2,zero,100073ac <__alt_data_end+0xf80073ac>
100073ec:	0005883a 	mov	r2,zero
100073f0:	003ff006 	br	100073b4 <__alt_data_end+0xf80073b4>
100073f4:	00840074 	movhi	r2,4097
100073f8:	10882904 	addi	r2,r2,8356
100073fc:	f800283a 	ret

10007400 <__locale_charset>:
10007400:	00840074 	movhi	r2,4097
10007404:	1089dc04 	addi	r2,r2,10096
10007408:	f800283a 	ret

1000740c <__locale_mb_cur_max>:
1000740c:	00840074 	movhi	r2,4097
10007410:	108f7804 	addi	r2,r2,15840
10007414:	10800017 	ldw	r2,0(r2)
10007418:	f800283a 	ret

1000741c <__locale_msgcharset>:
1000741c:	00840074 	movhi	r2,4097
10007420:	1089d404 	addi	r2,r2,10064
10007424:	f800283a 	ret

10007428 <__locale_cjk_lang>:
10007428:	0005883a 	mov	r2,zero
1000742c:	f800283a 	ret

10007430 <_localeconv_r>:
10007430:	00840074 	movhi	r2,4097
10007434:	1089e404 	addi	r2,r2,10128
10007438:	f800283a 	ret

1000743c <setlocale>:
1000743c:	00c40074 	movhi	r3,4097
10007440:	18cf7704 	addi	r3,r3,15836
10007444:	2005883a 	mov	r2,r4
10007448:	19000017 	ldw	r4,0(r3)
1000744c:	280d883a 	mov	r6,r5
10007450:	100b883a 	mov	r5,r2
10007454:	00073841 	jmpi	10007384 <_setlocale_r>

10007458 <localeconv>:
10007458:	00840074 	movhi	r2,4097
1000745c:	1089e404 	addi	r2,r2,10128
10007460:	f800283a 	ret

10007464 <__smakebuf_r>:
10007464:	2880030b 	ldhu	r2,12(r5)
10007468:	10c0008c 	andi	r3,r2,2
1000746c:	1800401e 	bne	r3,zero,10007570 <__smakebuf_r+0x10c>
10007470:	deffec04 	addi	sp,sp,-80
10007474:	dc000f15 	stw	r16,60(sp)
10007478:	2821883a 	mov	r16,r5
1000747c:	2940038f 	ldh	r5,14(r5)
10007480:	dc401015 	stw	r17,64(sp)
10007484:	dfc01315 	stw	ra,76(sp)
10007488:	dcc01215 	stw	r19,72(sp)
1000748c:	dc801115 	stw	r18,68(sp)
10007490:	2023883a 	mov	r17,r4
10007494:	28001b16 	blt	r5,zero,10007504 <__smakebuf_r+0xa0>
10007498:	d80d883a 	mov	r6,sp
1000749c:	000b4c80 	call	1000b4c8 <_fstat_r>
100074a0:	10001716 	blt	r2,zero,10007500 <__smakebuf_r+0x9c>
100074a4:	d8800117 	ldw	r2,4(sp)
100074a8:	00e00014 	movui	r3,32768
100074ac:	10bc000c 	andi	r2,r2,61440
100074b0:	10c03726 	beq	r2,r3,10007590 <__smakebuf_r+0x12c>
100074b4:	80c0030b 	ldhu	r3,12(r16)
100074b8:	18c20014 	ori	r3,r3,2048
100074bc:	80c0030d 	sth	r3,12(r16)
100074c0:	00c80004 	movi	r3,8192
100074c4:	10c03c1e 	bne	r2,r3,100075b8 <__smakebuf_r+0x154>
100074c8:	8140038f 	ldh	r5,14(r16)
100074cc:	8809883a 	mov	r4,r17
100074d0:	000b5200 	call	1000b520 <_isatty_r>
100074d4:	10004e26 	beq	r2,zero,10007610 <__smakebuf_r+0x1ac>
100074d8:	8080030b 	ldhu	r2,12(r16)
100074dc:	04c00044 	movi	r19,1
100074e0:	80c010c4 	addi	r3,r16,67
100074e4:	14c4b03a 	or	r2,r2,r19
100074e8:	8080030d 	sth	r2,12(r16)
100074ec:	80c00015 	stw	r3,0(r16)
100074f0:	80c00415 	stw	r3,16(r16)
100074f4:	84c00515 	stw	r19,20(r16)
100074f8:	04810004 	movi	r18,1024
100074fc:	00000706 	br	1000751c <__smakebuf_r+0xb8>
10007500:	8080030b 	ldhu	r2,12(r16)
10007504:	10c0200c 	andi	r3,r2,128
10007508:	18001f1e 	bne	r3,zero,10007588 <__smakebuf_r+0x124>
1000750c:	04810004 	movi	r18,1024
10007510:	10820014 	ori	r2,r2,2048
10007514:	8080030d 	sth	r2,12(r16)
10007518:	0027883a 	mov	r19,zero
1000751c:	8809883a 	mov	r4,r17
10007520:	900b883a 	mov	r5,r18
10007524:	000761c0 	call	1000761c <_malloc_r>
10007528:	10002e26 	beq	r2,zero,100075e4 <__smakebuf_r+0x180>
1000752c:	80c0030b 	ldhu	r3,12(r16)
10007530:	01040034 	movhi	r4,4096
10007534:	21196e04 	addi	r4,r4,26040
10007538:	89000f15 	stw	r4,60(r17)
1000753c:	18c02014 	ori	r3,r3,128
10007540:	80c0030d 	sth	r3,12(r16)
10007544:	80800015 	stw	r2,0(r16)
10007548:	80800415 	stw	r2,16(r16)
1000754c:	84800515 	stw	r18,20(r16)
10007550:	98001c1e 	bne	r19,zero,100075c4 <__smakebuf_r+0x160>
10007554:	dfc01317 	ldw	ra,76(sp)
10007558:	dcc01217 	ldw	r19,72(sp)
1000755c:	dc801117 	ldw	r18,68(sp)
10007560:	dc401017 	ldw	r17,64(sp)
10007564:	dc000f17 	ldw	r16,60(sp)
10007568:	dec01404 	addi	sp,sp,80
1000756c:	f800283a 	ret
10007570:	288010c4 	addi	r2,r5,67
10007574:	28800015 	stw	r2,0(r5)
10007578:	28800415 	stw	r2,16(r5)
1000757c:	00800044 	movi	r2,1
10007580:	28800515 	stw	r2,20(r5)
10007584:	f800283a 	ret
10007588:	04801004 	movi	r18,64
1000758c:	003fe006 	br	10007510 <__alt_data_end+0xf8007510>
10007590:	81000a17 	ldw	r4,40(r16)
10007594:	00c40074 	movhi	r3,4097
10007598:	18e67b04 	addi	r3,r3,-26132
1000759c:	20ffc51e 	bne	r4,r3,100074b4 <__alt_data_end+0xf80074b4>
100075a0:	80c0030b 	ldhu	r3,12(r16)
100075a4:	01010004 	movi	r4,1024
100075a8:	81001315 	stw	r4,76(r16)
100075ac:	1906b03a 	or	r3,r3,r4
100075b0:	80c0030d 	sth	r3,12(r16)
100075b4:	003fc206 	br	100074c0 <__alt_data_end+0xf80074c0>
100075b8:	0027883a 	mov	r19,zero
100075bc:	04810004 	movi	r18,1024
100075c0:	003fd606 	br	1000751c <__alt_data_end+0xf800751c>
100075c4:	8140038f 	ldh	r5,14(r16)
100075c8:	8809883a 	mov	r4,r17
100075cc:	000b5200 	call	1000b520 <_isatty_r>
100075d0:	103fe026 	beq	r2,zero,10007554 <__alt_data_end+0xf8007554>
100075d4:	8080030b 	ldhu	r2,12(r16)
100075d8:	10800054 	ori	r2,r2,1
100075dc:	8080030d 	sth	r2,12(r16)
100075e0:	003fdc06 	br	10007554 <__alt_data_end+0xf8007554>
100075e4:	8080030b 	ldhu	r2,12(r16)
100075e8:	10c0800c 	andi	r3,r2,512
100075ec:	183fd91e 	bne	r3,zero,10007554 <__alt_data_end+0xf8007554>
100075f0:	10800094 	ori	r2,r2,2
100075f4:	80c010c4 	addi	r3,r16,67
100075f8:	8080030d 	sth	r2,12(r16)
100075fc:	00800044 	movi	r2,1
10007600:	80c00015 	stw	r3,0(r16)
10007604:	80c00415 	stw	r3,16(r16)
10007608:	80800515 	stw	r2,20(r16)
1000760c:	003fd106 	br	10007554 <__alt_data_end+0xf8007554>
10007610:	04c00044 	movi	r19,1
10007614:	04810004 	movi	r18,1024
10007618:	003fc006 	br	1000751c <__alt_data_end+0xf800751c>

1000761c <_malloc_r>:
1000761c:	defff504 	addi	sp,sp,-44
10007620:	dc800315 	stw	r18,12(sp)
10007624:	dfc00a15 	stw	ra,40(sp)
10007628:	df000915 	stw	fp,36(sp)
1000762c:	ddc00815 	stw	r23,32(sp)
10007630:	dd800715 	stw	r22,28(sp)
10007634:	dd400615 	stw	r21,24(sp)
10007638:	dd000515 	stw	r20,20(sp)
1000763c:	dcc00415 	stw	r19,16(sp)
10007640:	dc400215 	stw	r17,8(sp)
10007644:	dc000115 	stw	r16,4(sp)
10007648:	288002c4 	addi	r2,r5,11
1000764c:	00c00584 	movi	r3,22
10007650:	2025883a 	mov	r18,r4
10007654:	18802a2e 	bgeu	r3,r2,10007700 <_malloc_r+0xe4>
10007658:	047ffe04 	movi	r17,-8
1000765c:	1462703a 	and	r17,r2,r17
10007660:	88009e16 	blt	r17,zero,100078dc <_malloc_r+0x2c0>
10007664:	89409d36 	bltu	r17,r5,100078dc <_malloc_r+0x2c0>
10007668:	000f6340 	call	1000f634 <__malloc_lock>
1000766c:	00807dc4 	movi	r2,503
10007670:	14402736 	bltu	r2,r17,10007710 <_malloc_r+0xf4>
10007674:	8806d0fa 	srli	r3,r17,3
10007678:	04c40074 	movhi	r19,4097
1000767c:	9cc9f204 	addi	r19,r19,10184
10007680:	18c5883a 	add	r2,r3,r3
10007684:	1085883a 	add	r2,r2,r2
10007688:	1085883a 	add	r2,r2,r2
1000768c:	9885883a 	add	r2,r19,r2
10007690:	14000317 	ldw	r16,12(r2)
10007694:	80814a26 	beq	r16,r2,10007bc0 <_malloc_r+0x5a4>
10007698:	80c00117 	ldw	r3,4(r16)
1000769c:	81000317 	ldw	r4,12(r16)
100076a0:	00bfff04 	movi	r2,-4
100076a4:	1884703a 	and	r2,r3,r2
100076a8:	81400217 	ldw	r5,8(r16)
100076ac:	8085883a 	add	r2,r16,r2
100076b0:	10c00117 	ldw	r3,4(r2)
100076b4:	29000315 	stw	r4,12(r5)
100076b8:	21400215 	stw	r5,8(r4)
100076bc:	18c00054 	ori	r3,r3,1
100076c0:	10c00115 	stw	r3,4(r2)
100076c4:	9009883a 	mov	r4,r18
100076c8:	000f6540 	call	1000f654 <__malloc_unlock>
100076cc:	80800204 	addi	r2,r16,8
100076d0:	dfc00a17 	ldw	ra,40(sp)
100076d4:	df000917 	ldw	fp,36(sp)
100076d8:	ddc00817 	ldw	r23,32(sp)
100076dc:	dd800717 	ldw	r22,28(sp)
100076e0:	dd400617 	ldw	r21,24(sp)
100076e4:	dd000517 	ldw	r20,20(sp)
100076e8:	dcc00417 	ldw	r19,16(sp)
100076ec:	dc800317 	ldw	r18,12(sp)
100076f0:	dc400217 	ldw	r17,8(sp)
100076f4:	dc000117 	ldw	r16,4(sp)
100076f8:	dec00b04 	addi	sp,sp,44
100076fc:	f800283a 	ret
10007700:	04400404 	movi	r17,16
10007704:	89407536 	bltu	r17,r5,100078dc <_malloc_r+0x2c0>
10007708:	000f6340 	call	1000f634 <__malloc_lock>
1000770c:	003fd906 	br	10007674 <__alt_data_end+0xf8007674>
10007710:	8806d27a 	srli	r3,r17,9
10007714:	18007526 	beq	r3,zero,100078ec <_malloc_r+0x2d0>
10007718:	00800104 	movi	r2,4
1000771c:	10c0ef36 	bltu	r2,r3,10007adc <_malloc_r+0x4c0>
10007720:	8806d1ba 	srli	r3,r17,6
10007724:	19c00e04 	addi	r7,r3,56
10007728:	39cb883a 	add	r5,r7,r7
1000772c:	04c40074 	movhi	r19,4097
10007730:	294b883a 	add	r5,r5,r5
10007734:	9cc9f204 	addi	r19,r19,10184
10007738:	294b883a 	add	r5,r5,r5
1000773c:	994b883a 	add	r5,r19,r5
10007740:	2c000317 	ldw	r16,12(r5)
10007744:	2c000e26 	beq	r5,r16,10007780 <_malloc_r+0x164>
10007748:	80800117 	ldw	r2,4(r16)
1000774c:	01bfff04 	movi	r6,-4
10007750:	010003c4 	movi	r4,15
10007754:	1184703a 	and	r2,r2,r6
10007758:	1447c83a 	sub	r3,r2,r17
1000775c:	20c00716 	blt	r4,r3,1000777c <_malloc_r+0x160>
10007760:	1800650e 	bge	r3,zero,100078f8 <_malloc_r+0x2dc>
10007764:	84000317 	ldw	r16,12(r16)
10007768:	2c000526 	beq	r5,r16,10007780 <_malloc_r+0x164>
1000776c:	80800117 	ldw	r2,4(r16)
10007770:	1184703a 	and	r2,r2,r6
10007774:	1447c83a 	sub	r3,r2,r17
10007778:	20fff90e 	bge	r4,r3,10007760 <__alt_data_end+0xf8007760>
1000777c:	39ffffc4 	addi	r7,r7,-1
10007780:	38c00044 	addi	r3,r7,1
10007784:	01840074 	movhi	r6,4097
10007788:	9c000417 	ldw	r16,16(r19)
1000778c:	3189f204 	addi	r6,r6,10184
10007790:	32400204 	addi	r9,r6,8
10007794:	82410326 	beq	r16,r9,10007ba4 <_malloc_r+0x588>
10007798:	81000117 	ldw	r4,4(r16)
1000779c:	00bfff04 	movi	r2,-4
100077a0:	208e703a 	and	r7,r4,r2
100077a4:	3c45c83a 	sub	r2,r7,r17
100077a8:	010003c4 	movi	r4,15
100077ac:	2080ee16 	blt	r4,r2,10007b68 <_malloc_r+0x54c>
100077b0:	32400515 	stw	r9,20(r6)
100077b4:	32400415 	stw	r9,16(r6)
100077b8:	1000510e 	bge	r2,zero,10007900 <_malloc_r+0x2e4>
100077bc:	00807fc4 	movi	r2,511
100077c0:	11c0ce36 	bltu	r2,r7,10007afc <_malloc_r+0x4e0>
100077c4:	3808d0fa 	srli	r4,r7,3
100077c8:	01c00044 	movi	r7,1
100077cc:	30800117 	ldw	r2,4(r6)
100077d0:	210b883a 	add	r5,r4,r4
100077d4:	294b883a 	add	r5,r5,r5
100077d8:	2009d0ba 	srai	r4,r4,2
100077dc:	294b883a 	add	r5,r5,r5
100077e0:	298b883a 	add	r5,r5,r6
100077e4:	2a000217 	ldw	r8,8(r5)
100077e8:	3908983a 	sll	r4,r7,r4
100077ec:	81400315 	stw	r5,12(r16)
100077f0:	82000215 	stw	r8,8(r16)
100077f4:	2088b03a 	or	r4,r4,r2
100077f8:	2c000215 	stw	r16,8(r5)
100077fc:	31000115 	stw	r4,4(r6)
10007800:	44000315 	stw	r16,12(r8)
10007804:	1805d0ba 	srai	r2,r3,2
10007808:	01400044 	movi	r5,1
1000780c:	288a983a 	sll	r5,r5,r2
10007810:	21404336 	bltu	r4,r5,10007920 <_malloc_r+0x304>
10007814:	2144703a 	and	r2,r4,r5
10007818:	10000a1e 	bne	r2,zero,10007844 <_malloc_r+0x228>
1000781c:	00bfff04 	movi	r2,-4
10007820:	294b883a 	add	r5,r5,r5
10007824:	1886703a 	and	r3,r3,r2
10007828:	2144703a 	and	r2,r4,r5
1000782c:	18c00104 	addi	r3,r3,4
10007830:	1000041e 	bne	r2,zero,10007844 <_malloc_r+0x228>
10007834:	294b883a 	add	r5,r5,r5
10007838:	2144703a 	and	r2,r4,r5
1000783c:	18c00104 	addi	r3,r3,4
10007840:	103ffc26 	beq	r2,zero,10007834 <__alt_data_end+0xf8007834>
10007844:	023fff04 	movi	r8,-4
10007848:	01c003c4 	movi	r7,15
1000784c:	18c5883a 	add	r2,r3,r3
10007850:	1085883a 	add	r2,r2,r2
10007854:	1085883a 	add	r2,r2,r2
10007858:	9895883a 	add	r10,r19,r2
1000785c:	52c00304 	addi	r11,r10,12
10007860:	1819883a 	mov	r12,r3
10007864:	5c000017 	ldw	r16,0(r11)
10007868:	59bffd04 	addi	r6,r11,-12
1000786c:	8180041e 	bne	r16,r6,10007880 <_malloc_r+0x264>
10007870:	0000ce06 	br	10007bac <_malloc_r+0x590>
10007874:	2000d70e 	bge	r4,zero,10007bd4 <_malloc_r+0x5b8>
10007878:	84000317 	ldw	r16,12(r16)
1000787c:	8180cb26 	beq	r16,r6,10007bac <_malloc_r+0x590>
10007880:	80800117 	ldw	r2,4(r16)
10007884:	1204703a 	and	r2,r2,r8
10007888:	1449c83a 	sub	r4,r2,r17
1000788c:	393ff90e 	bge	r7,r4,10007874 <__alt_data_end+0xf8007874>
10007890:	80800317 	ldw	r2,12(r16)
10007894:	80c00217 	ldw	r3,8(r16)
10007898:	89400054 	ori	r5,r17,1
1000789c:	81400115 	stw	r5,4(r16)
100078a0:	18800315 	stw	r2,12(r3)
100078a4:	10c00215 	stw	r3,8(r2)
100078a8:	8463883a 	add	r17,r16,r17
100078ac:	9c400515 	stw	r17,20(r19)
100078b0:	9c400415 	stw	r17,16(r19)
100078b4:	20800054 	ori	r2,r4,1
100078b8:	88800115 	stw	r2,4(r17)
100078bc:	8a400315 	stw	r9,12(r17)
100078c0:	8a400215 	stw	r9,8(r17)
100078c4:	8923883a 	add	r17,r17,r4
100078c8:	89000015 	stw	r4,0(r17)
100078cc:	9009883a 	mov	r4,r18
100078d0:	000f6540 	call	1000f654 <__malloc_unlock>
100078d4:	80800204 	addi	r2,r16,8
100078d8:	003f7d06 	br	100076d0 <__alt_data_end+0xf80076d0>
100078dc:	00800304 	movi	r2,12
100078e0:	90800015 	stw	r2,0(r18)
100078e4:	0005883a 	mov	r2,zero
100078e8:	003f7906 	br	100076d0 <__alt_data_end+0xf80076d0>
100078ec:	01401f84 	movi	r5,126
100078f0:	01c00fc4 	movi	r7,63
100078f4:	003f8d06 	br	1000772c <__alt_data_end+0xf800772c>
100078f8:	81000317 	ldw	r4,12(r16)
100078fc:	003f6a06 	br	100076a8 <__alt_data_end+0xf80076a8>
10007900:	81c5883a 	add	r2,r16,r7
10007904:	10c00117 	ldw	r3,4(r2)
10007908:	9009883a 	mov	r4,r18
1000790c:	18c00054 	ori	r3,r3,1
10007910:	10c00115 	stw	r3,4(r2)
10007914:	000f6540 	call	1000f654 <__malloc_unlock>
10007918:	80800204 	addi	r2,r16,8
1000791c:	003f6c06 	br	100076d0 <__alt_data_end+0xf80076d0>
10007920:	9c000217 	ldw	r16,8(r19)
10007924:	00bfff04 	movi	r2,-4
10007928:	85800117 	ldw	r22,4(r16)
1000792c:	b0ac703a 	and	r22,r22,r2
10007930:	b4400336 	bltu	r22,r17,10007940 <_malloc_r+0x324>
10007934:	b445c83a 	sub	r2,r22,r17
10007938:	00c003c4 	movi	r3,15
1000793c:	18805d16 	blt	r3,r2,10007ab4 <_malloc_r+0x498>
10007940:	05c40074 	movhi	r23,4097
10007944:	00840074 	movhi	r2,4097
10007948:	bdcf7904 	addi	r23,r23,15844
1000794c:	10964704 	addi	r2,r2,22812
10007950:	15400017 	ldw	r21,0(r2)
10007954:	b9000017 	ldw	r4,0(r23)
10007958:	00ffffc4 	movi	r3,-1
1000795c:	858d883a 	add	r6,r16,r22
10007960:	8d6b883a 	add	r21,r17,r21
10007964:	20c0e426 	beq	r4,r3,10007cf8 <_malloc_r+0x6dc>
10007968:	ad4403c4 	addi	r21,r21,4111
1000796c:	00fc0004 	movi	r3,-4096
10007970:	a8ea703a 	and	r21,r21,r3
10007974:	9009883a 	mov	r4,r18
10007978:	a80b883a 	mov	r5,r21
1000797c:	d9800015 	stw	r6,0(sp)
10007980:	00098c00 	call	100098c0 <_sbrk_r>
10007984:	00ffffc4 	movi	r3,-1
10007988:	1029883a 	mov	r20,r2
1000798c:	d9800017 	ldw	r6,0(sp)
10007990:	10c0a426 	beq	r2,r3,10007c24 <_malloc_r+0x608>
10007994:	1180a236 	bltu	r2,r6,10007c20 <_malloc_r+0x604>
10007998:	07040074 	movhi	fp,4097
1000799c:	e7165404 	addi	fp,fp,22864
100079a0:	e0c00017 	ldw	r3,0(fp)
100079a4:	a8c7883a 	add	r3,r21,r3
100079a8:	e0c00015 	stw	r3,0(fp)
100079ac:	3500da26 	beq	r6,r20,10007d18 <_malloc_r+0x6fc>
100079b0:	b9000017 	ldw	r4,0(r23)
100079b4:	00bfffc4 	movi	r2,-1
100079b8:	2080e426 	beq	r4,r2,10007d4c <_malloc_r+0x730>
100079bc:	a185c83a 	sub	r2,r20,r6
100079c0:	1885883a 	add	r2,r3,r2
100079c4:	e0800015 	stw	r2,0(fp)
100079c8:	a0c001cc 	andi	r3,r20,7
100079cc:	1800b526 	beq	r3,zero,10007ca4 <_malloc_r+0x688>
100079d0:	a0e9c83a 	sub	r20,r20,r3
100079d4:	00840204 	movi	r2,4104
100079d8:	a5000204 	addi	r20,r20,8
100079dc:	10c7c83a 	sub	r3,r2,r3
100079e0:	a545883a 	add	r2,r20,r21
100079e4:	1083ffcc 	andi	r2,r2,4095
100079e8:	18abc83a 	sub	r21,r3,r2
100079ec:	9009883a 	mov	r4,r18
100079f0:	a80b883a 	mov	r5,r21
100079f4:	00098c00 	call	100098c0 <_sbrk_r>
100079f8:	00ffffc4 	movi	r3,-1
100079fc:	10c0d026 	beq	r2,r3,10007d40 <_malloc_r+0x724>
10007a00:	1507c83a 	sub	r3,r2,r20
10007a04:	a8c7883a 	add	r3,r21,r3
10007a08:	18c00054 	ori	r3,r3,1
10007a0c:	e0800017 	ldw	r2,0(fp)
10007a10:	9d000215 	stw	r20,8(r19)
10007a14:	a0c00115 	stw	r3,4(r20)
10007a18:	a887883a 	add	r3,r21,r2
10007a1c:	e0c00015 	stw	r3,0(fp)
10007a20:	84c00e26 	beq	r16,r19,10007a5c <_malloc_r+0x440>
10007a24:	018003c4 	movi	r6,15
10007a28:	3580a02e 	bgeu	r6,r22,10007cac <_malloc_r+0x690>
10007a2c:	81400117 	ldw	r5,4(r16)
10007a30:	013ffe04 	movi	r4,-8
10007a34:	b0bffd04 	addi	r2,r22,-12
10007a38:	1104703a 	and	r2,r2,r4
10007a3c:	2900004c 	andi	r4,r5,1
10007a40:	1108b03a 	or	r4,r2,r4
10007a44:	81000115 	stw	r4,4(r16)
10007a48:	01400144 	movi	r5,5
10007a4c:	8089883a 	add	r4,r16,r2
10007a50:	21400115 	stw	r5,4(r4)
10007a54:	21400215 	stw	r5,8(r4)
10007a58:	3080c036 	bltu	r6,r2,10007d5c <_malloc_r+0x740>
10007a5c:	00840074 	movhi	r2,4097
10007a60:	10964604 	addi	r2,r2,22808
10007a64:	11000017 	ldw	r4,0(r2)
10007a68:	20c0012e 	bgeu	r4,r3,10007a70 <_malloc_r+0x454>
10007a6c:	10c00015 	stw	r3,0(r2)
10007a70:	00840074 	movhi	r2,4097
10007a74:	10964504 	addi	r2,r2,22804
10007a78:	11000017 	ldw	r4,0(r2)
10007a7c:	9c000217 	ldw	r16,8(r19)
10007a80:	20c0012e 	bgeu	r4,r3,10007a88 <_malloc_r+0x46c>
10007a84:	10c00015 	stw	r3,0(r2)
10007a88:	80c00117 	ldw	r3,4(r16)
10007a8c:	00bfff04 	movi	r2,-4
10007a90:	1886703a 	and	r3,r3,r2
10007a94:	1c45c83a 	sub	r2,r3,r17
10007a98:	1c400236 	bltu	r3,r17,10007aa4 <_malloc_r+0x488>
10007a9c:	00c003c4 	movi	r3,15
10007aa0:	18800416 	blt	r3,r2,10007ab4 <_malloc_r+0x498>
10007aa4:	9009883a 	mov	r4,r18
10007aa8:	000f6540 	call	1000f654 <__malloc_unlock>
10007aac:	0005883a 	mov	r2,zero
10007ab0:	003f0706 	br	100076d0 <__alt_data_end+0xf80076d0>
10007ab4:	88c00054 	ori	r3,r17,1
10007ab8:	80c00115 	stw	r3,4(r16)
10007abc:	8463883a 	add	r17,r16,r17
10007ac0:	10800054 	ori	r2,r2,1
10007ac4:	9c400215 	stw	r17,8(r19)
10007ac8:	88800115 	stw	r2,4(r17)
10007acc:	9009883a 	mov	r4,r18
10007ad0:	000f6540 	call	1000f654 <__malloc_unlock>
10007ad4:	80800204 	addi	r2,r16,8
10007ad8:	003efd06 	br	100076d0 <__alt_data_end+0xf80076d0>
10007adc:	00800504 	movi	r2,20
10007ae0:	10c0482e 	bgeu	r2,r3,10007c04 <_malloc_r+0x5e8>
10007ae4:	00801504 	movi	r2,84
10007ae8:	10c06836 	bltu	r2,r3,10007c8c <_malloc_r+0x670>
10007aec:	8806d33a 	srli	r3,r17,12
10007af0:	19c01b84 	addi	r7,r3,110
10007af4:	39cb883a 	add	r5,r7,r7
10007af8:	003f0c06 	br	1000772c <__alt_data_end+0xf800772c>
10007afc:	3804d27a 	srli	r2,r7,9
10007b00:	01000104 	movi	r4,4
10007b04:	2080422e 	bgeu	r4,r2,10007c10 <_malloc_r+0x5f4>
10007b08:	01000504 	movi	r4,20
10007b0c:	20807c36 	bltu	r4,r2,10007d00 <_malloc_r+0x6e4>
10007b10:	110016c4 	addi	r4,r2,91
10007b14:	210b883a 	add	r5,r4,r4
10007b18:	294b883a 	add	r5,r5,r5
10007b1c:	294b883a 	add	r5,r5,r5
10007b20:	994b883a 	add	r5,r19,r5
10007b24:	28800217 	ldw	r2,8(r5)
10007b28:	02040074 	movhi	r8,4097
10007b2c:	4209f204 	addi	r8,r8,10184
10007b30:	11406326 	beq	r2,r5,10007cc0 <_malloc_r+0x6a4>
10007b34:	01bfff04 	movi	r6,-4
10007b38:	11000117 	ldw	r4,4(r2)
10007b3c:	2188703a 	and	r4,r4,r6
10007b40:	3900022e 	bgeu	r7,r4,10007b4c <_malloc_r+0x530>
10007b44:	10800217 	ldw	r2,8(r2)
10007b48:	28bffb1e 	bne	r5,r2,10007b38 <__alt_data_end+0xf8007b38>
10007b4c:	11800317 	ldw	r6,12(r2)
10007b50:	99000117 	ldw	r4,4(r19)
10007b54:	81800315 	stw	r6,12(r16)
10007b58:	80800215 	stw	r2,8(r16)
10007b5c:	34000215 	stw	r16,8(r6)
10007b60:	14000315 	stw	r16,12(r2)
10007b64:	003f2706 	br	10007804 <__alt_data_end+0xf8007804>
10007b68:	88c00054 	ori	r3,r17,1
10007b6c:	80c00115 	stw	r3,4(r16)
10007b70:	8463883a 	add	r17,r16,r17
10007b74:	34400515 	stw	r17,20(r6)
10007b78:	34400415 	stw	r17,16(r6)
10007b7c:	10c00054 	ori	r3,r2,1
10007b80:	8a400315 	stw	r9,12(r17)
10007b84:	8a400215 	stw	r9,8(r17)
10007b88:	88c00115 	stw	r3,4(r17)
10007b8c:	88a3883a 	add	r17,r17,r2
10007b90:	88800015 	stw	r2,0(r17)
10007b94:	9009883a 	mov	r4,r18
10007b98:	000f6540 	call	1000f654 <__malloc_unlock>
10007b9c:	80800204 	addi	r2,r16,8
10007ba0:	003ecb06 	br	100076d0 <__alt_data_end+0xf80076d0>
10007ba4:	31000117 	ldw	r4,4(r6)
10007ba8:	003f1606 	br	10007804 <__alt_data_end+0xf8007804>
10007bac:	63000044 	addi	r12,r12,1
10007bb0:	608000cc 	andi	r2,r12,3
10007bb4:	5ac00204 	addi	r11,r11,8
10007bb8:	103f2a1e 	bne	r2,zero,10007864 <__alt_data_end+0xf8007864>
10007bbc:	00002106 	br	10007c44 <_malloc_r+0x628>
10007bc0:	80800204 	addi	r2,r16,8
10007bc4:	84000517 	ldw	r16,20(r16)
10007bc8:	143eb31e 	bne	r2,r16,10007698 <__alt_data_end+0xf8007698>
10007bcc:	18c00084 	addi	r3,r3,2
10007bd0:	003eec06 	br	10007784 <__alt_data_end+0xf8007784>
10007bd4:	8085883a 	add	r2,r16,r2
10007bd8:	10c00117 	ldw	r3,4(r2)
10007bdc:	81000317 	ldw	r4,12(r16)
10007be0:	81400217 	ldw	r5,8(r16)
10007be4:	18c00054 	ori	r3,r3,1
10007be8:	10c00115 	stw	r3,4(r2)
10007bec:	29000315 	stw	r4,12(r5)
10007bf0:	21400215 	stw	r5,8(r4)
10007bf4:	9009883a 	mov	r4,r18
10007bf8:	000f6540 	call	1000f654 <__malloc_unlock>
10007bfc:	80800204 	addi	r2,r16,8
10007c00:	003eb306 	br	100076d0 <__alt_data_end+0xf80076d0>
10007c04:	19c016c4 	addi	r7,r3,91
10007c08:	39cb883a 	add	r5,r7,r7
10007c0c:	003ec706 	br	1000772c <__alt_data_end+0xf800772c>
10007c10:	3804d1ba 	srli	r2,r7,6
10007c14:	11000e04 	addi	r4,r2,56
10007c18:	210b883a 	add	r5,r4,r4
10007c1c:	003fbe06 	br	10007b18 <__alt_data_end+0xf8007b18>
10007c20:	84ff5d26 	beq	r16,r19,10007998 <__alt_data_end+0xf8007998>
10007c24:	9c000217 	ldw	r16,8(r19)
10007c28:	00bfff04 	movi	r2,-4
10007c2c:	80c00117 	ldw	r3,4(r16)
10007c30:	1886703a 	and	r3,r3,r2
10007c34:	003f9706 	br	10007a94 <__alt_data_end+0xf8007a94>
10007c38:	52800017 	ldw	r10,0(r10)
10007c3c:	18ffffc4 	addi	r3,r3,-1
10007c40:	50805c1e 	bne	r10,r2,10007db4 <_malloc_r+0x798>
10007c44:	190000cc 	andi	r4,r3,3
10007c48:	50bffe04 	addi	r2,r10,-8
10007c4c:	203ffa1e 	bne	r4,zero,10007c38 <__alt_data_end+0xf8007c38>
10007c50:	98800117 	ldw	r2,4(r19)
10007c54:	0146303a 	nor	r3,zero,r5
10007c58:	1884703a 	and	r2,r3,r2
10007c5c:	98800115 	stw	r2,4(r19)
10007c60:	294b883a 	add	r5,r5,r5
10007c64:	117f2e36 	bltu	r2,r5,10007920 <__alt_data_end+0xf8007920>
10007c68:	283f2d26 	beq	r5,zero,10007920 <__alt_data_end+0xf8007920>
10007c6c:	1146703a 	and	r3,r2,r5
10007c70:	1800521e 	bne	r3,zero,10007dbc <_malloc_r+0x7a0>
10007c74:	6007883a 	mov	r3,r12
10007c78:	294b883a 	add	r5,r5,r5
10007c7c:	1148703a 	and	r4,r2,r5
10007c80:	18c00104 	addi	r3,r3,4
10007c84:	203ffc26 	beq	r4,zero,10007c78 <__alt_data_end+0xf8007c78>
10007c88:	003ef006 	br	1000784c <__alt_data_end+0xf800784c>
10007c8c:	00805504 	movi	r2,340
10007c90:	10c01336 	bltu	r2,r3,10007ce0 <_malloc_r+0x6c4>
10007c94:	8806d3fa 	srli	r3,r17,15
10007c98:	19c01dc4 	addi	r7,r3,119
10007c9c:	39cb883a 	add	r5,r7,r7
10007ca0:	003ea206 	br	1000772c <__alt_data_end+0xf800772c>
10007ca4:	00c40004 	movi	r3,4096
10007ca8:	003f4d06 	br	100079e0 <__alt_data_end+0xf80079e0>
10007cac:	00800044 	movi	r2,1
10007cb0:	a0800115 	stw	r2,4(r20)
10007cb4:	a021883a 	mov	r16,r20
10007cb8:	0007883a 	mov	r3,zero
10007cbc:	003f7506 	br	10007a94 <__alt_data_end+0xf8007a94>
10007cc0:	200bd0ba 	srai	r5,r4,2
10007cc4:	01800044 	movi	r6,1
10007cc8:	41000117 	ldw	r4,4(r8)
10007ccc:	314a983a 	sll	r5,r6,r5
10007cd0:	100d883a 	mov	r6,r2
10007cd4:	2908b03a 	or	r4,r5,r4
10007cd8:	41000115 	stw	r4,4(r8)
10007cdc:	003f9d06 	br	10007b54 <__alt_data_end+0xf8007b54>
10007ce0:	00815504 	movi	r2,1364
10007ce4:	10c01336 	bltu	r2,r3,10007d34 <_malloc_r+0x718>
10007ce8:	8806d4ba 	srli	r3,r17,18
10007cec:	19c01f04 	addi	r7,r3,124
10007cf0:	39cb883a 	add	r5,r7,r7
10007cf4:	003e8d06 	br	1000772c <__alt_data_end+0xf800772c>
10007cf8:	ad400404 	addi	r21,r21,16
10007cfc:	003f1d06 	br	10007974 <__alt_data_end+0xf8007974>
10007d00:	01001504 	movi	r4,84
10007d04:	20801c36 	bltu	r4,r2,10007d78 <_malloc_r+0x75c>
10007d08:	3804d33a 	srli	r2,r7,12
10007d0c:	11001b84 	addi	r4,r2,110
10007d10:	210b883a 	add	r5,r4,r4
10007d14:	003f8006 	br	10007b18 <__alt_data_end+0xf8007b18>
10007d18:	3083ffcc 	andi	r2,r6,4095
10007d1c:	103f241e 	bne	r2,zero,100079b0 <__alt_data_end+0xf80079b0>
10007d20:	99000217 	ldw	r4,8(r19)
10007d24:	ad85883a 	add	r2,r21,r22
10007d28:	10800054 	ori	r2,r2,1
10007d2c:	20800115 	stw	r2,4(r4)
10007d30:	003f4a06 	br	10007a5c <__alt_data_end+0xf8007a5c>
10007d34:	01403f04 	movi	r5,252
10007d38:	01c01f84 	movi	r7,126
10007d3c:	003e7b06 	br	1000772c <__alt_data_end+0xf800772c>
10007d40:	00c00044 	movi	r3,1
10007d44:	002b883a 	mov	r21,zero
10007d48:	003f3006 	br	10007a0c <__alt_data_end+0xf8007a0c>
10007d4c:	00840074 	movhi	r2,4097
10007d50:	108f7904 	addi	r2,r2,15844
10007d54:	15000015 	stw	r20,0(r2)
10007d58:	003f1b06 	br	100079c8 <__alt_data_end+0xf80079c8>
10007d5c:	9009883a 	mov	r4,r18
10007d60:	81400204 	addi	r5,r16,8
10007d64:	0006a800 	call	10006a80 <_free_r>
10007d68:	00840074 	movhi	r2,4097
10007d6c:	10965404 	addi	r2,r2,22864
10007d70:	10c00017 	ldw	r3,0(r2)
10007d74:	003f3906 	br	10007a5c <__alt_data_end+0xf8007a5c>
10007d78:	01005504 	movi	r4,340
10007d7c:	20800436 	bltu	r4,r2,10007d90 <_malloc_r+0x774>
10007d80:	3804d3fa 	srli	r2,r7,15
10007d84:	11001dc4 	addi	r4,r2,119
10007d88:	210b883a 	add	r5,r4,r4
10007d8c:	003f6206 	br	10007b18 <__alt_data_end+0xf8007b18>
10007d90:	01015504 	movi	r4,1364
10007d94:	20800436 	bltu	r4,r2,10007da8 <_malloc_r+0x78c>
10007d98:	3804d4ba 	srli	r2,r7,18
10007d9c:	11001f04 	addi	r4,r2,124
10007da0:	210b883a 	add	r5,r4,r4
10007da4:	003f5c06 	br	10007b18 <__alt_data_end+0xf8007b18>
10007da8:	01403f04 	movi	r5,252
10007dac:	01001f84 	movi	r4,126
10007db0:	003f5906 	br	10007b18 <__alt_data_end+0xf8007b18>
10007db4:	98800117 	ldw	r2,4(r19)
10007db8:	003fa906 	br	10007c60 <__alt_data_end+0xf8007c60>
10007dbc:	6007883a 	mov	r3,r12
10007dc0:	003ea206 	br	1000784c <__alt_data_end+0xf800784c>

10007dc4 <memchr>:
10007dc4:	208000cc 	andi	r2,r4,3
10007dc8:	280f883a 	mov	r7,r5
10007dcc:	10003526 	beq	r2,zero,10007ea4 <memchr+0xe0>
10007dd0:	30bfffc4 	addi	r2,r6,-1
10007dd4:	30001b26 	beq	r6,zero,10007e44 <memchr+0x80>
10007dd8:	21800003 	ldbu	r6,0(r4)
10007ddc:	28c03fcc 	andi	r3,r5,255
10007de0:	30c01a26 	beq	r6,r3,10007e4c <memchr+0x88>
10007de4:	180d883a 	mov	r6,r3
10007de8:	00000406 	br	10007dfc <memchr+0x38>
10007dec:	10001526 	beq	r2,zero,10007e44 <memchr+0x80>
10007df0:	20c00003 	ldbu	r3,0(r4)
10007df4:	10bfffc4 	addi	r2,r2,-1
10007df8:	19801426 	beq	r3,r6,10007e4c <memchr+0x88>
10007dfc:	21000044 	addi	r4,r4,1
10007e00:	20c000cc 	andi	r3,r4,3
10007e04:	183ff91e 	bne	r3,zero,10007dec <__alt_data_end+0xf8007dec>
10007e08:	024000c4 	movi	r9,3
10007e0c:	48801136 	bltu	r9,r2,10007e54 <memchr+0x90>
10007e10:	10000c26 	beq	r2,zero,10007e44 <memchr+0x80>
10007e14:	20c00003 	ldbu	r3,0(r4)
10007e18:	29403fcc 	andi	r5,r5,255
10007e1c:	19400b26 	beq	r3,r5,10007e4c <memchr+0x88>
10007e20:	20c00044 	addi	r3,r4,1
10007e24:	2085883a 	add	r2,r4,r2
10007e28:	39803fcc 	andi	r6,r7,255
10007e2c:	00000306 	br	10007e3c <memchr+0x78>
10007e30:	18c00044 	addi	r3,r3,1
10007e34:	197fffc3 	ldbu	r5,-1(r3)
10007e38:	29800426 	beq	r5,r6,10007e4c <memchr+0x88>
10007e3c:	1809883a 	mov	r4,r3
10007e40:	18bffb1e 	bne	r3,r2,10007e30 <__alt_data_end+0xf8007e30>
10007e44:	0005883a 	mov	r2,zero
10007e48:	f800283a 	ret
10007e4c:	2005883a 	mov	r2,r4
10007e50:	f800283a 	ret
10007e54:	28c03fcc 	andi	r3,r5,255
10007e58:	1810923a 	slli	r8,r3,8
10007e5c:	02ffbff4 	movhi	r11,65279
10007e60:	02a02074 	movhi	r10,32897
10007e64:	40c6b03a 	or	r3,r8,r3
10007e68:	1810943a 	slli	r8,r3,16
10007e6c:	5affbfc4 	addi	r11,r11,-257
10007e70:	52a02004 	addi	r10,r10,-32640
10007e74:	40d0b03a 	or	r8,r8,r3
10007e78:	20c00017 	ldw	r3,0(r4)
10007e7c:	40c6f03a 	xor	r3,r8,r3
10007e80:	1acd883a 	add	r6,r3,r11
10007e84:	00c6303a 	nor	r3,zero,r3
10007e88:	30c6703a 	and	r3,r6,r3
10007e8c:	1a86703a 	and	r3,r3,r10
10007e90:	183fdf1e 	bne	r3,zero,10007e10 <__alt_data_end+0xf8007e10>
10007e94:	10bfff04 	addi	r2,r2,-4
10007e98:	21000104 	addi	r4,r4,4
10007e9c:	48bff636 	bltu	r9,r2,10007e78 <__alt_data_end+0xf8007e78>
10007ea0:	003fdb06 	br	10007e10 <__alt_data_end+0xf8007e10>
10007ea4:	3005883a 	mov	r2,r6
10007ea8:	003fd706 	br	10007e08 <__alt_data_end+0xf8007e08>

10007eac <memcpy>:
10007eac:	deffff04 	addi	sp,sp,-4
10007eb0:	dc000015 	stw	r16,0(sp)
10007eb4:	00c003c4 	movi	r3,15
10007eb8:	2005883a 	mov	r2,r4
10007ebc:	1980432e 	bgeu	r3,r6,10007fcc <memcpy+0x120>
10007ec0:	2146b03a 	or	r3,r4,r5
10007ec4:	18c000cc 	andi	r3,r3,3
10007ec8:	1800421e 	bne	r3,zero,10007fd4 <memcpy+0x128>
10007ecc:	343ffc04 	addi	r16,r6,-16
10007ed0:	8020d13a 	srli	r16,r16,4
10007ed4:	28c00104 	addi	r3,r5,4
10007ed8:	23400104 	addi	r13,r4,4
10007edc:	801e913a 	slli	r15,r16,4
10007ee0:	2b000204 	addi	r12,r5,8
10007ee4:	22c00204 	addi	r11,r4,8
10007ee8:	7bc00504 	addi	r15,r15,20
10007eec:	2a800304 	addi	r10,r5,12
10007ef0:	22400304 	addi	r9,r4,12
10007ef4:	2bdf883a 	add	r15,r5,r15
10007ef8:	2811883a 	mov	r8,r5
10007efc:	200f883a 	mov	r7,r4
10007f00:	41000017 	ldw	r4,0(r8)
10007f04:	39c00404 	addi	r7,r7,16
10007f08:	18c00404 	addi	r3,r3,16
10007f0c:	393ffc15 	stw	r4,-16(r7)
10007f10:	1bbffc17 	ldw	r14,-16(r3)
10007f14:	6b400404 	addi	r13,r13,16
10007f18:	5ac00404 	addi	r11,r11,16
10007f1c:	6bbffc15 	stw	r14,-16(r13)
10007f20:	63800017 	ldw	r14,0(r12)
10007f24:	4a400404 	addi	r9,r9,16
10007f28:	42000404 	addi	r8,r8,16
10007f2c:	5bbffc15 	stw	r14,-16(r11)
10007f30:	53800017 	ldw	r14,0(r10)
10007f34:	63000404 	addi	r12,r12,16
10007f38:	52800404 	addi	r10,r10,16
10007f3c:	4bbffc15 	stw	r14,-16(r9)
10007f40:	1bffef1e 	bne	r3,r15,10007f00 <__alt_data_end+0xf8007f00>
10007f44:	81c00044 	addi	r7,r16,1
10007f48:	380e913a 	slli	r7,r7,4
10007f4c:	310003cc 	andi	r4,r6,15
10007f50:	02c000c4 	movi	r11,3
10007f54:	11c7883a 	add	r3,r2,r7
10007f58:	29cb883a 	add	r5,r5,r7
10007f5c:	59001f2e 	bgeu	r11,r4,10007fdc <memcpy+0x130>
10007f60:	1813883a 	mov	r9,r3
10007f64:	2811883a 	mov	r8,r5
10007f68:	200f883a 	mov	r7,r4
10007f6c:	42800017 	ldw	r10,0(r8)
10007f70:	4a400104 	addi	r9,r9,4
10007f74:	39ffff04 	addi	r7,r7,-4
10007f78:	4abfff15 	stw	r10,-4(r9)
10007f7c:	42000104 	addi	r8,r8,4
10007f80:	59fffa36 	bltu	r11,r7,10007f6c <__alt_data_end+0xf8007f6c>
10007f84:	213fff04 	addi	r4,r4,-4
10007f88:	2008d0ba 	srli	r4,r4,2
10007f8c:	318000cc 	andi	r6,r6,3
10007f90:	21000044 	addi	r4,r4,1
10007f94:	2109883a 	add	r4,r4,r4
10007f98:	2109883a 	add	r4,r4,r4
10007f9c:	1907883a 	add	r3,r3,r4
10007fa0:	290b883a 	add	r5,r5,r4
10007fa4:	30000626 	beq	r6,zero,10007fc0 <memcpy+0x114>
10007fa8:	198d883a 	add	r6,r3,r6
10007fac:	29c00003 	ldbu	r7,0(r5)
10007fb0:	18c00044 	addi	r3,r3,1
10007fb4:	29400044 	addi	r5,r5,1
10007fb8:	19ffffc5 	stb	r7,-1(r3)
10007fbc:	19bffb1e 	bne	r3,r6,10007fac <__alt_data_end+0xf8007fac>
10007fc0:	dc000017 	ldw	r16,0(sp)
10007fc4:	dec00104 	addi	sp,sp,4
10007fc8:	f800283a 	ret
10007fcc:	2007883a 	mov	r3,r4
10007fd0:	003ff406 	br	10007fa4 <__alt_data_end+0xf8007fa4>
10007fd4:	2007883a 	mov	r3,r4
10007fd8:	003ff306 	br	10007fa8 <__alt_data_end+0xf8007fa8>
10007fdc:	200d883a 	mov	r6,r4
10007fe0:	003ff006 	br	10007fa4 <__alt_data_end+0xf8007fa4>

10007fe4 <memmove>:
10007fe4:	2005883a 	mov	r2,r4
10007fe8:	29000b2e 	bgeu	r5,r4,10008018 <memmove+0x34>
10007fec:	298f883a 	add	r7,r5,r6
10007ff0:	21c0092e 	bgeu	r4,r7,10008018 <memmove+0x34>
10007ff4:	2187883a 	add	r3,r4,r6
10007ff8:	198bc83a 	sub	r5,r3,r6
10007ffc:	30004b26 	beq	r6,zero,1000812c <memmove+0x148>
10008000:	39ffffc4 	addi	r7,r7,-1
10008004:	39000003 	ldbu	r4,0(r7)
10008008:	18ffffc4 	addi	r3,r3,-1
1000800c:	19000005 	stb	r4,0(r3)
10008010:	197ffb1e 	bne	r3,r5,10008000 <__alt_data_end+0xf8008000>
10008014:	f800283a 	ret
10008018:	00c003c4 	movi	r3,15
1000801c:	1980412e 	bgeu	r3,r6,10008124 <memmove+0x140>
10008020:	1146b03a 	or	r3,r2,r5
10008024:	18c000cc 	andi	r3,r3,3
10008028:	1800411e 	bne	r3,zero,10008130 <memmove+0x14c>
1000802c:	33fffc04 	addi	r15,r6,-16
10008030:	781ed13a 	srli	r15,r15,4
10008034:	28c00104 	addi	r3,r5,4
10008038:	13400104 	addi	r13,r2,4
1000803c:	781c913a 	slli	r14,r15,4
10008040:	2b000204 	addi	r12,r5,8
10008044:	12c00204 	addi	r11,r2,8
10008048:	73800504 	addi	r14,r14,20
1000804c:	2a800304 	addi	r10,r5,12
10008050:	12400304 	addi	r9,r2,12
10008054:	2b9d883a 	add	r14,r5,r14
10008058:	2811883a 	mov	r8,r5
1000805c:	100f883a 	mov	r7,r2
10008060:	41000017 	ldw	r4,0(r8)
10008064:	39c00404 	addi	r7,r7,16
10008068:	18c00404 	addi	r3,r3,16
1000806c:	393ffc15 	stw	r4,-16(r7)
10008070:	193ffc17 	ldw	r4,-16(r3)
10008074:	6b400404 	addi	r13,r13,16
10008078:	5ac00404 	addi	r11,r11,16
1000807c:	693ffc15 	stw	r4,-16(r13)
10008080:	61000017 	ldw	r4,0(r12)
10008084:	4a400404 	addi	r9,r9,16
10008088:	42000404 	addi	r8,r8,16
1000808c:	593ffc15 	stw	r4,-16(r11)
10008090:	51000017 	ldw	r4,0(r10)
10008094:	63000404 	addi	r12,r12,16
10008098:	52800404 	addi	r10,r10,16
1000809c:	493ffc15 	stw	r4,-16(r9)
100080a0:	1bbfef1e 	bne	r3,r14,10008060 <__alt_data_end+0xf8008060>
100080a4:	79000044 	addi	r4,r15,1
100080a8:	2008913a 	slli	r4,r4,4
100080ac:	328003cc 	andi	r10,r6,15
100080b0:	02c000c4 	movi	r11,3
100080b4:	1107883a 	add	r3,r2,r4
100080b8:	290b883a 	add	r5,r5,r4
100080bc:	5a801e2e 	bgeu	r11,r10,10008138 <memmove+0x154>
100080c0:	1813883a 	mov	r9,r3
100080c4:	2811883a 	mov	r8,r5
100080c8:	500f883a 	mov	r7,r10
100080cc:	41000017 	ldw	r4,0(r8)
100080d0:	4a400104 	addi	r9,r9,4
100080d4:	39ffff04 	addi	r7,r7,-4
100080d8:	493fff15 	stw	r4,-4(r9)
100080dc:	42000104 	addi	r8,r8,4
100080e0:	59fffa36 	bltu	r11,r7,100080cc <__alt_data_end+0xf80080cc>
100080e4:	513fff04 	addi	r4,r10,-4
100080e8:	2008d0ba 	srli	r4,r4,2
100080ec:	318000cc 	andi	r6,r6,3
100080f0:	21000044 	addi	r4,r4,1
100080f4:	2109883a 	add	r4,r4,r4
100080f8:	2109883a 	add	r4,r4,r4
100080fc:	1907883a 	add	r3,r3,r4
10008100:	290b883a 	add	r5,r5,r4
10008104:	30000926 	beq	r6,zero,1000812c <memmove+0x148>
10008108:	198d883a 	add	r6,r3,r6
1000810c:	29c00003 	ldbu	r7,0(r5)
10008110:	18c00044 	addi	r3,r3,1
10008114:	29400044 	addi	r5,r5,1
10008118:	19ffffc5 	stb	r7,-1(r3)
1000811c:	19bffb1e 	bne	r3,r6,1000810c <__alt_data_end+0xf800810c>
10008120:	f800283a 	ret
10008124:	1007883a 	mov	r3,r2
10008128:	003ff606 	br	10008104 <__alt_data_end+0xf8008104>
1000812c:	f800283a 	ret
10008130:	1007883a 	mov	r3,r2
10008134:	003ff406 	br	10008108 <__alt_data_end+0xf8008108>
10008138:	500d883a 	mov	r6,r10
1000813c:	003ff106 	br	10008104 <__alt_data_end+0xf8008104>

10008140 <memset>:
10008140:	20c000cc 	andi	r3,r4,3
10008144:	2005883a 	mov	r2,r4
10008148:	18004326 	beq	r3,zero,10008258 <memset+0x118>
1000814c:	31ffffc4 	addi	r7,r6,-1
10008150:	30004026 	beq	r6,zero,10008254 <memset+0x114>
10008154:	2813883a 	mov	r9,r5
10008158:	200d883a 	mov	r6,r4
1000815c:	2007883a 	mov	r3,r4
10008160:	00000406 	br	10008174 <memset+0x34>
10008164:	3a3fffc4 	addi	r8,r7,-1
10008168:	31800044 	addi	r6,r6,1
1000816c:	38003926 	beq	r7,zero,10008254 <memset+0x114>
10008170:	400f883a 	mov	r7,r8
10008174:	18c00044 	addi	r3,r3,1
10008178:	32400005 	stb	r9,0(r6)
1000817c:	1a0000cc 	andi	r8,r3,3
10008180:	403ff81e 	bne	r8,zero,10008164 <__alt_data_end+0xf8008164>
10008184:	010000c4 	movi	r4,3
10008188:	21c02d2e 	bgeu	r4,r7,10008240 <memset+0x100>
1000818c:	29803fcc 	andi	r6,r5,255
10008190:	3008923a 	slli	r4,r6,8
10008194:	218cb03a 	or	r6,r4,r6
10008198:	3008943a 	slli	r4,r6,16
1000819c:	218cb03a 	or	r6,r4,r6
100081a0:	010003c4 	movi	r4,15
100081a4:	21c0182e 	bgeu	r4,r7,10008208 <memset+0xc8>
100081a8:	3b3ffc04 	addi	r12,r7,-16
100081ac:	6018d13a 	srli	r12,r12,4
100081b0:	1a000104 	addi	r8,r3,4
100081b4:	1ac00204 	addi	r11,r3,8
100081b8:	6008913a 	slli	r4,r12,4
100081bc:	1a800304 	addi	r10,r3,12
100081c0:	1813883a 	mov	r9,r3
100081c4:	21000504 	addi	r4,r4,20
100081c8:	1909883a 	add	r4,r3,r4
100081cc:	49800015 	stw	r6,0(r9)
100081d0:	41800015 	stw	r6,0(r8)
100081d4:	59800015 	stw	r6,0(r11)
100081d8:	51800015 	stw	r6,0(r10)
100081dc:	42000404 	addi	r8,r8,16
100081e0:	4a400404 	addi	r9,r9,16
100081e4:	5ac00404 	addi	r11,r11,16
100081e8:	52800404 	addi	r10,r10,16
100081ec:	413ff71e 	bne	r8,r4,100081cc <__alt_data_end+0xf80081cc>
100081f0:	63000044 	addi	r12,r12,1
100081f4:	6018913a 	slli	r12,r12,4
100081f8:	39c003cc 	andi	r7,r7,15
100081fc:	010000c4 	movi	r4,3
10008200:	1b07883a 	add	r3,r3,r12
10008204:	21c00e2e 	bgeu	r4,r7,10008240 <memset+0x100>
10008208:	1813883a 	mov	r9,r3
1000820c:	3811883a 	mov	r8,r7
10008210:	010000c4 	movi	r4,3
10008214:	49800015 	stw	r6,0(r9)
10008218:	423fff04 	addi	r8,r8,-4
1000821c:	4a400104 	addi	r9,r9,4
10008220:	223ffc36 	bltu	r4,r8,10008214 <__alt_data_end+0xf8008214>
10008224:	393fff04 	addi	r4,r7,-4
10008228:	2008d0ba 	srli	r4,r4,2
1000822c:	39c000cc 	andi	r7,r7,3
10008230:	21000044 	addi	r4,r4,1
10008234:	2109883a 	add	r4,r4,r4
10008238:	2109883a 	add	r4,r4,r4
1000823c:	1907883a 	add	r3,r3,r4
10008240:	38000426 	beq	r7,zero,10008254 <memset+0x114>
10008244:	19cf883a 	add	r7,r3,r7
10008248:	19400005 	stb	r5,0(r3)
1000824c:	18c00044 	addi	r3,r3,1
10008250:	19fffd1e 	bne	r3,r7,10008248 <__alt_data_end+0xf8008248>
10008254:	f800283a 	ret
10008258:	2007883a 	mov	r3,r4
1000825c:	300f883a 	mov	r7,r6
10008260:	003fc806 	br	10008184 <__alt_data_end+0xf8008184>

10008264 <_Balloc>:
10008264:	20801317 	ldw	r2,76(r4)
10008268:	defffc04 	addi	sp,sp,-16
1000826c:	dc400115 	stw	r17,4(sp)
10008270:	dc000015 	stw	r16,0(sp)
10008274:	dfc00315 	stw	ra,12(sp)
10008278:	dc800215 	stw	r18,8(sp)
1000827c:	2023883a 	mov	r17,r4
10008280:	2821883a 	mov	r16,r5
10008284:	10000f26 	beq	r2,zero,100082c4 <_Balloc+0x60>
10008288:	8407883a 	add	r3,r16,r16
1000828c:	18c7883a 	add	r3,r3,r3
10008290:	10c7883a 	add	r3,r2,r3
10008294:	18800017 	ldw	r2,0(r3)
10008298:	10001126 	beq	r2,zero,100082e0 <_Balloc+0x7c>
1000829c:	11000017 	ldw	r4,0(r2)
100082a0:	19000015 	stw	r4,0(r3)
100082a4:	10000415 	stw	zero,16(r2)
100082a8:	10000315 	stw	zero,12(r2)
100082ac:	dfc00317 	ldw	ra,12(sp)
100082b0:	dc800217 	ldw	r18,8(sp)
100082b4:	dc400117 	ldw	r17,4(sp)
100082b8:	dc000017 	ldw	r16,0(sp)
100082bc:	dec00404 	addi	sp,sp,16
100082c0:	f800283a 	ret
100082c4:	01400104 	movi	r5,4
100082c8:	01800844 	movi	r6,33
100082cc:	000b1000 	call	1000b100 <_calloc_r>
100082d0:	88801315 	stw	r2,76(r17)
100082d4:	103fec1e 	bne	r2,zero,10008288 <__alt_data_end+0xf8008288>
100082d8:	0005883a 	mov	r2,zero
100082dc:	003ff306 	br	100082ac <__alt_data_end+0xf80082ac>
100082e0:	01400044 	movi	r5,1
100082e4:	2c24983a 	sll	r18,r5,r16
100082e8:	8809883a 	mov	r4,r17
100082ec:	91800144 	addi	r6,r18,5
100082f0:	318d883a 	add	r6,r6,r6
100082f4:	318d883a 	add	r6,r6,r6
100082f8:	000b1000 	call	1000b100 <_calloc_r>
100082fc:	103ff626 	beq	r2,zero,100082d8 <__alt_data_end+0xf80082d8>
10008300:	14000115 	stw	r16,4(r2)
10008304:	14800215 	stw	r18,8(r2)
10008308:	003fe606 	br	100082a4 <__alt_data_end+0xf80082a4>

1000830c <_Bfree>:
1000830c:	28000826 	beq	r5,zero,10008330 <_Bfree+0x24>
10008310:	28c00117 	ldw	r3,4(r5)
10008314:	20801317 	ldw	r2,76(r4)
10008318:	18c7883a 	add	r3,r3,r3
1000831c:	18c7883a 	add	r3,r3,r3
10008320:	10c5883a 	add	r2,r2,r3
10008324:	10c00017 	ldw	r3,0(r2)
10008328:	28c00015 	stw	r3,0(r5)
1000832c:	11400015 	stw	r5,0(r2)
10008330:	f800283a 	ret

10008334 <__multadd>:
10008334:	defff704 	addi	sp,sp,-36
10008338:	dc800215 	stw	r18,8(sp)
1000833c:	2c800417 	ldw	r18,16(r5)
10008340:	ddc00715 	stw	r23,28(sp)
10008344:	dd800615 	stw	r22,24(sp)
10008348:	dd000415 	stw	r20,16(sp)
1000834c:	dcc00315 	stw	r19,12(sp)
10008350:	dc400115 	stw	r17,4(sp)
10008354:	dc000015 	stw	r16,0(sp)
10008358:	dfc00815 	stw	ra,32(sp)
1000835c:	dd400515 	stw	r21,20(sp)
10008360:	2827883a 	mov	r19,r5
10008364:	2029883a 	mov	r20,r4
10008368:	3023883a 	mov	r17,r6
1000836c:	3821883a 	mov	r16,r7
10008370:	2d800504 	addi	r22,r5,20
10008374:	002f883a 	mov	r23,zero
10008378:	b5400017 	ldw	r21,0(r22)
1000837c:	880b883a 	mov	r5,r17
10008380:	bdc00044 	addi	r23,r23,1
10008384:	a93fffcc 	andi	r4,r21,65535
10008388:	000c8300 	call	1000c830 <__mulsi3>
1000838c:	1421883a 	add	r16,r2,r16
10008390:	a808d43a 	srli	r4,r21,16
10008394:	802ad43a 	srli	r21,r16,16
10008398:	880b883a 	mov	r5,r17
1000839c:	000c8300 	call	1000c830 <__mulsi3>
100083a0:	a88f883a 	add	r7,r21,r2
100083a4:	3804943a 	slli	r2,r7,16
100083a8:	80ffffcc 	andi	r3,r16,65535
100083ac:	b5800104 	addi	r22,r22,4
100083b0:	10c7883a 	add	r3,r2,r3
100083b4:	b0ffff15 	stw	r3,-4(r22)
100083b8:	3820d43a 	srli	r16,r7,16
100083bc:	bcbfee16 	blt	r23,r18,10008378 <__alt_data_end+0xf8008378>
100083c0:	80000926 	beq	r16,zero,100083e8 <__multadd+0xb4>
100083c4:	98800217 	ldw	r2,8(r19)
100083c8:	9080130e 	bge	r18,r2,10008418 <__multadd+0xe4>
100083cc:	90800144 	addi	r2,r18,5
100083d0:	1085883a 	add	r2,r2,r2
100083d4:	1085883a 	add	r2,r2,r2
100083d8:	9885883a 	add	r2,r19,r2
100083dc:	14000015 	stw	r16,0(r2)
100083e0:	94800044 	addi	r18,r18,1
100083e4:	9c800415 	stw	r18,16(r19)
100083e8:	9805883a 	mov	r2,r19
100083ec:	dfc00817 	ldw	ra,32(sp)
100083f0:	ddc00717 	ldw	r23,28(sp)
100083f4:	dd800617 	ldw	r22,24(sp)
100083f8:	dd400517 	ldw	r21,20(sp)
100083fc:	dd000417 	ldw	r20,16(sp)
10008400:	dcc00317 	ldw	r19,12(sp)
10008404:	dc800217 	ldw	r18,8(sp)
10008408:	dc400117 	ldw	r17,4(sp)
1000840c:	dc000017 	ldw	r16,0(sp)
10008410:	dec00904 	addi	sp,sp,36
10008414:	f800283a 	ret
10008418:	99400117 	ldw	r5,4(r19)
1000841c:	a009883a 	mov	r4,r20
10008420:	29400044 	addi	r5,r5,1
10008424:	00082640 	call	10008264 <_Balloc>
10008428:	99800417 	ldw	r6,16(r19)
1000842c:	99400304 	addi	r5,r19,12
10008430:	11000304 	addi	r4,r2,12
10008434:	31800084 	addi	r6,r6,2
10008438:	318d883a 	add	r6,r6,r6
1000843c:	318d883a 	add	r6,r6,r6
10008440:	1023883a 	mov	r17,r2
10008444:	0007eac0 	call	10007eac <memcpy>
10008448:	99000117 	ldw	r4,4(r19)
1000844c:	a0c01317 	ldw	r3,76(r20)
10008450:	2109883a 	add	r4,r4,r4
10008454:	2109883a 	add	r4,r4,r4
10008458:	1907883a 	add	r3,r3,r4
1000845c:	18800017 	ldw	r2,0(r3)
10008460:	98800015 	stw	r2,0(r19)
10008464:	1cc00015 	stw	r19,0(r3)
10008468:	8827883a 	mov	r19,r17
1000846c:	003fd706 	br	100083cc <__alt_data_end+0xf80083cc>

10008470 <__s2b>:
10008470:	defff904 	addi	sp,sp,-28
10008474:	dc400115 	stw	r17,4(sp)
10008478:	dc000015 	stw	r16,0(sp)
1000847c:	2023883a 	mov	r17,r4
10008480:	2821883a 	mov	r16,r5
10008484:	39000204 	addi	r4,r7,8
10008488:	01400244 	movi	r5,9
1000848c:	dcc00315 	stw	r19,12(sp)
10008490:	dc800215 	stw	r18,8(sp)
10008494:	dfc00615 	stw	ra,24(sp)
10008498:	dd400515 	stw	r21,20(sp)
1000849c:	dd000415 	stw	r20,16(sp)
100084a0:	3825883a 	mov	r18,r7
100084a4:	3027883a 	mov	r19,r6
100084a8:	000c7700 	call	1000c770 <__divsi3>
100084ac:	00c00044 	movi	r3,1
100084b0:	000b883a 	mov	r5,zero
100084b4:	1880030e 	bge	r3,r2,100084c4 <__s2b+0x54>
100084b8:	18c7883a 	add	r3,r3,r3
100084bc:	29400044 	addi	r5,r5,1
100084c0:	18bffd16 	blt	r3,r2,100084b8 <__alt_data_end+0xf80084b8>
100084c4:	8809883a 	mov	r4,r17
100084c8:	00082640 	call	10008264 <_Balloc>
100084cc:	d8c00717 	ldw	r3,28(sp)
100084d0:	10c00515 	stw	r3,20(r2)
100084d4:	00c00044 	movi	r3,1
100084d8:	10c00415 	stw	r3,16(r2)
100084dc:	00c00244 	movi	r3,9
100084e0:	1cc0210e 	bge	r3,r19,10008568 <__s2b+0xf8>
100084e4:	80eb883a 	add	r21,r16,r3
100084e8:	a829883a 	mov	r20,r21
100084ec:	84e1883a 	add	r16,r16,r19
100084f0:	a1c00007 	ldb	r7,0(r20)
100084f4:	8809883a 	mov	r4,r17
100084f8:	a5000044 	addi	r20,r20,1
100084fc:	100b883a 	mov	r5,r2
10008500:	01800284 	movi	r6,10
10008504:	39fff404 	addi	r7,r7,-48
10008508:	00083340 	call	10008334 <__multadd>
1000850c:	a43ff81e 	bne	r20,r16,100084f0 <__alt_data_end+0xf80084f0>
10008510:	ace1883a 	add	r16,r21,r19
10008514:	843ffe04 	addi	r16,r16,-8
10008518:	9c800a0e 	bge	r19,r18,10008544 <__s2b+0xd4>
1000851c:	94e5c83a 	sub	r18,r18,r19
10008520:	84a5883a 	add	r18,r16,r18
10008524:	81c00007 	ldb	r7,0(r16)
10008528:	8809883a 	mov	r4,r17
1000852c:	84000044 	addi	r16,r16,1
10008530:	100b883a 	mov	r5,r2
10008534:	01800284 	movi	r6,10
10008538:	39fff404 	addi	r7,r7,-48
1000853c:	00083340 	call	10008334 <__multadd>
10008540:	84bff81e 	bne	r16,r18,10008524 <__alt_data_end+0xf8008524>
10008544:	dfc00617 	ldw	ra,24(sp)
10008548:	dd400517 	ldw	r21,20(sp)
1000854c:	dd000417 	ldw	r20,16(sp)
10008550:	dcc00317 	ldw	r19,12(sp)
10008554:	dc800217 	ldw	r18,8(sp)
10008558:	dc400117 	ldw	r17,4(sp)
1000855c:	dc000017 	ldw	r16,0(sp)
10008560:	dec00704 	addi	sp,sp,28
10008564:	f800283a 	ret
10008568:	84000284 	addi	r16,r16,10
1000856c:	1827883a 	mov	r19,r3
10008570:	003fe906 	br	10008518 <__alt_data_end+0xf8008518>

10008574 <__hi0bits>:
10008574:	20bfffec 	andhi	r2,r4,65535
10008578:	1000141e 	bne	r2,zero,100085cc <__hi0bits+0x58>
1000857c:	2008943a 	slli	r4,r4,16
10008580:	00800404 	movi	r2,16
10008584:	20ffc02c 	andhi	r3,r4,65280
10008588:	1800021e 	bne	r3,zero,10008594 <__hi0bits+0x20>
1000858c:	2008923a 	slli	r4,r4,8
10008590:	10800204 	addi	r2,r2,8
10008594:	20fc002c 	andhi	r3,r4,61440
10008598:	1800021e 	bne	r3,zero,100085a4 <__hi0bits+0x30>
1000859c:	2008913a 	slli	r4,r4,4
100085a0:	10800104 	addi	r2,r2,4
100085a4:	20f0002c 	andhi	r3,r4,49152
100085a8:	1800031e 	bne	r3,zero,100085b8 <__hi0bits+0x44>
100085ac:	2109883a 	add	r4,r4,r4
100085b0:	10800084 	addi	r2,r2,2
100085b4:	2109883a 	add	r4,r4,r4
100085b8:	20000316 	blt	r4,zero,100085c8 <__hi0bits+0x54>
100085bc:	2110002c 	andhi	r4,r4,16384
100085c0:	2000041e 	bne	r4,zero,100085d4 <__hi0bits+0x60>
100085c4:	00800804 	movi	r2,32
100085c8:	f800283a 	ret
100085cc:	0005883a 	mov	r2,zero
100085d0:	003fec06 	br	10008584 <__alt_data_end+0xf8008584>
100085d4:	10800044 	addi	r2,r2,1
100085d8:	f800283a 	ret

100085dc <__lo0bits>:
100085dc:	20c00017 	ldw	r3,0(r4)
100085e0:	188001cc 	andi	r2,r3,7
100085e4:	10000826 	beq	r2,zero,10008608 <__lo0bits+0x2c>
100085e8:	1880004c 	andi	r2,r3,1
100085ec:	1000211e 	bne	r2,zero,10008674 <__lo0bits+0x98>
100085f0:	1880008c 	andi	r2,r3,2
100085f4:	1000211e 	bne	r2,zero,1000867c <__lo0bits+0xa0>
100085f8:	1806d0ba 	srli	r3,r3,2
100085fc:	00800084 	movi	r2,2
10008600:	20c00015 	stw	r3,0(r4)
10008604:	f800283a 	ret
10008608:	18bfffcc 	andi	r2,r3,65535
1000860c:	10001326 	beq	r2,zero,1000865c <__lo0bits+0x80>
10008610:	0005883a 	mov	r2,zero
10008614:	19403fcc 	andi	r5,r3,255
10008618:	2800021e 	bne	r5,zero,10008624 <__lo0bits+0x48>
1000861c:	1806d23a 	srli	r3,r3,8
10008620:	10800204 	addi	r2,r2,8
10008624:	194003cc 	andi	r5,r3,15
10008628:	2800021e 	bne	r5,zero,10008634 <__lo0bits+0x58>
1000862c:	1806d13a 	srli	r3,r3,4
10008630:	10800104 	addi	r2,r2,4
10008634:	194000cc 	andi	r5,r3,3
10008638:	2800021e 	bne	r5,zero,10008644 <__lo0bits+0x68>
1000863c:	1806d0ba 	srli	r3,r3,2
10008640:	10800084 	addi	r2,r2,2
10008644:	1940004c 	andi	r5,r3,1
10008648:	2800081e 	bne	r5,zero,1000866c <__lo0bits+0x90>
1000864c:	1806d07a 	srli	r3,r3,1
10008650:	1800051e 	bne	r3,zero,10008668 <__lo0bits+0x8c>
10008654:	00800804 	movi	r2,32
10008658:	f800283a 	ret
1000865c:	1806d43a 	srli	r3,r3,16
10008660:	00800404 	movi	r2,16
10008664:	003feb06 	br	10008614 <__alt_data_end+0xf8008614>
10008668:	10800044 	addi	r2,r2,1
1000866c:	20c00015 	stw	r3,0(r4)
10008670:	f800283a 	ret
10008674:	0005883a 	mov	r2,zero
10008678:	f800283a 	ret
1000867c:	1806d07a 	srli	r3,r3,1
10008680:	00800044 	movi	r2,1
10008684:	20c00015 	stw	r3,0(r4)
10008688:	f800283a 	ret

1000868c <__i2b>:
1000868c:	defffd04 	addi	sp,sp,-12
10008690:	dc000015 	stw	r16,0(sp)
10008694:	04000044 	movi	r16,1
10008698:	dc400115 	stw	r17,4(sp)
1000869c:	2823883a 	mov	r17,r5
100086a0:	800b883a 	mov	r5,r16
100086a4:	dfc00215 	stw	ra,8(sp)
100086a8:	00082640 	call	10008264 <_Balloc>
100086ac:	14400515 	stw	r17,20(r2)
100086b0:	14000415 	stw	r16,16(r2)
100086b4:	dfc00217 	ldw	ra,8(sp)
100086b8:	dc400117 	ldw	r17,4(sp)
100086bc:	dc000017 	ldw	r16,0(sp)
100086c0:	dec00304 	addi	sp,sp,12
100086c4:	f800283a 	ret

100086c8 <__multiply>:
100086c8:	deffef04 	addi	sp,sp,-68
100086cc:	dc400815 	stw	r17,32(sp)
100086d0:	dc000715 	stw	r16,28(sp)
100086d4:	2c400417 	ldw	r17,16(r5)
100086d8:	34000417 	ldw	r16,16(r6)
100086dc:	dd800d15 	stw	r22,52(sp)
100086e0:	dc800915 	stw	r18,36(sp)
100086e4:	dfc01015 	stw	ra,64(sp)
100086e8:	df000f15 	stw	fp,60(sp)
100086ec:	ddc00e15 	stw	r23,56(sp)
100086f0:	dd400c15 	stw	r21,48(sp)
100086f4:	dd000b15 	stw	r20,44(sp)
100086f8:	dcc00a15 	stw	r19,40(sp)
100086fc:	2825883a 	mov	r18,r5
10008700:	302d883a 	mov	r22,r6
10008704:	8c009116 	blt	r17,r16,1000894c <__multiply+0x284>
10008708:	8005883a 	mov	r2,r16
1000870c:	8821883a 	mov	r16,r17
10008710:	1023883a 	mov	r17,r2
10008714:	90800217 	ldw	r2,8(r18)
10008718:	8447883a 	add	r3,r16,r17
1000871c:	d8c00215 	stw	r3,8(sp)
10008720:	91400117 	ldw	r5,4(r18)
10008724:	10c0010e 	bge	r2,r3,1000872c <__multiply+0x64>
10008728:	29400044 	addi	r5,r5,1
1000872c:	00082640 	call	10008264 <_Balloc>
10008730:	d8c00217 	ldw	r3,8(sp)
10008734:	d8800615 	stw	r2,24(sp)
10008738:	18eb883a 	add	r21,r3,r3
1000873c:	ad6b883a 	add	r21,r21,r21
10008740:	10c00504 	addi	r3,r2,20
10008744:	1d6b883a 	add	r21,r3,r21
10008748:	d8c00115 	stw	r3,4(sp)
1000874c:	dd400315 	stw	r21,12(sp)
10008750:	1805883a 	mov	r2,r3
10008754:	1d40042e 	bgeu	r3,r21,10008768 <__multiply+0xa0>
10008758:	d8c00317 	ldw	r3,12(sp)
1000875c:	10000015 	stw	zero,0(r2)
10008760:	10800104 	addi	r2,r2,4
10008764:	10fffc36 	bltu	r2,r3,10008758 <__alt_data_end+0xf8008758>
10008768:	8c63883a 	add	r17,r17,r17
1000876c:	b5800504 	addi	r22,r22,20
10008770:	8c63883a 	add	r17,r17,r17
10008774:	94800504 	addi	r18,r18,20
10008778:	8421883a 	add	r16,r16,r16
1000877c:	b463883a 	add	r17,r22,r17
10008780:	8421883a 	add	r16,r16,r16
10008784:	dd800015 	stw	r22,0(sp)
10008788:	dc800415 	stw	r18,16(sp)
1000878c:	dc400515 	stw	r17,20(sp)
10008790:	9429883a 	add	r20,r18,r16
10008794:	b4404f2e 	bgeu	r22,r17,100088d4 <__multiply+0x20c>
10008798:	d8c00017 	ldw	r3,0(sp)
1000879c:	1c800017 	ldw	r18,0(r3)
100087a0:	943fffcc 	andi	r16,r18,65535
100087a4:	80001e26 	beq	r16,zero,10008820 <__multiply+0x158>
100087a8:	dd800117 	ldw	r22,4(sp)
100087ac:	dd400417 	ldw	r21,16(sp)
100087b0:	0025883a 	mov	r18,zero
100087b4:	adc00017 	ldw	r23,0(r21)
100087b8:	b4c00017 	ldw	r19,0(r22)
100087bc:	800b883a 	mov	r5,r16
100087c0:	b93fffcc 	andi	r4,r23,65535
100087c4:	000c8300 	call	1000c830 <__mulsi3>
100087c8:	9c7fffcc 	andi	r17,r19,65535
100087cc:	8885883a 	add	r2,r17,r2
100087d0:	b808d43a 	srli	r4,r23,16
100087d4:	14a3883a 	add	r17,r2,r18
100087d8:	9826d43a 	srli	r19,r19,16
100087dc:	8824d43a 	srli	r18,r17,16
100087e0:	800b883a 	mov	r5,r16
100087e4:	000c8300 	call	1000c830 <__mulsi3>
100087e8:	9885883a 	add	r2,r19,r2
100087ec:	14a7883a 	add	r19,r2,r18
100087f0:	88ffffcc 	andi	r3,r17,65535
100087f4:	9822943a 	slli	r17,r19,16
100087f8:	ad400104 	addi	r21,r21,4
100087fc:	b005883a 	mov	r2,r22
10008800:	88c6b03a 	or	r3,r17,r3
10008804:	b0c00015 	stw	r3,0(r22)
10008808:	9824d43a 	srli	r18,r19,16
1000880c:	b5800104 	addi	r22,r22,4
10008810:	ad3fe836 	bltu	r21,r20,100087b4 <__alt_data_end+0xf80087b4>
10008814:	d8c00017 	ldw	r3,0(sp)
10008818:	14800115 	stw	r18,4(r2)
1000881c:	1c800017 	ldw	r18,0(r3)
10008820:	9024d43a 	srli	r18,r18,16
10008824:	90002226 	beq	r18,zero,100088b0 <__multiply+0x1e8>
10008828:	d8c00117 	ldw	r3,4(sp)
1000882c:	dd800417 	ldw	r22,16(sp)
10008830:	002f883a 	mov	r23,zero
10008834:	1f000017 	ldw	fp,0(r3)
10008838:	1823883a 	mov	r17,r3
1000883c:	182b883a 	mov	r21,r3
10008840:	e021883a 	mov	r16,fp
10008844:	00000106 	br	1000884c <__multiply+0x184>
10008848:	982b883a 	mov	r21,r19
1000884c:	b100000b 	ldhu	r4,0(r22)
10008850:	8020d43a 	srli	r16,r16,16
10008854:	900b883a 	mov	r5,r18
10008858:	000c8300 	call	1000c830 <__mulsi3>
1000885c:	1405883a 	add	r2,r2,r16
10008860:	15ef883a 	add	r23,r2,r23
10008864:	b804943a 	slli	r2,r23,16
10008868:	e0ffffcc 	andi	r3,fp,65535
1000886c:	8c400104 	addi	r17,r17,4
10008870:	10c6b03a 	or	r3,r2,r3
10008874:	88ffff15 	stw	r3,-4(r17)
10008878:	b5800104 	addi	r22,r22,4
1000887c:	b13fff17 	ldw	r4,-4(r22)
10008880:	acc00104 	addi	r19,r21,4
10008884:	900b883a 	mov	r5,r18
10008888:	2008d43a 	srli	r4,r4,16
1000888c:	9c000017 	ldw	r16,0(r19)
10008890:	000c8300 	call	1000c830 <__mulsi3>
10008894:	b806d43a 	srli	r3,r23,16
10008898:	813fffcc 	andi	r4,r16,65535
1000889c:	1105883a 	add	r2,r2,r4
100088a0:	10f9883a 	add	fp,r2,r3
100088a4:	e02ed43a 	srli	r23,fp,16
100088a8:	b53fe736 	bltu	r22,r20,10008848 <__alt_data_end+0xf8008848>
100088ac:	af000115 	stw	fp,4(r21)
100088b0:	d8c00017 	ldw	r3,0(sp)
100088b4:	d9000517 	ldw	r4,20(sp)
100088b8:	18c00104 	addi	r3,r3,4
100088bc:	d8c00015 	stw	r3,0(sp)
100088c0:	d8c00117 	ldw	r3,4(sp)
100088c4:	18c00104 	addi	r3,r3,4
100088c8:	d8c00115 	stw	r3,4(sp)
100088cc:	d8c00017 	ldw	r3,0(sp)
100088d0:	193fb136 	bltu	r3,r4,10008798 <__alt_data_end+0xf8008798>
100088d4:	d8c00217 	ldw	r3,8(sp)
100088d8:	00c00c0e 	bge	zero,r3,1000890c <__multiply+0x244>
100088dc:	d8c00317 	ldw	r3,12(sp)
100088e0:	18bfff17 	ldw	r2,-4(r3)
100088e4:	1d7fff04 	addi	r21,r3,-4
100088e8:	10000326 	beq	r2,zero,100088f8 <__multiply+0x230>
100088ec:	00000706 	br	1000890c <__multiply+0x244>
100088f0:	a8800017 	ldw	r2,0(r21)
100088f4:	1000051e 	bne	r2,zero,1000890c <__multiply+0x244>
100088f8:	d8c00217 	ldw	r3,8(sp)
100088fc:	ad7fff04 	addi	r21,r21,-4
10008900:	18ffffc4 	addi	r3,r3,-1
10008904:	d8c00215 	stw	r3,8(sp)
10008908:	183ff91e 	bne	r3,zero,100088f0 <__alt_data_end+0xf80088f0>
1000890c:	d8c00617 	ldw	r3,24(sp)
10008910:	d9000217 	ldw	r4,8(sp)
10008914:	1805883a 	mov	r2,r3
10008918:	19000415 	stw	r4,16(r3)
1000891c:	dfc01017 	ldw	ra,64(sp)
10008920:	df000f17 	ldw	fp,60(sp)
10008924:	ddc00e17 	ldw	r23,56(sp)
10008928:	dd800d17 	ldw	r22,52(sp)
1000892c:	dd400c17 	ldw	r21,48(sp)
10008930:	dd000b17 	ldw	r20,44(sp)
10008934:	dcc00a17 	ldw	r19,40(sp)
10008938:	dc800917 	ldw	r18,36(sp)
1000893c:	dc400817 	ldw	r17,32(sp)
10008940:	dc000717 	ldw	r16,28(sp)
10008944:	dec01104 	addi	sp,sp,68
10008948:	f800283a 	ret
1000894c:	3025883a 	mov	r18,r6
10008950:	282d883a 	mov	r22,r5
10008954:	003f6f06 	br	10008714 <__alt_data_end+0xf8008714>

10008958 <__pow5mult>:
10008958:	defffa04 	addi	sp,sp,-24
1000895c:	dcc00315 	stw	r19,12(sp)
10008960:	dc800215 	stw	r18,8(sp)
10008964:	dc000015 	stw	r16,0(sp)
10008968:	dfc00515 	stw	ra,20(sp)
1000896c:	dd000415 	stw	r20,16(sp)
10008970:	dc400115 	stw	r17,4(sp)
10008974:	308000cc 	andi	r2,r6,3
10008978:	3021883a 	mov	r16,r6
1000897c:	2027883a 	mov	r19,r4
10008980:	2825883a 	mov	r18,r5
10008984:	10002e1e 	bne	r2,zero,10008a40 <__pow5mult+0xe8>
10008988:	8021d0ba 	srai	r16,r16,2
1000898c:	80001a26 	beq	r16,zero,100089f8 <__pow5mult+0xa0>
10008990:	9c401217 	ldw	r17,72(r19)
10008994:	8800061e 	bne	r17,zero,100089b0 <__pow5mult+0x58>
10008998:	00003406 	br	10008a6c <__pow5mult+0x114>
1000899c:	8021d07a 	srai	r16,r16,1
100089a0:	80001526 	beq	r16,zero,100089f8 <__pow5mult+0xa0>
100089a4:	88800017 	ldw	r2,0(r17)
100089a8:	10001c26 	beq	r2,zero,10008a1c <__pow5mult+0xc4>
100089ac:	1023883a 	mov	r17,r2
100089b0:	80c0004c 	andi	r3,r16,1
100089b4:	183ff926 	beq	r3,zero,1000899c <__alt_data_end+0xf800899c>
100089b8:	900b883a 	mov	r5,r18
100089bc:	880d883a 	mov	r6,r17
100089c0:	9809883a 	mov	r4,r19
100089c4:	00086c80 	call	100086c8 <__multiply>
100089c8:	90001b26 	beq	r18,zero,10008a38 <__pow5mult+0xe0>
100089cc:	91c00117 	ldw	r7,4(r18)
100089d0:	98c01317 	ldw	r3,76(r19)
100089d4:	8021d07a 	srai	r16,r16,1
100089d8:	39cf883a 	add	r7,r7,r7
100089dc:	39cf883a 	add	r7,r7,r7
100089e0:	19c7883a 	add	r3,r3,r7
100089e4:	19000017 	ldw	r4,0(r3)
100089e8:	91000015 	stw	r4,0(r18)
100089ec:	1c800015 	stw	r18,0(r3)
100089f0:	1025883a 	mov	r18,r2
100089f4:	803feb1e 	bne	r16,zero,100089a4 <__alt_data_end+0xf80089a4>
100089f8:	9005883a 	mov	r2,r18
100089fc:	dfc00517 	ldw	ra,20(sp)
10008a00:	dd000417 	ldw	r20,16(sp)
10008a04:	dcc00317 	ldw	r19,12(sp)
10008a08:	dc800217 	ldw	r18,8(sp)
10008a0c:	dc400117 	ldw	r17,4(sp)
10008a10:	dc000017 	ldw	r16,0(sp)
10008a14:	dec00604 	addi	sp,sp,24
10008a18:	f800283a 	ret
10008a1c:	9809883a 	mov	r4,r19
10008a20:	880b883a 	mov	r5,r17
10008a24:	880d883a 	mov	r6,r17
10008a28:	00086c80 	call	100086c8 <__multiply>
10008a2c:	88800015 	stw	r2,0(r17)
10008a30:	10000015 	stw	zero,0(r2)
10008a34:	003fdd06 	br	100089ac <__alt_data_end+0xf80089ac>
10008a38:	1025883a 	mov	r18,r2
10008a3c:	003fd706 	br	1000899c <__alt_data_end+0xf800899c>
10008a40:	10bfffc4 	addi	r2,r2,-1
10008a44:	1085883a 	add	r2,r2,r2
10008a48:	00c40074 	movhi	r3,4097
10008a4c:	18c82d04 	addi	r3,r3,8372
10008a50:	1085883a 	add	r2,r2,r2
10008a54:	1885883a 	add	r2,r3,r2
10008a58:	11800017 	ldw	r6,0(r2)
10008a5c:	000f883a 	mov	r7,zero
10008a60:	00083340 	call	10008334 <__multadd>
10008a64:	1025883a 	mov	r18,r2
10008a68:	003fc706 	br	10008988 <__alt_data_end+0xf8008988>
10008a6c:	05000044 	movi	r20,1
10008a70:	9809883a 	mov	r4,r19
10008a74:	a00b883a 	mov	r5,r20
10008a78:	00082640 	call	10008264 <_Balloc>
10008a7c:	1023883a 	mov	r17,r2
10008a80:	00809c44 	movi	r2,625
10008a84:	88800515 	stw	r2,20(r17)
10008a88:	8d000415 	stw	r20,16(r17)
10008a8c:	9c401215 	stw	r17,72(r19)
10008a90:	88000015 	stw	zero,0(r17)
10008a94:	003fc606 	br	100089b0 <__alt_data_end+0xf80089b0>

10008a98 <__lshift>:
10008a98:	defff904 	addi	sp,sp,-28
10008a9c:	dd000415 	stw	r20,16(sp)
10008aa0:	dcc00315 	stw	r19,12(sp)
10008aa4:	3029d17a 	srai	r20,r6,5
10008aa8:	2cc00417 	ldw	r19,16(r5)
10008aac:	28800217 	ldw	r2,8(r5)
10008ab0:	dd400515 	stw	r21,20(sp)
10008ab4:	a4e7883a 	add	r19,r20,r19
10008ab8:	dc800215 	stw	r18,8(sp)
10008abc:	dc400115 	stw	r17,4(sp)
10008ac0:	dc000015 	stw	r16,0(sp)
10008ac4:	dfc00615 	stw	ra,24(sp)
10008ac8:	9c000044 	addi	r16,r19,1
10008acc:	2823883a 	mov	r17,r5
10008ad0:	302b883a 	mov	r21,r6
10008ad4:	2025883a 	mov	r18,r4
10008ad8:	29400117 	ldw	r5,4(r5)
10008adc:	1400030e 	bge	r2,r16,10008aec <__lshift+0x54>
10008ae0:	1085883a 	add	r2,r2,r2
10008ae4:	29400044 	addi	r5,r5,1
10008ae8:	143ffd16 	blt	r2,r16,10008ae0 <__alt_data_end+0xf8008ae0>
10008aec:	9009883a 	mov	r4,r18
10008af0:	00082640 	call	10008264 <_Balloc>
10008af4:	11c00504 	addi	r7,r2,20
10008af8:	0500090e 	bge	zero,r20,10008b20 <__lshift+0x88>
10008afc:	3811883a 	mov	r8,r7
10008b00:	0007883a 	mov	r3,zero
10008b04:	40000015 	stw	zero,0(r8)
10008b08:	18c00044 	addi	r3,r3,1
10008b0c:	42000104 	addi	r8,r8,4
10008b10:	1d3ffc1e 	bne	r3,r20,10008b04 <__alt_data_end+0xf8008b04>
10008b14:	18c7883a 	add	r3,r3,r3
10008b18:	18c7883a 	add	r3,r3,r3
10008b1c:	38cf883a 	add	r7,r7,r3
10008b20:	89000417 	ldw	r4,16(r17)
10008b24:	88c00504 	addi	r3,r17,20
10008b28:	a98007cc 	andi	r6,r21,31
10008b2c:	2109883a 	add	r4,r4,r4
10008b30:	2109883a 	add	r4,r4,r4
10008b34:	1909883a 	add	r4,r3,r4
10008b38:	30002326 	beq	r6,zero,10008bc8 <__lshift+0x130>
10008b3c:	01400804 	movi	r5,32
10008b40:	298bc83a 	sub	r5,r5,r6
10008b44:	0013883a 	mov	r9,zero
10008b48:	1a000017 	ldw	r8,0(r3)
10008b4c:	3815883a 	mov	r10,r7
10008b50:	39c00104 	addi	r7,r7,4
10008b54:	4190983a 	sll	r8,r8,r6
10008b58:	18c00104 	addi	r3,r3,4
10008b5c:	4a10b03a 	or	r8,r9,r8
10008b60:	3a3fff15 	stw	r8,-4(r7)
10008b64:	1a3fff17 	ldw	r8,-4(r3)
10008b68:	4152d83a 	srl	r9,r8,r5
10008b6c:	193ff636 	bltu	r3,r4,10008b48 <__alt_data_end+0xf8008b48>
10008b70:	52400115 	stw	r9,4(r10)
10008b74:	48000126 	beq	r9,zero,10008b7c <__lshift+0xe4>
10008b78:	9c000084 	addi	r16,r19,2
10008b7c:	89000117 	ldw	r4,4(r17)
10008b80:	90c01317 	ldw	r3,76(r18)
10008b84:	843fffc4 	addi	r16,r16,-1
10008b88:	2109883a 	add	r4,r4,r4
10008b8c:	2109883a 	add	r4,r4,r4
10008b90:	1907883a 	add	r3,r3,r4
10008b94:	19000017 	ldw	r4,0(r3)
10008b98:	14000415 	stw	r16,16(r2)
10008b9c:	89000015 	stw	r4,0(r17)
10008ba0:	1c400015 	stw	r17,0(r3)
10008ba4:	dfc00617 	ldw	ra,24(sp)
10008ba8:	dd400517 	ldw	r21,20(sp)
10008bac:	dd000417 	ldw	r20,16(sp)
10008bb0:	dcc00317 	ldw	r19,12(sp)
10008bb4:	dc800217 	ldw	r18,8(sp)
10008bb8:	dc400117 	ldw	r17,4(sp)
10008bbc:	dc000017 	ldw	r16,0(sp)
10008bc0:	dec00704 	addi	sp,sp,28
10008bc4:	f800283a 	ret
10008bc8:	19400017 	ldw	r5,0(r3)
10008bcc:	39c00104 	addi	r7,r7,4
10008bd0:	18c00104 	addi	r3,r3,4
10008bd4:	397fff15 	stw	r5,-4(r7)
10008bd8:	193ffb36 	bltu	r3,r4,10008bc8 <__alt_data_end+0xf8008bc8>
10008bdc:	003fe706 	br	10008b7c <__alt_data_end+0xf8008b7c>

10008be0 <__mcmp>:
10008be0:	20800417 	ldw	r2,16(r4)
10008be4:	28c00417 	ldw	r3,16(r5)
10008be8:	10c5c83a 	sub	r2,r2,r3
10008bec:	1000111e 	bne	r2,zero,10008c34 <__mcmp+0x54>
10008bf0:	18c7883a 	add	r3,r3,r3
10008bf4:	18c7883a 	add	r3,r3,r3
10008bf8:	21000504 	addi	r4,r4,20
10008bfc:	29400504 	addi	r5,r5,20
10008c00:	20c5883a 	add	r2,r4,r3
10008c04:	28cb883a 	add	r5,r5,r3
10008c08:	00000106 	br	10008c10 <__mcmp+0x30>
10008c0c:	20800a2e 	bgeu	r4,r2,10008c38 <__mcmp+0x58>
10008c10:	10bfff04 	addi	r2,r2,-4
10008c14:	297fff04 	addi	r5,r5,-4
10008c18:	11800017 	ldw	r6,0(r2)
10008c1c:	28c00017 	ldw	r3,0(r5)
10008c20:	30fffa26 	beq	r6,r3,10008c0c <__alt_data_end+0xf8008c0c>
10008c24:	30c00236 	bltu	r6,r3,10008c30 <__mcmp+0x50>
10008c28:	00800044 	movi	r2,1
10008c2c:	f800283a 	ret
10008c30:	00bfffc4 	movi	r2,-1
10008c34:	f800283a 	ret
10008c38:	0005883a 	mov	r2,zero
10008c3c:	f800283a 	ret

10008c40 <__mdiff>:
10008c40:	defffb04 	addi	sp,sp,-20
10008c44:	dc000015 	stw	r16,0(sp)
10008c48:	2821883a 	mov	r16,r5
10008c4c:	dcc00315 	stw	r19,12(sp)
10008c50:	300b883a 	mov	r5,r6
10008c54:	2027883a 	mov	r19,r4
10008c58:	8009883a 	mov	r4,r16
10008c5c:	dc800215 	stw	r18,8(sp)
10008c60:	dfc00415 	stw	ra,16(sp)
10008c64:	dc400115 	stw	r17,4(sp)
10008c68:	3025883a 	mov	r18,r6
10008c6c:	0008be00 	call	10008be0 <__mcmp>
10008c70:	10005226 	beq	r2,zero,10008dbc <__mdiff+0x17c>
10008c74:	10004c16 	blt	r2,zero,10008da8 <__mdiff+0x168>
10008c78:	0023883a 	mov	r17,zero
10008c7c:	81400117 	ldw	r5,4(r16)
10008c80:	9809883a 	mov	r4,r19
10008c84:	00082640 	call	10008264 <_Balloc>
10008c88:	83400417 	ldw	r13,16(r16)
10008c8c:	93800417 	ldw	r14,16(r18)
10008c90:	81000504 	addi	r4,r16,20
10008c94:	6b59883a 	add	r12,r13,r13
10008c98:	739d883a 	add	r14,r14,r14
10008c9c:	6319883a 	add	r12,r12,r12
10008ca0:	91800504 	addi	r6,r18,20
10008ca4:	739d883a 	add	r14,r14,r14
10008ca8:	14400315 	stw	r17,12(r2)
10008cac:	2319883a 	add	r12,r4,r12
10008cb0:	339d883a 	add	r14,r6,r14
10008cb4:	12400504 	addi	r9,r2,20
10008cb8:	0007883a 	mov	r3,zero
10008cbc:	22000017 	ldw	r8,0(r4)
10008cc0:	32800017 	ldw	r10,0(r6)
10008cc4:	4ac00104 	addi	r11,r9,4
10008cc8:	41ffffcc 	andi	r7,r8,65535
10008ccc:	38c7883a 	add	r3,r7,r3
10008cd0:	51ffffcc 	andi	r7,r10,65535
10008cd4:	19cfc83a 	sub	r7,r3,r7
10008cd8:	4010d43a 	srli	r8,r8,16
10008cdc:	5014d43a 	srli	r10,r10,16
10008ce0:	3807d43a 	srai	r3,r7,16
10008ce4:	39ffffcc 	andi	r7,r7,65535
10008ce8:	4291c83a 	sub	r8,r8,r10
10008cec:	40c7883a 	add	r3,r8,r3
10008cf0:	1810943a 	slli	r8,r3,16
10008cf4:	31800104 	addi	r6,r6,4
10008cf8:	21000104 	addi	r4,r4,4
10008cfc:	41ceb03a 	or	r7,r8,r7
10008d00:	49c00015 	stw	r7,0(r9)
10008d04:	1807d43a 	srai	r3,r3,16
10008d08:	580b883a 	mov	r5,r11
10008d0c:	5813883a 	mov	r9,r11
10008d10:	33bfea36 	bltu	r6,r14,10008cbc <__alt_data_end+0xf8008cbc>
10008d14:	2011883a 	mov	r8,r4
10008d18:	2300152e 	bgeu	r4,r12,10008d70 <__mdiff+0x130>
10008d1c:	21400017 	ldw	r5,0(r4)
10008d20:	4a400104 	addi	r9,r9,4
10008d24:	21000104 	addi	r4,r4,4
10008d28:	29ffffcc 	andi	r7,r5,65535
10008d2c:	38c7883a 	add	r3,r7,r3
10008d30:	280ad43a 	srli	r5,r5,16
10008d34:	180dd43a 	srai	r6,r3,16
10008d38:	19ffffcc 	andi	r7,r3,65535
10008d3c:	3147883a 	add	r3,r6,r5
10008d40:	180a943a 	slli	r5,r3,16
10008d44:	1807d43a 	srai	r3,r3,16
10008d48:	29ceb03a 	or	r7,r5,r7
10008d4c:	49ffff15 	stw	r7,-4(r9)
10008d50:	233ff236 	bltu	r4,r12,10008d1c <__alt_data_end+0xf8008d1c>
10008d54:	0206303a 	nor	r3,zero,r8
10008d58:	1b07883a 	add	r3,r3,r12
10008d5c:	1806d0ba 	srli	r3,r3,2
10008d60:	18c00044 	addi	r3,r3,1
10008d64:	18c7883a 	add	r3,r3,r3
10008d68:	18c7883a 	add	r3,r3,r3
10008d6c:	58cb883a 	add	r5,r11,r3
10008d70:	28ffff04 	addi	r3,r5,-4
10008d74:	3800041e 	bne	r7,zero,10008d88 <__mdiff+0x148>
10008d78:	18ffff04 	addi	r3,r3,-4
10008d7c:	19000017 	ldw	r4,0(r3)
10008d80:	6b7fffc4 	addi	r13,r13,-1
10008d84:	203ffc26 	beq	r4,zero,10008d78 <__alt_data_end+0xf8008d78>
10008d88:	13400415 	stw	r13,16(r2)
10008d8c:	dfc00417 	ldw	ra,16(sp)
10008d90:	dcc00317 	ldw	r19,12(sp)
10008d94:	dc800217 	ldw	r18,8(sp)
10008d98:	dc400117 	ldw	r17,4(sp)
10008d9c:	dc000017 	ldw	r16,0(sp)
10008da0:	dec00504 	addi	sp,sp,20
10008da4:	f800283a 	ret
10008da8:	8005883a 	mov	r2,r16
10008dac:	04400044 	movi	r17,1
10008db0:	9021883a 	mov	r16,r18
10008db4:	1025883a 	mov	r18,r2
10008db8:	003fb006 	br	10008c7c <__alt_data_end+0xf8008c7c>
10008dbc:	9809883a 	mov	r4,r19
10008dc0:	000b883a 	mov	r5,zero
10008dc4:	00082640 	call	10008264 <_Balloc>
10008dc8:	00c00044 	movi	r3,1
10008dcc:	10c00415 	stw	r3,16(r2)
10008dd0:	10000515 	stw	zero,20(r2)
10008dd4:	003fed06 	br	10008d8c <__alt_data_end+0xf8008d8c>

10008dd8 <__ulp>:
10008dd8:	295ffc2c 	andhi	r5,r5,32752
10008ddc:	00bf3034 	movhi	r2,64704
10008de0:	2887883a 	add	r3,r5,r2
10008de4:	00c0020e 	bge	zero,r3,10008df0 <__ulp+0x18>
10008de8:	0005883a 	mov	r2,zero
10008dec:	f800283a 	ret
10008df0:	00c7c83a 	sub	r3,zero,r3
10008df4:	180bd53a 	srai	r5,r3,20
10008df8:	008004c4 	movi	r2,19
10008dfc:	11400a0e 	bge	r2,r5,10008e28 <__ulp+0x50>
10008e00:	00800c84 	movi	r2,50
10008e04:	0007883a 	mov	r3,zero
10008e08:	11400516 	blt	r2,r5,10008e20 <__ulp+0x48>
10008e0c:	00800cc4 	movi	r2,51
10008e10:	114bc83a 	sub	r5,r2,r5
10008e14:	00800044 	movi	r2,1
10008e18:	1144983a 	sll	r2,r2,r5
10008e1c:	f800283a 	ret
10008e20:	00800044 	movi	r2,1
10008e24:	f800283a 	ret
10008e28:	00800234 	movhi	r2,8
10008e2c:	1147d83a 	sra	r3,r2,r5
10008e30:	0005883a 	mov	r2,zero
10008e34:	f800283a 	ret

10008e38 <__b2d>:
10008e38:	defffa04 	addi	sp,sp,-24
10008e3c:	dc000015 	stw	r16,0(sp)
10008e40:	24000417 	ldw	r16,16(r4)
10008e44:	dc400115 	stw	r17,4(sp)
10008e48:	24400504 	addi	r17,r4,20
10008e4c:	8421883a 	add	r16,r16,r16
10008e50:	8421883a 	add	r16,r16,r16
10008e54:	8c21883a 	add	r16,r17,r16
10008e58:	dc800215 	stw	r18,8(sp)
10008e5c:	84bfff17 	ldw	r18,-4(r16)
10008e60:	dd000415 	stw	r20,16(sp)
10008e64:	dcc00315 	stw	r19,12(sp)
10008e68:	9009883a 	mov	r4,r18
10008e6c:	2829883a 	mov	r20,r5
10008e70:	dfc00515 	stw	ra,20(sp)
10008e74:	00085740 	call	10008574 <__hi0bits>
10008e78:	00c00804 	movi	r3,32
10008e7c:	1887c83a 	sub	r3,r3,r2
10008e80:	a0c00015 	stw	r3,0(r20)
10008e84:	00c00284 	movi	r3,10
10008e88:	84ffff04 	addi	r19,r16,-4
10008e8c:	18801216 	blt	r3,r2,10008ed8 <__b2d+0xa0>
10008e90:	014002c4 	movi	r5,11
10008e94:	2889c83a 	sub	r4,r5,r2
10008e98:	9106d83a 	srl	r3,r18,r4
10008e9c:	18cffc34 	orhi	r3,r3,16368
10008ea0:	8cc0282e 	bgeu	r17,r19,10008f44 <__b2d+0x10c>
10008ea4:	817ffe17 	ldw	r5,-8(r16)
10008ea8:	290ad83a 	srl	r5,r5,r4
10008eac:	10800544 	addi	r2,r2,21
10008eb0:	9084983a 	sll	r2,r18,r2
10008eb4:	2884b03a 	or	r2,r5,r2
10008eb8:	dfc00517 	ldw	ra,20(sp)
10008ebc:	dd000417 	ldw	r20,16(sp)
10008ec0:	dcc00317 	ldw	r19,12(sp)
10008ec4:	dc800217 	ldw	r18,8(sp)
10008ec8:	dc400117 	ldw	r17,4(sp)
10008ecc:	dc000017 	ldw	r16,0(sp)
10008ed0:	dec00604 	addi	sp,sp,24
10008ed4:	f800283a 	ret
10008ed8:	113ffd44 	addi	r4,r2,-11
10008edc:	8cc00f2e 	bgeu	r17,r19,10008f1c <__b2d+0xe4>
10008ee0:	81bffe04 	addi	r6,r16,-8
10008ee4:	817ffe17 	ldw	r5,-8(r16)
10008ee8:	20001326 	beq	r4,zero,10008f38 <__b2d+0x100>
10008eec:	00c00ac4 	movi	r3,43
10008ef0:	1885c83a 	sub	r2,r3,r2
10008ef4:	2886d83a 	srl	r3,r5,r2
10008ef8:	9124983a 	sll	r18,r18,r4
10008efc:	90e4b03a 	or	r18,r18,r3
10008f00:	90cffc34 	orhi	r3,r18,16368
10008f04:	8980112e 	bgeu	r17,r6,10008f4c <__b2d+0x114>
10008f08:	81bffd17 	ldw	r6,-12(r16)
10008f0c:	308cd83a 	srl	r6,r6,r2
10008f10:	2904983a 	sll	r2,r5,r4
10008f14:	1184b03a 	or	r2,r2,r6
10008f18:	003fe706 	br	10008eb8 <__alt_data_end+0xf8008eb8>
10008f1c:	20000526 	beq	r4,zero,10008f34 <__b2d+0xfc>
10008f20:	9124983a 	sll	r18,r18,r4
10008f24:	000d883a 	mov	r6,zero
10008f28:	000b883a 	mov	r5,zero
10008f2c:	90cffc34 	orhi	r3,r18,16368
10008f30:	003ff706 	br	10008f10 <__alt_data_end+0xf8008f10>
10008f34:	000b883a 	mov	r5,zero
10008f38:	90cffc34 	orhi	r3,r18,16368
10008f3c:	2805883a 	mov	r2,r5
10008f40:	003fdd06 	br	10008eb8 <__alt_data_end+0xf8008eb8>
10008f44:	000b883a 	mov	r5,zero
10008f48:	003fd806 	br	10008eac <__alt_data_end+0xf8008eac>
10008f4c:	000d883a 	mov	r6,zero
10008f50:	003fef06 	br	10008f10 <__alt_data_end+0xf8008f10>

10008f54 <__d2b>:
10008f54:	defff704 	addi	sp,sp,-36
10008f58:	dc000215 	stw	r16,8(sp)
10008f5c:	3021883a 	mov	r16,r6
10008f60:	dc400315 	stw	r17,12(sp)
10008f64:	8022907a 	slli	r17,r16,1
10008f68:	dd400715 	stw	r21,28(sp)
10008f6c:	282b883a 	mov	r21,r5
10008f70:	01400044 	movi	r5,1
10008f74:	dd000615 	stw	r20,24(sp)
10008f78:	dcc00515 	stw	r19,20(sp)
10008f7c:	dc800415 	stw	r18,16(sp)
10008f80:	dfc00815 	stw	ra,32(sp)
10008f84:	3829883a 	mov	r20,r7
10008f88:	dc800917 	ldw	r18,36(sp)
10008f8c:	8822d57a 	srli	r17,r17,21
10008f90:	00082640 	call	10008264 <_Balloc>
10008f94:	1027883a 	mov	r19,r2
10008f98:	00800434 	movhi	r2,16
10008f9c:	10bfffc4 	addi	r2,r2,-1
10008fa0:	808c703a 	and	r6,r16,r2
10008fa4:	88000126 	beq	r17,zero,10008fac <__d2b+0x58>
10008fa8:	31800434 	orhi	r6,r6,16
10008fac:	d9800015 	stw	r6,0(sp)
10008fb0:	a8001f26 	beq	r21,zero,10009030 <__d2b+0xdc>
10008fb4:	d9000104 	addi	r4,sp,4
10008fb8:	dd400115 	stw	r21,4(sp)
10008fbc:	00085dc0 	call	100085dc <__lo0bits>
10008fc0:	d8c00017 	ldw	r3,0(sp)
10008fc4:	1000291e 	bne	r2,zero,1000906c <__d2b+0x118>
10008fc8:	d9000117 	ldw	r4,4(sp)
10008fcc:	99000515 	stw	r4,20(r19)
10008fd0:	1820c03a 	cmpne	r16,r3,zero
10008fd4:	84000044 	addi	r16,r16,1
10008fd8:	98c00615 	stw	r3,24(r19)
10008fdc:	9c000415 	stw	r16,16(r19)
10008fe0:	88001b1e 	bne	r17,zero,10009050 <__d2b+0xfc>
10008fe4:	800690ba 	slli	r3,r16,2
10008fe8:	10bef384 	addi	r2,r2,-1074
10008fec:	a0800015 	stw	r2,0(r20)
10008ff0:	98c5883a 	add	r2,r19,r3
10008ff4:	11000417 	ldw	r4,16(r2)
10008ff8:	8020917a 	slli	r16,r16,5
10008ffc:	00085740 	call	10008574 <__hi0bits>
10009000:	8085c83a 	sub	r2,r16,r2
10009004:	90800015 	stw	r2,0(r18)
10009008:	9805883a 	mov	r2,r19
1000900c:	dfc00817 	ldw	ra,32(sp)
10009010:	dd400717 	ldw	r21,28(sp)
10009014:	dd000617 	ldw	r20,24(sp)
10009018:	dcc00517 	ldw	r19,20(sp)
1000901c:	dc800417 	ldw	r18,16(sp)
10009020:	dc400317 	ldw	r17,12(sp)
10009024:	dc000217 	ldw	r16,8(sp)
10009028:	dec00904 	addi	sp,sp,36
1000902c:	f800283a 	ret
10009030:	d809883a 	mov	r4,sp
10009034:	00085dc0 	call	100085dc <__lo0bits>
10009038:	d8c00017 	ldw	r3,0(sp)
1000903c:	04000044 	movi	r16,1
10009040:	9c000415 	stw	r16,16(r19)
10009044:	98c00515 	stw	r3,20(r19)
10009048:	10800804 	addi	r2,r2,32
1000904c:	883fe526 	beq	r17,zero,10008fe4 <__alt_data_end+0xf8008fe4>
10009050:	8c7ef344 	addi	r17,r17,-1075
10009054:	88a3883a 	add	r17,r17,r2
10009058:	00c00d44 	movi	r3,53
1000905c:	a4400015 	stw	r17,0(r20)
10009060:	1885c83a 	sub	r2,r3,r2
10009064:	90800015 	stw	r2,0(r18)
10009068:	003fe706 	br	10009008 <__alt_data_end+0xf8009008>
1000906c:	01000804 	movi	r4,32
10009070:	2089c83a 	sub	r4,r4,r2
10009074:	1908983a 	sll	r4,r3,r4
10009078:	d9400117 	ldw	r5,4(sp)
1000907c:	1886d83a 	srl	r3,r3,r2
10009080:	2148b03a 	or	r4,r4,r5
10009084:	99000515 	stw	r4,20(r19)
10009088:	d8c00015 	stw	r3,0(sp)
1000908c:	003fd006 	br	10008fd0 <__alt_data_end+0xf8008fd0>

10009090 <__ratio>:
10009090:	defff904 	addi	sp,sp,-28
10009094:	dc400315 	stw	r17,12(sp)
10009098:	2823883a 	mov	r17,r5
1000909c:	d9400104 	addi	r5,sp,4
100090a0:	dfc00615 	stw	ra,24(sp)
100090a4:	dcc00515 	stw	r19,20(sp)
100090a8:	dc800415 	stw	r18,16(sp)
100090ac:	2027883a 	mov	r19,r4
100090b0:	dc000215 	stw	r16,8(sp)
100090b4:	0008e380 	call	10008e38 <__b2d>
100090b8:	8809883a 	mov	r4,r17
100090bc:	d80b883a 	mov	r5,sp
100090c0:	1025883a 	mov	r18,r2
100090c4:	1821883a 	mov	r16,r3
100090c8:	0008e380 	call	10008e38 <__b2d>
100090cc:	8a400417 	ldw	r9,16(r17)
100090d0:	9a000417 	ldw	r8,16(r19)
100090d4:	100d883a 	mov	r6,r2
100090d8:	d8800017 	ldw	r2,0(sp)
100090dc:	4251c83a 	sub	r8,r8,r9
100090e0:	4012917a 	slli	r9,r8,5
100090e4:	da000117 	ldw	r8,4(sp)
100090e8:	4091c83a 	sub	r8,r8,r2
100090ec:	4251883a 	add	r8,r8,r9
100090f0:	02000d0e 	bge	zero,r8,10009128 <__ratio+0x98>
100090f4:	4010953a 	slli	r8,r8,20
100090f8:	4421883a 	add	r16,r8,r16
100090fc:	9009883a 	mov	r4,r18
10009100:	800b883a 	mov	r5,r16
10009104:	180f883a 	mov	r7,r3
10009108:	000d0f40 	call	1000d0f4 <__divdf3>
1000910c:	dfc00617 	ldw	ra,24(sp)
10009110:	dcc00517 	ldw	r19,20(sp)
10009114:	dc800417 	ldw	r18,16(sp)
10009118:	dc400317 	ldw	r17,12(sp)
1000911c:	dc000217 	ldw	r16,8(sp)
10009120:	dec00704 	addi	sp,sp,28
10009124:	f800283a 	ret
10009128:	4010953a 	slli	r8,r8,20
1000912c:	1a07c83a 	sub	r3,r3,r8
10009130:	003ff206 	br	100090fc <__alt_data_end+0xf80090fc>

10009134 <_mprec_log10>:
10009134:	defffe04 	addi	sp,sp,-8
10009138:	dc000015 	stw	r16,0(sp)
1000913c:	dfc00115 	stw	ra,4(sp)
10009140:	008005c4 	movi	r2,23
10009144:	2021883a 	mov	r16,r4
10009148:	11000d0e 	bge	r2,r4,10009180 <_mprec_log10+0x4c>
1000914c:	0005883a 	mov	r2,zero
10009150:	00cffc34 	movhi	r3,16368
10009154:	843fffc4 	addi	r16,r16,-1
10009158:	1009883a 	mov	r4,r2
1000915c:	180b883a 	mov	r5,r3
10009160:	000d883a 	mov	r6,zero
10009164:	01d00934 	movhi	r7,16420
10009168:	000dcb80 	call	1000dcb8 <__muldf3>
1000916c:	803ff91e 	bne	r16,zero,10009154 <__alt_data_end+0xf8009154>
10009170:	dfc00117 	ldw	ra,4(sp)
10009174:	dc000017 	ldw	r16,0(sp)
10009178:	dec00204 	addi	sp,sp,8
1000917c:	f800283a 	ret
10009180:	202090fa 	slli	r16,r4,3
10009184:	00840074 	movhi	r2,4097
10009188:	10884404 	addi	r2,r2,8464
1000918c:	1421883a 	add	r16,r2,r16
10009190:	80800017 	ldw	r2,0(r16)
10009194:	80c00117 	ldw	r3,4(r16)
10009198:	dfc00117 	ldw	ra,4(sp)
1000919c:	dc000017 	ldw	r16,0(sp)
100091a0:	dec00204 	addi	sp,sp,8
100091a4:	f800283a 	ret

100091a8 <__copybits>:
100091a8:	297fffc4 	addi	r5,r5,-1
100091ac:	280fd17a 	srai	r7,r5,5
100091b0:	30c00417 	ldw	r3,16(r6)
100091b4:	30800504 	addi	r2,r6,20
100091b8:	39c00044 	addi	r7,r7,1
100091bc:	18c7883a 	add	r3,r3,r3
100091c0:	39cf883a 	add	r7,r7,r7
100091c4:	18c7883a 	add	r3,r3,r3
100091c8:	39cf883a 	add	r7,r7,r7
100091cc:	10c7883a 	add	r3,r2,r3
100091d0:	21cf883a 	add	r7,r4,r7
100091d4:	10c00d2e 	bgeu	r2,r3,1000920c <__copybits+0x64>
100091d8:	200b883a 	mov	r5,r4
100091dc:	12000017 	ldw	r8,0(r2)
100091e0:	29400104 	addi	r5,r5,4
100091e4:	10800104 	addi	r2,r2,4
100091e8:	2a3fff15 	stw	r8,-4(r5)
100091ec:	10fffb36 	bltu	r2,r3,100091dc <__alt_data_end+0xf80091dc>
100091f0:	1985c83a 	sub	r2,r3,r6
100091f4:	10bffac4 	addi	r2,r2,-21
100091f8:	1004d0ba 	srli	r2,r2,2
100091fc:	10800044 	addi	r2,r2,1
10009200:	1085883a 	add	r2,r2,r2
10009204:	1085883a 	add	r2,r2,r2
10009208:	2089883a 	add	r4,r4,r2
1000920c:	21c0032e 	bgeu	r4,r7,1000921c <__copybits+0x74>
10009210:	20000015 	stw	zero,0(r4)
10009214:	21000104 	addi	r4,r4,4
10009218:	21fffd36 	bltu	r4,r7,10009210 <__alt_data_end+0xf8009210>
1000921c:	f800283a 	ret

10009220 <__any_on>:
10009220:	20c00417 	ldw	r3,16(r4)
10009224:	2805d17a 	srai	r2,r5,5
10009228:	21000504 	addi	r4,r4,20
1000922c:	18800d0e 	bge	r3,r2,10009264 <__any_on+0x44>
10009230:	18c7883a 	add	r3,r3,r3
10009234:	18c7883a 	add	r3,r3,r3
10009238:	20c7883a 	add	r3,r4,r3
1000923c:	20c0192e 	bgeu	r4,r3,100092a4 <__any_on+0x84>
10009240:	18bfff17 	ldw	r2,-4(r3)
10009244:	18ffff04 	addi	r3,r3,-4
10009248:	1000041e 	bne	r2,zero,1000925c <__any_on+0x3c>
1000924c:	20c0142e 	bgeu	r4,r3,100092a0 <__any_on+0x80>
10009250:	18ffff04 	addi	r3,r3,-4
10009254:	19400017 	ldw	r5,0(r3)
10009258:	283ffc26 	beq	r5,zero,1000924c <__alt_data_end+0xf800924c>
1000925c:	00800044 	movi	r2,1
10009260:	f800283a 	ret
10009264:	10c00a0e 	bge	r2,r3,10009290 <__any_on+0x70>
10009268:	1085883a 	add	r2,r2,r2
1000926c:	1085883a 	add	r2,r2,r2
10009270:	294007cc 	andi	r5,r5,31
10009274:	2087883a 	add	r3,r4,r2
10009278:	283ff026 	beq	r5,zero,1000923c <__alt_data_end+0xf800923c>
1000927c:	19800017 	ldw	r6,0(r3)
10009280:	3144d83a 	srl	r2,r6,r5
10009284:	114a983a 	sll	r5,r2,r5
10009288:	29bff41e 	bne	r5,r6,1000925c <__alt_data_end+0xf800925c>
1000928c:	003feb06 	br	1000923c <__alt_data_end+0xf800923c>
10009290:	1085883a 	add	r2,r2,r2
10009294:	1085883a 	add	r2,r2,r2
10009298:	2087883a 	add	r3,r4,r2
1000929c:	003fe706 	br	1000923c <__alt_data_end+0xf800923c>
100092a0:	f800283a 	ret
100092a4:	0005883a 	mov	r2,zero
100092a8:	f800283a 	ret

100092ac <_realloc_r>:
100092ac:	defff604 	addi	sp,sp,-40
100092b0:	dcc00315 	stw	r19,12(sp)
100092b4:	dc400115 	stw	r17,4(sp)
100092b8:	dfc00915 	stw	ra,36(sp)
100092bc:	df000815 	stw	fp,32(sp)
100092c0:	ddc00715 	stw	r23,28(sp)
100092c4:	dd800615 	stw	r22,24(sp)
100092c8:	dd400515 	stw	r21,20(sp)
100092cc:	dd000415 	stw	r20,16(sp)
100092d0:	dc800215 	stw	r18,8(sp)
100092d4:	dc000015 	stw	r16,0(sp)
100092d8:	2827883a 	mov	r19,r5
100092dc:	3023883a 	mov	r17,r6
100092e0:	2800bf26 	beq	r5,zero,100095e0 <_realloc_r+0x334>
100092e4:	2025883a 	mov	r18,r4
100092e8:	000f6340 	call	1000f634 <__malloc_lock>
100092ec:	98ffff17 	ldw	r3,-4(r19)
100092f0:	01bfff04 	movi	r6,-4
100092f4:	890002c4 	addi	r4,r17,11
100092f8:	01c00584 	movi	r7,22
100092fc:	9d7ffe04 	addi	r21,r19,-8
10009300:	19a0703a 	and	r16,r3,r6
10009304:	39003f2e 	bgeu	r7,r4,10009404 <_realloc_r+0x158>
10009308:	053ffe04 	movi	r20,-8
1000930c:	2528703a 	and	r20,r4,r20
10009310:	a00f883a 	mov	r7,r20
10009314:	a0008216 	blt	r20,zero,10009520 <_realloc_r+0x274>
10009318:	a4408136 	bltu	r20,r17,10009520 <_realloc_r+0x274>
1000931c:	81c03c0e 	bge	r16,r7,10009410 <_realloc_r+0x164>
10009320:	07040074 	movhi	fp,4097
10009324:	e709f204 	addi	fp,fp,10184
10009328:	e1000217 	ldw	r4,8(fp)
1000932c:	ac05883a 	add	r2,r21,r16
10009330:	2080bf26 	beq	r4,r2,10009630 <_realloc_r+0x384>
10009334:	11000117 	ldw	r4,4(r2)
10009338:	023fff84 	movi	r8,-2
1000933c:	2210703a 	and	r8,r4,r8
10009340:	1211883a 	add	r8,r2,r8
10009344:	41400117 	ldw	r5,4(r8)
10009348:	2940004c 	andi	r5,r5,1
1000934c:	28004a1e 	bne	r5,zero,10009478 <_realloc_r+0x1cc>
10009350:	017fff04 	movi	r5,-4
10009354:	2148703a 	and	r4,r4,r5
10009358:	2409883a 	add	r4,r4,r16
1000935c:	21c0ad0e 	bge	r4,r7,10009614 <_realloc_r+0x368>
10009360:	18c0004c 	andi	r3,r3,1
10009364:	18007f1e 	bne	r3,zero,10009564 <_realloc_r+0x2b8>
10009368:	9dfffe17 	ldw	r23,-8(r19)
1000936c:	adefc83a 	sub	r23,r21,r23
10009370:	bd800117 	ldw	r22,4(r23)
10009374:	b14a703a 	and	r5,r22,r5
10009378:	216d883a 	add	r22,r4,r5
1000937c:	b1c04516 	blt	r22,r7,10009494 <_realloc_r+0x1e8>
10009380:	10c00317 	ldw	r3,12(r2)
10009384:	10800217 	ldw	r2,8(r2)
10009388:	81bfff04 	addi	r6,r16,-4
1000938c:	bc400204 	addi	r17,r23,8
10009390:	10c00315 	stw	r3,12(r2)
10009394:	18800215 	stw	r2,8(r3)
10009398:	b9400217 	ldw	r5,8(r23)
1000939c:	b8c00317 	ldw	r3,12(r23)
100093a0:	00800904 	movi	r2,36
100093a4:	28c00315 	stw	r3,12(r5)
100093a8:	19400215 	stw	r5,8(r3)
100093ac:	1180ef36 	bltu	r2,r6,1000976c <_realloc_r+0x4c0>
100093b0:	008004c4 	movi	r2,19
100093b4:	1180da2e 	bgeu	r2,r6,10009720 <_realloc_r+0x474>
100093b8:	98800017 	ldw	r2,0(r19)
100093bc:	b8800215 	stw	r2,8(r23)
100093c0:	98800117 	ldw	r2,4(r19)
100093c4:	b8800315 	stw	r2,12(r23)
100093c8:	008006c4 	movi	r2,27
100093cc:	1180fc2e 	bgeu	r2,r6,100097c0 <_realloc_r+0x514>
100093d0:	98800217 	ldw	r2,8(r19)
100093d4:	b8800415 	stw	r2,16(r23)
100093d8:	98800317 	ldw	r2,12(r19)
100093dc:	b8800515 	stw	r2,20(r23)
100093e0:	00800904 	movi	r2,36
100093e4:	3080421e 	bne	r6,r2,100094f0 <_realloc_r+0x244>
100093e8:	98800417 	ldw	r2,16(r19)
100093ec:	9cc00604 	addi	r19,r19,24
100093f0:	b8c00804 	addi	r3,r23,32
100093f4:	b8800615 	stw	r2,24(r23)
100093f8:	98bfff17 	ldw	r2,-4(r19)
100093fc:	b8800715 	stw	r2,28(r23)
10009400:	00003d06 	br	100094f8 <_realloc_r+0x24c>
10009404:	01c00404 	movi	r7,16
10009408:	3829883a 	mov	r20,r7
1000940c:	003fc206 	br	10009318 <__alt_data_end+0xf8009318>
10009410:	9823883a 	mov	r17,r19
10009414:	850fc83a 	sub	r7,r16,r20
10009418:	008003c4 	movi	r2,15
1000941c:	18c0004c 	andi	r3,r3,1
10009420:	11c04336 	bltu	r2,r7,10009530 <_realloc_r+0x284>
10009424:	1c06b03a 	or	r3,r3,r16
10009428:	a8c00115 	stw	r3,4(r21)
1000942c:	ac21883a 	add	r16,r21,r16
10009430:	80c00117 	ldw	r3,4(r16)
10009434:	18c00054 	ori	r3,r3,1
10009438:	80c00115 	stw	r3,4(r16)
1000943c:	9009883a 	mov	r4,r18
10009440:	000f6540 	call	1000f654 <__malloc_unlock>
10009444:	8805883a 	mov	r2,r17
10009448:	dfc00917 	ldw	ra,36(sp)
1000944c:	df000817 	ldw	fp,32(sp)
10009450:	ddc00717 	ldw	r23,28(sp)
10009454:	dd800617 	ldw	r22,24(sp)
10009458:	dd400517 	ldw	r21,20(sp)
1000945c:	dd000417 	ldw	r20,16(sp)
10009460:	dcc00317 	ldw	r19,12(sp)
10009464:	dc800217 	ldw	r18,8(sp)
10009468:	dc400117 	ldw	r17,4(sp)
1000946c:	dc000017 	ldw	r16,0(sp)
10009470:	dec00a04 	addi	sp,sp,40
10009474:	f800283a 	ret
10009478:	18c0004c 	andi	r3,r3,1
1000947c:	1800391e 	bne	r3,zero,10009564 <_realloc_r+0x2b8>
10009480:	9dfffe17 	ldw	r23,-8(r19)
10009484:	00bfff04 	movi	r2,-4
10009488:	adefc83a 	sub	r23,r21,r23
1000948c:	b9400117 	ldw	r5,4(r23)
10009490:	288a703a 	and	r5,r5,r2
10009494:	2c2d883a 	add	r22,r5,r16
10009498:	b1c03216 	blt	r22,r7,10009564 <_realloc_r+0x2b8>
1000949c:	b8800317 	ldw	r2,12(r23)
100094a0:	b8c00217 	ldw	r3,8(r23)
100094a4:	81bfff04 	addi	r6,r16,-4
100094a8:	01000904 	movi	r4,36
100094ac:	18800315 	stw	r2,12(r3)
100094b0:	10c00215 	stw	r3,8(r2)
100094b4:	bc400204 	addi	r17,r23,8
100094b8:	2180ac36 	bltu	r4,r6,1000976c <_realloc_r+0x4c0>
100094bc:	008004c4 	movi	r2,19
100094c0:	1180972e 	bgeu	r2,r6,10009720 <_realloc_r+0x474>
100094c4:	98800017 	ldw	r2,0(r19)
100094c8:	b8800215 	stw	r2,8(r23)
100094cc:	98800117 	ldw	r2,4(r19)
100094d0:	b8800315 	stw	r2,12(r23)
100094d4:	008006c4 	movi	r2,27
100094d8:	1180b92e 	bgeu	r2,r6,100097c0 <_realloc_r+0x514>
100094dc:	98800217 	ldw	r2,8(r19)
100094e0:	b8800415 	stw	r2,16(r23)
100094e4:	98800317 	ldw	r2,12(r19)
100094e8:	b8800515 	stw	r2,20(r23)
100094ec:	313fbe26 	beq	r6,r4,100093e8 <__alt_data_end+0xf80093e8>
100094f0:	b8c00604 	addi	r3,r23,24
100094f4:	9cc00404 	addi	r19,r19,16
100094f8:	98800017 	ldw	r2,0(r19)
100094fc:	b021883a 	mov	r16,r22
10009500:	b82b883a 	mov	r21,r23
10009504:	18800015 	stw	r2,0(r3)
10009508:	98800117 	ldw	r2,4(r19)
1000950c:	18800115 	stw	r2,4(r3)
10009510:	98800217 	ldw	r2,8(r19)
10009514:	18800215 	stw	r2,8(r3)
10009518:	b8c00117 	ldw	r3,4(r23)
1000951c:	003fbd06 	br	10009414 <__alt_data_end+0xf8009414>
10009520:	00800304 	movi	r2,12
10009524:	90800015 	stw	r2,0(r18)
10009528:	0005883a 	mov	r2,zero
1000952c:	003fc606 	br	10009448 <__alt_data_end+0xf8009448>
10009530:	1d06b03a 	or	r3,r3,r20
10009534:	ad0b883a 	add	r5,r21,r20
10009538:	a8c00115 	stw	r3,4(r21)
1000953c:	38800054 	ori	r2,r7,1
10009540:	28800115 	stw	r2,4(r5)
10009544:	29cf883a 	add	r7,r5,r7
10009548:	38800117 	ldw	r2,4(r7)
1000954c:	9009883a 	mov	r4,r18
10009550:	29400204 	addi	r5,r5,8
10009554:	10800054 	ori	r2,r2,1
10009558:	38800115 	stw	r2,4(r7)
1000955c:	0006a800 	call	10006a80 <_free_r>
10009560:	003fb606 	br	1000943c <__alt_data_end+0xf800943c>
10009564:	880b883a 	mov	r5,r17
10009568:	9009883a 	mov	r4,r18
1000956c:	000761c0 	call	1000761c <_malloc_r>
10009570:	1023883a 	mov	r17,r2
10009574:	1000aa26 	beq	r2,zero,10009820 <_realloc_r+0x574>
10009578:	98ffff17 	ldw	r3,-4(r19)
1000957c:	113ffe04 	addi	r4,r2,-8
10009580:	00bfff84 	movi	r2,-2
10009584:	1884703a 	and	r2,r3,r2
10009588:	a885883a 	add	r2,r21,r2
1000958c:	20808626 	beq	r4,r2,100097a8 <_realloc_r+0x4fc>
10009590:	81bfff04 	addi	r6,r16,-4
10009594:	00800904 	movi	r2,36
10009598:	11807036 	bltu	r2,r6,1000975c <_realloc_r+0x4b0>
1000959c:	00c004c4 	movi	r3,19
100095a0:	19805636 	bltu	r3,r6,100096fc <_realloc_r+0x450>
100095a4:	8805883a 	mov	r2,r17
100095a8:	9807883a 	mov	r3,r19
100095ac:	19000017 	ldw	r4,0(r3)
100095b0:	11000015 	stw	r4,0(r2)
100095b4:	19000117 	ldw	r4,4(r3)
100095b8:	11000115 	stw	r4,4(r2)
100095bc:	18c00217 	ldw	r3,8(r3)
100095c0:	10c00215 	stw	r3,8(r2)
100095c4:	980b883a 	mov	r5,r19
100095c8:	9009883a 	mov	r4,r18
100095cc:	0006a800 	call	10006a80 <_free_r>
100095d0:	9009883a 	mov	r4,r18
100095d4:	000f6540 	call	1000f654 <__malloc_unlock>
100095d8:	8805883a 	mov	r2,r17
100095dc:	003f9a06 	br	10009448 <__alt_data_end+0xf8009448>
100095e0:	300b883a 	mov	r5,r6
100095e4:	dfc00917 	ldw	ra,36(sp)
100095e8:	df000817 	ldw	fp,32(sp)
100095ec:	ddc00717 	ldw	r23,28(sp)
100095f0:	dd800617 	ldw	r22,24(sp)
100095f4:	dd400517 	ldw	r21,20(sp)
100095f8:	dd000417 	ldw	r20,16(sp)
100095fc:	dcc00317 	ldw	r19,12(sp)
10009600:	dc800217 	ldw	r18,8(sp)
10009604:	dc400117 	ldw	r17,4(sp)
10009608:	dc000017 	ldw	r16,0(sp)
1000960c:	dec00a04 	addi	sp,sp,40
10009610:	000761c1 	jmpi	1000761c <_malloc_r>
10009614:	11400317 	ldw	r5,12(r2)
10009618:	10800217 	ldw	r2,8(r2)
1000961c:	9823883a 	mov	r17,r19
10009620:	2021883a 	mov	r16,r4
10009624:	11400315 	stw	r5,12(r2)
10009628:	28800215 	stw	r2,8(r5)
1000962c:	003f7906 	br	10009414 <__alt_data_end+0xf8009414>
10009630:	21000117 	ldw	r4,4(r4)
10009634:	00bfff04 	movi	r2,-4
10009638:	a1800404 	addi	r6,r20,16
1000963c:	2088703a 	and	r4,r4,r2
10009640:	2409883a 	add	r4,r4,r16
10009644:	2180380e 	bge	r4,r6,10009728 <_realloc_r+0x47c>
10009648:	18c0004c 	andi	r3,r3,1
1000964c:	183fc51e 	bne	r3,zero,10009564 <__alt_data_end+0xf8009564>
10009650:	9dfffe17 	ldw	r23,-8(r19)
10009654:	adefc83a 	sub	r23,r21,r23
10009658:	b9400117 	ldw	r5,4(r23)
1000965c:	288a703a 	and	r5,r5,r2
10009660:	216d883a 	add	r22,r4,r5
10009664:	b1bf8b16 	blt	r22,r6,10009494 <__alt_data_end+0xf8009494>
10009668:	b8800317 	ldw	r2,12(r23)
1000966c:	b8c00217 	ldw	r3,8(r23)
10009670:	81bfff04 	addi	r6,r16,-4
10009674:	01000904 	movi	r4,36
10009678:	18800315 	stw	r2,12(r3)
1000967c:	10c00215 	stw	r3,8(r2)
10009680:	bc400204 	addi	r17,r23,8
10009684:	21805a36 	bltu	r4,r6,100097f0 <_realloc_r+0x544>
10009688:	008004c4 	movi	r2,19
1000968c:	1180562e 	bgeu	r2,r6,100097e8 <_realloc_r+0x53c>
10009690:	98800017 	ldw	r2,0(r19)
10009694:	b8800215 	stw	r2,8(r23)
10009698:	98800117 	ldw	r2,4(r19)
1000969c:	b8800315 	stw	r2,12(r23)
100096a0:	008006c4 	movi	r2,27
100096a4:	11805636 	bltu	r2,r6,10009800 <_realloc_r+0x554>
100096a8:	b8800404 	addi	r2,r23,16
100096ac:	9cc00204 	addi	r19,r19,8
100096b0:	98c00017 	ldw	r3,0(r19)
100096b4:	10c00015 	stw	r3,0(r2)
100096b8:	98c00117 	ldw	r3,4(r19)
100096bc:	10c00115 	stw	r3,4(r2)
100096c0:	98c00217 	ldw	r3,8(r19)
100096c4:	10c00215 	stw	r3,8(r2)
100096c8:	bd07883a 	add	r3,r23,r20
100096cc:	b505c83a 	sub	r2,r22,r20
100096d0:	e0c00215 	stw	r3,8(fp)
100096d4:	10800054 	ori	r2,r2,1
100096d8:	18800115 	stw	r2,4(r3)
100096dc:	b8800117 	ldw	r2,4(r23)
100096e0:	9009883a 	mov	r4,r18
100096e4:	1080004c 	andi	r2,r2,1
100096e8:	a0a8b03a 	or	r20,r20,r2
100096ec:	bd000115 	stw	r20,4(r23)
100096f0:	000f6540 	call	1000f654 <__malloc_unlock>
100096f4:	8805883a 	mov	r2,r17
100096f8:	003f5306 	br	10009448 <__alt_data_end+0xf8009448>
100096fc:	98c00017 	ldw	r3,0(r19)
10009700:	88c00015 	stw	r3,0(r17)
10009704:	98c00117 	ldw	r3,4(r19)
10009708:	88c00115 	stw	r3,4(r17)
1000970c:	00c006c4 	movi	r3,27
10009710:	19801d36 	bltu	r3,r6,10009788 <_realloc_r+0x4dc>
10009714:	88800204 	addi	r2,r17,8
10009718:	98c00204 	addi	r3,r19,8
1000971c:	003fa306 	br	100095ac <__alt_data_end+0xf80095ac>
10009720:	8807883a 	mov	r3,r17
10009724:	003f7406 	br	100094f8 <__alt_data_end+0xf80094f8>
10009728:	ad2b883a 	add	r21,r21,r20
1000972c:	2505c83a 	sub	r2,r4,r20
10009730:	e5400215 	stw	r21,8(fp)
10009734:	10800054 	ori	r2,r2,1
10009738:	a8800115 	stw	r2,4(r21)
1000973c:	98bfff17 	ldw	r2,-4(r19)
10009740:	9009883a 	mov	r4,r18
10009744:	1080004c 	andi	r2,r2,1
10009748:	a0a8b03a 	or	r20,r20,r2
1000974c:	9d3fff15 	stw	r20,-4(r19)
10009750:	000f6540 	call	1000f654 <__malloc_unlock>
10009754:	9805883a 	mov	r2,r19
10009758:	003f3b06 	br	10009448 <__alt_data_end+0xf8009448>
1000975c:	8809883a 	mov	r4,r17
10009760:	980b883a 	mov	r5,r19
10009764:	0007fe40 	call	10007fe4 <memmove>
10009768:	003f9606 	br	100095c4 <__alt_data_end+0xf80095c4>
1000976c:	8809883a 	mov	r4,r17
10009770:	980b883a 	mov	r5,r19
10009774:	0007fe40 	call	10007fe4 <memmove>
10009778:	b8c00117 	ldw	r3,4(r23)
1000977c:	b021883a 	mov	r16,r22
10009780:	b82b883a 	mov	r21,r23
10009784:	003f2306 	br	10009414 <__alt_data_end+0xf8009414>
10009788:	98c00217 	ldw	r3,8(r19)
1000978c:	88c00215 	stw	r3,8(r17)
10009790:	98c00317 	ldw	r3,12(r19)
10009794:	88c00315 	stw	r3,12(r17)
10009798:	30800c26 	beq	r6,r2,100097cc <_realloc_r+0x520>
1000979c:	88800404 	addi	r2,r17,16
100097a0:	98c00404 	addi	r3,r19,16
100097a4:	003f8106 	br	100095ac <__alt_data_end+0xf80095ac>
100097a8:	893fff17 	ldw	r4,-4(r17)
100097ac:	00bfff04 	movi	r2,-4
100097b0:	9823883a 	mov	r17,r19
100097b4:	2084703a 	and	r2,r4,r2
100097b8:	80a1883a 	add	r16,r16,r2
100097bc:	003f1506 	br	10009414 <__alt_data_end+0xf8009414>
100097c0:	b8c00404 	addi	r3,r23,16
100097c4:	9cc00204 	addi	r19,r19,8
100097c8:	003f4b06 	br	100094f8 <__alt_data_end+0xf80094f8>
100097cc:	99000417 	ldw	r4,16(r19)
100097d0:	88800604 	addi	r2,r17,24
100097d4:	98c00604 	addi	r3,r19,24
100097d8:	89000415 	stw	r4,16(r17)
100097dc:	99000517 	ldw	r4,20(r19)
100097e0:	89000515 	stw	r4,20(r17)
100097e4:	003f7106 	br	100095ac <__alt_data_end+0xf80095ac>
100097e8:	8805883a 	mov	r2,r17
100097ec:	003fb006 	br	100096b0 <__alt_data_end+0xf80096b0>
100097f0:	8809883a 	mov	r4,r17
100097f4:	980b883a 	mov	r5,r19
100097f8:	0007fe40 	call	10007fe4 <memmove>
100097fc:	003fb206 	br	100096c8 <__alt_data_end+0xf80096c8>
10009800:	98800217 	ldw	r2,8(r19)
10009804:	b8800415 	stw	r2,16(r23)
10009808:	98800317 	ldw	r2,12(r19)
1000980c:	b8800515 	stw	r2,20(r23)
10009810:	31000726 	beq	r6,r4,10009830 <_realloc_r+0x584>
10009814:	b8800604 	addi	r2,r23,24
10009818:	9cc00404 	addi	r19,r19,16
1000981c:	003fa406 	br	100096b0 <__alt_data_end+0xf80096b0>
10009820:	9009883a 	mov	r4,r18
10009824:	000f6540 	call	1000f654 <__malloc_unlock>
10009828:	0005883a 	mov	r2,zero
1000982c:	003f0606 	br	10009448 <__alt_data_end+0xf8009448>
10009830:	98c00417 	ldw	r3,16(r19)
10009834:	9cc00604 	addi	r19,r19,24
10009838:	b8800804 	addi	r2,r23,32
1000983c:	b8c00615 	stw	r3,24(r23)
10009840:	98ffff17 	ldw	r3,-4(r19)
10009844:	b8c00715 	stw	r3,28(r23)
10009848:	003f9906 	br	100096b0 <__alt_data_end+0xf80096b0>

1000984c <__fpclassifyd>:
1000984c:	00a00034 	movhi	r2,32768
10009850:	10bfffc4 	addi	r2,r2,-1
10009854:	2884703a 	and	r2,r5,r2
10009858:	10000726 	beq	r2,zero,10009878 <__fpclassifyd+0x2c>
1000985c:	00fffc34 	movhi	r3,65520
10009860:	019ff834 	movhi	r6,32736
10009864:	28c7883a 	add	r3,r5,r3
10009868:	31bfffc4 	addi	r6,r6,-1
1000986c:	30c00536 	bltu	r6,r3,10009884 <__fpclassifyd+0x38>
10009870:	00800104 	movi	r2,4
10009874:	f800283a 	ret
10009878:	2000021e 	bne	r4,zero,10009884 <__fpclassifyd+0x38>
1000987c:	00800084 	movi	r2,2
10009880:	f800283a 	ret
10009884:	00dffc34 	movhi	r3,32752
10009888:	019ff834 	movhi	r6,32736
1000988c:	28cb883a 	add	r5,r5,r3
10009890:	31bfffc4 	addi	r6,r6,-1
10009894:	317ff62e 	bgeu	r6,r5,10009870 <__alt_data_end+0xf8009870>
10009898:	01400434 	movhi	r5,16
1000989c:	297fffc4 	addi	r5,r5,-1
100098a0:	28800236 	bltu	r5,r2,100098ac <__fpclassifyd+0x60>
100098a4:	008000c4 	movi	r2,3
100098a8:	f800283a 	ret
100098ac:	10c00226 	beq	r2,r3,100098b8 <__fpclassifyd+0x6c>
100098b0:	0005883a 	mov	r2,zero
100098b4:	f800283a 	ret
100098b8:	2005003a 	cmpeq	r2,r4,zero
100098bc:	f800283a 	ret

100098c0 <_sbrk_r>:
100098c0:	defffd04 	addi	sp,sp,-12
100098c4:	dc000015 	stw	r16,0(sp)
100098c8:	04040074 	movhi	r16,4097
100098cc:	dc400115 	stw	r17,4(sp)
100098d0:	84164804 	addi	r16,r16,22816
100098d4:	2023883a 	mov	r17,r4
100098d8:	2809883a 	mov	r4,r5
100098dc:	dfc00215 	stw	ra,8(sp)
100098e0:	80000015 	stw	zero,0(r16)
100098e4:	000f8480 	call	1000f848 <sbrk>
100098e8:	00ffffc4 	movi	r3,-1
100098ec:	10c00526 	beq	r2,r3,10009904 <_sbrk_r+0x44>
100098f0:	dfc00217 	ldw	ra,8(sp)
100098f4:	dc400117 	ldw	r17,4(sp)
100098f8:	dc000017 	ldw	r16,0(sp)
100098fc:	dec00304 	addi	sp,sp,12
10009900:	f800283a 	ret
10009904:	80c00017 	ldw	r3,0(r16)
10009908:	183ff926 	beq	r3,zero,100098f0 <__alt_data_end+0xf80098f0>
1000990c:	88c00015 	stw	r3,0(r17)
10009910:	003ff706 	br	100098f0 <__alt_data_end+0xf80098f0>

10009914 <__sread>:
10009914:	defffe04 	addi	sp,sp,-8
10009918:	dc000015 	stw	r16,0(sp)
1000991c:	2821883a 	mov	r16,r5
10009920:	2940038f 	ldh	r5,14(r5)
10009924:	dfc00115 	stw	ra,4(sp)
10009928:	000b5d00 	call	1000b5d0 <_read_r>
1000992c:	10000716 	blt	r2,zero,1000994c <__sread+0x38>
10009930:	80c01417 	ldw	r3,80(r16)
10009934:	1887883a 	add	r3,r3,r2
10009938:	80c01415 	stw	r3,80(r16)
1000993c:	dfc00117 	ldw	ra,4(sp)
10009940:	dc000017 	ldw	r16,0(sp)
10009944:	dec00204 	addi	sp,sp,8
10009948:	f800283a 	ret
1000994c:	80c0030b 	ldhu	r3,12(r16)
10009950:	18fbffcc 	andi	r3,r3,61439
10009954:	80c0030d 	sth	r3,12(r16)
10009958:	dfc00117 	ldw	ra,4(sp)
1000995c:	dc000017 	ldw	r16,0(sp)
10009960:	dec00204 	addi	sp,sp,8
10009964:	f800283a 	ret

10009968 <__seofread>:
10009968:	0005883a 	mov	r2,zero
1000996c:	f800283a 	ret

10009970 <__swrite>:
10009970:	2880030b 	ldhu	r2,12(r5)
10009974:	defffb04 	addi	sp,sp,-20
10009978:	dcc00315 	stw	r19,12(sp)
1000997c:	dc800215 	stw	r18,8(sp)
10009980:	dc400115 	stw	r17,4(sp)
10009984:	dc000015 	stw	r16,0(sp)
10009988:	dfc00415 	stw	ra,16(sp)
1000998c:	10c0400c 	andi	r3,r2,256
10009990:	2821883a 	mov	r16,r5
10009994:	2027883a 	mov	r19,r4
10009998:	3025883a 	mov	r18,r6
1000999c:	3823883a 	mov	r17,r7
100099a0:	18000526 	beq	r3,zero,100099b8 <__swrite+0x48>
100099a4:	2940038f 	ldh	r5,14(r5)
100099a8:	000d883a 	mov	r6,zero
100099ac:	01c00084 	movi	r7,2
100099b0:	000b5740 	call	1000b574 <_lseek_r>
100099b4:	8080030b 	ldhu	r2,12(r16)
100099b8:	8140038f 	ldh	r5,14(r16)
100099bc:	10bbffcc 	andi	r2,r2,61439
100099c0:	9809883a 	mov	r4,r19
100099c4:	900d883a 	mov	r6,r18
100099c8:	880f883a 	mov	r7,r17
100099cc:	8080030d 	sth	r2,12(r16)
100099d0:	dfc00417 	ldw	ra,16(sp)
100099d4:	dcc00317 	ldw	r19,12(sp)
100099d8:	dc800217 	ldw	r18,8(sp)
100099dc:	dc400117 	ldw	r17,4(sp)
100099e0:	dc000017 	ldw	r16,0(sp)
100099e4:	dec00504 	addi	sp,sp,20
100099e8:	000b0501 	jmpi	1000b050 <_write_r>

100099ec <__sseek>:
100099ec:	defffe04 	addi	sp,sp,-8
100099f0:	dc000015 	stw	r16,0(sp)
100099f4:	2821883a 	mov	r16,r5
100099f8:	2940038f 	ldh	r5,14(r5)
100099fc:	dfc00115 	stw	ra,4(sp)
10009a00:	000b5740 	call	1000b574 <_lseek_r>
10009a04:	00ffffc4 	movi	r3,-1
10009a08:	10c00826 	beq	r2,r3,10009a2c <__sseek+0x40>
10009a0c:	80c0030b 	ldhu	r3,12(r16)
10009a10:	80801415 	stw	r2,80(r16)
10009a14:	18c40014 	ori	r3,r3,4096
10009a18:	80c0030d 	sth	r3,12(r16)
10009a1c:	dfc00117 	ldw	ra,4(sp)
10009a20:	dc000017 	ldw	r16,0(sp)
10009a24:	dec00204 	addi	sp,sp,8
10009a28:	f800283a 	ret
10009a2c:	80c0030b 	ldhu	r3,12(r16)
10009a30:	18fbffcc 	andi	r3,r3,61439
10009a34:	80c0030d 	sth	r3,12(r16)
10009a38:	dfc00117 	ldw	ra,4(sp)
10009a3c:	dc000017 	ldw	r16,0(sp)
10009a40:	dec00204 	addi	sp,sp,8
10009a44:	f800283a 	ret

10009a48 <__sclose>:
10009a48:	2940038f 	ldh	r5,14(r5)
10009a4c:	000b0ac1 	jmpi	1000b0ac <_close_r>

10009a50 <strcmp>:
10009a50:	2144b03a 	or	r2,r4,r5
10009a54:	108000cc 	andi	r2,r2,3
10009a58:	1000171e 	bne	r2,zero,10009ab8 <strcmp+0x68>
10009a5c:	20800017 	ldw	r2,0(r4)
10009a60:	28c00017 	ldw	r3,0(r5)
10009a64:	10c0141e 	bne	r2,r3,10009ab8 <strcmp+0x68>
10009a68:	027fbff4 	movhi	r9,65279
10009a6c:	4a7fbfc4 	addi	r9,r9,-257
10009a70:	0086303a 	nor	r3,zero,r2
10009a74:	02202074 	movhi	r8,32897
10009a78:	1245883a 	add	r2,r2,r9
10009a7c:	42202004 	addi	r8,r8,-32640
10009a80:	10c4703a 	and	r2,r2,r3
10009a84:	1204703a 	and	r2,r2,r8
10009a88:	10000226 	beq	r2,zero,10009a94 <strcmp+0x44>
10009a8c:	00001706 	br	10009aec <strcmp+0x9c>
10009a90:	1000161e 	bne	r2,zero,10009aec <strcmp+0x9c>
10009a94:	21000104 	addi	r4,r4,4
10009a98:	20c00017 	ldw	r3,0(r4)
10009a9c:	29400104 	addi	r5,r5,4
10009aa0:	29800017 	ldw	r6,0(r5)
10009aa4:	1a4f883a 	add	r7,r3,r9
10009aa8:	00c4303a 	nor	r2,zero,r3
10009aac:	3884703a 	and	r2,r7,r2
10009ab0:	1204703a 	and	r2,r2,r8
10009ab4:	19bff626 	beq	r3,r6,10009a90 <__alt_data_end+0xf8009a90>
10009ab8:	20800007 	ldb	r2,0(r4)
10009abc:	1000051e 	bne	r2,zero,10009ad4 <strcmp+0x84>
10009ac0:	00000606 	br	10009adc <strcmp+0x8c>
10009ac4:	21000044 	addi	r4,r4,1
10009ac8:	20800007 	ldb	r2,0(r4)
10009acc:	29400044 	addi	r5,r5,1
10009ad0:	10000226 	beq	r2,zero,10009adc <strcmp+0x8c>
10009ad4:	28c00007 	ldb	r3,0(r5)
10009ad8:	10fffa26 	beq	r2,r3,10009ac4 <__alt_data_end+0xf8009ac4>
10009adc:	20800003 	ldbu	r2,0(r4)
10009ae0:	28c00003 	ldbu	r3,0(r5)
10009ae4:	10c5c83a 	sub	r2,r2,r3
10009ae8:	f800283a 	ret
10009aec:	0005883a 	mov	r2,zero
10009af0:	f800283a 	ret

10009af4 <__sprint_r.part.0>:
10009af4:	28801917 	ldw	r2,100(r5)
10009af8:	defff604 	addi	sp,sp,-40
10009afc:	dd400515 	stw	r21,20(sp)
10009b00:	dcc00315 	stw	r19,12(sp)
10009b04:	dfc00915 	stw	ra,36(sp)
10009b08:	df000815 	stw	fp,32(sp)
10009b0c:	ddc00715 	stw	r23,28(sp)
10009b10:	dd800615 	stw	r22,24(sp)
10009b14:	dd000415 	stw	r20,16(sp)
10009b18:	dc800215 	stw	r18,8(sp)
10009b1c:	dc400115 	stw	r17,4(sp)
10009b20:	dc000015 	stw	r16,0(sp)
10009b24:	1088000c 	andi	r2,r2,8192
10009b28:	2827883a 	mov	r19,r5
10009b2c:	302b883a 	mov	r21,r6
10009b30:	10002d26 	beq	r2,zero,10009be8 <__sprint_r.part.0+0xf4>
10009b34:	30800217 	ldw	r2,8(r6)
10009b38:	35800017 	ldw	r22,0(r6)
10009b3c:	10002826 	beq	r2,zero,10009be0 <__sprint_r.part.0+0xec>
10009b40:	2029883a 	mov	r20,r4
10009b44:	b5c00104 	addi	r23,r22,4
10009b48:	04bfffc4 	movi	r18,-1
10009b4c:	bc400017 	ldw	r17,0(r23)
10009b50:	b4000017 	ldw	r16,0(r22)
10009b54:	0039883a 	mov	fp,zero
10009b58:	8822d0ba 	srli	r17,r17,2
10009b5c:	04400316 	blt	zero,r17,10009b6c <__sprint_r.part.0+0x78>
10009b60:	00001706 	br	10009bc0 <__sprint_r.part.0+0xcc>
10009b64:	84000104 	addi	r16,r16,4
10009b68:	8f001526 	beq	r17,fp,10009bc0 <__sprint_r.part.0+0xcc>
10009b6c:	81400017 	ldw	r5,0(r16)
10009b70:	a009883a 	mov	r4,r20
10009b74:	980d883a 	mov	r6,r19
10009b78:	000b2ec0 	call	1000b2ec <_fputwc_r>
10009b7c:	e7000044 	addi	fp,fp,1
10009b80:	14bff81e 	bne	r2,r18,10009b64 <__alt_data_end+0xf8009b64>
10009b84:	9005883a 	mov	r2,r18
10009b88:	a8000215 	stw	zero,8(r21)
10009b8c:	a8000115 	stw	zero,4(r21)
10009b90:	dfc00917 	ldw	ra,36(sp)
10009b94:	df000817 	ldw	fp,32(sp)
10009b98:	ddc00717 	ldw	r23,28(sp)
10009b9c:	dd800617 	ldw	r22,24(sp)
10009ba0:	dd400517 	ldw	r21,20(sp)
10009ba4:	dd000417 	ldw	r20,16(sp)
10009ba8:	dcc00317 	ldw	r19,12(sp)
10009bac:	dc800217 	ldw	r18,8(sp)
10009bb0:	dc400117 	ldw	r17,4(sp)
10009bb4:	dc000017 	ldw	r16,0(sp)
10009bb8:	dec00a04 	addi	sp,sp,40
10009bbc:	f800283a 	ret
10009bc0:	a8c00217 	ldw	r3,8(r21)
10009bc4:	8c63883a 	add	r17,r17,r17
10009bc8:	8c63883a 	add	r17,r17,r17
10009bcc:	1c45c83a 	sub	r2,r3,r17
10009bd0:	a8800215 	stw	r2,8(r21)
10009bd4:	b5800204 	addi	r22,r22,8
10009bd8:	bdc00204 	addi	r23,r23,8
10009bdc:	103fdb1e 	bne	r2,zero,10009b4c <__alt_data_end+0xf8009b4c>
10009be0:	0005883a 	mov	r2,zero
10009be4:	003fe806 	br	10009b88 <__alt_data_end+0xf8009b88>
10009be8:	0006d700 	call	10006d70 <__sfvwrite_r>
10009bec:	003fe606 	br	10009b88 <__alt_data_end+0xf8009b88>

10009bf0 <__sprint_r>:
10009bf0:	30c00217 	ldw	r3,8(r6)
10009bf4:	18000126 	beq	r3,zero,10009bfc <__sprint_r+0xc>
10009bf8:	0009af41 	jmpi	10009af4 <__sprint_r.part.0>
10009bfc:	30000115 	stw	zero,4(r6)
10009c00:	0005883a 	mov	r2,zero
10009c04:	f800283a 	ret

10009c08 <___vfiprintf_internal_r>:
10009c08:	defeca04 	addi	sp,sp,-1240
10009c0c:	dcc12f15 	stw	r19,1212(sp)
10009c10:	dfc13515 	stw	ra,1236(sp)
10009c14:	df013415 	stw	fp,1232(sp)
10009c18:	ddc13315 	stw	r23,1228(sp)
10009c1c:	dd813215 	stw	r22,1224(sp)
10009c20:	dd413115 	stw	r21,1220(sp)
10009c24:	dd013015 	stw	r20,1216(sp)
10009c28:	dc812e15 	stw	r18,1208(sp)
10009c2c:	dc412d15 	stw	r17,1204(sp)
10009c30:	dc012c15 	stw	r16,1200(sp)
10009c34:	d9012115 	stw	r4,1156(sp)
10009c38:	d9412015 	stw	r5,1152(sp)
10009c3c:	d9c12315 	stw	r7,1164(sp)
10009c40:	3027883a 	mov	r19,r6
10009c44:	20000226 	beq	r4,zero,10009c50 <___vfiprintf_internal_r+0x48>
10009c48:	20800e17 	ldw	r2,56(r4)
10009c4c:	1000f726 	beq	r2,zero,1000a02c <___vfiprintf_internal_r+0x424>
10009c50:	d8812017 	ldw	r2,1152(sp)
10009c54:	10c0030b 	ldhu	r3,12(r2)
10009c58:	1908000c 	andi	r4,r3,8192
10009c5c:	1805883a 	mov	r2,r3
10009c60:	2000081e 	bne	r4,zero,10009c84 <___vfiprintf_internal_r+0x7c>
10009c64:	d9412017 	ldw	r5,1152(sp)
10009c68:	18880014 	ori	r2,r3,8192
10009c6c:	00f7ffc4 	movi	r3,-8193
10009c70:	29001917 	ldw	r4,100(r5)
10009c74:	2880030d 	sth	r2,12(r5)
10009c78:	20c8703a 	and	r4,r4,r3
10009c7c:	29001915 	stw	r4,100(r5)
10009c80:	1007883a 	mov	r3,r2
10009c84:	1100020c 	andi	r4,r2,8
10009c88:	2000a726 	beq	r4,zero,10009f28 <___vfiprintf_internal_r+0x320>
10009c8c:	d9412017 	ldw	r5,1152(sp)
10009c90:	29000417 	ldw	r4,16(r5)
10009c94:	2000a426 	beq	r4,zero,10009f28 <___vfiprintf_internal_r+0x320>
10009c98:	1080068c 	andi	r2,r2,26
10009c9c:	01000284 	movi	r4,10
10009ca0:	1100ab26 	beq	r2,r4,10009f50 <___vfiprintf_internal_r+0x348>
10009ca4:	d9010a04 	addi	r4,sp,1064
10009ca8:	d94109c4 	addi	r5,sp,1063
10009cac:	07040074 	movhi	fp,4097
10009cb0:	04440074 	movhi	r17,4097
10009cb4:	2145c83a 	sub	r2,r4,r5
10009cb8:	e7087a04 	addi	fp,fp,8680
10009cbc:	8c487604 	addi	r17,r17,8664
10009cc0:	d9011e15 	stw	r4,1144(sp)
10009cc4:	d9411f15 	stw	r5,1148(sp)
10009cc8:	dec11a15 	stw	sp,1128(sp)
10009ccc:	d8011c15 	stw	zero,1136(sp)
10009cd0:	d8011b15 	stw	zero,1132(sp)
10009cd4:	d8012715 	stw	zero,1180(sp)
10009cd8:	d8012515 	stw	zero,1172(sp)
10009cdc:	d811883a 	mov	r8,sp
10009ce0:	d8812815 	stw	r2,1184(sp)
10009ce4:	982f883a 	mov	r23,r19
10009ce8:	b8800007 	ldb	r2,0(r23)
10009cec:	1003b026 	beq	r2,zero,1000abb0 <___vfiprintf_internal_r+0xfa8>
10009cf0:	01000944 	movi	r4,37
10009cf4:	1103ae26 	beq	r2,r4,1000abb0 <___vfiprintf_internal_r+0xfa8>
10009cf8:	b805883a 	mov	r2,r23
10009cfc:	00000106 	br	10009d04 <___vfiprintf_internal_r+0xfc>
10009d00:	19000326 	beq	r3,r4,10009d10 <___vfiprintf_internal_r+0x108>
10009d04:	10800044 	addi	r2,r2,1
10009d08:	10c00007 	ldb	r3,0(r2)
10009d0c:	183ffc1e 	bne	r3,zero,10009d00 <__alt_data_end+0xf8009d00>
10009d10:	15e1c83a 	sub	r16,r2,r23
10009d14:	1029883a 	mov	r20,r2
10009d18:	80001026 	beq	r16,zero,10009d5c <___vfiprintf_internal_r+0x154>
10009d1c:	d8c11c17 	ldw	r3,1136(sp)
10009d20:	d8811b17 	ldw	r2,1132(sp)
10009d24:	45c00015 	stw	r23,0(r8)
10009d28:	80c7883a 	add	r3,r16,r3
10009d2c:	10800044 	addi	r2,r2,1
10009d30:	44000115 	stw	r16,4(r8)
10009d34:	d8c11c15 	stw	r3,1136(sp)
10009d38:	d8811b15 	stw	r2,1132(sp)
10009d3c:	010001c4 	movi	r4,7
10009d40:	2080740e 	bge	r4,r2,10009f14 <___vfiprintf_internal_r+0x30c>
10009d44:	1803a71e 	bne	r3,zero,1000abe4 <___vfiprintf_internal_r+0xfdc>
10009d48:	d8c12517 	ldw	r3,1172(sp)
10009d4c:	d8011b15 	stw	zero,1132(sp)
10009d50:	d811883a 	mov	r8,sp
10009d54:	1c07883a 	add	r3,r3,r16
10009d58:	d8c12515 	stw	r3,1172(sp)
10009d5c:	a0800007 	ldb	r2,0(r20)
10009d60:	1002bf26 	beq	r2,zero,1000a860 <___vfiprintf_internal_r+0xc58>
10009d64:	a5c00044 	addi	r23,r20,1
10009d68:	a1800047 	ldb	r6,1(r20)
10009d6c:	d8011d85 	stb	zero,1142(sp)
10009d70:	d8012205 	stb	zero,1160(sp)
10009d74:	043fffc4 	movi	r16,-1
10009d78:	d8012415 	stw	zero,1168(sp)
10009d7c:	0025883a 	mov	r18,zero
10009d80:	05001604 	movi	r20,88
10009d84:	05400244 	movi	r21,9
10009d88:	4027883a 	mov	r19,r8
10009d8c:	bdc00044 	addi	r23,r23,1
10009d90:	30bff804 	addi	r2,r6,-32
10009d94:	a0825636 	bltu	r20,r2,1000a6f0 <___vfiprintf_internal_r+0xae8>
10009d98:	100490ba 	slli	r2,r2,2
10009d9c:	01040074 	movhi	r4,4097
10009da0:	21276c04 	addi	r4,r4,-25168
10009da4:	1105883a 	add	r2,r2,r4
10009da8:	10800017 	ldw	r2,0(r2)
10009dac:	1000683a 	jmp	r2
10009db0:	1000a680 	call	11000a68 <_gp+0xfe4c90>
10009db4:	1000a6f0 	cmpltui	zero,r2,667
10009db8:	1000a6f0 	cmpltui	zero,r2,667
10009dbc:	1000a6e4 	muli	zero,r2,667
10009dc0:	1000a6f0 	cmpltui	zero,r2,667
10009dc4:	1000a6f0 	cmpltui	zero,r2,667
10009dc8:	1000a6f0 	cmpltui	zero,r2,667
10009dcc:	1000a6f0 	cmpltui	zero,r2,667
10009dd0:	1000a6f0 	cmpltui	zero,r2,667
10009dd4:	1000a6f0 	cmpltui	zero,r2,667
10009dd8:	1000a470 	cmpltui	zero,r2,657
10009ddc:	1000a698 	cmpnei	zero,r2,666
10009de0:	1000a6f0 	cmpltui	zero,r2,667
10009de4:	1000a044 	addi	zero,r2,641
10009de8:	1000a494 	ori	zero,r2,658
10009dec:	1000a6f0 	cmpltui	zero,r2,667
10009df0:	1000a050 	cmplti	zero,r2,641
10009df4:	1000a05c 	xori	zero,r2,641
10009df8:	1000a05c 	xori	zero,r2,641
10009dfc:	1000a05c 	xori	zero,r2,641
10009e00:	1000a05c 	xori	zero,r2,641
10009e04:	1000a05c 	xori	zero,r2,641
10009e08:	1000a05c 	xori	zero,r2,641
10009e0c:	1000a05c 	xori	zero,r2,641
10009e10:	1000a05c 	xori	zero,r2,641
10009e14:	1000a05c 	xori	zero,r2,641
10009e18:	1000a6f0 	cmpltui	zero,r2,667
10009e1c:	1000a6f0 	cmpltui	zero,r2,667
10009e20:	1000a6f0 	cmpltui	zero,r2,667
10009e24:	1000a6f0 	cmpltui	zero,r2,667
10009e28:	1000a6f0 	cmpltui	zero,r2,667
10009e2c:	1000a6f0 	cmpltui	zero,r2,667
10009e30:	1000a6f0 	cmpltui	zero,r2,667
10009e34:	1000a6f0 	cmpltui	zero,r2,667
10009e38:	1000a6f0 	cmpltui	zero,r2,667
10009e3c:	1000a6f0 	cmpltui	zero,r2,667
10009e40:	1000a09c 	xori	zero,r2,642
10009e44:	1000a6f0 	cmpltui	zero,r2,667
10009e48:	1000a6f0 	cmpltui	zero,r2,667
10009e4c:	1000a6f0 	cmpltui	zero,r2,667
10009e50:	1000a6f0 	cmpltui	zero,r2,667
10009e54:	1000a6f0 	cmpltui	zero,r2,667
10009e58:	1000a6f0 	cmpltui	zero,r2,667
10009e5c:	1000a6f0 	cmpltui	zero,r2,667
10009e60:	1000a6f0 	cmpltui	zero,r2,667
10009e64:	1000a6f0 	cmpltui	zero,r2,667
10009e68:	1000a6f0 	cmpltui	zero,r2,667
10009e6c:	1000a38c 	andi	zero,r2,654
10009e70:	1000a6f0 	cmpltui	zero,r2,667
10009e74:	1000a6f0 	cmpltui	zero,r2,667
10009e78:	1000a6f0 	cmpltui	zero,r2,667
10009e7c:	1000a6f0 	cmpltui	zero,r2,667
10009e80:	1000a6f0 	cmpltui	zero,r2,667
10009e84:	1000a3cc 	andi	zero,r2,655
10009e88:	1000a6f0 	cmpltui	zero,r2,667
10009e8c:	1000a6f0 	cmpltui	zero,r2,667
10009e90:	1000a410 	cmplti	zero,r2,656
10009e94:	1000a6f0 	cmpltui	zero,r2,667
10009e98:	1000a6f0 	cmpltui	zero,r2,667
10009e9c:	1000a6f0 	cmpltui	zero,r2,667
10009ea0:	1000a6f0 	cmpltui	zero,r2,667
10009ea4:	1000a6f0 	cmpltui	zero,r2,667
10009ea8:	1000a6f0 	cmpltui	zero,r2,667
10009eac:	1000a6f0 	cmpltui	zero,r2,667
10009eb0:	1000a6f0 	cmpltui	zero,r2,667
10009eb4:	1000a6f0 	cmpltui	zero,r2,667
10009eb8:	1000a6f0 	cmpltui	zero,r2,667
10009ebc:	1000a358 	cmpnei	zero,r2,653
10009ec0:	1000a6a8 	cmpgeui	zero,r2,666
10009ec4:	1000a6f0 	cmpltui	zero,r2,667
10009ec8:	1000a6f0 	cmpltui	zero,r2,667
10009ecc:	1000a6f0 	cmpltui	zero,r2,667
10009ed0:	1000a4e4 	muli	zero,r2,659
10009ed4:	1000a6a8 	cmpgeui	zero,r2,666
10009ed8:	1000a6f0 	cmpltui	zero,r2,667
10009edc:	1000a6f0 	cmpltui	zero,r2,667
10009ee0:	1000a3fc 	xorhi	zero,r2,655
10009ee4:	1000a6f0 	cmpltui	zero,r2,667
10009ee8:	1000a648 	cmpgei	zero,r2,665
10009eec:	1000a5d0 	cmplti	zero,r2,663
10009ef0:	1000a604 	addi	zero,r2,664
10009ef4:	1000a4f0 	cmpltui	zero,r2,659
10009ef8:	1000a6f0 	cmpltui	zero,r2,667
10009efc:	1000a4fc 	xorhi	zero,r2,659
10009f00:	1000a6f0 	cmpltui	zero,r2,667
10009f04:	1000a558 	cmpnei	zero,r2,661
10009f08:	1000a6f0 	cmpltui	zero,r2,667
10009f0c:	1000a6f0 	cmpltui	zero,r2,667
10009f10:	1000a58c 	andi	zero,r2,662
10009f14:	42000204 	addi	r8,r8,8
10009f18:	d8c12517 	ldw	r3,1172(sp)
10009f1c:	1c07883a 	add	r3,r3,r16
10009f20:	d8c12515 	stw	r3,1172(sp)
10009f24:	003f8d06 	br	10009d5c <__alt_data_end+0xf8009d5c>
10009f28:	d9012117 	ldw	r4,1156(sp)
10009f2c:	d9412017 	ldw	r5,1152(sp)
10009f30:	00048d00 	call	100048d0 <__swsetup_r>
10009f34:	1000301e 	bne	r2,zero,10009ff8 <___vfiprintf_internal_r+0x3f0>
10009f38:	d8812017 	ldw	r2,1152(sp)
10009f3c:	01000284 	movi	r4,10
10009f40:	10c0030b 	ldhu	r3,12(r2)
10009f44:	1805883a 	mov	r2,r3
10009f48:	1080068c 	andi	r2,r2,26
10009f4c:	113f551e 	bne	r2,r4,10009ca4 <__alt_data_end+0xf8009ca4>
10009f50:	d9012017 	ldw	r4,1152(sp)
10009f54:	2080038b 	ldhu	r2,14(r4)
10009f58:	113fffcc 	andi	r4,r2,65535
10009f5c:	2120001c 	xori	r4,r4,32768
10009f60:	21200004 	addi	r4,r4,-32768
10009f64:	203f4f16 	blt	r4,zero,10009ca4 <__alt_data_end+0xf8009ca4>
10009f68:	d9412017 	ldw	r5,1152(sp)
10009f6c:	d9012117 	ldw	r4,1156(sp)
10009f70:	d9c12317 	ldw	r7,1164(sp)
10009f74:	2b001917 	ldw	r12,100(r5)
10009f78:	2ac00717 	ldw	r11,28(r5)
10009f7c:	2a800917 	ldw	r10,36(r5)
10009f80:	02010004 	movi	r8,1024
10009f84:	18ffff4c 	andi	r3,r3,65533
10009f88:	da0b883a 	add	r5,sp,r8
10009f8c:	980d883a 	mov	r6,r19
10009f90:	d8c1030d 	sth	r3,1036(sp)
10009f94:	db011915 	stw	r12,1124(sp)
10009f98:	d881038d 	sth	r2,1038(sp)
10009f9c:	dac10715 	stw	r11,1052(sp)
10009fa0:	da810915 	stw	r10,1060(sp)
10009fa4:	dec10015 	stw	sp,1024(sp)
10009fa8:	dec10415 	stw	sp,1040(sp)
10009fac:	da010215 	stw	r8,1032(sp)
10009fb0:	da010515 	stw	r8,1044(sp)
10009fb4:	d8010615 	stw	zero,1048(sp)
10009fb8:	0009c080 	call	10009c08 <___vfiprintf_internal_r>
10009fbc:	1021883a 	mov	r16,r2
10009fc0:	10000416 	blt	r2,zero,10009fd4 <___vfiprintf_internal_r+0x3cc>
10009fc4:	d9012117 	ldw	r4,1156(sp)
10009fc8:	d9410004 	addi	r5,sp,1024
10009fcc:	00063500 	call	10006350 <_fflush_r>
10009fd0:	10040f1e 	bne	r2,zero,1000b010 <___vfiprintf_internal_r+0x1408>
10009fd4:	d881030b 	ldhu	r2,1036(sp)
10009fd8:	1080100c 	andi	r2,r2,64
10009fdc:	10000426 	beq	r2,zero,10009ff0 <___vfiprintf_internal_r+0x3e8>
10009fe0:	d8c12017 	ldw	r3,1152(sp)
10009fe4:	1880030b 	ldhu	r2,12(r3)
10009fe8:	10801014 	ori	r2,r2,64
10009fec:	1880030d 	sth	r2,12(r3)
10009ff0:	8005883a 	mov	r2,r16
10009ff4:	00000106 	br	10009ffc <___vfiprintf_internal_r+0x3f4>
10009ff8:	00bfffc4 	movi	r2,-1
10009ffc:	dfc13517 	ldw	ra,1236(sp)
1000a000:	df013417 	ldw	fp,1232(sp)
1000a004:	ddc13317 	ldw	r23,1228(sp)
1000a008:	dd813217 	ldw	r22,1224(sp)
1000a00c:	dd413117 	ldw	r21,1220(sp)
1000a010:	dd013017 	ldw	r20,1216(sp)
1000a014:	dcc12f17 	ldw	r19,1212(sp)
1000a018:	dc812e17 	ldw	r18,1208(sp)
1000a01c:	dc412d17 	ldw	r17,1204(sp)
1000a020:	dc012c17 	ldw	r16,1200(sp)
1000a024:	dec13604 	addi	sp,sp,1240
1000a028:	f800283a 	ret
1000a02c:	000690c0 	call	1000690c <__sinit>
1000a030:	003f0706 	br	10009c50 <__alt_data_end+0xf8009c50>
1000a034:	d8c12417 	ldw	r3,1168(sp)
1000a038:	d8812315 	stw	r2,1164(sp)
1000a03c:	00c7c83a 	sub	r3,zero,r3
1000a040:	d8c12415 	stw	r3,1168(sp)
1000a044:	94800114 	ori	r18,r18,4
1000a048:	b9800007 	ldb	r6,0(r23)
1000a04c:	003f4f06 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000a050:	94802014 	ori	r18,r18,128
1000a054:	b9800007 	ldb	r6,0(r23)
1000a058:	003f4c06 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000a05c:	dc012615 	stw	r16,1176(sp)
1000a060:	d8012415 	stw	zero,1168(sp)
1000a064:	35bff404 	addi	r22,r6,-48
1000a068:	0009883a 	mov	r4,zero
1000a06c:	b821883a 	mov	r16,r23
1000a070:	01400284 	movi	r5,10
1000a074:	000c8300 	call	1000c830 <__mulsi3>
1000a078:	81800007 	ldb	r6,0(r16)
1000a07c:	1589883a 	add	r4,r2,r22
1000a080:	bdc00044 	addi	r23,r23,1
1000a084:	35bff404 	addi	r22,r6,-48
1000a088:	b821883a 	mov	r16,r23
1000a08c:	adbff82e 	bgeu	r21,r22,1000a070 <__alt_data_end+0xf800a070>
1000a090:	d9012415 	stw	r4,1168(sp)
1000a094:	dc012617 	ldw	r16,1176(sp)
1000a098:	003f3d06 	br	10009d90 <__alt_data_end+0xf8009d90>
1000a09c:	d8c12203 	ldbu	r3,1160(sp)
1000a0a0:	94800414 	ori	r18,r18,16
1000a0a4:	9080080c 	andi	r2,r18,32
1000a0a8:	d8c11d85 	stb	r3,1142(sp)
1000a0ac:	9811883a 	mov	r8,r19
1000a0b0:	d8c12317 	ldw	r3,1164(sp)
1000a0b4:	10018226 	beq	r2,zero,1000a6c0 <___vfiprintf_internal_r+0xab8>
1000a0b8:	d9012317 	ldw	r4,1164(sp)
1000a0bc:	18800117 	ldw	r2,4(r3)
1000a0c0:	1cc00017 	ldw	r19,0(r3)
1000a0c4:	21000204 	addi	r4,r4,8
1000a0c8:	d9012315 	stw	r4,1164(sp)
1000a0cc:	102b883a 	mov	r21,r2
1000a0d0:	10030016 	blt	r2,zero,1000acd4 <___vfiprintf_internal_r+0x10cc>
1000a0d4:	dd811d83 	ldbu	r22,1142(sp)
1000a0d8:	8029883a 	mov	r20,r16
1000a0dc:	00800044 	movi	r2,1
1000a0e0:	9d46b03a 	or	r3,r19,r21
1000a0e4:	80000216 	blt	r16,zero,1000a0f0 <___vfiprintf_internal_r+0x4e8>
1000a0e8:	013fdfc4 	movi	r4,-129
1000a0ec:	9124703a 	and	r18,r18,r4
1000a0f0:	1801b41e 	bne	r3,zero,1000a7c4 <___vfiprintf_internal_r+0xbbc>
1000a0f4:	80028126 	beq	r16,zero,1000aafc <___vfiprintf_internal_r+0xef4>
1000a0f8:	10803fcc 	andi	r2,r2,255
1000a0fc:	00c00044 	movi	r3,1
1000a100:	10c1d126 	beq	r2,r3,1000a848 <___vfiprintf_internal_r+0xc40>
1000a104:	00c00084 	movi	r3,2
1000a108:	10c28626 	beq	r2,r3,1000ab24 <___vfiprintf_internal_r+0xf1c>
1000a10c:	d8c10a04 	addi	r3,sp,1064
1000a110:	9808d0fa 	srli	r4,r19,3
1000a114:	a80a977a 	slli	r5,r21,29
1000a118:	a82ad0fa 	srli	r21,r21,3
1000a11c:	9cc001cc 	andi	r19,r19,7
1000a120:	98800c04 	addi	r2,r19,48
1000a124:	18ffffc4 	addi	r3,r3,-1
1000a128:	2926b03a 	or	r19,r5,r4
1000a12c:	18800005 	stb	r2,0(r3)
1000a130:	9d48b03a 	or	r4,r19,r21
1000a134:	203ff61e 	bne	r4,zero,1000a110 <__alt_data_end+0xf800a110>
1000a138:	9100004c 	andi	r4,r18,1
1000a13c:	d8c12215 	stw	r3,1160(sp)
1000a140:	2002b31e 	bne	r4,zero,1000ac10 <___vfiprintf_internal_r+0x1008>
1000a144:	d9411e17 	ldw	r5,1144(sp)
1000a148:	28e9c83a 	sub	r20,r5,r3
1000a14c:	a02b883a 	mov	r21,r20
1000a150:	a400010e 	bge	r20,r16,1000a158 <___vfiprintf_internal_r+0x550>
1000a154:	802b883a 	mov	r21,r16
1000a158:	b5803fcc 	andi	r22,r22,255
1000a15c:	b580201c 	xori	r22,r22,128
1000a160:	b5bfe004 	addi	r22,r22,-128
1000a164:	b0000126 	beq	r22,zero,1000a16c <___vfiprintf_internal_r+0x564>
1000a168:	ad400044 	addi	r21,r21,1
1000a16c:	9280008c 	andi	r10,r18,2
1000a170:	50000126 	beq	r10,zero,1000a178 <___vfiprintf_internal_r+0x570>
1000a174:	ad400084 	addi	r21,r21,2
1000a178:	9580210c 	andi	r22,r18,132
1000a17c:	b001751e 	bne	r22,zero,1000a754 <___vfiprintf_internal_r+0xb4c>
1000a180:	d9012417 	ldw	r4,1168(sp)
1000a184:	2567c83a 	sub	r19,r4,r21
1000a188:	04c1720e 	bge	zero,r19,1000a754 <___vfiprintf_internal_r+0xb4c>
1000a18c:	01c00404 	movi	r7,16
1000a190:	d8c11c17 	ldw	r3,1136(sp)
1000a194:	3cc36b0e 	bge	r7,r19,1000af44 <___vfiprintf_internal_r+0x133c>
1000a198:	00840074 	movhi	r2,4097
1000a19c:	10887a04 	addi	r2,r2,8680
1000a1a0:	dc012915 	stw	r16,1188(sp)
1000a1a4:	d9011b17 	ldw	r4,1132(sp)
1000a1a8:	9821883a 	mov	r16,r19
1000a1ac:	d8812615 	stw	r2,1176(sp)
1000a1b0:	030001c4 	movi	r12,7
1000a1b4:	5027883a 	mov	r19,r10
1000a1b8:	00000506 	br	1000a1d0 <___vfiprintf_internal_r+0x5c8>
1000a1bc:	21400084 	addi	r5,r4,2
1000a1c0:	42000204 	addi	r8,r8,8
1000a1c4:	1009883a 	mov	r4,r2
1000a1c8:	843ffc04 	addi	r16,r16,-16
1000a1cc:	3c000d0e 	bge	r7,r16,1000a204 <___vfiprintf_internal_r+0x5fc>
1000a1d0:	18c00404 	addi	r3,r3,16
1000a1d4:	20800044 	addi	r2,r4,1
1000a1d8:	47000015 	stw	fp,0(r8)
1000a1dc:	41c00115 	stw	r7,4(r8)
1000a1e0:	d8c11c15 	stw	r3,1136(sp)
1000a1e4:	d8811b15 	stw	r2,1132(sp)
1000a1e8:	60bff40e 	bge	r12,r2,1000a1bc <__alt_data_end+0xf800a1bc>
1000a1ec:	18014b1e 	bne	r3,zero,1000a71c <___vfiprintf_internal_r+0xb14>
1000a1f0:	843ffc04 	addi	r16,r16,-16
1000a1f4:	0009883a 	mov	r4,zero
1000a1f8:	01400044 	movi	r5,1
1000a1fc:	d811883a 	mov	r8,sp
1000a200:	3c3ff316 	blt	r7,r16,1000a1d0 <__alt_data_end+0xf800a1d0>
1000a204:	9815883a 	mov	r10,r19
1000a208:	8027883a 	mov	r19,r16
1000a20c:	dc012917 	ldw	r16,1188(sp)
1000a210:	d9012617 	ldw	r4,1176(sp)
1000a214:	98c7883a 	add	r3,r19,r3
1000a218:	44c00115 	stw	r19,4(r8)
1000a21c:	41000015 	stw	r4,0(r8)
1000a220:	d8c11c15 	stw	r3,1136(sp)
1000a224:	d9411b15 	stw	r5,1132(sp)
1000a228:	008001c4 	movi	r2,7
1000a22c:	11425116 	blt	r2,r5,1000ab74 <___vfiprintf_internal_r+0xf6c>
1000a230:	d9011d87 	ldb	r4,1142(sp)
1000a234:	42000204 	addi	r8,r8,8
1000a238:	28800044 	addi	r2,r5,1
1000a23c:	20014a1e 	bne	r4,zero,1000a768 <___vfiprintf_internal_r+0xb60>
1000a240:	50000c26 	beq	r10,zero,1000a274 <___vfiprintf_internal_r+0x66c>
1000a244:	d9011d04 	addi	r4,sp,1140
1000a248:	18c00084 	addi	r3,r3,2
1000a24c:	41000015 	stw	r4,0(r8)
1000a250:	01000084 	movi	r4,2
1000a254:	41000115 	stw	r4,4(r8)
1000a258:	d8c11c15 	stw	r3,1136(sp)
1000a25c:	d8811b15 	stw	r2,1132(sp)
1000a260:	010001c4 	movi	r4,7
1000a264:	20822016 	blt	r4,r2,1000aae8 <___vfiprintf_internal_r+0xee0>
1000a268:	100b883a 	mov	r5,r2
1000a26c:	42000204 	addi	r8,r8,8
1000a270:	10800044 	addi	r2,r2,1
1000a274:	01002004 	movi	r4,128
1000a278:	b101de26 	beq	r22,r4,1000a9f4 <___vfiprintf_internal_r+0xdec>
1000a27c:	8521c83a 	sub	r16,r16,r20
1000a280:	0400230e 	bge	zero,r16,1000a310 <___vfiprintf_internal_r+0x708>
1000a284:	04c00404 	movi	r19,16
1000a288:	9c030d0e 	bge	r19,r16,1000aec0 <___vfiprintf_internal_r+0x12b8>
1000a28c:	00840074 	movhi	r2,4097
1000a290:	10887604 	addi	r2,r2,8664
1000a294:	d8812615 	stw	r2,1176(sp)
1000a298:	058001c4 	movi	r22,7
1000a29c:	00000506 	br	1000a2b4 <___vfiprintf_internal_r+0x6ac>
1000a2a0:	28800084 	addi	r2,r5,2
1000a2a4:	42000204 	addi	r8,r8,8
1000a2a8:	200b883a 	mov	r5,r4
1000a2ac:	843ffc04 	addi	r16,r16,-16
1000a2b0:	9c000d0e 	bge	r19,r16,1000a2e8 <___vfiprintf_internal_r+0x6e0>
1000a2b4:	18c00404 	addi	r3,r3,16
1000a2b8:	29000044 	addi	r4,r5,1
1000a2bc:	44400015 	stw	r17,0(r8)
1000a2c0:	44c00115 	stw	r19,4(r8)
1000a2c4:	d8c11c15 	stw	r3,1136(sp)
1000a2c8:	d9011b15 	stw	r4,1132(sp)
1000a2cc:	b13ff40e 	bge	r22,r4,1000a2a0 <__alt_data_end+0xf800a2a0>
1000a2d0:	1801321e 	bne	r3,zero,1000a79c <___vfiprintf_internal_r+0xb94>
1000a2d4:	843ffc04 	addi	r16,r16,-16
1000a2d8:	000b883a 	mov	r5,zero
1000a2dc:	00800044 	movi	r2,1
1000a2e0:	d811883a 	mov	r8,sp
1000a2e4:	9c3ff316 	blt	r19,r16,1000a2b4 <__alt_data_end+0xf800a2b4>
1000a2e8:	d9012617 	ldw	r4,1176(sp)
1000a2ec:	1c07883a 	add	r3,r3,r16
1000a2f0:	44000115 	stw	r16,4(r8)
1000a2f4:	41000015 	stw	r4,0(r8)
1000a2f8:	d8c11c15 	stw	r3,1136(sp)
1000a2fc:	d8811b15 	stw	r2,1132(sp)
1000a300:	010001c4 	movi	r4,7
1000a304:	20816216 	blt	r4,r2,1000a890 <___vfiprintf_internal_r+0xc88>
1000a308:	42000204 	addi	r8,r8,8
1000a30c:	10800044 	addi	r2,r2,1
1000a310:	d9012217 	ldw	r4,1160(sp)
1000a314:	1d07883a 	add	r3,r3,r20
1000a318:	45000115 	stw	r20,4(r8)
1000a31c:	41000015 	stw	r4,0(r8)
1000a320:	d8c11c15 	stw	r3,1136(sp)
1000a324:	d8811b15 	stw	r2,1132(sp)
1000a328:	010001c4 	movi	r4,7
1000a32c:	2081610e 	bge	r4,r2,1000a8b4 <___vfiprintf_internal_r+0xcac>
1000a330:	1802211e 	bne	r3,zero,1000abb8 <___vfiprintf_internal_r+0xfb0>
1000a334:	d8011b15 	stw	zero,1132(sp)
1000a338:	9480010c 	andi	r18,r18,4
1000a33c:	9002171e 	bne	r18,zero,1000ab9c <___vfiprintf_internal_r+0xf94>
1000a340:	d9412417 	ldw	r5,1168(sp)
1000a344:	a9433716 	blt	r21,r5,1000b024 <___vfiprintf_internal_r+0x141c>
1000a348:	d8812517 	ldw	r2,1172(sp)
1000a34c:	1545883a 	add	r2,r2,r21
1000a350:	d8812515 	stw	r2,1172(sp)
1000a354:	00019a06 	br	1000a9c0 <___vfiprintf_internal_r+0xdb8>
1000a358:	d8c12317 	ldw	r3,1164(sp)
1000a35c:	05400044 	movi	r21,1
1000a360:	9811883a 	mov	r8,r19
1000a364:	18800017 	ldw	r2,0(r3)
1000a368:	18c00104 	addi	r3,r3,4
1000a36c:	d8c12315 	stw	r3,1164(sp)
1000a370:	d8c10004 	addi	r3,sp,1024
1000a374:	d8011d85 	stb	zero,1142(sp)
1000a378:	d8810005 	stb	r2,1024(sp)
1000a37c:	a829883a 	mov	r20,r21
1000a380:	d8c12215 	stw	r3,1160(sp)
1000a384:	0021883a 	mov	r16,zero
1000a388:	003f7806 	br	1000a16c <__alt_data_end+0xf800a16c>
1000a38c:	94800414 	ori	r18,r18,16
1000a390:	9080080c 	andi	r2,r18,32
1000a394:	9811883a 	mov	r8,r19
1000a398:	10009026 	beq	r2,zero,1000a5dc <___vfiprintf_internal_r+0x9d4>
1000a39c:	d8812317 	ldw	r2,1164(sp)
1000a3a0:	d8c12317 	ldw	r3,1164(sp)
1000a3a4:	14c00017 	ldw	r19,0(r2)
1000a3a8:	15400117 	ldw	r21,4(r2)
1000a3ac:	18c00204 	addi	r3,r3,8
1000a3b0:	d8c12315 	stw	r3,1164(sp)
1000a3b4:	0005883a 	mov	r2,zero
1000a3b8:	9d46b03a 	or	r3,r19,r21
1000a3bc:	d8011d85 	stb	zero,1142(sp)
1000a3c0:	8029883a 	mov	r20,r16
1000a3c4:	002d883a 	mov	r22,zero
1000a3c8:	003f4606 	br	1000a0e4 <__alt_data_end+0xf800a0e4>
1000a3cc:	94800414 	ori	r18,r18,16
1000a3d0:	9080080c 	andi	r2,r18,32
1000a3d4:	9811883a 	mov	r8,r19
1000a3d8:	10006226 	beq	r2,zero,1000a564 <___vfiprintf_internal_r+0x95c>
1000a3dc:	d9012317 	ldw	r4,1164(sp)
1000a3e0:	00800044 	movi	r2,1
1000a3e4:	24c00017 	ldw	r19,0(r4)
1000a3e8:	25400117 	ldw	r21,4(r4)
1000a3ec:	21000204 	addi	r4,r4,8
1000a3f0:	d9012315 	stw	r4,1164(sp)
1000a3f4:	9d46b03a 	or	r3,r19,r21
1000a3f8:	003ff006 	br	1000a3bc <__alt_data_end+0xf800a3bc>
1000a3fc:	b9800007 	ldb	r6,0(r23)
1000a400:	00801b04 	movi	r2,108
1000a404:	3082b226 	beq	r6,r2,1000aed0 <___vfiprintf_internal_r+0x12c8>
1000a408:	94800414 	ori	r18,r18,16
1000a40c:	003e5f06 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000a410:	d8c12203 	ldbu	r3,1160(sp)
1000a414:	01040074 	movhi	r4,4097
1000a418:	21081004 	addi	r4,r4,8256
1000a41c:	d8c11d85 	stb	r3,1142(sp)
1000a420:	d9012715 	stw	r4,1180(sp)
1000a424:	90c0080c 	andi	r3,r18,32
1000a428:	9811883a 	mov	r8,r19
1000a42c:	d8812317 	ldw	r2,1164(sp)
1000a430:	18005f26 	beq	r3,zero,1000a5b0 <___vfiprintf_internal_r+0x9a8>
1000a434:	d9012317 	ldw	r4,1164(sp)
1000a438:	14c00017 	ldw	r19,0(r2)
1000a43c:	15400117 	ldw	r21,4(r2)
1000a440:	21000204 	addi	r4,r4,8
1000a444:	d9012315 	stw	r4,1164(sp)
1000a448:	9080004c 	andi	r2,r18,1
1000a44c:	1001e226 	beq	r2,zero,1000abd8 <___vfiprintf_internal_r+0xfd0>
1000a450:	9d46b03a 	or	r3,r19,r21
1000a454:	18024e26 	beq	r3,zero,1000ad90 <___vfiprintf_internal_r+0x1188>
1000a458:	00800c04 	movi	r2,48
1000a45c:	d8811d05 	stb	r2,1140(sp)
1000a460:	d9811d45 	stb	r6,1141(sp)
1000a464:	94800094 	ori	r18,r18,2
1000a468:	00800084 	movi	r2,2
1000a46c:	003fd306 	br	1000a3bc <__alt_data_end+0xf800a3bc>
1000a470:	d9012317 	ldw	r4,1164(sp)
1000a474:	d9412317 	ldw	r5,1164(sp)
1000a478:	21000017 	ldw	r4,0(r4)
1000a47c:	28800104 	addi	r2,r5,4
1000a480:	d9012415 	stw	r4,1168(sp)
1000a484:	203eeb16 	blt	r4,zero,1000a034 <__alt_data_end+0xf800a034>
1000a488:	d8812315 	stw	r2,1164(sp)
1000a48c:	b9800007 	ldb	r6,0(r23)
1000a490:	003e3e06 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000a494:	b9800007 	ldb	r6,0(r23)
1000a498:	01000a84 	movi	r4,42
1000a49c:	b8800044 	addi	r2,r23,1
1000a4a0:	3102d226 	beq	r6,r4,1000afec <___vfiprintf_internal_r+0x13e4>
1000a4a4:	35bff404 	addi	r22,r6,-48
1000a4a8:	102f883a 	mov	r23,r2
1000a4ac:	0021883a 	mov	r16,zero
1000a4b0:	adbe3736 	bltu	r21,r22,10009d90 <__alt_data_end+0xf8009d90>
1000a4b4:	0009883a 	mov	r4,zero
1000a4b8:	01400284 	movi	r5,10
1000a4bc:	000c8300 	call	1000c830 <__mulsi3>
1000a4c0:	b9800007 	ldb	r6,0(r23)
1000a4c4:	b089883a 	add	r4,r22,r2
1000a4c8:	bdc00044 	addi	r23,r23,1
1000a4cc:	35bff404 	addi	r22,r6,-48
1000a4d0:	adbff92e 	bgeu	r21,r22,1000a4b8 <__alt_data_end+0xf800a4b8>
1000a4d4:	2021883a 	mov	r16,r4
1000a4d8:	203e2d0e 	bge	r4,zero,10009d90 <__alt_data_end+0xf8009d90>
1000a4dc:	043fffc4 	movi	r16,-1
1000a4e0:	003e2b06 	br	10009d90 <__alt_data_end+0xf8009d90>
1000a4e4:	94801014 	ori	r18,r18,64
1000a4e8:	b9800007 	ldb	r6,0(r23)
1000a4ec:	003e2706 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000a4f0:	94800814 	ori	r18,r18,32
1000a4f4:	b9800007 	ldb	r6,0(r23)
1000a4f8:	003e2406 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000a4fc:	d9412317 	ldw	r5,1164(sp)
1000a500:	d8812317 	ldw	r2,1164(sp)
1000a504:	d8011d85 	stb	zero,1142(sp)
1000a508:	29400017 	ldw	r5,0(r5)
1000a50c:	9811883a 	mov	r8,r19
1000a510:	14c00104 	addi	r19,r2,4
1000a514:	d9412215 	stw	r5,1160(sp)
1000a518:	28029026 	beq	r5,zero,1000af5c <___vfiprintf_internal_r+0x1354>
1000a51c:	d9012217 	ldw	r4,1160(sp)
1000a520:	80027616 	blt	r16,zero,1000aefc <___vfiprintf_internal_r+0x12f4>
1000a524:	000b883a 	mov	r5,zero
1000a528:	800d883a 	mov	r6,r16
1000a52c:	da012a15 	stw	r8,1192(sp)
1000a530:	0007dc40 	call	10007dc4 <memchr>
1000a534:	da012a17 	ldw	r8,1192(sp)
1000a538:	1002a026 	beq	r2,zero,1000afbc <___vfiprintf_internal_r+0x13b4>
1000a53c:	d8c12217 	ldw	r3,1160(sp)
1000a540:	10e9c83a 	sub	r20,r2,r3
1000a544:	85023816 	blt	r16,r20,1000ae28 <___vfiprintf_internal_r+0x1220>
1000a548:	dd811d83 	ldbu	r22,1142(sp)
1000a54c:	dcc12315 	stw	r19,1164(sp)
1000a550:	0021883a 	mov	r16,zero
1000a554:	003efd06 	br	1000a14c <__alt_data_end+0xf800a14c>
1000a558:	9080080c 	andi	r2,r18,32
1000a55c:	9811883a 	mov	r8,r19
1000a560:	103f9e1e 	bne	r2,zero,1000a3dc <__alt_data_end+0xf800a3dc>
1000a564:	9080040c 	andi	r2,r18,16
1000a568:	10021726 	beq	r2,zero,1000adc8 <___vfiprintf_internal_r+0x11c0>
1000a56c:	d9412317 	ldw	r5,1164(sp)
1000a570:	002b883a 	mov	r21,zero
1000a574:	00800044 	movi	r2,1
1000a578:	2cc00017 	ldw	r19,0(r5)
1000a57c:	29400104 	addi	r5,r5,4
1000a580:	d9412315 	stw	r5,1164(sp)
1000a584:	9807883a 	mov	r3,r19
1000a588:	003f8c06 	br	1000a3bc <__alt_data_end+0xf800a3bc>
1000a58c:	d8c12203 	ldbu	r3,1160(sp)
1000a590:	01040074 	movhi	r4,4097
1000a594:	21081504 	addi	r4,r4,8276
1000a598:	d8c11d85 	stb	r3,1142(sp)
1000a59c:	d9012715 	stw	r4,1180(sp)
1000a5a0:	90c0080c 	andi	r3,r18,32
1000a5a4:	9811883a 	mov	r8,r19
1000a5a8:	d8812317 	ldw	r2,1164(sp)
1000a5ac:	183fa11e 	bne	r3,zero,1000a434 <__alt_data_end+0xf800a434>
1000a5b0:	90c0040c 	andi	r3,r18,16
1000a5b4:	1801e526 	beq	r3,zero,1000ad4c <___vfiprintf_internal_r+0x1144>
1000a5b8:	d9412317 	ldw	r5,1164(sp)
1000a5bc:	14c00017 	ldw	r19,0(r2)
1000a5c0:	002b883a 	mov	r21,zero
1000a5c4:	29400104 	addi	r5,r5,4
1000a5c8:	d9412315 	stw	r5,1164(sp)
1000a5cc:	003f9e06 	br	1000a448 <__alt_data_end+0xf800a448>
1000a5d0:	9080080c 	andi	r2,r18,32
1000a5d4:	9811883a 	mov	r8,r19
1000a5d8:	103f701e 	bne	r2,zero,1000a39c <__alt_data_end+0xf800a39c>
1000a5dc:	9080040c 	andi	r2,r18,16
1000a5e0:	1001ef26 	beq	r2,zero,1000ada0 <___vfiprintf_internal_r+0x1198>
1000a5e4:	d9012317 	ldw	r4,1164(sp)
1000a5e8:	002b883a 	mov	r21,zero
1000a5ec:	0005883a 	mov	r2,zero
1000a5f0:	24c00017 	ldw	r19,0(r4)
1000a5f4:	21000104 	addi	r4,r4,4
1000a5f8:	d9012315 	stw	r4,1164(sp)
1000a5fc:	9807883a 	mov	r3,r19
1000a600:	003f6e06 	br	1000a3bc <__alt_data_end+0xf800a3bc>
1000a604:	d8c12317 	ldw	r3,1164(sp)
1000a608:	9811883a 	mov	r8,r19
1000a60c:	00800c04 	movi	r2,48
1000a610:	1cc00017 	ldw	r19,0(r3)
1000a614:	01040074 	movhi	r4,4097
1000a618:	18c00104 	addi	r3,r3,4
1000a61c:	d8811d05 	stb	r2,1140(sp)
1000a620:	21081504 	addi	r4,r4,8276
1000a624:	00801e04 	movi	r2,120
1000a628:	d8811d45 	stb	r2,1141(sp)
1000a62c:	d8c12315 	stw	r3,1164(sp)
1000a630:	002b883a 	mov	r21,zero
1000a634:	94800094 	ori	r18,r18,2
1000a638:	d9012715 	stw	r4,1180(sp)
1000a63c:	00800084 	movi	r2,2
1000a640:	9807883a 	mov	r3,r19
1000a644:	003f5d06 	br	1000a3bc <__alt_data_end+0xf800a3bc>
1000a648:	d8c12203 	ldbu	r3,1160(sp)
1000a64c:	9080080c 	andi	r2,r18,32
1000a650:	9811883a 	mov	r8,r19
1000a654:	d8c11d85 	stb	r3,1142(sp)
1000a658:	1001b126 	beq	r2,zero,1000ad20 <___vfiprintf_internal_r+0x1118>
1000a65c:	d9012317 	ldw	r4,1164(sp)
1000a660:	d9412517 	ldw	r5,1172(sp)
1000a664:	20800017 	ldw	r2,0(r4)
1000a668:	2807d7fa 	srai	r3,r5,31
1000a66c:	21000104 	addi	r4,r4,4
1000a670:	d9012315 	stw	r4,1164(sp)
1000a674:	11400015 	stw	r5,0(r2)
1000a678:	10c00115 	stw	r3,4(r2)
1000a67c:	003d9a06 	br	10009ce8 <__alt_data_end+0xf8009ce8>
1000a680:	d8812207 	ldb	r2,1160(sp)
1000a684:	1001c41e 	bne	r2,zero,1000ad98 <___vfiprintf_internal_r+0x1190>
1000a688:	00c00804 	movi	r3,32
1000a68c:	d8c12205 	stb	r3,1160(sp)
1000a690:	b9800007 	ldb	r6,0(r23)
1000a694:	003dbd06 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000a698:	00c00ac4 	movi	r3,43
1000a69c:	d8c12205 	stb	r3,1160(sp)
1000a6a0:	b9800007 	ldb	r6,0(r23)
1000a6a4:	003db906 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000a6a8:	d8c12203 	ldbu	r3,1160(sp)
1000a6ac:	9080080c 	andi	r2,r18,32
1000a6b0:	9811883a 	mov	r8,r19
1000a6b4:	d8c11d85 	stb	r3,1142(sp)
1000a6b8:	d8c12317 	ldw	r3,1164(sp)
1000a6bc:	103e7e1e 	bne	r2,zero,1000a0b8 <__alt_data_end+0xf800a0b8>
1000a6c0:	9080040c 	andi	r2,r18,16
1000a6c4:	1001a926 	beq	r2,zero,1000ad6c <___vfiprintf_internal_r+0x1164>
1000a6c8:	1cc00017 	ldw	r19,0(r3)
1000a6cc:	d9412317 	ldw	r5,1164(sp)
1000a6d0:	982bd7fa 	srai	r21,r19,31
1000a6d4:	29400104 	addi	r5,r5,4
1000a6d8:	d9412315 	stw	r5,1164(sp)
1000a6dc:	a805883a 	mov	r2,r21
1000a6e0:	003e7b06 	br	1000a0d0 <__alt_data_end+0xf800a0d0>
1000a6e4:	94800054 	ori	r18,r18,1
1000a6e8:	b9800007 	ldb	r6,0(r23)
1000a6ec:	003da706 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000a6f0:	d8c12203 	ldbu	r3,1160(sp)
1000a6f4:	9811883a 	mov	r8,r19
1000a6f8:	d8c11d85 	stb	r3,1142(sp)
1000a6fc:	30005826 	beq	r6,zero,1000a860 <___vfiprintf_internal_r+0xc58>
1000a700:	05400044 	movi	r21,1
1000a704:	d8c10004 	addi	r3,sp,1024
1000a708:	d9810005 	stb	r6,1024(sp)
1000a70c:	d8011d85 	stb	zero,1142(sp)
1000a710:	a829883a 	mov	r20,r21
1000a714:	d8c12215 	stw	r3,1160(sp)
1000a718:	003f1a06 	br	1000a384 <__alt_data_end+0xf800a384>
1000a71c:	d9012117 	ldw	r4,1156(sp)
1000a720:	d9412017 	ldw	r5,1152(sp)
1000a724:	d9811a04 	addi	r6,sp,1128
1000a728:	d9c12a15 	stw	r7,1192(sp)
1000a72c:	db012b15 	stw	r12,1196(sp)
1000a730:	0009af40 	call	10009af4 <__sprint_r.part.0>
1000a734:	d9c12a17 	ldw	r7,1192(sp)
1000a738:	db012b17 	ldw	r12,1196(sp)
1000a73c:	10004e1e 	bne	r2,zero,1000a878 <___vfiprintf_internal_r+0xc70>
1000a740:	d9011b17 	ldw	r4,1132(sp)
1000a744:	d8c11c17 	ldw	r3,1136(sp)
1000a748:	d811883a 	mov	r8,sp
1000a74c:	21400044 	addi	r5,r4,1
1000a750:	003e9d06 	br	1000a1c8 <__alt_data_end+0xf800a1c8>
1000a754:	d9411b17 	ldw	r5,1132(sp)
1000a758:	d8c11c17 	ldw	r3,1136(sp)
1000a75c:	28800044 	addi	r2,r5,1
1000a760:	d9011d87 	ldb	r4,1142(sp)
1000a764:	203eb626 	beq	r4,zero,1000a240 <__alt_data_end+0xf800a240>
1000a768:	01000044 	movi	r4,1
1000a76c:	d9411d84 	addi	r5,sp,1142
1000a770:	1907883a 	add	r3,r3,r4
1000a774:	41400015 	stw	r5,0(r8)
1000a778:	41000115 	stw	r4,4(r8)
1000a77c:	d8c11c15 	stw	r3,1136(sp)
1000a780:	d8811b15 	stw	r2,1132(sp)
1000a784:	014001c4 	movi	r5,7
1000a788:	2880ce16 	blt	r5,r2,1000aac4 <___vfiprintf_internal_r+0xebc>
1000a78c:	100b883a 	mov	r5,r2
1000a790:	42000204 	addi	r8,r8,8
1000a794:	10800044 	addi	r2,r2,1
1000a798:	003ea906 	br	1000a240 <__alt_data_end+0xf800a240>
1000a79c:	d9012117 	ldw	r4,1156(sp)
1000a7a0:	d9412017 	ldw	r5,1152(sp)
1000a7a4:	d9811a04 	addi	r6,sp,1128
1000a7a8:	0009af40 	call	10009af4 <__sprint_r.part.0>
1000a7ac:	1000321e 	bne	r2,zero,1000a878 <___vfiprintf_internal_r+0xc70>
1000a7b0:	d9411b17 	ldw	r5,1132(sp)
1000a7b4:	d8c11c17 	ldw	r3,1136(sp)
1000a7b8:	d811883a 	mov	r8,sp
1000a7bc:	28800044 	addi	r2,r5,1
1000a7c0:	003eba06 	br	1000a2ac <__alt_data_end+0xf800a2ac>
1000a7c4:	10803fcc 	andi	r2,r2,255
1000a7c8:	00c00044 	movi	r3,1
1000a7cc:	10fe4d1e 	bne	r2,r3,1000a104 <__alt_data_end+0xf800a104>
1000a7d0:	a800021e 	bne	r21,zero,1000a7dc <___vfiprintf_internal_r+0xbd4>
1000a7d4:	00800244 	movi	r2,9
1000a7d8:	14c01b2e 	bgeu	r2,r19,1000a848 <___vfiprintf_internal_r+0xc40>
1000a7dc:	dc012215 	stw	r16,1160(sp)
1000a7e0:	dd010a04 	addi	r20,sp,1064
1000a7e4:	a821883a 	mov	r16,r21
1000a7e8:	402b883a 	mov	r21,r8
1000a7ec:	9809883a 	mov	r4,r19
1000a7f0:	800b883a 	mov	r5,r16
1000a7f4:	01800284 	movi	r6,10
1000a7f8:	000f883a 	mov	r7,zero
1000a7fc:	000c0e80 	call	1000c0e8 <__umoddi3>
1000a800:	10800c04 	addi	r2,r2,48
1000a804:	a53fffc4 	addi	r20,r20,-1
1000a808:	9809883a 	mov	r4,r19
1000a80c:	800b883a 	mov	r5,r16
1000a810:	01800284 	movi	r6,10
1000a814:	000f883a 	mov	r7,zero
1000a818:	a0800005 	stb	r2,0(r20)
1000a81c:	000baa80 	call	1000baa8 <__udivdi3>
1000a820:	1027883a 	mov	r19,r2
1000a824:	10c4b03a 	or	r2,r2,r3
1000a828:	1821883a 	mov	r16,r3
1000a82c:	103fef1e 	bne	r2,zero,1000a7ec <__alt_data_end+0xf800a7ec>
1000a830:	d9011e17 	ldw	r4,1144(sp)
1000a834:	dc012217 	ldw	r16,1160(sp)
1000a838:	a811883a 	mov	r8,r21
1000a83c:	dd012215 	stw	r20,1160(sp)
1000a840:	2529c83a 	sub	r20,r4,r20
1000a844:	003e4106 	br	1000a14c <__alt_data_end+0xf800a14c>
1000a848:	9cc00c04 	addi	r19,r19,48
1000a84c:	d8c109c4 	addi	r3,sp,1063
1000a850:	dcc109c5 	stb	r19,1063(sp)
1000a854:	dd012817 	ldw	r20,1184(sp)
1000a858:	d8c12215 	stw	r3,1160(sp)
1000a85c:	003e3b06 	br	1000a14c <__alt_data_end+0xf800a14c>
1000a860:	d8811c17 	ldw	r2,1136(sp)
1000a864:	10000426 	beq	r2,zero,1000a878 <___vfiprintf_internal_r+0xc70>
1000a868:	d9012117 	ldw	r4,1156(sp)
1000a86c:	d9412017 	ldw	r5,1152(sp)
1000a870:	d9811a04 	addi	r6,sp,1128
1000a874:	0009af40 	call	10009af4 <__sprint_r.part.0>
1000a878:	d9412017 	ldw	r5,1152(sp)
1000a87c:	2880030b 	ldhu	r2,12(r5)
1000a880:	1080100c 	andi	r2,r2,64
1000a884:	103ddc1e 	bne	r2,zero,10009ff8 <__alt_data_end+0xf8009ff8>
1000a888:	d8812517 	ldw	r2,1172(sp)
1000a88c:	003ddb06 	br	10009ffc <__alt_data_end+0xf8009ffc>
1000a890:	1801061e 	bne	r3,zero,1000acac <___vfiprintf_internal_r+0x10a4>
1000a894:	d8c12217 	ldw	r3,1160(sp)
1000a898:	00800044 	movi	r2,1
1000a89c:	dd000115 	stw	r20,4(sp)
1000a8a0:	d8c00015 	stw	r3,0(sp)
1000a8a4:	dd011c15 	stw	r20,1136(sp)
1000a8a8:	d8811b15 	stw	r2,1132(sp)
1000a8ac:	a007883a 	mov	r3,r20
1000a8b0:	d811883a 	mov	r8,sp
1000a8b4:	42000204 	addi	r8,r8,8
1000a8b8:	9480010c 	andi	r18,r18,4
1000a8bc:	90003426 	beq	r18,zero,1000a990 <___vfiprintf_internal_r+0xd88>
1000a8c0:	d9412417 	ldw	r5,1168(sp)
1000a8c4:	2d65c83a 	sub	r18,r5,r21
1000a8c8:	0480310e 	bge	zero,r18,1000a990 <___vfiprintf_internal_r+0xd88>
1000a8cc:	04000404 	movi	r16,16
1000a8d0:	8481ad0e 	bge	r16,r18,1000af88 <___vfiprintf_internal_r+0x1380>
1000a8d4:	01440074 	movhi	r5,4097
1000a8d8:	29487a04 	addi	r5,r5,8680
1000a8dc:	d9011b17 	ldw	r4,1132(sp)
1000a8e0:	d9412615 	stw	r5,1176(sp)
1000a8e4:	04c001c4 	movi	r19,7
1000a8e8:	dd012117 	ldw	r20,1156(sp)
1000a8ec:	dd812017 	ldw	r22,1152(sp)
1000a8f0:	00000506 	br	1000a908 <___vfiprintf_internal_r+0xd00>
1000a8f4:	21400084 	addi	r5,r4,2
1000a8f8:	42000204 	addi	r8,r8,8
1000a8fc:	1009883a 	mov	r4,r2
1000a900:	94bffc04 	addi	r18,r18,-16
1000a904:	84800d0e 	bge	r16,r18,1000a93c <___vfiprintf_internal_r+0xd34>
1000a908:	18c00404 	addi	r3,r3,16
1000a90c:	20800044 	addi	r2,r4,1
1000a910:	47000015 	stw	fp,0(r8)
1000a914:	44000115 	stw	r16,4(r8)
1000a918:	d8c11c15 	stw	r3,1136(sp)
1000a91c:	d8811b15 	stw	r2,1132(sp)
1000a920:	98bff40e 	bge	r19,r2,1000a8f4 <__alt_data_end+0xf800a8f4>
1000a924:	1800291e 	bne	r3,zero,1000a9cc <___vfiprintf_internal_r+0xdc4>
1000a928:	94bffc04 	addi	r18,r18,-16
1000a92c:	0009883a 	mov	r4,zero
1000a930:	01400044 	movi	r5,1
1000a934:	d811883a 	mov	r8,sp
1000a938:	84bff316 	blt	r16,r18,1000a908 <__alt_data_end+0xf800a908>
1000a93c:	d8812617 	ldw	r2,1176(sp)
1000a940:	1c87883a 	add	r3,r3,r18
1000a944:	44800115 	stw	r18,4(r8)
1000a948:	40800015 	stw	r2,0(r8)
1000a94c:	d8c11c15 	stw	r3,1136(sp)
1000a950:	d9411b15 	stw	r5,1132(sp)
1000a954:	008001c4 	movi	r2,7
1000a958:	11400d0e 	bge	r2,r5,1000a990 <___vfiprintf_internal_r+0xd88>
1000a95c:	1800061e 	bne	r3,zero,1000a978 <___vfiprintf_internal_r+0xd70>
1000a960:	d8c12417 	ldw	r3,1168(sp)
1000a964:	a8c12e16 	blt	r21,r3,1000ae20 <___vfiprintf_internal_r+0x1218>
1000a968:	d9012517 	ldw	r4,1172(sp)
1000a96c:	2549883a 	add	r4,r4,r21
1000a970:	d9012515 	stw	r4,1172(sp)
1000a974:	00001206 	br	1000a9c0 <___vfiprintf_internal_r+0xdb8>
1000a978:	d9012117 	ldw	r4,1156(sp)
1000a97c:	d9412017 	ldw	r5,1152(sp)
1000a980:	d9811a04 	addi	r6,sp,1128
1000a984:	0009af40 	call	10009af4 <__sprint_r.part.0>
1000a988:	103fbb1e 	bne	r2,zero,1000a878 <__alt_data_end+0xf800a878>
1000a98c:	d8c11c17 	ldw	r3,1136(sp)
1000a990:	d8812417 	ldw	r2,1168(sp)
1000a994:	a880010e 	bge	r21,r2,1000a99c <___vfiprintf_internal_r+0xd94>
1000a998:	102b883a 	mov	r21,r2
1000a99c:	d9012517 	ldw	r4,1172(sp)
1000a9a0:	2549883a 	add	r4,r4,r21
1000a9a4:	d9012515 	stw	r4,1172(sp)
1000a9a8:	18000526 	beq	r3,zero,1000a9c0 <___vfiprintf_internal_r+0xdb8>
1000a9ac:	d9012117 	ldw	r4,1156(sp)
1000a9b0:	d9412017 	ldw	r5,1152(sp)
1000a9b4:	d9811a04 	addi	r6,sp,1128
1000a9b8:	0009af40 	call	10009af4 <__sprint_r.part.0>
1000a9bc:	103fae1e 	bne	r2,zero,1000a878 <__alt_data_end+0xf800a878>
1000a9c0:	d8011b15 	stw	zero,1132(sp)
1000a9c4:	d811883a 	mov	r8,sp
1000a9c8:	003cc706 	br	10009ce8 <__alt_data_end+0xf8009ce8>
1000a9cc:	a009883a 	mov	r4,r20
1000a9d0:	b00b883a 	mov	r5,r22
1000a9d4:	d9811a04 	addi	r6,sp,1128
1000a9d8:	0009af40 	call	10009af4 <__sprint_r.part.0>
1000a9dc:	103fa61e 	bne	r2,zero,1000a878 <__alt_data_end+0xf800a878>
1000a9e0:	d9011b17 	ldw	r4,1132(sp)
1000a9e4:	d8c11c17 	ldw	r3,1136(sp)
1000a9e8:	d811883a 	mov	r8,sp
1000a9ec:	21400044 	addi	r5,r4,1
1000a9f0:	003fc306 	br	1000a900 <__alt_data_end+0xf800a900>
1000a9f4:	d9012417 	ldw	r4,1168(sp)
1000a9f8:	256dc83a 	sub	r22,r4,r21
1000a9fc:	05be1f0e 	bge	zero,r22,1000a27c <__alt_data_end+0xf800a27c>
1000aa00:	04c00404 	movi	r19,16
1000aa04:	9d81720e 	bge	r19,r22,1000afd0 <___vfiprintf_internal_r+0x13c8>
1000aa08:	00840074 	movhi	r2,4097
1000aa0c:	10887604 	addi	r2,r2,8664
1000aa10:	d8812615 	stw	r2,1176(sp)
1000aa14:	028001c4 	movi	r10,7
1000aa18:	00000506 	br	1000aa30 <___vfiprintf_internal_r+0xe28>
1000aa1c:	29000084 	addi	r4,r5,2
1000aa20:	42000204 	addi	r8,r8,8
1000aa24:	100b883a 	mov	r5,r2
1000aa28:	b5bffc04 	addi	r22,r22,-16
1000aa2c:	9d800d0e 	bge	r19,r22,1000aa64 <___vfiprintf_internal_r+0xe5c>
1000aa30:	18c00404 	addi	r3,r3,16
1000aa34:	28800044 	addi	r2,r5,1
1000aa38:	44400015 	stw	r17,0(r8)
1000aa3c:	44c00115 	stw	r19,4(r8)
1000aa40:	d8c11c15 	stw	r3,1136(sp)
1000aa44:	d8811b15 	stw	r2,1132(sp)
1000aa48:	50bff40e 	bge	r10,r2,1000aa1c <__alt_data_end+0xf800aa1c>
1000aa4c:	1800111e 	bne	r3,zero,1000aa94 <___vfiprintf_internal_r+0xe8c>
1000aa50:	b5bffc04 	addi	r22,r22,-16
1000aa54:	000b883a 	mov	r5,zero
1000aa58:	01000044 	movi	r4,1
1000aa5c:	d811883a 	mov	r8,sp
1000aa60:	9dbff316 	blt	r19,r22,1000aa30 <__alt_data_end+0xf800aa30>
1000aa64:	d9412617 	ldw	r5,1176(sp)
1000aa68:	1d87883a 	add	r3,r3,r22
1000aa6c:	45800115 	stw	r22,4(r8)
1000aa70:	41400015 	stw	r5,0(r8)
1000aa74:	d8c11c15 	stw	r3,1136(sp)
1000aa78:	d9011b15 	stw	r4,1132(sp)
1000aa7c:	008001c4 	movi	r2,7
1000aa80:	11008516 	blt	r2,r4,1000ac98 <___vfiprintf_internal_r+0x1090>
1000aa84:	42000204 	addi	r8,r8,8
1000aa88:	20800044 	addi	r2,r4,1
1000aa8c:	200b883a 	mov	r5,r4
1000aa90:	003dfa06 	br	1000a27c <__alt_data_end+0xf800a27c>
1000aa94:	d9012117 	ldw	r4,1156(sp)
1000aa98:	d9412017 	ldw	r5,1152(sp)
1000aa9c:	d9811a04 	addi	r6,sp,1128
1000aaa0:	da812a15 	stw	r10,1192(sp)
1000aaa4:	0009af40 	call	10009af4 <__sprint_r.part.0>
1000aaa8:	da812a17 	ldw	r10,1192(sp)
1000aaac:	103f721e 	bne	r2,zero,1000a878 <__alt_data_end+0xf800a878>
1000aab0:	d9411b17 	ldw	r5,1132(sp)
1000aab4:	d8c11c17 	ldw	r3,1136(sp)
1000aab8:	d811883a 	mov	r8,sp
1000aabc:	29000044 	addi	r4,r5,1
1000aac0:	003fd906 	br	1000aa28 <__alt_data_end+0xf800aa28>
1000aac4:	1800681e 	bne	r3,zero,1000ac68 <___vfiprintf_internal_r+0x1060>
1000aac8:	50004d26 	beq	r10,zero,1000ac00 <___vfiprintf_internal_r+0xff8>
1000aacc:	d8811d04 	addi	r2,sp,1140
1000aad0:	00c00084 	movi	r3,2
1000aad4:	d8800015 	stw	r2,0(sp)
1000aad8:	d8c00115 	stw	r3,4(sp)
1000aadc:	2005883a 	mov	r2,r4
1000aae0:	d811883a 	mov	r8,sp
1000aae4:	003de006 	br	1000a268 <__alt_data_end+0xf800a268>
1000aae8:	1800551e 	bne	r3,zero,1000ac40 <___vfiprintf_internal_r+0x1038>
1000aaec:	000b883a 	mov	r5,zero
1000aaf0:	00800044 	movi	r2,1
1000aaf4:	d811883a 	mov	r8,sp
1000aaf8:	003dde06 	br	1000a274 <__alt_data_end+0xf800a274>
1000aafc:	10803fcc 	andi	r2,r2,255
1000ab00:	1000191e 	bne	r2,zero,1000ab68 <___vfiprintf_internal_r+0xf60>
1000ab04:	9080004c 	andi	r2,r18,1
1000ab08:	10001726 	beq	r2,zero,1000ab68 <___vfiprintf_internal_r+0xf60>
1000ab0c:	00800c04 	movi	r2,48
1000ab10:	d8c109c4 	addi	r3,sp,1063
1000ab14:	d88109c5 	stb	r2,1063(sp)
1000ab18:	dd012817 	ldw	r20,1184(sp)
1000ab1c:	d8c12215 	stw	r3,1160(sp)
1000ab20:	003d8a06 	br	1000a14c <__alt_data_end+0xf800a14c>
1000ab24:	d9012717 	ldw	r4,1180(sp)
1000ab28:	dd010a04 	addi	r20,sp,1064
1000ab2c:	988003cc 	andi	r2,r19,15
1000ab30:	a806973a 	slli	r3,r21,28
1000ab34:	2085883a 	add	r2,r4,r2
1000ab38:	9826d13a 	srli	r19,r19,4
1000ab3c:	10800003 	ldbu	r2,0(r2)
1000ab40:	a82ad13a 	srli	r21,r21,4
1000ab44:	a53fffc4 	addi	r20,r20,-1
1000ab48:	1ce6b03a 	or	r19,r3,r19
1000ab4c:	a0800005 	stb	r2,0(r20)
1000ab50:	9d44b03a 	or	r2,r19,r21
1000ab54:	103ff51e 	bne	r2,zero,1000ab2c <__alt_data_end+0xf800ab2c>
1000ab58:	d9411e17 	ldw	r5,1144(sp)
1000ab5c:	dd012215 	stw	r20,1160(sp)
1000ab60:	2d29c83a 	sub	r20,r5,r20
1000ab64:	003d7906 	br	1000a14c <__alt_data_end+0xf800a14c>
1000ab68:	d8c10a04 	addi	r3,sp,1064
1000ab6c:	d8c12215 	stw	r3,1160(sp)
1000ab70:	003d7606 	br	1000a14c <__alt_data_end+0xf800a14c>
1000ab74:	18009e1e 	bne	r3,zero,1000adf0 <___vfiprintf_internal_r+0x11e8>
1000ab78:	d8811d87 	ldb	r2,1142(sp)
1000ab7c:	10005f26 	beq	r2,zero,1000acfc <___vfiprintf_internal_r+0x10f4>
1000ab80:	00c00044 	movi	r3,1
1000ab84:	d9011d84 	addi	r4,sp,1142
1000ab88:	1805883a 	mov	r2,r3
1000ab8c:	d9000015 	stw	r4,0(sp)
1000ab90:	d8c00115 	stw	r3,4(sp)
1000ab94:	d811883a 	mov	r8,sp
1000ab98:	003efc06 	br	1000a78c <__alt_data_end+0xf800a78c>
1000ab9c:	d9412417 	ldw	r5,1168(sp)
1000aba0:	d811883a 	mov	r8,sp
1000aba4:	2d65c83a 	sub	r18,r5,r21
1000aba8:	04bf4816 	blt	zero,r18,1000a8cc <__alt_data_end+0xf800a8cc>
1000abac:	003f6c06 	br	1000a960 <__alt_data_end+0xf800a960>
1000abb0:	b829883a 	mov	r20,r23
1000abb4:	003c6906 	br	10009d5c <__alt_data_end+0xf8009d5c>
1000abb8:	d9012117 	ldw	r4,1156(sp)
1000abbc:	d9412017 	ldw	r5,1152(sp)
1000abc0:	d9811a04 	addi	r6,sp,1128
1000abc4:	0009af40 	call	10009af4 <__sprint_r.part.0>
1000abc8:	103f2b1e 	bne	r2,zero,1000a878 <__alt_data_end+0xf800a878>
1000abcc:	d8c11c17 	ldw	r3,1136(sp)
1000abd0:	d811883a 	mov	r8,sp
1000abd4:	003f3806 	br	1000a8b8 <__alt_data_end+0xf800a8b8>
1000abd8:	00800084 	movi	r2,2
1000abdc:	9d46b03a 	or	r3,r19,r21
1000abe0:	003df606 	br	1000a3bc <__alt_data_end+0xf800a3bc>
1000abe4:	d9012117 	ldw	r4,1156(sp)
1000abe8:	d9412017 	ldw	r5,1152(sp)
1000abec:	d9811a04 	addi	r6,sp,1128
1000abf0:	0009af40 	call	10009af4 <__sprint_r.part.0>
1000abf4:	103f201e 	bne	r2,zero,1000a878 <__alt_data_end+0xf800a878>
1000abf8:	d811883a 	mov	r8,sp
1000abfc:	003cc606 	br	10009f18 <__alt_data_end+0xf8009f18>
1000ac00:	000b883a 	mov	r5,zero
1000ac04:	2005883a 	mov	r2,r4
1000ac08:	d811883a 	mov	r8,sp
1000ac0c:	003d9906 	br	1000a274 <__alt_data_end+0xf800a274>
1000ac10:	10803fcc 	andi	r2,r2,255
1000ac14:	1080201c 	xori	r2,r2,128
1000ac18:	10bfe004 	addi	r2,r2,-128
1000ac1c:	01000c04 	movi	r4,48
1000ac20:	1100b226 	beq	r2,r4,1000aeec <___vfiprintf_internal_r+0x12e4>
1000ac24:	d9412217 	ldw	r5,1160(sp)
1000ac28:	d8811e17 	ldw	r2,1144(sp)
1000ac2c:	193fffc5 	stb	r4,-1(r3)
1000ac30:	297fffc4 	addi	r5,r5,-1
1000ac34:	d9412215 	stw	r5,1160(sp)
1000ac38:	1169c83a 	sub	r20,r2,r5
1000ac3c:	003d4306 	br	1000a14c <__alt_data_end+0xf800a14c>
1000ac40:	d9012117 	ldw	r4,1156(sp)
1000ac44:	d9412017 	ldw	r5,1152(sp)
1000ac48:	d9811a04 	addi	r6,sp,1128
1000ac4c:	0009af40 	call	10009af4 <__sprint_r.part.0>
1000ac50:	103f091e 	bne	r2,zero,1000a878 <__alt_data_end+0xf800a878>
1000ac54:	d9411b17 	ldw	r5,1132(sp)
1000ac58:	d8c11c17 	ldw	r3,1136(sp)
1000ac5c:	d811883a 	mov	r8,sp
1000ac60:	28800044 	addi	r2,r5,1
1000ac64:	003d8306 	br	1000a274 <__alt_data_end+0xf800a274>
1000ac68:	d9012117 	ldw	r4,1156(sp)
1000ac6c:	d9412017 	ldw	r5,1152(sp)
1000ac70:	d9811a04 	addi	r6,sp,1128
1000ac74:	da812a15 	stw	r10,1192(sp)
1000ac78:	0009af40 	call	10009af4 <__sprint_r.part.0>
1000ac7c:	da812a17 	ldw	r10,1192(sp)
1000ac80:	103efd1e 	bne	r2,zero,1000a878 <__alt_data_end+0xf800a878>
1000ac84:	d9411b17 	ldw	r5,1132(sp)
1000ac88:	d8c11c17 	ldw	r3,1136(sp)
1000ac8c:	d811883a 	mov	r8,sp
1000ac90:	28800044 	addi	r2,r5,1
1000ac94:	003d6a06 	br	1000a240 <__alt_data_end+0xf800a240>
1000ac98:	1800a01e 	bne	r3,zero,1000af1c <___vfiprintf_internal_r+0x1314>
1000ac9c:	000b883a 	mov	r5,zero
1000aca0:	00800044 	movi	r2,1
1000aca4:	d811883a 	mov	r8,sp
1000aca8:	003d7406 	br	1000a27c <__alt_data_end+0xf800a27c>
1000acac:	d9012117 	ldw	r4,1156(sp)
1000acb0:	d9412017 	ldw	r5,1152(sp)
1000acb4:	d9811a04 	addi	r6,sp,1128
1000acb8:	0009af40 	call	10009af4 <__sprint_r.part.0>
1000acbc:	103eee1e 	bne	r2,zero,1000a878 <__alt_data_end+0xf800a878>
1000acc0:	d8811b17 	ldw	r2,1132(sp)
1000acc4:	d8c11c17 	ldw	r3,1136(sp)
1000acc8:	d811883a 	mov	r8,sp
1000accc:	10800044 	addi	r2,r2,1
1000acd0:	003d8f06 	br	1000a310 <__alt_data_end+0xf800a310>
1000acd4:	04e7c83a 	sub	r19,zero,r19
1000acd8:	9804c03a 	cmpne	r2,r19,zero
1000acdc:	056bc83a 	sub	r21,zero,r21
1000ace0:	a8abc83a 	sub	r21,r21,r2
1000ace4:	05800b44 	movi	r22,45
1000ace8:	dd811d85 	stb	r22,1142(sp)
1000acec:	8029883a 	mov	r20,r16
1000acf0:	00800044 	movi	r2,1
1000acf4:	9d46b03a 	or	r3,r19,r21
1000acf8:	003cfa06 	br	1000a0e4 <__alt_data_end+0xf800a0e4>
1000acfc:	000b883a 	mov	r5,zero
1000ad00:	00800044 	movi	r2,1
1000ad04:	d811883a 	mov	r8,sp
1000ad08:	503d5a26 	beq	r10,zero,1000a274 <__alt_data_end+0xf800a274>
1000ad0c:	00c00084 	movi	r3,2
1000ad10:	d9011d04 	addi	r4,sp,1140
1000ad14:	d9000015 	stw	r4,0(sp)
1000ad18:	d8c00115 	stw	r3,4(sp)
1000ad1c:	003d5206 	br	1000a268 <__alt_data_end+0xf800a268>
1000ad20:	9080040c 	andi	r2,r18,16
1000ad24:	1000421e 	bne	r2,zero,1000ae30 <___vfiprintf_internal_r+0x1228>
1000ad28:	9480100c 	andi	r18,r18,64
1000ad2c:	90009c26 	beq	r18,zero,1000afa0 <___vfiprintf_internal_r+0x1398>
1000ad30:	d9412317 	ldw	r5,1164(sp)
1000ad34:	d8c12517 	ldw	r3,1172(sp)
1000ad38:	28800017 	ldw	r2,0(r5)
1000ad3c:	29400104 	addi	r5,r5,4
1000ad40:	d9412315 	stw	r5,1164(sp)
1000ad44:	10c0000d 	sth	r3,0(r2)
1000ad48:	003be706 	br	10009ce8 <__alt_data_end+0xf8009ce8>
1000ad4c:	90c0100c 	andi	r3,r18,64
1000ad50:	18003e26 	beq	r3,zero,1000ae4c <___vfiprintf_internal_r+0x1244>
1000ad54:	d8c12317 	ldw	r3,1164(sp)
1000ad58:	14c0000b 	ldhu	r19,0(r2)
1000ad5c:	002b883a 	mov	r21,zero
1000ad60:	18c00104 	addi	r3,r3,4
1000ad64:	d8c12315 	stw	r3,1164(sp)
1000ad68:	003db706 	br	1000a448 <__alt_data_end+0xf800a448>
1000ad6c:	9080100c 	andi	r2,r18,64
1000ad70:	10004c26 	beq	r2,zero,1000aea4 <___vfiprintf_internal_r+0x129c>
1000ad74:	1cc0000f 	ldh	r19,0(r3)
1000ad78:	d8812317 	ldw	r2,1164(sp)
1000ad7c:	982bd7fa 	srai	r21,r19,31
1000ad80:	10800104 	addi	r2,r2,4
1000ad84:	d8812315 	stw	r2,1164(sp)
1000ad88:	a805883a 	mov	r2,r21
1000ad8c:	003cd006 	br	1000a0d0 <__alt_data_end+0xf800a0d0>
1000ad90:	00800084 	movi	r2,2
1000ad94:	003d8906 	br	1000a3bc <__alt_data_end+0xf800a3bc>
1000ad98:	b9800007 	ldb	r6,0(r23)
1000ad9c:	003bfb06 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000ada0:	9080100c 	andi	r2,r18,64
1000ada4:	10003726 	beq	r2,zero,1000ae84 <___vfiprintf_internal_r+0x127c>
1000ada8:	d9412317 	ldw	r5,1164(sp)
1000adac:	002b883a 	mov	r21,zero
1000adb0:	0005883a 	mov	r2,zero
1000adb4:	2cc0000b 	ldhu	r19,0(r5)
1000adb8:	29400104 	addi	r5,r5,4
1000adbc:	d9412315 	stw	r5,1164(sp)
1000adc0:	9807883a 	mov	r3,r19
1000adc4:	003d7d06 	br	1000a3bc <__alt_data_end+0xf800a3bc>
1000adc8:	9080100c 	andi	r2,r18,64
1000adcc:	10002526 	beq	r2,zero,1000ae64 <___vfiprintf_internal_r+0x125c>
1000add0:	d8812317 	ldw	r2,1164(sp)
1000add4:	002b883a 	mov	r21,zero
1000add8:	14c0000b 	ldhu	r19,0(r2)
1000addc:	10800104 	addi	r2,r2,4
1000ade0:	d8812315 	stw	r2,1164(sp)
1000ade4:	9807883a 	mov	r3,r19
1000ade8:	00800044 	movi	r2,1
1000adec:	003d7306 	br	1000a3bc <__alt_data_end+0xf800a3bc>
1000adf0:	d9012117 	ldw	r4,1156(sp)
1000adf4:	d9412017 	ldw	r5,1152(sp)
1000adf8:	d9811a04 	addi	r6,sp,1128
1000adfc:	da812a15 	stw	r10,1192(sp)
1000ae00:	0009af40 	call	10009af4 <__sprint_r.part.0>
1000ae04:	da812a17 	ldw	r10,1192(sp)
1000ae08:	103e9b1e 	bne	r2,zero,1000a878 <__alt_data_end+0xf800a878>
1000ae0c:	d9411b17 	ldw	r5,1132(sp)
1000ae10:	d8c11c17 	ldw	r3,1136(sp)
1000ae14:	d811883a 	mov	r8,sp
1000ae18:	28800044 	addi	r2,r5,1
1000ae1c:	003e5006 	br	1000a760 <__alt_data_end+0xf800a760>
1000ae20:	182b883a 	mov	r21,r3
1000ae24:	003ed006 	br	1000a968 <__alt_data_end+0xf800a968>
1000ae28:	8029883a 	mov	r20,r16
1000ae2c:	003dc606 	br	1000a548 <__alt_data_end+0xf800a548>
1000ae30:	d8c12317 	ldw	r3,1164(sp)
1000ae34:	d9012517 	ldw	r4,1172(sp)
1000ae38:	18800017 	ldw	r2,0(r3)
1000ae3c:	18c00104 	addi	r3,r3,4
1000ae40:	d8c12315 	stw	r3,1164(sp)
1000ae44:	11000015 	stw	r4,0(r2)
1000ae48:	003ba706 	br	10009ce8 <__alt_data_end+0xf8009ce8>
1000ae4c:	d9012317 	ldw	r4,1164(sp)
1000ae50:	14c00017 	ldw	r19,0(r2)
1000ae54:	002b883a 	mov	r21,zero
1000ae58:	21000104 	addi	r4,r4,4
1000ae5c:	d9012315 	stw	r4,1164(sp)
1000ae60:	003d7906 	br	1000a448 <__alt_data_end+0xf800a448>
1000ae64:	d8c12317 	ldw	r3,1164(sp)
1000ae68:	002b883a 	mov	r21,zero
1000ae6c:	00800044 	movi	r2,1
1000ae70:	1cc00017 	ldw	r19,0(r3)
1000ae74:	18c00104 	addi	r3,r3,4
1000ae78:	d8c12315 	stw	r3,1164(sp)
1000ae7c:	9807883a 	mov	r3,r19
1000ae80:	003d4e06 	br	1000a3bc <__alt_data_end+0xf800a3bc>
1000ae84:	d8812317 	ldw	r2,1164(sp)
1000ae88:	002b883a 	mov	r21,zero
1000ae8c:	14c00017 	ldw	r19,0(r2)
1000ae90:	10800104 	addi	r2,r2,4
1000ae94:	d8812315 	stw	r2,1164(sp)
1000ae98:	9807883a 	mov	r3,r19
1000ae9c:	0005883a 	mov	r2,zero
1000aea0:	003d4606 	br	1000a3bc <__alt_data_end+0xf800a3bc>
1000aea4:	1cc00017 	ldw	r19,0(r3)
1000aea8:	d8c12317 	ldw	r3,1164(sp)
1000aeac:	982bd7fa 	srai	r21,r19,31
1000aeb0:	18c00104 	addi	r3,r3,4
1000aeb4:	d8c12315 	stw	r3,1164(sp)
1000aeb8:	a805883a 	mov	r2,r21
1000aebc:	003c8406 	br	1000a0d0 <__alt_data_end+0xf800a0d0>
1000aec0:	01040074 	movhi	r4,4097
1000aec4:	21087604 	addi	r4,r4,8664
1000aec8:	d9012615 	stw	r4,1176(sp)
1000aecc:	003d0606 	br	1000a2e8 <__alt_data_end+0xf800a2e8>
1000aed0:	b9800043 	ldbu	r6,1(r23)
1000aed4:	94800814 	ori	r18,r18,32
1000aed8:	bdc00044 	addi	r23,r23,1
1000aedc:	31803fcc 	andi	r6,r6,255
1000aee0:	3180201c 	xori	r6,r6,128
1000aee4:	31bfe004 	addi	r6,r6,-128
1000aee8:	003ba806 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000aeec:	d8811e17 	ldw	r2,1144(sp)
1000aef0:	d8c12217 	ldw	r3,1160(sp)
1000aef4:	10e9c83a 	sub	r20,r2,r3
1000aef8:	003c9406 	br	1000a14c <__alt_data_end+0xf800a14c>
1000aefc:	da012a15 	stw	r8,1192(sp)
1000af00:	00027180 	call	10002718 <strlen>
1000af04:	1029883a 	mov	r20,r2
1000af08:	dd811d83 	ldbu	r22,1142(sp)
1000af0c:	dcc12315 	stw	r19,1164(sp)
1000af10:	0021883a 	mov	r16,zero
1000af14:	da012a17 	ldw	r8,1192(sp)
1000af18:	003c8c06 	br	1000a14c <__alt_data_end+0xf800a14c>
1000af1c:	d9012117 	ldw	r4,1156(sp)
1000af20:	d9412017 	ldw	r5,1152(sp)
1000af24:	d9811a04 	addi	r6,sp,1128
1000af28:	0009af40 	call	10009af4 <__sprint_r.part.0>
1000af2c:	103e521e 	bne	r2,zero,1000a878 <__alt_data_end+0xf800a878>
1000af30:	d9411b17 	ldw	r5,1132(sp)
1000af34:	d8c11c17 	ldw	r3,1136(sp)
1000af38:	d811883a 	mov	r8,sp
1000af3c:	28800044 	addi	r2,r5,1
1000af40:	003cce06 	br	1000a27c <__alt_data_end+0xf800a27c>
1000af44:	01440074 	movhi	r5,4097
1000af48:	29487a04 	addi	r5,r5,8680
1000af4c:	d9412615 	stw	r5,1176(sp)
1000af50:	d9411b17 	ldw	r5,1132(sp)
1000af54:	29400044 	addi	r5,r5,1
1000af58:	003cad06 	br	1000a210 <__alt_data_end+0xf800a210>
1000af5c:	00800184 	movi	r2,6
1000af60:	1400012e 	bgeu	r2,r16,1000af68 <___vfiprintf_internal_r+0x1360>
1000af64:	1021883a 	mov	r16,r2
1000af68:	8029883a 	mov	r20,r16
1000af6c:	802b883a 	mov	r21,r16
1000af70:	80001c16 	blt	r16,zero,1000afe4 <___vfiprintf_internal_r+0x13dc>
1000af74:	00c40074 	movhi	r3,4097
1000af78:	18c81a04 	addi	r3,r3,8296
1000af7c:	dcc12315 	stw	r19,1164(sp)
1000af80:	d8c12215 	stw	r3,1160(sp)
1000af84:	003cff06 	br	1000a384 <__alt_data_end+0xf800a384>
1000af88:	d9411b17 	ldw	r5,1132(sp)
1000af8c:	00840074 	movhi	r2,4097
1000af90:	10887a04 	addi	r2,r2,8680
1000af94:	d8812615 	stw	r2,1176(sp)
1000af98:	29400044 	addi	r5,r5,1
1000af9c:	003e6706 	br	1000a93c <__alt_data_end+0xf800a93c>
1000afa0:	d9012317 	ldw	r4,1164(sp)
1000afa4:	d9412517 	ldw	r5,1172(sp)
1000afa8:	20800017 	ldw	r2,0(r4)
1000afac:	21000104 	addi	r4,r4,4
1000afb0:	d9012315 	stw	r4,1164(sp)
1000afb4:	11400015 	stw	r5,0(r2)
1000afb8:	003b4b06 	br	10009ce8 <__alt_data_end+0xf8009ce8>
1000afbc:	8029883a 	mov	r20,r16
1000afc0:	dd811d83 	ldbu	r22,1142(sp)
1000afc4:	dcc12315 	stw	r19,1164(sp)
1000afc8:	0021883a 	mov	r16,zero
1000afcc:	003c5f06 	br	1000a14c <__alt_data_end+0xf800a14c>
1000afd0:	01040074 	movhi	r4,4097
1000afd4:	21087604 	addi	r4,r4,8664
1000afd8:	d9012615 	stw	r4,1176(sp)
1000afdc:	1009883a 	mov	r4,r2
1000afe0:	003ea006 	br	1000aa64 <__alt_data_end+0xf800aa64>
1000afe4:	002b883a 	mov	r21,zero
1000afe8:	003fe206 	br	1000af74 <__alt_data_end+0xf800af74>
1000afec:	d9412317 	ldw	r5,1164(sp)
1000aff0:	b807883a 	mov	r3,r23
1000aff4:	102f883a 	mov	r23,r2
1000aff8:	2c000017 	ldw	r16,0(r5)
1000affc:	29000104 	addi	r4,r5,4
1000b000:	d9012315 	stw	r4,1164(sp)
1000b004:	80000416 	blt	r16,zero,1000b018 <___vfiprintf_internal_r+0x1410>
1000b008:	19800047 	ldb	r6,1(r3)
1000b00c:	003b5f06 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000b010:	043fffc4 	movi	r16,-1
1000b014:	003bef06 	br	10009fd4 <__alt_data_end+0xf8009fd4>
1000b018:	043fffc4 	movi	r16,-1
1000b01c:	19800047 	ldb	r6,1(r3)
1000b020:	003b5a06 	br	10009d8c <__alt_data_end+0xf8009d8c>
1000b024:	282b883a 	mov	r21,r5
1000b028:	003cc706 	br	1000a348 <__alt_data_end+0xf800a348>

1000b02c <__vfiprintf_internal>:
1000b02c:	2007883a 	mov	r3,r4
1000b030:	01040074 	movhi	r4,4097
1000b034:	210f7704 	addi	r4,r4,15836
1000b038:	21000017 	ldw	r4,0(r4)
1000b03c:	2805883a 	mov	r2,r5
1000b040:	300f883a 	mov	r7,r6
1000b044:	180b883a 	mov	r5,r3
1000b048:	100d883a 	mov	r6,r2
1000b04c:	0009c081 	jmpi	10009c08 <___vfiprintf_internal_r>

1000b050 <_write_r>:
1000b050:	defffd04 	addi	sp,sp,-12
1000b054:	dc000015 	stw	r16,0(sp)
1000b058:	04040074 	movhi	r16,4097
1000b05c:	dc400115 	stw	r17,4(sp)
1000b060:	84164804 	addi	r16,r16,22816
1000b064:	2023883a 	mov	r17,r4
1000b068:	2809883a 	mov	r4,r5
1000b06c:	300b883a 	mov	r5,r6
1000b070:	380d883a 	mov	r6,r7
1000b074:	dfc00215 	stw	ra,8(sp)
1000b078:	80000015 	stw	zero,0(r16)
1000b07c:	000f9780 	call	1000f978 <write>
1000b080:	00ffffc4 	movi	r3,-1
1000b084:	10c00526 	beq	r2,r3,1000b09c <_write_r+0x4c>
1000b088:	dfc00217 	ldw	ra,8(sp)
1000b08c:	dc400117 	ldw	r17,4(sp)
1000b090:	dc000017 	ldw	r16,0(sp)
1000b094:	dec00304 	addi	sp,sp,12
1000b098:	f800283a 	ret
1000b09c:	80c00017 	ldw	r3,0(r16)
1000b0a0:	183ff926 	beq	r3,zero,1000b088 <__alt_data_end+0xf800b088>
1000b0a4:	88c00015 	stw	r3,0(r17)
1000b0a8:	003ff706 	br	1000b088 <__alt_data_end+0xf800b088>

1000b0ac <_close_r>:
1000b0ac:	defffd04 	addi	sp,sp,-12
1000b0b0:	dc000015 	stw	r16,0(sp)
1000b0b4:	04040074 	movhi	r16,4097
1000b0b8:	dc400115 	stw	r17,4(sp)
1000b0bc:	84164804 	addi	r16,r16,22816
1000b0c0:	2023883a 	mov	r17,r4
1000b0c4:	2809883a 	mov	r4,r5
1000b0c8:	dfc00215 	stw	ra,8(sp)
1000b0cc:	80000015 	stw	zero,0(r16)
1000b0d0:	000f0a40 	call	1000f0a4 <close>
1000b0d4:	00ffffc4 	movi	r3,-1
1000b0d8:	10c00526 	beq	r2,r3,1000b0f0 <_close_r+0x44>
1000b0dc:	dfc00217 	ldw	ra,8(sp)
1000b0e0:	dc400117 	ldw	r17,4(sp)
1000b0e4:	dc000017 	ldw	r16,0(sp)
1000b0e8:	dec00304 	addi	sp,sp,12
1000b0ec:	f800283a 	ret
1000b0f0:	80c00017 	ldw	r3,0(r16)
1000b0f4:	183ff926 	beq	r3,zero,1000b0dc <__alt_data_end+0xf800b0dc>
1000b0f8:	88c00015 	stw	r3,0(r17)
1000b0fc:	003ff706 	br	1000b0dc <__alt_data_end+0xf800b0dc>

1000b100 <_calloc_r>:
1000b100:	defffe04 	addi	sp,sp,-8
1000b104:	dc000015 	stw	r16,0(sp)
1000b108:	2021883a 	mov	r16,r4
1000b10c:	2809883a 	mov	r4,r5
1000b110:	300b883a 	mov	r5,r6
1000b114:	dfc00115 	stw	ra,4(sp)
1000b118:	000c8300 	call	1000c830 <__mulsi3>
1000b11c:	8009883a 	mov	r4,r16
1000b120:	100b883a 	mov	r5,r2
1000b124:	000761c0 	call	1000761c <_malloc_r>
1000b128:	1021883a 	mov	r16,r2
1000b12c:	10002826 	beq	r2,zero,1000b1d0 <_calloc_r+0xd0>
1000b130:	11bfff17 	ldw	r6,-4(r2)
1000b134:	00bfff04 	movi	r2,-4
1000b138:	00c00904 	movi	r3,36
1000b13c:	308c703a 	and	r6,r6,r2
1000b140:	308d883a 	add	r6,r6,r2
1000b144:	19801436 	bltu	r3,r6,1000b198 <_calloc_r+0x98>
1000b148:	008004c4 	movi	r2,19
1000b14c:	11800936 	bltu	r2,r6,1000b174 <_calloc_r+0x74>
1000b150:	8005883a 	mov	r2,r16
1000b154:	10000015 	stw	zero,0(r2)
1000b158:	10000115 	stw	zero,4(r2)
1000b15c:	10000215 	stw	zero,8(r2)
1000b160:	8005883a 	mov	r2,r16
1000b164:	dfc00117 	ldw	ra,4(sp)
1000b168:	dc000017 	ldw	r16,0(sp)
1000b16c:	dec00204 	addi	sp,sp,8
1000b170:	f800283a 	ret
1000b174:	80000015 	stw	zero,0(r16)
1000b178:	80000115 	stw	zero,4(r16)
1000b17c:	008006c4 	movi	r2,27
1000b180:	11800d2e 	bgeu	r2,r6,1000b1b8 <_calloc_r+0xb8>
1000b184:	80000215 	stw	zero,8(r16)
1000b188:	80000315 	stw	zero,12(r16)
1000b18c:	30c00c26 	beq	r6,r3,1000b1c0 <_calloc_r+0xc0>
1000b190:	80800404 	addi	r2,r16,16
1000b194:	003fef06 	br	1000b154 <__alt_data_end+0xf800b154>
1000b198:	8009883a 	mov	r4,r16
1000b19c:	000b883a 	mov	r5,zero
1000b1a0:	00081400 	call	10008140 <memset>
1000b1a4:	8005883a 	mov	r2,r16
1000b1a8:	dfc00117 	ldw	ra,4(sp)
1000b1ac:	dc000017 	ldw	r16,0(sp)
1000b1b0:	dec00204 	addi	sp,sp,8
1000b1b4:	f800283a 	ret
1000b1b8:	80800204 	addi	r2,r16,8
1000b1bc:	003fe506 	br	1000b154 <__alt_data_end+0xf800b154>
1000b1c0:	80000415 	stw	zero,16(r16)
1000b1c4:	80800604 	addi	r2,r16,24
1000b1c8:	80000515 	stw	zero,20(r16)
1000b1cc:	003fe106 	br	1000b154 <__alt_data_end+0xf800b154>
1000b1d0:	0005883a 	mov	r2,zero
1000b1d4:	003fe306 	br	1000b164 <__alt_data_end+0xf800b164>

1000b1d8 <_fclose_r>:
1000b1d8:	28003226 	beq	r5,zero,1000b2a4 <_fclose_r+0xcc>
1000b1dc:	defffc04 	addi	sp,sp,-16
1000b1e0:	dc400115 	stw	r17,4(sp)
1000b1e4:	2023883a 	mov	r17,r4
1000b1e8:	dc000015 	stw	r16,0(sp)
1000b1ec:	dfc00315 	stw	ra,12(sp)
1000b1f0:	dc800215 	stw	r18,8(sp)
1000b1f4:	2821883a 	mov	r16,r5
1000b1f8:	000691c0 	call	1000691c <__sfp_lock_acquire>
1000b1fc:	88000226 	beq	r17,zero,1000b208 <_fclose_r+0x30>
1000b200:	88800e17 	ldw	r2,56(r17)
1000b204:	10002926 	beq	r2,zero,1000b2ac <_fclose_r+0xd4>
1000b208:	8080030f 	ldh	r2,12(r16)
1000b20c:	10002226 	beq	r2,zero,1000b298 <_fclose_r+0xc0>
1000b210:	8809883a 	mov	r4,r17
1000b214:	800b883a 	mov	r5,r16
1000b218:	00063500 	call	10006350 <_fflush_r>
1000b21c:	1025883a 	mov	r18,r2
1000b220:	80800b17 	ldw	r2,44(r16)
1000b224:	10000426 	beq	r2,zero,1000b238 <_fclose_r+0x60>
1000b228:	81400717 	ldw	r5,28(r16)
1000b22c:	8809883a 	mov	r4,r17
1000b230:	103ee83a 	callr	r2
1000b234:	10002616 	blt	r2,zero,1000b2d0 <_fclose_r+0xf8>
1000b238:	8080030b 	ldhu	r2,12(r16)
1000b23c:	1080200c 	andi	r2,r2,128
1000b240:	10001f1e 	bne	r2,zero,1000b2c0 <_fclose_r+0xe8>
1000b244:	81400c17 	ldw	r5,48(r16)
1000b248:	28000526 	beq	r5,zero,1000b260 <_fclose_r+0x88>
1000b24c:	80801004 	addi	r2,r16,64
1000b250:	28800226 	beq	r5,r2,1000b25c <_fclose_r+0x84>
1000b254:	8809883a 	mov	r4,r17
1000b258:	0006a800 	call	10006a80 <_free_r>
1000b25c:	80000c15 	stw	zero,48(r16)
1000b260:	81401117 	ldw	r5,68(r16)
1000b264:	28000326 	beq	r5,zero,1000b274 <_fclose_r+0x9c>
1000b268:	8809883a 	mov	r4,r17
1000b26c:	0006a800 	call	10006a80 <_free_r>
1000b270:	80001115 	stw	zero,68(r16)
1000b274:	8000030d 	sth	zero,12(r16)
1000b278:	00069200 	call	10006920 <__sfp_lock_release>
1000b27c:	9005883a 	mov	r2,r18
1000b280:	dfc00317 	ldw	ra,12(sp)
1000b284:	dc800217 	ldw	r18,8(sp)
1000b288:	dc400117 	ldw	r17,4(sp)
1000b28c:	dc000017 	ldw	r16,0(sp)
1000b290:	dec00404 	addi	sp,sp,16
1000b294:	f800283a 	ret
1000b298:	00069200 	call	10006920 <__sfp_lock_release>
1000b29c:	0005883a 	mov	r2,zero
1000b2a0:	003ff706 	br	1000b280 <__alt_data_end+0xf800b280>
1000b2a4:	0005883a 	mov	r2,zero
1000b2a8:	f800283a 	ret
1000b2ac:	8809883a 	mov	r4,r17
1000b2b0:	000690c0 	call	1000690c <__sinit>
1000b2b4:	8080030f 	ldh	r2,12(r16)
1000b2b8:	103fd51e 	bne	r2,zero,1000b210 <__alt_data_end+0xf800b210>
1000b2bc:	003ff606 	br	1000b298 <__alt_data_end+0xf800b298>
1000b2c0:	81400417 	ldw	r5,16(r16)
1000b2c4:	8809883a 	mov	r4,r17
1000b2c8:	0006a800 	call	10006a80 <_free_r>
1000b2cc:	003fdd06 	br	1000b244 <__alt_data_end+0xf800b244>
1000b2d0:	04bfffc4 	movi	r18,-1
1000b2d4:	003fd806 	br	1000b238 <__alt_data_end+0xf800b238>

1000b2d8 <fclose>:
1000b2d8:	00840074 	movhi	r2,4097
1000b2dc:	108f7704 	addi	r2,r2,15836
1000b2e0:	200b883a 	mov	r5,r4
1000b2e4:	11000017 	ldw	r4,0(r2)
1000b2e8:	000b1d81 	jmpi	1000b1d8 <_fclose_r>

1000b2ec <_fputwc_r>:
1000b2ec:	3080030b 	ldhu	r2,12(r6)
1000b2f0:	defff804 	addi	sp,sp,-32
1000b2f4:	dcc00415 	stw	r19,16(sp)
1000b2f8:	dc800315 	stw	r18,12(sp)
1000b2fc:	dc000115 	stw	r16,4(sp)
1000b300:	dfc00715 	stw	ra,28(sp)
1000b304:	dd400615 	stw	r21,24(sp)
1000b308:	dd000515 	stw	r20,20(sp)
1000b30c:	dc400215 	stw	r17,8(sp)
1000b310:	10c8000c 	andi	r3,r2,8192
1000b314:	3021883a 	mov	r16,r6
1000b318:	2027883a 	mov	r19,r4
1000b31c:	2825883a 	mov	r18,r5
1000b320:	1800051e 	bne	r3,zero,1000b338 <_fputwc_r+0x4c>
1000b324:	30c01917 	ldw	r3,100(r6)
1000b328:	10880014 	ori	r2,r2,8192
1000b32c:	3080030d 	sth	r2,12(r6)
1000b330:	18880014 	ori	r2,r3,8192
1000b334:	30801915 	stw	r2,100(r6)
1000b338:	000740c0 	call	1000740c <__locale_mb_cur_max>
1000b33c:	00c00044 	movi	r3,1
1000b340:	10c03e26 	beq	r2,r3,1000b43c <_fputwc_r+0x150>
1000b344:	9809883a 	mov	r4,r19
1000b348:	d80b883a 	mov	r5,sp
1000b34c:	900d883a 	mov	r6,r18
1000b350:	81c01704 	addi	r7,r16,92
1000b354:	000b79c0 	call	1000b79c <_wcrtomb_r>
1000b358:	1029883a 	mov	r20,r2
1000b35c:	00bfffc4 	movi	r2,-1
1000b360:	a0802026 	beq	r20,r2,1000b3e4 <_fputwc_r+0xf8>
1000b364:	d9400003 	ldbu	r5,0(sp)
1000b368:	a0001c26 	beq	r20,zero,1000b3dc <_fputwc_r+0xf0>
1000b36c:	0023883a 	mov	r17,zero
1000b370:	05400284 	movi	r21,10
1000b374:	00000906 	br	1000b39c <_fputwc_r+0xb0>
1000b378:	80800017 	ldw	r2,0(r16)
1000b37c:	11400005 	stb	r5,0(r2)
1000b380:	80c00017 	ldw	r3,0(r16)
1000b384:	18c00044 	addi	r3,r3,1
1000b388:	80c00015 	stw	r3,0(r16)
1000b38c:	8c400044 	addi	r17,r17,1
1000b390:	dc45883a 	add	r2,sp,r17
1000b394:	8d00112e 	bgeu	r17,r20,1000b3dc <_fputwc_r+0xf0>
1000b398:	11400003 	ldbu	r5,0(r2)
1000b39c:	80c00217 	ldw	r3,8(r16)
1000b3a0:	18ffffc4 	addi	r3,r3,-1
1000b3a4:	80c00215 	stw	r3,8(r16)
1000b3a8:	183ff30e 	bge	r3,zero,1000b378 <__alt_data_end+0xf800b378>
1000b3ac:	80800617 	ldw	r2,24(r16)
1000b3b0:	18801916 	blt	r3,r2,1000b418 <_fputwc_r+0x12c>
1000b3b4:	80800017 	ldw	r2,0(r16)
1000b3b8:	11400005 	stb	r5,0(r2)
1000b3bc:	80800017 	ldw	r2,0(r16)
1000b3c0:	10c00003 	ldbu	r3,0(r2)
1000b3c4:	10800044 	addi	r2,r2,1
1000b3c8:	1d402326 	beq	r3,r21,1000b458 <_fputwc_r+0x16c>
1000b3cc:	80800015 	stw	r2,0(r16)
1000b3d0:	8c400044 	addi	r17,r17,1
1000b3d4:	dc45883a 	add	r2,sp,r17
1000b3d8:	8d3fef36 	bltu	r17,r20,1000b398 <__alt_data_end+0xf800b398>
1000b3dc:	9005883a 	mov	r2,r18
1000b3e0:	00000406 	br	1000b3f4 <_fputwc_r+0x108>
1000b3e4:	80c0030b 	ldhu	r3,12(r16)
1000b3e8:	a005883a 	mov	r2,r20
1000b3ec:	18c01014 	ori	r3,r3,64
1000b3f0:	80c0030d 	sth	r3,12(r16)
1000b3f4:	dfc00717 	ldw	ra,28(sp)
1000b3f8:	dd400617 	ldw	r21,24(sp)
1000b3fc:	dd000517 	ldw	r20,20(sp)
1000b400:	dcc00417 	ldw	r19,16(sp)
1000b404:	dc800317 	ldw	r18,12(sp)
1000b408:	dc400217 	ldw	r17,8(sp)
1000b40c:	dc000117 	ldw	r16,4(sp)
1000b410:	dec00804 	addi	sp,sp,32
1000b414:	f800283a 	ret
1000b418:	9809883a 	mov	r4,r19
1000b41c:	29403fcc 	andi	r5,r5,255
1000b420:	800d883a 	mov	r6,r16
1000b424:	000b62c0 	call	1000b62c <__swbuf_r>
1000b428:	10bfffe0 	cmpeqi	r2,r2,-1
1000b42c:	10803fcc 	andi	r2,r2,255
1000b430:	103fd626 	beq	r2,zero,1000b38c <__alt_data_end+0xf800b38c>
1000b434:	00bfffc4 	movi	r2,-1
1000b438:	003fee06 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000b43c:	90ffffc4 	addi	r3,r18,-1
1000b440:	01003f84 	movi	r4,254
1000b444:	20ffbf36 	bltu	r4,r3,1000b344 <__alt_data_end+0xf800b344>
1000b448:	900b883a 	mov	r5,r18
1000b44c:	dc800005 	stb	r18,0(sp)
1000b450:	1029883a 	mov	r20,r2
1000b454:	003fc506 	br	1000b36c <__alt_data_end+0xf800b36c>
1000b458:	9809883a 	mov	r4,r19
1000b45c:	a80b883a 	mov	r5,r21
1000b460:	800d883a 	mov	r6,r16
1000b464:	000b62c0 	call	1000b62c <__swbuf_r>
1000b468:	10bfffe0 	cmpeqi	r2,r2,-1
1000b46c:	003fef06 	br	1000b42c <__alt_data_end+0xf800b42c>

1000b470 <fputwc>:
1000b470:	defffc04 	addi	sp,sp,-16
1000b474:	dc000115 	stw	r16,4(sp)
1000b478:	04040074 	movhi	r16,4097
1000b47c:	840f7704 	addi	r16,r16,15836
1000b480:	dc400215 	stw	r17,8(sp)
1000b484:	2023883a 	mov	r17,r4
1000b488:	81000017 	ldw	r4,0(r16)
1000b48c:	dfc00315 	stw	ra,12(sp)
1000b490:	280d883a 	mov	r6,r5
1000b494:	20000626 	beq	r4,zero,1000b4b0 <fputwc+0x40>
1000b498:	20800e17 	ldw	r2,56(r4)
1000b49c:	1000041e 	bne	r2,zero,1000b4b0 <fputwc+0x40>
1000b4a0:	d9400015 	stw	r5,0(sp)
1000b4a4:	000690c0 	call	1000690c <__sinit>
1000b4a8:	81000017 	ldw	r4,0(r16)
1000b4ac:	d9800017 	ldw	r6,0(sp)
1000b4b0:	880b883a 	mov	r5,r17
1000b4b4:	dfc00317 	ldw	ra,12(sp)
1000b4b8:	dc400217 	ldw	r17,8(sp)
1000b4bc:	dc000117 	ldw	r16,4(sp)
1000b4c0:	dec00404 	addi	sp,sp,16
1000b4c4:	000b2ec1 	jmpi	1000b2ec <_fputwc_r>

1000b4c8 <_fstat_r>:
1000b4c8:	defffd04 	addi	sp,sp,-12
1000b4cc:	dc000015 	stw	r16,0(sp)
1000b4d0:	04040074 	movhi	r16,4097
1000b4d4:	dc400115 	stw	r17,4(sp)
1000b4d8:	84164804 	addi	r16,r16,22816
1000b4dc:	2023883a 	mov	r17,r4
1000b4e0:	2809883a 	mov	r4,r5
1000b4e4:	300b883a 	mov	r5,r6
1000b4e8:	dfc00215 	stw	ra,8(sp)
1000b4ec:	80000015 	stw	zero,0(r16)
1000b4f0:	000f1f80 	call	1000f1f8 <fstat>
1000b4f4:	00ffffc4 	movi	r3,-1
1000b4f8:	10c00526 	beq	r2,r3,1000b510 <_fstat_r+0x48>
1000b4fc:	dfc00217 	ldw	ra,8(sp)
1000b500:	dc400117 	ldw	r17,4(sp)
1000b504:	dc000017 	ldw	r16,0(sp)
1000b508:	dec00304 	addi	sp,sp,12
1000b50c:	f800283a 	ret
1000b510:	80c00017 	ldw	r3,0(r16)
1000b514:	183ff926 	beq	r3,zero,1000b4fc <__alt_data_end+0xf800b4fc>
1000b518:	88c00015 	stw	r3,0(r17)
1000b51c:	003ff706 	br	1000b4fc <__alt_data_end+0xf800b4fc>

1000b520 <_isatty_r>:
1000b520:	defffd04 	addi	sp,sp,-12
1000b524:	dc000015 	stw	r16,0(sp)
1000b528:	04040074 	movhi	r16,4097
1000b52c:	dc400115 	stw	r17,4(sp)
1000b530:	84164804 	addi	r16,r16,22816
1000b534:	2023883a 	mov	r17,r4
1000b538:	2809883a 	mov	r4,r5
1000b53c:	dfc00215 	stw	ra,8(sp)
1000b540:	80000015 	stw	zero,0(r16)
1000b544:	000f3000 	call	1000f300 <isatty>
1000b548:	00ffffc4 	movi	r3,-1
1000b54c:	10c00526 	beq	r2,r3,1000b564 <_isatty_r+0x44>
1000b550:	dfc00217 	ldw	ra,8(sp)
1000b554:	dc400117 	ldw	r17,4(sp)
1000b558:	dc000017 	ldw	r16,0(sp)
1000b55c:	dec00304 	addi	sp,sp,12
1000b560:	f800283a 	ret
1000b564:	80c00017 	ldw	r3,0(r16)
1000b568:	183ff926 	beq	r3,zero,1000b550 <__alt_data_end+0xf800b550>
1000b56c:	88c00015 	stw	r3,0(r17)
1000b570:	003ff706 	br	1000b550 <__alt_data_end+0xf800b550>

1000b574 <_lseek_r>:
1000b574:	defffd04 	addi	sp,sp,-12
1000b578:	dc000015 	stw	r16,0(sp)
1000b57c:	04040074 	movhi	r16,4097
1000b580:	dc400115 	stw	r17,4(sp)
1000b584:	84164804 	addi	r16,r16,22816
1000b588:	2023883a 	mov	r17,r4
1000b58c:	2809883a 	mov	r4,r5
1000b590:	300b883a 	mov	r5,r6
1000b594:	380d883a 	mov	r6,r7
1000b598:	dfc00215 	stw	ra,8(sp)
1000b59c:	80000015 	stw	zero,0(r16)
1000b5a0:	000f4e00 	call	1000f4e0 <lseek>
1000b5a4:	00ffffc4 	movi	r3,-1
1000b5a8:	10c00526 	beq	r2,r3,1000b5c0 <_lseek_r+0x4c>
1000b5ac:	dfc00217 	ldw	ra,8(sp)
1000b5b0:	dc400117 	ldw	r17,4(sp)
1000b5b4:	dc000017 	ldw	r16,0(sp)
1000b5b8:	dec00304 	addi	sp,sp,12
1000b5bc:	f800283a 	ret
1000b5c0:	80c00017 	ldw	r3,0(r16)
1000b5c4:	183ff926 	beq	r3,zero,1000b5ac <__alt_data_end+0xf800b5ac>
1000b5c8:	88c00015 	stw	r3,0(r17)
1000b5cc:	003ff706 	br	1000b5ac <__alt_data_end+0xf800b5ac>

1000b5d0 <_read_r>:
1000b5d0:	defffd04 	addi	sp,sp,-12
1000b5d4:	dc000015 	stw	r16,0(sp)
1000b5d8:	04040074 	movhi	r16,4097
1000b5dc:	dc400115 	stw	r17,4(sp)
1000b5e0:	84164804 	addi	r16,r16,22816
1000b5e4:	2023883a 	mov	r17,r4
1000b5e8:	2809883a 	mov	r4,r5
1000b5ec:	300b883a 	mov	r5,r6
1000b5f0:	380d883a 	mov	r6,r7
1000b5f4:	dfc00215 	stw	ra,8(sp)
1000b5f8:	80000015 	stw	zero,0(r16)
1000b5fc:	000f6c40 	call	1000f6c4 <read>
1000b600:	00ffffc4 	movi	r3,-1
1000b604:	10c00526 	beq	r2,r3,1000b61c <_read_r+0x4c>
1000b608:	dfc00217 	ldw	ra,8(sp)
1000b60c:	dc400117 	ldw	r17,4(sp)
1000b610:	dc000017 	ldw	r16,0(sp)
1000b614:	dec00304 	addi	sp,sp,12
1000b618:	f800283a 	ret
1000b61c:	80c00017 	ldw	r3,0(r16)
1000b620:	183ff926 	beq	r3,zero,1000b608 <__alt_data_end+0xf800b608>
1000b624:	88c00015 	stw	r3,0(r17)
1000b628:	003ff706 	br	1000b608 <__alt_data_end+0xf800b608>

1000b62c <__swbuf_r>:
1000b62c:	defffc04 	addi	sp,sp,-16
1000b630:	dc800215 	stw	r18,8(sp)
1000b634:	dc400115 	stw	r17,4(sp)
1000b638:	dc000015 	stw	r16,0(sp)
1000b63c:	dfc00315 	stw	ra,12(sp)
1000b640:	2025883a 	mov	r18,r4
1000b644:	2823883a 	mov	r17,r5
1000b648:	3021883a 	mov	r16,r6
1000b64c:	20000226 	beq	r4,zero,1000b658 <__swbuf_r+0x2c>
1000b650:	20800e17 	ldw	r2,56(r4)
1000b654:	10004126 	beq	r2,zero,1000b75c <__swbuf_r+0x130>
1000b658:	80c00617 	ldw	r3,24(r16)
1000b65c:	8180030b 	ldhu	r6,12(r16)
1000b660:	80c00215 	stw	r3,8(r16)
1000b664:	30c0020c 	andi	r3,r6,8
1000b668:	18003526 	beq	r3,zero,1000b740 <__swbuf_r+0x114>
1000b66c:	80c00417 	ldw	r3,16(r16)
1000b670:	18003326 	beq	r3,zero,1000b740 <__swbuf_r+0x114>
1000b674:	3088000c 	andi	r2,r6,8192
1000b678:	8c403fcc 	andi	r17,r17,255
1000b67c:	10001726 	beq	r2,zero,1000b6dc <__swbuf_r+0xb0>
1000b680:	80800017 	ldw	r2,0(r16)
1000b684:	81000517 	ldw	r4,20(r16)
1000b688:	10c7c83a 	sub	r3,r2,r3
1000b68c:	19001d0e 	bge	r3,r4,1000b704 <__swbuf_r+0xd8>
1000b690:	18c00044 	addi	r3,r3,1
1000b694:	81400217 	ldw	r5,8(r16)
1000b698:	11000044 	addi	r4,r2,1
1000b69c:	81000015 	stw	r4,0(r16)
1000b6a0:	297fffc4 	addi	r5,r5,-1
1000b6a4:	81400215 	stw	r5,8(r16)
1000b6a8:	14400005 	stb	r17,0(r2)
1000b6ac:	80800517 	ldw	r2,20(r16)
1000b6b0:	10c01d26 	beq	r2,r3,1000b728 <__swbuf_r+0xfc>
1000b6b4:	8080030b 	ldhu	r2,12(r16)
1000b6b8:	1080004c 	andi	r2,r2,1
1000b6bc:	1000181e 	bne	r2,zero,1000b720 <__swbuf_r+0xf4>
1000b6c0:	8805883a 	mov	r2,r17
1000b6c4:	dfc00317 	ldw	ra,12(sp)
1000b6c8:	dc800217 	ldw	r18,8(sp)
1000b6cc:	dc400117 	ldw	r17,4(sp)
1000b6d0:	dc000017 	ldw	r16,0(sp)
1000b6d4:	dec00404 	addi	sp,sp,16
1000b6d8:	f800283a 	ret
1000b6dc:	81001917 	ldw	r4,100(r16)
1000b6e0:	00b7ffc4 	movi	r2,-8193
1000b6e4:	31880014 	ori	r6,r6,8192
1000b6e8:	2084703a 	and	r2,r4,r2
1000b6ec:	80801915 	stw	r2,100(r16)
1000b6f0:	80800017 	ldw	r2,0(r16)
1000b6f4:	81000517 	ldw	r4,20(r16)
1000b6f8:	8180030d 	sth	r6,12(r16)
1000b6fc:	10c7c83a 	sub	r3,r2,r3
1000b700:	193fe316 	blt	r3,r4,1000b690 <__alt_data_end+0xf800b690>
1000b704:	9009883a 	mov	r4,r18
1000b708:	800b883a 	mov	r5,r16
1000b70c:	00063500 	call	10006350 <_fflush_r>
1000b710:	1000091e 	bne	r2,zero,1000b738 <__swbuf_r+0x10c>
1000b714:	80800017 	ldw	r2,0(r16)
1000b718:	00c00044 	movi	r3,1
1000b71c:	003fdd06 	br	1000b694 <__alt_data_end+0xf800b694>
1000b720:	00800284 	movi	r2,10
1000b724:	88bfe61e 	bne	r17,r2,1000b6c0 <__alt_data_end+0xf800b6c0>
1000b728:	9009883a 	mov	r4,r18
1000b72c:	800b883a 	mov	r5,r16
1000b730:	00063500 	call	10006350 <_fflush_r>
1000b734:	103fe226 	beq	r2,zero,1000b6c0 <__alt_data_end+0xf800b6c0>
1000b738:	00bfffc4 	movi	r2,-1
1000b73c:	003fe106 	br	1000b6c4 <__alt_data_end+0xf800b6c4>
1000b740:	9009883a 	mov	r4,r18
1000b744:	800b883a 	mov	r5,r16
1000b748:	00048d00 	call	100048d0 <__swsetup_r>
1000b74c:	1000051e 	bne	r2,zero,1000b764 <__swbuf_r+0x138>
1000b750:	8180030b 	ldhu	r6,12(r16)
1000b754:	80c00417 	ldw	r3,16(r16)
1000b758:	003fc606 	br	1000b674 <__alt_data_end+0xf800b674>
1000b75c:	000690c0 	call	1000690c <__sinit>
1000b760:	003fbd06 	br	1000b658 <__alt_data_end+0xf800b658>
1000b764:	80c0030b 	ldhu	r3,12(r16)
1000b768:	00bfffc4 	movi	r2,-1
1000b76c:	18c01014 	ori	r3,r3,64
1000b770:	80c0030d 	sth	r3,12(r16)
1000b774:	00c00244 	movi	r3,9
1000b778:	90c00015 	stw	r3,0(r18)
1000b77c:	003fd106 	br	1000b6c4 <__alt_data_end+0xf800b6c4>

1000b780 <__swbuf>:
1000b780:	00c40074 	movhi	r3,4097
1000b784:	18cf7704 	addi	r3,r3,15836
1000b788:	2005883a 	mov	r2,r4
1000b78c:	19000017 	ldw	r4,0(r3)
1000b790:	280d883a 	mov	r6,r5
1000b794:	100b883a 	mov	r5,r2
1000b798:	000b62c1 	jmpi	1000b62c <__swbuf_r>

1000b79c <_wcrtomb_r>:
1000b79c:	defff604 	addi	sp,sp,-40
1000b7a0:	00840074 	movhi	r2,4097
1000b7a4:	dc800815 	stw	r18,32(sp)
1000b7a8:	dc400715 	stw	r17,28(sp)
1000b7ac:	dc000615 	stw	r16,24(sp)
1000b7b0:	108f7b04 	addi	r2,r2,15852
1000b7b4:	dfc00915 	stw	ra,36(sp)
1000b7b8:	2021883a 	mov	r16,r4
1000b7bc:	3823883a 	mov	r17,r7
1000b7c0:	14800017 	ldw	r18,0(r2)
1000b7c4:	28001426 	beq	r5,zero,1000b818 <_wcrtomb_r+0x7c>
1000b7c8:	d9400415 	stw	r5,16(sp)
1000b7cc:	d9800515 	stw	r6,20(sp)
1000b7d0:	00074000 	call	10007400 <__locale_charset>
1000b7d4:	d9400417 	ldw	r5,16(sp)
1000b7d8:	d9800517 	ldw	r6,20(sp)
1000b7dc:	8009883a 	mov	r4,r16
1000b7e0:	dc400015 	stw	r17,0(sp)
1000b7e4:	100f883a 	mov	r7,r2
1000b7e8:	903ee83a 	callr	r18
1000b7ec:	00ffffc4 	movi	r3,-1
1000b7f0:	10c0031e 	bne	r2,r3,1000b800 <_wcrtomb_r+0x64>
1000b7f4:	88000015 	stw	zero,0(r17)
1000b7f8:	00c02284 	movi	r3,138
1000b7fc:	80c00015 	stw	r3,0(r16)
1000b800:	dfc00917 	ldw	ra,36(sp)
1000b804:	dc800817 	ldw	r18,32(sp)
1000b808:	dc400717 	ldw	r17,28(sp)
1000b80c:	dc000617 	ldw	r16,24(sp)
1000b810:	dec00a04 	addi	sp,sp,40
1000b814:	f800283a 	ret
1000b818:	00074000 	call	10007400 <__locale_charset>
1000b81c:	8009883a 	mov	r4,r16
1000b820:	dc400015 	stw	r17,0(sp)
1000b824:	d9400104 	addi	r5,sp,4
1000b828:	000d883a 	mov	r6,zero
1000b82c:	100f883a 	mov	r7,r2
1000b830:	903ee83a 	callr	r18
1000b834:	003fed06 	br	1000b7ec <__alt_data_end+0xf800b7ec>

1000b838 <wcrtomb>:
1000b838:	defff504 	addi	sp,sp,-44
1000b83c:	dc400515 	stw	r17,20(sp)
1000b840:	dc000415 	stw	r16,16(sp)
1000b844:	dfc00a15 	stw	ra,40(sp)
1000b848:	dd400915 	stw	r21,36(sp)
1000b84c:	dd000815 	stw	r20,32(sp)
1000b850:	dcc00715 	stw	r19,28(sp)
1000b854:	dc800615 	stw	r18,24(sp)
1000b858:	2021883a 	mov	r16,r4
1000b85c:	3023883a 	mov	r17,r6
1000b860:	20001d26 	beq	r4,zero,1000b8d8 <wcrtomb+0xa0>
1000b864:	04840074 	movhi	r18,4097
1000b868:	948f7704 	addi	r18,r18,15836
1000b86c:	00840074 	movhi	r2,4097
1000b870:	95400017 	ldw	r21,0(r18)
1000b874:	108f7b04 	addi	r2,r2,15852
1000b878:	15000017 	ldw	r20,0(r2)
1000b87c:	2827883a 	mov	r19,r5
1000b880:	00074000 	call	10007400 <__locale_charset>
1000b884:	a809883a 	mov	r4,r21
1000b888:	dc400015 	stw	r17,0(sp)
1000b88c:	800b883a 	mov	r5,r16
1000b890:	980d883a 	mov	r6,r19
1000b894:	100f883a 	mov	r7,r2
1000b898:	a03ee83a 	callr	r20
1000b89c:	00ffffc4 	movi	r3,-1
1000b8a0:	10c0041e 	bne	r2,r3,1000b8b4 <wcrtomb+0x7c>
1000b8a4:	90c00017 	ldw	r3,0(r18)
1000b8a8:	01002284 	movi	r4,138
1000b8ac:	88000015 	stw	zero,0(r17)
1000b8b0:	19000015 	stw	r4,0(r3)
1000b8b4:	dfc00a17 	ldw	ra,40(sp)
1000b8b8:	dd400917 	ldw	r21,36(sp)
1000b8bc:	dd000817 	ldw	r20,32(sp)
1000b8c0:	dcc00717 	ldw	r19,28(sp)
1000b8c4:	dc800617 	ldw	r18,24(sp)
1000b8c8:	dc400517 	ldw	r17,20(sp)
1000b8cc:	dc000417 	ldw	r16,16(sp)
1000b8d0:	dec00b04 	addi	sp,sp,44
1000b8d4:	f800283a 	ret
1000b8d8:	04840074 	movhi	r18,4097
1000b8dc:	948f7704 	addi	r18,r18,15836
1000b8e0:	00840074 	movhi	r2,4097
1000b8e4:	94c00017 	ldw	r19,0(r18)
1000b8e8:	108f7b04 	addi	r2,r2,15852
1000b8ec:	14000017 	ldw	r16,0(r2)
1000b8f0:	00074000 	call	10007400 <__locale_charset>
1000b8f4:	9809883a 	mov	r4,r19
1000b8f8:	dc400015 	stw	r17,0(sp)
1000b8fc:	d9400104 	addi	r5,sp,4
1000b900:	000d883a 	mov	r6,zero
1000b904:	100f883a 	mov	r7,r2
1000b908:	803ee83a 	callr	r16
1000b90c:	003fe306 	br	1000b89c <__alt_data_end+0xf800b89c>

1000b910 <__ascii_wctomb>:
1000b910:	28000526 	beq	r5,zero,1000b928 <__ascii_wctomb+0x18>
1000b914:	00803fc4 	movi	r2,255
1000b918:	11800536 	bltu	r2,r6,1000b930 <__ascii_wctomb+0x20>
1000b91c:	29800005 	stb	r6,0(r5)
1000b920:	00800044 	movi	r2,1
1000b924:	f800283a 	ret
1000b928:	0005883a 	mov	r2,zero
1000b92c:	f800283a 	ret
1000b930:	00802284 	movi	r2,138
1000b934:	20800015 	stw	r2,0(r4)
1000b938:	00bfffc4 	movi	r2,-1
1000b93c:	f800283a 	ret

1000b940 <_wctomb_r>:
1000b940:	00840074 	movhi	r2,4097
1000b944:	defff904 	addi	sp,sp,-28
1000b948:	108f7b04 	addi	r2,r2,15852
1000b94c:	dfc00615 	stw	ra,24(sp)
1000b950:	dc400515 	stw	r17,20(sp)
1000b954:	dc000415 	stw	r16,16(sp)
1000b958:	3823883a 	mov	r17,r7
1000b95c:	14000017 	ldw	r16,0(r2)
1000b960:	d9000115 	stw	r4,4(sp)
1000b964:	d9400215 	stw	r5,8(sp)
1000b968:	d9800315 	stw	r6,12(sp)
1000b96c:	00074000 	call	10007400 <__locale_charset>
1000b970:	d9000117 	ldw	r4,4(sp)
1000b974:	d9400217 	ldw	r5,8(sp)
1000b978:	d9800317 	ldw	r6,12(sp)
1000b97c:	dc400015 	stw	r17,0(sp)
1000b980:	100f883a 	mov	r7,r2
1000b984:	803ee83a 	callr	r16
1000b988:	dfc00617 	ldw	ra,24(sp)
1000b98c:	dc400517 	ldw	r17,20(sp)
1000b990:	dc000417 	ldw	r16,16(sp)
1000b994:	dec00704 	addi	sp,sp,28
1000b998:	f800283a 	ret

1000b99c <__muldi3>:
1000b99c:	defff604 	addi	sp,sp,-40
1000b9a0:	dd800615 	stw	r22,24(sp)
1000b9a4:	dd400515 	stw	r21,20(sp)
1000b9a8:	25bfffcc 	andi	r22,r4,65535
1000b9ac:	357fffcc 	andi	r21,r6,65535
1000b9b0:	dc400115 	stw	r17,4(sp)
1000b9b4:	2022d43a 	srli	r17,r4,16
1000b9b8:	dcc00315 	stw	r19,12(sp)
1000b9bc:	dc800215 	stw	r18,8(sp)
1000b9c0:	2027883a 	mov	r19,r4
1000b9c4:	2825883a 	mov	r18,r5
1000b9c8:	a809883a 	mov	r4,r21
1000b9cc:	b00b883a 	mov	r5,r22
1000b9d0:	dfc00915 	stw	ra,36(sp)
1000b9d4:	df000815 	stw	fp,32(sp)
1000b9d8:	ddc00715 	stw	r23,28(sp)
1000b9dc:	3839883a 	mov	fp,r7
1000b9e0:	302ed43a 	srli	r23,r6,16
1000b9e4:	dd000415 	stw	r20,16(sp)
1000b9e8:	dc000015 	stw	r16,0(sp)
1000b9ec:	3029883a 	mov	r20,r6
1000b9f0:	000c8300 	call	1000c830 <__mulsi3>
1000b9f4:	a809883a 	mov	r4,r21
1000b9f8:	880b883a 	mov	r5,r17
1000b9fc:	1021883a 	mov	r16,r2
1000ba00:	000c8300 	call	1000c830 <__mulsi3>
1000ba04:	880b883a 	mov	r5,r17
1000ba08:	b809883a 	mov	r4,r23
1000ba0c:	102b883a 	mov	r21,r2
1000ba10:	000c8300 	call	1000c830 <__mulsi3>
1000ba14:	b809883a 	mov	r4,r23
1000ba18:	b00b883a 	mov	r5,r22
1000ba1c:	1023883a 	mov	r17,r2
1000ba20:	000c8300 	call	1000c830 <__mulsi3>
1000ba24:	8012d43a 	srli	r9,r16,16
1000ba28:	a885883a 	add	r2,r21,r2
1000ba2c:	1251883a 	add	r8,r2,r9
1000ba30:	4540022e 	bgeu	r8,r21,1000ba3c <__muldi3+0xa0>
1000ba34:	00800074 	movhi	r2,1
1000ba38:	88a3883a 	add	r17,r17,r2
1000ba3c:	4006d43a 	srli	r3,r8,16
1000ba40:	4010943a 	slli	r8,r8,16
1000ba44:	9809883a 	mov	r4,r19
1000ba48:	e00b883a 	mov	r5,fp
1000ba4c:	843fffcc 	andi	r16,r16,65535
1000ba50:	88e3883a 	add	r17,r17,r3
1000ba54:	4421883a 	add	r16,r8,r16
1000ba58:	000c8300 	call	1000c830 <__mulsi3>
1000ba5c:	a009883a 	mov	r4,r20
1000ba60:	900b883a 	mov	r5,r18
1000ba64:	1027883a 	mov	r19,r2
1000ba68:	000c8300 	call	1000c830 <__mulsi3>
1000ba6c:	9885883a 	add	r2,r19,r2
1000ba70:	1447883a 	add	r3,r2,r17
1000ba74:	8005883a 	mov	r2,r16
1000ba78:	dfc00917 	ldw	ra,36(sp)
1000ba7c:	df000817 	ldw	fp,32(sp)
1000ba80:	ddc00717 	ldw	r23,28(sp)
1000ba84:	dd800617 	ldw	r22,24(sp)
1000ba88:	dd400517 	ldw	r21,20(sp)
1000ba8c:	dd000417 	ldw	r20,16(sp)
1000ba90:	dcc00317 	ldw	r19,12(sp)
1000ba94:	dc800217 	ldw	r18,8(sp)
1000ba98:	dc400117 	ldw	r17,4(sp)
1000ba9c:	dc000017 	ldw	r16,0(sp)
1000baa0:	dec00a04 	addi	sp,sp,40
1000baa4:	f800283a 	ret

1000baa8 <__udivdi3>:
1000baa8:	defff504 	addi	sp,sp,-44
1000baac:	dcc00415 	stw	r19,16(sp)
1000bab0:	dc000115 	stw	r16,4(sp)
1000bab4:	dfc00a15 	stw	ra,40(sp)
1000bab8:	df000915 	stw	fp,36(sp)
1000babc:	ddc00815 	stw	r23,32(sp)
1000bac0:	dd800715 	stw	r22,28(sp)
1000bac4:	dd400615 	stw	r21,24(sp)
1000bac8:	dd000515 	stw	r20,20(sp)
1000bacc:	dc800315 	stw	r18,12(sp)
1000bad0:	dc400215 	stw	r17,8(sp)
1000bad4:	2027883a 	mov	r19,r4
1000bad8:	2821883a 	mov	r16,r5
1000badc:	3800471e 	bne	r7,zero,1000bbfc <__udivdi3+0x154>
1000bae0:	3025883a 	mov	r18,r6
1000bae4:	2023883a 	mov	r17,r4
1000bae8:	2980592e 	bgeu	r5,r6,1000bc50 <__udivdi3+0x1a8>
1000baec:	00bfffd4 	movui	r2,65535
1000baf0:	2829883a 	mov	r20,r5
1000baf4:	1180b236 	bltu	r2,r6,1000bdc0 <__udivdi3+0x318>
1000baf8:	00803fc4 	movi	r2,255
1000bafc:	1181622e 	bgeu	r2,r6,1000c088 <__udivdi3+0x5e0>
1000bb00:	00800204 	movi	r2,8
1000bb04:	1007883a 	mov	r3,r2
1000bb08:	3084d83a 	srl	r2,r6,r2
1000bb0c:	01040074 	movhi	r4,4097
1000bb10:	21087e04 	addi	r4,r4,8696
1000bb14:	2085883a 	add	r2,r4,r2
1000bb18:	11000003 	ldbu	r4,0(r2)
1000bb1c:	20c9883a 	add	r4,r4,r3
1000bb20:	00c00804 	movi	r3,32
1000bb24:	1907c83a 	sub	r3,r3,r4
1000bb28:	18000526 	beq	r3,zero,1000bb40 <__udivdi3+0x98>
1000bb2c:	80e0983a 	sll	r16,r16,r3
1000bb30:	9908d83a 	srl	r4,r19,r4
1000bb34:	30e4983a 	sll	r18,r6,r3
1000bb38:	98e2983a 	sll	r17,r19,r3
1000bb3c:	8128b03a 	or	r20,r16,r4
1000bb40:	902ad43a 	srli	r21,r18,16
1000bb44:	a009883a 	mov	r4,r20
1000bb48:	95bfffcc 	andi	r22,r18,65535
1000bb4c:	a80b883a 	mov	r5,r21
1000bb50:	000c8280 	call	1000c828 <__umodsi3>
1000bb54:	a009883a 	mov	r4,r20
1000bb58:	a80b883a 	mov	r5,r21
1000bb5c:	102f883a 	mov	r23,r2
1000bb60:	000c8200 	call	1000c820 <__udivsi3>
1000bb64:	1009883a 	mov	r4,r2
1000bb68:	b00b883a 	mov	r5,r22
1000bb6c:	1021883a 	mov	r16,r2
1000bb70:	000c8300 	call	1000c830 <__mulsi3>
1000bb74:	b82e943a 	slli	r23,r23,16
1000bb78:	8808d43a 	srli	r4,r17,16
1000bb7c:	b906b03a 	or	r3,r23,r4
1000bb80:	1880052e 	bgeu	r3,r2,1000bb98 <__udivdi3+0xf0>
1000bb84:	1c87883a 	add	r3,r3,r18
1000bb88:	813fffc4 	addi	r4,r16,-1
1000bb8c:	1c800136 	bltu	r3,r18,1000bb94 <__udivdi3+0xec>
1000bb90:	18815236 	bltu	r3,r2,1000c0dc <__udivdi3+0x634>
1000bb94:	2021883a 	mov	r16,r4
1000bb98:	18a7c83a 	sub	r19,r3,r2
1000bb9c:	9809883a 	mov	r4,r19
1000bba0:	a80b883a 	mov	r5,r21
1000bba4:	000c8280 	call	1000c828 <__umodsi3>
1000bba8:	1029883a 	mov	r20,r2
1000bbac:	9809883a 	mov	r4,r19
1000bbb0:	a80b883a 	mov	r5,r21
1000bbb4:	a028943a 	slli	r20,r20,16
1000bbb8:	000c8200 	call	1000c820 <__udivsi3>
1000bbbc:	1009883a 	mov	r4,r2
1000bbc0:	b00b883a 	mov	r5,r22
1000bbc4:	8c7fffcc 	andi	r17,r17,65535
1000bbc8:	1027883a 	mov	r19,r2
1000bbcc:	a462b03a 	or	r17,r20,r17
1000bbd0:	000c8300 	call	1000c830 <__mulsi3>
1000bbd4:	8880052e 	bgeu	r17,r2,1000bbec <__udivdi3+0x144>
1000bbd8:	8ca3883a 	add	r17,r17,r18
1000bbdc:	98ffffc4 	addi	r3,r19,-1
1000bbe0:	8c811036 	bltu	r17,r18,1000c024 <__udivdi3+0x57c>
1000bbe4:	88810f2e 	bgeu	r17,r2,1000c024 <__udivdi3+0x57c>
1000bbe8:	9cffff84 	addi	r19,r19,-2
1000bbec:	8020943a 	slli	r16,r16,16
1000bbf0:	0007883a 	mov	r3,zero
1000bbf4:	9c04b03a 	or	r2,r19,r16
1000bbf8:	00006006 	br	1000bd7c <__udivdi3+0x2d4>
1000bbfc:	29c05d36 	bltu	r5,r7,1000bd74 <__udivdi3+0x2cc>
1000bc00:	00bfffd4 	movui	r2,65535
1000bc04:	11c0692e 	bgeu	r2,r7,1000bdac <__udivdi3+0x304>
1000bc08:	00804034 	movhi	r2,256
1000bc0c:	10bfffc4 	addi	r2,r2,-1
1000bc10:	11c10e2e 	bgeu	r2,r7,1000c04c <__udivdi3+0x5a4>
1000bc14:	01400604 	movi	r5,24
1000bc18:	2811883a 	mov	r8,r5
1000bc1c:	394ad83a 	srl	r5,r7,r5
1000bc20:	00840074 	movhi	r2,4097
1000bc24:	10887e04 	addi	r2,r2,8696
1000bc28:	114b883a 	add	r5,r2,r5
1000bc2c:	29400003 	ldbu	r5,0(r5)
1000bc30:	00c00804 	movi	r3,32
1000bc34:	2a0b883a 	add	r5,r5,r8
1000bc38:	196fc83a 	sub	r23,r3,r5
1000bc3c:	b8006b1e 	bne	r23,zero,1000bdec <__udivdi3+0x344>
1000bc40:	3c011436 	bltu	r7,r16,1000c094 <__udivdi3+0x5ec>
1000bc44:	9985403a 	cmpgeu	r2,r19,r6
1000bc48:	0007883a 	mov	r3,zero
1000bc4c:	00004b06 	br	1000bd7c <__udivdi3+0x2d4>
1000bc50:	3000041e 	bne	r6,zero,1000bc64 <__udivdi3+0x1bc>
1000bc54:	01000044 	movi	r4,1
1000bc58:	000b883a 	mov	r5,zero
1000bc5c:	000c8200 	call	1000c820 <__udivsi3>
1000bc60:	1025883a 	mov	r18,r2
1000bc64:	00bfffd4 	movui	r2,65535
1000bc68:	14805b2e 	bgeu	r2,r18,1000bdd8 <__udivdi3+0x330>
1000bc6c:	00804034 	movhi	r2,256
1000bc70:	10bfffc4 	addi	r2,r2,-1
1000bc74:	1480fe2e 	bgeu	r2,r18,1000c070 <__udivdi3+0x5c8>
1000bc78:	00800604 	movi	r2,24
1000bc7c:	1007883a 	mov	r3,r2
1000bc80:	9084d83a 	srl	r2,r18,r2
1000bc84:	01040074 	movhi	r4,4097
1000bc88:	21087e04 	addi	r4,r4,8696
1000bc8c:	2085883a 	add	r2,r4,r2
1000bc90:	11800003 	ldbu	r6,0(r2)
1000bc94:	01c00804 	movi	r7,32
1000bc98:	30c7883a 	add	r3,r6,r3
1000bc9c:	38cfc83a 	sub	r7,r7,r3
1000bca0:	3800a71e 	bne	r7,zero,1000bf40 <__udivdi3+0x498>
1000bca4:	9028d43a 	srli	r20,r18,16
1000bca8:	84a1c83a 	sub	r16,r16,r18
1000bcac:	957fffcc 	andi	r21,r18,65535
1000bcb0:	00c00044 	movi	r3,1
1000bcb4:	8009883a 	mov	r4,r16
1000bcb8:	a00b883a 	mov	r5,r20
1000bcbc:	d8c00015 	stw	r3,0(sp)
1000bcc0:	000c8280 	call	1000c828 <__umodsi3>
1000bcc4:	8009883a 	mov	r4,r16
1000bcc8:	a00b883a 	mov	r5,r20
1000bccc:	102d883a 	mov	r22,r2
1000bcd0:	000c8200 	call	1000c820 <__udivsi3>
1000bcd4:	1009883a 	mov	r4,r2
1000bcd8:	a80b883a 	mov	r5,r21
1000bcdc:	1021883a 	mov	r16,r2
1000bce0:	000c8300 	call	1000c830 <__mulsi3>
1000bce4:	b02c943a 	slli	r22,r22,16
1000bce8:	880ed43a 	srli	r7,r17,16
1000bcec:	d8c00017 	ldw	r3,0(sp)
1000bcf0:	b1ccb03a 	or	r6,r22,r7
1000bcf4:	3080052e 	bgeu	r6,r2,1000bd0c <__udivdi3+0x264>
1000bcf8:	348d883a 	add	r6,r6,r18
1000bcfc:	813fffc4 	addi	r4,r16,-1
1000bd00:	34800136 	bltu	r6,r18,1000bd08 <__udivdi3+0x260>
1000bd04:	3080f236 	bltu	r6,r2,1000c0d0 <__udivdi3+0x628>
1000bd08:	2021883a 	mov	r16,r4
1000bd0c:	30a7c83a 	sub	r19,r6,r2
1000bd10:	9809883a 	mov	r4,r19
1000bd14:	a00b883a 	mov	r5,r20
1000bd18:	d8c00015 	stw	r3,0(sp)
1000bd1c:	000c8280 	call	1000c828 <__umodsi3>
1000bd20:	102d883a 	mov	r22,r2
1000bd24:	9809883a 	mov	r4,r19
1000bd28:	a00b883a 	mov	r5,r20
1000bd2c:	b02c943a 	slli	r22,r22,16
1000bd30:	000c8200 	call	1000c820 <__udivsi3>
1000bd34:	1009883a 	mov	r4,r2
1000bd38:	a80b883a 	mov	r5,r21
1000bd3c:	8c7fffcc 	andi	r17,r17,65535
1000bd40:	1027883a 	mov	r19,r2
1000bd44:	b462b03a 	or	r17,r22,r17
1000bd48:	000c8300 	call	1000c830 <__mulsi3>
1000bd4c:	d8c00017 	ldw	r3,0(sp)
1000bd50:	8880052e 	bgeu	r17,r2,1000bd68 <__udivdi3+0x2c0>
1000bd54:	8ca3883a 	add	r17,r17,r18
1000bd58:	993fffc4 	addi	r4,r19,-1
1000bd5c:	8c80af36 	bltu	r17,r18,1000c01c <__udivdi3+0x574>
1000bd60:	8880ae2e 	bgeu	r17,r2,1000c01c <__udivdi3+0x574>
1000bd64:	9cffff84 	addi	r19,r19,-2
1000bd68:	8020943a 	slli	r16,r16,16
1000bd6c:	9c04b03a 	or	r2,r19,r16
1000bd70:	00000206 	br	1000bd7c <__udivdi3+0x2d4>
1000bd74:	0007883a 	mov	r3,zero
1000bd78:	0005883a 	mov	r2,zero
1000bd7c:	dfc00a17 	ldw	ra,40(sp)
1000bd80:	df000917 	ldw	fp,36(sp)
1000bd84:	ddc00817 	ldw	r23,32(sp)
1000bd88:	dd800717 	ldw	r22,28(sp)
1000bd8c:	dd400617 	ldw	r21,24(sp)
1000bd90:	dd000517 	ldw	r20,20(sp)
1000bd94:	dcc00417 	ldw	r19,16(sp)
1000bd98:	dc800317 	ldw	r18,12(sp)
1000bd9c:	dc400217 	ldw	r17,8(sp)
1000bda0:	dc000117 	ldw	r16,4(sp)
1000bda4:	dec00b04 	addi	sp,sp,44
1000bda8:	f800283a 	ret
1000bdac:	00803fc4 	movi	r2,255
1000bdb0:	11c0a92e 	bgeu	r2,r7,1000c058 <__udivdi3+0x5b0>
1000bdb4:	01400204 	movi	r5,8
1000bdb8:	2811883a 	mov	r8,r5
1000bdbc:	003f9706 	br	1000bc1c <__alt_data_end+0xf800bc1c>
1000bdc0:	00804034 	movhi	r2,256
1000bdc4:	10bfffc4 	addi	r2,r2,-1
1000bdc8:	1180a62e 	bgeu	r2,r6,1000c064 <__udivdi3+0x5bc>
1000bdcc:	00800604 	movi	r2,24
1000bdd0:	1007883a 	mov	r3,r2
1000bdd4:	003f4c06 	br	1000bb08 <__alt_data_end+0xf800bb08>
1000bdd8:	00803fc4 	movi	r2,255
1000bddc:	1480a72e 	bgeu	r2,r18,1000c07c <__udivdi3+0x5d4>
1000bde0:	00800204 	movi	r2,8
1000bde4:	1007883a 	mov	r3,r2
1000bde8:	003fa506 	br	1000bc80 <__alt_data_end+0xf800bc80>
1000bdec:	3178d83a 	srl	fp,r6,r5
1000bdf0:	3dce983a 	sll	r7,r7,r23
1000bdf4:	8168d83a 	srl	r20,r16,r5
1000bdf8:	9950d83a 	srl	r8,r19,r5
1000bdfc:	3f38b03a 	or	fp,r7,fp
1000be00:	e024d43a 	srli	r18,fp,16
1000be04:	85e0983a 	sll	r16,r16,r23
1000be08:	a009883a 	mov	r4,r20
1000be0c:	900b883a 	mov	r5,r18
1000be10:	8220b03a 	or	r16,r16,r8
1000be14:	35ea983a 	sll	r21,r6,r23
1000be18:	000c8280 	call	1000c828 <__umodsi3>
1000be1c:	a009883a 	mov	r4,r20
1000be20:	900b883a 	mov	r5,r18
1000be24:	1023883a 	mov	r17,r2
1000be28:	e5bfffcc 	andi	r22,fp,65535
1000be2c:	000c8200 	call	1000c820 <__udivsi3>
1000be30:	1009883a 	mov	r4,r2
1000be34:	b00b883a 	mov	r5,r22
1000be38:	1029883a 	mov	r20,r2
1000be3c:	000c8300 	call	1000c830 <__mulsi3>
1000be40:	8806943a 	slli	r3,r17,16
1000be44:	8014d43a 	srli	r10,r16,16
1000be48:	1a92b03a 	or	r9,r3,r10
1000be4c:	4880042e 	bgeu	r9,r2,1000be60 <__udivdi3+0x3b8>
1000be50:	4f13883a 	add	r9,r9,fp
1000be54:	a0ffffc4 	addi	r3,r20,-1
1000be58:	4f00952e 	bgeu	r9,fp,1000c0b0 <__udivdi3+0x608>
1000be5c:	1829883a 	mov	r20,r3
1000be60:	48a3c83a 	sub	r17,r9,r2
1000be64:	8809883a 	mov	r4,r17
1000be68:	900b883a 	mov	r5,r18
1000be6c:	000c8280 	call	1000c828 <__umodsi3>
1000be70:	8809883a 	mov	r4,r17
1000be74:	900b883a 	mov	r5,r18
1000be78:	d8800015 	stw	r2,0(sp)
1000be7c:	000c8200 	call	1000c820 <__udivsi3>
1000be80:	1009883a 	mov	r4,r2
1000be84:	b00b883a 	mov	r5,r22
1000be88:	1023883a 	mov	r17,r2
1000be8c:	000c8300 	call	1000c830 <__mulsi3>
1000be90:	d8c00017 	ldw	r3,0(sp)
1000be94:	823fffcc 	andi	r8,r16,65535
1000be98:	1806943a 	slli	r3,r3,16
1000be9c:	1a20b03a 	or	r16,r3,r8
1000bea0:	8080042e 	bgeu	r16,r2,1000beb4 <__udivdi3+0x40c>
1000bea4:	8721883a 	add	r16,r16,fp
1000bea8:	88ffffc4 	addi	r3,r17,-1
1000beac:	87007c2e 	bgeu	r16,fp,1000c0a0 <__udivdi3+0x5f8>
1000beb0:	1823883a 	mov	r17,r3
1000beb4:	a028943a 	slli	r20,r20,16
1000beb8:	acbfffcc 	andi	r18,r21,65535
1000bebc:	900b883a 	mov	r5,r18
1000bec0:	8d28b03a 	or	r20,r17,r20
1000bec4:	a022d43a 	srli	r17,r20,16
1000bec8:	a5bfffcc 	andi	r22,r20,65535
1000becc:	b009883a 	mov	r4,r22
1000bed0:	a82ad43a 	srli	r21,r21,16
1000bed4:	80a1c83a 	sub	r16,r16,r2
1000bed8:	000c8300 	call	1000c830 <__mulsi3>
1000bedc:	8809883a 	mov	r4,r17
1000bee0:	900b883a 	mov	r5,r18
1000bee4:	1039883a 	mov	fp,r2
1000bee8:	000c8300 	call	1000c830 <__mulsi3>
1000beec:	8809883a 	mov	r4,r17
1000bef0:	a80b883a 	mov	r5,r21
1000bef4:	1025883a 	mov	r18,r2
1000bef8:	000c8300 	call	1000c830 <__mulsi3>
1000befc:	b009883a 	mov	r4,r22
1000bf00:	a80b883a 	mov	r5,r21
1000bf04:	1023883a 	mov	r17,r2
1000bf08:	000c8300 	call	1000c830 <__mulsi3>
1000bf0c:	e006d43a 	srli	r3,fp,16
1000bf10:	9085883a 	add	r2,r18,r2
1000bf14:	10c7883a 	add	r3,r2,r3
1000bf18:	1c80022e 	bgeu	r3,r18,1000bf24 <__udivdi3+0x47c>
1000bf1c:	00800074 	movhi	r2,1
1000bf20:	88a3883a 	add	r17,r17,r2
1000bf24:	1808d43a 	srli	r4,r3,16
1000bf28:	8909883a 	add	r4,r17,r4
1000bf2c:	81004436 	bltu	r16,r4,1000c040 <__udivdi3+0x598>
1000bf30:	81003e26 	beq	r16,r4,1000c02c <__udivdi3+0x584>
1000bf34:	a005883a 	mov	r2,r20
1000bf38:	0007883a 	mov	r3,zero
1000bf3c:	003f8f06 	br	1000bd7c <__alt_data_end+0xf800bd7c>
1000bf40:	91e4983a 	sll	r18,r18,r7
1000bf44:	80eed83a 	srl	r23,r16,r3
1000bf48:	81cc983a 	sll	r6,r16,r7
1000bf4c:	9028d43a 	srli	r20,r18,16
1000bf50:	98c6d83a 	srl	r3,r19,r3
1000bf54:	b809883a 	mov	r4,r23
1000bf58:	a00b883a 	mov	r5,r20
1000bf5c:	30ecb03a 	or	r22,r6,r3
1000bf60:	99e2983a 	sll	r17,r19,r7
1000bf64:	000c8280 	call	1000c828 <__umodsi3>
1000bf68:	b809883a 	mov	r4,r23
1000bf6c:	a00b883a 	mov	r5,r20
1000bf70:	1021883a 	mov	r16,r2
1000bf74:	957fffcc 	andi	r21,r18,65535
1000bf78:	000c8200 	call	1000c820 <__udivsi3>
1000bf7c:	a80b883a 	mov	r5,r21
1000bf80:	1009883a 	mov	r4,r2
1000bf84:	102f883a 	mov	r23,r2
1000bf88:	000c8300 	call	1000c830 <__mulsi3>
1000bf8c:	8020943a 	slli	r16,r16,16
1000bf90:	b00ad43a 	srli	r5,r22,16
1000bf94:	814cb03a 	or	r6,r16,r5
1000bf98:	3080062e 	bgeu	r6,r2,1000bfb4 <__udivdi3+0x50c>
1000bf9c:	348d883a 	add	r6,r6,r18
1000bfa0:	b8ffffc4 	addi	r3,r23,-1
1000bfa4:	34804836 	bltu	r6,r18,1000c0c8 <__udivdi3+0x620>
1000bfa8:	3080472e 	bgeu	r6,r2,1000c0c8 <__udivdi3+0x620>
1000bfac:	bdffff84 	addi	r23,r23,-2
1000bfb0:	348d883a 	add	r6,r6,r18
1000bfb4:	30a7c83a 	sub	r19,r6,r2
1000bfb8:	9809883a 	mov	r4,r19
1000bfbc:	a00b883a 	mov	r5,r20
1000bfc0:	000c8280 	call	1000c828 <__umodsi3>
1000bfc4:	9809883a 	mov	r4,r19
1000bfc8:	a00b883a 	mov	r5,r20
1000bfcc:	1039883a 	mov	fp,r2
1000bfd0:	000c8200 	call	1000c820 <__udivsi3>
1000bfd4:	1009883a 	mov	r4,r2
1000bfd8:	a80b883a 	mov	r5,r21
1000bfdc:	e038943a 	slli	fp,fp,16
1000bfe0:	1027883a 	mov	r19,r2
1000bfe4:	000c8300 	call	1000c830 <__mulsi3>
1000bfe8:	b1bfffcc 	andi	r6,r22,65535
1000bfec:	e18cb03a 	or	r6,fp,r6
1000bff0:	3080062e 	bgeu	r6,r2,1000c00c <__udivdi3+0x564>
1000bff4:	348d883a 	add	r6,r6,r18
1000bff8:	98ffffc4 	addi	r3,r19,-1
1000bffc:	34803036 	bltu	r6,r18,1000c0c0 <__udivdi3+0x618>
1000c000:	30802f2e 	bgeu	r6,r2,1000c0c0 <__udivdi3+0x618>
1000c004:	9cffff84 	addi	r19,r19,-2
1000c008:	348d883a 	add	r6,r6,r18
1000c00c:	b82e943a 	slli	r23,r23,16
1000c010:	30a1c83a 	sub	r16,r6,r2
1000c014:	9dc6b03a 	or	r3,r19,r23
1000c018:	003f2606 	br	1000bcb4 <__alt_data_end+0xf800bcb4>
1000c01c:	2027883a 	mov	r19,r4
1000c020:	003f5106 	br	1000bd68 <__alt_data_end+0xf800bd68>
1000c024:	1827883a 	mov	r19,r3
1000c028:	003ef006 	br	1000bbec <__alt_data_end+0xf800bbec>
1000c02c:	1808943a 	slli	r4,r3,16
1000c030:	9dc6983a 	sll	r3,r19,r23
1000c034:	e73fffcc 	andi	fp,fp,65535
1000c038:	2709883a 	add	r4,r4,fp
1000c03c:	193fbd2e 	bgeu	r3,r4,1000bf34 <__alt_data_end+0xf800bf34>
1000c040:	a0bfffc4 	addi	r2,r20,-1
1000c044:	0007883a 	mov	r3,zero
1000c048:	003f4c06 	br	1000bd7c <__alt_data_end+0xf800bd7c>
1000c04c:	01400404 	movi	r5,16
1000c050:	2811883a 	mov	r8,r5
1000c054:	003ef106 	br	1000bc1c <__alt_data_end+0xf800bc1c>
1000c058:	000b883a 	mov	r5,zero
1000c05c:	0011883a 	mov	r8,zero
1000c060:	003eee06 	br	1000bc1c <__alt_data_end+0xf800bc1c>
1000c064:	00800404 	movi	r2,16
1000c068:	1007883a 	mov	r3,r2
1000c06c:	003ea606 	br	1000bb08 <__alt_data_end+0xf800bb08>
1000c070:	00800404 	movi	r2,16
1000c074:	1007883a 	mov	r3,r2
1000c078:	003f0106 	br	1000bc80 <__alt_data_end+0xf800bc80>
1000c07c:	0005883a 	mov	r2,zero
1000c080:	0007883a 	mov	r3,zero
1000c084:	003efe06 	br	1000bc80 <__alt_data_end+0xf800bc80>
1000c088:	0005883a 	mov	r2,zero
1000c08c:	0007883a 	mov	r3,zero
1000c090:	003e9d06 	br	1000bb08 <__alt_data_end+0xf800bb08>
1000c094:	0007883a 	mov	r3,zero
1000c098:	00800044 	movi	r2,1
1000c09c:	003f3706 	br	1000bd7c <__alt_data_end+0xf800bd7c>
1000c0a0:	80bf832e 	bgeu	r16,r2,1000beb0 <__alt_data_end+0xf800beb0>
1000c0a4:	8c7fff84 	addi	r17,r17,-2
1000c0a8:	8721883a 	add	r16,r16,fp
1000c0ac:	003f8106 	br	1000beb4 <__alt_data_end+0xf800beb4>
1000c0b0:	48bf6a2e 	bgeu	r9,r2,1000be5c <__alt_data_end+0xf800be5c>
1000c0b4:	a53fff84 	addi	r20,r20,-2
1000c0b8:	4f13883a 	add	r9,r9,fp
1000c0bc:	003f6806 	br	1000be60 <__alt_data_end+0xf800be60>
1000c0c0:	1827883a 	mov	r19,r3
1000c0c4:	003fd106 	br	1000c00c <__alt_data_end+0xf800c00c>
1000c0c8:	182f883a 	mov	r23,r3
1000c0cc:	003fb906 	br	1000bfb4 <__alt_data_end+0xf800bfb4>
1000c0d0:	843fff84 	addi	r16,r16,-2
1000c0d4:	348d883a 	add	r6,r6,r18
1000c0d8:	003f0c06 	br	1000bd0c <__alt_data_end+0xf800bd0c>
1000c0dc:	843fff84 	addi	r16,r16,-2
1000c0e0:	1c87883a 	add	r3,r3,r18
1000c0e4:	003eac06 	br	1000bb98 <__alt_data_end+0xf800bb98>

1000c0e8 <__umoddi3>:
1000c0e8:	defff404 	addi	sp,sp,-48
1000c0ec:	dd800815 	stw	r22,32(sp)
1000c0f0:	dc400315 	stw	r17,12(sp)
1000c0f4:	dc000215 	stw	r16,8(sp)
1000c0f8:	dfc00b15 	stw	ra,44(sp)
1000c0fc:	df000a15 	stw	fp,40(sp)
1000c100:	ddc00915 	stw	r23,36(sp)
1000c104:	dd400715 	stw	r21,28(sp)
1000c108:	dd000615 	stw	r20,24(sp)
1000c10c:	dcc00515 	stw	r19,20(sp)
1000c110:	dc800415 	stw	r18,16(sp)
1000c114:	2021883a 	mov	r16,r4
1000c118:	2823883a 	mov	r17,r5
1000c11c:	282d883a 	mov	r22,r5
1000c120:	38003c1e 	bne	r7,zero,1000c214 <__umoddi3+0x12c>
1000c124:	3027883a 	mov	r19,r6
1000c128:	2029883a 	mov	r20,r4
1000c12c:	2980522e 	bgeu	r5,r6,1000c278 <__umoddi3+0x190>
1000c130:	00bfffd4 	movui	r2,65535
1000c134:	1180a436 	bltu	r2,r6,1000c3c8 <__umoddi3+0x2e0>
1000c138:	00803fc4 	movi	r2,255
1000c13c:	11815e2e 	bgeu	r2,r6,1000c6b8 <__umoddi3+0x5d0>
1000c140:	01400204 	movi	r5,8
1000c144:	2805883a 	mov	r2,r5
1000c148:	314ad83a 	srl	r5,r6,r5
1000c14c:	00c40074 	movhi	r3,4097
1000c150:	18c87e04 	addi	r3,r3,8696
1000c154:	194b883a 	add	r5,r3,r5
1000c158:	29000003 	ldbu	r4,0(r5)
1000c15c:	2089883a 	add	r4,r4,r2
1000c160:	00800804 	movi	r2,32
1000c164:	1105c83a 	sub	r2,r2,r4
1000c168:	10010c26 	beq	r2,zero,1000c59c <__umoddi3+0x4b4>
1000c16c:	88a2983a 	sll	r17,r17,r2
1000c170:	8108d83a 	srl	r4,r16,r4
1000c174:	30a6983a 	sll	r19,r6,r2
1000c178:	80a8983a 	sll	r20,r16,r2
1000c17c:	1025883a 	mov	r18,r2
1000c180:	892cb03a 	or	r22,r17,r4
1000c184:	9822d43a 	srli	r17,r19,16
1000c188:	b009883a 	mov	r4,r22
1000c18c:	9d7fffcc 	andi	r21,r19,65535
1000c190:	880b883a 	mov	r5,r17
1000c194:	000c8280 	call	1000c828 <__umodsi3>
1000c198:	b009883a 	mov	r4,r22
1000c19c:	880b883a 	mov	r5,r17
1000c1a0:	102f883a 	mov	r23,r2
1000c1a4:	000c8200 	call	1000c820 <__udivsi3>
1000c1a8:	1009883a 	mov	r4,r2
1000c1ac:	a80b883a 	mov	r5,r21
1000c1b0:	000c8300 	call	1000c830 <__mulsi3>
1000c1b4:	b82e943a 	slli	r23,r23,16
1000c1b8:	a008d43a 	srli	r4,r20,16
1000c1bc:	b906b03a 	or	r3,r23,r4
1000c1c0:	1880042e 	bgeu	r3,r2,1000c1d4 <__umoddi3+0xec>
1000c1c4:	1cc7883a 	add	r3,r3,r19
1000c1c8:	1cc00236 	bltu	r3,r19,1000c1d4 <__umoddi3+0xec>
1000c1cc:	1880012e 	bgeu	r3,r2,1000c1d4 <__umoddi3+0xec>
1000c1d0:	1cc7883a 	add	r3,r3,r19
1000c1d4:	18a1c83a 	sub	r16,r3,r2
1000c1d8:	8009883a 	mov	r4,r16
1000c1dc:	880b883a 	mov	r5,r17
1000c1e0:	000c8280 	call	1000c828 <__umodsi3>
1000c1e4:	8009883a 	mov	r4,r16
1000c1e8:	880b883a 	mov	r5,r17
1000c1ec:	102d883a 	mov	r22,r2
1000c1f0:	000c8200 	call	1000c820 <__udivsi3>
1000c1f4:	1009883a 	mov	r4,r2
1000c1f8:	a80b883a 	mov	r5,r21
1000c1fc:	b02c943a 	slli	r22,r22,16
1000c200:	000c8300 	call	1000c830 <__mulsi3>
1000c204:	a13fffcc 	andi	r4,r20,65535
1000c208:	b106b03a 	or	r3,r22,r4
1000c20c:	1880572e 	bgeu	r3,r2,1000c36c <__umoddi3+0x284>
1000c210:	00005206 	br	1000c35c <__umoddi3+0x274>
1000c214:	29c05936 	bltu	r5,r7,1000c37c <__umoddi3+0x294>
1000c218:	00bfffd4 	movui	r2,65535
1000c21c:	11c0652e 	bgeu	r2,r7,1000c3b4 <__umoddi3+0x2cc>
1000c220:	00804034 	movhi	r2,256
1000c224:	10bfffc4 	addi	r2,r2,-1
1000c228:	11c1172e 	bgeu	r2,r7,1000c688 <__umoddi3+0x5a0>
1000c22c:	01400604 	movi	r5,24
1000c230:	282b883a 	mov	r21,r5
1000c234:	394ad83a 	srl	r5,r7,r5
1000c238:	00c40074 	movhi	r3,4097
1000c23c:	18c87e04 	addi	r3,r3,8696
1000c240:	194b883a 	add	r5,r3,r5
1000c244:	28800003 	ldbu	r2,0(r5)
1000c248:	00c00804 	movi	r3,32
1000c24c:	156b883a 	add	r21,r2,r21
1000c250:	1d69c83a 	sub	r20,r3,r21
1000c254:	a000671e 	bne	r20,zero,1000c3f4 <__umoddi3+0x30c>
1000c258:	3c400136 	bltu	r7,r17,1000c260 <__umoddi3+0x178>
1000c25c:	81812336 	bltu	r16,r6,1000c6ec <__umoddi3+0x604>
1000c260:	8185c83a 	sub	r2,r16,r6
1000c264:	89e3c83a 	sub	r17,r17,r7
1000c268:	8087803a 	cmpltu	r3,r16,r2
1000c26c:	88edc83a 	sub	r22,r17,r3
1000c270:	b007883a 	mov	r3,r22
1000c274:	00004306 	br	1000c384 <__umoddi3+0x29c>
1000c278:	3000041e 	bne	r6,zero,1000c28c <__umoddi3+0x1a4>
1000c27c:	01000044 	movi	r4,1
1000c280:	000b883a 	mov	r5,zero
1000c284:	000c8200 	call	1000c820 <__udivsi3>
1000c288:	1027883a 	mov	r19,r2
1000c28c:	00bfffd4 	movui	r2,65535
1000c290:	14c0532e 	bgeu	r2,r19,1000c3e0 <__umoddi3+0x2f8>
1000c294:	00804034 	movhi	r2,256
1000c298:	10bfffc4 	addi	r2,r2,-1
1000c29c:	14c1032e 	bgeu	r2,r19,1000c6ac <__umoddi3+0x5c4>
1000c2a0:	00800604 	movi	r2,24
1000c2a4:	1007883a 	mov	r3,r2
1000c2a8:	9884d83a 	srl	r2,r19,r2
1000c2ac:	01040074 	movhi	r4,4097
1000c2b0:	21087e04 	addi	r4,r4,8696
1000c2b4:	2085883a 	add	r2,r4,r2
1000c2b8:	11000003 	ldbu	r4,0(r2)
1000c2bc:	00800804 	movi	r2,32
1000c2c0:	20c7883a 	add	r3,r4,r3
1000c2c4:	10c5c83a 	sub	r2,r2,r3
1000c2c8:	1000b61e 	bne	r2,zero,1000c5a4 <__umoddi3+0x4bc>
1000c2cc:	982ad43a 	srli	r21,r19,16
1000c2d0:	8ce3c83a 	sub	r17,r17,r19
1000c2d4:	9dbfffcc 	andi	r22,r19,65535
1000c2d8:	0025883a 	mov	r18,zero
1000c2dc:	8809883a 	mov	r4,r17
1000c2e0:	a80b883a 	mov	r5,r21
1000c2e4:	000c8280 	call	1000c828 <__umodsi3>
1000c2e8:	8809883a 	mov	r4,r17
1000c2ec:	a80b883a 	mov	r5,r21
1000c2f0:	102f883a 	mov	r23,r2
1000c2f4:	000c8200 	call	1000c820 <__udivsi3>
1000c2f8:	1009883a 	mov	r4,r2
1000c2fc:	b00b883a 	mov	r5,r22
1000c300:	000c8300 	call	1000c830 <__mulsi3>
1000c304:	b82e943a 	slli	r23,r23,16
1000c308:	a008d43a 	srli	r4,r20,16
1000c30c:	b906b03a 	or	r3,r23,r4
1000c310:	1880032e 	bgeu	r3,r2,1000c320 <__umoddi3+0x238>
1000c314:	1cc7883a 	add	r3,r3,r19
1000c318:	1cc00136 	bltu	r3,r19,1000c320 <__umoddi3+0x238>
1000c31c:	1880f136 	bltu	r3,r2,1000c6e4 <__umoddi3+0x5fc>
1000c320:	18a1c83a 	sub	r16,r3,r2
1000c324:	8009883a 	mov	r4,r16
1000c328:	a80b883a 	mov	r5,r21
1000c32c:	000c8280 	call	1000c828 <__umodsi3>
1000c330:	8009883a 	mov	r4,r16
1000c334:	a80b883a 	mov	r5,r21
1000c338:	1023883a 	mov	r17,r2
1000c33c:	000c8200 	call	1000c820 <__udivsi3>
1000c340:	1009883a 	mov	r4,r2
1000c344:	b00b883a 	mov	r5,r22
1000c348:	8822943a 	slli	r17,r17,16
1000c34c:	000c8300 	call	1000c830 <__mulsi3>
1000c350:	a13fffcc 	andi	r4,r20,65535
1000c354:	8906b03a 	or	r3,r17,r4
1000c358:	1880042e 	bgeu	r3,r2,1000c36c <__umoddi3+0x284>
1000c35c:	1cc7883a 	add	r3,r3,r19
1000c360:	1cc00236 	bltu	r3,r19,1000c36c <__umoddi3+0x284>
1000c364:	1880012e 	bgeu	r3,r2,1000c36c <__umoddi3+0x284>
1000c368:	1cc7883a 	add	r3,r3,r19
1000c36c:	1887c83a 	sub	r3,r3,r2
1000c370:	1c84d83a 	srl	r2,r3,r18
1000c374:	0007883a 	mov	r3,zero
1000c378:	00000206 	br	1000c384 <__umoddi3+0x29c>
1000c37c:	2005883a 	mov	r2,r4
1000c380:	2807883a 	mov	r3,r5
1000c384:	dfc00b17 	ldw	ra,44(sp)
1000c388:	df000a17 	ldw	fp,40(sp)
1000c38c:	ddc00917 	ldw	r23,36(sp)
1000c390:	dd800817 	ldw	r22,32(sp)
1000c394:	dd400717 	ldw	r21,28(sp)
1000c398:	dd000617 	ldw	r20,24(sp)
1000c39c:	dcc00517 	ldw	r19,20(sp)
1000c3a0:	dc800417 	ldw	r18,16(sp)
1000c3a4:	dc400317 	ldw	r17,12(sp)
1000c3a8:	dc000217 	ldw	r16,8(sp)
1000c3ac:	dec00c04 	addi	sp,sp,48
1000c3b0:	f800283a 	ret
1000c3b4:	00803fc4 	movi	r2,255
1000c3b8:	11c0b02e 	bgeu	r2,r7,1000c67c <__umoddi3+0x594>
1000c3bc:	01400204 	movi	r5,8
1000c3c0:	282b883a 	mov	r21,r5
1000c3c4:	003f9b06 	br	1000c234 <__alt_data_end+0xf800c234>
1000c3c8:	00804034 	movhi	r2,256
1000c3cc:	10bfffc4 	addi	r2,r2,-1
1000c3d0:	1180b02e 	bgeu	r2,r6,1000c694 <__umoddi3+0x5ac>
1000c3d4:	01400604 	movi	r5,24
1000c3d8:	2805883a 	mov	r2,r5
1000c3dc:	003f5a06 	br	1000c148 <__alt_data_end+0xf800c148>
1000c3e0:	00803fc4 	movi	r2,255
1000c3e4:	14c0ae2e 	bgeu	r2,r19,1000c6a0 <__umoddi3+0x5b8>
1000c3e8:	00800204 	movi	r2,8
1000c3ec:	1007883a 	mov	r3,r2
1000c3f0:	003fad06 	br	1000c2a8 <__alt_data_end+0xf800c2a8>
1000c3f4:	3d0a983a 	sll	r5,r7,r20
1000c3f8:	356cd83a 	srl	r22,r6,r21
1000c3fc:	8d78d83a 	srl	fp,r17,r21
1000c400:	8d10983a 	sll	r8,r17,r20
1000c404:	2dacb03a 	or	r22,r5,r22
1000c408:	b02ed43a 	srli	r23,r22,16
1000c40c:	8564d83a 	srl	r18,r16,r21
1000c410:	e009883a 	mov	r4,fp
1000c414:	b80b883a 	mov	r5,r23
1000c418:	44a4b03a 	or	r18,r8,r18
1000c41c:	3526983a 	sll	r19,r6,r20
1000c420:	000c8280 	call	1000c828 <__umodsi3>
1000c424:	e009883a 	mov	r4,fp
1000c428:	b80b883a 	mov	r5,r23
1000c42c:	b47fffcc 	andi	r17,r22,65535
1000c430:	d8800015 	stw	r2,0(sp)
1000c434:	000c8200 	call	1000c820 <__udivsi3>
1000c438:	1009883a 	mov	r4,r2
1000c43c:	880b883a 	mov	r5,r17
1000c440:	1039883a 	mov	fp,r2
1000c444:	000c8300 	call	1000c830 <__mulsi3>
1000c448:	d9800017 	ldw	r6,0(sp)
1000c44c:	9008d43a 	srli	r4,r18,16
1000c450:	8520983a 	sll	r16,r16,r20
1000c454:	300c943a 	slli	r6,r6,16
1000c458:	3106b03a 	or	r3,r6,r4
1000c45c:	1880042e 	bgeu	r3,r2,1000c470 <__umoddi3+0x388>
1000c460:	1d87883a 	add	r3,r3,r22
1000c464:	e13fffc4 	addi	r4,fp,-1
1000c468:	1d809a2e 	bgeu	r3,r22,1000c6d4 <__umoddi3+0x5ec>
1000c46c:	2039883a 	mov	fp,r4
1000c470:	1887c83a 	sub	r3,r3,r2
1000c474:	1809883a 	mov	r4,r3
1000c478:	b80b883a 	mov	r5,r23
1000c47c:	d8c00115 	stw	r3,4(sp)
1000c480:	000c8280 	call	1000c828 <__umodsi3>
1000c484:	d8c00117 	ldw	r3,4(sp)
1000c488:	b80b883a 	mov	r5,r23
1000c48c:	d8800015 	stw	r2,0(sp)
1000c490:	1809883a 	mov	r4,r3
1000c494:	000c8200 	call	1000c820 <__udivsi3>
1000c498:	880b883a 	mov	r5,r17
1000c49c:	1009883a 	mov	r4,r2
1000c4a0:	102f883a 	mov	r23,r2
1000c4a4:	000c8300 	call	1000c830 <__mulsi3>
1000c4a8:	d9800017 	ldw	r6,0(sp)
1000c4ac:	947fffcc 	andi	r17,r18,65535
1000c4b0:	300c943a 	slli	r6,r6,16
1000c4b4:	3464b03a 	or	r18,r6,r17
1000c4b8:	9080042e 	bgeu	r18,r2,1000c4cc <__umoddi3+0x3e4>
1000c4bc:	95a5883a 	add	r18,r18,r22
1000c4c0:	b8ffffc4 	addi	r3,r23,-1
1000c4c4:	95807f2e 	bgeu	r18,r22,1000c6c4 <__umoddi3+0x5dc>
1000c4c8:	182f883a 	mov	r23,r3
1000c4cc:	e038943a 	slli	fp,fp,16
1000c4d0:	980cd43a 	srli	r6,r19,16
1000c4d4:	98ffffcc 	andi	r3,r19,65535
1000c4d8:	bf38b03a 	or	fp,r23,fp
1000c4dc:	e02ed43a 	srli	r23,fp,16
1000c4e0:	e73fffcc 	andi	fp,fp,65535
1000c4e4:	180b883a 	mov	r5,r3
1000c4e8:	e009883a 	mov	r4,fp
1000c4ec:	d9800015 	stw	r6,0(sp)
1000c4f0:	d8c00115 	stw	r3,4(sp)
1000c4f4:	90a5c83a 	sub	r18,r18,r2
1000c4f8:	000c8300 	call	1000c830 <__mulsi3>
1000c4fc:	d8c00117 	ldw	r3,4(sp)
1000c500:	b809883a 	mov	r4,r23
1000c504:	1023883a 	mov	r17,r2
1000c508:	180b883a 	mov	r5,r3
1000c50c:	000c8300 	call	1000c830 <__mulsi3>
1000c510:	d9800017 	ldw	r6,0(sp)
1000c514:	b809883a 	mov	r4,r23
1000c518:	d8800115 	stw	r2,4(sp)
1000c51c:	300b883a 	mov	r5,r6
1000c520:	302f883a 	mov	r23,r6
1000c524:	000c8300 	call	1000c830 <__mulsi3>
1000c528:	e009883a 	mov	r4,fp
1000c52c:	b80b883a 	mov	r5,r23
1000c530:	d8800015 	stw	r2,0(sp)
1000c534:	000c8300 	call	1000c830 <__mulsi3>
1000c538:	d8c00117 	ldw	r3,4(sp)
1000c53c:	880cd43a 	srli	r6,r17,16
1000c540:	d9c00017 	ldw	r7,0(sp)
1000c544:	1885883a 	add	r2,r3,r2
1000c548:	118d883a 	add	r6,r2,r6
1000c54c:	30c0022e 	bgeu	r6,r3,1000c558 <__umoddi3+0x470>
1000c550:	00800074 	movhi	r2,1
1000c554:	388f883a 	add	r7,r7,r2
1000c558:	3006d43a 	srli	r3,r6,16
1000c55c:	300c943a 	slli	r6,r6,16
1000c560:	8c7fffcc 	andi	r17,r17,65535
1000c564:	38c7883a 	add	r3,r7,r3
1000c568:	3463883a 	add	r17,r6,r17
1000c56c:	90c03d36 	bltu	r18,r3,1000c664 <__umoddi3+0x57c>
1000c570:	90c06026 	beq	r18,r3,1000c6f4 <__umoddi3+0x60c>
1000c574:	90c9c83a 	sub	r4,r18,r3
1000c578:	880f883a 	mov	r7,r17
1000c57c:	81cfc83a 	sub	r7,r16,r7
1000c580:	81c7803a 	cmpltu	r3,r16,r7
1000c584:	20c7c83a 	sub	r3,r4,r3
1000c588:	1d44983a 	sll	r2,r3,r21
1000c58c:	3d0ed83a 	srl	r7,r7,r20
1000c590:	1d06d83a 	srl	r3,r3,r20
1000c594:	11c4b03a 	or	r2,r2,r7
1000c598:	003f7a06 	br	1000c384 <__alt_data_end+0xf800c384>
1000c59c:	0025883a 	mov	r18,zero
1000c5a0:	003ef806 	br	1000c184 <__alt_data_end+0xf800c184>
1000c5a4:	98a6983a 	sll	r19,r19,r2
1000c5a8:	88e8d83a 	srl	r20,r17,r3
1000c5ac:	80c6d83a 	srl	r3,r16,r3
1000c5b0:	982ad43a 	srli	r21,r19,16
1000c5b4:	88a2983a 	sll	r17,r17,r2
1000c5b8:	a009883a 	mov	r4,r20
1000c5bc:	a80b883a 	mov	r5,r21
1000c5c0:	88eeb03a 	or	r23,r17,r3
1000c5c4:	1025883a 	mov	r18,r2
1000c5c8:	000c8280 	call	1000c828 <__umodsi3>
1000c5cc:	a009883a 	mov	r4,r20
1000c5d0:	a80b883a 	mov	r5,r21
1000c5d4:	1023883a 	mov	r17,r2
1000c5d8:	9dbfffcc 	andi	r22,r19,65535
1000c5dc:	000c8200 	call	1000c820 <__udivsi3>
1000c5e0:	1009883a 	mov	r4,r2
1000c5e4:	b00b883a 	mov	r5,r22
1000c5e8:	000c8300 	call	1000c830 <__mulsi3>
1000c5ec:	8822943a 	slli	r17,r17,16
1000c5f0:	b808d43a 	srli	r4,r23,16
1000c5f4:	84a8983a 	sll	r20,r16,r18
1000c5f8:	8906b03a 	or	r3,r17,r4
1000c5fc:	1880042e 	bgeu	r3,r2,1000c610 <__umoddi3+0x528>
1000c600:	1cc7883a 	add	r3,r3,r19
1000c604:	1cc00236 	bltu	r3,r19,1000c610 <__umoddi3+0x528>
1000c608:	1880012e 	bgeu	r3,r2,1000c610 <__umoddi3+0x528>
1000c60c:	1cc7883a 	add	r3,r3,r19
1000c610:	18a1c83a 	sub	r16,r3,r2
1000c614:	8009883a 	mov	r4,r16
1000c618:	a80b883a 	mov	r5,r21
1000c61c:	000c8280 	call	1000c828 <__umodsi3>
1000c620:	8009883a 	mov	r4,r16
1000c624:	a80b883a 	mov	r5,r21
1000c628:	1039883a 	mov	fp,r2
1000c62c:	000c8200 	call	1000c820 <__udivsi3>
1000c630:	1009883a 	mov	r4,r2
1000c634:	b00b883a 	mov	r5,r22
1000c638:	000c8300 	call	1000c830 <__mulsi3>
1000c63c:	e006943a 	slli	r3,fp,16
1000c640:	b93fffcc 	andi	r4,r23,65535
1000c644:	1906b03a 	or	r3,r3,r4
1000c648:	1880042e 	bgeu	r3,r2,1000c65c <__umoddi3+0x574>
1000c64c:	1cc7883a 	add	r3,r3,r19
1000c650:	1cc00236 	bltu	r3,r19,1000c65c <__umoddi3+0x574>
1000c654:	1880012e 	bgeu	r3,r2,1000c65c <__umoddi3+0x574>
1000c658:	1cc7883a 	add	r3,r3,r19
1000c65c:	18a3c83a 	sub	r17,r3,r2
1000c660:	003f1e06 	br	1000c2dc <__alt_data_end+0xf800c2dc>
1000c664:	8ccfc83a 	sub	r7,r17,r19
1000c668:	1d89c83a 	sub	r4,r3,r22
1000c66c:	89e3803a 	cmpltu	r17,r17,r7
1000c670:	2463c83a 	sub	r17,r4,r17
1000c674:	9449c83a 	sub	r4,r18,r17
1000c678:	003fc006 	br	1000c57c <__alt_data_end+0xf800c57c>
1000c67c:	000b883a 	mov	r5,zero
1000c680:	002b883a 	mov	r21,zero
1000c684:	003eeb06 	br	1000c234 <__alt_data_end+0xf800c234>
1000c688:	01400404 	movi	r5,16
1000c68c:	282b883a 	mov	r21,r5
1000c690:	003ee806 	br	1000c234 <__alt_data_end+0xf800c234>
1000c694:	01400404 	movi	r5,16
1000c698:	2805883a 	mov	r2,r5
1000c69c:	003eaa06 	br	1000c148 <__alt_data_end+0xf800c148>
1000c6a0:	0005883a 	mov	r2,zero
1000c6a4:	0007883a 	mov	r3,zero
1000c6a8:	003eff06 	br	1000c2a8 <__alt_data_end+0xf800c2a8>
1000c6ac:	00800404 	movi	r2,16
1000c6b0:	1007883a 	mov	r3,r2
1000c6b4:	003efc06 	br	1000c2a8 <__alt_data_end+0xf800c2a8>
1000c6b8:	000b883a 	mov	r5,zero
1000c6bc:	0005883a 	mov	r2,zero
1000c6c0:	003ea106 	br	1000c148 <__alt_data_end+0xf800c148>
1000c6c4:	90bf802e 	bgeu	r18,r2,1000c4c8 <__alt_data_end+0xf800c4c8>
1000c6c8:	bdffff84 	addi	r23,r23,-2
1000c6cc:	95a5883a 	add	r18,r18,r22
1000c6d0:	003f7e06 	br	1000c4cc <__alt_data_end+0xf800c4cc>
1000c6d4:	18bf652e 	bgeu	r3,r2,1000c46c <__alt_data_end+0xf800c46c>
1000c6d8:	e73fff84 	addi	fp,fp,-2
1000c6dc:	1d87883a 	add	r3,r3,r22
1000c6e0:	003f6306 	br	1000c470 <__alt_data_end+0xf800c470>
1000c6e4:	1cc7883a 	add	r3,r3,r19
1000c6e8:	003f0d06 	br	1000c320 <__alt_data_end+0xf800c320>
1000c6ec:	8005883a 	mov	r2,r16
1000c6f0:	003edf06 	br	1000c270 <__alt_data_end+0xf800c270>
1000c6f4:	847fdb36 	bltu	r16,r17,1000c664 <__alt_data_end+0xf800c664>
1000c6f8:	880f883a 	mov	r7,r17
1000c6fc:	0009883a 	mov	r4,zero
1000c700:	003f9e06 	br	1000c57c <__alt_data_end+0xf800c57c>

1000c704 <udivmodsi4>:
1000c704:	2900182e 	bgeu	r5,r4,1000c768 <udivmodsi4+0x64>
1000c708:	28001716 	blt	r5,zero,1000c768 <udivmodsi4+0x64>
1000c70c:	00800804 	movi	r2,32
1000c710:	00c00044 	movi	r3,1
1000c714:	00000206 	br	1000c720 <udivmodsi4+0x1c>
1000c718:	10001126 	beq	r2,zero,1000c760 <udivmodsi4+0x5c>
1000c71c:	28000516 	blt	r5,zero,1000c734 <udivmodsi4+0x30>
1000c720:	294b883a 	add	r5,r5,r5
1000c724:	10bfffc4 	addi	r2,r2,-1
1000c728:	18c7883a 	add	r3,r3,r3
1000c72c:	293ffa36 	bltu	r5,r4,1000c718 <__alt_data_end+0xf800c718>
1000c730:	18000b26 	beq	r3,zero,1000c760 <udivmodsi4+0x5c>
1000c734:	0005883a 	mov	r2,zero
1000c738:	21400236 	bltu	r4,r5,1000c744 <udivmodsi4+0x40>
1000c73c:	2149c83a 	sub	r4,r4,r5
1000c740:	10c4b03a 	or	r2,r2,r3
1000c744:	1806d07a 	srli	r3,r3,1
1000c748:	280ad07a 	srli	r5,r5,1
1000c74c:	183ffa1e 	bne	r3,zero,1000c738 <__alt_data_end+0xf800c738>
1000c750:	3000011e 	bne	r6,zero,1000c758 <udivmodsi4+0x54>
1000c754:	f800283a 	ret
1000c758:	2005883a 	mov	r2,r4
1000c75c:	f800283a 	ret
1000c760:	0005883a 	mov	r2,zero
1000c764:	003ffa06 	br	1000c750 <__alt_data_end+0xf800c750>
1000c768:	00c00044 	movi	r3,1
1000c76c:	003ff106 	br	1000c734 <__alt_data_end+0xf800c734>

1000c770 <__divsi3>:
1000c770:	defffe04 	addi	sp,sp,-8
1000c774:	dfc00115 	stw	ra,4(sp)
1000c778:	dc000015 	stw	r16,0(sp)
1000c77c:	20000b16 	blt	r4,zero,1000c7ac <__divsi3+0x3c>
1000c780:	0021883a 	mov	r16,zero
1000c784:	28000c16 	blt	r5,zero,1000c7b8 <__divsi3+0x48>
1000c788:	000d883a 	mov	r6,zero
1000c78c:	000c7040 	call	1000c704 <udivmodsi4>
1000c790:	0407c83a 	sub	r3,zero,r16
1000c794:	1884f03a 	xor	r2,r3,r2
1000c798:	1405883a 	add	r2,r2,r16
1000c79c:	dfc00117 	ldw	ra,4(sp)
1000c7a0:	dc000017 	ldw	r16,0(sp)
1000c7a4:	dec00204 	addi	sp,sp,8
1000c7a8:	f800283a 	ret
1000c7ac:	0109c83a 	sub	r4,zero,r4
1000c7b0:	04000044 	movi	r16,1
1000c7b4:	283ff40e 	bge	r5,zero,1000c788 <__alt_data_end+0xf800c788>
1000c7b8:	014bc83a 	sub	r5,zero,r5
1000c7bc:	8400005c 	xori	r16,r16,1
1000c7c0:	003ff106 	br	1000c788 <__alt_data_end+0xf800c788>

1000c7c4 <__modsi3>:
1000c7c4:	defffd04 	addi	sp,sp,-12
1000c7c8:	dfc00215 	stw	ra,8(sp)
1000c7cc:	dc400115 	stw	r17,4(sp)
1000c7d0:	dc000015 	stw	r16,0(sp)
1000c7d4:	20000c16 	blt	r4,zero,1000c808 <__modsi3+0x44>
1000c7d8:	0023883a 	mov	r17,zero
1000c7dc:	0021883a 	mov	r16,zero
1000c7e0:	28000d16 	blt	r5,zero,1000c818 <__modsi3+0x54>
1000c7e4:	01800044 	movi	r6,1
1000c7e8:	000c7040 	call	1000c704 <udivmodsi4>
1000c7ec:	1404f03a 	xor	r2,r2,r16
1000c7f0:	8885883a 	add	r2,r17,r2
1000c7f4:	dfc00217 	ldw	ra,8(sp)
1000c7f8:	dc400117 	ldw	r17,4(sp)
1000c7fc:	dc000017 	ldw	r16,0(sp)
1000c800:	dec00304 	addi	sp,sp,12
1000c804:	f800283a 	ret
1000c808:	0109c83a 	sub	r4,zero,r4
1000c80c:	04400044 	movi	r17,1
1000c810:	043fffc4 	movi	r16,-1
1000c814:	283ff30e 	bge	r5,zero,1000c7e4 <__alt_data_end+0xf800c7e4>
1000c818:	014bc83a 	sub	r5,zero,r5
1000c81c:	003ff106 	br	1000c7e4 <__alt_data_end+0xf800c7e4>

1000c820 <__udivsi3>:
1000c820:	000d883a 	mov	r6,zero
1000c824:	000c7041 	jmpi	1000c704 <udivmodsi4>

1000c828 <__umodsi3>:
1000c828:	01800044 	movi	r6,1
1000c82c:	000c7041 	jmpi	1000c704 <udivmodsi4>

1000c830 <__mulsi3>:
1000c830:	0005883a 	mov	r2,zero
1000c834:	20000726 	beq	r4,zero,1000c854 <__mulsi3+0x24>
1000c838:	20c0004c 	andi	r3,r4,1
1000c83c:	2008d07a 	srli	r4,r4,1
1000c840:	18000126 	beq	r3,zero,1000c848 <__mulsi3+0x18>
1000c844:	1145883a 	add	r2,r2,r5
1000c848:	294b883a 	add	r5,r5,r5
1000c84c:	203ffa1e 	bne	r4,zero,1000c838 <__alt_data_end+0xf800c838>
1000c850:	f800283a 	ret
1000c854:	f800283a 	ret

1000c858 <__adddf3>:
1000c858:	02000434 	movhi	r8,16
1000c85c:	423fffc4 	addi	r8,r8,-1
1000c860:	defffb04 	addi	sp,sp,-20
1000c864:	2a12703a 	and	r9,r5,r8
1000c868:	2806d7fa 	srli	r3,r5,31
1000c86c:	3a10703a 	and	r8,r7,r8
1000c870:	3804d53a 	srli	r2,r7,20
1000c874:	3014d77a 	srli	r10,r6,29
1000c878:	dc000015 	stw	r16,0(sp)
1000c87c:	481290fa 	slli	r9,r9,3
1000c880:	2820d53a 	srli	r16,r5,20
1000c884:	401090fa 	slli	r8,r8,3
1000c888:	200ad77a 	srli	r5,r4,29
1000c88c:	380ed7fa 	srli	r7,r7,31
1000c890:	dc800215 	stw	r18,8(sp)
1000c894:	dc400115 	stw	r17,4(sp)
1000c898:	dfc00415 	stw	ra,16(sp)
1000c89c:	dcc00315 	stw	r19,12(sp)
1000c8a0:	1c803fcc 	andi	r18,r3,255
1000c8a4:	8401ffcc 	andi	r16,r16,2047
1000c8a8:	494ab03a 	or	r5,r9,r5
1000c8ac:	202290fa 	slli	r17,r4,3
1000c8b0:	1081ffcc 	andi	r2,r2,2047
1000c8b4:	4290b03a 	or	r8,r8,r10
1000c8b8:	300c90fa 	slli	r6,r6,3
1000c8bc:	91c07026 	beq	r18,r7,1000ca80 <__adddf3+0x228>
1000c8c0:	8087c83a 	sub	r3,r16,r2
1000c8c4:	00c0b30e 	bge	zero,r3,1000cb94 <__adddf3+0x33c>
1000c8c8:	10002a1e 	bne	r2,zero,1000c974 <__adddf3+0x11c>
1000c8cc:	4184b03a 	or	r2,r8,r6
1000c8d0:	1000991e 	bne	r2,zero,1000cb38 <__adddf3+0x2e0>
1000c8d4:	888001cc 	andi	r2,r17,7
1000c8d8:	10005b26 	beq	r2,zero,1000ca48 <__adddf3+0x1f0>
1000c8dc:	88c003cc 	andi	r3,r17,15
1000c8e0:	00800104 	movi	r2,4
1000c8e4:	18805826 	beq	r3,r2,1000ca48 <__adddf3+0x1f0>
1000c8e8:	89800104 	addi	r6,r17,4
1000c8ec:	3463803a 	cmpltu	r17,r6,r17
1000c8f0:	2c4b883a 	add	r5,r5,r17
1000c8f4:	2880202c 	andhi	r2,r5,128
1000c8f8:	9007883a 	mov	r3,r18
1000c8fc:	3023883a 	mov	r17,r6
1000c900:	10005426 	beq	r2,zero,1000ca54 <__adddf3+0x1fc>
1000c904:	84000044 	addi	r16,r16,1
1000c908:	0081ffc4 	movi	r2,2047
1000c90c:	8080c126 	beq	r16,r2,1000cc14 <__adddf3+0x3bc>
1000c910:	013fe034 	movhi	r4,65408
1000c914:	213fffc4 	addi	r4,r4,-1
1000c918:	290a703a 	and	r5,r5,r4
1000c91c:	2804977a 	slli	r2,r5,29
1000c920:	280a927a 	slli	r5,r5,9
1000c924:	8822d0fa 	srli	r17,r17,3
1000c928:	8401ffcc 	andi	r16,r16,2047
1000c92c:	2808d33a 	srli	r4,r5,12
1000c930:	1444b03a 	or	r2,r2,r17
1000c934:	8401ffcc 	andi	r16,r16,2047
1000c938:	800a953a 	slli	r5,r16,20
1000c93c:	18c03fcc 	andi	r3,r3,255
1000c940:	04000434 	movhi	r16,16
1000c944:	180697fa 	slli	r3,r3,31
1000c948:	843fffc4 	addi	r16,r16,-1
1000c94c:	2420703a 	and	r16,r4,r16
1000c950:	8160b03a 	or	r16,r16,r5
1000c954:	80c6b03a 	or	r3,r16,r3
1000c958:	dfc00417 	ldw	ra,16(sp)
1000c95c:	dcc00317 	ldw	r19,12(sp)
1000c960:	dc800217 	ldw	r18,8(sp)
1000c964:	dc400117 	ldw	r17,4(sp)
1000c968:	dc000017 	ldw	r16,0(sp)
1000c96c:	dec00504 	addi	sp,sp,20
1000c970:	f800283a 	ret
1000c974:	0081ffc4 	movi	r2,2047
1000c978:	80bfd626 	beq	r16,r2,1000c8d4 <__alt_data_end+0xf800c8d4>
1000c97c:	42002034 	orhi	r8,r8,128
1000c980:	00800e04 	movi	r2,56
1000c984:	10c0a616 	blt	r2,r3,1000cc20 <__adddf3+0x3c8>
1000c988:	008007c4 	movi	r2,31
1000c98c:	10c0c916 	blt	r2,r3,1000ccb4 <__adddf3+0x45c>
1000c990:	00800804 	movi	r2,32
1000c994:	10c5c83a 	sub	r2,r2,r3
1000c998:	408e983a 	sll	r7,r8,r2
1000c99c:	30c8d83a 	srl	r4,r6,r3
1000c9a0:	3084983a 	sll	r2,r6,r2
1000c9a4:	40c6d83a 	srl	r3,r8,r3
1000c9a8:	390cb03a 	or	r6,r7,r4
1000c9ac:	1004c03a 	cmpne	r2,r2,zero
1000c9b0:	308cb03a 	or	r6,r6,r2
1000c9b4:	898dc83a 	sub	r6,r17,r6
1000c9b8:	89a3803a 	cmpltu	r17,r17,r6
1000c9bc:	28cbc83a 	sub	r5,r5,r3
1000c9c0:	2c4bc83a 	sub	r5,r5,r17
1000c9c4:	3023883a 	mov	r17,r6
1000c9c8:	2880202c 	andhi	r2,r5,128
1000c9cc:	10006d26 	beq	r2,zero,1000cb84 <__adddf3+0x32c>
1000c9d0:	04c02034 	movhi	r19,128
1000c9d4:	9cffffc4 	addi	r19,r19,-1
1000c9d8:	2ce6703a 	and	r19,r5,r19
1000c9dc:	98007e26 	beq	r19,zero,1000cbd8 <__adddf3+0x380>
1000c9e0:	9809883a 	mov	r4,r19
1000c9e4:	000eff00 	call	1000eff0 <__clzsi2>
1000c9e8:	10fffe04 	addi	r3,r2,-8
1000c9ec:	010007c4 	movi	r4,31
1000c9f0:	20c07f16 	blt	r4,r3,1000cbf0 <__adddf3+0x398>
1000c9f4:	01400a04 	movi	r5,40
1000c9f8:	2885c83a 	sub	r2,r5,r2
1000c9fc:	888ad83a 	srl	r5,r17,r2
1000ca00:	98e6983a 	sll	r19,r19,r3
1000ca04:	88e2983a 	sll	r17,r17,r3
1000ca08:	2ce6b03a 	or	r19,r5,r19
1000ca0c:	1c007c16 	blt	r3,r16,1000cc00 <__adddf3+0x3a8>
1000ca10:	1c21c83a 	sub	r16,r3,r16
1000ca14:	81400044 	addi	r5,r16,1
1000ca18:	00c007c4 	movi	r3,31
1000ca1c:	19409816 	blt	r3,r5,1000cc80 <__adddf3+0x428>
1000ca20:	1c21c83a 	sub	r16,r3,r16
1000ca24:	8c08983a 	sll	r4,r17,r16
1000ca28:	8946d83a 	srl	r3,r17,r5
1000ca2c:	9c20983a 	sll	r16,r19,r16
1000ca30:	2008c03a 	cmpne	r4,r4,zero
1000ca34:	994ad83a 	srl	r5,r19,r5
1000ca38:	1c06b03a 	or	r3,r3,r16
1000ca3c:	1922b03a 	or	r17,r3,r4
1000ca40:	0021883a 	mov	r16,zero
1000ca44:	003fa306 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000ca48:	2880202c 	andhi	r2,r5,128
1000ca4c:	9007883a 	mov	r3,r18
1000ca50:	103fac1e 	bne	r2,zero,1000c904 <__alt_data_end+0xf800c904>
1000ca54:	2804977a 	slli	r2,r5,29
1000ca58:	8822d0fa 	srli	r17,r17,3
1000ca5c:	0101ffc4 	movi	r4,2047
1000ca60:	280ad0fa 	srli	r5,r5,3
1000ca64:	1444b03a 	or	r2,r2,r17
1000ca68:	81002c26 	beq	r16,r4,1000cb1c <__adddf3+0x2c4>
1000ca6c:	8120703a 	and	r16,r16,r4
1000ca70:	01000434 	movhi	r4,16
1000ca74:	213fffc4 	addi	r4,r4,-1
1000ca78:	2908703a 	and	r4,r5,r4
1000ca7c:	003fad06 	br	1000c934 <__alt_data_end+0xf800c934>
1000ca80:	8089c83a 	sub	r4,r16,r2
1000ca84:	01006a0e 	bge	zero,r4,1000cc30 <__adddf3+0x3d8>
1000ca88:	10003326 	beq	r2,zero,1000cb58 <__adddf3+0x300>
1000ca8c:	0081ffc4 	movi	r2,2047
1000ca90:	80bf9026 	beq	r16,r2,1000c8d4 <__alt_data_end+0xf800c8d4>
1000ca94:	42002034 	orhi	r8,r8,128
1000ca98:	00800e04 	movi	r2,56
1000ca9c:	1100b116 	blt	r2,r4,1000cd64 <__adddf3+0x50c>
1000caa0:	008007c4 	movi	r2,31
1000caa4:	1100e216 	blt	r2,r4,1000ce30 <__adddf3+0x5d8>
1000caa8:	00800804 	movi	r2,32
1000caac:	1105c83a 	sub	r2,r2,r4
1000cab0:	4092983a 	sll	r9,r8,r2
1000cab4:	310ed83a 	srl	r7,r6,r4
1000cab8:	3084983a 	sll	r2,r6,r2
1000cabc:	4110d83a 	srl	r8,r8,r4
1000cac0:	49ccb03a 	or	r6,r9,r7
1000cac4:	1004c03a 	cmpne	r2,r2,zero
1000cac8:	308cb03a 	or	r6,r6,r2
1000cacc:	344d883a 	add	r6,r6,r17
1000cad0:	3463803a 	cmpltu	r17,r6,r17
1000cad4:	414b883a 	add	r5,r8,r5
1000cad8:	2c4b883a 	add	r5,r5,r17
1000cadc:	3023883a 	mov	r17,r6
1000cae0:	2880202c 	andhi	r2,r5,128
1000cae4:	10002726 	beq	r2,zero,1000cb84 <__adddf3+0x32c>
1000cae8:	84000044 	addi	r16,r16,1
1000caec:	0081ffc4 	movi	r2,2047
1000caf0:	8080ae26 	beq	r16,r2,1000cdac <__adddf3+0x554>
1000caf4:	00bfe034 	movhi	r2,65408
1000caf8:	10bfffc4 	addi	r2,r2,-1
1000cafc:	288a703a 	and	r5,r5,r2
1000cb00:	880cd07a 	srli	r6,r17,1
1000cb04:	280897fa 	slli	r4,r5,31
1000cb08:	88c0004c 	andi	r3,r17,1
1000cb0c:	30e2b03a 	or	r17,r6,r3
1000cb10:	280ad07a 	srli	r5,r5,1
1000cb14:	8922b03a 	or	r17,r17,r4
1000cb18:	003f6e06 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000cb1c:	1148b03a 	or	r4,r2,r5
1000cb20:	20003c26 	beq	r4,zero,1000cc14 <__adddf3+0x3bc>
1000cb24:	29000234 	orhi	r4,r5,8
1000cb28:	01400434 	movhi	r5,16
1000cb2c:	297fffc4 	addi	r5,r5,-1
1000cb30:	2148703a 	and	r4,r4,r5
1000cb34:	003f7f06 	br	1000c934 <__alt_data_end+0xf800c934>
1000cb38:	18ffffc4 	addi	r3,r3,-1
1000cb3c:	18004d1e 	bne	r3,zero,1000cc74 <__adddf3+0x41c>
1000cb40:	898dc83a 	sub	r6,r17,r6
1000cb44:	89a3803a 	cmpltu	r17,r17,r6
1000cb48:	2a0bc83a 	sub	r5,r5,r8
1000cb4c:	2c4bc83a 	sub	r5,r5,r17
1000cb50:	3023883a 	mov	r17,r6
1000cb54:	003f9c06 	br	1000c9c8 <__alt_data_end+0xf800c9c8>
1000cb58:	4184b03a 	or	r2,r8,r6
1000cb5c:	103f5d26 	beq	r2,zero,1000c8d4 <__alt_data_end+0xf800c8d4>
1000cb60:	213fffc4 	addi	r4,r4,-1
1000cb64:	203fd926 	beq	r4,zero,1000cacc <__alt_data_end+0xf800cacc>
1000cb68:	0081ffc4 	movi	r2,2047
1000cb6c:	80bfca1e 	bne	r16,r2,1000ca98 <__alt_data_end+0xf800ca98>
1000cb70:	003f5806 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000cb74:	10c8b03a 	or	r4,r2,r3
1000cb78:	20008b26 	beq	r4,zero,1000cda8 <__adddf3+0x550>
1000cb7c:	100b883a 	mov	r5,r2
1000cb80:	1823883a 	mov	r17,r3
1000cb84:	888001cc 	andi	r2,r17,7
1000cb88:	103f541e 	bne	r2,zero,1000c8dc <__alt_data_end+0xf800c8dc>
1000cb8c:	9007883a 	mov	r3,r18
1000cb90:	003fb006 	br	1000ca54 <__alt_data_end+0xf800ca54>
1000cb94:	1800531e 	bne	r3,zero,1000cce4 <__adddf3+0x48c>
1000cb98:	80800044 	addi	r2,r16,1
1000cb9c:	1081ffcc 	andi	r2,r2,2047
1000cba0:	00c00044 	movi	r3,1
1000cba4:	1880990e 	bge	r3,r2,1000ce0c <__adddf3+0x5b4>
1000cba8:	8985c83a 	sub	r2,r17,r6
1000cbac:	8887803a 	cmpltu	r3,r17,r2
1000cbb0:	2a27c83a 	sub	r19,r5,r8
1000cbb4:	98e7c83a 	sub	r19,r19,r3
1000cbb8:	98c0202c 	andhi	r3,r19,128
1000cbbc:	18006226 	beq	r3,zero,1000cd48 <__adddf3+0x4f0>
1000cbc0:	3463c83a 	sub	r17,r6,r17
1000cbc4:	4151c83a 	sub	r8,r8,r5
1000cbc8:	344d803a 	cmpltu	r6,r6,r17
1000cbcc:	41a7c83a 	sub	r19,r8,r6
1000cbd0:	3825883a 	mov	r18,r7
1000cbd4:	983f821e 	bne	r19,zero,1000c9e0 <__alt_data_end+0xf800c9e0>
1000cbd8:	8809883a 	mov	r4,r17
1000cbdc:	000eff00 	call	1000eff0 <__clzsi2>
1000cbe0:	10800804 	addi	r2,r2,32
1000cbe4:	10fffe04 	addi	r3,r2,-8
1000cbe8:	010007c4 	movi	r4,31
1000cbec:	20ff810e 	bge	r4,r3,1000c9f4 <__alt_data_end+0xf800c9f4>
1000cbf0:	14fff604 	addi	r19,r2,-40
1000cbf4:	8ce6983a 	sll	r19,r17,r19
1000cbf8:	0023883a 	mov	r17,zero
1000cbfc:	1c3f840e 	bge	r3,r16,1000ca10 <__alt_data_end+0xf800ca10>
1000cc00:	017fe034 	movhi	r5,65408
1000cc04:	297fffc4 	addi	r5,r5,-1
1000cc08:	80e1c83a 	sub	r16,r16,r3
1000cc0c:	994a703a 	and	r5,r19,r5
1000cc10:	003f3006 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000cc14:	0009883a 	mov	r4,zero
1000cc18:	0005883a 	mov	r2,zero
1000cc1c:	003f4506 	br	1000c934 <__alt_data_end+0xf800c934>
1000cc20:	418cb03a 	or	r6,r8,r6
1000cc24:	300cc03a 	cmpne	r6,r6,zero
1000cc28:	0007883a 	mov	r3,zero
1000cc2c:	003f6106 	br	1000c9b4 <__alt_data_end+0xf800c9b4>
1000cc30:	2000921e 	bne	r4,zero,1000ce7c <__adddf3+0x624>
1000cc34:	80800044 	addi	r2,r16,1
1000cc38:	11c1ffcc 	andi	r7,r2,2047
1000cc3c:	01000044 	movi	r4,1
1000cc40:	21c0610e 	bge	r4,r7,1000cdc8 <__adddf3+0x570>
1000cc44:	0101ffc4 	movi	r4,2047
1000cc48:	1100a326 	beq	r2,r4,1000ced8 <__adddf3+0x680>
1000cc4c:	344d883a 	add	r6,r6,r17
1000cc50:	3463803a 	cmpltu	r17,r6,r17
1000cc54:	414b883a 	add	r5,r8,r5
1000cc58:	2c4b883a 	add	r5,r5,r17
1000cc5c:	282297fa 	slli	r17,r5,31
1000cc60:	300cd07a 	srli	r6,r6,1
1000cc64:	280ad07a 	srli	r5,r5,1
1000cc68:	1021883a 	mov	r16,r2
1000cc6c:	89a2b03a 	or	r17,r17,r6
1000cc70:	003f1806 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000cc74:	0081ffc4 	movi	r2,2047
1000cc78:	80bf411e 	bne	r16,r2,1000c980 <__alt_data_end+0xf800c980>
1000cc7c:	003f1506 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000cc80:	80bff844 	addi	r2,r16,-31
1000cc84:	00c00804 	movi	r3,32
1000cc88:	9884d83a 	srl	r2,r19,r2
1000cc8c:	28c04a26 	beq	r5,r3,1000cdb8 <__adddf3+0x560>
1000cc90:	00c00fc4 	movi	r3,63
1000cc94:	1c21c83a 	sub	r16,r3,r16
1000cc98:	9c26983a 	sll	r19,r19,r16
1000cc9c:	9c62b03a 	or	r17,r19,r17
1000cca0:	8822c03a 	cmpne	r17,r17,zero
1000cca4:	88a2b03a 	or	r17,r17,r2
1000cca8:	000b883a 	mov	r5,zero
1000ccac:	0021883a 	mov	r16,zero
1000ccb0:	003fb406 	br	1000cb84 <__alt_data_end+0xf800cb84>
1000ccb4:	18bff804 	addi	r2,r3,-32
1000ccb8:	01000804 	movi	r4,32
1000ccbc:	4084d83a 	srl	r2,r8,r2
1000ccc0:	19003f26 	beq	r3,r4,1000cdc0 <__adddf3+0x568>
1000ccc4:	01001004 	movi	r4,64
1000ccc8:	20c7c83a 	sub	r3,r4,r3
1000cccc:	40d0983a 	sll	r8,r8,r3
1000ccd0:	418cb03a 	or	r6,r8,r6
1000ccd4:	300cc03a 	cmpne	r6,r6,zero
1000ccd8:	308cb03a 	or	r6,r6,r2
1000ccdc:	0007883a 	mov	r3,zero
1000cce0:	003f3406 	br	1000c9b4 <__alt_data_end+0xf800c9b4>
1000cce4:	80002326 	beq	r16,zero,1000cd74 <__adddf3+0x51c>
1000cce8:	0101ffc4 	movi	r4,2047
1000ccec:	11005e26 	beq	r2,r4,1000ce68 <__adddf3+0x610>
1000ccf0:	00c7c83a 	sub	r3,zero,r3
1000ccf4:	29402034 	orhi	r5,r5,128
1000ccf8:	01000e04 	movi	r4,56
1000ccfc:	20c07216 	blt	r4,r3,1000cec8 <__adddf3+0x670>
1000cd00:	010007c4 	movi	r4,31
1000cd04:	20c0ce16 	blt	r4,r3,1000d040 <__adddf3+0x7e8>
1000cd08:	01000804 	movi	r4,32
1000cd0c:	20c9c83a 	sub	r4,r4,r3
1000cd10:	2914983a 	sll	r10,r5,r4
1000cd14:	88d2d83a 	srl	r9,r17,r3
1000cd18:	8908983a 	sll	r4,r17,r4
1000cd1c:	28c6d83a 	srl	r3,r5,r3
1000cd20:	5262b03a 	or	r17,r10,r9
1000cd24:	2008c03a 	cmpne	r4,r4,zero
1000cd28:	8922b03a 	or	r17,r17,r4
1000cd2c:	3463c83a 	sub	r17,r6,r17
1000cd30:	40c7c83a 	sub	r3,r8,r3
1000cd34:	344d803a 	cmpltu	r6,r6,r17
1000cd38:	198bc83a 	sub	r5,r3,r6
1000cd3c:	1021883a 	mov	r16,r2
1000cd40:	3825883a 	mov	r18,r7
1000cd44:	003f2006 	br	1000c9c8 <__alt_data_end+0xf800c9c8>
1000cd48:	9886b03a 	or	r3,r19,r2
1000cd4c:	1800141e 	bne	r3,zero,1000cda0 <__adddf3+0x548>
1000cd50:	0007883a 	mov	r3,zero
1000cd54:	000b883a 	mov	r5,zero
1000cd58:	0023883a 	mov	r17,zero
1000cd5c:	0021883a 	mov	r16,zero
1000cd60:	003f3c06 	br	1000ca54 <__alt_data_end+0xf800ca54>
1000cd64:	418cb03a 	or	r6,r8,r6
1000cd68:	300cc03a 	cmpne	r6,r6,zero
1000cd6c:	0011883a 	mov	r8,zero
1000cd70:	003f5606 	br	1000cacc <__alt_data_end+0xf800cacc>
1000cd74:	2c48b03a 	or	r4,r5,r17
1000cd78:	20003b26 	beq	r4,zero,1000ce68 <__adddf3+0x610>
1000cd7c:	00c6303a 	nor	r3,zero,r3
1000cd80:	1800371e 	bne	r3,zero,1000ce60 <__adddf3+0x608>
1000cd84:	3463c83a 	sub	r17,r6,r17
1000cd88:	414bc83a 	sub	r5,r8,r5
1000cd8c:	344d803a 	cmpltu	r6,r6,r17
1000cd90:	298bc83a 	sub	r5,r5,r6
1000cd94:	1021883a 	mov	r16,r2
1000cd98:	3825883a 	mov	r18,r7
1000cd9c:	003f0a06 	br	1000c9c8 <__alt_data_end+0xf800c9c8>
1000cda0:	1023883a 	mov	r17,r2
1000cda4:	003f0d06 	br	1000c9dc <__alt_data_end+0xf800c9dc>
1000cda8:	0007883a 	mov	r3,zero
1000cdac:	000b883a 	mov	r5,zero
1000cdb0:	0023883a 	mov	r17,zero
1000cdb4:	003f2706 	br	1000ca54 <__alt_data_end+0xf800ca54>
1000cdb8:	0027883a 	mov	r19,zero
1000cdbc:	003fb706 	br	1000cc9c <__alt_data_end+0xf800cc9c>
1000cdc0:	0011883a 	mov	r8,zero
1000cdc4:	003fc206 	br	1000ccd0 <__alt_data_end+0xf800ccd0>
1000cdc8:	2c44b03a 	or	r2,r5,r17
1000cdcc:	8000871e 	bne	r16,zero,1000cfec <__adddf3+0x794>
1000cdd0:	1000b126 	beq	r2,zero,1000d098 <__adddf3+0x840>
1000cdd4:	4184b03a 	or	r2,r8,r6
1000cdd8:	103ebe26 	beq	r2,zero,1000c8d4 <__alt_data_end+0xf800c8d4>
1000cddc:	3445883a 	add	r2,r6,r17
1000cde0:	1463803a 	cmpltu	r17,r2,r17
1000cde4:	414b883a 	add	r5,r8,r5
1000cde8:	2c4b883a 	add	r5,r5,r17
1000cdec:	28c0202c 	andhi	r3,r5,128
1000cdf0:	1023883a 	mov	r17,r2
1000cdf4:	183f6326 	beq	r3,zero,1000cb84 <__alt_data_end+0xf800cb84>
1000cdf8:	00bfe034 	movhi	r2,65408
1000cdfc:	10bfffc4 	addi	r2,r2,-1
1000ce00:	2021883a 	mov	r16,r4
1000ce04:	288a703a 	and	r5,r5,r2
1000ce08:	003eb206 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000ce0c:	2c44b03a 	or	r2,r5,r17
1000ce10:	8000251e 	bne	r16,zero,1000cea8 <__adddf3+0x650>
1000ce14:	10004b1e 	bne	r2,zero,1000cf44 <__adddf3+0x6ec>
1000ce18:	4184b03a 	or	r2,r8,r6
1000ce1c:	103fe226 	beq	r2,zero,1000cda8 <__alt_data_end+0xf800cda8>
1000ce20:	400b883a 	mov	r5,r8
1000ce24:	3023883a 	mov	r17,r6
1000ce28:	3825883a 	mov	r18,r7
1000ce2c:	003ea906 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000ce30:	20bff804 	addi	r2,r4,-32
1000ce34:	01c00804 	movi	r7,32
1000ce38:	4084d83a 	srl	r2,r8,r2
1000ce3c:	21c07e26 	beq	r4,r7,1000d038 <__adddf3+0x7e0>
1000ce40:	01c01004 	movi	r7,64
1000ce44:	3909c83a 	sub	r4,r7,r4
1000ce48:	4110983a 	sll	r8,r8,r4
1000ce4c:	418cb03a 	or	r6,r8,r6
1000ce50:	300cc03a 	cmpne	r6,r6,zero
1000ce54:	308cb03a 	or	r6,r6,r2
1000ce58:	0011883a 	mov	r8,zero
1000ce5c:	003f1b06 	br	1000cacc <__alt_data_end+0xf800cacc>
1000ce60:	0101ffc4 	movi	r4,2047
1000ce64:	113fa41e 	bne	r2,r4,1000ccf8 <__alt_data_end+0xf800ccf8>
1000ce68:	400b883a 	mov	r5,r8
1000ce6c:	3023883a 	mov	r17,r6
1000ce70:	1021883a 	mov	r16,r2
1000ce74:	3825883a 	mov	r18,r7
1000ce78:	003e9606 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000ce7c:	80001a1e 	bne	r16,zero,1000cee8 <__adddf3+0x690>
1000ce80:	2c4eb03a 	or	r7,r5,r17
1000ce84:	38005526 	beq	r7,zero,1000cfdc <__adddf3+0x784>
1000ce88:	0108303a 	nor	r4,zero,r4
1000ce8c:	2000511e 	bne	r4,zero,1000cfd4 <__adddf3+0x77c>
1000ce90:	89a3883a 	add	r17,r17,r6
1000ce94:	414b883a 	add	r5,r8,r5
1000ce98:	898d803a 	cmpltu	r6,r17,r6
1000ce9c:	298b883a 	add	r5,r5,r6
1000cea0:	1021883a 	mov	r16,r2
1000cea4:	003f0e06 	br	1000cae0 <__alt_data_end+0xf800cae0>
1000cea8:	1000341e 	bne	r2,zero,1000cf7c <__adddf3+0x724>
1000ceac:	4184b03a 	or	r2,r8,r6
1000ceb0:	10006f26 	beq	r2,zero,1000d070 <__adddf3+0x818>
1000ceb4:	400b883a 	mov	r5,r8
1000ceb8:	3023883a 	mov	r17,r6
1000cebc:	3825883a 	mov	r18,r7
1000cec0:	0401ffc4 	movi	r16,2047
1000cec4:	003e8306 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000cec8:	2c62b03a 	or	r17,r5,r17
1000cecc:	8822c03a 	cmpne	r17,r17,zero
1000ced0:	0007883a 	mov	r3,zero
1000ced4:	003f9506 	br	1000cd2c <__alt_data_end+0xf800cd2c>
1000ced8:	1021883a 	mov	r16,r2
1000cedc:	000b883a 	mov	r5,zero
1000cee0:	0023883a 	mov	r17,zero
1000cee4:	003edb06 	br	1000ca54 <__alt_data_end+0xf800ca54>
1000cee8:	01c1ffc4 	movi	r7,2047
1000ceec:	11c03b26 	beq	r2,r7,1000cfdc <__adddf3+0x784>
1000cef0:	0109c83a 	sub	r4,zero,r4
1000cef4:	29402034 	orhi	r5,r5,128
1000cef8:	01c00e04 	movi	r7,56
1000cefc:	39006216 	blt	r7,r4,1000d088 <__adddf3+0x830>
1000cf00:	01c007c4 	movi	r7,31
1000cf04:	39006b16 	blt	r7,r4,1000d0b4 <__adddf3+0x85c>
1000cf08:	01c00804 	movi	r7,32
1000cf0c:	390fc83a 	sub	r7,r7,r4
1000cf10:	29d4983a 	sll	r10,r5,r7
1000cf14:	8912d83a 	srl	r9,r17,r4
1000cf18:	89ce983a 	sll	r7,r17,r7
1000cf1c:	2908d83a 	srl	r4,r5,r4
1000cf20:	5262b03a 	or	r17,r10,r9
1000cf24:	380ac03a 	cmpne	r5,r7,zero
1000cf28:	8962b03a 	or	r17,r17,r5
1000cf2c:	89a3883a 	add	r17,r17,r6
1000cf30:	2211883a 	add	r8,r4,r8
1000cf34:	898d803a 	cmpltu	r6,r17,r6
1000cf38:	418b883a 	add	r5,r8,r6
1000cf3c:	1021883a 	mov	r16,r2
1000cf40:	003ee706 	br	1000cae0 <__alt_data_end+0xf800cae0>
1000cf44:	4184b03a 	or	r2,r8,r6
1000cf48:	103e6226 	beq	r2,zero,1000c8d4 <__alt_data_end+0xf800c8d4>
1000cf4c:	8987c83a 	sub	r3,r17,r6
1000cf50:	88c9803a 	cmpltu	r4,r17,r3
1000cf54:	2a05c83a 	sub	r2,r5,r8
1000cf58:	1105c83a 	sub	r2,r2,r4
1000cf5c:	1100202c 	andhi	r4,r2,128
1000cf60:	203f0426 	beq	r4,zero,1000cb74 <__alt_data_end+0xf800cb74>
1000cf64:	3463c83a 	sub	r17,r6,r17
1000cf68:	414bc83a 	sub	r5,r8,r5
1000cf6c:	344d803a 	cmpltu	r6,r6,r17
1000cf70:	298bc83a 	sub	r5,r5,r6
1000cf74:	3825883a 	mov	r18,r7
1000cf78:	003e5606 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000cf7c:	4184b03a 	or	r2,r8,r6
1000cf80:	10002b26 	beq	r2,zero,1000d030 <__adddf3+0x7d8>
1000cf84:	2804d0fa 	srli	r2,r5,3
1000cf88:	8822d0fa 	srli	r17,r17,3
1000cf8c:	280a977a 	slli	r5,r5,29
1000cf90:	10c0022c 	andhi	r3,r2,8
1000cf94:	2c62b03a 	or	r17,r5,r17
1000cf98:	18000826 	beq	r3,zero,1000cfbc <__adddf3+0x764>
1000cf9c:	4008d0fa 	srli	r4,r8,3
1000cfa0:	20c0022c 	andhi	r3,r4,8
1000cfa4:	1800051e 	bne	r3,zero,1000cfbc <__adddf3+0x764>
1000cfa8:	300cd0fa 	srli	r6,r6,3
1000cfac:	4010977a 	slli	r8,r8,29
1000cfb0:	2005883a 	mov	r2,r4
1000cfb4:	3825883a 	mov	r18,r7
1000cfb8:	41a2b03a 	or	r17,r8,r6
1000cfbc:	880ad77a 	srli	r5,r17,29
1000cfc0:	100490fa 	slli	r2,r2,3
1000cfc4:	882290fa 	slli	r17,r17,3
1000cfc8:	0401ffc4 	movi	r16,2047
1000cfcc:	288ab03a 	or	r5,r5,r2
1000cfd0:	003e4006 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000cfd4:	01c1ffc4 	movi	r7,2047
1000cfd8:	11ffc71e 	bne	r2,r7,1000cef8 <__alt_data_end+0xf800cef8>
1000cfdc:	400b883a 	mov	r5,r8
1000cfe0:	3023883a 	mov	r17,r6
1000cfe4:	1021883a 	mov	r16,r2
1000cfe8:	003e3a06 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000cfec:	10002d26 	beq	r2,zero,1000d0a4 <__adddf3+0x84c>
1000cff0:	4184b03a 	or	r2,r8,r6
1000cff4:	10000e26 	beq	r2,zero,1000d030 <__adddf3+0x7d8>
1000cff8:	2804d0fa 	srli	r2,r5,3
1000cffc:	8822d0fa 	srli	r17,r17,3
1000d000:	280a977a 	slli	r5,r5,29
1000d004:	10c0022c 	andhi	r3,r2,8
1000d008:	2c62b03a 	or	r17,r5,r17
1000d00c:	183feb26 	beq	r3,zero,1000cfbc <__alt_data_end+0xf800cfbc>
1000d010:	4008d0fa 	srli	r4,r8,3
1000d014:	20c0022c 	andhi	r3,r4,8
1000d018:	183fe81e 	bne	r3,zero,1000cfbc <__alt_data_end+0xf800cfbc>
1000d01c:	300cd0fa 	srli	r6,r6,3
1000d020:	4010977a 	slli	r8,r8,29
1000d024:	2005883a 	mov	r2,r4
1000d028:	41a2b03a 	or	r17,r8,r6
1000d02c:	003fe306 	br	1000cfbc <__alt_data_end+0xf800cfbc>
1000d030:	0401ffc4 	movi	r16,2047
1000d034:	003e2706 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000d038:	0011883a 	mov	r8,zero
1000d03c:	003f8306 	br	1000ce4c <__alt_data_end+0xf800ce4c>
1000d040:	193ff804 	addi	r4,r3,-32
1000d044:	02400804 	movi	r9,32
1000d048:	2908d83a 	srl	r4,r5,r4
1000d04c:	1a402526 	beq	r3,r9,1000d0e4 <__adddf3+0x88c>
1000d050:	02401004 	movi	r9,64
1000d054:	48c7c83a 	sub	r3,r9,r3
1000d058:	28ca983a 	sll	r5,r5,r3
1000d05c:	2c62b03a 	or	r17,r5,r17
1000d060:	8822c03a 	cmpne	r17,r17,zero
1000d064:	8922b03a 	or	r17,r17,r4
1000d068:	0007883a 	mov	r3,zero
1000d06c:	003f2f06 	br	1000cd2c <__alt_data_end+0xf800cd2c>
1000d070:	01402034 	movhi	r5,128
1000d074:	0007883a 	mov	r3,zero
1000d078:	297fffc4 	addi	r5,r5,-1
1000d07c:	047ffe04 	movi	r17,-8
1000d080:	0401ffc4 	movi	r16,2047
1000d084:	003e7306 	br	1000ca54 <__alt_data_end+0xf800ca54>
1000d088:	2c62b03a 	or	r17,r5,r17
1000d08c:	8822c03a 	cmpne	r17,r17,zero
1000d090:	0009883a 	mov	r4,zero
1000d094:	003fa506 	br	1000cf2c <__alt_data_end+0xf800cf2c>
1000d098:	400b883a 	mov	r5,r8
1000d09c:	3023883a 	mov	r17,r6
1000d0a0:	003e0c06 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000d0a4:	400b883a 	mov	r5,r8
1000d0a8:	3023883a 	mov	r17,r6
1000d0ac:	0401ffc4 	movi	r16,2047
1000d0b0:	003e0806 	br	1000c8d4 <__alt_data_end+0xf800c8d4>
1000d0b4:	21fff804 	addi	r7,r4,-32
1000d0b8:	02400804 	movi	r9,32
1000d0bc:	29ced83a 	srl	r7,r5,r7
1000d0c0:	22400a26 	beq	r4,r9,1000d0ec <__adddf3+0x894>
1000d0c4:	02401004 	movi	r9,64
1000d0c8:	4909c83a 	sub	r4,r9,r4
1000d0cc:	290a983a 	sll	r5,r5,r4
1000d0d0:	2c62b03a 	or	r17,r5,r17
1000d0d4:	8822c03a 	cmpne	r17,r17,zero
1000d0d8:	89e2b03a 	or	r17,r17,r7
1000d0dc:	0009883a 	mov	r4,zero
1000d0e0:	003f9206 	br	1000cf2c <__alt_data_end+0xf800cf2c>
1000d0e4:	000b883a 	mov	r5,zero
1000d0e8:	003fdc06 	br	1000d05c <__alt_data_end+0xf800d05c>
1000d0ec:	000b883a 	mov	r5,zero
1000d0f0:	003ff706 	br	1000d0d0 <__alt_data_end+0xf800d0d0>

1000d0f4 <__divdf3>:
1000d0f4:	defff004 	addi	sp,sp,-64
1000d0f8:	dc800815 	stw	r18,32(sp)
1000d0fc:	2824d53a 	srli	r18,r5,20
1000d100:	dd800c15 	stw	r22,48(sp)
1000d104:	282cd7fa 	srli	r22,r5,31
1000d108:	dc000615 	stw	r16,24(sp)
1000d10c:	04000434 	movhi	r16,16
1000d110:	df000e15 	stw	fp,56(sp)
1000d114:	dd000a15 	stw	r20,40(sp)
1000d118:	dcc00915 	stw	r19,36(sp)
1000d11c:	dc400715 	stw	r17,28(sp)
1000d120:	843fffc4 	addi	r16,r16,-1
1000d124:	dfc00f15 	stw	ra,60(sp)
1000d128:	ddc00d15 	stw	r23,52(sp)
1000d12c:	dd400b15 	stw	r21,44(sp)
1000d130:	9481ffcc 	andi	r18,r18,2047
1000d134:	2029883a 	mov	r20,r4
1000d138:	2027883a 	mov	r19,r4
1000d13c:	2c22703a 	and	r17,r5,r16
1000d140:	b7003fcc 	andi	fp,r22,255
1000d144:	90005e26 	beq	r18,zero,1000d2c0 <__divdf3+0x1cc>
1000d148:	0081ffc4 	movi	r2,2047
1000d14c:	90803526 	beq	r18,r2,1000d224 <__divdf3+0x130>
1000d150:	8c000434 	orhi	r16,r17,16
1000d154:	2004d77a 	srli	r2,r4,29
1000d158:	802090fa 	slli	r16,r16,3
1000d15c:	202690fa 	slli	r19,r4,3
1000d160:	94bf0044 	addi	r18,r18,-1023
1000d164:	80a2b03a 	or	r17,r16,r2
1000d168:	0029883a 	mov	r20,zero
1000d16c:	0011883a 	mov	r8,zero
1000d170:	380ad53a 	srli	r5,r7,20
1000d174:	382ed7fa 	srli	r23,r7,31
1000d178:	04000434 	movhi	r16,16
1000d17c:	843fffc4 	addi	r16,r16,-1
1000d180:	2941ffcc 	andi	r5,r5,2047
1000d184:	302b883a 	mov	r21,r6
1000d188:	3c20703a 	and	r16,r7,r16
1000d18c:	ba403fcc 	andi	r9,r23,255
1000d190:	28006726 	beq	r5,zero,1000d330 <__divdf3+0x23c>
1000d194:	0081ffc4 	movi	r2,2047
1000d198:	28805f26 	beq	r5,r2,1000d318 <__divdf3+0x224>
1000d19c:	84000434 	orhi	r16,r16,16
1000d1a0:	3004d77a 	srli	r2,r6,29
1000d1a4:	802090fa 	slli	r16,r16,3
1000d1a8:	302a90fa 	slli	r21,r6,3
1000d1ac:	297f0044 	addi	r5,r5,-1023
1000d1b0:	80a0b03a 	or	r16,r16,r2
1000d1b4:	000f883a 	mov	r7,zero
1000d1b8:	3d06b03a 	or	r3,r7,r20
1000d1bc:	180690ba 	slli	r3,r3,2
1000d1c0:	00840074 	movhi	r2,4097
1000d1c4:	10b47904 	addi	r2,r2,-11804
1000d1c8:	1885883a 	add	r2,r3,r2
1000d1cc:	10800017 	ldw	r2,0(r2)
1000d1d0:	b5c8f03a 	xor	r4,r22,r23
1000d1d4:	200d883a 	mov	r6,r4
1000d1d8:	25003fcc 	andi	r20,r4,255
1000d1dc:	9165c83a 	sub	r18,r18,r5
1000d1e0:	1000683a 	jmp	r2
1000d1e4:	1000d42c 	andhi	zero,r2,848
1000d1e8:	1000d25c 	xori	zero,r2,841
1000d1ec:	1000d3f0 	cmpltui	zero,r2,847
1000d1f0:	1000d240 	call	11000d24 <_gp+0xfe4f4c>
1000d1f4:	1000d3f0 	cmpltui	zero,r2,847
1000d1f8:	1000d3c4 	addi	zero,r2,847
1000d1fc:	1000d3f0 	cmpltui	zero,r2,847
1000d200:	1000d240 	call	11000d24 <_gp+0xfe4f4c>
1000d204:	1000d25c 	xori	zero,r2,841
1000d208:	1000d25c 	xori	zero,r2,841
1000d20c:	1000d3c4 	addi	zero,r2,847
1000d210:	1000d240 	call	11000d24 <_gp+0xfe4f4c>
1000d214:	1000d250 	cmplti	zero,r2,841
1000d218:	1000d250 	cmplti	zero,r2,841
1000d21c:	1000d250 	cmplti	zero,r2,841
1000d220:	1000d400 	call	11000d40 <_gp+0xfe4f68>
1000d224:	8904b03a 	or	r2,r17,r4
1000d228:	1000631e 	bne	r2,zero,1000d3b8 <__divdf3+0x2c4>
1000d22c:	05000204 	movi	r20,8
1000d230:	0023883a 	mov	r17,zero
1000d234:	0027883a 	mov	r19,zero
1000d238:	02000084 	movi	r8,2
1000d23c:	003fcc06 	br	1000d170 <__alt_data_end+0xf800d170>
1000d240:	8023883a 	mov	r17,r16
1000d244:	a827883a 	mov	r19,r21
1000d248:	4839883a 	mov	fp,r9
1000d24c:	3811883a 	mov	r8,r7
1000d250:	00800084 	movi	r2,2
1000d254:	4081531e 	bne	r8,r2,1000d7a4 <__divdf3+0x6b0>
1000d258:	e029883a 	mov	r20,fp
1000d25c:	a180004c 	andi	r6,r20,1
1000d260:	0201ffc4 	movi	r8,2047
1000d264:	000b883a 	mov	r5,zero
1000d268:	0027883a 	mov	r19,zero
1000d26c:	4010953a 	slli	r8,r8,20
1000d270:	30c03fcc 	andi	r3,r6,255
1000d274:	04000434 	movhi	r16,16
1000d278:	180697fa 	slli	r3,r3,31
1000d27c:	843fffc4 	addi	r16,r16,-1
1000d280:	2c20703a 	and	r16,r5,r16
1000d284:	8220b03a 	or	r16,r16,r8
1000d288:	80c6b03a 	or	r3,r16,r3
1000d28c:	9805883a 	mov	r2,r19
1000d290:	dfc00f17 	ldw	ra,60(sp)
1000d294:	df000e17 	ldw	fp,56(sp)
1000d298:	ddc00d17 	ldw	r23,52(sp)
1000d29c:	dd800c17 	ldw	r22,48(sp)
1000d2a0:	dd400b17 	ldw	r21,44(sp)
1000d2a4:	dd000a17 	ldw	r20,40(sp)
1000d2a8:	dcc00917 	ldw	r19,36(sp)
1000d2ac:	dc800817 	ldw	r18,32(sp)
1000d2b0:	dc400717 	ldw	r17,28(sp)
1000d2b4:	dc000617 	ldw	r16,24(sp)
1000d2b8:	dec01004 	addi	sp,sp,64
1000d2bc:	f800283a 	ret
1000d2c0:	8904b03a 	or	r2,r17,r4
1000d2c4:	10003726 	beq	r2,zero,1000d3a4 <__divdf3+0x2b0>
1000d2c8:	88014d26 	beq	r17,zero,1000d800 <__divdf3+0x70c>
1000d2cc:	8809883a 	mov	r4,r17
1000d2d0:	d9800215 	stw	r6,8(sp)
1000d2d4:	d9c00515 	stw	r7,20(sp)
1000d2d8:	000eff00 	call	1000eff0 <__clzsi2>
1000d2dc:	d9800217 	ldw	r6,8(sp)
1000d2e0:	d9c00517 	ldw	r7,20(sp)
1000d2e4:	1007883a 	mov	r3,r2
1000d2e8:	01000a04 	movi	r4,40
1000d2ec:	1cfffe04 	addi	r19,r3,-8
1000d2f0:	20c9c83a 	sub	r4,r4,r3
1000d2f4:	8cca983a 	sll	r5,r17,r19
1000d2f8:	a108d83a 	srl	r4,r20,r4
1000d2fc:	a4e6983a 	sll	r19,r20,r19
1000d300:	2162b03a 	or	r17,r4,r5
1000d304:	04bf0344 	movi	r18,-1011
1000d308:	90e5c83a 	sub	r18,r18,r3
1000d30c:	0029883a 	mov	r20,zero
1000d310:	0011883a 	mov	r8,zero
1000d314:	003f9606 	br	1000d170 <__alt_data_end+0xf800d170>
1000d318:	8184b03a 	or	r2,r16,r6
1000d31c:	10001f1e 	bne	r2,zero,1000d39c <__divdf3+0x2a8>
1000d320:	0021883a 	mov	r16,zero
1000d324:	002b883a 	mov	r21,zero
1000d328:	01c00084 	movi	r7,2
1000d32c:	003fa206 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d330:	8184b03a 	or	r2,r16,r6
1000d334:	10001526 	beq	r2,zero,1000d38c <__divdf3+0x298>
1000d338:	80013d26 	beq	r16,zero,1000d830 <__divdf3+0x73c>
1000d33c:	8009883a 	mov	r4,r16
1000d340:	d9800215 	stw	r6,8(sp)
1000d344:	da000315 	stw	r8,12(sp)
1000d348:	da400415 	stw	r9,16(sp)
1000d34c:	000eff00 	call	1000eff0 <__clzsi2>
1000d350:	d9800217 	ldw	r6,8(sp)
1000d354:	da000317 	ldw	r8,12(sp)
1000d358:	da400417 	ldw	r9,16(sp)
1000d35c:	1007883a 	mov	r3,r2
1000d360:	01000a04 	movi	r4,40
1000d364:	1d7ffe04 	addi	r21,r3,-8
1000d368:	20c9c83a 	sub	r4,r4,r3
1000d36c:	8560983a 	sll	r16,r16,r21
1000d370:	3108d83a 	srl	r4,r6,r4
1000d374:	356a983a 	sll	r21,r6,r21
1000d378:	2420b03a 	or	r16,r4,r16
1000d37c:	017f0344 	movi	r5,-1011
1000d380:	28cbc83a 	sub	r5,r5,r3
1000d384:	000f883a 	mov	r7,zero
1000d388:	003f8b06 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d38c:	0021883a 	mov	r16,zero
1000d390:	002b883a 	mov	r21,zero
1000d394:	01c00044 	movi	r7,1
1000d398:	003f8706 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d39c:	01c000c4 	movi	r7,3
1000d3a0:	003f8506 	br	1000d1b8 <__alt_data_end+0xf800d1b8>
1000d3a4:	05000104 	movi	r20,4
1000d3a8:	0023883a 	mov	r17,zero
1000d3ac:	0027883a 	mov	r19,zero
1000d3b0:	02000044 	movi	r8,1
1000d3b4:	003f6e06 	br	1000d170 <__alt_data_end+0xf800d170>
1000d3b8:	05000304 	movi	r20,12
1000d3bc:	020000c4 	movi	r8,3
1000d3c0:	003f6b06 	br	1000d170 <__alt_data_end+0xf800d170>
1000d3c4:	01400434 	movhi	r5,16
1000d3c8:	000d883a 	mov	r6,zero
1000d3cc:	297fffc4 	addi	r5,r5,-1
1000d3d0:	04ffffc4 	movi	r19,-1
1000d3d4:	0201ffc4 	movi	r8,2047
1000d3d8:	003fa406 	br	1000d26c <__alt_data_end+0xf800d26c>
1000d3dc:	043f0084 	movi	r16,-1022
1000d3e0:	84a1c83a 	sub	r16,r16,r18
1000d3e4:	00800e04 	movi	r2,56
1000d3e8:	14014d0e 	bge	r2,r16,1000d920 <__divdf3+0x82c>
1000d3ec:	a180004c 	andi	r6,r20,1
1000d3f0:	0011883a 	mov	r8,zero
1000d3f4:	000b883a 	mov	r5,zero
1000d3f8:	0027883a 	mov	r19,zero
1000d3fc:	003f9b06 	br	1000d26c <__alt_data_end+0xf800d26c>
1000d400:	8880022c 	andhi	r2,r17,8
1000d404:	1000f026 	beq	r2,zero,1000d7c8 <__divdf3+0x6d4>
1000d408:	8080022c 	andhi	r2,r16,8
1000d40c:	1000ee1e 	bne	r2,zero,1000d7c8 <__divdf3+0x6d4>
1000d410:	00800434 	movhi	r2,16
1000d414:	81400234 	orhi	r5,r16,8
1000d418:	10bfffc4 	addi	r2,r2,-1
1000d41c:	b80d883a 	mov	r6,r23
1000d420:	288a703a 	and	r5,r5,r2
1000d424:	a827883a 	mov	r19,r21
1000d428:	003fea06 	br	1000d3d4 <__alt_data_end+0xf800d3d4>
1000d42c:	84411c36 	bltu	r16,r17,1000d8a0 <__divdf3+0x7ac>
1000d430:	8c011a26 	beq	r17,r16,1000d89c <__divdf3+0x7a8>
1000d434:	94bfffc4 	addi	r18,r18,-1
1000d438:	dcc00015 	stw	r19,0(sp)
1000d43c:	8811883a 	mov	r8,r17
1000d440:	002d883a 	mov	r22,zero
1000d444:	a80cd63a 	srli	r6,r21,24
1000d448:	8020923a 	slli	r16,r16,8
1000d44c:	a82a923a 	slli	r21,r21,8
1000d450:	4009883a 	mov	r4,r8
1000d454:	342eb03a 	or	r23,r6,r16
1000d458:	dd400115 	stw	r21,4(sp)
1000d45c:	b82ad43a 	srli	r21,r23,16
1000d460:	da000315 	stw	r8,12(sp)
1000d464:	bcffffcc 	andi	r19,r23,65535
1000d468:	a80b883a 	mov	r5,r21
1000d46c:	000c8200 	call	1000c820 <__udivsi3>
1000d470:	1009883a 	mov	r4,r2
1000d474:	980b883a 	mov	r5,r19
1000d478:	1023883a 	mov	r17,r2
1000d47c:	000c8300 	call	1000c830 <__mulsi3>
1000d480:	da000317 	ldw	r8,12(sp)
1000d484:	a80b883a 	mov	r5,r21
1000d488:	1039883a 	mov	fp,r2
1000d48c:	4009883a 	mov	r4,r8
1000d490:	000c8280 	call	1000c828 <__umodsi3>
1000d494:	d8c00017 	ldw	r3,0(sp)
1000d498:	1004943a 	slli	r2,r2,16
1000d49c:	1810d43a 	srli	r8,r3,16
1000d4a0:	120eb03a 	or	r7,r2,r8
1000d4a4:	3f00062e 	bgeu	r7,fp,1000d4c0 <__divdf3+0x3cc>
1000d4a8:	3dcf883a 	add	r7,r7,r23
1000d4ac:	88bfffc4 	addi	r2,r17,-1
1000d4b0:	3dc10a36 	bltu	r7,r23,1000d8dc <__divdf3+0x7e8>
1000d4b4:	3f01092e 	bgeu	r7,fp,1000d8dc <__divdf3+0x7e8>
1000d4b8:	8c7fff84 	addi	r17,r17,-2
1000d4bc:	3dcf883a 	add	r7,r7,r23
1000d4c0:	3f39c83a 	sub	fp,r7,fp
1000d4c4:	e009883a 	mov	r4,fp
1000d4c8:	a80b883a 	mov	r5,r21
1000d4cc:	000c8200 	call	1000c820 <__udivsi3>
1000d4d0:	1009883a 	mov	r4,r2
1000d4d4:	980b883a 	mov	r5,r19
1000d4d8:	1021883a 	mov	r16,r2
1000d4dc:	000c8300 	call	1000c830 <__mulsi3>
1000d4e0:	e009883a 	mov	r4,fp
1000d4e4:	a80b883a 	mov	r5,r21
1000d4e8:	d8800315 	stw	r2,12(sp)
1000d4ec:	000c8280 	call	1000c828 <__umodsi3>
1000d4f0:	d9000017 	ldw	r4,0(sp)
1000d4f4:	1004943a 	slli	r2,r2,16
1000d4f8:	da000317 	ldw	r8,12(sp)
1000d4fc:	20ffffcc 	andi	r3,r4,65535
1000d500:	10ceb03a 	or	r7,r2,r3
1000d504:	3a00062e 	bgeu	r7,r8,1000d520 <__divdf3+0x42c>
1000d508:	3dcf883a 	add	r7,r7,r23
1000d50c:	80bfffc4 	addi	r2,r16,-1
1000d510:	3dc0f036 	bltu	r7,r23,1000d8d4 <__divdf3+0x7e0>
1000d514:	3a00ef2e 	bgeu	r7,r8,1000d8d4 <__divdf3+0x7e0>
1000d518:	843fff84 	addi	r16,r16,-2
1000d51c:	3dcf883a 	add	r7,r7,r23
1000d520:	d8c00117 	ldw	r3,4(sp)
1000d524:	8822943a 	slli	r17,r17,16
1000d528:	3a0fc83a 	sub	r7,r7,r8
1000d52c:	1806d43a 	srli	r3,r3,16
1000d530:	8462b03a 	or	r17,r16,r17
1000d534:	8affffcc 	andi	r11,r17,65535
1000d538:	d8c00015 	stw	r3,0(sp)
1000d53c:	d8c00117 	ldw	r3,4(sp)
1000d540:	8820d43a 	srli	r16,r17,16
1000d544:	5809883a 	mov	r4,r11
1000d548:	1f3fffcc 	andi	fp,r3,65535
1000d54c:	e00b883a 	mov	r5,fp
1000d550:	d9c00515 	stw	r7,20(sp)
1000d554:	dac00215 	stw	r11,8(sp)
1000d558:	000c8300 	call	1000c830 <__mulsi3>
1000d55c:	8009883a 	mov	r4,r16
1000d560:	e00b883a 	mov	r5,fp
1000d564:	d8800415 	stw	r2,16(sp)
1000d568:	000c8300 	call	1000c830 <__mulsi3>
1000d56c:	d9400017 	ldw	r5,0(sp)
1000d570:	8009883a 	mov	r4,r16
1000d574:	d8800315 	stw	r2,12(sp)
1000d578:	000c8300 	call	1000c830 <__mulsi3>
1000d57c:	dac00217 	ldw	r11,8(sp)
1000d580:	d9400017 	ldw	r5,0(sp)
1000d584:	d8800215 	stw	r2,8(sp)
1000d588:	5809883a 	mov	r4,r11
1000d58c:	000c8300 	call	1000c830 <__mulsi3>
1000d590:	da400417 	ldw	r9,16(sp)
1000d594:	da800317 	ldw	r10,12(sp)
1000d598:	d9c00517 	ldw	r7,20(sp)
1000d59c:	480ad43a 	srli	r5,r9,16
1000d5a0:	5085883a 	add	r2,r10,r2
1000d5a4:	db000217 	ldw	r12,8(sp)
1000d5a8:	1151883a 	add	r8,r2,r5
1000d5ac:	4280022e 	bgeu	r8,r10,1000d5b8 <__divdf3+0x4c4>
1000d5b0:	00800074 	movhi	r2,1
1000d5b4:	6099883a 	add	r12,r12,r2
1000d5b8:	400ad43a 	srli	r5,r8,16
1000d5bc:	4010943a 	slli	r8,r8,16
1000d5c0:	4c3fffcc 	andi	r16,r9,65535
1000d5c4:	6149883a 	add	r4,r12,r5
1000d5c8:	4411883a 	add	r8,r8,r16
1000d5cc:	3900a736 	bltu	r7,r4,1000d86c <__divdf3+0x778>
1000d5d0:	3900c426 	beq	r7,r4,1000d8e4 <__divdf3+0x7f0>
1000d5d4:	3909c83a 	sub	r4,r7,r4
1000d5d8:	b221c83a 	sub	r16,r22,r8
1000d5dc:	b42d803a 	cmpltu	r22,r22,r16
1000d5e0:	25adc83a 	sub	r22,r4,r22
1000d5e4:	b5c0c626 	beq	r22,r23,1000d900 <__divdf3+0x80c>
1000d5e8:	b009883a 	mov	r4,r22
1000d5ec:	a80b883a 	mov	r5,r21
1000d5f0:	000c8200 	call	1000c820 <__udivsi3>
1000d5f4:	1009883a 	mov	r4,r2
1000d5f8:	980b883a 	mov	r5,r19
1000d5fc:	d8800315 	stw	r2,12(sp)
1000d600:	000c8300 	call	1000c830 <__mulsi3>
1000d604:	a80b883a 	mov	r5,r21
1000d608:	b009883a 	mov	r4,r22
1000d60c:	d8800415 	stw	r2,16(sp)
1000d610:	000c8280 	call	1000c828 <__umodsi3>
1000d614:	1004943a 	slli	r2,r2,16
1000d618:	800ed43a 	srli	r7,r16,16
1000d61c:	da400417 	ldw	r9,16(sp)
1000d620:	da000317 	ldw	r8,12(sp)
1000d624:	11cab03a 	or	r5,r2,r7
1000d628:	2a40062e 	bgeu	r5,r9,1000d644 <__divdf3+0x550>
1000d62c:	2dcb883a 	add	r5,r5,r23
1000d630:	40bfffc4 	addi	r2,r8,-1
1000d634:	2dc0b436 	bltu	r5,r23,1000d908 <__divdf3+0x814>
1000d638:	2a40b32e 	bgeu	r5,r9,1000d908 <__divdf3+0x814>
1000d63c:	423fff84 	addi	r8,r8,-2
1000d640:	2dcb883a 	add	r5,r5,r23
1000d644:	2a6dc83a 	sub	r22,r5,r9
1000d648:	b009883a 	mov	r4,r22
1000d64c:	a80b883a 	mov	r5,r21
1000d650:	da000315 	stw	r8,12(sp)
1000d654:	000c8200 	call	1000c820 <__udivsi3>
1000d658:	980b883a 	mov	r5,r19
1000d65c:	1009883a 	mov	r4,r2
1000d660:	d8800415 	stw	r2,16(sp)
1000d664:	000c8300 	call	1000c830 <__mulsi3>
1000d668:	b009883a 	mov	r4,r22
1000d66c:	a80b883a 	mov	r5,r21
1000d670:	1027883a 	mov	r19,r2
1000d674:	000c8280 	call	1000c828 <__umodsi3>
1000d678:	1004943a 	slli	r2,r2,16
1000d67c:	843fffcc 	andi	r16,r16,65535
1000d680:	da000317 	ldw	r8,12(sp)
1000d684:	140eb03a 	or	r7,r2,r16
1000d688:	da400417 	ldw	r9,16(sp)
1000d68c:	3cc0062e 	bgeu	r7,r19,1000d6a8 <__divdf3+0x5b4>
1000d690:	3dcf883a 	add	r7,r7,r23
1000d694:	48bfffc4 	addi	r2,r9,-1
1000d698:	3dc09d36 	bltu	r7,r23,1000d910 <__divdf3+0x81c>
1000d69c:	3cc09c2e 	bgeu	r7,r19,1000d910 <__divdf3+0x81c>
1000d6a0:	4a7fff84 	addi	r9,r9,-2
1000d6a4:	3dcf883a 	add	r7,r7,r23
1000d6a8:	4010943a 	slli	r8,r8,16
1000d6ac:	3cebc83a 	sub	r21,r7,r19
1000d6b0:	e00b883a 	mov	r5,fp
1000d6b4:	4a26b03a 	or	r19,r9,r8
1000d6b8:	99ffffcc 	andi	r7,r19,65535
1000d6bc:	9820d43a 	srli	r16,r19,16
1000d6c0:	3809883a 	mov	r4,r7
1000d6c4:	d9c00515 	stw	r7,20(sp)
1000d6c8:	000c8300 	call	1000c830 <__mulsi3>
1000d6cc:	8009883a 	mov	r4,r16
1000d6d0:	e00b883a 	mov	r5,fp
1000d6d4:	102d883a 	mov	r22,r2
1000d6d8:	000c8300 	call	1000c830 <__mulsi3>
1000d6dc:	d9400017 	ldw	r5,0(sp)
1000d6e0:	8009883a 	mov	r4,r16
1000d6e4:	1039883a 	mov	fp,r2
1000d6e8:	000c8300 	call	1000c830 <__mulsi3>
1000d6ec:	d9c00517 	ldw	r7,20(sp)
1000d6f0:	d9400017 	ldw	r5,0(sp)
1000d6f4:	1021883a 	mov	r16,r2
1000d6f8:	3809883a 	mov	r4,r7
1000d6fc:	000c8300 	call	1000c830 <__mulsi3>
1000d700:	b008d43a 	srli	r4,r22,16
1000d704:	e085883a 	add	r2,fp,r2
1000d708:	1109883a 	add	r4,r2,r4
1000d70c:	2700022e 	bgeu	r4,fp,1000d718 <__divdf3+0x624>
1000d710:	00800074 	movhi	r2,1
1000d714:	80a1883a 	add	r16,r16,r2
1000d718:	200ad43a 	srli	r5,r4,16
1000d71c:	2008943a 	slli	r4,r4,16
1000d720:	b5bfffcc 	andi	r22,r22,65535
1000d724:	8145883a 	add	r2,r16,r5
1000d728:	2589883a 	add	r4,r4,r22
1000d72c:	a8802c36 	bltu	r21,r2,1000d7e0 <__divdf3+0x6ec>
1000d730:	a880a426 	beq	r21,r2,1000d9c4 <__divdf3+0x8d0>
1000d734:	9cc00054 	ori	r19,r19,1
1000d738:	9200ffc4 	addi	r8,r18,1023
1000d73c:	023f270e 	bge	zero,r8,1000d3dc <__alt_data_end+0xf800d3dc>
1000d740:	988001cc 	andi	r2,r19,7
1000d744:	10000726 	beq	r2,zero,1000d764 <__divdf3+0x670>
1000d748:	990003cc 	andi	r4,r19,15
1000d74c:	00800104 	movi	r2,4
1000d750:	20800426 	beq	r4,r2,1000d764 <__divdf3+0x670>
1000d754:	9885883a 	add	r2,r19,r2
1000d758:	14e7803a 	cmpltu	r19,r2,r19
1000d75c:	8ce3883a 	add	r17,r17,r19
1000d760:	1027883a 	mov	r19,r2
1000d764:	8880402c 	andhi	r2,r17,256
1000d768:	10000426 	beq	r2,zero,1000d77c <__divdf3+0x688>
1000d76c:	00bfc034 	movhi	r2,65280
1000d770:	10bfffc4 	addi	r2,r2,-1
1000d774:	92010004 	addi	r8,r18,1024
1000d778:	88a2703a 	and	r17,r17,r2
1000d77c:	0081ff84 	movi	r2,2046
1000d780:	123eb616 	blt	r2,r8,1000d25c <__alt_data_end+0xf800d25c>
1000d784:	9826d0fa 	srli	r19,r19,3
1000d788:	8804977a 	slli	r2,r17,29
1000d78c:	8820927a 	slli	r16,r17,9
1000d790:	4201ffcc 	andi	r8,r8,2047
1000d794:	14e6b03a 	or	r19,r2,r19
1000d798:	800ad33a 	srli	r5,r16,12
1000d79c:	a180004c 	andi	r6,r20,1
1000d7a0:	003eb206 	br	1000d26c <__alt_data_end+0xf800d26c>
1000d7a4:	008000c4 	movi	r2,3
1000d7a8:	4080ac26 	beq	r8,r2,1000da5c <__divdf3+0x968>
1000d7ac:	00800044 	movi	r2,1
1000d7b0:	4080591e 	bne	r8,r2,1000d918 <__divdf3+0x824>
1000d7b4:	e00d883a 	mov	r6,fp
1000d7b8:	0011883a 	mov	r8,zero
1000d7bc:	000b883a 	mov	r5,zero
1000d7c0:	0027883a 	mov	r19,zero
1000d7c4:	003ea906 	br	1000d26c <__alt_data_end+0xf800d26c>
1000d7c8:	00800434 	movhi	r2,16
1000d7cc:	89400234 	orhi	r5,r17,8
1000d7d0:	10bfffc4 	addi	r2,r2,-1
1000d7d4:	b00d883a 	mov	r6,r22
1000d7d8:	288a703a 	and	r5,r5,r2
1000d7dc:	003efd06 	br	1000d3d4 <__alt_data_end+0xf800d3d4>
1000d7e0:	adcf883a 	add	r7,r21,r23
1000d7e4:	997fffc4 	addi	r5,r19,-1
1000d7e8:	3dc0412e 	bgeu	r7,r23,1000d8f0 <__divdf3+0x7fc>
1000d7ec:	2827883a 	mov	r19,r5
1000d7f0:	38bfd01e 	bne	r7,r2,1000d734 <__alt_data_end+0xf800d734>
1000d7f4:	d8c00117 	ldw	r3,4(sp)
1000d7f8:	193fce1e 	bne	r3,r4,1000d734 <__alt_data_end+0xf800d734>
1000d7fc:	003fce06 	br	1000d738 <__alt_data_end+0xf800d738>
1000d800:	d9800215 	stw	r6,8(sp)
1000d804:	d9c00515 	stw	r7,20(sp)
1000d808:	000eff00 	call	1000eff0 <__clzsi2>
1000d80c:	10c00804 	addi	r3,r2,32
1000d810:	010009c4 	movi	r4,39
1000d814:	d9800217 	ldw	r6,8(sp)
1000d818:	d9c00517 	ldw	r7,20(sp)
1000d81c:	20feb20e 	bge	r4,r3,1000d2e8 <__alt_data_end+0xf800d2e8>
1000d820:	117ffe04 	addi	r5,r2,-8
1000d824:	a162983a 	sll	r17,r20,r5
1000d828:	0027883a 	mov	r19,zero
1000d82c:	003eb506 	br	1000d304 <__alt_data_end+0xf800d304>
1000d830:	3009883a 	mov	r4,r6
1000d834:	d9800215 	stw	r6,8(sp)
1000d838:	da000315 	stw	r8,12(sp)
1000d83c:	da400415 	stw	r9,16(sp)
1000d840:	000eff00 	call	1000eff0 <__clzsi2>
1000d844:	10c00804 	addi	r3,r2,32
1000d848:	010009c4 	movi	r4,39
1000d84c:	d9800217 	ldw	r6,8(sp)
1000d850:	da000317 	ldw	r8,12(sp)
1000d854:	da400417 	ldw	r9,16(sp)
1000d858:	20fec10e 	bge	r4,r3,1000d360 <__alt_data_end+0xf800d360>
1000d85c:	10bffe04 	addi	r2,r2,-8
1000d860:	a8a0983a 	sll	r16,r21,r2
1000d864:	002b883a 	mov	r21,zero
1000d868:	003ec406 	br	1000d37c <__alt_data_end+0xf800d37c>
1000d86c:	d8c00117 	ldw	r3,4(sp)
1000d870:	b0ed883a 	add	r22,r22,r3
1000d874:	b0c5803a 	cmpltu	r2,r22,r3
1000d878:	15c5883a 	add	r2,r2,r23
1000d87c:	11cf883a 	add	r7,r2,r7
1000d880:	88bfffc4 	addi	r2,r17,-1
1000d884:	b9c00d2e 	bgeu	r23,r7,1000d8bc <__divdf3+0x7c8>
1000d888:	39003f36 	bltu	r7,r4,1000d988 <__divdf3+0x894>
1000d88c:	21c06a26 	beq	r4,r7,1000da38 <__divdf3+0x944>
1000d890:	3909c83a 	sub	r4,r7,r4
1000d894:	1023883a 	mov	r17,r2
1000d898:	003f4f06 	br	1000d5d8 <__alt_data_end+0xf800d5d8>
1000d89c:	9d7ee536 	bltu	r19,r21,1000d434 <__alt_data_end+0xf800d434>
1000d8a0:	982ed07a 	srli	r23,r19,1
1000d8a4:	880497fa 	slli	r2,r17,31
1000d8a8:	8810d07a 	srli	r8,r17,1
1000d8ac:	982c97fa 	slli	r22,r19,31
1000d8b0:	b884b03a 	or	r2,r23,r2
1000d8b4:	d8800015 	stw	r2,0(sp)
1000d8b8:	003ee206 	br	1000d444 <__alt_data_end+0xf800d444>
1000d8bc:	3dfff41e 	bne	r7,r23,1000d890 <__alt_data_end+0xf800d890>
1000d8c0:	d8c00117 	ldw	r3,4(sp)
1000d8c4:	b0fff02e 	bgeu	r22,r3,1000d888 <__alt_data_end+0xf800d888>
1000d8c8:	b909c83a 	sub	r4,r23,r4
1000d8cc:	1023883a 	mov	r17,r2
1000d8d0:	003f4106 	br	1000d5d8 <__alt_data_end+0xf800d5d8>
1000d8d4:	1021883a 	mov	r16,r2
1000d8d8:	003f1106 	br	1000d520 <__alt_data_end+0xf800d520>
1000d8dc:	1023883a 	mov	r17,r2
1000d8e0:	003ef706 	br	1000d4c0 <__alt_data_end+0xf800d4c0>
1000d8e4:	b23fe136 	bltu	r22,r8,1000d86c <__alt_data_end+0xf800d86c>
1000d8e8:	0009883a 	mov	r4,zero
1000d8ec:	003f3a06 	br	1000d5d8 <__alt_data_end+0xf800d5d8>
1000d8f0:	38802c36 	bltu	r7,r2,1000d9a4 <__divdf3+0x8b0>
1000d8f4:	11c05326 	beq	r2,r7,1000da44 <__divdf3+0x950>
1000d8f8:	2827883a 	mov	r19,r5
1000d8fc:	003f8d06 	br	1000d734 <__alt_data_end+0xf800d734>
1000d900:	04ffffc4 	movi	r19,-1
1000d904:	003f8c06 	br	1000d738 <__alt_data_end+0xf800d738>
1000d908:	1011883a 	mov	r8,r2
1000d90c:	003f4d06 	br	1000d644 <__alt_data_end+0xf800d644>
1000d910:	1013883a 	mov	r9,r2
1000d914:	003f6406 	br	1000d6a8 <__alt_data_end+0xf800d6a8>
1000d918:	e029883a 	mov	r20,fp
1000d91c:	003f8606 	br	1000d738 <__alt_data_end+0xf800d738>
1000d920:	008007c4 	movi	r2,31
1000d924:	14002a16 	blt	r2,r16,1000d9d0 <__divdf3+0x8dc>
1000d928:	91410784 	addi	r5,r18,1054
1000d92c:	9c0cd83a 	srl	r6,r19,r16
1000d930:	8948983a 	sll	r4,r17,r5
1000d934:	9944983a 	sll	r2,r19,r5
1000d938:	8c20d83a 	srl	r16,r17,r16
1000d93c:	3108b03a 	or	r4,r6,r4
1000d940:	1004c03a 	cmpne	r2,r2,zero
1000d944:	2084b03a 	or	r2,r4,r2
1000d948:	110001cc 	andi	r4,r2,7
1000d94c:	20000726 	beq	r4,zero,1000d96c <__divdf3+0x878>
1000d950:	114003cc 	andi	r5,r2,15
1000d954:	01000104 	movi	r4,4
1000d958:	29000426 	beq	r5,r4,1000d96c <__divdf3+0x878>
1000d95c:	11000104 	addi	r4,r2,4
1000d960:	2085803a 	cmpltu	r2,r4,r2
1000d964:	80a1883a 	add	r16,r16,r2
1000d968:	2005883a 	mov	r2,r4
1000d96c:	8100202c 	andhi	r4,r16,128
1000d970:	20002d26 	beq	r4,zero,1000da28 <__divdf3+0x934>
1000d974:	a180004c 	andi	r6,r20,1
1000d978:	02000044 	movi	r8,1
1000d97c:	000b883a 	mov	r5,zero
1000d980:	0027883a 	mov	r19,zero
1000d984:	003e3906 	br	1000d26c <__alt_data_end+0xf800d26c>
1000d988:	d8c00117 	ldw	r3,4(sp)
1000d98c:	8c7fff84 	addi	r17,r17,-2
1000d990:	b0ed883a 	add	r22,r22,r3
1000d994:	b0c5803a 	cmpltu	r2,r22,r3
1000d998:	15c5883a 	add	r2,r2,r23
1000d99c:	11cf883a 	add	r7,r2,r7
1000d9a0:	003f0c06 	br	1000d5d4 <__alt_data_end+0xf800d5d4>
1000d9a4:	d8c00117 	ldw	r3,4(sp)
1000d9a8:	997fff84 	addi	r5,r19,-2
1000d9ac:	18d1883a 	add	r8,r3,r3
1000d9b0:	40c7803a 	cmpltu	r3,r8,r3
1000d9b4:	1dcd883a 	add	r6,r3,r23
1000d9b8:	398f883a 	add	r7,r7,r6
1000d9bc:	da000115 	stw	r8,4(sp)
1000d9c0:	003f8a06 	br	1000d7ec <__alt_data_end+0xf800d7ec>
1000d9c4:	203f861e 	bne	r4,zero,1000d7e0 <__alt_data_end+0xf800d7e0>
1000d9c8:	d8000115 	stw	zero,4(sp)
1000d9cc:	003f8906 	br	1000d7f4 <__alt_data_end+0xf800d7f4>
1000d9d0:	00bef884 	movi	r2,-1054
1000d9d4:	1485c83a 	sub	r2,r2,r18
1000d9d8:	01000804 	movi	r4,32
1000d9dc:	8884d83a 	srl	r2,r17,r2
1000d9e0:	81001c26 	beq	r16,r4,1000da54 <__divdf3+0x960>
1000d9e4:	91010f84 	addi	r4,r18,1086
1000d9e8:	8908983a 	sll	r4,r17,r4
1000d9ec:	24c8b03a 	or	r4,r4,r19
1000d9f0:	2008c03a 	cmpne	r4,r4,zero
1000d9f4:	2084b03a 	or	r2,r4,r2
1000d9f8:	140001cc 	andi	r16,r2,7
1000d9fc:	8000061e 	bne	r16,zero,1000da18 <__divdf3+0x924>
1000da00:	000b883a 	mov	r5,zero
1000da04:	1004d0fa 	srli	r2,r2,3
1000da08:	a180004c 	andi	r6,r20,1
1000da0c:	0011883a 	mov	r8,zero
1000da10:	1426b03a 	or	r19,r2,r16
1000da14:	003e1506 	br	1000d26c <__alt_data_end+0xf800d26c>
1000da18:	114003cc 	andi	r5,r2,15
1000da1c:	01000104 	movi	r4,4
1000da20:	0021883a 	mov	r16,zero
1000da24:	293fcd1e 	bne	r5,r4,1000d95c <__alt_data_end+0xf800d95c>
1000da28:	800a927a 	slli	r5,r16,9
1000da2c:	8020977a 	slli	r16,r16,29
1000da30:	280ad33a 	srli	r5,r5,12
1000da34:	003ff306 	br	1000da04 <__alt_data_end+0xf800da04>
1000da38:	b23fd336 	bltu	r22,r8,1000d988 <__alt_data_end+0xf800d988>
1000da3c:	1023883a 	mov	r17,r2
1000da40:	003fa906 	br	1000d8e8 <__alt_data_end+0xf800d8e8>
1000da44:	d8c00117 	ldw	r3,4(sp)
1000da48:	193fd636 	bltu	r3,r4,1000d9a4 <__alt_data_end+0xf800d9a4>
1000da4c:	2827883a 	mov	r19,r5
1000da50:	003f6806 	br	1000d7f4 <__alt_data_end+0xf800d7f4>
1000da54:	0009883a 	mov	r4,zero
1000da58:	003fe406 	br	1000d9ec <__alt_data_end+0xf800d9ec>
1000da5c:	00800434 	movhi	r2,16
1000da60:	89400234 	orhi	r5,r17,8
1000da64:	10bfffc4 	addi	r2,r2,-1
1000da68:	e00d883a 	mov	r6,fp
1000da6c:	288a703a 	and	r5,r5,r2
1000da70:	003e5806 	br	1000d3d4 <__alt_data_end+0xf800d3d4>

1000da74 <__eqdf2>:
1000da74:	2804d53a 	srli	r2,r5,20
1000da78:	3806d53a 	srli	r3,r7,20
1000da7c:	02000434 	movhi	r8,16
1000da80:	423fffc4 	addi	r8,r8,-1
1000da84:	1081ffcc 	andi	r2,r2,2047
1000da88:	0241ffc4 	movi	r9,2047
1000da8c:	2a14703a 	and	r10,r5,r8
1000da90:	18c1ffcc 	andi	r3,r3,2047
1000da94:	3a10703a 	and	r8,r7,r8
1000da98:	280ad7fa 	srli	r5,r5,31
1000da9c:	380ed7fa 	srli	r7,r7,31
1000daa0:	12400f26 	beq	r2,r9,1000dae0 <__eqdf2+0x6c>
1000daa4:	0241ffc4 	movi	r9,2047
1000daa8:	1a400326 	beq	r3,r9,1000dab8 <__eqdf2+0x44>
1000daac:	10c00526 	beq	r2,r3,1000dac4 <__eqdf2+0x50>
1000dab0:	00800044 	movi	r2,1
1000dab4:	f800283a 	ret
1000dab8:	4192b03a 	or	r9,r8,r6
1000dabc:	483ffc1e 	bne	r9,zero,1000dab0 <__alt_data_end+0xf800dab0>
1000dac0:	10fffb1e 	bne	r2,r3,1000dab0 <__alt_data_end+0xf800dab0>
1000dac4:	523ffa1e 	bne	r10,r8,1000dab0 <__alt_data_end+0xf800dab0>
1000dac8:	21bff91e 	bne	r4,r6,1000dab0 <__alt_data_end+0xf800dab0>
1000dacc:	29c00826 	beq	r5,r7,1000daf0 <__eqdf2+0x7c>
1000dad0:	103ff71e 	bne	r2,zero,1000dab0 <__alt_data_end+0xf800dab0>
1000dad4:	5104b03a 	or	r2,r10,r4
1000dad8:	1004c03a 	cmpne	r2,r2,zero
1000dadc:	f800283a 	ret
1000dae0:	5112b03a 	or	r9,r10,r4
1000dae4:	483fef26 	beq	r9,zero,1000daa4 <__alt_data_end+0xf800daa4>
1000dae8:	00800044 	movi	r2,1
1000daec:	f800283a 	ret
1000daf0:	0005883a 	mov	r2,zero
1000daf4:	f800283a 	ret

1000daf8 <__gedf2>:
1000daf8:	2804d53a 	srli	r2,r5,20
1000dafc:	3806d53a 	srli	r3,r7,20
1000db00:	02000434 	movhi	r8,16
1000db04:	423fffc4 	addi	r8,r8,-1
1000db08:	0241ffc4 	movi	r9,2047
1000db0c:	1081ffcc 	andi	r2,r2,2047
1000db10:	2a14703a 	and	r10,r5,r8
1000db14:	1a46703a 	and	r3,r3,r9
1000db18:	3a10703a 	and	r8,r7,r8
1000db1c:	280ad7fa 	srli	r5,r5,31
1000db20:	380ed7fa 	srli	r7,r7,31
1000db24:	12400b26 	beq	r2,r9,1000db54 <__gedf2+0x5c>
1000db28:	1a401626 	beq	r3,r9,1000db84 <__gedf2+0x8c>
1000db2c:	10000c1e 	bne	r2,zero,1000db60 <__gedf2+0x68>
1000db30:	5112b03a 	or	r9,r10,r4
1000db34:	4813003a 	cmpeq	r9,r9,zero
1000db38:	4817883a 	mov	r11,r9
1000db3c:	18000c1e 	bne	r3,zero,1000db70 <__gedf2+0x78>
1000db40:	4198b03a 	or	r12,r8,r6
1000db44:	60000a1e 	bne	r12,zero,1000db70 <__gedf2+0x78>
1000db48:	48001326 	beq	r9,zero,1000db98 <__gedf2+0xa0>
1000db4c:	0005883a 	mov	r2,zero
1000db50:	f800283a 	ret
1000db54:	5112b03a 	or	r9,r10,r4
1000db58:	4800191e 	bne	r9,zero,1000dbc0 <__gedf2+0xc8>
1000db5c:	18800926 	beq	r3,r2,1000db84 <__gedf2+0x8c>
1000db60:	18000b1e 	bne	r3,zero,1000db90 <__gedf2+0x98>
1000db64:	4192b03a 	or	r9,r8,r6
1000db68:	0017883a 	mov	r11,zero
1000db6c:	48000a26 	beq	r9,zero,1000db98 <__gedf2+0xa0>
1000db70:	39c03fcc 	andi	r7,r7,255
1000db74:	58000726 	beq	r11,zero,1000db94 <__gedf2+0x9c>
1000db78:	3800081e 	bne	r7,zero,1000db9c <__gedf2+0xa4>
1000db7c:	00bfffc4 	movi	r2,-1
1000db80:	f800283a 	ret
1000db84:	4192b03a 	or	r9,r8,r6
1000db88:	48000d1e 	bne	r9,zero,1000dbc0 <__gedf2+0xc8>
1000db8c:	103fe826 	beq	r2,zero,1000db30 <__alt_data_end+0xf800db30>
1000db90:	39c03fcc 	andi	r7,r7,255
1000db94:	29c00326 	beq	r5,r7,1000dba4 <__gedf2+0xac>
1000db98:	283ff81e 	bne	r5,zero,1000db7c <__alt_data_end+0xf800db7c>
1000db9c:	00800044 	movi	r2,1
1000dba0:	f800283a 	ret
1000dba4:	18bffc16 	blt	r3,r2,1000db98 <__alt_data_end+0xf800db98>
1000dba8:	10c00316 	blt	r2,r3,1000dbb8 <__gedf2+0xc0>
1000dbac:	42bffa36 	bltu	r8,r10,1000db98 <__alt_data_end+0xf800db98>
1000dbb0:	52000526 	beq	r10,r8,1000dbc8 <__gedf2+0xd0>
1000dbb4:	523fe52e 	bgeu	r10,r8,1000db4c <__alt_data_end+0xf800db4c>
1000dbb8:	283ff026 	beq	r5,zero,1000db7c <__alt_data_end+0xf800db7c>
1000dbbc:	003ff706 	br	1000db9c <__alt_data_end+0xf800db9c>
1000dbc0:	00bfff84 	movi	r2,-2
1000dbc4:	f800283a 	ret
1000dbc8:	313ff336 	bltu	r6,r4,1000db98 <__alt_data_end+0xf800db98>
1000dbcc:	21bfdf2e 	bgeu	r4,r6,1000db4c <__alt_data_end+0xf800db4c>
1000dbd0:	283fea26 	beq	r5,zero,1000db7c <__alt_data_end+0xf800db7c>
1000dbd4:	003ff106 	br	1000db9c <__alt_data_end+0xf800db9c>

1000dbd8 <__ledf2>:
1000dbd8:	2804d53a 	srli	r2,r5,20
1000dbdc:	3810d53a 	srli	r8,r7,20
1000dbe0:	00c00434 	movhi	r3,16
1000dbe4:	18ffffc4 	addi	r3,r3,-1
1000dbe8:	0241ffc4 	movi	r9,2047
1000dbec:	1081ffcc 	andi	r2,r2,2047
1000dbf0:	28d4703a 	and	r10,r5,r3
1000dbf4:	4250703a 	and	r8,r8,r9
1000dbf8:	38c6703a 	and	r3,r7,r3
1000dbfc:	280ad7fa 	srli	r5,r5,31
1000dc00:	380ed7fa 	srli	r7,r7,31
1000dc04:	12400b26 	beq	r2,r9,1000dc34 <__ledf2+0x5c>
1000dc08:	42401926 	beq	r8,r9,1000dc70 <__ledf2+0x98>
1000dc0c:	10000c1e 	bne	r2,zero,1000dc40 <__ledf2+0x68>
1000dc10:	5112b03a 	or	r9,r10,r4
1000dc14:	4813003a 	cmpeq	r9,r9,zero
1000dc18:	4817883a 	mov	r11,r9
1000dc1c:	40000f26 	beq	r8,zero,1000dc5c <__ledf2+0x84>
1000dc20:	39c03fcc 	andi	r7,r7,255
1000dc24:	58001826 	beq	r11,zero,1000dc88 <__ledf2+0xb0>
1000dc28:	38000a1e 	bne	r7,zero,1000dc54 <__ledf2+0x7c>
1000dc2c:	00bfffc4 	movi	r2,-1
1000dc30:	f800283a 	ret
1000dc34:	5112b03a 	or	r9,r10,r4
1000dc38:	48000f1e 	bne	r9,zero,1000dc78 <__ledf2+0xa0>
1000dc3c:	40800c26 	beq	r8,r2,1000dc70 <__ledf2+0x98>
1000dc40:	4000101e 	bne	r8,zero,1000dc84 <__ledf2+0xac>
1000dc44:	1992b03a 	or	r9,r3,r6
1000dc48:	0017883a 	mov	r11,zero
1000dc4c:	483ff41e 	bne	r9,zero,1000dc20 <__alt_data_end+0xf800dc20>
1000dc50:	283ff61e 	bne	r5,zero,1000dc2c <__alt_data_end+0xf800dc2c>
1000dc54:	00800044 	movi	r2,1
1000dc58:	f800283a 	ret
1000dc5c:	1998b03a 	or	r12,r3,r6
1000dc60:	603fef1e 	bne	r12,zero,1000dc20 <__alt_data_end+0xf800dc20>
1000dc64:	483ffa26 	beq	r9,zero,1000dc50 <__alt_data_end+0xf800dc50>
1000dc68:	0005883a 	mov	r2,zero
1000dc6c:	f800283a 	ret
1000dc70:	1992b03a 	or	r9,r3,r6
1000dc74:	48000226 	beq	r9,zero,1000dc80 <__ledf2+0xa8>
1000dc78:	00800084 	movi	r2,2
1000dc7c:	f800283a 	ret
1000dc80:	103fe326 	beq	r2,zero,1000dc10 <__alt_data_end+0xf800dc10>
1000dc84:	39c03fcc 	andi	r7,r7,255
1000dc88:	29fff11e 	bne	r5,r7,1000dc50 <__alt_data_end+0xf800dc50>
1000dc8c:	40bff016 	blt	r8,r2,1000dc50 <__alt_data_end+0xf800dc50>
1000dc90:	12000316 	blt	r2,r8,1000dca0 <__ledf2+0xc8>
1000dc94:	1abfee36 	bltu	r3,r10,1000dc50 <__alt_data_end+0xf800dc50>
1000dc98:	50c00326 	beq	r10,r3,1000dca8 <__ledf2+0xd0>
1000dc9c:	50fff22e 	bgeu	r10,r3,1000dc68 <__alt_data_end+0xf800dc68>
1000dca0:	283fe226 	beq	r5,zero,1000dc2c <__alt_data_end+0xf800dc2c>
1000dca4:	003feb06 	br	1000dc54 <__alt_data_end+0xf800dc54>
1000dca8:	313fe936 	bltu	r6,r4,1000dc50 <__alt_data_end+0xf800dc50>
1000dcac:	21bfee2e 	bgeu	r4,r6,1000dc68 <__alt_data_end+0xf800dc68>
1000dcb0:	283fde26 	beq	r5,zero,1000dc2c <__alt_data_end+0xf800dc2c>
1000dcb4:	003fe706 	br	1000dc54 <__alt_data_end+0xf800dc54>

1000dcb8 <__muldf3>:
1000dcb8:	deffee04 	addi	sp,sp,-72
1000dcbc:	dd000c15 	stw	r20,48(sp)
1000dcc0:	2828d53a 	srli	r20,r5,20
1000dcc4:	dd400d15 	stw	r21,52(sp)
1000dcc8:	282ad7fa 	srli	r21,r5,31
1000dccc:	dc000815 	stw	r16,32(sp)
1000dcd0:	04000434 	movhi	r16,16
1000dcd4:	ddc00f15 	stw	r23,60(sp)
1000dcd8:	dcc00b15 	stw	r19,44(sp)
1000dcdc:	dc800a15 	stw	r18,40(sp)
1000dce0:	843fffc4 	addi	r16,r16,-1
1000dce4:	dfc01115 	stw	ra,68(sp)
1000dce8:	df001015 	stw	fp,64(sp)
1000dcec:	dd800e15 	stw	r22,56(sp)
1000dcf0:	dc400915 	stw	r17,36(sp)
1000dcf4:	a501ffcc 	andi	r20,r20,2047
1000dcf8:	2025883a 	mov	r18,r4
1000dcfc:	202f883a 	mov	r23,r4
1000dd00:	2c20703a 	and	r16,r5,r16
1000dd04:	a827883a 	mov	r19,r21
1000dd08:	aa403fcc 	andi	r9,r21,255
1000dd0c:	a0005926 	beq	r20,zero,1000de74 <__muldf3+0x1bc>
1000dd10:	0081ffc4 	movi	r2,2047
1000dd14:	a0803426 	beq	r20,r2,1000dde8 <__muldf3+0x130>
1000dd18:	84000434 	orhi	r16,r16,16
1000dd1c:	2004d77a 	srli	r2,r4,29
1000dd20:	802090fa 	slli	r16,r16,3
1000dd24:	202e90fa 	slli	r23,r4,3
1000dd28:	a53f0044 	addi	r20,r20,-1023
1000dd2c:	80a0b03a 	or	r16,r16,r2
1000dd30:	000b883a 	mov	r5,zero
1000dd34:	0039883a 	mov	fp,zero
1000dd38:	3806d53a 	srli	r3,r7,20
1000dd3c:	382cd7fa 	srli	r22,r7,31
1000dd40:	00800434 	movhi	r2,16
1000dd44:	10bfffc4 	addi	r2,r2,-1
1000dd48:	18c1ffcc 	andi	r3,r3,2047
1000dd4c:	3025883a 	mov	r18,r6
1000dd50:	38a2703a 	and	r17,r7,r2
1000dd54:	b2803fcc 	andi	r10,r22,255
1000dd58:	18006426 	beq	r3,zero,1000deec <__muldf3+0x234>
1000dd5c:	0081ffc4 	movi	r2,2047
1000dd60:	18805c26 	beq	r3,r2,1000ded4 <__muldf3+0x21c>
1000dd64:	8c400434 	orhi	r17,r17,16
1000dd68:	3004d77a 	srli	r2,r6,29
1000dd6c:	882290fa 	slli	r17,r17,3
1000dd70:	302490fa 	slli	r18,r6,3
1000dd74:	18ff0044 	addi	r3,r3,-1023
1000dd78:	88a2b03a 	or	r17,r17,r2
1000dd7c:	000f883a 	mov	r7,zero
1000dd80:	394ab03a 	or	r5,r7,r5
1000dd84:	280a90ba 	slli	r5,r5,2
1000dd88:	00840074 	movhi	r2,4097
1000dd8c:	10b76a04 	addi	r2,r2,-8792
1000dd90:	288b883a 	add	r5,r5,r2
1000dd94:	28800017 	ldw	r2,0(r5)
1000dd98:	a0c7883a 	add	r3,r20,r3
1000dd9c:	b54cf03a 	xor	r6,r22,r21
1000dda0:	1a000044 	addi	r8,r3,1
1000dda4:	1000683a 	jmp	r2
1000dda8:	1000dfec 	andhi	zero,r2,895
1000ddac:	1000dfd8 	cmpnei	zero,r2,895
1000ddb0:	1000dfd8 	cmpnei	zero,r2,895
1000ddb4:	1000dfc4 	addi	zero,r2,895
1000ddb8:	1000de04 	addi	zero,r2,888
1000ddbc:	1000de04 	addi	zero,r2,888
1000ddc0:	1000dfac 	andhi	zero,r2,894
1000ddc4:	1000dfc4 	addi	zero,r2,895
1000ddc8:	1000de04 	addi	zero,r2,888
1000ddcc:	1000dfac 	andhi	zero,r2,894
1000ddd0:	1000de04 	addi	zero,r2,888
1000ddd4:	1000dfc4 	addi	zero,r2,895
1000ddd8:	1000de08 	cmpgei	zero,r2,888
1000dddc:	1000de08 	cmpgei	zero,r2,888
1000dde0:	1000de08 	cmpgei	zero,r2,888
1000dde4:	1000e328 	cmpgeui	zero,r2,908
1000dde8:	8104b03a 	or	r2,r16,r4
1000ddec:	10006c1e 	bne	r2,zero,1000dfa0 <__muldf3+0x2e8>
1000ddf0:	01400204 	movi	r5,8
1000ddf4:	0021883a 	mov	r16,zero
1000ddf8:	002f883a 	mov	r23,zero
1000ddfc:	07000084 	movi	fp,2
1000de00:	003fcd06 	br	1000dd38 <__alt_data_end+0xf800dd38>
1000de04:	3013883a 	mov	r9,r6
1000de08:	00800084 	movi	r2,2
1000de0c:	e080501e 	bne	fp,r2,1000df50 <__muldf3+0x298>
1000de10:	4cc0004c 	andi	r19,r9,1
1000de14:	0101ffc4 	movi	r4,2047
1000de18:	0021883a 	mov	r16,zero
1000de1c:	002f883a 	mov	r23,zero
1000de20:	2008953a 	slli	r4,r4,20
1000de24:	98c03fcc 	andi	r3,r19,255
1000de28:	04400434 	movhi	r17,16
1000de2c:	8c7fffc4 	addi	r17,r17,-1
1000de30:	180697fa 	slli	r3,r3,31
1000de34:	8460703a 	and	r16,r16,r17
1000de38:	8120b03a 	or	r16,r16,r4
1000de3c:	80c6b03a 	or	r3,r16,r3
1000de40:	b805883a 	mov	r2,r23
1000de44:	dfc01117 	ldw	ra,68(sp)
1000de48:	df001017 	ldw	fp,64(sp)
1000de4c:	ddc00f17 	ldw	r23,60(sp)
1000de50:	dd800e17 	ldw	r22,56(sp)
1000de54:	dd400d17 	ldw	r21,52(sp)
1000de58:	dd000c17 	ldw	r20,48(sp)
1000de5c:	dcc00b17 	ldw	r19,44(sp)
1000de60:	dc800a17 	ldw	r18,40(sp)
1000de64:	dc400917 	ldw	r17,36(sp)
1000de68:	dc000817 	ldw	r16,32(sp)
1000de6c:	dec01204 	addi	sp,sp,72
1000de70:	f800283a 	ret
1000de74:	8104b03a 	or	r2,r16,r4
1000de78:	10004426 	beq	r2,zero,1000df8c <__muldf3+0x2d4>
1000de7c:	80014b26 	beq	r16,zero,1000e3ac <__muldf3+0x6f4>
1000de80:	8009883a 	mov	r4,r16
1000de84:	d9800715 	stw	r6,28(sp)
1000de88:	d9c00215 	stw	r7,8(sp)
1000de8c:	da400415 	stw	r9,16(sp)
1000de90:	000eff00 	call	1000eff0 <__clzsi2>
1000de94:	d9800717 	ldw	r6,28(sp)
1000de98:	d9c00217 	ldw	r7,8(sp)
1000de9c:	da400417 	ldw	r9,16(sp)
1000dea0:	1007883a 	mov	r3,r2
1000dea4:	01000a04 	movi	r4,40
1000dea8:	1dfffe04 	addi	r23,r3,-8
1000deac:	20c9c83a 	sub	r4,r4,r3
1000deb0:	85e0983a 	sll	r16,r16,r23
1000deb4:	9108d83a 	srl	r4,r18,r4
1000deb8:	95ee983a 	sll	r23,r18,r23
1000debc:	2420b03a 	or	r16,r4,r16
1000dec0:	053f0344 	movi	r20,-1011
1000dec4:	a0e9c83a 	sub	r20,r20,r3
1000dec8:	000b883a 	mov	r5,zero
1000decc:	0039883a 	mov	fp,zero
1000ded0:	003f9906 	br	1000dd38 <__alt_data_end+0xf800dd38>
1000ded4:	8984b03a 	or	r2,r17,r6
1000ded8:	10002a1e 	bne	r2,zero,1000df84 <__muldf3+0x2cc>
1000dedc:	0023883a 	mov	r17,zero
1000dee0:	0025883a 	mov	r18,zero
1000dee4:	01c00084 	movi	r7,2
1000dee8:	003fa506 	br	1000dd80 <__alt_data_end+0xf800dd80>
1000deec:	8984b03a 	or	r2,r17,r6
1000def0:	10002026 	beq	r2,zero,1000df74 <__muldf3+0x2bc>
1000def4:	88011c26 	beq	r17,zero,1000e368 <__muldf3+0x6b0>
1000def8:	8809883a 	mov	r4,r17
1000defc:	d9400215 	stw	r5,8(sp)
1000df00:	d9800715 	stw	r6,28(sp)
1000df04:	da400415 	stw	r9,16(sp)
1000df08:	da800315 	stw	r10,12(sp)
1000df0c:	000eff00 	call	1000eff0 <__clzsi2>
1000df10:	d9400217 	ldw	r5,8(sp)
1000df14:	d9800717 	ldw	r6,28(sp)
1000df18:	da400417 	ldw	r9,16(sp)
1000df1c:	da800317 	ldw	r10,12(sp)
1000df20:	1007883a 	mov	r3,r2
1000df24:	01000a04 	movi	r4,40
1000df28:	1cbffe04 	addi	r18,r3,-8
1000df2c:	20c9c83a 	sub	r4,r4,r3
1000df30:	8ca2983a 	sll	r17,r17,r18
1000df34:	3108d83a 	srl	r4,r6,r4
1000df38:	34a4983a 	sll	r18,r6,r18
1000df3c:	2462b03a 	or	r17,r4,r17
1000df40:	00bf0344 	movi	r2,-1011
1000df44:	10c7c83a 	sub	r3,r2,r3
1000df48:	000f883a 	mov	r7,zero
1000df4c:	003f8c06 	br	1000dd80 <__alt_data_end+0xf800dd80>
1000df50:	008000c4 	movi	r2,3
1000df54:	e0816d26 	beq	fp,r2,1000e50c <__muldf3+0x854>
1000df58:	00800044 	movi	r2,1
1000df5c:	e081321e 	bne	fp,r2,1000e428 <__muldf3+0x770>
1000df60:	48a6703a 	and	r19,r9,r2
1000df64:	0009883a 	mov	r4,zero
1000df68:	0021883a 	mov	r16,zero
1000df6c:	002f883a 	mov	r23,zero
1000df70:	003fab06 	br	1000de20 <__alt_data_end+0xf800de20>
1000df74:	0023883a 	mov	r17,zero
1000df78:	0025883a 	mov	r18,zero
1000df7c:	01c00044 	movi	r7,1
1000df80:	003f7f06 	br	1000dd80 <__alt_data_end+0xf800dd80>
1000df84:	01c000c4 	movi	r7,3
1000df88:	003f7d06 	br	1000dd80 <__alt_data_end+0xf800dd80>
1000df8c:	01400104 	movi	r5,4
1000df90:	0021883a 	mov	r16,zero
1000df94:	002f883a 	mov	r23,zero
1000df98:	07000044 	movi	fp,1
1000df9c:	003f6606 	br	1000dd38 <__alt_data_end+0xf800dd38>
1000dfa0:	01400304 	movi	r5,12
1000dfa4:	070000c4 	movi	fp,3
1000dfa8:	003f6306 	br	1000dd38 <__alt_data_end+0xf800dd38>
1000dfac:	04000434 	movhi	r16,16
1000dfb0:	0027883a 	mov	r19,zero
1000dfb4:	843fffc4 	addi	r16,r16,-1
1000dfb8:	05ffffc4 	movi	r23,-1
1000dfbc:	0101ffc4 	movi	r4,2047
1000dfc0:	003f9706 	br	1000de20 <__alt_data_end+0xf800de20>
1000dfc4:	8821883a 	mov	r16,r17
1000dfc8:	902f883a 	mov	r23,r18
1000dfcc:	5013883a 	mov	r9,r10
1000dfd0:	3839883a 	mov	fp,r7
1000dfd4:	003f8c06 	br	1000de08 <__alt_data_end+0xf800de08>
1000dfd8:	8821883a 	mov	r16,r17
1000dfdc:	902f883a 	mov	r23,r18
1000dfe0:	3013883a 	mov	r9,r6
1000dfe4:	3839883a 	mov	fp,r7
1000dfe8:	003f8706 	br	1000de08 <__alt_data_end+0xf800de08>
1000dfec:	b82ad43a 	srli	r21,r23,16
1000dff0:	9038d43a 	srli	fp,r18,16
1000dff4:	bdffffcc 	andi	r23,r23,65535
1000dff8:	94bfffcc 	andi	r18,r18,65535
1000dffc:	9009883a 	mov	r4,r18
1000e000:	b80b883a 	mov	r5,r23
1000e004:	d8c00515 	stw	r3,20(sp)
1000e008:	d9800715 	stw	r6,28(sp)
1000e00c:	da000615 	stw	r8,24(sp)
1000e010:	000c8300 	call	1000c830 <__mulsi3>
1000e014:	9009883a 	mov	r4,r18
1000e018:	a80b883a 	mov	r5,r21
1000e01c:	1029883a 	mov	r20,r2
1000e020:	000c8300 	call	1000c830 <__mulsi3>
1000e024:	e009883a 	mov	r4,fp
1000e028:	a80b883a 	mov	r5,r21
1000e02c:	102d883a 	mov	r22,r2
1000e030:	000c8300 	call	1000c830 <__mulsi3>
1000e034:	e009883a 	mov	r4,fp
1000e038:	b80b883a 	mov	r5,r23
1000e03c:	1027883a 	mov	r19,r2
1000e040:	000c8300 	call	1000c830 <__mulsi3>
1000e044:	a008d43a 	srli	r4,r20,16
1000e048:	b085883a 	add	r2,r22,r2
1000e04c:	d8c00517 	ldw	r3,20(sp)
1000e050:	110f883a 	add	r7,r2,r4
1000e054:	d9800717 	ldw	r6,28(sp)
1000e058:	da000617 	ldw	r8,24(sp)
1000e05c:	3d80022e 	bgeu	r7,r22,1000e068 <__muldf3+0x3b0>
1000e060:	00800074 	movhi	r2,1
1000e064:	98a7883a 	add	r19,r19,r2
1000e068:	3804943a 	slli	r2,r7,16
1000e06c:	380ed43a 	srli	r7,r7,16
1000e070:	882cd43a 	srli	r22,r17,16
1000e074:	a53fffcc 	andi	r20,r20,65535
1000e078:	8c7fffcc 	andi	r17,r17,65535
1000e07c:	1529883a 	add	r20,r2,r20
1000e080:	8809883a 	mov	r4,r17
1000e084:	b80b883a 	mov	r5,r23
1000e088:	d8c00515 	stw	r3,20(sp)
1000e08c:	d9800715 	stw	r6,28(sp)
1000e090:	da000615 	stw	r8,24(sp)
1000e094:	d9c00015 	stw	r7,0(sp)
1000e098:	dd000115 	stw	r20,4(sp)
1000e09c:	000c8300 	call	1000c830 <__mulsi3>
1000e0a0:	a80b883a 	mov	r5,r21
1000e0a4:	8809883a 	mov	r4,r17
1000e0a8:	d8800415 	stw	r2,16(sp)
1000e0ac:	000c8300 	call	1000c830 <__mulsi3>
1000e0b0:	a80b883a 	mov	r5,r21
1000e0b4:	b009883a 	mov	r4,r22
1000e0b8:	1029883a 	mov	r20,r2
1000e0bc:	000c8300 	call	1000c830 <__mulsi3>
1000e0c0:	b009883a 	mov	r4,r22
1000e0c4:	b80b883a 	mov	r5,r23
1000e0c8:	102b883a 	mov	r21,r2
1000e0cc:	000c8300 	call	1000c830 <__mulsi3>
1000e0d0:	da400417 	ldw	r9,16(sp)
1000e0d4:	a085883a 	add	r2,r20,r2
1000e0d8:	d8c00517 	ldw	r3,20(sp)
1000e0dc:	4808d43a 	srli	r4,r9,16
1000e0e0:	d9800717 	ldw	r6,28(sp)
1000e0e4:	da000617 	ldw	r8,24(sp)
1000e0e8:	1109883a 	add	r4,r2,r4
1000e0ec:	2500022e 	bgeu	r4,r20,1000e0f8 <__muldf3+0x440>
1000e0f0:	00800074 	movhi	r2,1
1000e0f4:	a8ab883a 	add	r21,r21,r2
1000e0f8:	200e943a 	slli	r7,r4,16
1000e0fc:	2004d43a 	srli	r2,r4,16
1000e100:	802ed43a 	srli	r23,r16,16
1000e104:	843fffcc 	andi	r16,r16,65535
1000e108:	4d3fffcc 	andi	r20,r9,65535
1000e10c:	9009883a 	mov	r4,r18
1000e110:	800b883a 	mov	r5,r16
1000e114:	3d29883a 	add	r20,r7,r20
1000e118:	d8c00515 	stw	r3,20(sp)
1000e11c:	d9800715 	stw	r6,28(sp)
1000e120:	da000615 	stw	r8,24(sp)
1000e124:	a8ab883a 	add	r21,r21,r2
1000e128:	000c8300 	call	1000c830 <__mulsi3>
1000e12c:	9009883a 	mov	r4,r18
1000e130:	b80b883a 	mov	r5,r23
1000e134:	d8800315 	stw	r2,12(sp)
1000e138:	000c8300 	call	1000c830 <__mulsi3>
1000e13c:	e009883a 	mov	r4,fp
1000e140:	b80b883a 	mov	r5,r23
1000e144:	1025883a 	mov	r18,r2
1000e148:	000c8300 	call	1000c830 <__mulsi3>
1000e14c:	e009883a 	mov	r4,fp
1000e150:	800b883a 	mov	r5,r16
1000e154:	d8800215 	stw	r2,8(sp)
1000e158:	000c8300 	call	1000c830 <__mulsi3>
1000e15c:	da800317 	ldw	r10,12(sp)
1000e160:	d9400017 	ldw	r5,0(sp)
1000e164:	9085883a 	add	r2,r18,r2
1000e168:	5008d43a 	srli	r4,r10,16
1000e16c:	a153883a 	add	r9,r20,r5
1000e170:	d8c00517 	ldw	r3,20(sp)
1000e174:	1109883a 	add	r4,r2,r4
1000e178:	d9800717 	ldw	r6,28(sp)
1000e17c:	da000617 	ldw	r8,24(sp)
1000e180:	dac00217 	ldw	r11,8(sp)
1000e184:	2480022e 	bgeu	r4,r18,1000e190 <__muldf3+0x4d8>
1000e188:	00800074 	movhi	r2,1
1000e18c:	5897883a 	add	r11,r11,r2
1000e190:	200e943a 	slli	r7,r4,16
1000e194:	2038d43a 	srli	fp,r4,16
1000e198:	52bfffcc 	andi	r10,r10,65535
1000e19c:	3a8f883a 	add	r7,r7,r10
1000e1a0:	8809883a 	mov	r4,r17
1000e1a4:	800b883a 	mov	r5,r16
1000e1a8:	d8c00515 	stw	r3,20(sp)
1000e1ac:	d9800715 	stw	r6,28(sp)
1000e1b0:	d9c00215 	stw	r7,8(sp)
1000e1b4:	da000615 	stw	r8,24(sp)
1000e1b8:	da400415 	stw	r9,16(sp)
1000e1bc:	5f39883a 	add	fp,r11,fp
1000e1c0:	000c8300 	call	1000c830 <__mulsi3>
1000e1c4:	8809883a 	mov	r4,r17
1000e1c8:	b80b883a 	mov	r5,r23
1000e1cc:	1025883a 	mov	r18,r2
1000e1d0:	000c8300 	call	1000c830 <__mulsi3>
1000e1d4:	b009883a 	mov	r4,r22
1000e1d8:	b80b883a 	mov	r5,r23
1000e1dc:	d8800315 	stw	r2,12(sp)
1000e1e0:	000c8300 	call	1000c830 <__mulsi3>
1000e1e4:	b009883a 	mov	r4,r22
1000e1e8:	800b883a 	mov	r5,r16
1000e1ec:	1023883a 	mov	r17,r2
1000e1f0:	000c8300 	call	1000c830 <__mulsi3>
1000e1f4:	da800317 	ldw	r10,12(sp)
1000e1f8:	9008d43a 	srli	r4,r18,16
1000e1fc:	d8c00517 	ldw	r3,20(sp)
1000e200:	5085883a 	add	r2,r10,r2
1000e204:	1109883a 	add	r4,r2,r4
1000e208:	d9800717 	ldw	r6,28(sp)
1000e20c:	d9c00217 	ldw	r7,8(sp)
1000e210:	da000617 	ldw	r8,24(sp)
1000e214:	da400417 	ldw	r9,16(sp)
1000e218:	2280022e 	bgeu	r4,r10,1000e224 <__muldf3+0x56c>
1000e21c:	00800074 	movhi	r2,1
1000e220:	88a3883a 	add	r17,r17,r2
1000e224:	2004943a 	slli	r2,r4,16
1000e228:	94bfffcc 	andi	r18,r18,65535
1000e22c:	4ce7883a 	add	r19,r9,r19
1000e230:	14a5883a 	add	r18,r2,r18
1000e234:	9d29803a 	cmpltu	r20,r19,r20
1000e238:	9565883a 	add	r18,r18,r21
1000e23c:	9505883a 	add	r2,r18,r20
1000e240:	99e7883a 	add	r19,r19,r7
1000e244:	99cf803a 	cmpltu	r7,r19,r7
1000e248:	e08b883a 	add	r5,fp,r2
1000e24c:	2008d43a 	srli	r4,r4,16
1000e250:	29ef883a 	add	r23,r5,r7
1000e254:	1529803a 	cmpltu	r20,r2,r20
1000e258:	956b803a 	cmpltu	r21,r18,r21
1000e25c:	b9cf803a 	cmpltu	r7,r23,r7
1000e260:	a564b03a 	or	r18,r20,r21
1000e264:	2f39803a 	cmpltu	fp,r5,fp
1000e268:	9125883a 	add	r18,r18,r4
1000e26c:	3f38b03a 	or	fp,r7,fp
1000e270:	9725883a 	add	r18,r18,fp
1000e274:	9804927a 	slli	r2,r19,9
1000e278:	9463883a 	add	r17,r18,r17
1000e27c:	d9000117 	ldw	r4,4(sp)
1000e280:	b820d5fa 	srli	r16,r23,23
1000e284:	8822927a 	slli	r17,r17,9
1000e288:	9826d5fa 	srli	r19,r19,23
1000e28c:	1104b03a 	or	r2,r2,r4
1000e290:	b82e927a 	slli	r23,r23,9
1000e294:	1004c03a 	cmpne	r2,r2,zero
1000e298:	8c20b03a 	or	r16,r17,r16
1000e29c:	14e6b03a 	or	r19,r2,r19
1000e2a0:	8080402c 	andhi	r2,r16,256
1000e2a4:	9deeb03a 	or	r23,r19,r23
1000e2a8:	10000726 	beq	r2,zero,1000e2c8 <__muldf3+0x610>
1000e2ac:	b804d07a 	srli	r2,r23,1
1000e2b0:	800697fa 	slli	r3,r16,31
1000e2b4:	bdc0004c 	andi	r23,r23,1
1000e2b8:	8020d07a 	srli	r16,r16,1
1000e2bc:	b8aeb03a 	or	r23,r23,r2
1000e2c0:	b8eeb03a 	or	r23,r23,r3
1000e2c4:	4007883a 	mov	r3,r8
1000e2c8:	1900ffc4 	addi	r4,r3,1023
1000e2cc:	01004d0e 	bge	zero,r4,1000e404 <__muldf3+0x74c>
1000e2d0:	b88001cc 	andi	r2,r23,7
1000e2d4:	10000726 	beq	r2,zero,1000e2f4 <__muldf3+0x63c>
1000e2d8:	b94003cc 	andi	r5,r23,15
1000e2dc:	00800104 	movi	r2,4
1000e2e0:	28800426 	beq	r5,r2,1000e2f4 <__muldf3+0x63c>
1000e2e4:	b885883a 	add	r2,r23,r2
1000e2e8:	15ef803a 	cmpltu	r23,r2,r23
1000e2ec:	85e1883a 	add	r16,r16,r23
1000e2f0:	102f883a 	mov	r23,r2
1000e2f4:	8080402c 	andhi	r2,r16,256
1000e2f8:	10000426 	beq	r2,zero,1000e30c <__muldf3+0x654>
1000e2fc:	00bfc034 	movhi	r2,65280
1000e300:	10bfffc4 	addi	r2,r2,-1
1000e304:	19010004 	addi	r4,r3,1024
1000e308:	80a0703a 	and	r16,r16,r2
1000e30c:	0081ff84 	movi	r2,2046
1000e310:	1100340e 	bge	r2,r4,1000e3e4 <__muldf3+0x72c>
1000e314:	34c0004c 	andi	r19,r6,1
1000e318:	0101ffc4 	movi	r4,2047
1000e31c:	0021883a 	mov	r16,zero
1000e320:	002f883a 	mov	r23,zero
1000e324:	003ebe06 	br	1000de20 <__alt_data_end+0xf800de20>
1000e328:	8080022c 	andhi	r2,r16,8
1000e32c:	10000926 	beq	r2,zero,1000e354 <__muldf3+0x69c>
1000e330:	8880022c 	andhi	r2,r17,8
1000e334:	1000071e 	bne	r2,zero,1000e354 <__muldf3+0x69c>
1000e338:	00800434 	movhi	r2,16
1000e33c:	8c000234 	orhi	r16,r17,8
1000e340:	10bfffc4 	addi	r2,r2,-1
1000e344:	b027883a 	mov	r19,r22
1000e348:	80a0703a 	and	r16,r16,r2
1000e34c:	902f883a 	mov	r23,r18
1000e350:	003f1a06 	br	1000dfbc <__alt_data_end+0xf800dfbc>
1000e354:	00800434 	movhi	r2,16
1000e358:	84000234 	orhi	r16,r16,8
1000e35c:	10bfffc4 	addi	r2,r2,-1
1000e360:	80a0703a 	and	r16,r16,r2
1000e364:	003f1506 	br	1000dfbc <__alt_data_end+0xf800dfbc>
1000e368:	3009883a 	mov	r4,r6
1000e36c:	d9400215 	stw	r5,8(sp)
1000e370:	d9800715 	stw	r6,28(sp)
1000e374:	da400415 	stw	r9,16(sp)
1000e378:	da800315 	stw	r10,12(sp)
1000e37c:	000eff00 	call	1000eff0 <__clzsi2>
1000e380:	10c00804 	addi	r3,r2,32
1000e384:	010009c4 	movi	r4,39
1000e388:	d9400217 	ldw	r5,8(sp)
1000e38c:	d9800717 	ldw	r6,28(sp)
1000e390:	da400417 	ldw	r9,16(sp)
1000e394:	da800317 	ldw	r10,12(sp)
1000e398:	20fee20e 	bge	r4,r3,1000df24 <__alt_data_end+0xf800df24>
1000e39c:	147ffe04 	addi	r17,r2,-8
1000e3a0:	9462983a 	sll	r17,r18,r17
1000e3a4:	0025883a 	mov	r18,zero
1000e3a8:	003ee506 	br	1000df40 <__alt_data_end+0xf800df40>
1000e3ac:	d9800715 	stw	r6,28(sp)
1000e3b0:	d9c00215 	stw	r7,8(sp)
1000e3b4:	da400415 	stw	r9,16(sp)
1000e3b8:	000eff00 	call	1000eff0 <__clzsi2>
1000e3bc:	10c00804 	addi	r3,r2,32
1000e3c0:	010009c4 	movi	r4,39
1000e3c4:	d9800717 	ldw	r6,28(sp)
1000e3c8:	d9c00217 	ldw	r7,8(sp)
1000e3cc:	da400417 	ldw	r9,16(sp)
1000e3d0:	20feb40e 	bge	r4,r3,1000dea4 <__alt_data_end+0xf800dea4>
1000e3d4:	143ffe04 	addi	r16,r2,-8
1000e3d8:	9420983a 	sll	r16,r18,r16
1000e3dc:	002f883a 	mov	r23,zero
1000e3e0:	003eb706 	br	1000dec0 <__alt_data_end+0xf800dec0>
1000e3e4:	8004977a 	slli	r2,r16,29
1000e3e8:	b82ed0fa 	srli	r23,r23,3
1000e3ec:	8020927a 	slli	r16,r16,9
1000e3f0:	2101ffcc 	andi	r4,r4,2047
1000e3f4:	15eeb03a 	or	r23,r2,r23
1000e3f8:	8020d33a 	srli	r16,r16,12
1000e3fc:	34c0004c 	andi	r19,r6,1
1000e400:	003e8706 	br	1000de20 <__alt_data_end+0xf800de20>
1000e404:	00bf0084 	movi	r2,-1022
1000e408:	10c5c83a 	sub	r2,r2,r3
1000e40c:	01000e04 	movi	r4,56
1000e410:	2080080e 	bge	r4,r2,1000e434 <__muldf3+0x77c>
1000e414:	34c0004c 	andi	r19,r6,1
1000e418:	0009883a 	mov	r4,zero
1000e41c:	0021883a 	mov	r16,zero
1000e420:	002f883a 	mov	r23,zero
1000e424:	003e7e06 	br	1000de20 <__alt_data_end+0xf800de20>
1000e428:	4007883a 	mov	r3,r8
1000e42c:	480d883a 	mov	r6,r9
1000e430:	003fa506 	br	1000e2c8 <__alt_data_end+0xf800e2c8>
1000e434:	010007c4 	movi	r4,31
1000e438:	20801816 	blt	r4,r2,1000e49c <__muldf3+0x7e4>
1000e43c:	18c10784 	addi	r3,r3,1054
1000e440:	80c8983a 	sll	r4,r16,r3
1000e444:	b88ad83a 	srl	r5,r23,r2
1000e448:	b8c6983a 	sll	r3,r23,r3
1000e44c:	80a0d83a 	srl	r16,r16,r2
1000e450:	2908b03a 	or	r4,r5,r4
1000e454:	1804c03a 	cmpne	r2,r3,zero
1000e458:	2088b03a 	or	r4,r4,r2
1000e45c:	208001cc 	andi	r2,r4,7
1000e460:	10000726 	beq	r2,zero,1000e480 <__muldf3+0x7c8>
1000e464:	20c003cc 	andi	r3,r4,15
1000e468:	00800104 	movi	r2,4
1000e46c:	18800426 	beq	r3,r2,1000e480 <__muldf3+0x7c8>
1000e470:	20c00104 	addi	r3,r4,4
1000e474:	1905803a 	cmpltu	r2,r3,r4
1000e478:	80a1883a 	add	r16,r16,r2
1000e47c:	1809883a 	mov	r4,r3
1000e480:	8080202c 	andhi	r2,r16,128
1000e484:	10001b26 	beq	r2,zero,1000e4f4 <__muldf3+0x83c>
1000e488:	34c0004c 	andi	r19,r6,1
1000e48c:	01000044 	movi	r4,1
1000e490:	0021883a 	mov	r16,zero
1000e494:	002f883a 	mov	r23,zero
1000e498:	003e6106 	br	1000de20 <__alt_data_end+0xf800de20>
1000e49c:	013ef884 	movi	r4,-1054
1000e4a0:	20c9c83a 	sub	r4,r4,r3
1000e4a4:	01400804 	movi	r5,32
1000e4a8:	8108d83a 	srl	r4,r16,r4
1000e4ac:	11401526 	beq	r2,r5,1000e504 <__muldf3+0x84c>
1000e4b0:	18c10f84 	addi	r3,r3,1086
1000e4b4:	80e0983a 	sll	r16,r16,r3
1000e4b8:	85eeb03a 	or	r23,r16,r23
1000e4bc:	b804c03a 	cmpne	r2,r23,zero
1000e4c0:	1108b03a 	or	r4,r2,r4
1000e4c4:	20c001cc 	andi	r3,r4,7
1000e4c8:	1800061e 	bne	r3,zero,1000e4e4 <__muldf3+0x82c>
1000e4cc:	0021883a 	mov	r16,zero
1000e4d0:	202ed0fa 	srli	r23,r4,3
1000e4d4:	34c0004c 	andi	r19,r6,1
1000e4d8:	0009883a 	mov	r4,zero
1000e4dc:	b8eeb03a 	or	r23,r23,r3
1000e4e0:	003e4f06 	br	1000de20 <__alt_data_end+0xf800de20>
1000e4e4:	20c003cc 	andi	r3,r4,15
1000e4e8:	00800104 	movi	r2,4
1000e4ec:	0021883a 	mov	r16,zero
1000e4f0:	18bfdf1e 	bne	r3,r2,1000e470 <__alt_data_end+0xf800e470>
1000e4f4:	8004927a 	slli	r2,r16,9
1000e4f8:	8006977a 	slli	r3,r16,29
1000e4fc:	1020d33a 	srli	r16,r2,12
1000e500:	003ff306 	br	1000e4d0 <__alt_data_end+0xf800e4d0>
1000e504:	0021883a 	mov	r16,zero
1000e508:	003feb06 	br	1000e4b8 <__alt_data_end+0xf800e4b8>
1000e50c:	00800434 	movhi	r2,16
1000e510:	84000234 	orhi	r16,r16,8
1000e514:	10bfffc4 	addi	r2,r2,-1
1000e518:	4cc0004c 	andi	r19,r9,1
1000e51c:	80a0703a 	and	r16,r16,r2
1000e520:	003ea606 	br	1000dfbc <__alt_data_end+0xf800dfbc>

1000e524 <__subdf3>:
1000e524:	00c00434 	movhi	r3,16
1000e528:	18ffffc4 	addi	r3,r3,-1
1000e52c:	defffb04 	addi	sp,sp,-20
1000e530:	28d2703a 	and	r9,r5,r3
1000e534:	3814d53a 	srli	r10,r7,20
1000e538:	38c6703a 	and	r3,r7,r3
1000e53c:	3004d77a 	srli	r2,r6,29
1000e540:	dc800215 	stw	r18,8(sp)
1000e544:	dc000015 	stw	r16,0(sp)
1000e548:	2824d7fa 	srli	r18,r5,31
1000e54c:	2820d53a 	srli	r16,r5,20
1000e550:	481290fa 	slli	r9,r9,3
1000e554:	200ad77a 	srli	r5,r4,29
1000e558:	180690fa 	slli	r3,r3,3
1000e55c:	dc400115 	stw	r17,4(sp)
1000e560:	dfc00415 	stw	ra,16(sp)
1000e564:	202290fa 	slli	r17,r4,3
1000e568:	dcc00315 	stw	r19,12(sp)
1000e56c:	5281ffcc 	andi	r10,r10,2047
1000e570:	0101ffc4 	movi	r4,2047
1000e574:	9011883a 	mov	r8,r18
1000e578:	8401ffcc 	andi	r16,r16,2047
1000e57c:	94803fcc 	andi	r18,r18,255
1000e580:	494ab03a 	or	r5,r9,r5
1000e584:	380ed7fa 	srli	r7,r7,31
1000e588:	1886b03a 	or	r3,r3,r2
1000e58c:	300c90fa 	slli	r6,r6,3
1000e590:	51009026 	beq	r10,r4,1000e7d4 <__subdf3+0x2b0>
1000e594:	39c0005c 	xori	r7,r7,1
1000e598:	8285c83a 	sub	r2,r16,r10
1000e59c:	91c06f26 	beq	r18,r7,1000e75c <__subdf3+0x238>
1000e5a0:	0080b10e 	bge	zero,r2,1000e868 <__subdf3+0x344>
1000e5a4:	50002a1e 	bne	r10,zero,1000e650 <__subdf3+0x12c>
1000e5a8:	1988b03a 	or	r4,r3,r6
1000e5ac:	2000941e 	bne	r4,zero,1000e800 <__subdf3+0x2dc>
1000e5b0:	888001cc 	andi	r2,r17,7
1000e5b4:	10005b26 	beq	r2,zero,1000e724 <__subdf3+0x200>
1000e5b8:	88c003cc 	andi	r3,r17,15
1000e5bc:	00800104 	movi	r2,4
1000e5c0:	18805826 	beq	r3,r2,1000e724 <__subdf3+0x200>
1000e5c4:	88c00104 	addi	r3,r17,4
1000e5c8:	1c63803a 	cmpltu	r17,r3,r17
1000e5cc:	2c4b883a 	add	r5,r5,r17
1000e5d0:	2880202c 	andhi	r2,r5,128
1000e5d4:	9200004c 	andi	r8,r18,1
1000e5d8:	1823883a 	mov	r17,r3
1000e5dc:	10005426 	beq	r2,zero,1000e730 <__subdf3+0x20c>
1000e5e0:	84000044 	addi	r16,r16,1
1000e5e4:	0081ffc4 	movi	r2,2047
1000e5e8:	8080bf26 	beq	r16,r2,1000e8e8 <__subdf3+0x3c4>
1000e5ec:	013fe034 	movhi	r4,65408
1000e5f0:	213fffc4 	addi	r4,r4,-1
1000e5f4:	290a703a 	and	r5,r5,r4
1000e5f8:	2804977a 	slli	r2,r5,29
1000e5fc:	280a927a 	slli	r5,r5,9
1000e600:	8822d0fa 	srli	r17,r17,3
1000e604:	8401ffcc 	andi	r16,r16,2047
1000e608:	2808d33a 	srli	r4,r5,12
1000e60c:	1444b03a 	or	r2,r2,r17
1000e610:	8401ffcc 	andi	r16,r16,2047
1000e614:	800a953a 	slli	r5,r16,20
1000e618:	40c03fcc 	andi	r3,r8,255
1000e61c:	04000434 	movhi	r16,16
1000e620:	180697fa 	slli	r3,r3,31
1000e624:	843fffc4 	addi	r16,r16,-1
1000e628:	2420703a 	and	r16,r4,r16
1000e62c:	8160b03a 	or	r16,r16,r5
1000e630:	80c6b03a 	or	r3,r16,r3
1000e634:	dfc00417 	ldw	ra,16(sp)
1000e638:	dcc00317 	ldw	r19,12(sp)
1000e63c:	dc800217 	ldw	r18,8(sp)
1000e640:	dc400117 	ldw	r17,4(sp)
1000e644:	dc000017 	ldw	r16,0(sp)
1000e648:	dec00504 	addi	sp,sp,20
1000e64c:	f800283a 	ret
1000e650:	0101ffc4 	movi	r4,2047
1000e654:	813fd626 	beq	r16,r4,1000e5b0 <__alt_data_end+0xf800e5b0>
1000e658:	18c02034 	orhi	r3,r3,128
1000e65c:	01000e04 	movi	r4,56
1000e660:	2080a416 	blt	r4,r2,1000e8f4 <__subdf3+0x3d0>
1000e664:	010007c4 	movi	r4,31
1000e668:	2080c716 	blt	r4,r2,1000e988 <__subdf3+0x464>
1000e66c:	01000804 	movi	r4,32
1000e670:	2089c83a 	sub	r4,r4,r2
1000e674:	1910983a 	sll	r8,r3,r4
1000e678:	308ed83a 	srl	r7,r6,r2
1000e67c:	3108983a 	sll	r4,r6,r4
1000e680:	1884d83a 	srl	r2,r3,r2
1000e684:	41ccb03a 	or	r6,r8,r7
1000e688:	2008c03a 	cmpne	r4,r4,zero
1000e68c:	310cb03a 	or	r6,r6,r4
1000e690:	898dc83a 	sub	r6,r17,r6
1000e694:	89a3803a 	cmpltu	r17,r17,r6
1000e698:	288bc83a 	sub	r5,r5,r2
1000e69c:	2c4bc83a 	sub	r5,r5,r17
1000e6a0:	3023883a 	mov	r17,r6
1000e6a4:	2880202c 	andhi	r2,r5,128
1000e6a8:	10006b26 	beq	r2,zero,1000e858 <__subdf3+0x334>
1000e6ac:	04c02034 	movhi	r19,128
1000e6b0:	9cffffc4 	addi	r19,r19,-1
1000e6b4:	2ce6703a 	and	r19,r5,r19
1000e6b8:	98007c26 	beq	r19,zero,1000e8ac <__subdf3+0x388>
1000e6bc:	9809883a 	mov	r4,r19
1000e6c0:	000eff00 	call	1000eff0 <__clzsi2>
1000e6c4:	10fffe04 	addi	r3,r2,-8
1000e6c8:	010007c4 	movi	r4,31
1000e6cc:	20c07d16 	blt	r4,r3,1000e8c4 <__subdf3+0x3a0>
1000e6d0:	01400a04 	movi	r5,40
1000e6d4:	2885c83a 	sub	r2,r5,r2
1000e6d8:	888ad83a 	srl	r5,r17,r2
1000e6dc:	98e6983a 	sll	r19,r19,r3
1000e6e0:	88e2983a 	sll	r17,r17,r3
1000e6e4:	2ce6b03a 	or	r19,r5,r19
1000e6e8:	1c007a16 	blt	r3,r16,1000e8d4 <__subdf3+0x3b0>
1000e6ec:	1c21c83a 	sub	r16,r3,r16
1000e6f0:	81400044 	addi	r5,r16,1
1000e6f4:	00c007c4 	movi	r3,31
1000e6f8:	19409616 	blt	r3,r5,1000e954 <__subdf3+0x430>
1000e6fc:	1c21c83a 	sub	r16,r3,r16
1000e700:	8c08983a 	sll	r4,r17,r16
1000e704:	8946d83a 	srl	r3,r17,r5
1000e708:	9c20983a 	sll	r16,r19,r16
1000e70c:	2008c03a 	cmpne	r4,r4,zero
1000e710:	994ad83a 	srl	r5,r19,r5
1000e714:	1c06b03a 	or	r3,r3,r16
1000e718:	1922b03a 	or	r17,r3,r4
1000e71c:	0021883a 	mov	r16,zero
1000e720:	003fa306 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000e724:	2880202c 	andhi	r2,r5,128
1000e728:	9200004c 	andi	r8,r18,1
1000e72c:	103fac1e 	bne	r2,zero,1000e5e0 <__alt_data_end+0xf800e5e0>
1000e730:	2804977a 	slli	r2,r5,29
1000e734:	8822d0fa 	srli	r17,r17,3
1000e738:	00c1ffc4 	movi	r3,2047
1000e73c:	280ad0fa 	srli	r5,r5,3
1000e740:	1444b03a 	or	r2,r2,r17
1000e744:	80c02726 	beq	r16,r3,1000e7e4 <__subdf3+0x2c0>
1000e748:	01000434 	movhi	r4,16
1000e74c:	213fffc4 	addi	r4,r4,-1
1000e750:	80e0703a 	and	r16,r16,r3
1000e754:	2908703a 	and	r4,r5,r4
1000e758:	003fad06 	br	1000e610 <__alt_data_end+0xf800e610>
1000e75c:	0080690e 	bge	zero,r2,1000e904 <__subdf3+0x3e0>
1000e760:	50002f26 	beq	r10,zero,1000e820 <__subdf3+0x2fc>
1000e764:	0101ffc4 	movi	r4,2047
1000e768:	813f9126 	beq	r16,r4,1000e5b0 <__alt_data_end+0xf800e5b0>
1000e76c:	18c02034 	orhi	r3,r3,128
1000e770:	01000e04 	movi	r4,56
1000e774:	2080b00e 	bge	r4,r2,1000ea38 <__subdf3+0x514>
1000e778:	198cb03a 	or	r6,r3,r6
1000e77c:	300ec03a 	cmpne	r7,r6,zero
1000e780:	0005883a 	mov	r2,zero
1000e784:	3c4f883a 	add	r7,r7,r17
1000e788:	3c63803a 	cmpltu	r17,r7,r17
1000e78c:	114b883a 	add	r5,r2,r5
1000e790:	2c4b883a 	add	r5,r5,r17
1000e794:	3823883a 	mov	r17,r7
1000e798:	2880202c 	andhi	r2,r5,128
1000e79c:	10002e26 	beq	r2,zero,1000e858 <__subdf3+0x334>
1000e7a0:	84000044 	addi	r16,r16,1
1000e7a4:	0081ffc4 	movi	r2,2047
1000e7a8:	8080de26 	beq	r16,r2,1000eb24 <__subdf3+0x600>
1000e7ac:	00bfe034 	movhi	r2,65408
1000e7b0:	10bfffc4 	addi	r2,r2,-1
1000e7b4:	288a703a 	and	r5,r5,r2
1000e7b8:	880cd07a 	srli	r6,r17,1
1000e7bc:	280897fa 	slli	r4,r5,31
1000e7c0:	88c0004c 	andi	r3,r17,1
1000e7c4:	30e2b03a 	or	r17,r6,r3
1000e7c8:	280ad07a 	srli	r5,r5,1
1000e7cc:	8922b03a 	or	r17,r17,r4
1000e7d0:	003f7706 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000e7d4:	1984b03a 	or	r2,r3,r6
1000e7d8:	103f6e26 	beq	r2,zero,1000e594 <__alt_data_end+0xf800e594>
1000e7dc:	39c03fcc 	andi	r7,r7,255
1000e7e0:	003f6d06 	br	1000e598 <__alt_data_end+0xf800e598>
1000e7e4:	1146b03a 	or	r3,r2,r5
1000e7e8:	18003f26 	beq	r3,zero,1000e8e8 <__subdf3+0x3c4>
1000e7ec:	00c00434 	movhi	r3,16
1000e7f0:	29000234 	orhi	r4,r5,8
1000e7f4:	18ffffc4 	addi	r3,r3,-1
1000e7f8:	20c8703a 	and	r4,r4,r3
1000e7fc:	003f8406 	br	1000e610 <__alt_data_end+0xf800e610>
1000e800:	10bfffc4 	addi	r2,r2,-1
1000e804:	1000501e 	bne	r2,zero,1000e948 <__subdf3+0x424>
1000e808:	898fc83a 	sub	r7,r17,r6
1000e80c:	89e3803a 	cmpltu	r17,r17,r7
1000e810:	28cbc83a 	sub	r5,r5,r3
1000e814:	2c4bc83a 	sub	r5,r5,r17
1000e818:	3823883a 	mov	r17,r7
1000e81c:	003fa106 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000e820:	1988b03a 	or	r4,r3,r6
1000e824:	203f6226 	beq	r4,zero,1000e5b0 <__alt_data_end+0xf800e5b0>
1000e828:	10bfffc4 	addi	r2,r2,-1
1000e82c:	10009b1e 	bne	r2,zero,1000ea9c <__subdf3+0x578>
1000e830:	344d883a 	add	r6,r6,r17
1000e834:	3463803a 	cmpltu	r17,r6,r17
1000e838:	194b883a 	add	r5,r3,r5
1000e83c:	2c4b883a 	add	r5,r5,r17
1000e840:	3023883a 	mov	r17,r6
1000e844:	003fd406 	br	1000e798 <__alt_data_end+0xf800e798>
1000e848:	1106b03a 	or	r3,r2,r4
1000e84c:	1800b426 	beq	r3,zero,1000eb20 <__subdf3+0x5fc>
1000e850:	100b883a 	mov	r5,r2
1000e854:	2023883a 	mov	r17,r4
1000e858:	888001cc 	andi	r2,r17,7
1000e85c:	103f561e 	bne	r2,zero,1000e5b8 <__alt_data_end+0xf800e5b8>
1000e860:	9200004c 	andi	r8,r18,1
1000e864:	003fb206 	br	1000e730 <__alt_data_end+0xf800e730>
1000e868:	1000531e 	bne	r2,zero,1000e9b8 <__subdf3+0x494>
1000e86c:	80800044 	addi	r2,r16,1
1000e870:	1081ffcc 	andi	r2,r2,2047
1000e874:	01000044 	movi	r4,1
1000e878:	2080a00e 	bge	r4,r2,1000eafc <__subdf3+0x5d8>
1000e87c:	8985c83a 	sub	r2,r17,r6
1000e880:	8889803a 	cmpltu	r4,r17,r2
1000e884:	28e7c83a 	sub	r19,r5,r3
1000e888:	9927c83a 	sub	r19,r19,r4
1000e88c:	9900202c 	andhi	r4,r19,128
1000e890:	20006226 	beq	r4,zero,1000ea1c <__subdf3+0x4f8>
1000e894:	3463c83a 	sub	r17,r6,r17
1000e898:	194bc83a 	sub	r5,r3,r5
1000e89c:	344d803a 	cmpltu	r6,r6,r17
1000e8a0:	29a7c83a 	sub	r19,r5,r6
1000e8a4:	3825883a 	mov	r18,r7
1000e8a8:	983f841e 	bne	r19,zero,1000e6bc <__alt_data_end+0xf800e6bc>
1000e8ac:	8809883a 	mov	r4,r17
1000e8b0:	000eff00 	call	1000eff0 <__clzsi2>
1000e8b4:	10800804 	addi	r2,r2,32
1000e8b8:	10fffe04 	addi	r3,r2,-8
1000e8bc:	010007c4 	movi	r4,31
1000e8c0:	20ff830e 	bge	r4,r3,1000e6d0 <__alt_data_end+0xf800e6d0>
1000e8c4:	14fff604 	addi	r19,r2,-40
1000e8c8:	8ce6983a 	sll	r19,r17,r19
1000e8cc:	0023883a 	mov	r17,zero
1000e8d0:	1c3f860e 	bge	r3,r16,1000e6ec <__alt_data_end+0xf800e6ec>
1000e8d4:	017fe034 	movhi	r5,65408
1000e8d8:	297fffc4 	addi	r5,r5,-1
1000e8dc:	80e1c83a 	sub	r16,r16,r3
1000e8e0:	994a703a 	and	r5,r19,r5
1000e8e4:	003f3206 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000e8e8:	0009883a 	mov	r4,zero
1000e8ec:	0005883a 	mov	r2,zero
1000e8f0:	003f4706 	br	1000e610 <__alt_data_end+0xf800e610>
1000e8f4:	198cb03a 	or	r6,r3,r6
1000e8f8:	300cc03a 	cmpne	r6,r6,zero
1000e8fc:	0005883a 	mov	r2,zero
1000e900:	003f6306 	br	1000e690 <__alt_data_end+0xf800e690>
1000e904:	10009d1e 	bne	r2,zero,1000eb7c <__subdf3+0x658>
1000e908:	81c00044 	addi	r7,r16,1
1000e90c:	3881ffcc 	andi	r2,r7,2047
1000e910:	02400044 	movi	r9,1
1000e914:	4880680e 	bge	r9,r2,1000eab8 <__subdf3+0x594>
1000e918:	0081ffc4 	movi	r2,2047
1000e91c:	3880ae26 	beq	r7,r2,1000ebd8 <__subdf3+0x6b4>
1000e920:	344d883a 	add	r6,r6,r17
1000e924:	3463803a 	cmpltu	r17,r6,r17
1000e928:	194b883a 	add	r5,r3,r5
1000e92c:	2c4b883a 	add	r5,r5,r17
1000e930:	282297fa 	slli	r17,r5,31
1000e934:	300cd07a 	srli	r6,r6,1
1000e938:	280ad07a 	srli	r5,r5,1
1000e93c:	3821883a 	mov	r16,r7
1000e940:	89a2b03a 	or	r17,r17,r6
1000e944:	003f1a06 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000e948:	0101ffc4 	movi	r4,2047
1000e94c:	813f431e 	bne	r16,r4,1000e65c <__alt_data_end+0xf800e65c>
1000e950:	003f1706 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000e954:	80bff844 	addi	r2,r16,-31
1000e958:	00c00804 	movi	r3,32
1000e95c:	9884d83a 	srl	r2,r19,r2
1000e960:	28c05126 	beq	r5,r3,1000eaa8 <__subdf3+0x584>
1000e964:	00c00fc4 	movi	r3,63
1000e968:	1c21c83a 	sub	r16,r3,r16
1000e96c:	9c26983a 	sll	r19,r19,r16
1000e970:	9c62b03a 	or	r17,r19,r17
1000e974:	8822c03a 	cmpne	r17,r17,zero
1000e978:	88a2b03a 	or	r17,r17,r2
1000e97c:	000b883a 	mov	r5,zero
1000e980:	0021883a 	mov	r16,zero
1000e984:	003fb406 	br	1000e858 <__alt_data_end+0xf800e858>
1000e988:	113ff804 	addi	r4,r2,-32
1000e98c:	01c00804 	movi	r7,32
1000e990:	1908d83a 	srl	r4,r3,r4
1000e994:	11c04626 	beq	r2,r7,1000eab0 <__subdf3+0x58c>
1000e998:	01c01004 	movi	r7,64
1000e99c:	3885c83a 	sub	r2,r7,r2
1000e9a0:	1884983a 	sll	r2,r3,r2
1000e9a4:	118cb03a 	or	r6,r2,r6
1000e9a8:	300cc03a 	cmpne	r6,r6,zero
1000e9ac:	310cb03a 	or	r6,r6,r4
1000e9b0:	0005883a 	mov	r2,zero
1000e9b4:	003f3606 	br	1000e690 <__alt_data_end+0xf800e690>
1000e9b8:	80002b26 	beq	r16,zero,1000ea68 <__subdf3+0x544>
1000e9bc:	0101ffc4 	movi	r4,2047
1000e9c0:	51006926 	beq	r10,r4,1000eb68 <__subdf3+0x644>
1000e9c4:	0085c83a 	sub	r2,zero,r2
1000e9c8:	29402034 	orhi	r5,r5,128
1000e9cc:	01000e04 	movi	r4,56
1000e9d0:	20807d16 	blt	r4,r2,1000ebc8 <__subdf3+0x6a4>
1000e9d4:	010007c4 	movi	r4,31
1000e9d8:	2080d916 	blt	r4,r2,1000ed40 <__subdf3+0x81c>
1000e9dc:	01000804 	movi	r4,32
1000e9e0:	2089c83a 	sub	r4,r4,r2
1000e9e4:	2912983a 	sll	r9,r5,r4
1000e9e8:	8890d83a 	srl	r8,r17,r2
1000e9ec:	8908983a 	sll	r4,r17,r4
1000e9f0:	2884d83a 	srl	r2,r5,r2
1000e9f4:	4a22b03a 	or	r17,r9,r8
1000e9f8:	2008c03a 	cmpne	r4,r4,zero
1000e9fc:	8922b03a 	or	r17,r17,r4
1000ea00:	3463c83a 	sub	r17,r6,r17
1000ea04:	1885c83a 	sub	r2,r3,r2
1000ea08:	344d803a 	cmpltu	r6,r6,r17
1000ea0c:	118bc83a 	sub	r5,r2,r6
1000ea10:	5021883a 	mov	r16,r10
1000ea14:	3825883a 	mov	r18,r7
1000ea18:	003f2206 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000ea1c:	9886b03a 	or	r3,r19,r2
1000ea20:	18001c1e 	bne	r3,zero,1000ea94 <__subdf3+0x570>
1000ea24:	0011883a 	mov	r8,zero
1000ea28:	000b883a 	mov	r5,zero
1000ea2c:	0023883a 	mov	r17,zero
1000ea30:	0021883a 	mov	r16,zero
1000ea34:	003f3e06 	br	1000e730 <__alt_data_end+0xf800e730>
1000ea38:	010007c4 	movi	r4,31
1000ea3c:	20803c16 	blt	r4,r2,1000eb30 <__subdf3+0x60c>
1000ea40:	01000804 	movi	r4,32
1000ea44:	2089c83a 	sub	r4,r4,r2
1000ea48:	1912983a 	sll	r9,r3,r4
1000ea4c:	308ed83a 	srl	r7,r6,r2
1000ea50:	3108983a 	sll	r4,r6,r4
1000ea54:	1884d83a 	srl	r2,r3,r2
1000ea58:	49ceb03a 	or	r7,r9,r7
1000ea5c:	2008c03a 	cmpne	r4,r4,zero
1000ea60:	390eb03a 	or	r7,r7,r4
1000ea64:	003f4706 	br	1000e784 <__alt_data_end+0xf800e784>
1000ea68:	2c48b03a 	or	r4,r5,r17
1000ea6c:	20003e26 	beq	r4,zero,1000eb68 <__subdf3+0x644>
1000ea70:	0084303a 	nor	r2,zero,r2
1000ea74:	10003a1e 	bne	r2,zero,1000eb60 <__subdf3+0x63c>
1000ea78:	3463c83a 	sub	r17,r6,r17
1000ea7c:	194bc83a 	sub	r5,r3,r5
1000ea80:	344d803a 	cmpltu	r6,r6,r17
1000ea84:	298bc83a 	sub	r5,r5,r6
1000ea88:	5021883a 	mov	r16,r10
1000ea8c:	3825883a 	mov	r18,r7
1000ea90:	003f0406 	br	1000e6a4 <__alt_data_end+0xf800e6a4>
1000ea94:	1023883a 	mov	r17,r2
1000ea98:	003f0706 	br	1000e6b8 <__alt_data_end+0xf800e6b8>
1000ea9c:	0101ffc4 	movi	r4,2047
1000eaa0:	813f331e 	bne	r16,r4,1000e770 <__alt_data_end+0xf800e770>
1000eaa4:	003ec206 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000eaa8:	0027883a 	mov	r19,zero
1000eaac:	003fb006 	br	1000e970 <__alt_data_end+0xf800e970>
1000eab0:	0005883a 	mov	r2,zero
1000eab4:	003fbb06 	br	1000e9a4 <__alt_data_end+0xf800e9a4>
1000eab8:	2c44b03a 	or	r2,r5,r17
1000eabc:	80008b1e 	bne	r16,zero,1000ecec <__subdf3+0x7c8>
1000eac0:	1000b526 	beq	r2,zero,1000ed98 <__subdf3+0x874>
1000eac4:	1984b03a 	or	r2,r3,r6
1000eac8:	103eb926 	beq	r2,zero,1000e5b0 <__alt_data_end+0xf800e5b0>
1000eacc:	3449883a 	add	r4,r6,r17
1000ead0:	2463803a 	cmpltu	r17,r4,r17
1000ead4:	194b883a 	add	r5,r3,r5
1000ead8:	2c4b883a 	add	r5,r5,r17
1000eadc:	2880202c 	andhi	r2,r5,128
1000eae0:	2023883a 	mov	r17,r4
1000eae4:	103f5c26 	beq	r2,zero,1000e858 <__alt_data_end+0xf800e858>
1000eae8:	00bfe034 	movhi	r2,65408
1000eaec:	10bfffc4 	addi	r2,r2,-1
1000eaf0:	4821883a 	mov	r16,r9
1000eaf4:	288a703a 	and	r5,r5,r2
1000eaf8:	003ead06 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000eafc:	2c44b03a 	or	r2,r5,r17
1000eb00:	8000291e 	bne	r16,zero,1000eba8 <__subdf3+0x684>
1000eb04:	10004f1e 	bne	r2,zero,1000ec44 <__subdf3+0x720>
1000eb08:	1984b03a 	or	r2,r3,r6
1000eb0c:	10000426 	beq	r2,zero,1000eb20 <__subdf3+0x5fc>
1000eb10:	180b883a 	mov	r5,r3
1000eb14:	3023883a 	mov	r17,r6
1000eb18:	3825883a 	mov	r18,r7
1000eb1c:	003ea406 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000eb20:	0011883a 	mov	r8,zero
1000eb24:	000b883a 	mov	r5,zero
1000eb28:	0023883a 	mov	r17,zero
1000eb2c:	003f0006 	br	1000e730 <__alt_data_end+0xf800e730>
1000eb30:	11fff804 	addi	r7,r2,-32
1000eb34:	19c8d83a 	srl	r4,r3,r7
1000eb38:	01c00804 	movi	r7,32
1000eb3c:	11c07e26 	beq	r2,r7,1000ed38 <__subdf3+0x814>
1000eb40:	01c01004 	movi	r7,64
1000eb44:	3885c83a 	sub	r2,r7,r2
1000eb48:	1884983a 	sll	r2,r3,r2
1000eb4c:	118cb03a 	or	r6,r2,r6
1000eb50:	300ec03a 	cmpne	r7,r6,zero
1000eb54:	390eb03a 	or	r7,r7,r4
1000eb58:	0005883a 	mov	r2,zero
1000eb5c:	003f0906 	br	1000e784 <__alt_data_end+0xf800e784>
1000eb60:	0101ffc4 	movi	r4,2047
1000eb64:	513f991e 	bne	r10,r4,1000e9cc <__alt_data_end+0xf800e9cc>
1000eb68:	180b883a 	mov	r5,r3
1000eb6c:	3023883a 	mov	r17,r6
1000eb70:	5021883a 	mov	r16,r10
1000eb74:	3825883a 	mov	r18,r7
1000eb78:	003e8d06 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000eb7c:	80001a1e 	bne	r16,zero,1000ebe8 <__subdf3+0x6c4>
1000eb80:	2c48b03a 	or	r4,r5,r17
1000eb84:	20005526 	beq	r4,zero,1000ecdc <__subdf3+0x7b8>
1000eb88:	0084303a 	nor	r2,zero,r2
1000eb8c:	1000511e 	bne	r2,zero,1000ecd4 <__subdf3+0x7b0>
1000eb90:	89a3883a 	add	r17,r17,r6
1000eb94:	194b883a 	add	r5,r3,r5
1000eb98:	898d803a 	cmpltu	r6,r17,r6
1000eb9c:	298b883a 	add	r5,r5,r6
1000eba0:	5021883a 	mov	r16,r10
1000eba4:	003efc06 	br	1000e798 <__alt_data_end+0xf800e798>
1000eba8:	1000341e 	bne	r2,zero,1000ec7c <__subdf3+0x758>
1000ebac:	1984b03a 	or	r2,r3,r6
1000ebb0:	10006f26 	beq	r2,zero,1000ed70 <__subdf3+0x84c>
1000ebb4:	180b883a 	mov	r5,r3
1000ebb8:	3023883a 	mov	r17,r6
1000ebbc:	3825883a 	mov	r18,r7
1000ebc0:	0401ffc4 	movi	r16,2047
1000ebc4:	003e7a06 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000ebc8:	2c62b03a 	or	r17,r5,r17
1000ebcc:	8822c03a 	cmpne	r17,r17,zero
1000ebd0:	0005883a 	mov	r2,zero
1000ebd4:	003f8a06 	br	1000ea00 <__alt_data_end+0xf800ea00>
1000ebd8:	3821883a 	mov	r16,r7
1000ebdc:	000b883a 	mov	r5,zero
1000ebe0:	0023883a 	mov	r17,zero
1000ebe4:	003ed206 	br	1000e730 <__alt_data_end+0xf800e730>
1000ebe8:	0101ffc4 	movi	r4,2047
1000ebec:	51003b26 	beq	r10,r4,1000ecdc <__subdf3+0x7b8>
1000ebf0:	0085c83a 	sub	r2,zero,r2
1000ebf4:	29402034 	orhi	r5,r5,128
1000ebf8:	01000e04 	movi	r4,56
1000ebfc:	20806216 	blt	r4,r2,1000ed88 <__subdf3+0x864>
1000ec00:	010007c4 	movi	r4,31
1000ec04:	20806b16 	blt	r4,r2,1000edb4 <__subdf3+0x890>
1000ec08:	01000804 	movi	r4,32
1000ec0c:	2089c83a 	sub	r4,r4,r2
1000ec10:	2912983a 	sll	r9,r5,r4
1000ec14:	888ed83a 	srl	r7,r17,r2
1000ec18:	8908983a 	sll	r4,r17,r4
1000ec1c:	2884d83a 	srl	r2,r5,r2
1000ec20:	49e2b03a 	or	r17,r9,r7
1000ec24:	2008c03a 	cmpne	r4,r4,zero
1000ec28:	8922b03a 	or	r17,r17,r4
1000ec2c:	89a3883a 	add	r17,r17,r6
1000ec30:	10c5883a 	add	r2,r2,r3
1000ec34:	898d803a 	cmpltu	r6,r17,r6
1000ec38:	118b883a 	add	r5,r2,r6
1000ec3c:	5021883a 	mov	r16,r10
1000ec40:	003ed506 	br	1000e798 <__alt_data_end+0xf800e798>
1000ec44:	1984b03a 	or	r2,r3,r6
1000ec48:	103e5926 	beq	r2,zero,1000e5b0 <__alt_data_end+0xf800e5b0>
1000ec4c:	8989c83a 	sub	r4,r17,r6
1000ec50:	8911803a 	cmpltu	r8,r17,r4
1000ec54:	28c5c83a 	sub	r2,r5,r3
1000ec58:	1205c83a 	sub	r2,r2,r8
1000ec5c:	1200202c 	andhi	r8,r2,128
1000ec60:	403ef926 	beq	r8,zero,1000e848 <__alt_data_end+0xf800e848>
1000ec64:	3463c83a 	sub	r17,r6,r17
1000ec68:	194bc83a 	sub	r5,r3,r5
1000ec6c:	344d803a 	cmpltu	r6,r6,r17
1000ec70:	298bc83a 	sub	r5,r5,r6
1000ec74:	3825883a 	mov	r18,r7
1000ec78:	003e4d06 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000ec7c:	1984b03a 	or	r2,r3,r6
1000ec80:	10002b26 	beq	r2,zero,1000ed30 <__subdf3+0x80c>
1000ec84:	2808d0fa 	srli	r4,r5,3
1000ec88:	8822d0fa 	srli	r17,r17,3
1000ec8c:	280a977a 	slli	r5,r5,29
1000ec90:	2080022c 	andhi	r2,r4,8
1000ec94:	2c62b03a 	or	r17,r5,r17
1000ec98:	10000826 	beq	r2,zero,1000ecbc <__subdf3+0x798>
1000ec9c:	1810d0fa 	srli	r8,r3,3
1000eca0:	4080022c 	andhi	r2,r8,8
1000eca4:	1000051e 	bne	r2,zero,1000ecbc <__subdf3+0x798>
1000eca8:	300cd0fa 	srli	r6,r6,3
1000ecac:	1804977a 	slli	r2,r3,29
1000ecb0:	4009883a 	mov	r4,r8
1000ecb4:	3825883a 	mov	r18,r7
1000ecb8:	11a2b03a 	or	r17,r2,r6
1000ecbc:	880ad77a 	srli	r5,r17,29
1000ecc0:	200890fa 	slli	r4,r4,3
1000ecc4:	882290fa 	slli	r17,r17,3
1000ecc8:	0401ffc4 	movi	r16,2047
1000eccc:	290ab03a 	or	r5,r5,r4
1000ecd0:	003e3706 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000ecd4:	0101ffc4 	movi	r4,2047
1000ecd8:	513fc71e 	bne	r10,r4,1000ebf8 <__alt_data_end+0xf800ebf8>
1000ecdc:	180b883a 	mov	r5,r3
1000ece0:	3023883a 	mov	r17,r6
1000ece4:	5021883a 	mov	r16,r10
1000ece8:	003e3106 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000ecec:	10002d26 	beq	r2,zero,1000eda4 <__subdf3+0x880>
1000ecf0:	1984b03a 	or	r2,r3,r6
1000ecf4:	10000e26 	beq	r2,zero,1000ed30 <__subdf3+0x80c>
1000ecf8:	2808d0fa 	srli	r4,r5,3
1000ecfc:	8822d0fa 	srli	r17,r17,3
1000ed00:	280a977a 	slli	r5,r5,29
1000ed04:	2080022c 	andhi	r2,r4,8
1000ed08:	2c62b03a 	or	r17,r5,r17
1000ed0c:	103feb26 	beq	r2,zero,1000ecbc <__alt_data_end+0xf800ecbc>
1000ed10:	180ed0fa 	srli	r7,r3,3
1000ed14:	3880022c 	andhi	r2,r7,8
1000ed18:	103fe81e 	bne	r2,zero,1000ecbc <__alt_data_end+0xf800ecbc>
1000ed1c:	300cd0fa 	srli	r6,r6,3
1000ed20:	1804977a 	slli	r2,r3,29
1000ed24:	3809883a 	mov	r4,r7
1000ed28:	11a2b03a 	or	r17,r2,r6
1000ed2c:	003fe306 	br	1000ecbc <__alt_data_end+0xf800ecbc>
1000ed30:	0401ffc4 	movi	r16,2047
1000ed34:	003e1e06 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000ed38:	0005883a 	mov	r2,zero
1000ed3c:	003f8306 	br	1000eb4c <__alt_data_end+0xf800eb4c>
1000ed40:	113ff804 	addi	r4,r2,-32
1000ed44:	02000804 	movi	r8,32
1000ed48:	2908d83a 	srl	r4,r5,r4
1000ed4c:	12002526 	beq	r2,r8,1000ede4 <__subdf3+0x8c0>
1000ed50:	02001004 	movi	r8,64
1000ed54:	4085c83a 	sub	r2,r8,r2
1000ed58:	288a983a 	sll	r5,r5,r2
1000ed5c:	2c62b03a 	or	r17,r5,r17
1000ed60:	8822c03a 	cmpne	r17,r17,zero
1000ed64:	8922b03a 	or	r17,r17,r4
1000ed68:	0005883a 	mov	r2,zero
1000ed6c:	003f2406 	br	1000ea00 <__alt_data_end+0xf800ea00>
1000ed70:	01402034 	movhi	r5,128
1000ed74:	0011883a 	mov	r8,zero
1000ed78:	297fffc4 	addi	r5,r5,-1
1000ed7c:	047ffe04 	movi	r17,-8
1000ed80:	0401ffc4 	movi	r16,2047
1000ed84:	003e6a06 	br	1000e730 <__alt_data_end+0xf800e730>
1000ed88:	2c62b03a 	or	r17,r5,r17
1000ed8c:	8822c03a 	cmpne	r17,r17,zero
1000ed90:	0005883a 	mov	r2,zero
1000ed94:	003fa506 	br	1000ec2c <__alt_data_end+0xf800ec2c>
1000ed98:	180b883a 	mov	r5,r3
1000ed9c:	3023883a 	mov	r17,r6
1000eda0:	003e0306 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000eda4:	180b883a 	mov	r5,r3
1000eda8:	3023883a 	mov	r17,r6
1000edac:	0401ffc4 	movi	r16,2047
1000edb0:	003dff06 	br	1000e5b0 <__alt_data_end+0xf800e5b0>
1000edb4:	113ff804 	addi	r4,r2,-32
1000edb8:	01c00804 	movi	r7,32
1000edbc:	2908d83a 	srl	r4,r5,r4
1000edc0:	11c00a26 	beq	r2,r7,1000edec <__subdf3+0x8c8>
1000edc4:	01c01004 	movi	r7,64
1000edc8:	3885c83a 	sub	r2,r7,r2
1000edcc:	288a983a 	sll	r5,r5,r2
1000edd0:	2c62b03a 	or	r17,r5,r17
1000edd4:	8822c03a 	cmpne	r17,r17,zero
1000edd8:	8922b03a 	or	r17,r17,r4
1000eddc:	0005883a 	mov	r2,zero
1000ede0:	003f9206 	br	1000ec2c <__alt_data_end+0xf800ec2c>
1000ede4:	000b883a 	mov	r5,zero
1000ede8:	003fdc06 	br	1000ed5c <__alt_data_end+0xf800ed5c>
1000edec:	000b883a 	mov	r5,zero
1000edf0:	003ff706 	br	1000edd0 <__alt_data_end+0xf800edd0>

1000edf4 <__fixdfsi>:
1000edf4:	2806d53a 	srli	r3,r5,20
1000edf8:	00800434 	movhi	r2,16
1000edfc:	10bfffc4 	addi	r2,r2,-1
1000ee00:	18c1ffcc 	andi	r3,r3,2047
1000ee04:	0180ff84 	movi	r6,1022
1000ee08:	2884703a 	and	r2,r5,r2
1000ee0c:	280ad7fa 	srli	r5,r5,31
1000ee10:	30c0130e 	bge	r6,r3,1000ee60 <__fixdfsi+0x6c>
1000ee14:	01810744 	movi	r6,1053
1000ee18:	30c00d16 	blt	r6,r3,1000ee50 <__fixdfsi+0x5c>
1000ee1c:	01810cc4 	movi	r6,1075
1000ee20:	30cdc83a 	sub	r6,r6,r3
1000ee24:	01c007c4 	movi	r7,31
1000ee28:	10800434 	orhi	r2,r2,16
1000ee2c:	39800e0e 	bge	r7,r6,1000ee68 <__fixdfsi+0x74>
1000ee30:	010104c4 	movi	r4,1043
1000ee34:	20c7c83a 	sub	r3,r4,r3
1000ee38:	10c6d83a 	srl	r3,r2,r3
1000ee3c:	29403fcc 	andi	r5,r5,255
1000ee40:	0145c83a 	sub	r2,zero,r5
1000ee44:	1884f03a 	xor	r2,r3,r2
1000ee48:	1145883a 	add	r2,r2,r5
1000ee4c:	f800283a 	ret
1000ee50:	00a00034 	movhi	r2,32768
1000ee54:	10bfffc4 	addi	r2,r2,-1
1000ee58:	2885883a 	add	r2,r5,r2
1000ee5c:	f800283a 	ret
1000ee60:	0005883a 	mov	r2,zero
1000ee64:	f800283a 	ret
1000ee68:	18fefb44 	addi	r3,r3,-1043
1000ee6c:	2188d83a 	srl	r4,r4,r6
1000ee70:	10c6983a 	sll	r3,r2,r3
1000ee74:	20c6b03a 	or	r3,r4,r3
1000ee78:	003ff006 	br	1000ee3c <__alt_data_end+0xf800ee3c>

1000ee7c <__floatsidf>:
1000ee7c:	defffd04 	addi	sp,sp,-12
1000ee80:	dc400115 	stw	r17,4(sp)
1000ee84:	dfc00215 	stw	ra,8(sp)
1000ee88:	dc000015 	stw	r16,0(sp)
1000ee8c:	2023883a 	mov	r17,r4
1000ee90:	20001426 	beq	r4,zero,1000eee4 <__floatsidf+0x68>
1000ee94:	2020d7fa 	srli	r16,r4,31
1000ee98:	80000126 	beq	r16,zero,1000eea0 <__floatsidf+0x24>
1000ee9c:	0123c83a 	sub	r17,zero,r4
1000eea0:	8809883a 	mov	r4,r17
1000eea4:	000eff00 	call	1000eff0 <__clzsi2>
1000eea8:	01410784 	movi	r5,1054
1000eeac:	00c00284 	movi	r3,10
1000eeb0:	288bc83a 	sub	r5,r5,r2
1000eeb4:	18801c16 	blt	r3,r2,1000ef28 <__floatsidf+0xac>
1000eeb8:	00c002c4 	movi	r3,11
1000eebc:	1887c83a 	sub	r3,r3,r2
1000eec0:	88c8d83a 	srl	r4,r17,r3
1000eec4:	00c00434 	movhi	r3,16
1000eec8:	18ffffc4 	addi	r3,r3,-1
1000eecc:	10800544 	addi	r2,r2,21
1000eed0:	20c8703a 	and	r4,r4,r3
1000eed4:	8884983a 	sll	r2,r17,r2
1000eed8:	28c1ffcc 	andi	r3,r5,2047
1000eedc:	800d883a 	mov	r6,r16
1000eee0:	00000406 	br	1000eef4 <__floatsidf+0x78>
1000eee4:	000d883a 	mov	r6,zero
1000eee8:	0007883a 	mov	r3,zero
1000eeec:	0009883a 	mov	r4,zero
1000eef0:	0005883a 	mov	r2,zero
1000eef4:	180a953a 	slli	r5,r3,20
1000eef8:	31803fcc 	andi	r6,r6,255
1000eefc:	00c00434 	movhi	r3,16
1000ef00:	300c97fa 	slli	r6,r6,31
1000ef04:	18ffffc4 	addi	r3,r3,-1
1000ef08:	20c6703a 	and	r3,r4,r3
1000ef0c:	1946b03a 	or	r3,r3,r5
1000ef10:	1986b03a 	or	r3,r3,r6
1000ef14:	dfc00217 	ldw	ra,8(sp)
1000ef18:	dc400117 	ldw	r17,4(sp)
1000ef1c:	dc000017 	ldw	r16,0(sp)
1000ef20:	dec00304 	addi	sp,sp,12
1000ef24:	f800283a 	ret
1000ef28:	10fffd44 	addi	r3,r2,-11
1000ef2c:	88c8983a 	sll	r4,r17,r3
1000ef30:	00800434 	movhi	r2,16
1000ef34:	10bfffc4 	addi	r2,r2,-1
1000ef38:	2088703a 	and	r4,r4,r2
1000ef3c:	28c1ffcc 	andi	r3,r5,2047
1000ef40:	800d883a 	mov	r6,r16
1000ef44:	0005883a 	mov	r2,zero
1000ef48:	003fea06 	br	1000eef4 <__alt_data_end+0xf800eef4>

1000ef4c <__floatunsidf>:
1000ef4c:	defffe04 	addi	sp,sp,-8
1000ef50:	dc000015 	stw	r16,0(sp)
1000ef54:	dfc00115 	stw	ra,4(sp)
1000ef58:	2021883a 	mov	r16,r4
1000ef5c:	20001026 	beq	r4,zero,1000efa0 <__floatunsidf+0x54>
1000ef60:	000eff00 	call	1000eff0 <__clzsi2>
1000ef64:	01410784 	movi	r5,1054
1000ef68:	100d883a 	mov	r6,r2
1000ef6c:	288bc83a 	sub	r5,r5,r2
1000ef70:	00800284 	movi	r2,10
1000ef74:	11801616 	blt	r2,r6,1000efd0 <__floatunsidf+0x84>
1000ef78:	008002c4 	movi	r2,11
1000ef7c:	1185c83a 	sub	r2,r2,r6
1000ef80:	8084d83a 	srl	r2,r16,r2
1000ef84:	00c00434 	movhi	r3,16
1000ef88:	31c00544 	addi	r7,r6,21
1000ef8c:	18ffffc4 	addi	r3,r3,-1
1000ef90:	81e0983a 	sll	r16,r16,r7
1000ef94:	10cc703a 	and	r6,r2,r3
1000ef98:	2941ffcc 	andi	r5,r5,2047
1000ef9c:	00000206 	br	1000efa8 <__floatunsidf+0x5c>
1000efa0:	000b883a 	mov	r5,zero
1000efa4:	000d883a 	mov	r6,zero
1000efa8:	280a953a 	slli	r5,r5,20
1000efac:	00c00434 	movhi	r3,16
1000efb0:	18ffffc4 	addi	r3,r3,-1
1000efb4:	30c6703a 	and	r3,r6,r3
1000efb8:	8005883a 	mov	r2,r16
1000efbc:	1946b03a 	or	r3,r3,r5
1000efc0:	dfc00117 	ldw	ra,4(sp)
1000efc4:	dc000017 	ldw	r16,0(sp)
1000efc8:	dec00204 	addi	sp,sp,8
1000efcc:	f800283a 	ret
1000efd0:	31bffd44 	addi	r6,r6,-11
1000efd4:	818c983a 	sll	r6,r16,r6
1000efd8:	00800434 	movhi	r2,16
1000efdc:	10bfffc4 	addi	r2,r2,-1
1000efe0:	2941ffcc 	andi	r5,r5,2047
1000efe4:	0021883a 	mov	r16,zero
1000efe8:	308c703a 	and	r6,r6,r2
1000efec:	003fee06 	br	1000efa8 <__alt_data_end+0xf800efa8>

1000eff0 <__clzsi2>:
1000eff0:	00bfffd4 	movui	r2,65535
1000eff4:	11000b36 	bltu	r2,r4,1000f024 <__clzsi2+0x34>
1000eff8:	00803fc4 	movi	r2,255
1000effc:	1100122e 	bgeu	r2,r4,1000f048 <__clzsi2+0x58>
1000f000:	00c00204 	movi	r3,8
1000f004:	01400604 	movi	r5,24
1000f008:	20c8d83a 	srl	r4,r4,r3
1000f00c:	00840074 	movhi	r2,4097
1000f010:	10887e04 	addi	r2,r2,8696
1000f014:	1109883a 	add	r4,r2,r4
1000f018:	20800003 	ldbu	r2,0(r4)
1000f01c:	2885c83a 	sub	r2,r5,r2
1000f020:	f800283a 	ret
1000f024:	00804034 	movhi	r2,256
1000f028:	10bfffc4 	addi	r2,r2,-1
1000f02c:	11000336 	bltu	r2,r4,1000f03c <__clzsi2+0x4c>
1000f030:	00c00404 	movi	r3,16
1000f034:	180b883a 	mov	r5,r3
1000f038:	003ff306 	br	1000f008 <__alt_data_end+0xf800f008>
1000f03c:	00c00604 	movi	r3,24
1000f040:	01400204 	movi	r5,8
1000f044:	003ff006 	br	1000f008 <__alt_data_end+0xf800f008>
1000f048:	0007883a 	mov	r3,zero
1000f04c:	01400804 	movi	r5,32
1000f050:	003fed06 	br	1000f008 <__alt_data_end+0xf800f008>

1000f054 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f054:	defffe04 	addi	sp,sp,-8
1000f058:	dfc00115 	stw	ra,4(sp)
1000f05c:	df000015 	stw	fp,0(sp)
1000f060:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f064:	00840074 	movhi	r2,4097
1000f068:	108f8104 	addi	r2,r2,15876
1000f06c:	10800017 	ldw	r2,0(r2)
1000f070:	10000526 	beq	r2,zero,1000f088 <alt_get_errno+0x34>
1000f074:	00840074 	movhi	r2,4097
1000f078:	108f8104 	addi	r2,r2,15876
1000f07c:	10800017 	ldw	r2,0(r2)
1000f080:	103ee83a 	callr	r2
1000f084:	00000206 	br	1000f090 <alt_get_errno+0x3c>
1000f088:	00840074 	movhi	r2,4097
1000f08c:	10964804 	addi	r2,r2,22816
}
1000f090:	e037883a 	mov	sp,fp
1000f094:	dfc00117 	ldw	ra,4(sp)
1000f098:	df000017 	ldw	fp,0(sp)
1000f09c:	dec00204 	addi	sp,sp,8
1000f0a0:	f800283a 	ret

1000f0a4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f0a4:	defffb04 	addi	sp,sp,-20
1000f0a8:	dfc00415 	stw	ra,16(sp)
1000f0ac:	df000315 	stw	fp,12(sp)
1000f0b0:	df000304 	addi	fp,sp,12
1000f0b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000f0b8:	e0bfff17 	ldw	r2,-4(fp)
1000f0bc:	10000816 	blt	r2,zero,1000f0e0 <close+0x3c>
1000f0c0:	e13fff17 	ldw	r4,-4(fp)
1000f0c4:	01400304 	movi	r5,12
1000f0c8:	000c8300 	call	1000c830 <__mulsi3>
1000f0cc:	1007883a 	mov	r3,r2
1000f0d0:	00840074 	movhi	r2,4097
1000f0d4:	108afe04 	addi	r2,r2,11256
1000f0d8:	1885883a 	add	r2,r3,r2
1000f0dc:	00000106 	br	1000f0e4 <close+0x40>
1000f0e0:	0005883a 	mov	r2,zero
1000f0e4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000f0e8:	e0bffd17 	ldw	r2,-12(fp)
1000f0ec:	10001926 	beq	r2,zero,1000f154 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000f0f0:	e0bffd17 	ldw	r2,-12(fp)
1000f0f4:	10800017 	ldw	r2,0(r2)
1000f0f8:	10800417 	ldw	r2,16(r2)
1000f0fc:	10000626 	beq	r2,zero,1000f118 <close+0x74>
1000f100:	e0bffd17 	ldw	r2,-12(fp)
1000f104:	10800017 	ldw	r2,0(r2)
1000f108:	10800417 	ldw	r2,16(r2)
1000f10c:	e13ffd17 	ldw	r4,-12(fp)
1000f110:	103ee83a 	callr	r2
1000f114:	00000106 	br	1000f11c <close+0x78>
1000f118:	0005883a 	mov	r2,zero
1000f11c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000f120:	e13fff17 	ldw	r4,-4(fp)
1000f124:	000f7c80 	call	1000f7c8 <alt_release_fd>
    if (rval < 0)
1000f128:	e0bffe17 	ldw	r2,-8(fp)
1000f12c:	1000070e 	bge	r2,zero,1000f14c <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000f130:	000f0540 	call	1000f054 <alt_get_errno>
1000f134:	1007883a 	mov	r3,r2
1000f138:	e0bffe17 	ldw	r2,-8(fp)
1000f13c:	0085c83a 	sub	r2,zero,r2
1000f140:	18800015 	stw	r2,0(r3)
      return -1;
1000f144:	00bfffc4 	movi	r2,-1
1000f148:	00000706 	br	1000f168 <close+0xc4>
    }
    return 0;
1000f14c:	0005883a 	mov	r2,zero
1000f150:	00000506 	br	1000f168 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f154:	000f0540 	call	1000f054 <alt_get_errno>
1000f158:	1007883a 	mov	r3,r2
1000f15c:	00801444 	movi	r2,81
1000f160:	18800015 	stw	r2,0(r3)
    return -1;
1000f164:	00bfffc4 	movi	r2,-1
  }
}
1000f168:	e037883a 	mov	sp,fp
1000f16c:	dfc00117 	ldw	ra,4(sp)
1000f170:	df000017 	ldw	fp,0(sp)
1000f174:	dec00204 	addi	sp,sp,8
1000f178:	f800283a 	ret

1000f17c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000f17c:	defffc04 	addi	sp,sp,-16
1000f180:	df000315 	stw	fp,12(sp)
1000f184:	df000304 	addi	fp,sp,12
1000f188:	e13ffd15 	stw	r4,-12(fp)
1000f18c:	e17ffe15 	stw	r5,-8(fp)
1000f190:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000f194:	e0bfff17 	ldw	r2,-4(fp)
}
1000f198:	e037883a 	mov	sp,fp
1000f19c:	df000017 	ldw	fp,0(sp)
1000f1a0:	dec00104 	addi	sp,sp,4
1000f1a4:	f800283a 	ret

1000f1a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f1a8:	defffe04 	addi	sp,sp,-8
1000f1ac:	dfc00115 	stw	ra,4(sp)
1000f1b0:	df000015 	stw	fp,0(sp)
1000f1b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f1b8:	00840074 	movhi	r2,4097
1000f1bc:	108f8104 	addi	r2,r2,15876
1000f1c0:	10800017 	ldw	r2,0(r2)
1000f1c4:	10000526 	beq	r2,zero,1000f1dc <alt_get_errno+0x34>
1000f1c8:	00840074 	movhi	r2,4097
1000f1cc:	108f8104 	addi	r2,r2,15876
1000f1d0:	10800017 	ldw	r2,0(r2)
1000f1d4:	103ee83a 	callr	r2
1000f1d8:	00000206 	br	1000f1e4 <alt_get_errno+0x3c>
1000f1dc:	00840074 	movhi	r2,4097
1000f1e0:	10964804 	addi	r2,r2,22816
}
1000f1e4:	e037883a 	mov	sp,fp
1000f1e8:	dfc00117 	ldw	ra,4(sp)
1000f1ec:	df000017 	ldw	fp,0(sp)
1000f1f0:	dec00204 	addi	sp,sp,8
1000f1f4:	f800283a 	ret

1000f1f8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000f1f8:	defffb04 	addi	sp,sp,-20
1000f1fc:	dfc00415 	stw	ra,16(sp)
1000f200:	df000315 	stw	fp,12(sp)
1000f204:	df000304 	addi	fp,sp,12
1000f208:	e13ffe15 	stw	r4,-8(fp)
1000f20c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f210:	e0bffe17 	ldw	r2,-8(fp)
1000f214:	10000816 	blt	r2,zero,1000f238 <fstat+0x40>
1000f218:	e13ffe17 	ldw	r4,-8(fp)
1000f21c:	01400304 	movi	r5,12
1000f220:	000c8300 	call	1000c830 <__mulsi3>
1000f224:	1007883a 	mov	r3,r2
1000f228:	00840074 	movhi	r2,4097
1000f22c:	108afe04 	addi	r2,r2,11256
1000f230:	1885883a 	add	r2,r3,r2
1000f234:	00000106 	br	1000f23c <fstat+0x44>
1000f238:	0005883a 	mov	r2,zero
1000f23c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000f240:	e0bffd17 	ldw	r2,-12(fp)
1000f244:	10001026 	beq	r2,zero,1000f288 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000f248:	e0bffd17 	ldw	r2,-12(fp)
1000f24c:	10800017 	ldw	r2,0(r2)
1000f250:	10800817 	ldw	r2,32(r2)
1000f254:	10000726 	beq	r2,zero,1000f274 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000f258:	e0bffd17 	ldw	r2,-12(fp)
1000f25c:	10800017 	ldw	r2,0(r2)
1000f260:	10800817 	ldw	r2,32(r2)
1000f264:	e13ffd17 	ldw	r4,-12(fp)
1000f268:	e17fff17 	ldw	r5,-4(fp)
1000f26c:	103ee83a 	callr	r2
1000f270:	00000a06 	br	1000f29c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000f274:	e0bfff17 	ldw	r2,-4(fp)
1000f278:	00c80004 	movi	r3,8192
1000f27c:	10c00115 	stw	r3,4(r2)
      return 0;
1000f280:	0005883a 	mov	r2,zero
1000f284:	00000506 	br	1000f29c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f288:	000f1a80 	call	1000f1a8 <alt_get_errno>
1000f28c:	1007883a 	mov	r3,r2
1000f290:	00801444 	movi	r2,81
1000f294:	18800015 	stw	r2,0(r3)
    return -1;
1000f298:	00bfffc4 	movi	r2,-1
  }
}
1000f29c:	e037883a 	mov	sp,fp
1000f2a0:	dfc00117 	ldw	ra,4(sp)
1000f2a4:	df000017 	ldw	fp,0(sp)
1000f2a8:	dec00204 	addi	sp,sp,8
1000f2ac:	f800283a 	ret

1000f2b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f2b0:	defffe04 	addi	sp,sp,-8
1000f2b4:	dfc00115 	stw	ra,4(sp)
1000f2b8:	df000015 	stw	fp,0(sp)
1000f2bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f2c0:	00840074 	movhi	r2,4097
1000f2c4:	108f8104 	addi	r2,r2,15876
1000f2c8:	10800017 	ldw	r2,0(r2)
1000f2cc:	10000526 	beq	r2,zero,1000f2e4 <alt_get_errno+0x34>
1000f2d0:	00840074 	movhi	r2,4097
1000f2d4:	108f8104 	addi	r2,r2,15876
1000f2d8:	10800017 	ldw	r2,0(r2)
1000f2dc:	103ee83a 	callr	r2
1000f2e0:	00000206 	br	1000f2ec <alt_get_errno+0x3c>
1000f2e4:	00840074 	movhi	r2,4097
1000f2e8:	10964804 	addi	r2,r2,22816
}
1000f2ec:	e037883a 	mov	sp,fp
1000f2f0:	dfc00117 	ldw	ra,4(sp)
1000f2f4:	df000017 	ldw	fp,0(sp)
1000f2f8:	dec00204 	addi	sp,sp,8
1000f2fc:	f800283a 	ret

1000f300 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000f300:	deffed04 	addi	sp,sp,-76
1000f304:	dfc01215 	stw	ra,72(sp)
1000f308:	df001115 	stw	fp,68(sp)
1000f30c:	df001104 	addi	fp,sp,68
1000f310:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f314:	e0bfff17 	ldw	r2,-4(fp)
1000f318:	10000816 	blt	r2,zero,1000f33c <isatty+0x3c>
1000f31c:	e13fff17 	ldw	r4,-4(fp)
1000f320:	01400304 	movi	r5,12
1000f324:	000c8300 	call	1000c830 <__mulsi3>
1000f328:	1007883a 	mov	r3,r2
1000f32c:	00840074 	movhi	r2,4097
1000f330:	108afe04 	addi	r2,r2,11256
1000f334:	1885883a 	add	r2,r3,r2
1000f338:	00000106 	br	1000f340 <isatty+0x40>
1000f33c:	0005883a 	mov	r2,zero
1000f340:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000f344:	e0bfef17 	ldw	r2,-68(fp)
1000f348:	10000e26 	beq	r2,zero,1000f384 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000f34c:	e0bfef17 	ldw	r2,-68(fp)
1000f350:	10800017 	ldw	r2,0(r2)
1000f354:	10800817 	ldw	r2,32(r2)
1000f358:	1000021e 	bne	r2,zero,1000f364 <isatty+0x64>
    {
      return 1;
1000f35c:	00800044 	movi	r2,1
1000f360:	00000d06 	br	1000f398 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000f364:	e0bff004 	addi	r2,fp,-64
1000f368:	e13fff17 	ldw	r4,-4(fp)
1000f36c:	100b883a 	mov	r5,r2
1000f370:	000f1f80 	call	1000f1f8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000f374:	e0bff117 	ldw	r2,-60(fp)
1000f378:	10880020 	cmpeqi	r2,r2,8192
1000f37c:	10803fcc 	andi	r2,r2,255
1000f380:	00000506 	br	1000f398 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f384:	000f2b00 	call	1000f2b0 <alt_get_errno>
1000f388:	1007883a 	mov	r3,r2
1000f38c:	00801444 	movi	r2,81
1000f390:	18800015 	stw	r2,0(r3)
    return 0;
1000f394:	0005883a 	mov	r2,zero
  }
}
1000f398:	e037883a 	mov	sp,fp
1000f39c:	dfc00117 	ldw	ra,4(sp)
1000f3a0:	df000017 	ldw	fp,0(sp)
1000f3a4:	dec00204 	addi	sp,sp,8
1000f3a8:	f800283a 	ret

1000f3ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000f3ac:	defffc04 	addi	sp,sp,-16
1000f3b0:	df000315 	stw	fp,12(sp)
1000f3b4:	df000304 	addi	fp,sp,12
1000f3b8:	e13ffd15 	stw	r4,-12(fp)
1000f3bc:	e17ffe15 	stw	r5,-8(fp)
1000f3c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000f3c4:	e0fffe17 	ldw	r3,-8(fp)
1000f3c8:	e0bffd17 	ldw	r2,-12(fp)
1000f3cc:	18800c26 	beq	r3,r2,1000f400 <alt_load_section+0x54>
  {
    while( to != end )
1000f3d0:	00000806 	br	1000f3f4 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000f3d4:	e0bffe17 	ldw	r2,-8(fp)
1000f3d8:	10c00104 	addi	r3,r2,4
1000f3dc:	e0fffe15 	stw	r3,-8(fp)
1000f3e0:	e0fffd17 	ldw	r3,-12(fp)
1000f3e4:	19000104 	addi	r4,r3,4
1000f3e8:	e13ffd15 	stw	r4,-12(fp)
1000f3ec:	18c00017 	ldw	r3,0(r3)
1000f3f0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000f3f4:	e0fffe17 	ldw	r3,-8(fp)
1000f3f8:	e0bfff17 	ldw	r2,-4(fp)
1000f3fc:	18bff51e 	bne	r3,r2,1000f3d4 <__alt_data_end+0xf800f3d4>
    {
      *to++ = *from++;
    }
  }
}
1000f400:	e037883a 	mov	sp,fp
1000f404:	df000017 	ldw	fp,0(sp)
1000f408:	dec00104 	addi	sp,sp,4
1000f40c:	f800283a 	ret

1000f410 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000f410:	defffe04 	addi	sp,sp,-8
1000f414:	dfc00115 	stw	ra,4(sp)
1000f418:	df000015 	stw	fp,0(sp)
1000f41c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000f420:	01040074 	movhi	r4,4097
1000f424:	210f8604 	addi	r4,r4,15896
1000f428:	01440074 	movhi	r5,4097
1000f42c:	2948cb04 	addi	r5,r5,9004
1000f430:	01840074 	movhi	r6,4097
1000f434:	318f8604 	addi	r6,r6,15896
1000f438:	000f3ac0 	call	1000f3ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000f43c:	01040034 	movhi	r4,4096
1000f440:	21000804 	addi	r4,r4,32
1000f444:	01440034 	movhi	r5,4096
1000f448:	29400804 	addi	r5,r5,32
1000f44c:	01840034 	movhi	r6,4096
1000f450:	31806f04 	addi	r6,r6,444
1000f454:	000f3ac0 	call	1000f3ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000f458:	01040074 	movhi	r4,4097
1000f45c:	21062604 	addi	r4,r4,6296
1000f460:	01440074 	movhi	r5,4097
1000f464:	29462604 	addi	r5,r5,6296
1000f468:	01840074 	movhi	r6,4097
1000f46c:	3188cb04 	addi	r6,r6,9004
1000f470:	000f3ac0 	call	1000f3ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000f474:	00108100 	call	10010810 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000f478:	00109d80 	call	100109d8 <alt_icache_flush_all>
}
1000f47c:	e037883a 	mov	sp,fp
1000f480:	dfc00117 	ldw	ra,4(sp)
1000f484:	df000017 	ldw	fp,0(sp)
1000f488:	dec00204 	addi	sp,sp,8
1000f48c:	f800283a 	ret

1000f490 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f490:	defffe04 	addi	sp,sp,-8
1000f494:	dfc00115 	stw	ra,4(sp)
1000f498:	df000015 	stw	fp,0(sp)
1000f49c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f4a0:	00840074 	movhi	r2,4097
1000f4a4:	108f8104 	addi	r2,r2,15876
1000f4a8:	10800017 	ldw	r2,0(r2)
1000f4ac:	10000526 	beq	r2,zero,1000f4c4 <alt_get_errno+0x34>
1000f4b0:	00840074 	movhi	r2,4097
1000f4b4:	108f8104 	addi	r2,r2,15876
1000f4b8:	10800017 	ldw	r2,0(r2)
1000f4bc:	103ee83a 	callr	r2
1000f4c0:	00000206 	br	1000f4cc <alt_get_errno+0x3c>
1000f4c4:	00840074 	movhi	r2,4097
1000f4c8:	10964804 	addi	r2,r2,22816
}
1000f4cc:	e037883a 	mov	sp,fp
1000f4d0:	dfc00117 	ldw	ra,4(sp)
1000f4d4:	df000017 	ldw	fp,0(sp)
1000f4d8:	dec00204 	addi	sp,sp,8
1000f4dc:	f800283a 	ret

1000f4e0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000f4e0:	defff904 	addi	sp,sp,-28
1000f4e4:	dfc00615 	stw	ra,24(sp)
1000f4e8:	df000515 	stw	fp,20(sp)
1000f4ec:	df000504 	addi	fp,sp,20
1000f4f0:	e13ffd15 	stw	r4,-12(fp)
1000f4f4:	e17ffe15 	stw	r5,-8(fp)
1000f4f8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000f4fc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f500:	e0bffd17 	ldw	r2,-12(fp)
1000f504:	10000816 	blt	r2,zero,1000f528 <lseek+0x48>
1000f508:	e13ffd17 	ldw	r4,-12(fp)
1000f50c:	01400304 	movi	r5,12
1000f510:	000c8300 	call	1000c830 <__mulsi3>
1000f514:	1007883a 	mov	r3,r2
1000f518:	00840074 	movhi	r2,4097
1000f51c:	108afe04 	addi	r2,r2,11256
1000f520:	1885883a 	add	r2,r3,r2
1000f524:	00000106 	br	1000f52c <lseek+0x4c>
1000f528:	0005883a 	mov	r2,zero
1000f52c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000f530:	e0bffc17 	ldw	r2,-16(fp)
1000f534:	10001026 	beq	r2,zero,1000f578 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000f538:	e0bffc17 	ldw	r2,-16(fp)
1000f53c:	10800017 	ldw	r2,0(r2)
1000f540:	10800717 	ldw	r2,28(r2)
1000f544:	10000926 	beq	r2,zero,1000f56c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000f548:	e0bffc17 	ldw	r2,-16(fp)
1000f54c:	10800017 	ldw	r2,0(r2)
1000f550:	10800717 	ldw	r2,28(r2)
1000f554:	e13ffc17 	ldw	r4,-16(fp)
1000f558:	e17ffe17 	ldw	r5,-8(fp)
1000f55c:	e1bfff17 	ldw	r6,-4(fp)
1000f560:	103ee83a 	callr	r2
1000f564:	e0bffb15 	stw	r2,-20(fp)
1000f568:	00000506 	br	1000f580 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000f56c:	00bfde84 	movi	r2,-134
1000f570:	e0bffb15 	stw	r2,-20(fp)
1000f574:	00000206 	br	1000f580 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000f578:	00bfebc4 	movi	r2,-81
1000f57c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000f580:	e0bffb17 	ldw	r2,-20(fp)
1000f584:	1000070e 	bge	r2,zero,1000f5a4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000f588:	000f4900 	call	1000f490 <alt_get_errno>
1000f58c:	1007883a 	mov	r3,r2
1000f590:	e0bffb17 	ldw	r2,-20(fp)
1000f594:	0085c83a 	sub	r2,zero,r2
1000f598:	18800015 	stw	r2,0(r3)
    rc = -1;
1000f59c:	00bfffc4 	movi	r2,-1
1000f5a0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000f5a4:	e0bffb17 	ldw	r2,-20(fp)
}
1000f5a8:	e037883a 	mov	sp,fp
1000f5ac:	dfc00117 	ldw	ra,4(sp)
1000f5b0:	df000017 	ldw	fp,0(sp)
1000f5b4:	dec00204 	addi	sp,sp,8
1000f5b8:	f800283a 	ret

1000f5bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000f5bc:	defffd04 	addi	sp,sp,-12
1000f5c0:	dfc00215 	stw	ra,8(sp)
1000f5c4:	df000115 	stw	fp,4(sp)
1000f5c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000f5cc:	0009883a 	mov	r4,zero
1000f5d0:	000fab00 	call	1000fab0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000f5d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000f5d8:	000fae40 	call	1000fae4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000f5dc:	01040074 	movhi	r4,4097
1000f5e0:	2108c104 	addi	r4,r4,8964
1000f5e4:	01440074 	movhi	r5,4097
1000f5e8:	2948c104 	addi	r5,r5,8964
1000f5ec:	01840074 	movhi	r6,4097
1000f5f0:	3188c104 	addi	r6,r6,8964
1000f5f4:	0010da40 	call	10010da4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000f5f8:	00109200 	call	10010920 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000f5fc:	01040074 	movhi	r4,4097
1000f600:	21025f04 	addi	r4,r4,2428
1000f604:	00114f40 	call	100114f4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000f608:	d126d317 	ldw	r4,-25780(gp)
1000f60c:	d0e6d417 	ldw	r3,-25776(gp)
1000f610:	d0a6d517 	ldw	r2,-25772(gp)
1000f614:	180b883a 	mov	r5,r3
1000f618:	100d883a 	mov	r6,r2
1000f61c:	00006b80 	call	100006b8 <main>
1000f620:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000f624:	01000044 	movi	r4,1
1000f628:	000f0a40 	call	1000f0a4 <close>
  exit (result);
1000f62c:	e13fff17 	ldw	r4,-4(fp)
1000f630:	00115080 	call	10011508 <exit>

1000f634 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000f634:	defffe04 	addi	sp,sp,-8
1000f638:	df000115 	stw	fp,4(sp)
1000f63c:	df000104 	addi	fp,sp,4
1000f640:	e13fff15 	stw	r4,-4(fp)
}
1000f644:	e037883a 	mov	sp,fp
1000f648:	df000017 	ldw	fp,0(sp)
1000f64c:	dec00104 	addi	sp,sp,4
1000f650:	f800283a 	ret

1000f654 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000f654:	defffe04 	addi	sp,sp,-8
1000f658:	df000115 	stw	fp,4(sp)
1000f65c:	df000104 	addi	fp,sp,4
1000f660:	e13fff15 	stw	r4,-4(fp)
}
1000f664:	e037883a 	mov	sp,fp
1000f668:	df000017 	ldw	fp,0(sp)
1000f66c:	dec00104 	addi	sp,sp,4
1000f670:	f800283a 	ret

1000f674 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f674:	defffe04 	addi	sp,sp,-8
1000f678:	dfc00115 	stw	ra,4(sp)
1000f67c:	df000015 	stw	fp,0(sp)
1000f680:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f684:	00840074 	movhi	r2,4097
1000f688:	108f8104 	addi	r2,r2,15876
1000f68c:	10800017 	ldw	r2,0(r2)
1000f690:	10000526 	beq	r2,zero,1000f6a8 <alt_get_errno+0x34>
1000f694:	00840074 	movhi	r2,4097
1000f698:	108f8104 	addi	r2,r2,15876
1000f69c:	10800017 	ldw	r2,0(r2)
1000f6a0:	103ee83a 	callr	r2
1000f6a4:	00000206 	br	1000f6b0 <alt_get_errno+0x3c>
1000f6a8:	00840074 	movhi	r2,4097
1000f6ac:	10964804 	addi	r2,r2,22816
}
1000f6b0:	e037883a 	mov	sp,fp
1000f6b4:	dfc00117 	ldw	ra,4(sp)
1000f6b8:	df000017 	ldw	fp,0(sp)
1000f6bc:	dec00204 	addi	sp,sp,8
1000f6c0:	f800283a 	ret

1000f6c4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000f6c4:	defff904 	addi	sp,sp,-28
1000f6c8:	dfc00615 	stw	ra,24(sp)
1000f6cc:	df000515 	stw	fp,20(sp)
1000f6d0:	df000504 	addi	fp,sp,20
1000f6d4:	e13ffd15 	stw	r4,-12(fp)
1000f6d8:	e17ffe15 	stw	r5,-8(fp)
1000f6dc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f6e0:	e0bffd17 	ldw	r2,-12(fp)
1000f6e4:	10000816 	blt	r2,zero,1000f708 <read+0x44>
1000f6e8:	e13ffd17 	ldw	r4,-12(fp)
1000f6ec:	01400304 	movi	r5,12
1000f6f0:	000c8300 	call	1000c830 <__mulsi3>
1000f6f4:	1007883a 	mov	r3,r2
1000f6f8:	00840074 	movhi	r2,4097
1000f6fc:	108afe04 	addi	r2,r2,11256
1000f700:	1885883a 	add	r2,r3,r2
1000f704:	00000106 	br	1000f70c <read+0x48>
1000f708:	0005883a 	mov	r2,zero
1000f70c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f710:	e0bffb17 	ldw	r2,-20(fp)
1000f714:	10002226 	beq	r2,zero,1000f7a0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f718:	e0bffb17 	ldw	r2,-20(fp)
1000f71c:	10800217 	ldw	r2,8(r2)
1000f720:	108000cc 	andi	r2,r2,3
1000f724:	10800060 	cmpeqi	r2,r2,1
1000f728:	1000181e 	bne	r2,zero,1000f78c <read+0xc8>
        (fd->dev->read))
1000f72c:	e0bffb17 	ldw	r2,-20(fp)
1000f730:	10800017 	ldw	r2,0(r2)
1000f734:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f738:	10001426 	beq	r2,zero,1000f78c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000f73c:	e0bffb17 	ldw	r2,-20(fp)
1000f740:	10800017 	ldw	r2,0(r2)
1000f744:	10800517 	ldw	r2,20(r2)
1000f748:	e0ffff17 	ldw	r3,-4(fp)
1000f74c:	e13ffb17 	ldw	r4,-20(fp)
1000f750:	e17ffe17 	ldw	r5,-8(fp)
1000f754:	180d883a 	mov	r6,r3
1000f758:	103ee83a 	callr	r2
1000f75c:	e0bffc15 	stw	r2,-16(fp)
1000f760:	e0bffc17 	ldw	r2,-16(fp)
1000f764:	1000070e 	bge	r2,zero,1000f784 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000f768:	000f6740 	call	1000f674 <alt_get_errno>
1000f76c:	1007883a 	mov	r3,r2
1000f770:	e0bffc17 	ldw	r2,-16(fp)
1000f774:	0085c83a 	sub	r2,zero,r2
1000f778:	18800015 	stw	r2,0(r3)
          return -1;
1000f77c:	00bfffc4 	movi	r2,-1
1000f780:	00000c06 	br	1000f7b4 <read+0xf0>
        }
        return rval;
1000f784:	e0bffc17 	ldw	r2,-16(fp)
1000f788:	00000a06 	br	1000f7b4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000f78c:	000f6740 	call	1000f674 <alt_get_errno>
1000f790:	1007883a 	mov	r3,r2
1000f794:	00800344 	movi	r2,13
1000f798:	18800015 	stw	r2,0(r3)
1000f79c:	00000406 	br	1000f7b0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000f7a0:	000f6740 	call	1000f674 <alt_get_errno>
1000f7a4:	1007883a 	mov	r3,r2
1000f7a8:	00801444 	movi	r2,81
1000f7ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f7b0:	00bfffc4 	movi	r2,-1
}
1000f7b4:	e037883a 	mov	sp,fp
1000f7b8:	dfc00117 	ldw	ra,4(sp)
1000f7bc:	df000017 	ldw	fp,0(sp)
1000f7c0:	dec00204 	addi	sp,sp,8
1000f7c4:	f800283a 	ret

1000f7c8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000f7c8:	defffc04 	addi	sp,sp,-16
1000f7cc:	dfc00315 	stw	ra,12(sp)
1000f7d0:	df000215 	stw	fp,8(sp)
1000f7d4:	dc000115 	stw	r16,4(sp)
1000f7d8:	df000204 	addi	fp,sp,8
1000f7dc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000f7e0:	e0bffe17 	ldw	r2,-8(fp)
1000f7e4:	108000d0 	cmplti	r2,r2,3
1000f7e8:	1000111e 	bne	r2,zero,1000f830 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000f7ec:	04040074 	movhi	r16,4097
1000f7f0:	840afe04 	addi	r16,r16,11256
1000f7f4:	e0bffe17 	ldw	r2,-8(fp)
1000f7f8:	1009883a 	mov	r4,r2
1000f7fc:	01400304 	movi	r5,12
1000f800:	000c8300 	call	1000c830 <__mulsi3>
1000f804:	8085883a 	add	r2,r16,r2
1000f808:	10800204 	addi	r2,r2,8
1000f80c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000f810:	04040074 	movhi	r16,4097
1000f814:	840afe04 	addi	r16,r16,11256
1000f818:	e0bffe17 	ldw	r2,-8(fp)
1000f81c:	1009883a 	mov	r4,r2
1000f820:	01400304 	movi	r5,12
1000f824:	000c8300 	call	1000c830 <__mulsi3>
1000f828:	8085883a 	add	r2,r16,r2
1000f82c:	10000015 	stw	zero,0(r2)
  }
}
1000f830:	e6ffff04 	addi	sp,fp,-4
1000f834:	dfc00217 	ldw	ra,8(sp)
1000f838:	df000117 	ldw	fp,4(sp)
1000f83c:	dc000017 	ldw	r16,0(sp)
1000f840:	dec00304 	addi	sp,sp,12
1000f844:	f800283a 	ret

1000f848 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000f848:	defff904 	addi	sp,sp,-28
1000f84c:	df000615 	stw	fp,24(sp)
1000f850:	df000604 	addi	fp,sp,24
1000f854:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f858:	0005303a 	rdctl	r2,status
1000f85c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f860:	e0fffc17 	ldw	r3,-16(fp)
1000f864:	00bfff84 	movi	r2,-2
1000f868:	1884703a 	and	r2,r3,r2
1000f86c:	1001703a 	wrctl	status,r2
  
  return context;
1000f870:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000f874:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000f878:	d0a00c17 	ldw	r2,-32720(gp)
1000f87c:	10c000c4 	addi	r3,r2,3
1000f880:	00bfff04 	movi	r2,-4
1000f884:	1884703a 	and	r2,r3,r2
1000f888:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000f88c:	d0e00c17 	ldw	r3,-32720(gp)
1000f890:	e0bfff17 	ldw	r2,-4(fp)
1000f894:	1887883a 	add	r3,r3,r2
1000f898:	00860034 	movhi	r2,6144
1000f89c:	10800004 	addi	r2,r2,0
1000f8a0:	10c0062e 	bgeu	r2,r3,1000f8bc <sbrk+0x74>
1000f8a4:	e0bffa17 	ldw	r2,-24(fp)
1000f8a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f8ac:	e0bffd17 	ldw	r2,-12(fp)
1000f8b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000f8b4:	00bfffc4 	movi	r2,-1
1000f8b8:	00000b06 	br	1000f8e8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000f8bc:	d0a00c17 	ldw	r2,-32720(gp)
1000f8c0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000f8c4:	d0e00c17 	ldw	r3,-32720(gp)
1000f8c8:	e0bfff17 	ldw	r2,-4(fp)
1000f8cc:	1885883a 	add	r2,r3,r2
1000f8d0:	d0a00c15 	stw	r2,-32720(gp)
1000f8d4:	e0bffa17 	ldw	r2,-24(fp)
1000f8d8:	e0bffe15 	stw	r2,-8(fp)
1000f8dc:	e0bffe17 	ldw	r2,-8(fp)
1000f8e0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000f8e4:	e0bffb17 	ldw	r2,-20(fp)
} 
1000f8e8:	e037883a 	mov	sp,fp
1000f8ec:	df000017 	ldw	fp,0(sp)
1000f8f0:	dec00104 	addi	sp,sp,4
1000f8f4:	f800283a 	ret

1000f8f8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000f8f8:	defffd04 	addi	sp,sp,-12
1000f8fc:	dfc00215 	stw	ra,8(sp)
1000f900:	df000115 	stw	fp,4(sp)
1000f904:	df000104 	addi	fp,sp,4
1000f908:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000f90c:	e13fff17 	ldw	r4,-4(fp)
1000f910:	00106b80 	call	100106b8 <alt_busy_sleep>
}
1000f914:	e037883a 	mov	sp,fp
1000f918:	dfc00117 	ldw	ra,4(sp)
1000f91c:	df000017 	ldw	fp,0(sp)
1000f920:	dec00204 	addi	sp,sp,8
1000f924:	f800283a 	ret

1000f928 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f928:	defffe04 	addi	sp,sp,-8
1000f92c:	dfc00115 	stw	ra,4(sp)
1000f930:	df000015 	stw	fp,0(sp)
1000f934:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f938:	00840074 	movhi	r2,4097
1000f93c:	108f8104 	addi	r2,r2,15876
1000f940:	10800017 	ldw	r2,0(r2)
1000f944:	10000526 	beq	r2,zero,1000f95c <alt_get_errno+0x34>
1000f948:	00840074 	movhi	r2,4097
1000f94c:	108f8104 	addi	r2,r2,15876
1000f950:	10800017 	ldw	r2,0(r2)
1000f954:	103ee83a 	callr	r2
1000f958:	00000206 	br	1000f964 <alt_get_errno+0x3c>
1000f95c:	00840074 	movhi	r2,4097
1000f960:	10964804 	addi	r2,r2,22816
}
1000f964:	e037883a 	mov	sp,fp
1000f968:	dfc00117 	ldw	ra,4(sp)
1000f96c:	df000017 	ldw	fp,0(sp)
1000f970:	dec00204 	addi	sp,sp,8
1000f974:	f800283a 	ret

1000f978 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000f978:	defff904 	addi	sp,sp,-28
1000f97c:	dfc00615 	stw	ra,24(sp)
1000f980:	df000515 	stw	fp,20(sp)
1000f984:	df000504 	addi	fp,sp,20
1000f988:	e13ffd15 	stw	r4,-12(fp)
1000f98c:	e17ffe15 	stw	r5,-8(fp)
1000f990:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f994:	e0bffd17 	ldw	r2,-12(fp)
1000f998:	10000816 	blt	r2,zero,1000f9bc <write+0x44>
1000f99c:	e13ffd17 	ldw	r4,-12(fp)
1000f9a0:	01400304 	movi	r5,12
1000f9a4:	000c8300 	call	1000c830 <__mulsi3>
1000f9a8:	1007883a 	mov	r3,r2
1000f9ac:	00840074 	movhi	r2,4097
1000f9b0:	108afe04 	addi	r2,r2,11256
1000f9b4:	1885883a 	add	r2,r3,r2
1000f9b8:	00000106 	br	1000f9c0 <write+0x48>
1000f9bc:	0005883a 	mov	r2,zero
1000f9c0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f9c4:	e0bffb17 	ldw	r2,-20(fp)
1000f9c8:	10002126 	beq	r2,zero,1000fa50 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000f9cc:	e0bffb17 	ldw	r2,-20(fp)
1000f9d0:	10800217 	ldw	r2,8(r2)
1000f9d4:	108000cc 	andi	r2,r2,3
1000f9d8:	10001826 	beq	r2,zero,1000fa3c <write+0xc4>
1000f9dc:	e0bffb17 	ldw	r2,-20(fp)
1000f9e0:	10800017 	ldw	r2,0(r2)
1000f9e4:	10800617 	ldw	r2,24(r2)
1000f9e8:	10001426 	beq	r2,zero,1000fa3c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000f9ec:	e0bffb17 	ldw	r2,-20(fp)
1000f9f0:	10800017 	ldw	r2,0(r2)
1000f9f4:	10800617 	ldw	r2,24(r2)
1000f9f8:	e0ffff17 	ldw	r3,-4(fp)
1000f9fc:	e13ffb17 	ldw	r4,-20(fp)
1000fa00:	e17ffe17 	ldw	r5,-8(fp)
1000fa04:	180d883a 	mov	r6,r3
1000fa08:	103ee83a 	callr	r2
1000fa0c:	e0bffc15 	stw	r2,-16(fp)
1000fa10:	e0bffc17 	ldw	r2,-16(fp)
1000fa14:	1000070e 	bge	r2,zero,1000fa34 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000fa18:	000f9280 	call	1000f928 <alt_get_errno>
1000fa1c:	1007883a 	mov	r3,r2
1000fa20:	e0bffc17 	ldw	r2,-16(fp)
1000fa24:	0085c83a 	sub	r2,zero,r2
1000fa28:	18800015 	stw	r2,0(r3)
        return -1;
1000fa2c:	00bfffc4 	movi	r2,-1
1000fa30:	00000c06 	br	1000fa64 <write+0xec>
      }
      return rval;
1000fa34:	e0bffc17 	ldw	r2,-16(fp)
1000fa38:	00000a06 	br	1000fa64 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000fa3c:	000f9280 	call	1000f928 <alt_get_errno>
1000fa40:	1007883a 	mov	r3,r2
1000fa44:	00800344 	movi	r2,13
1000fa48:	18800015 	stw	r2,0(r3)
1000fa4c:	00000406 	br	1000fa60 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000fa50:	000f9280 	call	1000f928 <alt_get_errno>
1000fa54:	1007883a 	mov	r3,r2
1000fa58:	00801444 	movi	r2,81
1000fa5c:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000fa60:	00bfffc4 	movi	r2,-1
}
1000fa64:	e037883a 	mov	sp,fp
1000fa68:	dfc00117 	ldw	ra,4(sp)
1000fa6c:	df000017 	ldw	fp,0(sp)
1000fa70:	dec00204 	addi	sp,sp,8
1000fa74:	f800283a 	ret

1000fa78 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000fa78:	defffd04 	addi	sp,sp,-12
1000fa7c:	dfc00215 	stw	ra,8(sp)
1000fa80:	df000115 	stw	fp,4(sp)
1000fa84:	df000104 	addi	fp,sp,4
1000fa88:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000fa8c:	e13fff17 	ldw	r4,-4(fp)
1000fa90:	01440074 	movhi	r5,4097
1000fa94:	294f7e04 	addi	r5,r5,15864
1000fa98:	001087c0 	call	1001087c <alt_dev_llist_insert>
}
1000fa9c:	e037883a 	mov	sp,fp
1000faa0:	dfc00117 	ldw	ra,4(sp)
1000faa4:	df000017 	ldw	fp,0(sp)
1000faa8:	dec00204 	addi	sp,sp,8
1000faac:	f800283a 	ret

1000fab0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000fab0:	defffd04 	addi	sp,sp,-12
1000fab4:	dfc00215 	stw	ra,8(sp)
1000fab8:	df000115 	stw	fp,4(sp)
1000fabc:	df000104 	addi	fp,sp,4
1000fac0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000fac4:	001125c0 	call	1001125c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000fac8:	00800044 	movi	r2,1
1000facc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000fad0:	e037883a 	mov	sp,fp
1000fad4:	dfc00117 	ldw	ra,4(sp)
1000fad8:	df000017 	ldw	fp,0(sp)
1000fadc:	dec00204 	addi	sp,sp,8
1000fae0:	f800283a 	ret

1000fae4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000fae4:	defffe04 	addi	sp,sp,-8
1000fae8:	dfc00115 	stw	ra,4(sp)
1000faec:	df000015 	stw	fp,0(sp)
1000faf0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000faf4:	01040074 	movhi	r4,4097
1000faf8:	210b6804 	addi	r4,r4,11680
1000fafc:	000b883a 	mov	r5,zero
1000fb00:	01800144 	movi	r6,5
1000fb04:	000fc900 	call	1000fc90 <altera_avalon_jtag_uart_init>
1000fb08:	01040074 	movhi	r4,4097
1000fb0c:	210b5e04 	addi	r4,r4,11640
1000fb10:	000fa780 	call	1000fa78 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000fb14:	0001883a 	nop
}
1000fb18:	e037883a 	mov	sp,fp
1000fb1c:	dfc00117 	ldw	ra,4(sp)
1000fb20:	df000017 	ldw	fp,0(sp)
1000fb24:	dec00204 	addi	sp,sp,8
1000fb28:	f800283a 	ret

1000fb2c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000fb2c:	defffa04 	addi	sp,sp,-24
1000fb30:	dfc00515 	stw	ra,20(sp)
1000fb34:	df000415 	stw	fp,16(sp)
1000fb38:	df000404 	addi	fp,sp,16
1000fb3c:	e13ffd15 	stw	r4,-12(fp)
1000fb40:	e17ffe15 	stw	r5,-8(fp)
1000fb44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fb48:	e0bffd17 	ldw	r2,-12(fp)
1000fb4c:	10800017 	ldw	r2,0(r2)
1000fb50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000fb54:	e0bffc17 	ldw	r2,-16(fp)
1000fb58:	10c00a04 	addi	r3,r2,40
1000fb5c:	e0bffd17 	ldw	r2,-12(fp)
1000fb60:	10800217 	ldw	r2,8(r2)
1000fb64:	1809883a 	mov	r4,r3
1000fb68:	e17ffe17 	ldw	r5,-8(fp)
1000fb6c:	e1bfff17 	ldw	r6,-4(fp)
1000fb70:	100f883a 	mov	r7,r2
1000fb74:	00101540 	call	10010154 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000fb78:	e037883a 	mov	sp,fp
1000fb7c:	dfc00117 	ldw	ra,4(sp)
1000fb80:	df000017 	ldw	fp,0(sp)
1000fb84:	dec00204 	addi	sp,sp,8
1000fb88:	f800283a 	ret

1000fb8c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000fb8c:	defffa04 	addi	sp,sp,-24
1000fb90:	dfc00515 	stw	ra,20(sp)
1000fb94:	df000415 	stw	fp,16(sp)
1000fb98:	df000404 	addi	fp,sp,16
1000fb9c:	e13ffd15 	stw	r4,-12(fp)
1000fba0:	e17ffe15 	stw	r5,-8(fp)
1000fba4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fba8:	e0bffd17 	ldw	r2,-12(fp)
1000fbac:	10800017 	ldw	r2,0(r2)
1000fbb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000fbb4:	e0bffc17 	ldw	r2,-16(fp)
1000fbb8:	10c00a04 	addi	r3,r2,40
1000fbbc:	e0bffd17 	ldw	r2,-12(fp)
1000fbc0:	10800217 	ldw	r2,8(r2)
1000fbc4:	1809883a 	mov	r4,r3
1000fbc8:	e17ffe17 	ldw	r5,-8(fp)
1000fbcc:	e1bfff17 	ldw	r6,-4(fp)
1000fbd0:	100f883a 	mov	r7,r2
1000fbd4:	00103600 	call	10010360 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000fbd8:	e037883a 	mov	sp,fp
1000fbdc:	dfc00117 	ldw	ra,4(sp)
1000fbe0:	df000017 	ldw	fp,0(sp)
1000fbe4:	dec00204 	addi	sp,sp,8
1000fbe8:	f800283a 	ret

1000fbec <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000fbec:	defffc04 	addi	sp,sp,-16
1000fbf0:	dfc00315 	stw	ra,12(sp)
1000fbf4:	df000215 	stw	fp,8(sp)
1000fbf8:	df000204 	addi	fp,sp,8
1000fbfc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000fc00:	e0bfff17 	ldw	r2,-4(fp)
1000fc04:	10800017 	ldw	r2,0(r2)
1000fc08:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000fc0c:	e0bffe17 	ldw	r2,-8(fp)
1000fc10:	10c00a04 	addi	r3,r2,40
1000fc14:	e0bfff17 	ldw	r2,-4(fp)
1000fc18:	10800217 	ldw	r2,8(r2)
1000fc1c:	1809883a 	mov	r4,r3
1000fc20:	100b883a 	mov	r5,r2
1000fc24:	00100000 	call	10010000 <altera_avalon_jtag_uart_close>
}
1000fc28:	e037883a 	mov	sp,fp
1000fc2c:	dfc00117 	ldw	ra,4(sp)
1000fc30:	df000017 	ldw	fp,0(sp)
1000fc34:	dec00204 	addi	sp,sp,8
1000fc38:	f800283a 	ret

1000fc3c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000fc3c:	defffa04 	addi	sp,sp,-24
1000fc40:	dfc00515 	stw	ra,20(sp)
1000fc44:	df000415 	stw	fp,16(sp)
1000fc48:	df000404 	addi	fp,sp,16
1000fc4c:	e13ffd15 	stw	r4,-12(fp)
1000fc50:	e17ffe15 	stw	r5,-8(fp)
1000fc54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000fc58:	e0bffd17 	ldw	r2,-12(fp)
1000fc5c:	10800017 	ldw	r2,0(r2)
1000fc60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000fc64:	e0bffc17 	ldw	r2,-16(fp)
1000fc68:	10800a04 	addi	r2,r2,40
1000fc6c:	1009883a 	mov	r4,r2
1000fc70:	e17ffe17 	ldw	r5,-8(fp)
1000fc74:	e1bfff17 	ldw	r6,-4(fp)
1000fc78:	00100680 	call	10010068 <altera_avalon_jtag_uart_ioctl>
}
1000fc7c:	e037883a 	mov	sp,fp
1000fc80:	dfc00117 	ldw	ra,4(sp)
1000fc84:	df000017 	ldw	fp,0(sp)
1000fc88:	dec00204 	addi	sp,sp,8
1000fc8c:	f800283a 	ret

1000fc90 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000fc90:	defffa04 	addi	sp,sp,-24
1000fc94:	dfc00515 	stw	ra,20(sp)
1000fc98:	df000415 	stw	fp,16(sp)
1000fc9c:	df000404 	addi	fp,sp,16
1000fca0:	e13ffd15 	stw	r4,-12(fp)
1000fca4:	e17ffe15 	stw	r5,-8(fp)
1000fca8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fcac:	e0bffd17 	ldw	r2,-12(fp)
1000fcb0:	00c00044 	movi	r3,1
1000fcb4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000fcb8:	e0bffd17 	ldw	r2,-12(fp)
1000fcbc:	10800017 	ldw	r2,0(r2)
1000fcc0:	10800104 	addi	r2,r2,4
1000fcc4:	1007883a 	mov	r3,r2
1000fcc8:	e0bffd17 	ldw	r2,-12(fp)
1000fccc:	10800817 	ldw	r2,32(r2)
1000fcd0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000fcd4:	e0fffe17 	ldw	r3,-8(fp)
1000fcd8:	e0bfff17 	ldw	r2,-4(fp)
1000fcdc:	d8000015 	stw	zero,0(sp)
1000fce0:	1809883a 	mov	r4,r3
1000fce4:	100b883a 	mov	r5,r2
1000fce8:	01840074 	movhi	r6,4097
1000fcec:	31bf5504 	addi	r6,r6,-684
1000fcf0:	e1fffd17 	ldw	r7,-12(fp)
1000fcf4:	00109f40 	call	100109f4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000fcf8:	e0bffd17 	ldw	r2,-12(fp)
1000fcfc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000fd00:	e0bffd17 	ldw	r2,-12(fp)
1000fd04:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000fd08:	00840074 	movhi	r2,4097
1000fd0c:	10964d04 	addi	r2,r2,22836
1000fd10:	10800017 	ldw	r2,0(r2)
1000fd14:	1809883a 	mov	r4,r3
1000fd18:	100b883a 	mov	r5,r2
1000fd1c:	01840074 	movhi	r6,4097
1000fd20:	31bfd604 	addi	r6,r6,-168
1000fd24:	e1fffd17 	ldw	r7,-12(fp)
1000fd28:	00105780 	call	10010578 <alt_alarm_start>
1000fd2c:	1000040e 	bge	r2,zero,1000fd40 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000fd30:	e0fffd17 	ldw	r3,-12(fp)
1000fd34:	00a00034 	movhi	r2,32768
1000fd38:	10bfffc4 	addi	r2,r2,-1
1000fd3c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000fd40:	e037883a 	mov	sp,fp
1000fd44:	dfc00117 	ldw	ra,4(sp)
1000fd48:	df000017 	ldw	fp,0(sp)
1000fd4c:	dec00204 	addi	sp,sp,8
1000fd50:	f800283a 	ret

1000fd54 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000fd54:	defff804 	addi	sp,sp,-32
1000fd58:	df000715 	stw	fp,28(sp)
1000fd5c:	df000704 	addi	fp,sp,28
1000fd60:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000fd64:	e0bfff17 	ldw	r2,-4(fp)
1000fd68:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000fd6c:	e0bffb17 	ldw	r2,-20(fp)
1000fd70:	10800017 	ldw	r2,0(r2)
1000fd74:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000fd78:	e0bffc17 	ldw	r2,-16(fp)
1000fd7c:	10800104 	addi	r2,r2,4
1000fd80:	10800037 	ldwio	r2,0(r2)
1000fd84:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000fd88:	e0bffd17 	ldw	r2,-12(fp)
1000fd8c:	1080c00c 	andi	r2,r2,768
1000fd90:	1000011e 	bne	r2,zero,1000fd98 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000fd94:	00006c06 	br	1000ff48 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000fd98:	e0bffd17 	ldw	r2,-12(fp)
1000fd9c:	1080400c 	andi	r2,r2,256
1000fda0:	10003426 	beq	r2,zero,1000fe74 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000fda4:	00800074 	movhi	r2,1
1000fda8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fdac:	e0bffb17 	ldw	r2,-20(fp)
1000fdb0:	10800a17 	ldw	r2,40(r2)
1000fdb4:	10800044 	addi	r2,r2,1
1000fdb8:	1081ffcc 	andi	r2,r2,2047
1000fdbc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000fdc0:	e0bffb17 	ldw	r2,-20(fp)
1000fdc4:	10c00b17 	ldw	r3,44(r2)
1000fdc8:	e0bffe17 	ldw	r2,-8(fp)
1000fdcc:	1880011e 	bne	r3,r2,1000fdd4 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000fdd0:	00001606 	br	1000fe2c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000fdd4:	e0bffc17 	ldw	r2,-16(fp)
1000fdd8:	10800037 	ldwio	r2,0(r2)
1000fddc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000fde0:	e0bff917 	ldw	r2,-28(fp)
1000fde4:	10a0000c 	andi	r2,r2,32768
1000fde8:	1000011e 	bne	r2,zero,1000fdf0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000fdec:	00000f06 	br	1000fe2c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000fdf0:	e0bffb17 	ldw	r2,-20(fp)
1000fdf4:	10800a17 	ldw	r2,40(r2)
1000fdf8:	e0fff917 	ldw	r3,-28(fp)
1000fdfc:	1809883a 	mov	r4,r3
1000fe00:	e0fffb17 	ldw	r3,-20(fp)
1000fe04:	1885883a 	add	r2,r3,r2
1000fe08:	10800e04 	addi	r2,r2,56
1000fe0c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fe10:	e0bffb17 	ldw	r2,-20(fp)
1000fe14:	10800a17 	ldw	r2,40(r2)
1000fe18:	10800044 	addi	r2,r2,1
1000fe1c:	10c1ffcc 	andi	r3,r2,2047
1000fe20:	e0bffb17 	ldw	r2,-20(fp)
1000fe24:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000fe28:	003fe006 	br	1000fdac <__alt_data_end+0xf800fdac>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000fe2c:	e0bff917 	ldw	r2,-28(fp)
1000fe30:	10bfffec 	andhi	r2,r2,65535
1000fe34:	10000f26 	beq	r2,zero,1000fe74 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fe38:	e0bffb17 	ldw	r2,-20(fp)
1000fe3c:	10c00817 	ldw	r3,32(r2)
1000fe40:	00bfff84 	movi	r2,-2
1000fe44:	1886703a 	and	r3,r3,r2
1000fe48:	e0bffb17 	ldw	r2,-20(fp)
1000fe4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000fe50:	e0bffc17 	ldw	r2,-16(fp)
1000fe54:	10800104 	addi	r2,r2,4
1000fe58:	1007883a 	mov	r3,r2
1000fe5c:	e0bffb17 	ldw	r2,-20(fp)
1000fe60:	10800817 	ldw	r2,32(r2)
1000fe64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000fe68:	e0bffc17 	ldw	r2,-16(fp)
1000fe6c:	10800104 	addi	r2,r2,4
1000fe70:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000fe74:	e0bffd17 	ldw	r2,-12(fp)
1000fe78:	1080800c 	andi	r2,r2,512
1000fe7c:	10003126 	beq	r2,zero,1000ff44 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000fe80:	e0bffd17 	ldw	r2,-12(fp)
1000fe84:	1004d43a 	srli	r2,r2,16
1000fe88:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000fe8c:	00001406 	br	1000fee0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000fe90:	e0bffc17 	ldw	r2,-16(fp)
1000fe94:	e0fffb17 	ldw	r3,-20(fp)
1000fe98:	18c00d17 	ldw	r3,52(r3)
1000fe9c:	e13ffb17 	ldw	r4,-20(fp)
1000fea0:	20c7883a 	add	r3,r4,r3
1000fea4:	18c20e04 	addi	r3,r3,2104
1000fea8:	18c00003 	ldbu	r3,0(r3)
1000feac:	18c03fcc 	andi	r3,r3,255
1000feb0:	18c0201c 	xori	r3,r3,128
1000feb4:	18ffe004 	addi	r3,r3,-128
1000feb8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000febc:	e0bffb17 	ldw	r2,-20(fp)
1000fec0:	10800d17 	ldw	r2,52(r2)
1000fec4:	10800044 	addi	r2,r2,1
1000fec8:	10c1ffcc 	andi	r3,r2,2047
1000fecc:	e0bffb17 	ldw	r2,-20(fp)
1000fed0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000fed4:	e0bffa17 	ldw	r2,-24(fp)
1000fed8:	10bfffc4 	addi	r2,r2,-1
1000fedc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000fee0:	e0bffa17 	ldw	r2,-24(fp)
1000fee4:	10000526 	beq	r2,zero,1000fefc <altera_avalon_jtag_uart_irq+0x1a8>
1000fee8:	e0bffb17 	ldw	r2,-20(fp)
1000feec:	10c00d17 	ldw	r3,52(r2)
1000fef0:	e0bffb17 	ldw	r2,-20(fp)
1000fef4:	10800c17 	ldw	r2,48(r2)
1000fef8:	18bfe51e 	bne	r3,r2,1000fe90 <__alt_data_end+0xf800fe90>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000fefc:	e0bffa17 	ldw	r2,-24(fp)
1000ff00:	10001026 	beq	r2,zero,1000ff44 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000ff04:	e0bffb17 	ldw	r2,-20(fp)
1000ff08:	10c00817 	ldw	r3,32(r2)
1000ff0c:	00bfff44 	movi	r2,-3
1000ff10:	1886703a 	and	r3,r3,r2
1000ff14:	e0bffb17 	ldw	r2,-20(fp)
1000ff18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000ff1c:	e0bffb17 	ldw	r2,-20(fp)
1000ff20:	10800017 	ldw	r2,0(r2)
1000ff24:	10800104 	addi	r2,r2,4
1000ff28:	1007883a 	mov	r3,r2
1000ff2c:	e0bffb17 	ldw	r2,-20(fp)
1000ff30:	10800817 	ldw	r2,32(r2)
1000ff34:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000ff38:	e0bffc17 	ldw	r2,-16(fp)
1000ff3c:	10800104 	addi	r2,r2,4
1000ff40:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000ff44:	003f8c06 	br	1000fd78 <__alt_data_end+0xf800fd78>
}
1000ff48:	e037883a 	mov	sp,fp
1000ff4c:	df000017 	ldw	fp,0(sp)
1000ff50:	dec00104 	addi	sp,sp,4
1000ff54:	f800283a 	ret

1000ff58 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000ff58:	defff804 	addi	sp,sp,-32
1000ff5c:	df000715 	stw	fp,28(sp)
1000ff60:	df000704 	addi	fp,sp,28
1000ff64:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000ff68:	e0bffb17 	ldw	r2,-20(fp)
1000ff6c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000ff70:	e0bff917 	ldw	r2,-28(fp)
1000ff74:	10800017 	ldw	r2,0(r2)
1000ff78:	10800104 	addi	r2,r2,4
1000ff7c:	10800037 	ldwio	r2,0(r2)
1000ff80:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000ff84:	e0bffa17 	ldw	r2,-24(fp)
1000ff88:	1081000c 	andi	r2,r2,1024
1000ff8c:	10000b26 	beq	r2,zero,1000ffbc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000ff90:	e0bff917 	ldw	r2,-28(fp)
1000ff94:	10800017 	ldw	r2,0(r2)
1000ff98:	10800104 	addi	r2,r2,4
1000ff9c:	1007883a 	mov	r3,r2
1000ffa0:	e0bff917 	ldw	r2,-28(fp)
1000ffa4:	10800817 	ldw	r2,32(r2)
1000ffa8:	10810014 	ori	r2,r2,1024
1000ffac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000ffb0:	e0bff917 	ldw	r2,-28(fp)
1000ffb4:	10000915 	stw	zero,36(r2)
1000ffb8:	00000a06 	br	1000ffe4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000ffbc:	e0bff917 	ldw	r2,-28(fp)
1000ffc0:	10c00917 	ldw	r3,36(r2)
1000ffc4:	00a00034 	movhi	r2,32768
1000ffc8:	10bfff04 	addi	r2,r2,-4
1000ffcc:	10c00536 	bltu	r2,r3,1000ffe4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000ffd0:	e0bff917 	ldw	r2,-28(fp)
1000ffd4:	10800917 	ldw	r2,36(r2)
1000ffd8:	10c00044 	addi	r3,r2,1
1000ffdc:	e0bff917 	ldw	r2,-28(fp)
1000ffe0:	10c00915 	stw	r3,36(r2)
1000ffe4:	00840074 	movhi	r2,4097
1000ffe8:	10964d04 	addi	r2,r2,22836
1000ffec:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000fff0:	e037883a 	mov	sp,fp
1000fff4:	df000017 	ldw	fp,0(sp)
1000fff8:	dec00104 	addi	sp,sp,4
1000fffc:	f800283a 	ret

10010000 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10010000:	defffd04 	addi	sp,sp,-12
10010004:	df000215 	stw	fp,8(sp)
10010008:	df000204 	addi	fp,sp,8
1001000c:	e13ffe15 	stw	r4,-8(fp)
10010010:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10010014:	00000506 	br	1001002c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10010018:	e0bfff17 	ldw	r2,-4(fp)
1001001c:	1090000c 	andi	r2,r2,16384
10010020:	10000226 	beq	r2,zero,1001002c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10010024:	00bffd44 	movi	r2,-11
10010028:	00000b06 	br	10010058 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1001002c:	e0bffe17 	ldw	r2,-8(fp)
10010030:	10c00d17 	ldw	r3,52(r2)
10010034:	e0bffe17 	ldw	r2,-8(fp)
10010038:	10800c17 	ldw	r2,48(r2)
1001003c:	18800526 	beq	r3,r2,10010054 <altera_avalon_jtag_uart_close+0x54>
10010040:	e0bffe17 	ldw	r2,-8(fp)
10010044:	10c00917 	ldw	r3,36(r2)
10010048:	e0bffe17 	ldw	r2,-8(fp)
1001004c:	10800117 	ldw	r2,4(r2)
10010050:	18bff136 	bltu	r3,r2,10010018 <__alt_data_end+0xf8010018>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10010054:	0005883a 	mov	r2,zero
}
10010058:	e037883a 	mov	sp,fp
1001005c:	df000017 	ldw	fp,0(sp)
10010060:	dec00104 	addi	sp,sp,4
10010064:	f800283a 	ret

10010068 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10010068:	defffa04 	addi	sp,sp,-24
1001006c:	df000515 	stw	fp,20(sp)
10010070:	df000504 	addi	fp,sp,20
10010074:	e13ffd15 	stw	r4,-12(fp)
10010078:	e17ffe15 	stw	r5,-8(fp)
1001007c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10010080:	00bff9c4 	movi	r2,-25
10010084:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10010088:	e0bffe17 	ldw	r2,-8(fp)
1001008c:	10da8060 	cmpeqi	r3,r2,27137
10010090:	1800031e 	bne	r3,zero,100100a0 <altera_avalon_jtag_uart_ioctl+0x38>
10010094:	109a80a0 	cmpeqi	r2,r2,27138
10010098:	1000191e 	bne	r2,zero,10010100 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1001009c:	00002806 	br	10010140 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100100a0:	e0bffd17 	ldw	r2,-12(fp)
100100a4:	10c00117 	ldw	r3,4(r2)
100100a8:	00a00034 	movhi	r2,32768
100100ac:	10bfffc4 	addi	r2,r2,-1
100100b0:	18801226 	beq	r3,r2,100100fc <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
100100b4:	e0bfff17 	ldw	r2,-4(fp)
100100b8:	10800017 	ldw	r2,0(r2)
100100bc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100100c0:	e0bffc17 	ldw	r2,-16(fp)
100100c4:	10800090 	cmplti	r2,r2,2
100100c8:	1000061e 	bne	r2,zero,100100e4 <altera_avalon_jtag_uart_ioctl+0x7c>
100100cc:	e0fffc17 	ldw	r3,-16(fp)
100100d0:	00a00034 	movhi	r2,32768
100100d4:	10bfffc4 	addi	r2,r2,-1
100100d8:	18800226 	beq	r3,r2,100100e4 <altera_avalon_jtag_uart_ioctl+0x7c>
100100dc:	e0bffc17 	ldw	r2,-16(fp)
100100e0:	00000206 	br	100100ec <altera_avalon_jtag_uart_ioctl+0x84>
100100e4:	00a00034 	movhi	r2,32768
100100e8:	10bfff84 	addi	r2,r2,-2
100100ec:	e0fffd17 	ldw	r3,-12(fp)
100100f0:	18800115 	stw	r2,4(r3)
      rc = 0;
100100f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100100f8:	00001106 	br	10010140 <altera_avalon_jtag_uart_ioctl+0xd8>
100100fc:	00001006 	br	10010140 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10010100:	e0bffd17 	ldw	r2,-12(fp)
10010104:	10c00117 	ldw	r3,4(r2)
10010108:	00a00034 	movhi	r2,32768
1001010c:	10bfffc4 	addi	r2,r2,-1
10010110:	18800a26 	beq	r3,r2,1001013c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10010114:	e0bffd17 	ldw	r2,-12(fp)
10010118:	10c00917 	ldw	r3,36(r2)
1001011c:	e0bffd17 	ldw	r2,-12(fp)
10010120:	10800117 	ldw	r2,4(r2)
10010124:	1885803a 	cmpltu	r2,r3,r2
10010128:	10c03fcc 	andi	r3,r2,255
1001012c:	e0bfff17 	ldw	r2,-4(fp)
10010130:	10c00015 	stw	r3,0(r2)
      rc = 0;
10010134:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10010138:	00000006 	br	1001013c <altera_avalon_jtag_uart_ioctl+0xd4>
1001013c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10010140:	e0bffb17 	ldw	r2,-20(fp)
}
10010144:	e037883a 	mov	sp,fp
10010148:	df000017 	ldw	fp,0(sp)
1001014c:	dec00104 	addi	sp,sp,4
10010150:	f800283a 	ret

10010154 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10010154:	defff304 	addi	sp,sp,-52
10010158:	dfc00c15 	stw	ra,48(sp)
1001015c:	df000b15 	stw	fp,44(sp)
10010160:	df000b04 	addi	fp,sp,44
10010164:	e13ffc15 	stw	r4,-16(fp)
10010168:	e17ffd15 	stw	r5,-12(fp)
1001016c:	e1bffe15 	stw	r6,-8(fp)
10010170:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10010174:	e0bffd17 	ldw	r2,-12(fp)
10010178:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1001017c:	00004906 	br	100102a4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10010180:	e0bffc17 	ldw	r2,-16(fp)
10010184:	10800a17 	ldw	r2,40(r2)
10010188:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1001018c:	e0bffc17 	ldw	r2,-16(fp)
10010190:	10800b17 	ldw	r2,44(r2)
10010194:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10010198:	e0fff717 	ldw	r3,-36(fp)
1001019c:	e0bff817 	ldw	r2,-32(fp)
100101a0:	18800536 	bltu	r3,r2,100101b8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100101a4:	e0fff717 	ldw	r3,-36(fp)
100101a8:	e0bff817 	ldw	r2,-32(fp)
100101ac:	1885c83a 	sub	r2,r3,r2
100101b0:	e0bff615 	stw	r2,-40(fp)
100101b4:	00000406 	br	100101c8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100101b8:	00c20004 	movi	r3,2048
100101bc:	e0bff817 	ldw	r2,-32(fp)
100101c0:	1885c83a 	sub	r2,r3,r2
100101c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100101c8:	e0bff617 	ldw	r2,-40(fp)
100101cc:	1000011e 	bne	r2,zero,100101d4 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
100101d0:	00001d06 	br	10010248 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
100101d4:	e0fffe17 	ldw	r3,-8(fp)
100101d8:	e0bff617 	ldw	r2,-40(fp)
100101dc:	1880022e 	bgeu	r3,r2,100101e8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
100101e0:	e0bffe17 	ldw	r2,-8(fp)
100101e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100101e8:	e0bff817 	ldw	r2,-32(fp)
100101ec:	10800e04 	addi	r2,r2,56
100101f0:	e0fffc17 	ldw	r3,-16(fp)
100101f4:	1885883a 	add	r2,r3,r2
100101f8:	e13ff517 	ldw	r4,-44(fp)
100101fc:	100b883a 	mov	r5,r2
10010200:	e1bff617 	ldw	r6,-40(fp)
10010204:	0007eac0 	call	10007eac <memcpy>
      ptr   += n;
10010208:	e0fff517 	ldw	r3,-44(fp)
1001020c:	e0bff617 	ldw	r2,-40(fp)
10010210:	1885883a 	add	r2,r3,r2
10010214:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10010218:	e0fffe17 	ldw	r3,-8(fp)
1001021c:	e0bff617 	ldw	r2,-40(fp)
10010220:	1885c83a 	sub	r2,r3,r2
10010224:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010228:	e0fff817 	ldw	r3,-32(fp)
1001022c:	e0bff617 	ldw	r2,-40(fp)
10010230:	1885883a 	add	r2,r3,r2
10010234:	10c1ffcc 	andi	r3,r2,2047
10010238:	e0bffc17 	ldw	r2,-16(fp)
1001023c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010240:	e0bffe17 	ldw	r2,-8(fp)
10010244:	00bfce16 	blt	zero,r2,10010180 <__alt_data_end+0xf8010180>

    /* If we read any data then return it */
    if (ptr != buffer)
10010248:	e0fff517 	ldw	r3,-44(fp)
1001024c:	e0bffd17 	ldw	r2,-12(fp)
10010250:	18800126 	beq	r3,r2,10010258 <altera_avalon_jtag_uart_read+0x104>
      break;
10010254:	00001506 	br	100102ac <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010258:	e0bfff17 	ldw	r2,-4(fp)
1001025c:	1090000c 	andi	r2,r2,16384
10010260:	10000126 	beq	r2,zero,10010268 <altera_avalon_jtag_uart_read+0x114>
      break;
10010264:	00001106 	br	100102ac <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010268:	0001883a 	nop
1001026c:	e0bffc17 	ldw	r2,-16(fp)
10010270:	10c00a17 	ldw	r3,40(r2)
10010274:	e0bff717 	ldw	r2,-36(fp)
10010278:	1880051e 	bne	r3,r2,10010290 <altera_avalon_jtag_uart_read+0x13c>
1001027c:	e0bffc17 	ldw	r2,-16(fp)
10010280:	10c00917 	ldw	r3,36(r2)
10010284:	e0bffc17 	ldw	r2,-16(fp)
10010288:	10800117 	ldw	r2,4(r2)
1001028c:	18bff736 	bltu	r3,r2,1001026c <__alt_data_end+0xf801026c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010290:	e0bffc17 	ldw	r2,-16(fp)
10010294:	10c00a17 	ldw	r3,40(r2)
10010298:	e0bff717 	ldw	r2,-36(fp)
1001029c:	1880011e 	bne	r3,r2,100102a4 <altera_avalon_jtag_uart_read+0x150>
      break;
100102a0:	00000206 	br	100102ac <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100102a4:	e0bffe17 	ldw	r2,-8(fp)
100102a8:	00bfb516 	blt	zero,r2,10010180 <__alt_data_end+0xf8010180>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100102ac:	e0fff517 	ldw	r3,-44(fp)
100102b0:	e0bffd17 	ldw	r2,-12(fp)
100102b4:	18801826 	beq	r3,r2,10010318 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100102b8:	0005303a 	rdctl	r2,status
100102bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100102c0:	e0fffa17 	ldw	r3,-24(fp)
100102c4:	00bfff84 	movi	r2,-2
100102c8:	1884703a 	and	r2,r3,r2
100102cc:	1001703a 	wrctl	status,r2
  
  return context;
100102d0:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100102d4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100102d8:	e0bffc17 	ldw	r2,-16(fp)
100102dc:	10800817 	ldw	r2,32(r2)
100102e0:	10c00054 	ori	r3,r2,1
100102e4:	e0bffc17 	ldw	r2,-16(fp)
100102e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100102ec:	e0bffc17 	ldw	r2,-16(fp)
100102f0:	10800017 	ldw	r2,0(r2)
100102f4:	10800104 	addi	r2,r2,4
100102f8:	1007883a 	mov	r3,r2
100102fc:	e0bffc17 	ldw	r2,-16(fp)
10010300:	10800817 	ldw	r2,32(r2)
10010304:	18800035 	stwio	r2,0(r3)
10010308:	e0bff917 	ldw	r2,-28(fp)
1001030c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010310:	e0bffb17 	ldw	r2,-20(fp)
10010314:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10010318:	e0fff517 	ldw	r3,-44(fp)
1001031c:	e0bffd17 	ldw	r2,-12(fp)
10010320:	18800426 	beq	r3,r2,10010334 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10010324:	e0fff517 	ldw	r3,-44(fp)
10010328:	e0bffd17 	ldw	r2,-12(fp)
1001032c:	1885c83a 	sub	r2,r3,r2
10010330:	00000606 	br	1001034c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10010334:	e0bfff17 	ldw	r2,-4(fp)
10010338:	1090000c 	andi	r2,r2,16384
1001033c:	10000226 	beq	r2,zero,10010348 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10010340:	00bffd44 	movi	r2,-11
10010344:	00000106 	br	1001034c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10010348:	00bffec4 	movi	r2,-5
}
1001034c:	e037883a 	mov	sp,fp
10010350:	dfc00117 	ldw	ra,4(sp)
10010354:	df000017 	ldw	fp,0(sp)
10010358:	dec00204 	addi	sp,sp,8
1001035c:	f800283a 	ret

10010360 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010360:	defff304 	addi	sp,sp,-52
10010364:	dfc00c15 	stw	ra,48(sp)
10010368:	df000b15 	stw	fp,44(sp)
1001036c:	df000b04 	addi	fp,sp,44
10010370:	e13ffc15 	stw	r4,-16(fp)
10010374:	e17ffd15 	stw	r5,-12(fp)
10010378:	e1bffe15 	stw	r6,-8(fp)
1001037c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10010380:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10010384:	e0bffd17 	ldw	r2,-12(fp)
10010388:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1001038c:	00003806 	br	10010470 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10010390:	e0bffc17 	ldw	r2,-16(fp)
10010394:	10800c17 	ldw	r2,48(r2)
10010398:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1001039c:	e0bffc17 	ldw	r2,-16(fp)
100103a0:	10800d17 	ldw	r2,52(r2)
100103a4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100103a8:	e0fff817 	ldw	r3,-32(fp)
100103ac:	e0bff517 	ldw	r2,-44(fp)
100103b0:	1880062e 	bgeu	r3,r2,100103cc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100103b4:	e0fff517 	ldw	r3,-44(fp)
100103b8:	e0bff817 	ldw	r2,-32(fp)
100103bc:	1885c83a 	sub	r2,r3,r2
100103c0:	10bfffc4 	addi	r2,r2,-1
100103c4:	e0bff615 	stw	r2,-40(fp)
100103c8:	00000b06 	br	100103f8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100103cc:	e0bff517 	ldw	r2,-44(fp)
100103d0:	10000526 	beq	r2,zero,100103e8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100103d4:	00c20004 	movi	r3,2048
100103d8:	e0bff817 	ldw	r2,-32(fp)
100103dc:	1885c83a 	sub	r2,r3,r2
100103e0:	e0bff615 	stw	r2,-40(fp)
100103e4:	00000406 	br	100103f8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100103e8:	00c1ffc4 	movi	r3,2047
100103ec:	e0bff817 	ldw	r2,-32(fp)
100103f0:	1885c83a 	sub	r2,r3,r2
100103f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100103f8:	e0bff617 	ldw	r2,-40(fp)
100103fc:	1000011e 	bne	r2,zero,10010404 <altera_avalon_jtag_uart_write+0xa4>
        break;
10010400:	00001d06 	br	10010478 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
10010404:	e0fffe17 	ldw	r3,-8(fp)
10010408:	e0bff617 	ldw	r2,-40(fp)
1001040c:	1880022e 	bgeu	r3,r2,10010418 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10010410:	e0bffe17 	ldw	r2,-8(fp)
10010414:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10010418:	e0bff817 	ldw	r2,-32(fp)
1001041c:	10820e04 	addi	r2,r2,2104
10010420:	e0fffc17 	ldw	r3,-16(fp)
10010424:	1885883a 	add	r2,r3,r2
10010428:	1009883a 	mov	r4,r2
1001042c:	e17ffd17 	ldw	r5,-12(fp)
10010430:	e1bff617 	ldw	r6,-40(fp)
10010434:	0007eac0 	call	10007eac <memcpy>
      ptr   += n;
10010438:	e0fffd17 	ldw	r3,-12(fp)
1001043c:	e0bff617 	ldw	r2,-40(fp)
10010440:	1885883a 	add	r2,r3,r2
10010444:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10010448:	e0fffe17 	ldw	r3,-8(fp)
1001044c:	e0bff617 	ldw	r2,-40(fp)
10010450:	1885c83a 	sub	r2,r3,r2
10010454:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010458:	e0fff817 	ldw	r3,-32(fp)
1001045c:	e0bff617 	ldw	r2,-40(fp)
10010460:	1885883a 	add	r2,r3,r2
10010464:	10c1ffcc 	andi	r3,r2,2047
10010468:	e0bffc17 	ldw	r2,-16(fp)
1001046c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010470:	e0bffe17 	ldw	r2,-8(fp)
10010474:	00bfc616 	blt	zero,r2,10010390 <__alt_data_end+0xf8010390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010478:	0005303a 	rdctl	r2,status
1001047c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010480:	e0fffa17 	ldw	r3,-24(fp)
10010484:	00bfff84 	movi	r2,-2
10010488:	1884703a 	and	r2,r3,r2
1001048c:	1001703a 	wrctl	status,r2
  
  return context;
10010490:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10010494:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010498:	e0bffc17 	ldw	r2,-16(fp)
1001049c:	10800817 	ldw	r2,32(r2)
100104a0:	10c00094 	ori	r3,r2,2
100104a4:	e0bffc17 	ldw	r2,-16(fp)
100104a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100104ac:	e0bffc17 	ldw	r2,-16(fp)
100104b0:	10800017 	ldw	r2,0(r2)
100104b4:	10800104 	addi	r2,r2,4
100104b8:	1007883a 	mov	r3,r2
100104bc:	e0bffc17 	ldw	r2,-16(fp)
100104c0:	10800817 	ldw	r2,32(r2)
100104c4:	18800035 	stwio	r2,0(r3)
100104c8:	e0bff917 	ldw	r2,-28(fp)
100104cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100104d0:	e0bffb17 	ldw	r2,-20(fp)
100104d4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100104d8:	e0bffe17 	ldw	r2,-8(fp)
100104dc:	0080120e 	bge	zero,r2,10010528 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
100104e0:	e0bfff17 	ldw	r2,-4(fp)
100104e4:	1090000c 	andi	r2,r2,16384
100104e8:	10000126 	beq	r2,zero,100104f0 <altera_avalon_jtag_uart_write+0x190>
        break;
100104ec:	00001006 	br	10010530 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100104f0:	0001883a 	nop
100104f4:	e0bffc17 	ldw	r2,-16(fp)
100104f8:	10c00d17 	ldw	r3,52(r2)
100104fc:	e0bff517 	ldw	r2,-44(fp)
10010500:	1880051e 	bne	r3,r2,10010518 <altera_avalon_jtag_uart_write+0x1b8>
10010504:	e0bffc17 	ldw	r2,-16(fp)
10010508:	10c00917 	ldw	r3,36(r2)
1001050c:	e0bffc17 	ldw	r2,-16(fp)
10010510:	10800117 	ldw	r2,4(r2)
10010514:	18bff736 	bltu	r3,r2,100104f4 <__alt_data_end+0xf80104f4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010518:	e0bffc17 	ldw	r2,-16(fp)
1001051c:	10800917 	ldw	r2,36(r2)
10010520:	10000126 	beq	r2,zero,10010528 <altera_avalon_jtag_uart_write+0x1c8>
         break;
10010524:	00000206 	br	10010530 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10010528:	e0bffe17 	ldw	r2,-8(fp)
1001052c:	00bf9716 	blt	zero,r2,1001038c <__alt_data_end+0xf801038c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010530:	e0fffd17 	ldw	r3,-12(fp)
10010534:	e0bff717 	ldw	r2,-36(fp)
10010538:	18800426 	beq	r3,r2,1001054c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1001053c:	e0fffd17 	ldw	r3,-12(fp)
10010540:	e0bff717 	ldw	r2,-36(fp)
10010544:	1885c83a 	sub	r2,r3,r2
10010548:	00000606 	br	10010564 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1001054c:	e0bfff17 	ldw	r2,-4(fp)
10010550:	1090000c 	andi	r2,r2,16384
10010554:	10000226 	beq	r2,zero,10010560 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10010558:	00bffd44 	movi	r2,-11
1001055c:	00000106 	br	10010564 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10010560:	00bffec4 	movi	r2,-5
}
10010564:	e037883a 	mov	sp,fp
10010568:	dfc00117 	ldw	ra,4(sp)
1001056c:	df000017 	ldw	fp,0(sp)
10010570:	dec00204 	addi	sp,sp,8
10010574:	f800283a 	ret

10010578 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10010578:	defff504 	addi	sp,sp,-44
1001057c:	df000a15 	stw	fp,40(sp)
10010580:	df000a04 	addi	fp,sp,40
10010584:	e13ffc15 	stw	r4,-16(fp)
10010588:	e17ffd15 	stw	r5,-12(fp)
1001058c:	e1bffe15 	stw	r6,-8(fp)
10010590:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10010594:	e03ff615 	stw	zero,-40(fp)
10010598:	00840074 	movhi	r2,4097
1001059c:	10964d04 	addi	r2,r2,22836
100105a0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
100105a4:	10003f26 	beq	r2,zero,100106a4 <alt_alarm_start+0x12c>
  {
    if (alarm)
100105a8:	e0bffc17 	ldw	r2,-16(fp)
100105ac:	10003b26 	beq	r2,zero,1001069c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
100105b0:	e0bffc17 	ldw	r2,-16(fp)
100105b4:	e0fffe17 	ldw	r3,-8(fp)
100105b8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100105bc:	e0bffc17 	ldw	r2,-16(fp)
100105c0:	e0ffff17 	ldw	r3,-4(fp)
100105c4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100105c8:	0005303a 	rdctl	r2,status
100105cc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100105d0:	e0fff817 	ldw	r3,-32(fp)
100105d4:	00bfff84 	movi	r2,-2
100105d8:	1884703a 	and	r2,r3,r2
100105dc:	1001703a 	wrctl	status,r2
  
  return context;
100105e0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
100105e4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100105e8:	00840074 	movhi	r2,4097
100105ec:	10964e04 	addi	r2,r2,22840
100105f0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
100105f4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100105f8:	e0fffd17 	ldw	r3,-12(fp)
100105fc:	e0bff617 	ldw	r2,-40(fp)
10010600:	1885883a 	add	r2,r3,r2
10010604:	10c00044 	addi	r3,r2,1
10010608:	e0bffc17 	ldw	r2,-16(fp)
1001060c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010610:	e0bffc17 	ldw	r2,-16(fp)
10010614:	10c00217 	ldw	r3,8(r2)
10010618:	e0bff617 	ldw	r2,-40(fp)
1001061c:	1880042e 	bgeu	r3,r2,10010630 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10010620:	e0bffc17 	ldw	r2,-16(fp)
10010624:	00c00044 	movi	r3,1
10010628:	10c00405 	stb	r3,16(r2)
1001062c:	00000206 	br	10010638 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10010630:	e0bffc17 	ldw	r2,-16(fp)
10010634:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010638:	e0fffc17 	ldw	r3,-16(fp)
1001063c:	00840074 	movhi	r2,4097
10010640:	108f8404 	addi	r2,r2,15888
10010644:	e0bff915 	stw	r2,-28(fp)
10010648:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1001064c:	e0bffa17 	ldw	r2,-24(fp)
10010650:	e0fff917 	ldw	r3,-28(fp)
10010654:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010658:	e0bff917 	ldw	r2,-28(fp)
1001065c:	10c00017 	ldw	r3,0(r2)
10010660:	e0bffa17 	ldw	r2,-24(fp)
10010664:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010668:	e0bff917 	ldw	r2,-28(fp)
1001066c:	10800017 	ldw	r2,0(r2)
10010670:	e0fffa17 	ldw	r3,-24(fp)
10010674:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010678:	e0bff917 	ldw	r2,-28(fp)
1001067c:	e0fffa17 	ldw	r3,-24(fp)
10010680:	10c00015 	stw	r3,0(r2)
10010684:	e0bff717 	ldw	r2,-36(fp)
10010688:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001068c:	e0bffb17 	ldw	r2,-20(fp)
10010690:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10010694:	0005883a 	mov	r2,zero
10010698:	00000306 	br	100106a8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1001069c:	00bffa84 	movi	r2,-22
100106a0:	00000106 	br	100106a8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
100106a4:	00bfde84 	movi	r2,-134
  }
}
100106a8:	e037883a 	mov	sp,fp
100106ac:	df000017 	ldw	fp,0(sp)
100106b0:	dec00104 	addi	sp,sp,4
100106b4:	f800283a 	ret

100106b8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
100106b8:	defffa04 	addi	sp,sp,-24
100106bc:	dfc00515 	stw	ra,20(sp)
100106c0:	df000415 	stw	fp,16(sp)
100106c4:	df000404 	addi	fp,sp,16
100106c8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
100106cc:	00800244 	movi	r2,9
100106d0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
100106d4:	e13ffd17 	ldw	r4,-12(fp)
100106d8:	014003f4 	movhi	r5,15
100106dc:	29509004 	addi	r5,r5,16960
100106e0:	000c8300 	call	1000c830 <__mulsi3>
100106e4:	0100bef4 	movhi	r4,763
100106e8:	213c2004 	addi	r4,r4,-3968
100106ec:	100b883a 	mov	r5,r2
100106f0:	000c8200 	call	1000c820 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
100106f4:	01200034 	movhi	r4,32768
100106f8:	213fffc4 	addi	r4,r4,-1
100106fc:	100b883a 	mov	r5,r2
10010700:	000c8200 	call	1000c820 <__udivsi3>
10010704:	e13fff17 	ldw	r4,-4(fp)
10010708:	100b883a 	mov	r5,r2
1001070c:	000c8200 	call	1000c820 <__udivsi3>
10010710:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10010714:	e0bffe17 	ldw	r2,-8(fp)
10010718:	10002a26 	beq	r2,zero,100107c4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1001071c:	e03ffc15 	stw	zero,-16(fp)
10010720:	00001706 	br	10010780 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10010724:	00a00034 	movhi	r2,32768
10010728:	10bfffc4 	addi	r2,r2,-1
1001072c:	10bfffc4 	addi	r2,r2,-1
10010730:	103ffe1e 	bne	r2,zero,1001072c <__alt_data_end+0xf801072c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10010734:	e13ffd17 	ldw	r4,-12(fp)
10010738:	014003f4 	movhi	r5,15
1001073c:	29509004 	addi	r5,r5,16960
10010740:	000c8300 	call	1000c830 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10010744:	0100bef4 	movhi	r4,763
10010748:	213c2004 	addi	r4,r4,-3968
1001074c:	100b883a 	mov	r5,r2
10010750:	000c8200 	call	1000c820 <__udivsi3>
10010754:	01200034 	movhi	r4,32768
10010758:	213fffc4 	addi	r4,r4,-1
1001075c:	100b883a 	mov	r5,r2
10010760:	000c8200 	call	1000c820 <__udivsi3>
10010764:	1007883a 	mov	r3,r2
10010768:	e0bfff17 	ldw	r2,-4(fp)
1001076c:	10c5c83a 	sub	r2,r2,r3
10010770:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10010774:	e0bffc17 	ldw	r2,-16(fp)
10010778:	10800044 	addi	r2,r2,1
1001077c:	e0bffc15 	stw	r2,-16(fp)
10010780:	e0fffc17 	ldw	r3,-16(fp)
10010784:	e0bffe17 	ldw	r2,-8(fp)
10010788:	18bfe616 	blt	r3,r2,10010724 <__alt_data_end+0xf8010724>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1001078c:	e13ffd17 	ldw	r4,-12(fp)
10010790:	014003f4 	movhi	r5,15
10010794:	29509004 	addi	r5,r5,16960
10010798:	000c8300 	call	1000c830 <__mulsi3>
1001079c:	0100bef4 	movhi	r4,763
100107a0:	213c2004 	addi	r4,r4,-3968
100107a4:	100b883a 	mov	r5,r2
100107a8:	000c8200 	call	1000c820 <__udivsi3>
100107ac:	1009883a 	mov	r4,r2
100107b0:	e17fff17 	ldw	r5,-4(fp)
100107b4:	000c8300 	call	1000c830 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100107b8:	10bfffc4 	addi	r2,r2,-1
100107bc:	103ffe1e 	bne	r2,zero,100107b8 <__alt_data_end+0xf80107b8>
100107c0:	00000d06 	br	100107f8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100107c4:	e13ffd17 	ldw	r4,-12(fp)
100107c8:	014003f4 	movhi	r5,15
100107cc:	29509004 	addi	r5,r5,16960
100107d0:	000c8300 	call	1000c830 <__mulsi3>
100107d4:	0100bef4 	movhi	r4,763
100107d8:	213c2004 	addi	r4,r4,-3968
100107dc:	100b883a 	mov	r5,r2
100107e0:	000c8200 	call	1000c820 <__udivsi3>
100107e4:	1009883a 	mov	r4,r2
100107e8:	e17fff17 	ldw	r5,-4(fp)
100107ec:	000c8300 	call	1000c830 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100107f0:	10bfffc4 	addi	r2,r2,-1
100107f4:	00bffe16 	blt	zero,r2,100107f0 <__alt_data_end+0xf80107f0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
100107f8:	0005883a 	mov	r2,zero
}
100107fc:	e037883a 	mov	sp,fp
10010800:	dfc00117 	ldw	ra,4(sp)
10010804:	df000017 	ldw	fp,0(sp)
10010808:	dec00204 	addi	sp,sp,8
1001080c:	f800283a 	ret

10010810 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10010810:	deffff04 	addi	sp,sp,-4
10010814:	df000015 	stw	fp,0(sp)
10010818:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1001081c:	e037883a 	mov	sp,fp
10010820:	df000017 	ldw	fp,0(sp)
10010824:	dec00104 	addi	sp,sp,4
10010828:	f800283a 	ret

1001082c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001082c:	defffe04 	addi	sp,sp,-8
10010830:	dfc00115 	stw	ra,4(sp)
10010834:	df000015 	stw	fp,0(sp)
10010838:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001083c:	00840074 	movhi	r2,4097
10010840:	108f8104 	addi	r2,r2,15876
10010844:	10800017 	ldw	r2,0(r2)
10010848:	10000526 	beq	r2,zero,10010860 <alt_get_errno+0x34>
1001084c:	00840074 	movhi	r2,4097
10010850:	108f8104 	addi	r2,r2,15876
10010854:	10800017 	ldw	r2,0(r2)
10010858:	103ee83a 	callr	r2
1001085c:	00000206 	br	10010868 <alt_get_errno+0x3c>
10010860:	00840074 	movhi	r2,4097
10010864:	10964804 	addi	r2,r2,22816
}
10010868:	e037883a 	mov	sp,fp
1001086c:	dfc00117 	ldw	ra,4(sp)
10010870:	df000017 	ldw	fp,0(sp)
10010874:	dec00204 	addi	sp,sp,8
10010878:	f800283a 	ret

1001087c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1001087c:	defffa04 	addi	sp,sp,-24
10010880:	dfc00515 	stw	ra,20(sp)
10010884:	df000415 	stw	fp,16(sp)
10010888:	df000404 	addi	fp,sp,16
1001088c:	e13ffe15 	stw	r4,-8(fp)
10010890:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10010894:	e0bffe17 	ldw	r2,-8(fp)
10010898:	10000326 	beq	r2,zero,100108a8 <alt_dev_llist_insert+0x2c>
1001089c:	e0bffe17 	ldw	r2,-8(fp)
100108a0:	10800217 	ldw	r2,8(r2)
100108a4:	1000061e 	bne	r2,zero,100108c0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100108a8:	001082c0 	call	1001082c <alt_get_errno>
100108ac:	1007883a 	mov	r3,r2
100108b0:	00800584 	movi	r2,22
100108b4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100108b8:	00bffa84 	movi	r2,-22
100108bc:	00001306 	br	1001090c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100108c0:	e0bffe17 	ldw	r2,-8(fp)
100108c4:	e0ffff17 	ldw	r3,-4(fp)
100108c8:	e0fffc15 	stw	r3,-16(fp)
100108cc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100108d0:	e0bffd17 	ldw	r2,-12(fp)
100108d4:	e0fffc17 	ldw	r3,-16(fp)
100108d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100108dc:	e0bffc17 	ldw	r2,-16(fp)
100108e0:	10c00017 	ldw	r3,0(r2)
100108e4:	e0bffd17 	ldw	r2,-12(fp)
100108e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100108ec:	e0bffc17 	ldw	r2,-16(fp)
100108f0:	10800017 	ldw	r2,0(r2)
100108f4:	e0fffd17 	ldw	r3,-12(fp)
100108f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100108fc:	e0bffc17 	ldw	r2,-16(fp)
10010900:	e0fffd17 	ldw	r3,-12(fp)
10010904:	10c00015 	stw	r3,0(r2)

  return 0;  
10010908:	0005883a 	mov	r2,zero
}
1001090c:	e037883a 	mov	sp,fp
10010910:	dfc00117 	ldw	ra,4(sp)
10010914:	df000017 	ldw	fp,0(sp)
10010918:	dec00204 	addi	sp,sp,8
1001091c:	f800283a 	ret

10010920 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10010920:	defffd04 	addi	sp,sp,-12
10010924:	dfc00215 	stw	ra,8(sp)
10010928:	df000115 	stw	fp,4(sp)
1001092c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010930:	00840074 	movhi	r2,4097
10010934:	10862504 	addi	r2,r2,6292
10010938:	e0bfff15 	stw	r2,-4(fp)
1001093c:	00000606 	br	10010958 <_do_ctors+0x38>
        (*ctor) (); 
10010940:	e0bfff17 	ldw	r2,-4(fp)
10010944:	10800017 	ldw	r2,0(r2)
10010948:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1001094c:	e0bfff17 	ldw	r2,-4(fp)
10010950:	10bfff04 	addi	r2,r2,-4
10010954:	e0bfff15 	stw	r2,-4(fp)
10010958:	e0ffff17 	ldw	r3,-4(fp)
1001095c:	00840074 	movhi	r2,4097
10010960:	10862604 	addi	r2,r2,6296
10010964:	18bff62e 	bgeu	r3,r2,10010940 <__alt_data_end+0xf8010940>
        (*ctor) (); 
}
10010968:	e037883a 	mov	sp,fp
1001096c:	dfc00117 	ldw	ra,4(sp)
10010970:	df000017 	ldw	fp,0(sp)
10010974:	dec00204 	addi	sp,sp,8
10010978:	f800283a 	ret

1001097c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1001097c:	defffd04 	addi	sp,sp,-12
10010980:	dfc00215 	stw	ra,8(sp)
10010984:	df000115 	stw	fp,4(sp)
10010988:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1001098c:	00840074 	movhi	r2,4097
10010990:	10862504 	addi	r2,r2,6292
10010994:	e0bfff15 	stw	r2,-4(fp)
10010998:	00000606 	br	100109b4 <_do_dtors+0x38>
        (*dtor) (); 
1001099c:	e0bfff17 	ldw	r2,-4(fp)
100109a0:	10800017 	ldw	r2,0(r2)
100109a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100109a8:	e0bfff17 	ldw	r2,-4(fp)
100109ac:	10bfff04 	addi	r2,r2,-4
100109b0:	e0bfff15 	stw	r2,-4(fp)
100109b4:	e0ffff17 	ldw	r3,-4(fp)
100109b8:	00840074 	movhi	r2,4097
100109bc:	10862604 	addi	r2,r2,6296
100109c0:	18bff62e 	bgeu	r3,r2,1001099c <__alt_data_end+0xf801099c>
        (*dtor) (); 
}
100109c4:	e037883a 	mov	sp,fp
100109c8:	dfc00117 	ldw	ra,4(sp)
100109cc:	df000017 	ldw	fp,0(sp)
100109d0:	dec00204 	addi	sp,sp,8
100109d4:	f800283a 	ret

100109d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100109d8:	deffff04 	addi	sp,sp,-4
100109dc:	df000015 	stw	fp,0(sp)
100109e0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100109e4:	e037883a 	mov	sp,fp
100109e8:	df000017 	ldw	fp,0(sp)
100109ec:	dec00104 	addi	sp,sp,4
100109f0:	f800283a 	ret

100109f4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100109f4:	defff904 	addi	sp,sp,-28
100109f8:	dfc00615 	stw	ra,24(sp)
100109fc:	df000515 	stw	fp,20(sp)
10010a00:	df000504 	addi	fp,sp,20
10010a04:	e13ffc15 	stw	r4,-16(fp)
10010a08:	e17ffd15 	stw	r5,-12(fp)
10010a0c:	e1bffe15 	stw	r6,-8(fp)
10010a10:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10010a14:	e0800217 	ldw	r2,8(fp)
10010a18:	d8800015 	stw	r2,0(sp)
10010a1c:	e13ffc17 	ldw	r4,-16(fp)
10010a20:	e17ffd17 	ldw	r5,-12(fp)
10010a24:	e1bffe17 	ldw	r6,-8(fp)
10010a28:	e1ffff17 	ldw	r7,-4(fp)
10010a2c:	0010bd40 	call	10010bd4 <alt_iic_isr_register>
}  
10010a30:	e037883a 	mov	sp,fp
10010a34:	dfc00117 	ldw	ra,4(sp)
10010a38:	df000017 	ldw	fp,0(sp)
10010a3c:	dec00204 	addi	sp,sp,8
10010a40:	f800283a 	ret

10010a44 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10010a44:	defff904 	addi	sp,sp,-28
10010a48:	df000615 	stw	fp,24(sp)
10010a4c:	df000604 	addi	fp,sp,24
10010a50:	e13ffe15 	stw	r4,-8(fp)
10010a54:	e17fff15 	stw	r5,-4(fp)
10010a58:	e0bfff17 	ldw	r2,-4(fp)
10010a5c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010a60:	0005303a 	rdctl	r2,status
10010a64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010a68:	e0fffb17 	ldw	r3,-20(fp)
10010a6c:	00bfff84 	movi	r2,-2
10010a70:	1884703a 	and	r2,r3,r2
10010a74:	1001703a 	wrctl	status,r2
  
  return context;
10010a78:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010a7c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10010a80:	e0bffa17 	ldw	r2,-24(fp)
10010a84:	00c00044 	movi	r3,1
10010a88:	1884983a 	sll	r2,r3,r2
10010a8c:	1007883a 	mov	r3,r2
10010a90:	00840074 	movhi	r2,4097
10010a94:	10964c04 	addi	r2,r2,22832
10010a98:	10800017 	ldw	r2,0(r2)
10010a9c:	1886b03a 	or	r3,r3,r2
10010aa0:	00840074 	movhi	r2,4097
10010aa4:	10964c04 	addi	r2,r2,22832
10010aa8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010aac:	00840074 	movhi	r2,4097
10010ab0:	10964c04 	addi	r2,r2,22832
10010ab4:	10800017 	ldw	r2,0(r2)
10010ab8:	100170fa 	wrctl	ienable,r2
10010abc:	e0bffc17 	ldw	r2,-16(fp)
10010ac0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010ac4:	e0bffd17 	ldw	r2,-12(fp)
10010ac8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010acc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10010ad0:	0001883a 	nop
}
10010ad4:	e037883a 	mov	sp,fp
10010ad8:	df000017 	ldw	fp,0(sp)
10010adc:	dec00104 	addi	sp,sp,4
10010ae0:	f800283a 	ret

10010ae4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10010ae4:	defff904 	addi	sp,sp,-28
10010ae8:	df000615 	stw	fp,24(sp)
10010aec:	df000604 	addi	fp,sp,24
10010af0:	e13ffe15 	stw	r4,-8(fp)
10010af4:	e17fff15 	stw	r5,-4(fp)
10010af8:	e0bfff17 	ldw	r2,-4(fp)
10010afc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010b00:	0005303a 	rdctl	r2,status
10010b04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010b08:	e0fffb17 	ldw	r3,-20(fp)
10010b0c:	00bfff84 	movi	r2,-2
10010b10:	1884703a 	and	r2,r3,r2
10010b14:	1001703a 	wrctl	status,r2
  
  return context;
10010b18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010b1c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10010b20:	e0bffa17 	ldw	r2,-24(fp)
10010b24:	00c00044 	movi	r3,1
10010b28:	1884983a 	sll	r2,r3,r2
10010b2c:	0084303a 	nor	r2,zero,r2
10010b30:	1007883a 	mov	r3,r2
10010b34:	00840074 	movhi	r2,4097
10010b38:	10964c04 	addi	r2,r2,22832
10010b3c:	10800017 	ldw	r2,0(r2)
10010b40:	1886703a 	and	r3,r3,r2
10010b44:	00840074 	movhi	r2,4097
10010b48:	10964c04 	addi	r2,r2,22832
10010b4c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010b50:	00840074 	movhi	r2,4097
10010b54:	10964c04 	addi	r2,r2,22832
10010b58:	10800017 	ldw	r2,0(r2)
10010b5c:	100170fa 	wrctl	ienable,r2
10010b60:	e0bffc17 	ldw	r2,-16(fp)
10010b64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010b68:	e0bffd17 	ldw	r2,-12(fp)
10010b6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010b70:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10010b74:	0001883a 	nop
}
10010b78:	e037883a 	mov	sp,fp
10010b7c:	df000017 	ldw	fp,0(sp)
10010b80:	dec00104 	addi	sp,sp,4
10010b84:	f800283a 	ret

10010b88 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10010b88:	defffc04 	addi	sp,sp,-16
10010b8c:	df000315 	stw	fp,12(sp)
10010b90:	df000304 	addi	fp,sp,12
10010b94:	e13ffe15 	stw	r4,-8(fp)
10010b98:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10010b9c:	000530fa 	rdctl	r2,ienable
10010ba0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10010ba4:	e0bfff17 	ldw	r2,-4(fp)
10010ba8:	00c00044 	movi	r3,1
10010bac:	1884983a 	sll	r2,r3,r2
10010bb0:	1007883a 	mov	r3,r2
10010bb4:	e0bffd17 	ldw	r2,-12(fp)
10010bb8:	1884703a 	and	r2,r3,r2
10010bbc:	1004c03a 	cmpne	r2,r2,zero
10010bc0:	10803fcc 	andi	r2,r2,255
}
10010bc4:	e037883a 	mov	sp,fp
10010bc8:	df000017 	ldw	fp,0(sp)
10010bcc:	dec00104 	addi	sp,sp,4
10010bd0:	f800283a 	ret

10010bd4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010bd4:	defff504 	addi	sp,sp,-44
10010bd8:	dfc00a15 	stw	ra,40(sp)
10010bdc:	df000915 	stw	fp,36(sp)
10010be0:	df000904 	addi	fp,sp,36
10010be4:	e13ffc15 	stw	r4,-16(fp)
10010be8:	e17ffd15 	stw	r5,-12(fp)
10010bec:	e1bffe15 	stw	r6,-8(fp)
10010bf0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10010bf4:	00bffa84 	movi	r2,-22
10010bf8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10010bfc:	e0bffd17 	ldw	r2,-12(fp)
10010c00:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10010c04:	e0bff817 	ldw	r2,-32(fp)
10010c08:	10800808 	cmpgei	r2,r2,32
10010c0c:	1000271e 	bne	r2,zero,10010cac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010c10:	0005303a 	rdctl	r2,status
10010c14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010c18:	e0fffa17 	ldw	r3,-24(fp)
10010c1c:	00bfff84 	movi	r2,-2
10010c20:	1884703a 	and	r2,r3,r2
10010c24:	1001703a 	wrctl	status,r2
  
  return context;
10010c28:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10010c2c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10010c30:	00840074 	movhi	r2,4097
10010c34:	10965e04 	addi	r2,r2,22904
10010c38:	e0fff817 	ldw	r3,-32(fp)
10010c3c:	180690fa 	slli	r3,r3,3
10010c40:	10c5883a 	add	r2,r2,r3
10010c44:	e0fffe17 	ldw	r3,-8(fp)
10010c48:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10010c4c:	00840074 	movhi	r2,4097
10010c50:	10965e04 	addi	r2,r2,22904
10010c54:	e0fff817 	ldw	r3,-32(fp)
10010c58:	180690fa 	slli	r3,r3,3
10010c5c:	10c5883a 	add	r2,r2,r3
10010c60:	10800104 	addi	r2,r2,4
10010c64:	e0ffff17 	ldw	r3,-4(fp)
10010c68:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10010c6c:	e0bffe17 	ldw	r2,-8(fp)
10010c70:	10000526 	beq	r2,zero,10010c88 <alt_iic_isr_register+0xb4>
10010c74:	e0bff817 	ldw	r2,-32(fp)
10010c78:	e13ffc17 	ldw	r4,-16(fp)
10010c7c:	100b883a 	mov	r5,r2
10010c80:	0010a440 	call	10010a44 <alt_ic_irq_enable>
10010c84:	00000406 	br	10010c98 <alt_iic_isr_register+0xc4>
10010c88:	e0bff817 	ldw	r2,-32(fp)
10010c8c:	e13ffc17 	ldw	r4,-16(fp)
10010c90:	100b883a 	mov	r5,r2
10010c94:	0010ae40 	call	10010ae4 <alt_ic_irq_disable>
10010c98:	e0bff715 	stw	r2,-36(fp)
10010c9c:	e0bff917 	ldw	r2,-28(fp)
10010ca0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010ca4:	e0bffb17 	ldw	r2,-20(fp)
10010ca8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10010cac:	e0bff717 	ldw	r2,-36(fp)
}
10010cb0:	e037883a 	mov	sp,fp
10010cb4:	dfc00117 	ldw	ra,4(sp)
10010cb8:	df000017 	ldw	fp,0(sp)
10010cbc:	dec00204 	addi	sp,sp,8
10010cc0:	f800283a 	ret

10010cc4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10010cc4:	defff804 	addi	sp,sp,-32
10010cc8:	dfc00715 	stw	ra,28(sp)
10010ccc:	df000615 	stw	fp,24(sp)
10010cd0:	dc000515 	stw	r16,20(sp)
10010cd4:	df000604 	addi	fp,sp,24
10010cd8:	e13ffb15 	stw	r4,-20(fp)
10010cdc:	e17ffc15 	stw	r5,-16(fp)
10010ce0:	e1bffd15 	stw	r6,-12(fp)
10010ce4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10010ce8:	e13ffc17 	ldw	r4,-16(fp)
10010cec:	e17ffd17 	ldw	r5,-12(fp)
10010cf0:	e1bffe17 	ldw	r6,-8(fp)
10010cf4:	0010f600 	call	10010f60 <open>
10010cf8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10010cfc:	e0bffa17 	ldw	r2,-24(fp)
10010d00:	10002216 	blt	r2,zero,10010d8c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10010d04:	04040074 	movhi	r16,4097
10010d08:	840afe04 	addi	r16,r16,11256
10010d0c:	e0bffa17 	ldw	r2,-24(fp)
10010d10:	1009883a 	mov	r4,r2
10010d14:	01400304 	movi	r5,12
10010d18:	000c8300 	call	1000c830 <__mulsi3>
10010d1c:	8085883a 	add	r2,r16,r2
10010d20:	10c00017 	ldw	r3,0(r2)
10010d24:	e0bffb17 	ldw	r2,-20(fp)
10010d28:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10010d2c:	04040074 	movhi	r16,4097
10010d30:	840afe04 	addi	r16,r16,11256
10010d34:	e0bffa17 	ldw	r2,-24(fp)
10010d38:	1009883a 	mov	r4,r2
10010d3c:	01400304 	movi	r5,12
10010d40:	000c8300 	call	1000c830 <__mulsi3>
10010d44:	8085883a 	add	r2,r16,r2
10010d48:	10800104 	addi	r2,r2,4
10010d4c:	10c00017 	ldw	r3,0(r2)
10010d50:	e0bffb17 	ldw	r2,-20(fp)
10010d54:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10010d58:	04040074 	movhi	r16,4097
10010d5c:	840afe04 	addi	r16,r16,11256
10010d60:	e0bffa17 	ldw	r2,-24(fp)
10010d64:	1009883a 	mov	r4,r2
10010d68:	01400304 	movi	r5,12
10010d6c:	000c8300 	call	1000c830 <__mulsi3>
10010d70:	8085883a 	add	r2,r16,r2
10010d74:	10800204 	addi	r2,r2,8
10010d78:	10c00017 	ldw	r3,0(r2)
10010d7c:	e0bffb17 	ldw	r2,-20(fp)
10010d80:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10010d84:	e13ffa17 	ldw	r4,-24(fp)
10010d88:	000f7c80 	call	1000f7c8 <alt_release_fd>
  }
} 
10010d8c:	e6ffff04 	addi	sp,fp,-4
10010d90:	dfc00217 	ldw	ra,8(sp)
10010d94:	df000117 	ldw	fp,4(sp)
10010d98:	dc000017 	ldw	r16,0(sp)
10010d9c:	dec00304 	addi	sp,sp,12
10010da0:	f800283a 	ret

10010da4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10010da4:	defffb04 	addi	sp,sp,-20
10010da8:	dfc00415 	stw	ra,16(sp)
10010dac:	df000315 	stw	fp,12(sp)
10010db0:	df000304 	addi	fp,sp,12
10010db4:	e13ffd15 	stw	r4,-12(fp)
10010db8:	e17ffe15 	stw	r5,-8(fp)
10010dbc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10010dc0:	01040074 	movhi	r4,4097
10010dc4:	210b0104 	addi	r4,r4,11268
10010dc8:	e17ffd17 	ldw	r5,-12(fp)
10010dcc:	01800044 	movi	r6,1
10010dd0:	01c07fc4 	movi	r7,511
10010dd4:	0010cc40 	call	10010cc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10010dd8:	01040074 	movhi	r4,4097
10010ddc:	210afe04 	addi	r4,r4,11256
10010de0:	e17ffe17 	ldw	r5,-8(fp)
10010de4:	000d883a 	mov	r6,zero
10010de8:	01c07fc4 	movi	r7,511
10010dec:	0010cc40 	call	10010cc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10010df0:	01040074 	movhi	r4,4097
10010df4:	210b0404 	addi	r4,r4,11280
10010df8:	e17fff17 	ldw	r5,-4(fp)
10010dfc:	01800044 	movi	r6,1
10010e00:	01c07fc4 	movi	r7,511
10010e04:	0010cc40 	call	10010cc4 <alt_open_fd>
}  
10010e08:	e037883a 	mov	sp,fp
10010e0c:	dfc00117 	ldw	ra,4(sp)
10010e10:	df000017 	ldw	fp,0(sp)
10010e14:	dec00204 	addi	sp,sp,8
10010e18:	f800283a 	ret

10010e1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010e1c:	defffe04 	addi	sp,sp,-8
10010e20:	dfc00115 	stw	ra,4(sp)
10010e24:	df000015 	stw	fp,0(sp)
10010e28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010e2c:	00840074 	movhi	r2,4097
10010e30:	108f8104 	addi	r2,r2,15876
10010e34:	10800017 	ldw	r2,0(r2)
10010e38:	10000526 	beq	r2,zero,10010e50 <alt_get_errno+0x34>
10010e3c:	00840074 	movhi	r2,4097
10010e40:	108f8104 	addi	r2,r2,15876
10010e44:	10800017 	ldw	r2,0(r2)
10010e48:	103ee83a 	callr	r2
10010e4c:	00000206 	br	10010e58 <alt_get_errno+0x3c>
10010e50:	00840074 	movhi	r2,4097
10010e54:	10964804 	addi	r2,r2,22816
}
10010e58:	e037883a 	mov	sp,fp
10010e5c:	dfc00117 	ldw	ra,4(sp)
10010e60:	df000017 	ldw	fp,0(sp)
10010e64:	dec00204 	addi	sp,sp,8
10010e68:	f800283a 	ret

10010e6c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10010e6c:	defffb04 	addi	sp,sp,-20
10010e70:	dfc00415 	stw	ra,16(sp)
10010e74:	df000315 	stw	fp,12(sp)
10010e78:	dc000215 	stw	r16,8(sp)
10010e7c:	df000304 	addi	fp,sp,12
10010e80:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10010e84:	e0bffe17 	ldw	r2,-8(fp)
10010e88:	10800217 	ldw	r2,8(r2)
10010e8c:	10d00034 	orhi	r3,r2,16384
10010e90:	e0bffe17 	ldw	r2,-8(fp)
10010e94:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010e98:	e03ffd15 	stw	zero,-12(fp)
10010e9c:	00002306 	br	10010f2c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010ea0:	04040074 	movhi	r16,4097
10010ea4:	840afe04 	addi	r16,r16,11256
10010ea8:	e0bffd17 	ldw	r2,-12(fp)
10010eac:	1009883a 	mov	r4,r2
10010eb0:	01400304 	movi	r5,12
10010eb4:	000c8300 	call	1000c830 <__mulsi3>
10010eb8:	8085883a 	add	r2,r16,r2
10010ebc:	10c00017 	ldw	r3,0(r2)
10010ec0:	e0bffe17 	ldw	r2,-8(fp)
10010ec4:	10800017 	ldw	r2,0(r2)
10010ec8:	1880151e 	bne	r3,r2,10010f20 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010ecc:	04040074 	movhi	r16,4097
10010ed0:	840afe04 	addi	r16,r16,11256
10010ed4:	e0bffd17 	ldw	r2,-12(fp)
10010ed8:	1009883a 	mov	r4,r2
10010edc:	01400304 	movi	r5,12
10010ee0:	000c8300 	call	1000c830 <__mulsi3>
10010ee4:	8085883a 	add	r2,r16,r2
10010ee8:	10800204 	addi	r2,r2,8
10010eec:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010ef0:	10000b0e 	bge	r2,zero,10010f20 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10010ef4:	e13ffd17 	ldw	r4,-12(fp)
10010ef8:	01400304 	movi	r5,12
10010efc:	000c8300 	call	1000c830 <__mulsi3>
10010f00:	1007883a 	mov	r3,r2
10010f04:	00840074 	movhi	r2,4097
10010f08:	108afe04 	addi	r2,r2,11256
10010f0c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010f10:	e0bffe17 	ldw	r2,-8(fp)
10010f14:	18800226 	beq	r3,r2,10010f20 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10010f18:	00bffcc4 	movi	r2,-13
10010f1c:	00000a06 	br	10010f48 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010f20:	e0bffd17 	ldw	r2,-12(fp)
10010f24:	10800044 	addi	r2,r2,1
10010f28:	e0bffd15 	stw	r2,-12(fp)
10010f2c:	00840074 	movhi	r2,4097
10010f30:	108f8004 	addi	r2,r2,15872
10010f34:	10800017 	ldw	r2,0(r2)
10010f38:	1007883a 	mov	r3,r2
10010f3c:	e0bffd17 	ldw	r2,-12(fp)
10010f40:	18bfd72e 	bgeu	r3,r2,10010ea0 <__alt_data_end+0xf8010ea0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10010f44:	0005883a 	mov	r2,zero
}
10010f48:	e6ffff04 	addi	sp,fp,-4
10010f4c:	dfc00217 	ldw	ra,8(sp)
10010f50:	df000117 	ldw	fp,4(sp)
10010f54:	dc000017 	ldw	r16,0(sp)
10010f58:	dec00304 	addi	sp,sp,12
10010f5c:	f800283a 	ret

10010f60 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10010f60:	defff604 	addi	sp,sp,-40
10010f64:	dfc00915 	stw	ra,36(sp)
10010f68:	df000815 	stw	fp,32(sp)
10010f6c:	df000804 	addi	fp,sp,32
10010f70:	e13ffd15 	stw	r4,-12(fp)
10010f74:	e17ffe15 	stw	r5,-8(fp)
10010f78:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10010f7c:	00bfffc4 	movi	r2,-1
10010f80:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10010f84:	00bffb44 	movi	r2,-19
10010f88:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10010f8c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10010f90:	e13ffd17 	ldw	r4,-12(fp)
10010f94:	01440074 	movhi	r5,4097
10010f98:	294f7e04 	addi	r5,r5,15864
10010f9c:	001127c0 	call	1001127c <alt_find_dev>
10010fa0:	e0bff815 	stw	r2,-32(fp)
10010fa4:	e0bff817 	ldw	r2,-32(fp)
10010fa8:	1000051e 	bne	r2,zero,10010fc0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10010fac:	e13ffd17 	ldw	r4,-12(fp)
10010fb0:	001130c0 	call	1001130c <alt_find_file>
10010fb4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10010fb8:	00800044 	movi	r2,1
10010fbc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10010fc0:	e0bff817 	ldw	r2,-32(fp)
10010fc4:	10002b26 	beq	r2,zero,10011074 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10010fc8:	e13ff817 	ldw	r4,-32(fp)
10010fcc:	00114200 	call	10011420 <alt_get_fd>
10010fd0:	e0bff915 	stw	r2,-28(fp)
10010fd4:	e0bff917 	ldw	r2,-28(fp)
10010fd8:	1000030e 	bge	r2,zero,10010fe8 <open+0x88>
    {
      status = index;
10010fdc:	e0bff917 	ldw	r2,-28(fp)
10010fe0:	e0bffa15 	stw	r2,-24(fp)
10010fe4:	00002506 	br	1001107c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10010fe8:	e13ff917 	ldw	r4,-28(fp)
10010fec:	01400304 	movi	r5,12
10010ff0:	000c8300 	call	1000c830 <__mulsi3>
10010ff4:	1007883a 	mov	r3,r2
10010ff8:	00840074 	movhi	r2,4097
10010ffc:	108afe04 	addi	r2,r2,11256
10011000:	1885883a 	add	r2,r3,r2
10011004:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10011008:	e0fffe17 	ldw	r3,-8(fp)
1001100c:	00900034 	movhi	r2,16384
10011010:	10bfffc4 	addi	r2,r2,-1
10011014:	1886703a 	and	r3,r3,r2
10011018:	e0bffc17 	ldw	r2,-16(fp)
1001101c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011020:	e0bffb17 	ldw	r2,-20(fp)
10011024:	1000051e 	bne	r2,zero,1001103c <open+0xdc>
10011028:	e13ffc17 	ldw	r4,-16(fp)
1001102c:	0010e6c0 	call	10010e6c <alt_file_locked>
10011030:	e0bffa15 	stw	r2,-24(fp)
10011034:	e0bffa17 	ldw	r2,-24(fp)
10011038:	10001016 	blt	r2,zero,1001107c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1001103c:	e0bff817 	ldw	r2,-32(fp)
10011040:	10800317 	ldw	r2,12(r2)
10011044:	10000826 	beq	r2,zero,10011068 <open+0x108>
10011048:	e0bff817 	ldw	r2,-32(fp)
1001104c:	10800317 	ldw	r2,12(r2)
10011050:	e13ffc17 	ldw	r4,-16(fp)
10011054:	e17ffd17 	ldw	r5,-12(fp)
10011058:	e1bffe17 	ldw	r6,-8(fp)
1001105c:	e1ffff17 	ldw	r7,-4(fp)
10011060:	103ee83a 	callr	r2
10011064:	00000106 	br	1001106c <open+0x10c>
10011068:	0005883a 	mov	r2,zero
1001106c:	e0bffa15 	stw	r2,-24(fp)
10011070:	00000206 	br	1001107c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10011074:	00bffb44 	movi	r2,-19
10011078:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1001107c:	e0bffa17 	ldw	r2,-24(fp)
10011080:	1000090e 	bge	r2,zero,100110a8 <open+0x148>
  {
    alt_release_fd (index);  
10011084:	e13ff917 	ldw	r4,-28(fp)
10011088:	000f7c80 	call	1000f7c8 <alt_release_fd>
    ALT_ERRNO = -status;
1001108c:	0010e1c0 	call	10010e1c <alt_get_errno>
10011090:	1007883a 	mov	r3,r2
10011094:	e0bffa17 	ldw	r2,-24(fp)
10011098:	0085c83a 	sub	r2,zero,r2
1001109c:	18800015 	stw	r2,0(r3)
    return -1;
100110a0:	00bfffc4 	movi	r2,-1
100110a4:	00000106 	br	100110ac <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
100110a8:	e0bff917 	ldw	r2,-28(fp)
}
100110ac:	e037883a 	mov	sp,fp
100110b0:	dfc00117 	ldw	ra,4(sp)
100110b4:	df000017 	ldw	fp,0(sp)
100110b8:	dec00204 	addi	sp,sp,8
100110bc:	f800283a 	ret

100110c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100110c0:	defffa04 	addi	sp,sp,-24
100110c4:	df000515 	stw	fp,20(sp)
100110c8:	df000504 	addi	fp,sp,20
100110cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100110d0:	0005303a 	rdctl	r2,status
100110d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100110d8:	e0fffc17 	ldw	r3,-16(fp)
100110dc:	00bfff84 	movi	r2,-2
100110e0:	1884703a 	and	r2,r3,r2
100110e4:	1001703a 	wrctl	status,r2
  
  return context;
100110e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100110ec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100110f0:	e0bfff17 	ldw	r2,-4(fp)
100110f4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100110f8:	e0bffd17 	ldw	r2,-12(fp)
100110fc:	10800017 	ldw	r2,0(r2)
10011100:	e0fffd17 	ldw	r3,-12(fp)
10011104:	18c00117 	ldw	r3,4(r3)
10011108:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1001110c:	e0bffd17 	ldw	r2,-12(fp)
10011110:	10800117 	ldw	r2,4(r2)
10011114:	e0fffd17 	ldw	r3,-12(fp)
10011118:	18c00017 	ldw	r3,0(r3)
1001111c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10011120:	e0bffd17 	ldw	r2,-12(fp)
10011124:	e0fffd17 	ldw	r3,-12(fp)
10011128:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1001112c:	e0bffd17 	ldw	r2,-12(fp)
10011130:	e0fffd17 	ldw	r3,-12(fp)
10011134:	10c00015 	stw	r3,0(r2)
10011138:	e0bffb17 	ldw	r2,-20(fp)
1001113c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011140:	e0bffe17 	ldw	r2,-8(fp)
10011144:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10011148:	e037883a 	mov	sp,fp
1001114c:	df000017 	ldw	fp,0(sp)
10011150:	dec00104 	addi	sp,sp,4
10011154:	f800283a 	ret

10011158 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10011158:	defffb04 	addi	sp,sp,-20
1001115c:	dfc00415 	stw	ra,16(sp)
10011160:	df000315 	stw	fp,12(sp)
10011164:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10011168:	d0a00e17 	ldw	r2,-32712(gp)
1001116c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10011170:	d0a6d817 	ldw	r2,-25760(gp)
10011174:	10800044 	addi	r2,r2,1
10011178:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001117c:	00002e06 	br	10011238 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10011180:	e0bffd17 	ldw	r2,-12(fp)
10011184:	10800017 	ldw	r2,0(r2)
10011188:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1001118c:	e0bffd17 	ldw	r2,-12(fp)
10011190:	10800403 	ldbu	r2,16(r2)
10011194:	10803fcc 	andi	r2,r2,255
10011198:	10000426 	beq	r2,zero,100111ac <alt_tick+0x54>
1001119c:	d0a6d817 	ldw	r2,-25760(gp)
100111a0:	1000021e 	bne	r2,zero,100111ac <alt_tick+0x54>
    {
      alarm->rollover = 0;
100111a4:	e0bffd17 	ldw	r2,-12(fp)
100111a8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100111ac:	e0bffd17 	ldw	r2,-12(fp)
100111b0:	10800217 	ldw	r2,8(r2)
100111b4:	d0e6d817 	ldw	r3,-25760(gp)
100111b8:	18801d36 	bltu	r3,r2,10011230 <alt_tick+0xd8>
100111bc:	e0bffd17 	ldw	r2,-12(fp)
100111c0:	10800403 	ldbu	r2,16(r2)
100111c4:	10803fcc 	andi	r2,r2,255
100111c8:	1000191e 	bne	r2,zero,10011230 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100111cc:	e0bffd17 	ldw	r2,-12(fp)
100111d0:	10800317 	ldw	r2,12(r2)
100111d4:	e0fffd17 	ldw	r3,-12(fp)
100111d8:	18c00517 	ldw	r3,20(r3)
100111dc:	1809883a 	mov	r4,r3
100111e0:	103ee83a 	callr	r2
100111e4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100111e8:	e0bfff17 	ldw	r2,-4(fp)
100111ec:	1000031e 	bne	r2,zero,100111fc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100111f0:	e13ffd17 	ldw	r4,-12(fp)
100111f4:	00110c00 	call	100110c0 <alt_alarm_stop>
100111f8:	00000d06 	br	10011230 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100111fc:	e0bffd17 	ldw	r2,-12(fp)
10011200:	10c00217 	ldw	r3,8(r2)
10011204:	e0bfff17 	ldw	r2,-4(fp)
10011208:	1887883a 	add	r3,r3,r2
1001120c:	e0bffd17 	ldw	r2,-12(fp)
10011210:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10011214:	e0bffd17 	ldw	r2,-12(fp)
10011218:	10c00217 	ldw	r3,8(r2)
1001121c:	d0a6d817 	ldw	r2,-25760(gp)
10011220:	1880032e 	bgeu	r3,r2,10011230 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10011224:	e0bffd17 	ldw	r2,-12(fp)
10011228:	00c00044 	movi	r3,1
1001122c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10011230:	e0bffe17 	ldw	r2,-8(fp)
10011234:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10011238:	e0fffd17 	ldw	r3,-12(fp)
1001123c:	d0a00e04 	addi	r2,gp,-32712
10011240:	18bfcf1e 	bne	r3,r2,10011180 <__alt_data_end+0xf8011180>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10011244:	0001883a 	nop
}
10011248:	e037883a 	mov	sp,fp
1001124c:	dfc00117 	ldw	ra,4(sp)
10011250:	df000017 	ldw	fp,0(sp)
10011254:	dec00204 	addi	sp,sp,8
10011258:	f800283a 	ret

1001125c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1001125c:	deffff04 	addi	sp,sp,-4
10011260:	df000015 	stw	fp,0(sp)
10011264:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10011268:	000170fa 	wrctl	ienable,zero
}
1001126c:	e037883a 	mov	sp,fp
10011270:	df000017 	ldw	fp,0(sp)
10011274:	dec00104 	addi	sp,sp,4
10011278:	f800283a 	ret

1001127c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1001127c:	defffa04 	addi	sp,sp,-24
10011280:	dfc00515 	stw	ra,20(sp)
10011284:	df000415 	stw	fp,16(sp)
10011288:	df000404 	addi	fp,sp,16
1001128c:	e13ffe15 	stw	r4,-8(fp)
10011290:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011294:	e0bfff17 	ldw	r2,-4(fp)
10011298:	10800017 	ldw	r2,0(r2)
1001129c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100112a0:	e13ffe17 	ldw	r4,-8(fp)
100112a4:	00027180 	call	10002718 <strlen>
100112a8:	10800044 	addi	r2,r2,1
100112ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100112b0:	00000d06 	br	100112e8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100112b4:	e0bffc17 	ldw	r2,-16(fp)
100112b8:	10c00217 	ldw	r3,8(r2)
100112bc:	e0bffd17 	ldw	r2,-12(fp)
100112c0:	1809883a 	mov	r4,r3
100112c4:	e17ffe17 	ldw	r5,-8(fp)
100112c8:	100d883a 	mov	r6,r2
100112cc:	00115400 	call	10011540 <memcmp>
100112d0:	1000021e 	bne	r2,zero,100112dc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100112d4:	e0bffc17 	ldw	r2,-16(fp)
100112d8:	00000706 	br	100112f8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100112dc:	e0bffc17 	ldw	r2,-16(fp)
100112e0:	10800017 	ldw	r2,0(r2)
100112e4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100112e8:	e0fffc17 	ldw	r3,-16(fp)
100112ec:	e0bfff17 	ldw	r2,-4(fp)
100112f0:	18bff01e 	bne	r3,r2,100112b4 <__alt_data_end+0xf80112b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100112f4:	0005883a 	mov	r2,zero
}
100112f8:	e037883a 	mov	sp,fp
100112fc:	dfc00117 	ldw	ra,4(sp)
10011300:	df000017 	ldw	fp,0(sp)
10011304:	dec00204 	addi	sp,sp,8
10011308:	f800283a 	ret

1001130c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1001130c:	defffb04 	addi	sp,sp,-20
10011310:	dfc00415 	stw	ra,16(sp)
10011314:	df000315 	stw	fp,12(sp)
10011318:	df000304 	addi	fp,sp,12
1001131c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10011320:	00840074 	movhi	r2,4097
10011324:	108f7c04 	addi	r2,r2,15856
10011328:	10800017 	ldw	r2,0(r2)
1001132c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011330:	00003106 	br	100113f8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10011334:	e0bffd17 	ldw	r2,-12(fp)
10011338:	10800217 	ldw	r2,8(r2)
1001133c:	1009883a 	mov	r4,r2
10011340:	00027180 	call	10002718 <strlen>
10011344:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10011348:	e0bffd17 	ldw	r2,-12(fp)
1001134c:	10c00217 	ldw	r3,8(r2)
10011350:	e0bffe17 	ldw	r2,-8(fp)
10011354:	10bfffc4 	addi	r2,r2,-1
10011358:	1885883a 	add	r2,r3,r2
1001135c:	10800003 	ldbu	r2,0(r2)
10011360:	10803fcc 	andi	r2,r2,255
10011364:	1080201c 	xori	r2,r2,128
10011368:	10bfe004 	addi	r2,r2,-128
1001136c:	10800bd8 	cmpnei	r2,r2,47
10011370:	1000031e 	bne	r2,zero,10011380 <alt_find_file+0x74>
    {
      len -= 1;
10011374:	e0bffe17 	ldw	r2,-8(fp)
10011378:	10bfffc4 	addi	r2,r2,-1
1001137c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011380:	e0bffe17 	ldw	r2,-8(fp)
10011384:	e0ffff17 	ldw	r3,-4(fp)
10011388:	1885883a 	add	r2,r3,r2
1001138c:	10800003 	ldbu	r2,0(r2)
10011390:	10803fcc 	andi	r2,r2,255
10011394:	1080201c 	xori	r2,r2,128
10011398:	10bfe004 	addi	r2,r2,-128
1001139c:	10800be0 	cmpeqi	r2,r2,47
100113a0:	1000081e 	bne	r2,zero,100113c4 <alt_find_file+0xb8>
100113a4:	e0bffe17 	ldw	r2,-8(fp)
100113a8:	e0ffff17 	ldw	r3,-4(fp)
100113ac:	1885883a 	add	r2,r3,r2
100113b0:	10800003 	ldbu	r2,0(r2)
100113b4:	10803fcc 	andi	r2,r2,255
100113b8:	1080201c 	xori	r2,r2,128
100113bc:	10bfe004 	addi	r2,r2,-128
100113c0:	10000a1e 	bne	r2,zero,100113ec <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
100113c4:	e0bffd17 	ldw	r2,-12(fp)
100113c8:	10c00217 	ldw	r3,8(r2)
100113cc:	e0bffe17 	ldw	r2,-8(fp)
100113d0:	1809883a 	mov	r4,r3
100113d4:	e17fff17 	ldw	r5,-4(fp)
100113d8:	100d883a 	mov	r6,r2
100113dc:	00115400 	call	10011540 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100113e0:	1000021e 	bne	r2,zero,100113ec <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100113e4:	e0bffd17 	ldw	r2,-12(fp)
100113e8:	00000806 	br	1001140c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
100113ec:	e0bffd17 	ldw	r2,-12(fp)
100113f0:	10800017 	ldw	r2,0(r2)
100113f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100113f8:	e0fffd17 	ldw	r3,-12(fp)
100113fc:	00840074 	movhi	r2,4097
10011400:	108f7c04 	addi	r2,r2,15856
10011404:	18bfcb1e 	bne	r3,r2,10011334 <__alt_data_end+0xf8011334>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10011408:	0005883a 	mov	r2,zero
}
1001140c:	e037883a 	mov	sp,fp
10011410:	dfc00117 	ldw	ra,4(sp)
10011414:	df000017 	ldw	fp,0(sp)
10011418:	dec00204 	addi	sp,sp,8
1001141c:	f800283a 	ret

10011420 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011420:	defffa04 	addi	sp,sp,-24
10011424:	dfc00515 	stw	ra,20(sp)
10011428:	df000415 	stw	fp,16(sp)
1001142c:	dc000315 	stw	r16,12(sp)
10011430:	df000404 	addi	fp,sp,16
10011434:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10011438:	00bffa04 	movi	r2,-24
1001143c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011440:	e03ffc15 	stw	zero,-16(fp)
10011444:	00002106 	br	100114cc <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10011448:	04040074 	movhi	r16,4097
1001144c:	840afe04 	addi	r16,r16,11256
10011450:	e0bffc17 	ldw	r2,-16(fp)
10011454:	1009883a 	mov	r4,r2
10011458:	01400304 	movi	r5,12
1001145c:	000c8300 	call	1000c830 <__mulsi3>
10011460:	8085883a 	add	r2,r16,r2
10011464:	10800017 	ldw	r2,0(r2)
10011468:	1000151e 	bne	r2,zero,100114c0 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
1001146c:	04040074 	movhi	r16,4097
10011470:	840afe04 	addi	r16,r16,11256
10011474:	e0bffc17 	ldw	r2,-16(fp)
10011478:	1009883a 	mov	r4,r2
1001147c:	01400304 	movi	r5,12
10011480:	000c8300 	call	1000c830 <__mulsi3>
10011484:	8085883a 	add	r2,r16,r2
10011488:	e0fffe17 	ldw	r3,-8(fp)
1001148c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10011490:	00840074 	movhi	r2,4097
10011494:	108f8004 	addi	r2,r2,15872
10011498:	10c00017 	ldw	r3,0(r2)
1001149c:	e0bffc17 	ldw	r2,-16(fp)
100114a0:	1880040e 	bge	r3,r2,100114b4 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
100114a4:	00840074 	movhi	r2,4097
100114a8:	108f8004 	addi	r2,r2,15872
100114ac:	e0fffc17 	ldw	r3,-16(fp)
100114b0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
100114b4:	e0bffc17 	ldw	r2,-16(fp)
100114b8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
100114bc:	00000606 	br	100114d8 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100114c0:	e0bffc17 	ldw	r2,-16(fp)
100114c4:	10800044 	addi	r2,r2,1
100114c8:	e0bffc15 	stw	r2,-16(fp)
100114cc:	e0bffc17 	ldw	r2,-16(fp)
100114d0:	10800810 	cmplti	r2,r2,32
100114d4:	103fdc1e 	bne	r2,zero,10011448 <__alt_data_end+0xf8011448>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100114d8:	e0bffd17 	ldw	r2,-12(fp)
}
100114dc:	e6ffff04 	addi	sp,fp,-4
100114e0:	dfc00217 	ldw	ra,8(sp)
100114e4:	df000117 	ldw	fp,4(sp)
100114e8:	dc000017 	ldw	r16,0(sp)
100114ec:	dec00304 	addi	sp,sp,12
100114f0:	f800283a 	ret

100114f4 <atexit>:
100114f4:	200b883a 	mov	r5,r4
100114f8:	000d883a 	mov	r6,zero
100114fc:	0009883a 	mov	r4,zero
10011500:	000f883a 	mov	r7,zero
10011504:	00115bc1 	jmpi	100115bc <__register_exitproc>

10011508 <exit>:
10011508:	defffe04 	addi	sp,sp,-8
1001150c:	000b883a 	mov	r5,zero
10011510:	dc000015 	stw	r16,0(sp)
10011514:	dfc00115 	stw	ra,4(sp)
10011518:	2021883a 	mov	r16,r4
1001151c:	00116d00 	call	100116d0 <__call_exitprocs>
10011520:	00840074 	movhi	r2,4097
10011524:	108f7604 	addi	r2,r2,15832
10011528:	11000017 	ldw	r4,0(r2)
1001152c:	20800f17 	ldw	r2,60(r4)
10011530:	10000126 	beq	r2,zero,10011538 <exit+0x30>
10011534:	103ee83a 	callr	r2
10011538:	8009883a 	mov	r4,r16
1001153c:	00118640 	call	10011864 <_exit>

10011540 <memcmp>:
10011540:	01c000c4 	movi	r7,3
10011544:	3980192e 	bgeu	r7,r6,100115ac <memcmp+0x6c>
10011548:	2144b03a 	or	r2,r4,r5
1001154c:	11c4703a 	and	r2,r2,r7
10011550:	10000f26 	beq	r2,zero,10011590 <memcmp+0x50>
10011554:	20800003 	ldbu	r2,0(r4)
10011558:	28c00003 	ldbu	r3,0(r5)
1001155c:	10c0151e 	bne	r2,r3,100115b4 <memcmp+0x74>
10011560:	31bfff84 	addi	r6,r6,-2
10011564:	01ffffc4 	movi	r7,-1
10011568:	00000406 	br	1001157c <memcmp+0x3c>
1001156c:	20800003 	ldbu	r2,0(r4)
10011570:	28c00003 	ldbu	r3,0(r5)
10011574:	31bfffc4 	addi	r6,r6,-1
10011578:	10c00e1e 	bne	r2,r3,100115b4 <memcmp+0x74>
1001157c:	21000044 	addi	r4,r4,1
10011580:	29400044 	addi	r5,r5,1
10011584:	31fff91e 	bne	r6,r7,1001156c <__alt_data_end+0xf801156c>
10011588:	0005883a 	mov	r2,zero
1001158c:	f800283a 	ret
10011590:	20c00017 	ldw	r3,0(r4)
10011594:	28800017 	ldw	r2,0(r5)
10011598:	1880041e 	bne	r3,r2,100115ac <memcmp+0x6c>
1001159c:	31bfff04 	addi	r6,r6,-4
100115a0:	21000104 	addi	r4,r4,4
100115a4:	29400104 	addi	r5,r5,4
100115a8:	39bff936 	bltu	r7,r6,10011590 <__alt_data_end+0xf8011590>
100115ac:	303fe91e 	bne	r6,zero,10011554 <__alt_data_end+0xf8011554>
100115b0:	003ff506 	br	10011588 <__alt_data_end+0xf8011588>
100115b4:	10c5c83a 	sub	r2,r2,r3
100115b8:	f800283a 	ret

100115bc <__register_exitproc>:
100115bc:	00840074 	movhi	r2,4097
100115c0:	defffa04 	addi	sp,sp,-24
100115c4:	108f7604 	addi	r2,r2,15832
100115c8:	dc000315 	stw	r16,12(sp)
100115cc:	14000017 	ldw	r16,0(r2)
100115d0:	dc400415 	stw	r17,16(sp)
100115d4:	dfc00515 	stw	ra,20(sp)
100115d8:	80805217 	ldw	r2,328(r16)
100115dc:	2023883a 	mov	r17,r4
100115e0:	10003626 	beq	r2,zero,100116bc <__register_exitproc+0x100>
100115e4:	10c00117 	ldw	r3,4(r2)
100115e8:	010007c4 	movi	r4,31
100115ec:	20c00e16 	blt	r4,r3,10011628 <__register_exitproc+0x6c>
100115f0:	1a400044 	addi	r9,r3,1
100115f4:	8800211e 	bne	r17,zero,1001167c <__register_exitproc+0xc0>
100115f8:	18c00084 	addi	r3,r3,2
100115fc:	18c7883a 	add	r3,r3,r3
10011600:	18c7883a 	add	r3,r3,r3
10011604:	12400115 	stw	r9,4(r2)
10011608:	10c7883a 	add	r3,r2,r3
1001160c:	19400015 	stw	r5,0(r3)
10011610:	0005883a 	mov	r2,zero
10011614:	dfc00517 	ldw	ra,20(sp)
10011618:	dc400417 	ldw	r17,16(sp)
1001161c:	dc000317 	ldw	r16,12(sp)
10011620:	dec00604 	addi	sp,sp,24
10011624:	f800283a 	ret
10011628:	00800034 	movhi	r2,0
1001162c:	10800004 	addi	r2,r2,0
10011630:	10002526 	beq	r2,zero,100116c8 <__register_exitproc+0x10c>
10011634:	01006404 	movi	r4,400
10011638:	d9400015 	stw	r5,0(sp)
1001163c:	d9800115 	stw	r6,4(sp)
10011640:	d9c00215 	stw	r7,8(sp)
10011644:	00000000 	call	10000000 <__reset>
10011648:	d9400017 	ldw	r5,0(sp)
1001164c:	d9800117 	ldw	r6,4(sp)
10011650:	d9c00217 	ldw	r7,8(sp)
10011654:	10001c26 	beq	r2,zero,100116c8 <__register_exitproc+0x10c>
10011658:	80c05217 	ldw	r3,328(r16)
1001165c:	10000115 	stw	zero,4(r2)
10011660:	02400044 	movi	r9,1
10011664:	10c00015 	stw	r3,0(r2)
10011668:	80805215 	stw	r2,328(r16)
1001166c:	10006215 	stw	zero,392(r2)
10011670:	10006315 	stw	zero,396(r2)
10011674:	0007883a 	mov	r3,zero
10011678:	883fdf26 	beq	r17,zero,100115f8 <__alt_data_end+0xf80115f8>
1001167c:	18d1883a 	add	r8,r3,r3
10011680:	4211883a 	add	r8,r8,r8
10011684:	1211883a 	add	r8,r2,r8
10011688:	41802215 	stw	r6,136(r8)
1001168c:	01000044 	movi	r4,1
10011690:	11806217 	ldw	r6,392(r2)
10011694:	20c8983a 	sll	r4,r4,r3
10011698:	310cb03a 	or	r6,r6,r4
1001169c:	11806215 	stw	r6,392(r2)
100116a0:	41c04215 	stw	r7,264(r8)
100116a4:	01800084 	movi	r6,2
100116a8:	89bfd31e 	bne	r17,r6,100115f8 <__alt_data_end+0xf80115f8>
100116ac:	11806317 	ldw	r6,396(r2)
100116b0:	3108b03a 	or	r4,r6,r4
100116b4:	11006315 	stw	r4,396(r2)
100116b8:	003fcf06 	br	100115f8 <__alt_data_end+0xf80115f8>
100116bc:	80805304 	addi	r2,r16,332
100116c0:	80805215 	stw	r2,328(r16)
100116c4:	003fc706 	br	100115e4 <__alt_data_end+0xf80115e4>
100116c8:	00bfffc4 	movi	r2,-1
100116cc:	003fd106 	br	10011614 <__alt_data_end+0xf8011614>

100116d0 <__call_exitprocs>:
100116d0:	00840074 	movhi	r2,4097
100116d4:	108f7604 	addi	r2,r2,15832
100116d8:	10800017 	ldw	r2,0(r2)
100116dc:	defff404 	addi	sp,sp,-48
100116e0:	dd800815 	stw	r22,32(sp)
100116e4:	d8800015 	stw	r2,0(sp)
100116e8:	10805204 	addi	r2,r2,328
100116ec:	dd000615 	stw	r20,24(sp)
100116f0:	dc800415 	stw	r18,16(sp)
100116f4:	dfc00b15 	stw	ra,44(sp)
100116f8:	df000a15 	stw	fp,40(sp)
100116fc:	ddc00915 	stw	r23,36(sp)
10011700:	dd400715 	stw	r21,28(sp)
10011704:	dcc00515 	stw	r19,20(sp)
10011708:	dc400315 	stw	r17,12(sp)
1001170c:	dc000215 	stw	r16,8(sp)
10011710:	2025883a 	mov	r18,r4
10011714:	2829883a 	mov	r20,r5
10011718:	d8800115 	stw	r2,4(sp)
1001171c:	05bfffc4 	movi	r22,-1
10011720:	d8800017 	ldw	r2,0(sp)
10011724:	14c05217 	ldw	r19,328(r2)
10011728:	98001d26 	beq	r19,zero,100117a0 <__call_exitprocs+0xd0>
1001172c:	dd400117 	ldw	r21,4(sp)
10011730:	98800117 	ldw	r2,4(r19)
10011734:	173fffc4 	addi	fp,r2,-1
10011738:	e0000d16 	blt	fp,zero,10011770 <__call_exitprocs+0xa0>
1001173c:	14000044 	addi	r16,r2,1
10011740:	8421883a 	add	r16,r16,r16
10011744:	8421883a 	add	r16,r16,r16
10011748:	84402004 	addi	r17,r16,128
1001174c:	9c63883a 	add	r17,r19,r17
10011750:	9c21883a 	add	r16,r19,r16
10011754:	a0001e26 	beq	r20,zero,100117d0 <__call_exitprocs+0x100>
10011758:	80804017 	ldw	r2,256(r16)
1001175c:	15001c26 	beq	r2,r20,100117d0 <__call_exitprocs+0x100>
10011760:	e73fffc4 	addi	fp,fp,-1
10011764:	843fff04 	addi	r16,r16,-4
10011768:	8c7fff04 	addi	r17,r17,-4
1001176c:	e5bff91e 	bne	fp,r22,10011754 <__alt_data_end+0xf8011754>
10011770:	00800034 	movhi	r2,0
10011774:	10800004 	addi	r2,r2,0
10011778:	10000926 	beq	r2,zero,100117a0 <__call_exitprocs+0xd0>
1001177c:	98800117 	ldw	r2,4(r19)
10011780:	1000311e 	bne	r2,zero,10011848 <__call_exitprocs+0x178>
10011784:	98800017 	ldw	r2,0(r19)
10011788:	10003426 	beq	r2,zero,1001185c <__call_exitprocs+0x18c>
1001178c:	9809883a 	mov	r4,r19
10011790:	a8800015 	stw	r2,0(r21)
10011794:	00000000 	call	10000000 <__reset>
10011798:	acc00017 	ldw	r19,0(r21)
1001179c:	983fe41e 	bne	r19,zero,10011730 <__alt_data_end+0xf8011730>
100117a0:	dfc00b17 	ldw	ra,44(sp)
100117a4:	df000a17 	ldw	fp,40(sp)
100117a8:	ddc00917 	ldw	r23,36(sp)
100117ac:	dd800817 	ldw	r22,32(sp)
100117b0:	dd400717 	ldw	r21,28(sp)
100117b4:	dd000617 	ldw	r20,24(sp)
100117b8:	dcc00517 	ldw	r19,20(sp)
100117bc:	dc800417 	ldw	r18,16(sp)
100117c0:	dc400317 	ldw	r17,12(sp)
100117c4:	dc000217 	ldw	r16,8(sp)
100117c8:	dec00c04 	addi	sp,sp,48
100117cc:	f800283a 	ret
100117d0:	98800117 	ldw	r2,4(r19)
100117d4:	80c00017 	ldw	r3,0(r16)
100117d8:	10bfffc4 	addi	r2,r2,-1
100117dc:	17001526 	beq	r2,fp,10011834 <__call_exitprocs+0x164>
100117e0:	80000015 	stw	zero,0(r16)
100117e4:	183fde26 	beq	r3,zero,10011760 <__alt_data_end+0xf8011760>
100117e8:	00800044 	movi	r2,1
100117ec:	1708983a 	sll	r4,r2,fp
100117f0:	98806217 	ldw	r2,392(r19)
100117f4:	9dc00117 	ldw	r23,4(r19)
100117f8:	2084703a 	and	r2,r4,r2
100117fc:	1000061e 	bne	r2,zero,10011818 <__call_exitprocs+0x148>
10011800:	183ee83a 	callr	r3
10011804:	98800117 	ldw	r2,4(r19)
10011808:	15ffc51e 	bne	r2,r23,10011720 <__alt_data_end+0xf8011720>
1001180c:	a8800017 	ldw	r2,0(r21)
10011810:	14ffd326 	beq	r2,r19,10011760 <__alt_data_end+0xf8011760>
10011814:	003fc206 	br	10011720 <__alt_data_end+0xf8011720>
10011818:	98806317 	ldw	r2,396(r19)
1001181c:	2084703a 	and	r2,r4,r2
10011820:	1000061e 	bne	r2,zero,1001183c <__call_exitprocs+0x16c>
10011824:	89400017 	ldw	r5,0(r17)
10011828:	9009883a 	mov	r4,r18
1001182c:	183ee83a 	callr	r3
10011830:	003ff406 	br	10011804 <__alt_data_end+0xf8011804>
10011834:	9f000115 	stw	fp,4(r19)
10011838:	003fea06 	br	100117e4 <__alt_data_end+0xf80117e4>
1001183c:	89000017 	ldw	r4,0(r17)
10011840:	183ee83a 	callr	r3
10011844:	003fef06 	br	10011804 <__alt_data_end+0xf8011804>
10011848:	98800017 	ldw	r2,0(r19)
1001184c:	982b883a 	mov	r21,r19
10011850:	1027883a 	mov	r19,r2
10011854:	983fb61e 	bne	r19,zero,10011730 <__alt_data_end+0xf8011730>
10011858:	003fd106 	br	100117a0 <__alt_data_end+0xf80117a0>
1001185c:	0005883a 	mov	r2,zero
10011860:	003ffa06 	br	1001184c <__alt_data_end+0xf801184c>

10011864 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10011864:	defffd04 	addi	sp,sp,-12
10011868:	df000215 	stw	fp,8(sp)
1001186c:	df000204 	addi	fp,sp,8
10011870:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10011874:	0001883a 	nop
10011878:	e0bfff17 	ldw	r2,-4(fp)
1001187c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10011880:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10011884:	10000226 	beq	r2,zero,10011890 <_exit+0x2c>
    ALT_SIM_FAIL();
10011888:	002af070 	cmpltui	zero,zero,43969
1001188c:	00000106 	br	10011894 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10011890:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10011894:	003fff06 	br	10011894 <__alt_data_end+0xf8011894>
