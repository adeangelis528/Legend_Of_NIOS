
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000120c4 memsz 0x000120c4 flags r-x
    LOAD off    0x000130e4 vaddr 0x100120e4 paddr 0x10013bd0 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000156bc vaddr 0x100156bc paddr 0x100156bc align 2**12
         filesz 0x00000000 memsz 0x00000174 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000114b0  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a78  1001166c  1001166c  0001266c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  100120e4  10013bd0  000130e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000174  100156bc  100156bc  000156bc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014bd0  2**0
                  CONTENTS
  7 .sdram        00000000  10015830  10015830  00014bd0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014bd0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d88  00000000  00000000  00014bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00024232  00000000  00000000  00015980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009243  00000000  00000000  00039bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b46b  00000000  00000000  00042df5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000239c  00000000  00000000  0004e260  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003407  00000000  00000000  000505fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016ea9  00000000  00000000  00053a03  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006a8ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013a8  00000000  00000000  0006a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006f0c9  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006f0cc  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006f0d8  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006f0d9  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006f0da  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006f0de  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006f0e2  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006f0e6  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006f0f1  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006f0fc  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006f107  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000004b  00000000  00000000  0006f112  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0009d08a  00000000  00000000  0006f15d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
1001166c l    d  .rodata	00000000 .rodata
100120e4 l    d  .rwdata	00000000 .rwdata
100156bc l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10015830 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 enemyController.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
100156bc l     O .bss	00000002 ctl_reg.3319
100156be l     O .bss	00000002 no_device.3320
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10011e2a l     O .rodata	00000010 zeroes.4181
10011e3a l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100047d4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000637c l     F .text	00000008 __fp_lock
10006384 l     F .text	00000008 __fp_unlock
10006398 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
100120e4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10012528 l     O .rwdata	00000020 lc_ctype_charset
10012508 l     O .rwdata	00000020 lc_message_charset
10012548 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10011e6c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
100098c8 l     F .text	000000fc __sprint_r.part.0
10011fa0 l     O .rodata	00000010 blanks.4125
10011f90 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000c4d8 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000ee28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000ef50 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000ef7c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000f084 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000f180 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000f264 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000f448 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10013bc0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000f6fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000f84c l     F .text	00000038 alt_dev_reg
10012b30 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000fb28 l     F .text	00000204 altera_avalon_jtag_uart_irq
1000fd2c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10010600 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10010a98 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10010bf0 l     F .text	00000050 alt_get_errno
10010c40 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10008f08 g     F .text	00000074 _mprec_log10
10008ff4 g     F .text	0000008c __any_on
1000b2f4 g     F .text	00000054 _isatty_r
10011e78 g     O .rodata	00000028 __mprec_tinytens
1000f390 g     F .text	00000078 alt_main
100023a4 g     F .text	000000b8 _puts_r
10015730 g     O .bss	00000100 alt_irq
1000b348 g     F .text	0000005c _lseek_r
10013bd0 g       *ABS*	00000000 __flash_rwdata_start
1000d848 g     F .text	00000084 .hidden __eqdf2
10015830 g       *ABS*	00000000 __alt_heap_start
10002368 g     F .text	0000003c printf
1000b570 g     F .text	0000009c _wcrtomb_r
100097c0 g     F .text	0000005c __sseek
100066e0 g     F .text	00000010 __sinit
1000b400 g     F .text	00000154 __swbuf_r
10007158 g     F .text	0000007c _setlocale_r
10006538 g     F .text	00000078 __sfmoreglue
1000f428 g     F .text	00000020 __malloc_unlock
10002240 g     F .text	00000080 UsbGetRetryCnt
10007db8 g     F .text	0000015c memmove
10000394 g     F .text	0000004c IO_init
100066c8 g     F .text	00000018 _cleanup
10008038 g     F .text	000000a8 _Balloc
1000d8cc g     F .text	000000e0 .hidden __gtdf2
10011030 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000b29c g     F .text	00000058 _fstat_r
100156d8 g     O .bss	00000004 errno
1000973c g     F .text	00000008 __seofread
100156e0 g     O .bss	00000004 alt_argv
1001bb90 g       *ABS*	00000000 _gp
1000f6cc g     F .text	00000030 usleep
100129b0 g     O .rwdata	00000180 alt_fd_list
10011050 g     F .text	00000090 alt_find_dev
10007c80 g     F .text	00000138 memcpy
1000638c g     F .text	0000000c _cleanup_r
1000ec50 g     F .text	000000d0 .hidden __floatsidf
10010b78 g     F .text	00000078 alt_io_redirect
1000d9ac g     F .text	000000e0 .hidden __ltdf2
1001166c g       *ABS*	00000000 __DTOR_END__
1000245c g     F .text	00000014 puts
10009620 g     F .text	00000074 __fpclassifyd
10008e64 g     F .text	000000a4 __ratio
1000ae00 g     F .text	00000024 __vfiprintf_internal
1000ff28 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
1000233c g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000c5f4 g     F .text	00000008 .hidden __udivsi3
1000f0d4 g     F .text	000000ac isatty
10011ec8 g     O .rodata	000000c8 __mprec_tens
100071d4 g     F .text	0000000c __locale_charset
100156d4 g     O .bss	00000004 __malloc_top_pad
100018e0 g     F .text	00000264 UsbGetConfigDesc2
10013b98 g     O .rwdata	00000004 __mb_cur_max
10007204 g     F .text	0000000c _localeconv_r
10008460 g     F .text	0000003c __i2b
10006b44 g     F .text	000004a4 __sfvwrite_r
10009694 g     F .text	00000054 _sbrk_r
1000b3a4 g     F .text	0000005c _read_r
10013bb8 g     O .rwdata	00000004 alt_max_fd
1000afac g     F .text	00000100 _fclose_r
1000634c g     F .text	00000030 fflush
100156d0 g     O .bss	00000004 __malloc_max_sbrked_mem
1000c62c g     F .text	0000089c .hidden __adddf3
10008c0c g     F .text	0000011c __b2d
1000bebc g     F .text	0000061c .hidden __umoddi3
1000f2b4 g     F .text	000000dc lseek
10013b90 g     O .rwdata	00000004 _global_impure_ptr
10009080 g     F .text	000005a0 _realloc_r
10015830 g       *ABS*	00000000 __bss_end
100109a8 g     F .text	000000f0 alt_iic_isr_register
10010f2c g     F .text	00000104 alt_tick
1000b87c g     F .text	00000640 .hidden __udivdi3
1000b0c0 g     F .text	00000184 _fputwc_r
10011ea0 g     O .rodata	00000028 __mprec_bigtens
10008244 g     F .text	00000104 __s2b
1000ed20 g     F .text	000000a4 .hidden __floatunsidf
100089b4 g     F .text	00000060 __mcmp
10001340 g     F .text	000000fc UsbSetAddress
10006700 g     F .text	00000018 __fp_lock_all
1001095c g     F .text	0000004c alt_ic_irq_enabled
10010e94 g     F .text	00000098 alt_alarm_stop
100156e8 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
10012988 g     O .rwdata	00000028 alt_dev_null
100105e4 g     F .text	0000001c alt_dcache_flush_all
10008348 g     F .text	00000068 __hi0bits
10000438 g     F .text	00000054 IO_read
1000ebc8 g     F .text	00000088 .hidden __fixdfsi
10013bd0 g       *ABS*	00000000 __ram_rwdata_end
10013bb0 g     O .rwdata	00000008 alt_dev_list
1000f74c g     F .text	00000100 write
100120e4 g       *ABS*	00000000 __ram_rodata_end
1000efcc g     F .text	000000b8 fstat
1000d9ac g     F .text	000000e0 .hidden __ledf2
100022c0 g     F .text	0000007c UsbPrintMem
1000872c g     F .text	00000140 __pow5mult
100099dc g     F .text	00001424 ___vfiprintf_internal_r
100156c8 g     O .bss	00000004 __nlocale_changed
1000c5fc g     F .text	00000008 .hidden __umodsi3
10015830 g       *ABS*	00000000 end
1000fa64 g     F .text	000000c4 altera_avalon_jtag_uart_init
1001166c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000edc4 g     F .text	00000064 .hidden __clzsi2
10010134 g     F .text	00000218 altera_avalon_jtag_uart_write
100066f0 g     F .text	00000004 __sfp_lock_acquire
10007b98 g     F .text	000000e8 memchr
10002584 g     F .text	000020fc ___vfprintf_internal_r
10001c40 g     F .text	000000fc UsbClassRequest
10006854 g     F .text	000002f0 _free_r
100071e0 g     F .text	00000010 __locale_mb_cur_max
100114a4 g     F .text	00000194 __call_exitprocs
100156c4 g     O .bss	00000004 __mlocale_changed
10013b9c g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
100156ec g     O .bss	00000004 _alt_tick_rate
10002488 g     F .text	00000064 rand
1000886c g     F .text	00000148 __lshift
100156f0 g     O .bss	00000004 _alt_nticks
1000f498 g     F .text	00000104 read
1000f8b8 g     F .text	00000048 alt_sys_init
10011390 g     F .text	00000114 __register_exitproc
1000849c g     F .text	00000290 __multiply
1000fdd4 g     F .text	00000068 altera_avalon_jtag_uart_close
1000c604 g     F .text	00000028 .hidden __mulsi3
100120e4 g       *ABS*	00000000 __ram_rwdata_start
1001166c g       *ABS*	00000000 __ram_rodata_start
10015708 g     O .bss	00000028 __malloc_current_mallinfo
10008d28 g     F .text	0000013c __d2b
1000143c g     F .text	00000144 UsbGetDeviceDesc1
1000f900 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100111f4 g     F .text	000000d4 alt_get_fd
1001048c g     F .text	00000158 alt_busy_sleep
1000ae80 g     F .text	00000054 _close_r
10011314 g     F .text	0000007c memcmp
1000f9c0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10015830 g       *ABS*	00000000 __alt_stack_base
1000fa10 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100046a4 g     F .text	00000130 __swsetup_r
1000cec8 g     F .text	00000980 .hidden __divdf3
100065b0 g     F .text	00000118 __sfp
10008f7c g     F .text	00000078 __copybits
10012580 g     O .rwdata	00000408 __malloc_av_
100066fc g     F .text	00000004 __sinit_lock_release
1000da8c g     F .text	0000086c .hidden __muldf3
100096e8 g     F .text	00000054 __sread
100021bc g     F .text	00000084 UsbWaitTDListDone
100110e0 g     F .text	00000114 alt_find_file
10010650 g     F .text	000000a4 alt_dev_llist_insert
1000f408 g     F .text	00000020 __malloc_lock
1000f61c g     F .text	000000b0 sbrk
10006124 g     F .text	00000228 _fflush_r
1000aed4 g     F .text	000000d8 _calloc_r
100156bc g       *ABS*	00000000 __bss_start
100156f4 g     O .bss	00000014 enemyCounter
10007f14 g     F .text	00000124 memset
1000048c g     F .text	00000d5c main
100156e4 g     O .bss	00000004 alt_envp
100156cc g     O .bss	00000004 __malloc_max_total_mem
1000f960 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10001b44 g     F .text	000000fc UsbSetConfig
1000b554 g     F .text	0000001c __swbuf
10002470 g     F .text	00000018 srand
1000981c g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000b0ac g     F .text	00000014 fclose
100049fc g     F .text	00001728 _dtoa_r
100073f0 g     F .text	000007a8 _malloc_r
1000b6e4 g     F .text	00000030 __ascii_wctomb
10013bbc g     O .rwdata	00000004 alt_errno
10006fe8 g     F .text	000000b8 _fwalk
1000c544 g     F .text	00000054 .hidden __divsi3
10006730 g     F .text	00000124 _malloc_trim_r
10001d3c g     F .text	00000144 UsbGetHidDesc
1001166c g       *ABS*	00000000 __CTOR_END__
10009824 g     F .text	000000a4 strcmp
1001166c g       *ABS*	00000000 __flash_rodata_start
1001166c g       *ABS*	00000000 __DTOR_LIST__
1000d848 g     F .text	00000084 .hidden __nedf2
1000123c g     F .text	00000044 UsbRead
1000f884 g     F .text	00000034 alt_irq_init
1000f59c g     F .text	00000080 alt_release_fd
10011fb0 g     O .rodata	00000100 .hidden __clz_tab
100156c0 g     O .bss	00000004 _PathLocale
100112c8 g     F .text	00000014 atexit
1000ae24 g     F .text	0000005c _write_r
10007210 g     F .text	0000001c setlocale
10013b94 g     O .rwdata	00000004 _impure_ptr
100156dc g     O .bss	00000004 alt_argc
10010750 g     F .text	0000005c _do_dtors
100071fc g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10008bac g     F .text	00000060 __ulp
10006718 g     F .text	00000018 __fp_unlock_all
10013ba8 g     O .rwdata	00000008 alt_fs_list
10001e80 g     F .text	0000033c UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000722c g     F .text	0000000c localeconv
100107c8 g     F .text	00000050 alt_ic_isr_register
10013bd0 g       *ABS*	00000000 _edata
10015830 g       *ABS*	00000000 _end
100011e8 g     F .text	00000054 UsbWrite
100001bc g       *ABS*	00000000 __ram_exceptions_end
1000fe3c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
100108b8 g     F .text	000000a4 alt_ic_irq_disable
10009744 g     F .text	0000007c __swrite
10013ba0 g     O .rwdata	00000004 __malloc_trim_threshold
100071f0 g     F .text	0000000c __locale_msgcharset
100112dc g     F .text	00000038 exit
100070a0 g     F .text	000000b8 _fwalk_reent
10008a14 g     F .text	00000198 __mdiff
1000c598 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100066f4 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100003e0 g     F .text	00000058 IO_write
10011638 g     F .text	00000034 _exit
1001034c g     F .text	00000140 alt_alarm_start
1000b770 g     F .text	0000010c .hidden __muldi3
10007238 g     F .text	000001b8 __smakebuf_r
100024ec g     F .text	00000098 strlen
10010d34 g     F .text	00000160 open
1000d8cc g     F .text	000000e0 .hidden __gedf2
10013ba4 g     O .rwdata	00000004 __wctomb
100099c4 g     F .text	00000018 __sprint_r
100107ac g     F .text	0000001c alt_icache_flush_all
10013bc4 g     O .rwdata	00000004 alt_priority_mask
10010818 g     F .text	000000a0 alt_ic_irq_enable
10004680 g     F .text	00000024 __vfprintf_internal
1000b714 g     F .text	0000005c _wctomb_r
1000e2f8 g     F .text	000008d0 .hidden __subdf3
100083b0 g     F .text	000000b0 __lo0bits
10001754 g     F .text	0000018c UsbGetConfigDesc1
10013bc8 g     O .rwdata	00000008 alt_alarm_list
100106f4 g     F .text	0000005c _do_ctors
10001280 g     F .text	000000c0 UsbSoftReset
1000b60c g     F .text	000000d8 wcrtomb
1000ee78 g     F .text	000000d8 close
10001580 g     F .text	000001d4 UsbGetDeviceDesc2
1000f1e4 g     F .text	00000080 alt_load
100001f8 g     F .text	0000019c updateEnemies
1000b244 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
100066f8 g     F .text	00000004 __sinit_lock_acquire
10008108 g     F .text	0000013c __multadd
100080e0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00840074 	movhi	r2,4097
10000130:	1095cc04 	addi	r2,r2,22320
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	00840074 	movhi	r2,4097
10000148:	1095cc04 	addi	r2,r2,22320
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6aee414 	ori	gp,gp,48016
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	1095af14 	ori	r2,r2,22204

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18d60c14 	ori	r3,r3,22576

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	000f1e40 	call	1000f1e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	000f3900 	call	1000f390 <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <updateEnemies>:

int enemyCounter[5] = {0,0,0,0,0};


void updateEnemies()
{
100001f8:	defff704 	addi	sp,sp,-36
100001fc:	dfc00815 	stw	ra,32(sp)
10000200:	df000715 	stw	fp,28(sp)
10000204:	df000704 	addi	fp,sp,28

	*select_addr = 0;
10000208:	00802004 	movi	r2,128
1000020c:	10000015 	stw	zero,0(r2)
	*entity_read_addr = 1;
10000210:	00801c04 	movi	r2,112
10000214:	00c00044 	movi	r3,1
10000218:	10c00015 	stw	r3,0(r2)
	int player_x = *entity_x_addr;
1000021c:	00801004 	movi	r2,64
10000220:	10800017 	ldw	r2,0(r2)
10000224:	e0bffa15 	stw	r2,-24(fp)
	int player_y = *entity_y_addr;
10000228:	00800c04 	movi	r2,48
1000022c:	10800017 	ldw	r2,0(r2)
10000230:	e0bffb15 	stw	r2,-20(fp)
	*entity_read_addr = 0;
10000234:	00801c04 	movi	r2,112
10000238:	10000015 	stw	zero,0(r2)

	int i = 0;
1000023c:	e03ff915 	stw	zero,-28(fp)
	for(i = 1; i <= 5; i++)
10000240:	00800044 	movi	r2,1
10000244:	e0bff915 	stw	r2,-28(fp)
10000248:	00004a06 	br	10000374 <updateEnemies+0x17c>
	{
		*select_addr = i;
1000024c:	00802004 	movi	r2,128
10000250:	e0fff917 	ldw	r3,-28(fp)
10000254:	10c00015 	stw	r3,0(r2)
		*entity_read_addr = 1;
10000258:	00801c04 	movi	r2,112
1000025c:	00c00044 	movi	r3,1
10000260:	10c00015 	stw	r3,0(r2)
		int enemy_x = *entity_x_addr;
10000264:	00801004 	movi	r2,64
10000268:	10800017 	ldw	r2,0(r2)
1000026c:	e0bffc15 	stw	r2,-16(fp)
		int enemy_y = *entity_y_addr;
10000270:	00800c04 	movi	r2,48
10000274:	10800017 	ldw	r2,0(r2)
10000278:	e0bffd15 	stw	r2,-12(fp)
		int enemy_active = *entity_active_addr;
1000027c:	00800804 	movi	r2,32
10000280:	10800017 	ldw	r2,0(r2)
10000284:	e0bffe15 	stw	r2,-8(fp)
		*entity_read_addr = 0;
10000288:	00801c04 	movi	r2,112
1000028c:	10000015 	stw	zero,0(r2)
		if(enemy_active && (enemyCounter[i-1] > 400))
10000290:	e0bffe17 	ldw	r2,-8(fp)
10000294:	10002526 	beq	r2,zero,1000032c <updateEnemies+0x134>
10000298:	e0bff917 	ldw	r2,-28(fp)
1000029c:	10ffffc4 	addi	r3,r2,-1
100002a0:	00840074 	movhi	r2,4097
100002a4:	1095bd04 	addi	r2,r2,22260
100002a8:	18c7883a 	add	r3,r3,r3
100002ac:	18c7883a 	add	r3,r3,r3
100002b0:	10c5883a 	add	r2,r2,r3
100002b4:	10800017 	ldw	r2,0(r2)
100002b8:	10806450 	cmplti	r2,r2,401
100002bc:	10001b1e 	bne	r2,zero,1000032c <updateEnemies+0x134>
		{
			int dir = rand() % 4;
100002c0:	00024880 	call	10002488 <rand>
100002c4:	1007883a 	mov	r3,r2
100002c8:	00a00034 	movhi	r2,32768
100002cc:	108000c4 	addi	r2,r2,3
100002d0:	1884703a 	and	r2,r3,r2
100002d4:	1000040e 	bge	r2,zero,100002e8 <updateEnemies+0xf0>
100002d8:	10bfffc4 	addi	r2,r2,-1
100002dc:	00ffff04 	movi	r3,-4
100002e0:	10c4b03a 	or	r2,r2,r3
100002e4:	10800044 	addi	r2,r2,1
100002e8:	e0bfff15 	stw	r2,-4(fp)
			*entity_write_addr = 1;
100002ec:	00801804 	movi	r2,96
100002f0:	00c00044 	movi	r3,1
100002f4:	10c00015 	stw	r3,0(r2)
			*entity_dir_addr = dir;
100002f8:	00801404 	movi	r2,80
100002fc:	e0ffff17 	ldw	r3,-4(fp)
10000300:	10c00015 	stw	r3,0(r2)
			*entity_write_addr = 0;
10000304:	00801804 	movi	r2,96
10000308:	10000015 	stw	zero,0(r2)
			enemyCounter[i-1] = 0;
1000030c:	e0bff917 	ldw	r2,-28(fp)
10000310:	10ffffc4 	addi	r3,r2,-1
10000314:	00840074 	movhi	r2,4097
10000318:	1095bd04 	addi	r2,r2,22260
1000031c:	18c7883a 	add	r3,r3,r3
10000320:	18c7883a 	add	r3,r3,r3
10000324:	10c5883a 	add	r2,r2,r3
10000328:	10000015 	stw	zero,0(r2)
		}
		enemyCounter[i-1] ++;
1000032c:	e0bff917 	ldw	r2,-28(fp)
10000330:	10bfffc4 	addi	r2,r2,-1
10000334:	00c40074 	movhi	r3,4097
10000338:	18d5bd04 	addi	r3,r3,22260
1000033c:	1089883a 	add	r4,r2,r2
10000340:	2109883a 	add	r4,r4,r4
10000344:	1907883a 	add	r3,r3,r4
10000348:	18c00017 	ldw	r3,0(r3)
1000034c:	19000044 	addi	r4,r3,1
10000350:	00c40074 	movhi	r3,4097
10000354:	18d5bd04 	addi	r3,r3,22260
10000358:	1085883a 	add	r2,r2,r2
1000035c:	1085883a 	add	r2,r2,r2
10000360:	1885883a 	add	r2,r3,r2
10000364:	11000015 	stw	r4,0(r2)
	int player_x = *entity_x_addr;
	int player_y = *entity_y_addr;
	*entity_read_addr = 0;

	int i = 0;
	for(i = 1; i <= 5; i++)
10000368:	e0bff917 	ldw	r2,-28(fp)
1000036c:	10800044 	addi	r2,r2,1
10000370:	e0bff915 	stw	r2,-28(fp)
10000374:	e0bff917 	ldw	r2,-28(fp)
10000378:	10800190 	cmplti	r2,r2,6
1000037c:	103fb31e 	bne	r2,zero,1000024c <__alt_data_end+0xf800024c>
			enemyCounter[i-1] = 0;
		}
		enemyCounter[i-1] ++;
	}

}
10000380:	e037883a 	mov	sp,fp
10000384:	dfc00117 	ldw	ra,4(sp)
10000388:	df000017 	ldw	fp,0(sp)
1000038c:	dec00204 	addi	sp,sp,8
10000390:	f800283a 	ret

10000394 <IO_init>:
#define otg_hpi_cs			(volatile char*) 0x00d0 //OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*) OTG_HPI_W_BASE


void IO_init(void)
{
10000394:	deffff04 	addi	sp,sp,-4
10000398:	df000015 	stw	fp,0(sp)
1000039c:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 0;
100003a0:	00803404 	movi	r2,208
100003a4:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 1;
100003a8:	00802804 	movi	r2,160
100003ac:	00c00044 	movi	r3,1
100003b0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
100003b4:	00802404 	movi	r2,144
100003b8:	00c00044 	movi	r3,1
100003bc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100003c0:	00803004 	movi	r2,192
100003c4:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100003c8:	00802c04 	movi	r2,176
100003cc:	10000015 	stw	zero,0(r2)
}
100003d0:	e037883a 	mov	sp,fp
100003d4:	df000017 	ldw	fp,0(sp)
100003d8:	dec00104 	addi	sp,sp,4
100003dc:	f800283a 	ret

100003e0 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
100003e0:	defffd04 	addi	sp,sp,-12
100003e4:	df000215 	stw	fp,8(sp)
100003e8:	df000204 	addi	fp,sp,8
100003ec:	2007883a 	mov	r3,r4
100003f0:	2805883a 	mov	r2,r5
100003f4:	e0fffe05 	stb	r3,-8(fp)
100003f8:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
100003fc:	00803004 	movi	r2,192
10000400:	e0fffe03 	ldbu	r3,-8(fp)
10000404:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 0;
10000408:	00802404 	movi	r2,144
1000040c:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
10000410:	00802c04 	movi	r2,176
10000414:	e0ffff0b 	ldhu	r3,-4(fp)
10000418:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
1000041c:	00802404 	movi	r2,144
10000420:	00c00044 	movi	r3,1
10000424:	10c00005 	stb	r3,0(r2)
}
10000428:	e037883a 	mov	sp,fp
1000042c:	df000017 	ldw	fp,0(sp)
10000430:	dec00104 	addi	sp,sp,4
10000434:	f800283a 	ret

10000438 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10000438:	defffd04 	addi	sp,sp,-12
1000043c:	df000215 	stw	fp,8(sp)
10000440:	df000204 	addi	fp,sp,8
10000444:	2005883a 	mov	r2,r4
10000448:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
1000044c:	00803004 	movi	r2,192
10000450:	e0ffff03 	ldbu	r3,-4(fp)
10000454:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
10000458:	00802804 	movi	r2,160
1000045c:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
10000460:	00802c04 	movi	r2,176
10000464:	10800017 	ldw	r2,0(r2)
10000468:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
1000046c:	00802804 	movi	r2,160
10000470:	00c00044 	movi	r3,1
10000474:	10c00005 	stb	r3,0(r2)

	return temp;
10000478:	e0bffe0b 	ldhu	r2,-8(fp)
}
1000047c:	e037883a 	mov	sp,fp
10000480:	df000017 	ldw	fp,0(sp)
10000484:	dec00104 	addi	sp,sp,4
10000488:	f800283a 	ret

1000048c <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
1000048c:	defff904 	addi	sp,sp,-28
10000490:	dfc00615 	stw	ra,24(sp)
10000494:	df000515 	stw	fp,20(sp)
10000498:	df000504 	addi	fp,sp,20
	IO_init();
1000049c:	00003940 	call	10000394 <IO_init>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		//UsbWrite(0xc008,0x000f);
		//UsbRead(0xc008);
		usleep(10*10000);
	}*/
	srand(424242);
100004a0:	010001b4 	movhi	r4,6
100004a4:	211e4c84 	addi	r4,r4,31026
100004a8:	00024700 	call	10002470 <srand>
	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
100004ac:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
100004b0:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
100004b4:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
100004b8:	01040074 	movhi	r4,4097
100004bc:	21059b04 	addi	r4,r4,5740
100004c0:	000245c0 	call	1000245c <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
100004c4:	00012800 	call	10001280 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100004c8:	01005104 	movi	r4,324
100004cc:	000b883a 	mov	r5,zero
100004d0:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
100004d4:	01302414 	movui	r4,49296
100004d8:	017fffd4 	movui	r5,65535
100004dc:	00011e80 	call	100011e8 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
100004e0:	01006d04 	movi	r4,436
100004e4:	01409604 	movi	r5,600
100004e8:	00011e80 	call	100011e8 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
100004ec:	00811004 	movi	r2,1088
100004f0:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
100004f4:	e0bffb0b 	ldhu	r2,-20(fp)
100004f8:	01005084 	movi	r4,322
100004fc:	100b883a 	mov	r5,r2
10000500:	00011e80 	call	100011e8 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000504:	00808404 	movi	r2,528
10000508:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
1000050c:	e0bffe0b 	ldhu	r2,-8(fp)
10000510:	01302314 	movui	r4,49292
10000514:	100b883a 	mov	r5,r2
10000518:	00011e80 	call	100011e8 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
1000051c:	01007104 	movi	r4,452
10000520:	000b883a 	mov	r5,zero
10000524:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000528:	01007184 	movi	r4,454
1000052c:	000b883a 	mov	r5,zero
10000530:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000534:	01007204 	movi	r4,456
10000538:	000b883a 	mov	r5,zero
1000053c:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000540:	01007284 	movi	r4,458
10000544:	000b883a 	mov	r5,zero
10000548:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
1000054c:	01007304 	movi	r4,460
10000550:	000b883a 	mov	r5,zero
10000554:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000558:	01007384 	movi	r4,462
1000055c:	000b883a 	mov	r5,zero
10000560:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000564:	01007404 	movi	r4,464
10000568:	000b883a 	mov	r5,zero
1000056c:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000570:	01007484 	movi	r4,466
10000574:	000b883a 	mov	r5,zero
10000578:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
1000057c:	01007504 	movi	r4,468
10000580:	000b883a 	mov	r5,zero
10000584:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000588:	01007584 	movi	r4,470
1000058c:	000b883a 	mov	r5,zero
10000590:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000594:	01007604 	movi	r4,472
10000598:	000b883a 	mov	r5,zero
1000059c:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100005a0:	01007684 	movi	r4,474
100005a4:	000b883a 	mov	r5,zero
100005a8:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100005ac:	01007704 	movi	r4,476
100005b0:	000b883a 	mov	r5,zero
100005b4:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100005b8:	01007784 	movi	r4,478
100005bc:	000b883a 	mov	r5,zero
100005c0:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
100005c4:	01007084 	movi	r4,450
100005c8:	01401c84 	movi	r5,114
100005cc:	00011e80 	call	100011e8 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100005d0:	01000044 	movi	r4,1
100005d4:	01738054 	movui	r5,52737
100005d8:	00003e00 	call	100003e0 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
100005dc:	0001883a 	nop
100005e0:	010000c4 	movi	r4,3
100005e4:	00004380 	call	10000438 <IO_read>
100005e8:	10bfffcc 	andi	r2,r2,65535
100005ec:	103ffc26 	beq	r2,zero,100005e0 <__alt_data_end+0xf80005e0>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100005f0:	0001883a 	nop
100005f4:	01000044 	movi	r4,1
100005f8:	00004380 	call	10000438 <IO_read>
100005fc:	10bfffcc 	andi	r2,r2,65535
10000600:	1083fb58 	cmpnei	r2,r2,4077
10000604:	10000826 	beq	r2,zero,10000628 <main+0x19c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000608:	01000044 	movi	r4,1
1000060c:	00004380 	call	10000438 <IO_read>
10000610:	10bfffcc 	andi	r2,r2,65535
10000614:	01040074 	movhi	r4,4097
10000618:	2105a104 	addi	r4,r4,5764
1000061c:	100b883a 	mov	r5,r2
10000620:	00023680 	call	10002368 <printf>
		goto USB_HOT_PLUG;
10000624:	003fa706 	br	100004c4 <__alt_data_end+0xf80004c4>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10000628:	01040074 	movhi	r4,4097
1000062c:	2105aa04 	addi	r4,r4,5800
10000630:	00023680 	call	10002368 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10000634:	01007084 	movi	r4,450
10000638:	01401d04 	movi	r5,116
1000063c:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10000640:	01007104 	movi	r4,452
10000644:	01400f04 	movi	r5,60
10000648:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
1000064c:	01007184 	movi	r4,454
10000650:	000b883a 	mov	r5,zero
10000654:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000658:	01007204 	movi	r4,456
1000065c:	000b883a 	mov	r5,zero
10000660:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000664:	01007284 	movi	r4,458
10000668:	000b883a 	mov	r5,zero
1000066c:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000670:	01007304 	movi	r4,460
10000674:	000b883a 	mov	r5,zero
10000678:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
1000067c:	01007384 	movi	r4,462
10000680:	000b883a 	mov	r5,zero
10000684:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000688:	01007404 	movi	r4,464
1000068c:	000b883a 	mov	r5,zero
10000690:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000694:	01007484 	movi	r4,466
10000698:	000b883a 	mov	r5,zero
1000069c:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100006a0:	01007504 	movi	r4,468
100006a4:	000b883a 	mov	r5,zero
100006a8:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100006ac:	01007584 	movi	r4,470
100006b0:	000b883a 	mov	r5,zero
100006b4:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100006b8:	01007604 	movi	r4,472
100006bc:	000b883a 	mov	r5,zero
100006c0:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100006c4:	01007684 	movi	r4,474
100006c8:	000b883a 	mov	r5,zero
100006cc:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100006d0:	01007704 	movi	r4,476
100006d4:	000b883a 	mov	r5,zero
100006d8:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100006dc:	01007784 	movi	r4,478
100006e0:	000b883a 	mov	r5,zero
100006e4:	00011e80 	call	100011e8 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100006e8:	01000044 	movi	r4,1
100006ec:	01738054 	movui	r5,52737
100006f0:	00003e00 	call	100003e0 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100006f4:	0001883a 	nop
100006f8:	01000044 	movi	r4,1
100006fc:	00004380 	call	10000438 <IO_read>
10000700:	10bfffcc 	andi	r2,r2,65535
10000704:	1083fb58 	cmpnei	r2,r2,4077
10000708:	10000826 	beq	r2,zero,1000072c <main+0x2a0>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
1000070c:	01000044 	movi	r4,1
10000710:	00004380 	call	10000438 <IO_read>
10000714:	10bfffcc 	andi	r2,r2,65535
10000718:	01040074 	movhi	r4,4097
1000071c:	2105a104 	addi	r4,r4,5764
10000720:	100b883a 	mov	r5,r2
10000724:	00023680 	call	10002368 <printf>
		goto USB_HOT_PLUG;
10000728:	003f6606 	br	100004c4 <__alt_data_end+0xf80004c4>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
1000072c:	00b02284 	movi	r2,-16246
10000730:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10000734:	008c0004 	movi	r2,12288
10000738:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
1000073c:	00880004 	movi	r2,8192
10000740:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10000744:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000748:	10bfffcc 	andi	r2,r2,65535
1000074c:	1009883a 	mov	r4,r2
10000750:	000123c0 	call	1000123c <UsbRead>
10000754:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
10000758:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000075c:	e0fffb0b 	ldhu	r3,-20(fp)
10000760:	1884703a 	and	r2,r3,r2
10000764:	10bfffcc 	andi	r2,r2,65535
10000768:	1000341e 	bne	r2,zero,1000083c <main+0x3b0>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
1000076c:	e03ffbc5 	stb	zero,-17(fp)
10000770:	00001006 	br	100007b4 <main+0x328>
		{
			usleep(5*1000);
10000774:	0104e204 	movi	r4,5000
10000778:	000f6cc0 	call	1000f6cc <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000077c:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000780:	10bfffcc 	andi	r2,r2,65535
10000784:	1009883a 	mov	r4,r2
10000788:	000123c0 	call	1000123c <UsbRead>
1000078c:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
10000790:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000794:	e0fffb0b 	ldhu	r3,-20(fp)
10000798:	1884703a 	and	r2,r3,r2
1000079c:	10bfffcc 	andi	r2,r2,65535
100007a0:	10000126 	beq	r2,zero,100007a8 <main+0x31c>
100007a4:	00000606 	br	100007c0 <main+0x334>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100007a8:	e0bffbc3 	ldbu	r2,-17(fp)
100007ac:	10800044 	addi	r2,r2,1
100007b0:	e0bffbc5 	stb	r2,-17(fp)
100007b4:	e0bffbc3 	ldbu	r2,-17(fp)
100007b8:	10800170 	cmpltui	r2,r2,5
100007bc:	103fed1e 	bne	r2,zero,10000774 <__alt_data_end+0xf8000774>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
100007c0:	d0a6cb8b 	ldhu	r2,-25810(gp)
100007c4:	e0fffb0b 	ldhu	r3,-20(fp)
100007c8:	1884703a 	and	r2,r3,r2
100007cc:	10bfffcc 	andi	r2,r2,65535
100007d0:	1000261e 	bne	r2,zero,1000086c <main+0x3e0>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
100007d4:	01040074 	movhi	r4,4097
100007d8:	2105ae04 	addi	r4,r4,5816
100007dc:	000245c0 	call	1000245c <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
100007e0:	01040074 	movhi	r4,4097
100007e4:	2105b804 	addi	r4,r4,5856
100007e8:	000245c0 	call	1000245c <puts>
			while (!(usb_ctl_val & no_device))
100007ec:	00000d06 	br	10000824 <main+0x398>
			{
				usb_ctl_val = UsbRead(ctl_reg);
100007f0:	d0a6cb0b 	ldhu	r2,-25812(gp)
100007f4:	10bfffcc 	andi	r2,r2,65535
100007f8:	1009883a 	mov	r4,r2
100007fc:	000123c0 	call	1000123c <UsbRead>
10000800:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
10000804:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000808:	e0fffb0b 	ldhu	r3,-20(fp)
1000080c:	1884703a 	and	r2,r3,r2
10000810:	10bfffcc 	andi	r2,r2,65535
10000814:	10000126 	beq	r2,zero,1000081c <main+0x390>
					goto USB_HOT_PLUG;
10000818:	003f2a06 	br	100004c4 <__alt_data_end+0xf80004c4>

				usleep(2000);
1000081c:	0101f404 	movi	r4,2000
10000820:	000f6cc0 	call	1000f6cc <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10000824:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000828:	e0fffb0b 	ldhu	r3,-20(fp)
1000082c:	1884703a 	and	r2,r3,r2
10000830:	10bfffcc 	andi	r2,r2,65535
10000834:	103fee26 	beq	r2,zero,100007f0 <__alt_data_end+0xf80007f0>
10000838:	00000c06 	br	1000086c <main+0x3e0>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
1000083c:	e0fffb0b 	ldhu	r3,-20(fp)
10000840:	e0bffc0b 	ldhu	r2,-16(fp)
10000844:	1884703a 	and	r2,r3,r2
10000848:	10bfffcc 	andi	r2,r2,65535
1000084c:	10000426 	beq	r2,zero,10000860 <main+0x3d4>
		{
			printf("[INFO]: full speed device\n");
10000850:	01040074 	movhi	r4,4097
10000854:	2105c404 	addi	r4,r4,5904
10000858:	000245c0 	call	1000245c <puts>
1000085c:	00000306 	br	1000086c <main+0x3e0>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000860:	01040074 	movhi	r4,4097
10000864:	2105cb04 	addi	r4,r4,5932
10000868:	000245c0 	call	1000245c <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
1000086c:	00013400 	call	10001340 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000870:	00000306 	br	10000880 <main+0x3f4>
	{
		UsbSetAddress();
10000874:	00013400 	call	10001340 <UsbSetAddress>
		usleep(10*1000);
10000878:	0109c404 	movi	r4,10000
1000087c:	000f6cc0 	call	1000f6cc <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000880:	010000c4 	movi	r4,3
10000884:	00004380 	call	10000438 <IO_read>
10000888:	10bfffcc 	andi	r2,r2,65535
1000088c:	1080040c 	andi	r2,r2,16
10000890:	103ff826 	beq	r2,zero,10000874 <__alt_data_end+0xf8000874>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000894:	00021bc0 	call	100021bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10000898:	01000084 	movi	r4,2
1000089c:	01414184 	movi	r5,1286
100008a0:	00003e00 	call	100003e0 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
100008a4:	0009883a 	mov	r4,zero
100008a8:	00004380 	call	10000438 <IO_read>
100008ac:	10bfffcc 	andi	r2,r2,65535
100008b0:	01040074 	movhi	r4,4097
100008b4:	2105d204 	addi	r4,r4,5960
100008b8:	100b883a 	mov	r5,r2
100008bc:	00023680 	call	10002368 <printf>

	IO_write(HPI_ADDR,0x0508); // n
100008c0:	01000084 	movi	r4,2
100008c4:	01414204 	movi	r5,1288
100008c8:	00003e00 	call	100003e0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008cc:	0009883a 	mov	r4,zero
100008d0:	00004380 	call	10000438 <IO_read>
100008d4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
100008d8:	e0bffb0b 	ldhu	r2,-20(fp)
100008dc:	01040074 	movhi	r4,4097
100008e0:	2105dd04 	addi	r4,r4,6004
100008e4:	100b883a 	mov	r5,r2
100008e8:	00023680 	call	10002368 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
100008ec:	e0bffb0b 	ldhu	r2,-20(fp)
100008f0:	108000e0 	cmpeqi	r2,r2,3
100008f4:	1000031e 	bne	r2,zero,10000904 <main+0x478>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008f8:	00022400 	call	10002240 <UsbGetRetryCnt>
100008fc:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
10000900:	003ef006 	br	100004c4 <__alt_data_end+0xf80004c4>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10000904:	01040074 	movhi	r4,4097
10000908:	2105e904 	addi	r4,r4,6052
1000090c:	000245c0 	call	1000245c <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10000910:	000143c0 	call	1000143c <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000914:	00000306 	br	10000924 <main+0x498>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10000918:	000143c0 	call	1000143c <UsbGetDeviceDesc1>
		usleep(10*1000);
1000091c:	0109c404 	movi	r4,10000
10000920:	000f6cc0 	call	1000f6cc <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000924:	010000c4 	movi	r4,3
10000928:	00004380 	call	10000438 <IO_read>
1000092c:	10bfffcc 	andi	r2,r2,65535
10000930:	1080040c 	andi	r2,r2,16
10000934:	103ff826 	beq	r2,zero,10000918 <__alt_data_end+0xf8000918>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000938:	00021bc0 	call	100021bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000093c:	01000084 	movi	r4,2
10000940:	01414184 	movi	r5,1286
10000944:	00003e00 	call	100003e0 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000948:	0009883a 	mov	r4,zero
1000094c:	00004380 	call	10000438 <IO_read>
10000950:	10bfffcc 	andi	r2,r2,65535
10000954:	01040074 	movhi	r4,4097
10000958:	2105f804 	addi	r4,r4,6112
1000095c:	100b883a 	mov	r5,r2
10000960:	00023680 	call	10002368 <printf>

	IO_write(HPI_ADDR,0x0508);
10000964:	01000084 	movi	r4,2
10000968:	01414204 	movi	r5,1288
1000096c:	00003e00 	call	100003e0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000970:	0009883a 	mov	r4,zero
10000974:	00004380 	call	10000438 <IO_read>
10000978:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
1000097c:	e0bffb0b 	ldhu	r2,-20(fp)
10000980:	01040074 	movhi	r4,4097
10000984:	21060304 	addi	r4,r4,6156
10000988:	100b883a 	mov	r5,r2
1000098c:	00023680 	call	10002368 <printf>
	while (usb_ctl_val != 0x03)
10000990:	00000206 	br	1000099c <main+0x510>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000994:	00022400 	call	10002240 <UsbGetRetryCnt>
10000998:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000099c:	e0bffb0b 	ldhu	r2,-20(fp)
100009a0:	108000d8 	cmpnei	r2,r2,3
100009a4:	103ffb1e 	bne	r2,zero,10000994 <__alt_data_end+0xf8000994>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
100009a8:	01040074 	movhi	r4,4097
100009ac:	21060f04 	addi	r4,r4,6204
100009b0:	000245c0 	call	1000245c <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
100009b4:	00015800 	call	10001580 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009b8:	00000306 	br	100009c8 <main+0x53c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
100009bc:	00015800 	call	10001580 <UsbGetDeviceDesc2>
		usleep(10*1000);
100009c0:	0109c404 	movi	r4,10000
100009c4:	000f6cc0 	call	1000f6cc <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009c8:	010000c4 	movi	r4,3
100009cc:	00004380 	call	10000438 <IO_read>
100009d0:	10bfffcc 	andi	r2,r2,65535
100009d4:	1080040c 	andi	r2,r2,16
100009d8:	103ff826 	beq	r2,zero,100009bc <__alt_data_end+0xf80009bc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009dc:	00021bc0 	call	100021bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009e0:	01000084 	movi	r4,2
100009e4:	01414184 	movi	r5,1286
100009e8:	00003e00 	call	100003e0 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009ec:	0009883a 	mov	r4,zero
100009f0:	00004380 	call	10000438 <IO_read>
100009f4:	10bfffcc 	andi	r2,r2,65535
100009f8:	01040074 	movhi	r4,4097
100009fc:	2105f804 	addi	r4,r4,6112
10000a00:	100b883a 	mov	r5,r2
10000a04:	00023680 	call	10002368 <printf>

	IO_write(HPI_ADDR,0x0508);
10000a08:	01000084 	movi	r4,2
10000a0c:	01414204 	movi	r5,1288
10000a10:	00003e00 	call	100003e0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a14:	0009883a 	mov	r4,zero
10000a18:	00004380 	call	10000438 <IO_read>
10000a1c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000a20:	e0bffb0b 	ldhu	r2,-20(fp)
10000a24:	01040074 	movhi	r4,4097
10000a28:	21060304 	addi	r4,r4,6156
10000a2c:	100b883a 	mov	r5,r2
10000a30:	00023680 	call	10002368 <printf>
	while (usb_ctl_val != 0x03)
10000a34:	00000206 	br	10000a40 <main+0x5b4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a38:	00022400 	call	10002240 <UsbGetRetryCnt>
10000a3c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a40:	e0bffb0b 	ldhu	r2,-20(fp)
10000a44:	108000d8 	cmpnei	r2,r2,3
10000a48:	103ffb1e 	bne	r2,zero,10000a38 <__alt_data_end+0xf8000a38>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10000a4c:	01040074 	movhi	r4,4097
10000a50:	21062304 	addi	r4,r4,6284
10000a54:	000245c0 	call	1000245c <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000a58:	00017540 	call	10001754 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a5c:	00000306 	br	10000a6c <main+0x5e0>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10000a60:	00017540 	call	10001754 <UsbGetConfigDesc1>
		usleep(10*1000);
10000a64:	0109c404 	movi	r4,10000
10000a68:	000f6cc0 	call	1000f6cc <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a6c:	010000c4 	movi	r4,3
10000a70:	00004380 	call	10000438 <IO_read>
10000a74:	10bfffcc 	andi	r2,r2,65535
10000a78:	1080040c 	andi	r2,r2,16
10000a7c:	103ff826 	beq	r2,zero,10000a60 <__alt_data_end+0xf8000a60>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000a80:	00021bc0 	call	100021bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000a84:	01000084 	movi	r4,2
10000a88:	01414184 	movi	r5,1286
10000a8c:	00003e00 	call	100003e0 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000a90:	0009883a 	mov	r4,zero
10000a94:	00004380 	call	10000438 <IO_read>
10000a98:	10bfffcc 	andi	r2,r2,65535
10000a9c:	01040074 	movhi	r4,4097
10000aa0:	21063504 	addi	r4,r4,6356
10000aa4:	100b883a 	mov	r5,r2
10000aa8:	00023680 	call	10002368 <printf>

	IO_write(HPI_ADDR,0x0508);
10000aac:	01000084 	movi	r4,2
10000ab0:	01414204 	movi	r5,1288
10000ab4:	00003e00 	call	100003e0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000ab8:	0009883a 	mov	r4,zero
10000abc:	00004380 	call	10000438 <IO_read>
10000ac0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10000ac4:	e0bffb0b 	ldhu	r2,-20(fp)
10000ac8:	01040074 	movhi	r4,4097
10000acc:	21064004 	addi	r4,r4,6400
10000ad0:	100b883a 	mov	r5,r2
10000ad4:	00023680 	call	10002368 <printf>
	while (usb_ctl_val != 0x03)
10000ad8:	00000206 	br	10000ae4 <main+0x658>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000adc:	00022400 	call	10002240 <UsbGetRetryCnt>
10000ae0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000ae4:	e0bffb0b 	ldhu	r2,-20(fp)
10000ae8:	108000d8 	cmpnei	r2,r2,3
10000aec:	103ffb1e 	bne	r2,zero,10000adc <__alt_data_end+0xf8000adc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000af0:	01040074 	movhi	r4,4097
10000af4:	21064c04 	addi	r4,r4,6448
10000af8:	000245c0 	call	1000245c <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000afc:	00018e00 	call	100018e0 <UsbGetConfigDesc2>

	usleep(100*1000);
10000b00:	010000b4 	movhi	r4,2
10000b04:	2121a804 	addi	r4,r4,-31072
10000b08:	000f6cc0 	call	1000f6cc <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b0c:	00000306 	br	10000b1c <main+0x690>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000b10:	00018e00 	call	100018e0 <UsbGetConfigDesc2>
		usleep(10*1000);
10000b14:	0109c404 	movi	r4,10000
10000b18:	000f6cc0 	call	1000f6cc <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b1c:	010000c4 	movi	r4,3
10000b20:	00004380 	call	10000438 <IO_read>
10000b24:	10bfffcc 	andi	r2,r2,65535
10000b28:	1080040c 	andi	r2,r2,16
10000b2c:	103ff826 	beq	r2,zero,10000b10 <__alt_data_end+0xf8000b10>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000b30:	00021bc0 	call	100021bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000b34:	01000084 	movi	r4,2
10000b38:	01414184 	movi	r5,1286
10000b3c:	00003e00 	call	100003e0 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000b40:	0009883a 	mov	r4,zero
10000b44:	00004380 	call	10000438 <IO_read>
10000b48:	10bfffcc 	andi	r2,r2,65535
10000b4c:	01040074 	movhi	r4,4097
10000b50:	21065f04 	addi	r4,r4,6524
10000b54:	100b883a 	mov	r5,r2
10000b58:	00023680 	call	10002368 <printf>

	IO_write(HPI_ADDR,0x0508);
10000b5c:	01000084 	movi	r4,2
10000b60:	01414204 	movi	r5,1288
10000b64:	00003e00 	call	100003e0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000b68:	0009883a 	mov	r4,zero
10000b6c:	00004380 	call	10000438 <IO_read>
10000b70:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000b74:	e0bffb0b 	ldhu	r2,-20(fp)
10000b78:	01040074 	movhi	r4,4097
10000b7c:	21066a04 	addi	r4,r4,6568
10000b80:	100b883a 	mov	r5,r2
10000b84:	00023680 	call	10002368 <printf>
	while (usb_ctl_val != 0x03)
10000b88:	00000206 	br	10000b94 <main+0x708>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000b8c:	00022400 	call	10002240 <UsbGetRetryCnt>
10000b90:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000b94:	e0bffb0b 	ldhu	r2,-20(fp)
10000b98:	108000d8 	cmpnei	r2,r2,3
10000b9c:	103ffb1e 	bne	r2,zero,10000b8c <__alt_data_end+0xf8000b8c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000ba0:	01040074 	movhi	r4,4097
10000ba4:	21067604 	addi	r4,r4,6616
10000ba8:	000245c0 	call	1000245c <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000bac:	01000084 	movi	r4,2
10000bb0:	01415b04 	movi	r5,1388
10000bb4:	00003e00 	call	100003e0 <IO_write>
	code = IO_read(HPI_DATA);
10000bb8:	0009883a 	mov	r4,zero
10000bbc:	00004380 	call	10000438 <IO_read>
10000bc0:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
10000bc4:	e0bffe8b 	ldhu	r2,-6(fp)
10000bc8:	108000cc 	andi	r2,r2,3
10000bcc:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
10000bd0:	e0bffe8b 	ldhu	r2,-6(fp)
10000bd4:	01040074 	movhi	r4,4097
10000bd8:	21068904 	addi	r4,r4,6692
10000bdc:	100b883a 	mov	r5,r2
10000be0:	00023680 	call	10002368 <printf>

	if (code == 0x01)
10000be4:	e0bffe8b 	ldhu	r2,-6(fp)
10000be8:	10800058 	cmpnei	r2,r2,1
10000bec:	1000041e 	bne	r2,zero,10000c00 <main+0x774>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000bf0:	01040074 	movhi	r4,4097
10000bf4:	21068c04 	addi	r4,r4,6704
10000bf8:	000245c0 	call	1000245c <puts>
10000bfc:	00000306 	br	10000c0c <main+0x780>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000c00:	01040074 	movhi	r4,4097
10000c04:	21069b04 	addi	r4,r4,6764
10000c08:	000245c0 	call	1000245c <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000c0c:	01000084 	movi	r4,2
10000c10:	01415d84 	movi	r5,1398
10000c14:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000c18:	0009883a 	mov	r4,zero
10000c1c:	0141cfc4 	movi	r5,1855
10000c20:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000c24:	0009883a 	mov	r4,zero
10000c28:	01604154 	movui	r5,33029
10000c2c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000c30:	0009883a 	mov	r4,zero
10000c34:	014000c4 	movi	r5,3
10000c38:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000c3c:	0009883a 	mov	r4,zero
10000c40:	01400204 	movi	r5,8
10000c44:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000c48:	0009883a 	mov	r4,zero
10000c4c:	016b0294 	movui	r5,44042
10000c50:	00003e00 	call	100003e0 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000c54:	01006c04 	movi	r4,432
10000c58:	01415d84 	movi	r5,1398
10000c5c:	00011e80 	call	100011e8 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000c60:	01000084 	movi	r4,2
10000c64:	01415f04 	movi	r5,1404
10000c68:	00003e00 	call	100003e0 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000c6c:	0009883a 	mov	r4,zero
10000c70:	00004380 	call	10000438 <IO_read>
10000c74:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000c78:	e0bfff03 	ldbu	r2,-4(fp)
10000c7c:	01040074 	movhi	r4,4097
10000c80:	2106a404 	addi	r4,r4,6800
10000c84:	100b883a 	mov	r5,r2
10000c88:	00023680 	call	10002368 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000c8c:	0001b440 	call	10001b44 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c90:	00000306 	br	10000ca0 <main+0x814>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000c94:	0001b440 	call	10001b44 <UsbSetConfig>
		usleep(10*1000);
10000c98:	0109c404 	movi	r4,10000
10000c9c:	000f6cc0 	call	1000f6cc <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ca0:	010000c4 	movi	r4,3
10000ca4:	00004380 	call	10000438 <IO_read>
10000ca8:	10bfffcc 	andi	r2,r2,65535
10000cac:	1080040c 	andi	r2,r2,16
10000cb0:	103ff826 	beq	r2,zero,10000c94 <__alt_data_end+0xf8000c94>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000cb4:	00021bc0 	call	100021bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000cb8:	01000084 	movi	r4,2
10000cbc:	01414184 	movi	r5,1286
10000cc0:	00003e00 	call	100003e0 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000cc4:	0009883a 	mov	r4,zero
10000cc8:	00004380 	call	10000438 <IO_read>
10000ccc:	10bfffcc 	andi	r2,r2,65535
10000cd0:	01040074 	movhi	r4,4097
10000cd4:	2106ae04 	addi	r4,r4,6840
10000cd8:	100b883a 	mov	r5,r2
10000cdc:	00023680 	call	10002368 <printf>

	IO_write(HPI_ADDR,0x0508);
10000ce0:	01000084 	movi	r4,2
10000ce4:	01414204 	movi	r5,1288
10000ce8:	00003e00 	call	100003e0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cec:	0009883a 	mov	r4,zero
10000cf0:	00004380 	call	10000438 <IO_read>
10000cf4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000cf8:	e0bffb0b 	ldhu	r2,-20(fp)
10000cfc:	01040074 	movhi	r4,4097
10000d00:	2106b904 	addi	r4,r4,6884
10000d04:	100b883a 	mov	r5,r2
10000d08:	00023680 	call	10002368 <printf>
	while (usb_ctl_val != 0x03)
10000d0c:	00000206 	br	10000d18 <main+0x88c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d10:	00022400 	call	10002240 <UsbGetRetryCnt>
10000d14:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d18:	e0bffb0b 	ldhu	r2,-20(fp)
10000d1c:	108000d8 	cmpnei	r2,r2,3
10000d20:	103ffb1e 	bne	r2,zero,10000d10 <__alt_data_end+0xf8000d10>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000d24:	01040074 	movhi	r4,4097
10000d28:	2106c504 	addi	r4,r4,6932
10000d2c:	000245c0 	call	1000245c <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000d30:	0001c400 	call	10001c40 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d34:	00000306 	br	10000d44 <main+0x8b8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000d38:	0001c400 	call	10001c40 <UsbClassRequest>
		usleep(10*1000);
10000d3c:	0109c404 	movi	r4,10000
10000d40:	000f6cc0 	call	1000f6cc <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d44:	010000c4 	movi	r4,3
10000d48:	00004380 	call	10000438 <IO_read>
10000d4c:	10bfffcc 	andi	r2,r2,65535
10000d50:	1080040c 	andi	r2,r2,16
10000d54:	103ff826 	beq	r2,zero,10000d38 <__alt_data_end+0xf8000d38>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d58:	00021bc0 	call	100021bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d5c:	01000084 	movi	r4,2
10000d60:	01414184 	movi	r5,1286
10000d64:	00003e00 	call	100003e0 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d68:	0009883a 	mov	r4,zero
10000d6c:	00004380 	call	10000438 <IO_read>
10000d70:	10bfffcc 	andi	r2,r2,65535
10000d74:	01040074 	movhi	r4,4097
10000d78:	2106d704 	addi	r4,r4,7004
10000d7c:	100b883a 	mov	r5,r2
10000d80:	00023680 	call	10002368 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d84:	01000084 	movi	r4,2
10000d88:	01414204 	movi	r5,1288
10000d8c:	00003e00 	call	100003e0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d90:	0009883a 	mov	r4,zero
10000d94:	00004380 	call	10000438 <IO_read>
10000d98:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000d9c:	e0bffb0b 	ldhu	r2,-20(fp)
10000da0:	01040074 	movhi	r4,4097
10000da4:	2106e204 	addi	r4,r4,7048
10000da8:	100b883a 	mov	r5,r2
10000dac:	00023680 	call	10002368 <printf>
	while (usb_ctl_val != 0x03)
10000db0:	00000206 	br	10000dbc <main+0x930>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000db4:	00022400 	call	10002240 <UsbGetRetryCnt>
10000db8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000dbc:	e0bffb0b 	ldhu	r2,-20(fp)
10000dc0:	108000d8 	cmpnei	r2,r2,3
10000dc4:	103ffb1e 	bne	r2,zero,10000db4 <__alt_data_end+0xf8000db4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000dc8:	01040074 	movhi	r4,4097
10000dcc:	2106ee04 	addi	r4,r4,7096
10000dd0:	000245c0 	call	1000245c <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000dd4:	0001d3c0 	call	10001d3c <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000dd8:	00000306 	br	10000de8 <main+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000ddc:	0001d3c0 	call	10001d3c <UsbGetHidDesc>
		usleep(10*1000);
10000de0:	0109c404 	movi	r4,10000
10000de4:	000f6cc0 	call	1000f6cc <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000de8:	010000c4 	movi	r4,3
10000dec:	00004380 	call	10000438 <IO_read>
10000df0:	10bfffcc 	andi	r2,r2,65535
10000df4:	1080040c 	andi	r2,r2,16
10000df8:	103ff826 	beq	r2,zero,10000ddc <__alt_data_end+0xf8000ddc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000dfc:	00021bc0 	call	100021bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000e00:	01000084 	movi	r4,2
10000e04:	01414184 	movi	r5,1286
10000e08:	00003e00 	call	100003e0 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000e0c:	0009883a 	mov	r4,zero
10000e10:	00004380 	call	10000438 <IO_read>
10000e14:	10bfffcc 	andi	r2,r2,65535
10000e18:	01040074 	movhi	r4,4097
10000e1c:	2106d704 	addi	r4,r4,7004
10000e20:	100b883a 	mov	r5,r2
10000e24:	00023680 	call	10002368 <printf>

	IO_write(HPI_ADDR,0x0508);
10000e28:	01000084 	movi	r4,2
10000e2c:	01414204 	movi	r5,1288
10000e30:	00003e00 	call	100003e0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000e34:	0009883a 	mov	r4,zero
10000e38:	00004380 	call	10000438 <IO_read>
10000e3c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000e40:	e0bffb0b 	ldhu	r2,-20(fp)
10000e44:	01040074 	movhi	r4,4097
10000e48:	2106e204 	addi	r4,r4,7048
10000e4c:	100b883a 	mov	r5,r2
10000e50:	00023680 	call	10002368 <printf>
	while (usb_ctl_val != 0x03)
10000e54:	00000206 	br	10000e60 <main+0x9d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000e58:	00022400 	call	10002240 <UsbGetRetryCnt>
10000e5c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000e60:	e0bffb0b 	ldhu	r2,-20(fp)
10000e64:	108000d8 	cmpnei	r2,r2,3
10000e68:	103ffb1e 	bne	r2,zero,10000e58 <__alt_data_end+0xf8000e58>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000e6c:	01040074 	movhi	r4,4097
10000e70:	21070004 	addi	r4,r4,7168
10000e74:	000245c0 	call	1000245c <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000e78:	0001e800 	call	10001e80 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e7c:	00000306 	br	10000e8c <main+0xa00>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000e80:	0001e800 	call	10001e80 <UsbGetReportDesc>
		usleep(10*1000);
10000e84:	0109c404 	movi	r4,10000
10000e88:	000f6cc0 	call	1000f6cc <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e8c:	010000c4 	movi	r4,3
10000e90:	00004380 	call	10000438 <IO_read>
10000e94:	10bfffcc 	andi	r2,r2,65535
10000e98:	1080040c 	andi	r2,r2,16
10000e9c:	103ff826 	beq	r2,zero,10000e80 <__alt_data_end+0xf8000e80>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000ea0:	00021bc0 	call	100021bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000ea4:	01000084 	movi	r4,2
10000ea8:	01414184 	movi	r5,1286
10000eac:	00003e00 	call	100003e0 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000eb0:	0009883a 	mov	r4,zero
10000eb4:	00004380 	call	10000438 <IO_read>
10000eb8:	10bfffcc 	andi	r2,r2,65535
10000ebc:	01040074 	movhi	r4,4097
10000ec0:	21071404 	addi	r4,r4,7248
10000ec4:	100b883a 	mov	r5,r2
10000ec8:	00023680 	call	10002368 <printf>

	IO_write(HPI_ADDR,0x0508);
10000ecc:	01000084 	movi	r4,2
10000ed0:	01414204 	movi	r5,1288
10000ed4:	00003e00 	call	100003e0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000ed8:	0009883a 	mov	r4,zero
10000edc:	00004380 	call	10000438 <IO_read>
10000ee0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000ee4:	e0bffb0b 	ldhu	r2,-20(fp)
10000ee8:	01040074 	movhi	r4,4097
10000eec:	21072004 	addi	r4,r4,7296
10000ef0:	100b883a 	mov	r5,r2
10000ef4:	00023680 	call	10002368 <printf>
	while (usb_ctl_val != 0x03)
10000ef8:	00000206 	br	10000f04 <main+0xa78>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000efc:	00022400 	call	10002240 <UsbGetRetryCnt>
10000f00:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000f04:	e0bffb0b 	ldhu	r2,-20(fp)
10000f08:	108000d8 	cmpnei	r2,r2,3
10000f0c:	103ffb1e 	bne	r2,zero,10000efc <__alt_data_end+0xf8000efc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000f10:	01040074 	movhi	r4,4097
10000f14:	21072c04 	addi	r4,r4,7344
10000f18:	000245c0 	call	1000245c <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000f1c:	0109c404 	movi	r4,10000
10000f20:	000f6cc0 	call	1000f6cc <usleep>
	while(1)
	{
		toggle++;
10000f24:	e0bffb83 	ldbu	r2,-18(fp)
10000f28:	10800044 	addi	r2,r2,1
10000f2c:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000f30:	01000084 	movi	r4,2
10000f34:	01414004 	movi	r5,1280
10000f38:	00003e00 	call	100003e0 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000f3c:	0009883a 	mov	r4,zero
10000f40:	01414704 	movi	r5,1308
10000f44:	00003e00 	call	100003e0 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000f48:	e0bfff03 	ldbu	r2,-4(fp)
10000f4c:	108003cc 	andi	r2,r2,15
10000f50:	0009883a 	mov	r4,zero
10000f54:	100b883a 	mov	r5,r2
10000f58:	00003e00 	call	100003e0 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000f5c:	0009883a 	mov	r4,zero
10000f60:	0140a444 	movi	r5,657
10000f64:	00003e00 	call	100003e0 <IO_write>
		if(toggle%2)
10000f68:	e0bffb83 	ldbu	r2,-18(fp)
10000f6c:	1080004c 	andi	r2,r2,1
10000f70:	10803fcc 	andi	r2,r2,255
10000f74:	10000426 	beq	r2,zero,10000f88 <main+0xafc>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000f78:	0009883a 	mov	r4,zero
10000f7c:	01400044 	movi	r5,1
10000f80:	00003e00 	call	100003e0 <IO_write>
10000f84:	00000306 	br	10000f94 <main+0xb08>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000f88:	0009883a 	mov	r4,zero
10000f8c:	01401044 	movi	r5,65
10000f90:	00003e00 	call	100003e0 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000f94:	0009883a 	mov	r4,zero
10000f98:	014004c4 	movi	r5,19
10000f9c:	00003e00 	call	100003e0 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000fa0:	0009883a 	mov	r4,zero
10000fa4:	000b883a 	mov	r5,zero
10000fa8:	00003e00 	call	100003e0 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000fac:	01006c04 	movi	r4,432
10000fb0:	01414004 	movi	r5,1280
10000fb4:	00011e80 	call	100011e8 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000fb8:	00002406 	br	1000104c <main+0xbc0>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000fbc:	01000084 	movi	r4,2
10000fc0:	01414004 	movi	r5,1280
10000fc4:	00003e00 	call	100003e0 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000fc8:	0009883a 	mov	r4,zero
10000fcc:	01414704 	movi	r5,1308
10000fd0:	00003e00 	call	100003e0 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000fd4:	e0bfff03 	ldbu	r2,-4(fp)
10000fd8:	108003cc 	andi	r2,r2,15
10000fdc:	0009883a 	mov	r4,zero
10000fe0:	100b883a 	mov	r5,r2
10000fe4:	00003e00 	call	100003e0 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000fe8:	0009883a 	mov	r4,zero
10000fec:	0140a444 	movi	r5,657
10000ff0:	00003e00 	call	100003e0 <IO_write>
			if(toggle%2)
10000ff4:	e0bffb83 	ldbu	r2,-18(fp)
10000ff8:	1080004c 	andi	r2,r2,1
10000ffc:	10803fcc 	andi	r2,r2,255
10001000:	10000426 	beq	r2,zero,10001014 <main+0xb88>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10001004:	0009883a 	mov	r4,zero
10001008:	01400044 	movi	r5,1
1000100c:	00003e00 	call	100003e0 <IO_write>
10001010:	00000306 	br	10001020 <main+0xb94>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10001014:	0009883a 	mov	r4,zero
10001018:	01401044 	movi	r5,65
1000101c:	00003e00 	call	100003e0 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10001020:	0009883a 	mov	r4,zero
10001024:	014004c4 	movi	r5,19
10001028:	00003e00 	call	100003e0 <IO_write>
			IO_write(HPI_DATA,0x0000);//
1000102c:	0009883a 	mov	r4,zero
10001030:	000b883a 	mov	r5,zero
10001034:	00003e00 	call	100003e0 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001038:	01006c04 	movi	r4,432
1000103c:	01414004 	movi	r5,1280
10001040:	00011e80 	call	100011e8 <UsbWrite>
			usleep(10*1000);
10001044:	0109c404 	movi	r4,10000
10001048:	000f6cc0 	call	1000f6cc <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000104c:	010000c4 	movi	r4,3
10001050:	00004380 	call	10000438 <IO_read>
10001054:	10bfffcc 	andi	r2,r2,65535
10001058:	1080040c 	andi	r2,r2,16
1000105c:	103fd726 	beq	r2,zero,10000fbc <__alt_data_end+0xf8000fbc>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
10001060:	00021bc0 	call	100021bc <UsbWaitTDListDone>
10001064:	e0bffb0d 	sth	r2,-20(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
10001068:	01000084 	movi	r4,2
1000106c:	01414784 	movi	r5,1310
10001070:	00003e00 	call	100003e0 <IO_write>
		keycode = IO_read(HPI_DATA);
10001074:	0009883a 	mov	r4,zero
10001078:	00004380 	call	10000438 <IO_read>
1000107c:	10bfffcc 	andi	r2,r2,65535
10001080:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
10001084:	01040074 	movhi	r4,4097
10001088:	21074004 	addi	r4,r4,7424
1000108c:	e17ffd17 	ldw	r5,-12(fp)
10001090:	00023680 	call	10002368 <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
10001094:	e0bffd17 	ldw	r2,-12(fp)
10001098:	10c03fcc 	andi	r3,r2,255
1000109c:	00803804 	movi	r2,224
100010a0:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
100010a4:	01003204 	movi	r4,200
100010a8:	000f6cc0 	call	1000f6cc <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
100010ac:	d0a6cb0b 	ldhu	r2,-25812(gp)
100010b0:	10bfffcc 	andi	r2,r2,65535
100010b4:	1009883a 	mov	r4,r2
100010b8:	000123c0 	call	1000123c <UsbRead>
100010bc:	e0bffb0d 	sth	r2,-20(fp)

		updateEnemies();
100010c0:	00001f80 	call	100001f8 <updateEnemies>

		if(!(usb_ctl_val & no_device))
100010c4:	d0a6cb8b 	ldhu	r2,-25810(gp)
100010c8:	e0fffb0b 	ldhu	r3,-20(fp)
100010cc:	1884703a 	and	r2,r3,r2
100010d0:	10bfffcc 	andi	r2,r2,65535
100010d4:	1000201e 	bne	r2,zero,10001158 <main+0xccc>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100010d8:	e03ffbc5 	stb	zero,-17(fp)
100010dc:	00001006 	br	10001120 <main+0xc94>
			{
				usleep(5*1000);
100010e0:	0104e204 	movi	r4,5000
100010e4:	000f6cc0 	call	1000f6cc <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
100010e8:	d0a6cb0b 	ldhu	r2,-25812(gp)
100010ec:	10bfffcc 	andi	r2,r2,65535
100010f0:	1009883a 	mov	r4,r2
100010f4:	000123c0 	call	1000123c <UsbRead>
100010f8:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
100010fc:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001100:	e0fffb0b 	ldhu	r3,-20(fp)
10001104:	1884703a 	and	r2,r3,r2
10001108:	10bfffcc 	andi	r2,r2,65535
1000110c:	10000126 	beq	r2,zero,10001114 <main+0xc88>
10001110:	00000606 	br	1000112c <main+0xca0>
		updateEnemies();

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001114:	e0bffbc3 	ldbu	r2,-17(fp)
10001118:	10800044 	addi	r2,r2,1
1000111c:	e0bffbc5 	stb	r2,-17(fp)
10001120:	e0bffbc3 	ldbu	r2,-17(fp)
10001124:	108001f0 	cmpltui	r2,r2,7
10001128:	103fed1e 	bne	r2,zero,100010e0 <__alt_data_end+0xf80010e0>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
1000112c:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001130:	e0fffb0b 	ldhu	r3,-20(fp)
10001134:	1884703a 	and	r2,r3,r2
10001138:	10bfffcc 	andi	r2,r2,65535
1000113c:	1000061e 	bne	r2,zero,10001158 <main+0xccc>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10001140:	01040074 	movhi	r4,4097
10001144:	21074904 	addi	r4,r4,7460
10001148:	000245c0 	call	1000245c <puts>
				printf("[INFO]: please insert again!!! \n");
1000114c:	01040074 	movhi	r4,4097
10001150:	21075404 	addi	r4,r4,7504
10001154:	000245c0 	call	1000245c <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10001158:	00001d06 	br	100011d0 <main+0xd44>
		{

			usb_ctl_val = UsbRead(ctl_reg);
1000115c:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001160:	10bfffcc 	andi	r2,r2,65535
10001164:	1009883a 	mov	r4,r2
10001168:	000123c0 	call	1000123c <UsbRead>
1000116c:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10001170:	0104e204 	movi	r4,5000
10001174:	000f6cc0 	call	1000f6cc <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001178:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000117c:	10bfffcc 	andi	r2,r2,65535
10001180:	1009883a 	mov	r4,r2
10001184:	000123c0 	call	1000123c <UsbRead>
10001188:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
1000118c:	0104e204 	movi	r4,5000
10001190:	000f6cc0 	call	1000f6cc <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001194:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001198:	10bfffcc 	andi	r2,r2,65535
1000119c:	1009883a 	mov	r4,r2
100011a0:	000123c0 	call	1000123c <UsbRead>
100011a4:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
100011a8:	0104e204 	movi	r4,5000
100011ac:	000f6cc0 	call	1000f6cc <usleep>

			if(usb_ctl_val & no_device)
100011b0:	d0a6cb8b 	ldhu	r2,-25810(gp)
100011b4:	e0fffb0b 	ldhu	r3,-20(fp)
100011b8:	1884703a 	and	r2,r3,r2
100011bc:	10bfffcc 	andi	r2,r2,65535
100011c0:	10000126 	beq	r2,zero,100011c8 <main+0xd3c>
				goto USB_HOT_PLUG;
100011c4:	003cbf06 	br	100004c4 <__alt_data_end+0xf80004c4>

			usleep(200);
100011c8:	01003204 	movi	r4,200
100011cc:	000f6cc0 	call	1000f6cc <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
100011d0:	d0a6cb8b 	ldhu	r2,-25810(gp)
100011d4:	e0fffb0b 	ldhu	r3,-20(fp)
100011d8:	1884703a 	and	r2,r3,r2
100011dc:	10bfffcc 	andi	r2,r2,65535
100011e0:	103fde26 	beq	r2,zero,1000115c <__alt_data_end+0xf800115c>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
100011e4:	003f4f06 	br	10000f24 <__alt_data_end+0xf8000f24>

100011e8 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
100011e8:	defffc04 	addi	sp,sp,-16
100011ec:	dfc00315 	stw	ra,12(sp)
100011f0:	df000215 	stw	fp,8(sp)
100011f4:	df000204 	addi	fp,sp,8
100011f8:	2007883a 	mov	r3,r4
100011fc:	2805883a 	mov	r2,r5
10001200:	e0fffe0d 	sth	r3,-8(fp)
10001204:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
//	IO_write(0b10, Address);
//	IO_write(0b11, Data);
	IO_write(HPI_ADDR, Address);
10001208:	e0bffe0b 	ldhu	r2,-8(fp)
1000120c:	01000084 	movi	r4,2
10001210:	100b883a 	mov	r5,r2
10001214:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA, Data);
10001218:	e0bfff0b 	ldhu	r2,-4(fp)
1000121c:	0009883a 	mov	r4,zero
10001220:	100b883a 	mov	r5,r2
10001224:	00003e00 	call	100003e0 <IO_write>
}
10001228:	e037883a 	mov	sp,fp
1000122c:	dfc00117 	ldw	ra,4(sp)
10001230:	df000017 	ldw	fp,0(sp)
10001234:	dec00204 	addi	sp,sp,8
10001238:	f800283a 	ret

1000123c <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
1000123c:	defffd04 	addi	sp,sp,-12
10001240:	dfc00215 	stw	ra,8(sp)
10001244:	df000115 	stw	fp,4(sp)
10001248:	df000104 	addi	fp,sp,4
1000124c:	2005883a 	mov	r2,r4
10001250:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
10001254:	e0bfff0b 	ldhu	r2,-4(fp)
10001258:	01000084 	movi	r4,2
1000125c:	100b883a 	mov	r5,r2
10001260:	00003e00 	call	100003e0 <IO_write>
	return IO_read(HPI_DATA);
10001264:	0009883a 	mov	r4,zero
10001268:	00004380 	call	10000438 <IO_read>
}
1000126c:	e037883a 	mov	sp,fp
10001270:	dfc00117 	ldw	ra,4(sp)
10001274:	df000017 	ldw	fp,0(sp)
10001278:	dec00204 	addi	sp,sp,8
1000127c:	f800283a 	ret

10001280 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10001280:	defffe04 	addi	sp,sp,-8
10001284:	dfc00115 	stw	ra,4(sp)
10001288:	df000015 	stw	fp,0(sp)
1000128c:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10001290:	01000044 	movi	r4,1
10001294:	017e9414 	movui	r5,64080
10001298:	00003e00 	call	100003e0 <IO_write>
	usleep(100000);
1000129c:	010000b4 	movhi	r4,2
100012a0:	2121a804 	addi	r4,r4,-31072
100012a4:	000f6cc0 	call	1000f6cc <usleep>
	printf("[USB INIT]:reset finished!\n");
100012a8:	01040074 	movhi	r4,4097
100012ac:	21075c04 	addi	r4,r4,7536
100012b0:	000245c0 	call	1000245c <puts>

	usleep(500000);
100012b4:	01000234 	movhi	r4,8
100012b8:	21284804 	addi	r4,r4,-24288
100012bc:	000f6cc0 	call	1000f6cc <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
100012c0:	01040074 	movhi	r4,4097
100012c4:	21076304 	addi	r4,r4,7564
100012c8:	000245c0 	call	1000245c <puts>
	IO_read(HPI_MAILBOX);
100012cc:	01000044 	movi	r4,1
100012d0:	00004380 	call	10000438 <IO_read>
	IO_read(HPI_STATUS);
100012d4:	010000c4 	movi	r4,3
100012d8:	00004380 	call	10000438 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
100012dc:	01005104 	movi	r4,324
100012e0:	000123c0 	call	1000123c <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100012e4:	01005104 	movi	r4,324
100012e8:	000b883a 	mov	r5,zero
100012ec:	00011e80 	call	100011e8 <UsbWrite>
	UsbRead (HPI_SIE1_MSG_ADR); //Debug
100012f0:	01005104 	movi	r4,324
100012f4:	000123c0 	call	1000123c <UsbRead>

	UsbRead (HPI_SIE2_MSG_ADR);
100012f8:	01005204 	movi	r4,328
100012fc:	000123c0 	call	1000123c <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10001300:	01005204 	movi	r4,328
10001304:	000b883a 	mov	r5,zero
10001308:	00011e80 	call	100011e8 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR); //Debug
1000130c:	01005204 	movi	r4,328
10001310:	000123c0 	call	1000123c <UsbRead>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001314:	01302414 	movui	r4,49296
10001318:	017fffd4 	movui	r5,65535
1000131c:	00011e80 	call	100011e8 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10001320:	01302c14 	movui	r4,49328
10001324:	017fffd4 	movui	r5,65535
10001328:	00011e80 	call	100011e8 <UsbWrite>

}
1000132c:	e037883a 	mov	sp,fp
10001330:	dfc00117 	ldw	ra,4(sp)
10001334:	df000017 	ldw	fp,0(sp)
10001338:	dec00204 	addi	sp,sp,8
1000133c:	f800283a 	ret

10001340 <UsbSetAddress>:


void UsbSetAddress()
{
10001340:	defffe04 	addi	sp,sp,-8
10001344:	dfc00115 	stw	ra,4(sp)
10001348:	df000015 	stw	fp,0(sp)
1000134c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001350:	01000084 	movi	r4,2
10001354:	01414004 	movi	r5,1280
10001358:	00003e00 	call	100003e0 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
1000135c:	0009883a 	mov	r4,zero
10001360:	01414304 	movi	r5,1292
10001364:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001368:	0009883a 	mov	r4,zero
1000136c:	01400204 	movi	r5,8
10001370:	00003e00 	call	100003e0 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10001374:	0009883a 	mov	r4,zero
10001378:	01403404 	movi	r5,208
1000137c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001380:	0009883a 	mov	r4,zero
10001384:	01400044 	movi	r5,1
10001388:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000138c:	0009883a 	mov	r4,zero
10001390:	014004c4 	movi	r5,19
10001394:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001398:	0009883a 	mov	r4,zero
1000139c:	01414504 	movi	r5,1300
100013a0:	00003e00 	call	100003e0 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
100013a4:	0009883a 	mov	r4,zero
100013a8:	01414004 	movi	r5,1280
100013ac:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0002);
100013b0:	0009883a 	mov	r4,zero
100013b4:	01400084 	movi	r5,2
100013b8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);
100013bc:	0009883a 	mov	r4,zero
100013c0:	000b883a 	mov	r5,zero
100013c4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);
100013c8:	0009883a 	mov	r4,zero
100013cc:	000b883a 	mov	r5,zero
100013d0:	00003e00 	call	100003e0 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
100013d4:	0009883a 	mov	r4,zero
100013d8:	000b883a 	mov	r5,zero
100013dc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//
100013e0:	0009883a 	mov	r4,zero
100013e4:	000b883a 	mov	r5,zero
100013e8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0090);//
100013ec:	0009883a 	mov	r4,zero
100013f0:	01402404 	movi	r5,144
100013f4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);
100013f8:	0009883a 	mov	r4,zero
100013fc:	01401044 	movi	r5,65
10001400:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001404:	0009883a 	mov	r4,zero
10001408:	014004c4 	movi	r5,19
1000140c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001410:	0009883a 	mov	r4,zero
10001414:	000b883a 	mov	r5,zero
10001418:	00003e00 	call	100003e0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000141c:	01006c04 	movi	r4,432
10001420:	01414004 	movi	r5,1280
10001424:	00011e80 	call	100011e8 <UsbWrite>
}
10001428:	e037883a 	mov	sp,fp
1000142c:	dfc00117 	ldw	ra,4(sp)
10001430:	df000017 	ldw	fp,0(sp)
10001434:	dec00204 	addi	sp,sp,8
10001438:	f800283a 	ret

1000143c <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
1000143c:	defffe04 	addi	sp,sp,-8
10001440:	dfc00115 	stw	ra,4(sp)
10001444:	df000015 	stw	fp,0(sp)
10001448:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000144c:	01000084 	movi	r4,2
10001450:	01414004 	movi	r5,1280
10001454:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001458:	0009883a 	mov	r4,zero
1000145c:	01414304 	movi	r5,1292
10001460:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001464:	0009883a 	mov	r4,zero
10001468:	01400204 	movi	r5,8
1000146c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001470:	0009883a 	mov	r4,zero
10001474:	0140b404 	movi	r5,720
10001478:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000147c:	0009883a 	mov	r4,zero
10001480:	01400044 	movi	r5,1
10001484:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001488:	0009883a 	mov	r4,zero
1000148c:	014004c4 	movi	r5,19
10001490:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001494:	0009883a 	mov	r4,zero
10001498:	01414504 	movi	r5,1300
1000149c:	00003e00 	call	100003e0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100014a0:	0009883a 	mov	r4,zero
100014a4:	0141a004 	movi	r5,1664
100014a8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
100014ac:	0009883a 	mov	r4,zero
100014b0:	01404004 	movi	r5,256
100014b4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);
100014b8:	0009883a 	mov	r4,zero
100014bc:	000b883a 	mov	r5,zero
100014c0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);
100014c4:	0009883a 	mov	r4,zero
100014c8:	01400204 	movi	r5,8
100014cc:	00003e00 	call	100003e0 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
100014d0:	0009883a 	mov	r4,zero
100014d4:	01414b04 	movi	r5,1324
100014d8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//
100014dc:	0009883a 	mov	r4,zero
100014e0:	01400204 	movi	r5,8
100014e4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//
100014e8:	0009883a 	mov	r4,zero
100014ec:	0140a404 	movi	r5,656
100014f0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);
100014f4:	0009883a 	mov	r4,zero
100014f8:	01401044 	movi	r5,65
100014fc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001500:	0009883a 	mov	r4,zero
10001504:	014004c4 	movi	r5,19
10001508:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0520);
1000150c:	0009883a 	mov	r4,zero
10001510:	01414804 	movi	r5,1312
10001514:	00003e00 	call	100003e0 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10001518:	0009883a 	mov	r4,zero
1000151c:	000b883a 	mov	r5,zero
10001520:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001524:	0009883a 	mov	r4,zero
10001528:	000b883a 	mov	r5,zero
1000152c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10001530:	0009883a 	mov	r4,zero
10001534:	01408404 	movi	r5,528
10001538:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000153c:	0009883a 	mov	r4,zero
10001540:	01401044 	movi	r5,65
10001544:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001548:	0009883a 	mov	r4,zero
1000154c:	014004c4 	movi	r5,19
10001550:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001554:	0009883a 	mov	r4,zero
10001558:	000b883a 	mov	r5,zero
1000155c:	00003e00 	call	100003e0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001560:	01006c04 	movi	r4,432
10001564:	01414004 	movi	r5,1280
10001568:	00011e80 	call	100011e8 <UsbWrite>
}
1000156c:	e037883a 	mov	sp,fp
10001570:	dfc00117 	ldw	ra,4(sp)
10001574:	df000017 	ldw	fp,0(sp)
10001578:	dec00204 	addi	sp,sp,8
1000157c:	f800283a 	ret

10001580 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10001580:	defffe04 	addi	sp,sp,-8
10001584:	dfc00115 	stw	ra,4(sp)
10001588:	df000015 	stw	fp,0(sp)
1000158c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001590:	01000084 	movi	r4,2
10001594:	01414004 	movi	r5,1280
10001598:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000159c:	0009883a 	mov	r4,zero
100015a0:	01414304 	movi	r5,1292
100015a4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100015a8:	0009883a 	mov	r4,zero
100015ac:	01400204 	movi	r5,8
100015b0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100015b4:	0009883a 	mov	r4,zero
100015b8:	0140b404 	movi	r5,720
100015bc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);
100015c0:	0009883a 	mov	r4,zero
100015c4:	01400044 	movi	r5,1
100015c8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100015cc:	0009883a 	mov	r4,zero
100015d0:	014004c4 	movi	r5,19
100015d4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100015d8:	0009883a 	mov	r4,zero
100015dc:	01414504 	movi	r5,1300
100015e0:	00003e00 	call	100003e0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100015e4:	0009883a 	mov	r4,zero
100015e8:	0141a004 	movi	r5,1664
100015ec:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
100015f0:	0009883a 	mov	r4,zero
100015f4:	01404004 	movi	r5,256
100015f8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100015fc:	0009883a 	mov	r4,zero
10001600:	000b883a 	mov	r5,zero
10001604:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10001608:	0009883a 	mov	r4,zero
1000160c:	01400484 	movi	r5,18
10001610:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001614:	0009883a 	mov	r4,zero
10001618:	01415104 	movi	r5,1348
1000161c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001620:	0009883a 	mov	r4,zero
10001624:	01400204 	movi	r5,8
10001628:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000162c:	0009883a 	mov	r4,zero
10001630:	0140a404 	movi	r5,656
10001634:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001638:	0009883a 	mov	r4,zero
1000163c:	01401044 	movi	r5,65
10001640:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001644:	0009883a 	mov	r4,zero
10001648:	014004c4 	movi	r5,19
1000164c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001650:	0009883a 	mov	r4,zero
10001654:	01414804 	movi	r5,1312
10001658:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
1000165c:	0009883a 	mov	r4,zero
10001660:	01415304 	movi	r5,1356
10001664:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001668:	0009883a 	mov	r4,zero
1000166c:	01400204 	movi	r5,8
10001670:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001674:	0009883a 	mov	r4,zero
10001678:	0140a404 	movi	r5,656
1000167c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10001680:	0009883a 	mov	r4,zero
10001684:	01400044 	movi	r5,1
10001688:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000168c:	0009883a 	mov	r4,zero
10001690:	014004c4 	movi	r5,19
10001694:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001698:	0009883a 	mov	r4,zero
1000169c:	01414b04 	movi	r5,1324
100016a0:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
100016a4:	0009883a 	mov	r4,zero
100016a8:	01415504 	movi	r5,1364
100016ac:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
100016b0:	0009883a 	mov	r4,zero
100016b4:	01400084 	movi	r5,2
100016b8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100016bc:	0009883a 	mov	r4,zero
100016c0:	0140a404 	movi	r5,656
100016c4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100016c8:	0009883a 	mov	r4,zero
100016cc:	01401044 	movi	r5,65
100016d0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100016d4:	0009883a 	mov	r4,zero
100016d8:	014004c4 	movi	r5,19
100016dc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100016e0:	0009883a 	mov	r4,zero
100016e4:	01414e04 	movi	r5,1336
100016e8:	00003e00 	call	100003e0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
100016ec:	0009883a 	mov	r4,zero
100016f0:	000b883a 	mov	r5,zero
100016f4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100016f8:	0009883a 	mov	r4,zero
100016fc:	000b883a 	mov	r5,zero
10001700:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10001704:	0009883a 	mov	r4,zero
10001708:	01408404 	movi	r5,528
1000170c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10001710:	0009883a 	mov	r4,zero
10001714:	01401044 	movi	r5,65
10001718:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
1000171c:	0009883a 	mov	r4,zero
10001720:	014004c4 	movi	r5,19
10001724:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001728:	0009883a 	mov	r4,zero
1000172c:	000b883a 	mov	r5,zero
10001730:	00003e00 	call	100003e0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001734:	01006c04 	movi	r4,432
10001738:	01414004 	movi	r5,1280
1000173c:	00011e80 	call	100011e8 <UsbWrite>
}
10001740:	e037883a 	mov	sp,fp
10001744:	dfc00117 	ldw	ra,4(sp)
10001748:	df000017 	ldw	fp,0(sp)
1000174c:	dec00204 	addi	sp,sp,8
10001750:	f800283a 	ret

10001754 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10001754:	defffe04 	addi	sp,sp,-8
10001758:	dfc00115 	stw	ra,4(sp)
1000175c:	df000015 	stw	fp,0(sp)
10001760:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001764:	01000084 	movi	r4,2
10001768:	01414004 	movi	r5,1280
1000176c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001770:	0009883a 	mov	r4,zero
10001774:	01414304 	movi	r5,1292
10001778:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000177c:	0009883a 	mov	r4,zero
10001780:	01400204 	movi	r5,8
10001784:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001788:	0009883a 	mov	r4,zero
1000178c:	0140b404 	movi	r5,720
10001790:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001794:	0009883a 	mov	r4,zero
10001798:	01400044 	movi	r5,1
1000179c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);
100017a0:	0009883a 	mov	r4,zero
100017a4:	014004c4 	movi	r5,19
100017a8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0514);
100017ac:	0009883a 	mov	r4,zero
100017b0:	01414504 	movi	r5,1300
100017b4:	00003e00 	call	100003e0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100017b8:	0009883a 	mov	r4,zero
100017bc:	0141a004 	movi	r5,1664
100017c0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100017c4:	0009883a 	mov	r4,zero
100017c8:	01408004 	movi	r5,512
100017cc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100017d0:	0009883a 	mov	r4,zero
100017d4:	000b883a 	mov	r5,zero
100017d8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
100017dc:	0009883a 	mov	r4,zero
100017e0:	01400244 	movi	r5,9
100017e4:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100017e8:	0009883a 	mov	r4,zero
100017ec:	01415104 	movi	r5,1348
100017f0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100017f4:	0009883a 	mov	r4,zero
100017f8:	01400204 	movi	r5,8
100017fc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001800:	0009883a 	mov	r4,zero
10001804:	0140a404 	movi	r5,656
10001808:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000180c:	0009883a 	mov	r4,zero
10001810:	01401044 	movi	r5,65
10001814:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001818:	0009883a 	mov	r4,zero
1000181c:	014004c4 	movi	r5,19
10001820:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001824:	0009883a 	mov	r4,zero
10001828:	01414804 	movi	r5,1312
1000182c:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001830:	0009883a 	mov	r4,zero
10001834:	01415304 	movi	r5,1356
10001838:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
1000183c:	0009883a 	mov	r4,zero
10001840:	01400044 	movi	r5,1
10001844:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001848:	0009883a 	mov	r4,zero
1000184c:	0140a404 	movi	r5,656
10001850:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001854:	0009883a 	mov	r4,zero
10001858:	01400044 	movi	r5,1
1000185c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001860:	0009883a 	mov	r4,zero
10001864:	014004c4 	movi	r5,19
10001868:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000186c:	0009883a 	mov	r4,zero
10001870:	01414b04 	movi	r5,1324
10001874:	00003e00 	call	100003e0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001878:	0009883a 	mov	r4,zero
1000187c:	000b883a 	mov	r5,zero
10001880:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001884:	0009883a 	mov	r4,zero
10001888:	000b883a 	mov	r5,zero
1000188c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001890:	0009883a 	mov	r4,zero
10001894:	01408404 	movi	r5,528
10001898:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000189c:	0009883a 	mov	r4,zero
100018a0:	01401044 	movi	r5,65
100018a4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100018a8:	0009883a 	mov	r4,zero
100018ac:	014004c4 	movi	r5,19
100018b0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100018b4:	0009883a 	mov	r4,zero
100018b8:	000b883a 	mov	r5,zero
100018bc:	00003e00 	call	100003e0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100018c0:	01006c04 	movi	r4,432
100018c4:	01414004 	movi	r5,1280
100018c8:	00011e80 	call	100011e8 <UsbWrite>
}
100018cc:	e037883a 	mov	sp,fp
100018d0:	dfc00117 	ldw	ra,4(sp)
100018d4:	df000017 	ldw	fp,0(sp)
100018d8:	dec00204 	addi	sp,sp,8
100018dc:	f800283a 	ret

100018e0 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
100018e0:	defffe04 	addi	sp,sp,-8
100018e4:	dfc00115 	stw	ra,4(sp)
100018e8:	df000015 	stw	fp,0(sp)
100018ec:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100018f0:	01000084 	movi	r4,2
100018f4:	01414004 	movi	r5,1280
100018f8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x050C);
100018fc:	0009883a 	mov	r4,zero
10001900:	01414304 	movi	r5,1292
10001904:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001908:	0009883a 	mov	r4,zero
1000190c:	01400204 	movi	r5,8
10001910:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001914:	0009883a 	mov	r4,zero
10001918:	0140b404 	movi	r5,720
1000191c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001920:	0009883a 	mov	r4,zero
10001924:	01400044 	movi	r5,1
10001928:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000192c:	0009883a 	mov	r4,zero
10001930:	014004c4 	movi	r5,19
10001934:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001938:	0009883a 	mov	r4,zero
1000193c:	01414504 	movi	r5,1300
10001940:	00003e00 	call	100003e0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001944:	0009883a 	mov	r4,zero
10001948:	0141a004 	movi	r5,1664
1000194c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001950:	0009883a 	mov	r4,zero
10001954:	01408004 	movi	r5,512
10001958:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000195c:	0009883a 	mov	r4,zero
10001960:	000b883a 	mov	r5,zero
10001964:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10001968:	0009883a 	mov	r4,zero
1000196c:	01403fc4 	movi	r5,255
10001970:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10001974:	0009883a 	mov	r4,zero
10001978:	01415704 	movi	r5,1372
1000197c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001980:	0009883a 	mov	r4,zero
10001984:	01400204 	movi	r5,8
10001988:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000198c:	0009883a 	mov	r4,zero
10001990:	0140a404 	movi	r5,656
10001994:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001998:	0009883a 	mov	r4,zero
1000199c:	01401044 	movi	r5,65
100019a0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100019a4:	0009883a 	mov	r4,zero
100019a8:	014004c4 	movi	r5,19
100019ac:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100019b0:	0009883a 	mov	r4,zero
100019b4:	01414804 	movi	r5,1312
100019b8:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
100019bc:	0009883a 	mov	r4,zero
100019c0:	01415904 	movi	r5,1380
100019c4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100019c8:	0009883a 	mov	r4,zero
100019cc:	01400204 	movi	r5,8
100019d0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100019d4:	0009883a 	mov	r4,zero
100019d8:	0140a404 	movi	r5,656
100019dc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100019e0:	0009883a 	mov	r4,zero
100019e4:	01400044 	movi	r5,1
100019e8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100019ec:	0009883a 	mov	r4,zero
100019f0:	014004c4 	movi	r5,19
100019f4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100019f8:	0009883a 	mov	r4,zero
100019fc:	01414b04 	movi	r5,1324
10001a00:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10001a04:	0009883a 	mov	r4,zero
10001a08:	01415b04 	movi	r5,1388
10001a0c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001a10:	0009883a 	mov	r4,zero
10001a14:	01400204 	movi	r5,8
10001a18:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001a1c:	0009883a 	mov	r4,zero
10001a20:	0140a404 	movi	r5,656
10001a24:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001a28:	0009883a 	mov	r4,zero
10001a2c:	01401044 	movi	r5,65
10001a30:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001a34:	0009883a 	mov	r4,zero
10001a38:	014004c4 	movi	r5,19
10001a3c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001a40:	0009883a 	mov	r4,zero
10001a44:	01414e04 	movi	r5,1336
10001a48:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10001a4c:	0009883a 	mov	r4,zero
10001a50:	01415d04 	movi	r5,1396
10001a54:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001a58:	0009883a 	mov	r4,zero
10001a5c:	01400204 	movi	r5,8
10001a60:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001a64:	0009883a 	mov	r4,zero
10001a68:	0140a404 	movi	r5,656
10001a6c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001a70:	0009883a 	mov	r4,zero
10001a74:	01400044 	movi	r5,1
10001a78:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001a7c:	0009883a 	mov	r4,zero
10001a80:	014004c4 	movi	r5,19
10001a84:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001a88:	0009883a 	mov	r4,zero
10001a8c:	01415104 	movi	r5,1348
10001a90:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10001a94:	0009883a 	mov	r4,zero
10001a98:	01415f04 	movi	r5,1404
10001a9c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10001aa0:	0009883a 	mov	r4,zero
10001aa4:	01400084 	movi	r5,2
10001aa8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001aac:	0009883a 	mov	r4,zero
10001ab0:	0140a404 	movi	r5,656
10001ab4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001ab8:	0009883a 	mov	r4,zero
10001abc:	01401044 	movi	r5,65
10001ac0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001ac4:	0009883a 	mov	r4,zero
10001ac8:	014004c4 	movi	r5,19
10001acc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001ad0:	0009883a 	mov	r4,zero
10001ad4:	01415404 	movi	r5,1360
10001ad8:	00003e00 	call	100003e0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10001adc:	0009883a 	mov	r4,zero
10001ae0:	000b883a 	mov	r5,zero
10001ae4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001ae8:	0009883a 	mov	r4,zero
10001aec:	000b883a 	mov	r5,zero
10001af0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10001af4:	0009883a 	mov	r4,zero
10001af8:	01408404 	movi	r5,528
10001afc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10001b00:	0009883a 	mov	r4,zero
10001b04:	01401044 	movi	r5,65
10001b08:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001b0c:	0009883a 	mov	r4,zero
10001b10:	014004c4 	movi	r5,19
10001b14:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001b18:	0009883a 	mov	r4,zero
10001b1c:	000b883a 	mov	r5,zero
10001b20:	00003e00 	call	100003e0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001b24:	01006c04 	movi	r4,432
10001b28:	01414004 	movi	r5,1280
10001b2c:	00011e80 	call	100011e8 <UsbWrite>
}
10001b30:	e037883a 	mov	sp,fp
10001b34:	dfc00117 	ldw	ra,4(sp)
10001b38:	df000017 	ldw	fp,0(sp)
10001b3c:	dec00204 	addi	sp,sp,8
10001b40:	f800283a 	ret

10001b44 <UsbSetConfig>:

void UsbSetConfig()
{
10001b44:	defffe04 	addi	sp,sp,-8
10001b48:	dfc00115 	stw	ra,4(sp)
10001b4c:	df000015 	stw	fp,0(sp)
10001b50:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001b54:	01000084 	movi	r4,2
10001b58:	01414004 	movi	r5,1280
10001b5c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001b60:	0009883a 	mov	r4,zero
10001b64:	01414304 	movi	r5,1292
10001b68:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001b6c:	0009883a 	mov	r4,zero
10001b70:	01400204 	movi	r5,8
10001b74:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001b78:	0009883a 	mov	r4,zero
10001b7c:	0140b404 	movi	r5,720
10001b80:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001b84:	0009883a 	mov	r4,zero
10001b88:	01400044 	movi	r5,1
10001b8c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b90:	0009883a 	mov	r4,zero
10001b94:	014004c4 	movi	r5,19
10001b98:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001b9c:	0009883a 	mov	r4,zero
10001ba0:	01414504 	movi	r5,1300
10001ba4:	00003e00 	call	100003e0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001ba8:	0009883a 	mov	r4,zero
10001bac:	01424004 	movi	r5,2304
10001bb0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10001bb4:	0009883a 	mov	r4,zero
10001bb8:	01400044 	movi	r5,1
10001bbc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001bc0:	0009883a 	mov	r4,zero
10001bc4:	000b883a 	mov	r5,zero
10001bc8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001bcc:	0009883a 	mov	r4,zero
10001bd0:	000b883a 	mov	r5,zero
10001bd4:	00003e00 	call	100003e0 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001bd8:	0009883a 	mov	r4,zero
10001bdc:	000b883a 	mov	r5,zero
10001be0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001be4:	0009883a 	mov	r4,zero
10001be8:	000b883a 	mov	r5,zero
10001bec:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001bf0:	0009883a 	mov	r4,zero
10001bf4:	0140a404 	movi	r5,656
10001bf8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001bfc:	0009883a 	mov	r4,zero
10001c00:	01401044 	movi	r5,65
10001c04:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001c08:	0009883a 	mov	r4,zero
10001c0c:	014004c4 	movi	r5,19
10001c10:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001c14:	0009883a 	mov	r4,zero
10001c18:	000b883a 	mov	r5,zero
10001c1c:	00003e00 	call	100003e0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001c20:	01006c04 	movi	r4,432
10001c24:	01414004 	movi	r5,1280
10001c28:	00011e80 	call	100011e8 <UsbWrite>

}
10001c2c:	e037883a 	mov	sp,fp
10001c30:	dfc00117 	ldw	ra,4(sp)
10001c34:	df000017 	ldw	fp,0(sp)
10001c38:	dec00204 	addi	sp,sp,8
10001c3c:	f800283a 	ret

10001c40 <UsbClassRequest>:

void UsbClassRequest()
{
10001c40:	defffe04 	addi	sp,sp,-8
10001c44:	dfc00115 	stw	ra,4(sp)
10001c48:	df000015 	stw	fp,0(sp)
10001c4c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001c50:	01000084 	movi	r4,2
10001c54:	01414004 	movi	r5,1280
10001c58:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001c5c:	0009883a 	mov	r4,zero
10001c60:	01414304 	movi	r5,1292
10001c64:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001c68:	0009883a 	mov	r4,zero
10001c6c:	01400204 	movi	r5,8
10001c70:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001c74:	0009883a 	mov	r4,zero
10001c78:	0140b404 	movi	r5,720
10001c7c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001c80:	0009883a 	mov	r4,zero
10001c84:	01400044 	movi	r5,1
10001c88:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001c8c:	0009883a 	mov	r4,zero
10001c90:	014004c4 	movi	r5,19
10001c94:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001c98:	0009883a 	mov	r4,zero
10001c9c:	01414504 	movi	r5,1300
10001ca0:	00003e00 	call	100003e0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001ca4:	0009883a 	mov	r4,zero
10001ca8:	01428844 	movi	r5,2593
10001cac:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10001cb0:	0009883a 	mov	r4,zero
10001cb4:	000b883a 	mov	r5,zero
10001cb8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001cbc:	0009883a 	mov	r4,zero
10001cc0:	000b883a 	mov	r5,zero
10001cc4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001cc8:	0009883a 	mov	r4,zero
10001ccc:	000b883a 	mov	r5,zero
10001cd0:	00003e00 	call	100003e0 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001cd4:	0009883a 	mov	r4,zero
10001cd8:	000b883a 	mov	r5,zero
10001cdc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001ce0:	0009883a 	mov	r4,zero
10001ce4:	000b883a 	mov	r5,zero
10001ce8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001cec:	0009883a 	mov	r4,zero
10001cf0:	0140a404 	movi	r5,656
10001cf4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001cf8:	0009883a 	mov	r4,zero
10001cfc:	01401044 	movi	r5,65
10001d00:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001d04:	0009883a 	mov	r4,zero
10001d08:	014004c4 	movi	r5,19
10001d0c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001d10:	0009883a 	mov	r4,zero
10001d14:	000b883a 	mov	r5,zero
10001d18:	00003e00 	call	100003e0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001d1c:	01006c04 	movi	r4,432
10001d20:	01414004 	movi	r5,1280
10001d24:	00011e80 	call	100011e8 <UsbWrite>
}
10001d28:	e037883a 	mov	sp,fp
10001d2c:	dfc00117 	ldw	ra,4(sp)
10001d30:	df000017 	ldw	fp,0(sp)
10001d34:	dec00204 	addi	sp,sp,8
10001d38:	f800283a 	ret

10001d3c <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10001d3c:	defffe04 	addi	sp,sp,-8
10001d40:	dfc00115 	stw	ra,4(sp)
10001d44:	df000015 	stw	fp,0(sp)
10001d48:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001d4c:	01000084 	movi	r4,2
10001d50:	01414004 	movi	r5,1280
10001d54:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001d58:	0009883a 	mov	r4,zero
10001d5c:	01414304 	movi	r5,1292
10001d60:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001d64:	0009883a 	mov	r4,zero
10001d68:	01400204 	movi	r5,8
10001d6c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001d70:	0009883a 	mov	r4,zero
10001d74:	0140b404 	movi	r5,720
10001d78:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001d7c:	0009883a 	mov	r4,zero
10001d80:	01400044 	movi	r5,1
10001d84:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001d88:	0009883a 	mov	r4,zero
10001d8c:	014004c4 	movi	r5,19
10001d90:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001d94:	0009883a 	mov	r4,zero
10001d98:	01414504 	movi	r5,1300
10001d9c:	00003e00 	call	100003e0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001da0:	0009883a 	mov	r4,zero
10001da4:	0141a044 	movi	r5,1665
10001da8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001dac:	0009883a 	mov	r4,zero
10001db0:	01484004 	movi	r5,8448
10001db4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001db8:	0009883a 	mov	r4,zero
10001dbc:	000b883a 	mov	r5,zero
10001dc0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001dc4:	0009883a 	mov	r4,zero
10001dc8:	01401ec4 	movi	r5,123
10001dcc:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001dd0:	0009883a 	mov	r4,zero
10001dd4:	01415104 	movi	r5,1348
10001dd8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001ddc:	0009883a 	mov	r4,zero
10001de0:	01400204 	movi	r5,8
10001de4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001de8:	0009883a 	mov	r4,zero
10001dec:	0140a404 	movi	r5,656
10001df0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001df4:	0009883a 	mov	r4,zero
10001df8:	01401044 	movi	r5,65
10001dfc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001e00:	0009883a 	mov	r4,zero
10001e04:	014004c4 	movi	r5,19
10001e08:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001e0c:	0009883a 	mov	r4,zero
10001e10:	01414804 	movi	r5,1312
10001e14:	00003e00 	call	100003e0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001e18:	0009883a 	mov	r4,zero
10001e1c:	000b883a 	mov	r5,zero
10001e20:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001e24:	0009883a 	mov	r4,zero
10001e28:	000b883a 	mov	r5,zero
10001e2c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001e30:	0009883a 	mov	r4,zero
10001e34:	01408404 	movi	r5,528
10001e38:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001e3c:	0009883a 	mov	r4,zero
10001e40:	01401044 	movi	r5,65
10001e44:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001e48:	0009883a 	mov	r4,zero
10001e4c:	014004c4 	movi	r5,19
10001e50:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001e54:	0009883a 	mov	r4,zero
10001e58:	000b883a 	mov	r5,zero
10001e5c:	00003e00 	call	100003e0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001e60:	01006c04 	movi	r4,432
10001e64:	01414004 	movi	r5,1280
10001e68:	00011e80 	call	100011e8 <UsbWrite>

}
10001e6c:	e037883a 	mov	sp,fp
10001e70:	dfc00117 	ldw	ra,4(sp)
10001e74:	df000017 	ldw	fp,0(sp)
10001e78:	dec00204 	addi	sp,sp,8
10001e7c:	f800283a 	ret

10001e80 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10001e80:	defffe04 	addi	sp,sp,-8
10001e84:	dfc00115 	stw	ra,4(sp)
10001e88:	df000015 	stw	fp,0(sp)
10001e8c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001e90:	01000084 	movi	r4,2
10001e94:	01414004 	movi	r5,1280
10001e98:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001e9c:	0009883a 	mov	r4,zero
10001ea0:	01414304 	movi	r5,1292
10001ea4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001ea8:	0009883a 	mov	r4,zero
10001eac:	01400204 	movi	r5,8
10001eb0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001eb4:	0009883a 	mov	r4,zero
10001eb8:	0140b404 	movi	r5,720
10001ebc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001ec0:	0009883a 	mov	r4,zero
10001ec4:	01400044 	movi	r5,1
10001ec8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001ecc:	0009883a 	mov	r4,zero
10001ed0:	014004c4 	movi	r5,19
10001ed4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001ed8:	0009883a 	mov	r4,zero
10001edc:	01414504 	movi	r5,1300
10001ee0:	00003e00 	call	100003e0 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001ee4:	0009883a 	mov	r4,zero
10001ee8:	0141a044 	movi	r5,1665
10001eec:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10001ef0:	0009883a 	mov	r4,zero
10001ef4:	01488004 	movi	r5,8704
10001ef8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001efc:	0009883a 	mov	r4,zero
10001f00:	000b883a 	mov	r5,zero
10001f04:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001f08:	0009883a 	mov	r4,zero
10001f0c:	01401ec4 	movi	r5,123
10001f10:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10001f14:	0009883a 	mov	r4,zero
10001f18:	01416004 	movi	r5,1408
10001f1c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001f20:	0009883a 	mov	r4,zero
10001f24:	01400204 	movi	r5,8
10001f28:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001f2c:	0009883a 	mov	r4,zero
10001f30:	0140a404 	movi	r5,656
10001f34:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001f38:	0009883a 	mov	r4,zero
10001f3c:	01401044 	movi	r5,65
10001f40:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001f44:	0009883a 	mov	r4,zero
10001f48:	014004c4 	movi	r5,19
10001f4c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001f50:	0009883a 	mov	r4,zero
10001f54:	01414804 	movi	r5,1312
10001f58:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10001f5c:	0009883a 	mov	r4,zero
10001f60:	01416204 	movi	r5,1416
10001f64:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001f68:	0009883a 	mov	r4,zero
10001f6c:	01400204 	movi	r5,8
10001f70:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001f74:	0009883a 	mov	r4,zero
10001f78:	0140a404 	movi	r5,656
10001f7c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001f80:	0009883a 	mov	r4,zero
10001f84:	01400044 	movi	r5,1
10001f88:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001f8c:	0009883a 	mov	r4,zero
10001f90:	014004c4 	movi	r5,19
10001f94:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001f98:	0009883a 	mov	r4,zero
10001f9c:	01414b04 	movi	r5,1324
10001fa0:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10001fa4:	0009883a 	mov	r4,zero
10001fa8:	01416404 	movi	r5,1424
10001fac:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001fb0:	0009883a 	mov	r4,zero
10001fb4:	01400204 	movi	r5,8
10001fb8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001fbc:	0009883a 	mov	r4,zero
10001fc0:	0140a404 	movi	r5,656
10001fc4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001fc8:	0009883a 	mov	r4,zero
10001fcc:	01401044 	movi	r5,65
10001fd0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001fd4:	0009883a 	mov	r4,zero
10001fd8:	014004c4 	movi	r5,19
10001fdc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001fe0:	0009883a 	mov	r4,zero
10001fe4:	01414e04 	movi	r5,1336
10001fe8:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10001fec:	0009883a 	mov	r4,zero
10001ff0:	01416604 	movi	r5,1432
10001ff4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001ff8:	0009883a 	mov	r4,zero
10001ffc:	01400204 	movi	r5,8
10002000:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002004:	0009883a 	mov	r4,zero
10002008:	0140a404 	movi	r5,656
1000200c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002010:	0009883a 	mov	r4,zero
10002014:	01400044 	movi	r5,1
10002018:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
1000201c:	0009883a 	mov	r4,zero
10002020:	014004c4 	movi	r5,19
10002024:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10002028:	0009883a 	mov	r4,zero
1000202c:	01415104 	movi	r5,1348
10002030:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10002034:	0009883a 	mov	r4,zero
10002038:	01416804 	movi	r5,1440
1000203c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002040:	0009883a 	mov	r4,zero
10002044:	01400204 	movi	r5,8
10002048:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000204c:	0009883a 	mov	r4,zero
10002050:	0140a404 	movi	r5,656
10002054:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10002058:	0009883a 	mov	r4,zero
1000205c:	01401044 	movi	r5,65
10002060:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002064:	0009883a 	mov	r4,zero
10002068:	014004c4 	movi	r5,19
1000206c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002070:	0009883a 	mov	r4,zero
10002074:	01415404 	movi	r5,1360
10002078:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
1000207c:	0009883a 	mov	r4,zero
10002080:	01416a04 	movi	r5,1448
10002084:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002088:	0009883a 	mov	r4,zero
1000208c:	01400204 	movi	r5,8
10002090:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002094:	0009883a 	mov	r4,zero
10002098:	0140a404 	movi	r5,656
1000209c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100020a0:	0009883a 	mov	r4,zero
100020a4:	01400044 	movi	r5,1
100020a8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100020ac:	0009883a 	mov	r4,zero
100020b0:	014004c4 	movi	r5,19
100020b4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
100020b8:	0009883a 	mov	r4,zero
100020bc:	01415704 	movi	r5,1372
100020c0:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
100020c4:	0009883a 	mov	r4,zero
100020c8:	01416c04 	movi	r5,1456
100020cc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100020d0:	0009883a 	mov	r4,zero
100020d4:	01400204 	movi	r5,8
100020d8:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
100020dc:	0009883a 	mov	r4,zero
100020e0:	0140a404 	movi	r5,656
100020e4:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
100020e8:	0009883a 	mov	r4,zero
100020ec:	01401044 	movi	r5,65
100020f0:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100020f4:	0009883a 	mov	r4,zero
100020f8:	014004c4 	movi	r5,19
100020fc:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10002100:	0009883a 	mov	r4,zero
10002104:	01415a04 	movi	r5,1384
10002108:	00003e00 	call	100003e0 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
1000210c:	0009883a 	mov	r4,zero
10002110:	01416e04 	movi	r5,1464
10002114:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10002118:	0009883a 	mov	r4,zero
1000211c:	014000c4 	movi	r5,3
10002120:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002124:	0009883a 	mov	r4,zero
10002128:	0140a404 	movi	r5,656
1000212c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002130:	0009883a 	mov	r4,zero
10002134:	01400044 	movi	r5,1
10002138:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
1000213c:	0009883a 	mov	r4,zero
10002140:	014004c4 	movi	r5,19
10002144:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10002148:	0009883a 	mov	r4,zero
1000214c:	01415d04 	movi	r5,1396
10002150:	00003e00 	call	100003e0 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10002154:	0009883a 	mov	r4,zero
10002158:	000b883a 	mov	r5,zero
1000215c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002160:	0009883a 	mov	r4,zero
10002164:	000b883a 	mov	r5,zero
10002168:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
1000216c:	0009883a 	mov	r4,zero
10002170:	01408404 	movi	r5,528
10002174:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002178:	0009883a 	mov	r4,zero
1000217c:	01401044 	movi	r5,65
10002180:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002184:	0009883a 	mov	r4,zero
10002188:	014004c4 	movi	r5,19
1000218c:	00003e00 	call	100003e0 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002190:	0009883a 	mov	r4,zero
10002194:	000b883a 	mov	r5,zero
10002198:	00003e00 	call	100003e0 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000219c:	01006c04 	movi	r4,432
100021a0:	01414004 	movi	r5,1280
100021a4:	00011e80 	call	100011e8 <UsbWrite>

}
100021a8:	e037883a 	mov	sp,fp
100021ac:	dfc00117 	ldw	ra,4(sp)
100021b0:	df000017 	ldw	fp,0(sp)
100021b4:	dec00204 	addi	sp,sp,8
100021b8:	f800283a 	ret

100021bc <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
100021bc:	defffd04 	addi	sp,sp,-12
100021c0:	dfc00215 	stw	ra,8(sp)
100021c4:	df000115 	stw	fp,4(sp)
100021c8:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
100021cc:	01005104 	movi	r4,324
100021d0:	000123c0 	call	1000123c <UsbRead>
100021d4:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
100021d8:	01005104 	movi	r4,324
100021dc:	000b883a 	mov	r5,zero
100021e0:	00011e80 	call	100011e8 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100021e4:	00000d06 	br	1000221c <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
100021e8:	e0bfff0b 	ldhu	r2,-4(fp)
100021ec:	10000526 	beq	r2,zero,10002204 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
100021f0:	e0bfff0b 	ldhu	r2,-4(fp)
100021f4:	01040074 	movhi	r4,4097
100021f8:	21076c04 	addi	r4,r4,7600
100021fc:	100b883a 	mov	r5,r2
10002200:	00023680 	call	10002368 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002204:	01005104 	movi	r4,324
10002208:	000123c0 	call	1000123c <UsbRead>
1000220c:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002210:	01005104 	movi	r4,324
10002214:	000b883a 	mov	r5,zero
10002218:	00011e80 	call	100011e8 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
1000221c:	e0bfff0b 	ldhu	r2,-4(fp)
10002220:	10840018 	cmpnei	r2,r2,4096
10002224:	103ff01e 	bne	r2,zero,100021e8 <__alt_data_end+0xf80021e8>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10002228:	e0bfff0b 	ldhu	r2,-4(fp)
}
1000222c:	e037883a 	mov	sp,fp
10002230:	dfc00117 	ldw	ra,4(sp)
10002234:	df000017 	ldw	fp,0(sp)
10002238:	dec00204 	addi	sp,sp,8
1000223c:	f800283a 	ret

10002240 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10002240:	defffd04 	addi	sp,sp,-12
10002244:	dfc00215 	stw	ra,8(sp)
10002248:	df000115 	stw	fp,4(sp)
1000224c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10002250:	010000c4 	movi	r4,3
10002254:	00004380 	call	10000438 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10002258:	01005104 	movi	r4,324
1000225c:	000123c0 	call	1000123c <UsbRead>
10002260:	10bfffcc 	andi	r2,r2,65535
10002264:	10840018 	cmpnei	r2,r2,4096
10002268:	1000091e 	bne	r2,zero,10002290 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
1000226c:	01005104 	movi	r4,324
10002270:	000b883a 	mov	r5,zero
10002274:	00011e80 	call	100011e8 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002278:	0001883a 	nop
1000227c:	010000c4 	movi	r4,3
10002280:	00004380 	call	10000438 <IO_read>
10002284:	10bfffcc 	andi	r2,r2,65535
10002288:	1080040c 	andi	r2,r2,16
1000228c:	103ffb26 	beq	r2,zero,1000227c <__alt_data_end+0xf800227c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10002290:	01000084 	movi	r4,2
10002294:	01414204 	movi	r5,1288
10002298:	00003e00 	call	100003e0 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000229c:	0009883a 	mov	r4,zero
100022a0:	00004380 	call	10000438 <IO_read>
100022a4:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
100022a8:	e0bfff0b 	ldhu	r2,-4(fp)
}
100022ac:	e037883a 	mov	sp,fp
100022b0:	dfc00117 	ldw	ra,4(sp)
100022b4:	df000017 	ldw	fp,0(sp)
100022b8:	dec00204 	addi	sp,sp,8
100022bc:	f800283a 	ret

100022c0 <UsbPrintMem>:


void UsbPrintMem()
{
100022c0:	defffc04 	addi	sp,sp,-16
100022c4:	dfc00315 	stw	ra,12(sp)
100022c8:	df000215 	stw	fp,8(sp)
100022cc:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
100022d0:	01000084 	movi	r4,2
100022d4:	01414004 	movi	r5,1280
100022d8:	00003e00 	call	100003e0 <IO_write>
	for (i = 0; i <= 200; i += 2)
100022dc:	e03ffe15 	stw	zero,-8(fp)
100022e0:	00000e06 	br	1000231c <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
100022e4:	0009883a 	mov	r4,zero
100022e8:	00004380 	call	10000438 <IO_read>
100022ec:	10bfffcc 	andi	r2,r2,65535
100022f0:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
100022f4:	e0bffe17 	ldw	r2,-8(fp)
100022f8:	10814004 	addi	r2,r2,1280
100022fc:	01040074 	movhi	r4,4097
10002300:	21077404 	addi	r4,r4,7632
10002304:	100b883a 	mov	r5,r2
10002308:	e1bfff17 	ldw	r6,-4(fp)
1000230c:	00023680 	call	10002368 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10002310:	e0bffe17 	ldw	r2,-8(fp)
10002314:	10800084 	addi	r2,r2,2
10002318:	e0bffe15 	stw	r2,-8(fp)
1000231c:	e0bffe17 	ldw	r2,-8(fp)
10002320:	10803250 	cmplti	r2,r2,201
10002324:	103fef1e 	bne	r2,zero,100022e4 <__alt_data_end+0xf80022e4>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10002328:	e037883a 	mov	sp,fp
1000232c:	dfc00117 	ldw	ra,4(sp)
10002330:	df000017 	ldw	fp,0(sp)
10002334:	dec00204 	addi	sp,sp,8
10002338:	f800283a 	ret

1000233c <_printf_r>:
1000233c:	defffd04 	addi	sp,sp,-12
10002340:	dfc00015 	stw	ra,0(sp)
10002344:	d9800115 	stw	r6,4(sp)
10002348:	d9c00215 	stw	r7,8(sp)
1000234c:	280d883a 	mov	r6,r5
10002350:	21400217 	ldw	r5,8(r4)
10002354:	d9c00104 	addi	r7,sp,4
10002358:	00025840 	call	10002584 <___vfprintf_internal_r>
1000235c:	dfc00017 	ldw	ra,0(sp)
10002360:	dec00304 	addi	sp,sp,12
10002364:	f800283a 	ret

10002368 <printf>:
10002368:	defffc04 	addi	sp,sp,-16
1000236c:	dfc00015 	stw	ra,0(sp)
10002370:	d9400115 	stw	r5,4(sp)
10002374:	d9800215 	stw	r6,8(sp)
10002378:	d9c00315 	stw	r7,12(sp)
1000237c:	00840074 	movhi	r2,4097
10002380:	108ee504 	addi	r2,r2,15252
10002384:	10800017 	ldw	r2,0(r2)
10002388:	200b883a 	mov	r5,r4
1000238c:	d9800104 	addi	r6,sp,4
10002390:	11000217 	ldw	r4,8(r2)
10002394:	00046800 	call	10004680 <__vfprintf_internal>
10002398:	dfc00017 	ldw	ra,0(sp)
1000239c:	dec00404 	addi	sp,sp,16
100023a0:	f800283a 	ret

100023a4 <_puts_r>:
100023a4:	defff604 	addi	sp,sp,-40
100023a8:	dc000715 	stw	r16,28(sp)
100023ac:	2021883a 	mov	r16,r4
100023b0:	2809883a 	mov	r4,r5
100023b4:	dc400815 	stw	r17,32(sp)
100023b8:	dfc00915 	stw	ra,36(sp)
100023bc:	2823883a 	mov	r17,r5
100023c0:	00024ec0 	call	100024ec <strlen>
100023c4:	00c40074 	movhi	r3,4097
100023c8:	18cee504 	addi	r3,r3,15252
100023cc:	18c00017 	ldw	r3,0(r3)
100023d0:	11000044 	addi	r4,r2,1
100023d4:	d8800115 	stw	r2,4(sp)
100023d8:	18c00217 	ldw	r3,8(r3)
100023dc:	01440074 	movhi	r5,4097
100023e0:	29477904 	addi	r5,r5,7652
100023e4:	1880030b 	ldhu	r2,12(r3)
100023e8:	d9400215 	stw	r5,8(sp)
100023ec:	d9000615 	stw	r4,24(sp)
100023f0:	01400044 	movi	r5,1
100023f4:	01000084 	movi	r4,2
100023f8:	d9000515 	stw	r4,20(sp)
100023fc:	dc400015 	stw	r17,0(sp)
10002400:	d9400315 	stw	r5,12(sp)
10002404:	dec00415 	stw	sp,16(sp)
10002408:	1108000c 	andi	r4,r2,8192
1000240c:	2000061e 	bne	r4,zero,10002428 <_puts_r+0x84>
10002410:	19401917 	ldw	r5,100(r3)
10002414:	0137ffc4 	movi	r4,-8193
10002418:	10880014 	ori	r2,r2,8192
1000241c:	2908703a 	and	r4,r5,r4
10002420:	1880030d 	sth	r2,12(r3)
10002424:	19001915 	stw	r4,100(r3)
10002428:	81400217 	ldw	r5,8(r16)
1000242c:	8009883a 	mov	r4,r16
10002430:	d9800404 	addi	r6,sp,16
10002434:	0006b440 	call	10006b44 <__sfvwrite_r>
10002438:	1000061e 	bne	r2,zero,10002454 <_puts_r+0xb0>
1000243c:	00800284 	movi	r2,10
10002440:	dfc00917 	ldw	ra,36(sp)
10002444:	dc400817 	ldw	r17,32(sp)
10002448:	dc000717 	ldw	r16,28(sp)
1000244c:	dec00a04 	addi	sp,sp,40
10002450:	f800283a 	ret
10002454:	00bfffc4 	movi	r2,-1
10002458:	003ff906 	br	10002440 <__alt_data_end+0xf8002440>

1000245c <puts>:
1000245c:	00840074 	movhi	r2,4097
10002460:	108ee504 	addi	r2,r2,15252
10002464:	200b883a 	mov	r5,r4
10002468:	11000017 	ldw	r4,0(r2)
1000246c:	00023a41 	jmpi	100023a4 <_puts_r>

10002470 <srand>:
10002470:	00840074 	movhi	r2,4097
10002474:	108ee504 	addi	r2,r2,15252
10002478:	10800017 	ldw	r2,0(r2)
1000247c:	11002915 	stw	r4,164(r2)
10002480:	10002a15 	stw	zero,168(r2)
10002484:	f800283a 	ret

10002488 <rand>:
10002488:	00840074 	movhi	r2,4097
1000248c:	defffe04 	addi	sp,sp,-8
10002490:	108ee504 	addi	r2,r2,15252
10002494:	dc000015 	stw	r16,0(sp)
10002498:	14000017 	ldw	r16,0(r2)
1000249c:	dfc00115 	stw	ra,4(sp)
100024a0:	01932574 	movhi	r6,19605
100024a4:	81002917 	ldw	r4,164(r16)
100024a8:	81402a17 	ldw	r5,168(r16)
100024ac:	01d614b4 	movhi	r7,22610
100024b0:	319fcb44 	addi	r6,r6,32557
100024b4:	39fd0b44 	addi	r7,r7,-3027
100024b8:	000b7700 	call	1000b770 <__muldi3>
100024bc:	11000044 	addi	r4,r2,1
100024c0:	2085803a 	cmpltu	r2,r4,r2
100024c4:	10c7883a 	add	r3,r2,r3
100024c8:	00a00034 	movhi	r2,32768
100024cc:	10bfffc4 	addi	r2,r2,-1
100024d0:	1884703a 	and	r2,r3,r2
100024d4:	81002915 	stw	r4,164(r16)
100024d8:	80c02a15 	stw	r3,168(r16)
100024dc:	dfc00117 	ldw	ra,4(sp)
100024e0:	dc000017 	ldw	r16,0(sp)
100024e4:	dec00204 	addi	sp,sp,8
100024e8:	f800283a 	ret

100024ec <strlen>:
100024ec:	208000cc 	andi	r2,r4,3
100024f0:	10002026 	beq	r2,zero,10002574 <strlen+0x88>
100024f4:	20800007 	ldb	r2,0(r4)
100024f8:	10002026 	beq	r2,zero,1000257c <strlen+0x90>
100024fc:	2005883a 	mov	r2,r4
10002500:	00000206 	br	1000250c <strlen+0x20>
10002504:	10c00007 	ldb	r3,0(r2)
10002508:	18001826 	beq	r3,zero,1000256c <strlen+0x80>
1000250c:	10800044 	addi	r2,r2,1
10002510:	10c000cc 	andi	r3,r2,3
10002514:	183ffb1e 	bne	r3,zero,10002504 <__alt_data_end+0xf8002504>
10002518:	10c00017 	ldw	r3,0(r2)
1000251c:	01ffbff4 	movhi	r7,65279
10002520:	39ffbfc4 	addi	r7,r7,-257
10002524:	00ca303a 	nor	r5,zero,r3
10002528:	01a02074 	movhi	r6,32897
1000252c:	19c7883a 	add	r3,r3,r7
10002530:	31a02004 	addi	r6,r6,-32640
10002534:	1946703a 	and	r3,r3,r5
10002538:	1986703a 	and	r3,r3,r6
1000253c:	1800091e 	bne	r3,zero,10002564 <strlen+0x78>
10002540:	10800104 	addi	r2,r2,4
10002544:	10c00017 	ldw	r3,0(r2)
10002548:	19cb883a 	add	r5,r3,r7
1000254c:	00c6303a 	nor	r3,zero,r3
10002550:	28c6703a 	and	r3,r5,r3
10002554:	1986703a 	and	r3,r3,r6
10002558:	183ff926 	beq	r3,zero,10002540 <__alt_data_end+0xf8002540>
1000255c:	00000106 	br	10002564 <strlen+0x78>
10002560:	10800044 	addi	r2,r2,1
10002564:	10c00007 	ldb	r3,0(r2)
10002568:	183ffd1e 	bne	r3,zero,10002560 <__alt_data_end+0xf8002560>
1000256c:	1105c83a 	sub	r2,r2,r4
10002570:	f800283a 	ret
10002574:	2005883a 	mov	r2,r4
10002578:	003fe706 	br	10002518 <__alt_data_end+0xf8002518>
1000257c:	0005883a 	mov	r2,zero
10002580:	f800283a 	ret

10002584 <___vfprintf_internal_r>:
10002584:	defeb604 	addi	sp,sp,-1320
10002588:	dfc14915 	stw	ra,1316(sp)
1000258c:	ddc14715 	stw	r23,1308(sp)
10002590:	dd814615 	stw	r22,1304(sp)
10002594:	202f883a 	mov	r23,r4
10002598:	282d883a 	mov	r22,r5
1000259c:	d9812a15 	stw	r6,1192(sp)
100025a0:	d9c12d15 	stw	r7,1204(sp)
100025a4:	df014815 	stw	fp,1312(sp)
100025a8:	dd414515 	stw	r21,1300(sp)
100025ac:	dd014415 	stw	r20,1296(sp)
100025b0:	dcc14315 	stw	r19,1292(sp)
100025b4:	dc814215 	stw	r18,1288(sp)
100025b8:	dc414115 	stw	r17,1284(sp)
100025bc:	dc014015 	stw	r16,1280(sp)
100025c0:	00072040 	call	10007204 <_localeconv_r>
100025c4:	10800017 	ldw	r2,0(r2)
100025c8:	1009883a 	mov	r4,r2
100025cc:	d8813515 	stw	r2,1236(sp)
100025d0:	00024ec0 	call	100024ec <strlen>
100025d4:	d8813815 	stw	r2,1248(sp)
100025d8:	b8000226 	beq	r23,zero,100025e4 <___vfprintf_internal_r+0x60>
100025dc:	b8800e17 	ldw	r2,56(r23)
100025e0:	10010526 	beq	r2,zero,100029f8 <___vfprintf_internal_r+0x474>
100025e4:	b0c0030b 	ldhu	r3,12(r22)
100025e8:	1908000c 	andi	r4,r3,8192
100025ec:	1805883a 	mov	r2,r3
100025f0:	2000071e 	bne	r4,zero,10002610 <___vfprintf_internal_r+0x8c>
100025f4:	b1001917 	ldw	r4,100(r22)
100025f8:	18880014 	ori	r2,r3,8192
100025fc:	00f7ffc4 	movi	r3,-8193
10002600:	20c8703a 	and	r4,r4,r3
10002604:	b080030d 	sth	r2,12(r22)
10002608:	1007883a 	mov	r3,r2
1000260c:	b1001915 	stw	r4,100(r22)
10002610:	1100020c 	andi	r4,r2,8
10002614:	2000a826 	beq	r4,zero,100028b8 <___vfprintf_internal_r+0x334>
10002618:	b1000417 	ldw	r4,16(r22)
1000261c:	2000a626 	beq	r4,zero,100028b8 <___vfprintf_internal_r+0x334>
10002620:	1080068c 	andi	r2,r2,26
10002624:	01000284 	movi	r4,10
10002628:	1100ac26 	beq	r2,r4,100028dc <___vfprintf_internal_r+0x358>
1000262c:	d8c10e04 	addi	r3,sp,1080
10002630:	d9010dc4 	addi	r4,sp,1079
10002634:	d9400404 	addi	r5,sp,16
10002638:	05040074 	movhi	r20,4097
1000263c:	1905c83a 	sub	r2,r3,r4
10002640:	a5078a84 	addi	r20,r20,7722
10002644:	d8c12815 	stw	r3,1184(sp)
10002648:	d9012915 	stw	r4,1188(sp)
1000264c:	d9411e15 	stw	r5,1144(sp)
10002650:	d8012015 	stw	zero,1152(sp)
10002654:	d8011f15 	stw	zero,1148(sp)
10002658:	d8013315 	stw	zero,1228(sp)
1000265c:	d8013715 	stw	zero,1244(sp)
10002660:	d8013915 	stw	zero,1252(sp)
10002664:	d8013b15 	stw	zero,1260(sp)
10002668:	d8013a15 	stw	zero,1256(sp)
1000266c:	d8012f15 	stw	zero,1212(sp)
10002670:	2811883a 	mov	r8,r5
10002674:	d8813c15 	stw	r2,1264(sp)
10002678:	d8c12a17 	ldw	r3,1192(sp)
1000267c:	18800007 	ldb	r2,0(r3)
10002680:	10021326 	beq	r2,zero,10002ed0 <___vfprintf_internal_r+0x94c>
10002684:	00c00944 	movi	r3,37
10002688:	dc012a17 	ldw	r16,1192(sp)
1000268c:	10c0021e 	bne	r2,r3,10002698 <___vfprintf_internal_r+0x114>
10002690:	00001606 	br	100026ec <___vfprintf_internal_r+0x168>
10002694:	10c08526 	beq	r2,r3,100028ac <___vfprintf_internal_r+0x328>
10002698:	84000044 	addi	r16,r16,1
1000269c:	80800007 	ldb	r2,0(r16)
100026a0:	103ffc1e 	bne	r2,zero,10002694 <__alt_data_end+0xf8002694>
100026a4:	d9012a17 	ldw	r4,1192(sp)
100026a8:	8123c83a 	sub	r17,r16,r4
100026ac:	88000f26 	beq	r17,zero,100026ec <___vfprintf_internal_r+0x168>
100026b0:	d8812a17 	ldw	r2,1192(sp)
100026b4:	d8c12017 	ldw	r3,1152(sp)
100026b8:	44400115 	stw	r17,4(r8)
100026bc:	40800015 	stw	r2,0(r8)
100026c0:	d8811f17 	ldw	r2,1148(sp)
100026c4:	1c47883a 	add	r3,r3,r17
100026c8:	d8c12015 	stw	r3,1152(sp)
100026cc:	10800044 	addi	r2,r2,1
100026d0:	d8811f15 	stw	r2,1148(sp)
100026d4:	00c001c4 	movi	r3,7
100026d8:	1880b516 	blt	r3,r2,100029b0 <___vfprintf_internal_r+0x42c>
100026dc:	42000204 	addi	r8,r8,8
100026e0:	d8c12f17 	ldw	r3,1212(sp)
100026e4:	1c47883a 	add	r3,r3,r17
100026e8:	d8c12f15 	stw	r3,1212(sp)
100026ec:	80800007 	ldb	r2,0(r16)
100026f0:	1000b626 	beq	r2,zero,100029cc <___vfprintf_internal_r+0x448>
100026f4:	80800044 	addi	r2,r16,1
100026f8:	84000047 	ldb	r16,1(r16)
100026fc:	0027883a 	mov	r19,zero
10002700:	0039883a 	mov	fp,zero
10002704:	dcc12b05 	stb	r19,1196(sp)
10002708:	d8012785 	stb	zero,1182(sp)
1000270c:	027fffc4 	movi	r9,-1
10002710:	d8012e15 	stw	zero,1208(sp)
10002714:	04401604 	movi	r17,88
10002718:	04800244 	movi	r18,9
1000271c:	da012a15 	stw	r8,1192(sp)
10002720:	e027883a 	mov	r19,fp
10002724:	17000044 	addi	fp,r2,1
10002728:	80bff804 	addi	r2,r16,-32
1000272c:	88831236 	bltu	r17,r2,10003378 <___vfprintf_internal_r+0xdf4>
10002730:	100490ba 	slli	r2,r2,2
10002734:	01040034 	movhi	r4,4096
10002738:	2109d204 	addi	r4,r4,10056
1000273c:	1105883a 	add	r2,r2,r4
10002740:	10800017 	ldw	r2,0(r2)
10002744:	1000683a 	jmp	r2
10002748:	10003294 	ori	zero,r2,202
1000274c:	10003378 	rdprs	zero,r2,205
10002750:	10003378 	rdprs	zero,r2,205
10002754:	100032b0 	cmpltui	zero,r2,202
10002758:	10003378 	rdprs	zero,r2,205
1000275c:	10003378 	rdprs	zero,r2,205
10002760:	10003378 	rdprs	zero,r2,205
10002764:	10003378 	rdprs	zero,r2,205
10002768:	10003378 	rdprs	zero,r2,205
1000276c:	10003378 	rdprs	zero,r2,205
10002770:	100032c0 	call	1100032c <_gp+0xfe479c>
10002774:	100032e8 	cmpgeui	zero,r2,203
10002778:	10003378 	rdprs	zero,r2,205
1000277c:	10002a04 	addi	zero,r2,168
10002780:	10002a14 	ori	zero,r2,168
10002784:	10003378 	rdprs	zero,r2,205
10002788:	10002a64 	muli	zero,r2,169
1000278c:	10002a74 	orhi	zero,r2,169
10002790:	10002a74 	orhi	zero,r2,169
10002794:	10002a74 	orhi	zero,r2,169
10002798:	10002a74 	orhi	zero,r2,169
1000279c:	10002a74 	orhi	zero,r2,169
100027a0:	10002a74 	orhi	zero,r2,169
100027a4:	10002a74 	orhi	zero,r2,169
100027a8:	10002a74 	orhi	zero,r2,169
100027ac:	10002a74 	orhi	zero,r2,169
100027b0:	10003378 	rdprs	zero,r2,205
100027b4:	10003378 	rdprs	zero,r2,205
100027b8:	10003378 	rdprs	zero,r2,205
100027bc:	10003378 	rdprs	zero,r2,205
100027c0:	10003378 	rdprs	zero,r2,205
100027c4:	10003378 	rdprs	zero,r2,205
100027c8:	10003378 	rdprs	zero,r2,205
100027cc:	10003378 	rdprs	zero,r2,205
100027d0:	10003378 	rdprs	zero,r2,205
100027d4:	10003378 	rdprs	zero,r2,205
100027d8:	10002ab8 	rdprs	zero,r2,170
100027dc:	10002ed8 	cmpnei	zero,r2,187
100027e0:	10003378 	rdprs	zero,r2,205
100027e4:	10002ed8 	cmpnei	zero,r2,187
100027e8:	10003378 	rdprs	zero,r2,205
100027ec:	10003378 	rdprs	zero,r2,205
100027f0:	10003378 	rdprs	zero,r2,205
100027f4:	10003378 	rdprs	zero,r2,205
100027f8:	10002f80 	call	110002f8 <_gp+0xfe4768>
100027fc:	10003378 	rdprs	zero,r2,205
10002800:	10003378 	rdprs	zero,r2,205
10002804:	10002f90 	cmplti	zero,r2,190
10002808:	10003378 	rdprs	zero,r2,205
1000280c:	10003378 	rdprs	zero,r2,205
10002810:	10003378 	rdprs	zero,r2,205
10002814:	10003378 	rdprs	zero,r2,205
10002818:	10003378 	rdprs	zero,r2,205
1000281c:	10002fd4 	ori	zero,r2,191
10002820:	10003378 	rdprs	zero,r2,205
10002824:	10003378 	rdprs	zero,r2,205
10002828:	1000300c 	andi	zero,r2,192
1000282c:	10003378 	rdprs	zero,r2,205
10002830:	10003378 	rdprs	zero,r2,205
10002834:	10003378 	rdprs	zero,r2,205
10002838:	10003378 	rdprs	zero,r2,205
1000283c:	10003378 	rdprs	zero,r2,205
10002840:	10003378 	rdprs	zero,r2,205
10002844:	10003378 	rdprs	zero,r2,205
10002848:	10003378 	rdprs	zero,r2,205
1000284c:	10003378 	rdprs	zero,r2,205
10002850:	10003378 	rdprs	zero,r2,205
10002854:	10003248 	cmpgei	zero,r2,201
10002858:	100031f4 	orhi	zero,r2,199
1000285c:	10002ed8 	cmpnei	zero,r2,187
10002860:	10002ed8 	cmpnei	zero,r2,187
10002864:	10002ed8 	cmpnei	zero,r2,187
10002868:	10003238 	rdprs	zero,r2,200
1000286c:	100031f4 	orhi	zero,r2,199
10002870:	10003378 	rdprs	zero,r2,205
10002874:	10003378 	rdprs	zero,r2,205
10002878:	10003110 	cmplti	zero,r2,196
1000287c:	10003378 	rdprs	zero,r2,205
10002880:	10003128 	cmpgeui	zero,r2,196
10002884:	10003168 	cmpgeui	zero,r2,197
10002888:	100031a8 	cmpgeui	zero,r2,198
1000288c:	10003074 	orhi	zero,r2,193
10002890:	10003378 	rdprs	zero,r2,205
10002894:	100032fc 	xorhi	zero,r2,203
10002898:	10003378 	rdprs	zero,r2,205
1000289c:	10003084 	addi	zero,r2,194
100028a0:	10003378 	rdprs	zero,r2,205
100028a4:	10003378 	rdprs	zero,r2,205
100028a8:	100030c4 	addi	zero,r2,195
100028ac:	d9412a17 	ldw	r5,1192(sp)
100028b0:	8163c83a 	sub	r17,r16,r5
100028b4:	003f7d06 	br	100026ac <__alt_data_end+0xf80026ac>
100028b8:	b809883a 	mov	r4,r23
100028bc:	b00b883a 	mov	r5,r22
100028c0:	00046a40 	call	100046a4 <__swsetup_r>
100028c4:	10002d1e 	bne	r2,zero,1000297c <___vfprintf_internal_r+0x3f8>
100028c8:	b0c0030b 	ldhu	r3,12(r22)
100028cc:	01000284 	movi	r4,10
100028d0:	1805883a 	mov	r2,r3
100028d4:	1080068c 	andi	r2,r2,26
100028d8:	113f541e 	bne	r2,r4,1000262c <__alt_data_end+0xf800262c>
100028dc:	b080038b 	ldhu	r2,14(r22)
100028e0:	113fffcc 	andi	r4,r2,65535
100028e4:	2120001c 	xori	r4,r4,32768
100028e8:	21200004 	addi	r4,r4,-32768
100028ec:	203f4f16 	blt	r4,zero,1000262c <__alt_data_end+0xf800262c>
100028f0:	b2c01917 	ldw	r11,100(r22)
100028f4:	b2800717 	ldw	r10,28(r22)
100028f8:	b2400917 	ldw	r9,36(r22)
100028fc:	d9812a17 	ldw	r6,1192(sp)
10002900:	d9c12d17 	ldw	r7,1204(sp)
10002904:	02010004 	movi	r8,1024
10002908:	18ffff4c 	andi	r3,r3,65533
1000290c:	d881078d 	sth	r2,1054(sp)
10002910:	b809883a 	mov	r4,r23
10002914:	d8800404 	addi	r2,sp,16
10002918:	d9410404 	addi	r5,sp,1040
1000291c:	d8c1070d 	sth	r3,1052(sp)
10002920:	dac11d15 	stw	r11,1140(sp)
10002924:	da810b15 	stw	r10,1068(sp)
10002928:	da410d15 	stw	r9,1076(sp)
1000292c:	d8810415 	stw	r2,1040(sp)
10002930:	d8810815 	stw	r2,1056(sp)
10002934:	da010615 	stw	r8,1048(sp)
10002938:	da010915 	stw	r8,1060(sp)
1000293c:	d8010a15 	stw	zero,1064(sp)
10002940:	00025840 	call	10002584 <___vfprintf_internal_r>
10002944:	1021883a 	mov	r16,r2
10002948:	10000416 	blt	r2,zero,1000295c <___vfprintf_internal_r+0x3d8>
1000294c:	b809883a 	mov	r4,r23
10002950:	d9410404 	addi	r5,sp,1040
10002954:	00061240 	call	10006124 <_fflush_r>
10002958:	1007301e 	bne	r2,zero,1000461c <___vfprintf_internal_r+0x2098>
1000295c:	d881070b 	ldhu	r2,1052(sp)
10002960:	1080100c 	andi	r2,r2,64
10002964:	10000326 	beq	r2,zero,10002974 <___vfprintf_internal_r+0x3f0>
10002968:	b080030b 	ldhu	r2,12(r22)
1000296c:	10801014 	ori	r2,r2,64
10002970:	b080030d 	sth	r2,12(r22)
10002974:	8005883a 	mov	r2,r16
10002978:	00000106 	br	10002980 <___vfprintf_internal_r+0x3fc>
1000297c:	00bfffc4 	movi	r2,-1
10002980:	dfc14917 	ldw	ra,1316(sp)
10002984:	df014817 	ldw	fp,1312(sp)
10002988:	ddc14717 	ldw	r23,1308(sp)
1000298c:	dd814617 	ldw	r22,1304(sp)
10002990:	dd414517 	ldw	r21,1300(sp)
10002994:	dd014417 	ldw	r20,1296(sp)
10002998:	dcc14317 	ldw	r19,1292(sp)
1000299c:	dc814217 	ldw	r18,1288(sp)
100029a0:	dc414117 	ldw	r17,1284(sp)
100029a4:	dc014017 	ldw	r16,1280(sp)
100029a8:	dec14a04 	addi	sp,sp,1320
100029ac:	f800283a 	ret
100029b0:	b809883a 	mov	r4,r23
100029b4:	b00b883a 	mov	r5,r22
100029b8:	d9811e04 	addi	r6,sp,1144
100029bc:	00099c40 	call	100099c4 <__sprint_r>
100029c0:	1000081e 	bne	r2,zero,100029e4 <___vfprintf_internal_r+0x460>
100029c4:	da000404 	addi	r8,sp,16
100029c8:	003f4506 	br	100026e0 <__alt_data_end+0xf80026e0>
100029cc:	d8812017 	ldw	r2,1152(sp)
100029d0:	10000426 	beq	r2,zero,100029e4 <___vfprintf_internal_r+0x460>
100029d4:	b809883a 	mov	r4,r23
100029d8:	b00b883a 	mov	r5,r22
100029dc:	d9811e04 	addi	r6,sp,1144
100029e0:	00099c40 	call	100099c4 <__sprint_r>
100029e4:	b080030b 	ldhu	r2,12(r22)
100029e8:	1080100c 	andi	r2,r2,64
100029ec:	103fe31e 	bne	r2,zero,1000297c <__alt_data_end+0xf800297c>
100029f0:	d8812f17 	ldw	r2,1212(sp)
100029f4:	003fe206 	br	10002980 <__alt_data_end+0xf8002980>
100029f8:	b809883a 	mov	r4,r23
100029fc:	00066e00 	call	100066e0 <__sinit>
10002a00:	003ef806 	br	100025e4 <__alt_data_end+0xf80025e4>
10002a04:	e005883a 	mov	r2,fp
10002a08:	9cc00114 	ori	r19,r19,4
10002a0c:	e4000007 	ldb	r16,0(fp)
10002a10:	003f4406 	br	10002724 <__alt_data_end+0xf8002724>
10002a14:	e4000007 	ldb	r16,0(fp)
10002a18:	01000a84 	movi	r4,42
10002a1c:	e0800044 	addi	r2,fp,1
10002a20:	8106f626 	beq	r16,r4,100045fc <___vfprintf_internal_r+0x2078>
10002a24:	857ff404 	addi	r21,r16,-48
10002a28:	1039883a 	mov	fp,r2
10002a2c:	0013883a 	mov	r9,zero
10002a30:	957f3d36 	bltu	r18,r21,10002728 <__alt_data_end+0xf8002728>
10002a34:	0009883a 	mov	r4,zero
10002a38:	01400284 	movi	r5,10
10002a3c:	000c6040 	call	1000c604 <__mulsi3>
10002a40:	e4000007 	ldb	r16,0(fp)
10002a44:	a889883a 	add	r4,r21,r2
10002a48:	e7000044 	addi	fp,fp,1
10002a4c:	857ff404 	addi	r21,r16,-48
10002a50:	957ff92e 	bgeu	r18,r21,10002a38 <__alt_data_end+0xf8002a38>
10002a54:	2013883a 	mov	r9,r4
10002a58:	203f330e 	bge	r4,zero,10002728 <__alt_data_end+0xf8002728>
10002a5c:	027fffc4 	movi	r9,-1
10002a60:	003f3106 	br	10002728 <__alt_data_end+0xf8002728>
10002a64:	9cc02014 	ori	r19,r19,128
10002a68:	e005883a 	mov	r2,fp
10002a6c:	e4000007 	ldb	r16,0(fp)
10002a70:	003f2c06 	br	10002724 <__alt_data_end+0xf8002724>
10002a74:	857ff404 	addi	r21,r16,-48
10002a78:	d8012e15 	stw	zero,1208(sp)
10002a7c:	e021883a 	mov	r16,fp
10002a80:	0009883a 	mov	r4,zero
10002a84:	da412c15 	stw	r9,1200(sp)
10002a88:	01400284 	movi	r5,10
10002a8c:	000c6040 	call	1000c604 <__mulsi3>
10002a90:	81400007 	ldb	r5,0(r16)
10002a94:	1549883a 	add	r4,r2,r21
10002a98:	e7000044 	addi	fp,fp,1
10002a9c:	2d7ff404 	addi	r21,r5,-48
10002aa0:	e021883a 	mov	r16,fp
10002aa4:	957ff82e 	bgeu	r18,r21,10002a88 <__alt_data_end+0xf8002a88>
10002aa8:	2821883a 	mov	r16,r5
10002aac:	d9012e15 	stw	r4,1208(sp)
10002ab0:	da412c17 	ldw	r9,1200(sp)
10002ab4:	003f1c06 	br	10002728 <__alt_data_end+0xf8002728>
10002ab8:	da012a17 	ldw	r8,1192(sp)
10002abc:	df012a15 	stw	fp,1192(sp)
10002ac0:	9839883a 	mov	fp,r19
10002ac4:	dcc12b03 	ldbu	r19,1196(sp)
10002ac8:	e7000414 	ori	fp,fp,16
10002acc:	e080080c 	andi	r2,fp,32
10002ad0:	dcc12785 	stb	r19,1182(sp)
10002ad4:	d8c12d17 	ldw	r3,1204(sp)
10002ad8:	1001ce26 	beq	r2,zero,10003214 <___vfprintf_internal_r+0xc90>
10002adc:	d9012d17 	ldw	r4,1204(sp)
10002ae0:	18800117 	ldw	r2,4(r3)
10002ae4:	1c800017 	ldw	r18,0(r3)
10002ae8:	21000204 	addi	r4,r4,8
10002aec:	d9012d15 	stw	r4,1204(sp)
10002af0:	102b883a 	mov	r21,r2
10002af4:	10044916 	blt	r2,zero,10003c1c <___vfprintf_internal_r+0x1698>
10002af8:	dcc12783 	ldbu	r19,1182(sp)
10002afc:	da413215 	stw	r9,1224(sp)
10002b00:	00800044 	movi	r2,1
10002b04:	9546b03a 	or	r3,r18,r21
10002b08:	48000216 	blt	r9,zero,10002b14 <___vfprintf_internal_r+0x590>
10002b0c:	013fdfc4 	movi	r4,-129
10002b10:	e138703a 	and	fp,fp,r4
10002b14:	1802251e 	bne	r3,zero,100033ac <___vfprintf_internal_r+0xe28>
10002b18:	48031726 	beq	r9,zero,10003778 <___vfprintf_internal_r+0x11f4>
10002b1c:	10803fcc 	andi	r2,r2,255
10002b20:	00c00044 	movi	r3,1
10002b24:	10c24526 	beq	r2,r3,1000343c <___vfprintf_internal_r+0xeb8>
10002b28:	00c00084 	movi	r3,2
10002b2c:	10c33426 	beq	r2,r3,10003800 <___vfprintf_internal_r+0x127c>
10002b30:	d8c10e04 	addi	r3,sp,1080
10002b34:	9008d0fa 	srli	r4,r18,3
10002b38:	a80a977a 	slli	r5,r21,29
10002b3c:	a82ad0fa 	srli	r21,r21,3
10002b40:	948001cc 	andi	r18,r18,7
10002b44:	90800c04 	addi	r2,r18,48
10002b48:	18ffffc4 	addi	r3,r3,-1
10002b4c:	2924b03a 	or	r18,r5,r4
10002b50:	18800005 	stb	r2,0(r3)
10002b54:	9548b03a 	or	r4,r18,r21
10002b58:	203ff61e 	bne	r4,zero,10002b34 <__alt_data_end+0xf8002b34>
10002b5c:	e100004c 	andi	r4,fp,1
10002b60:	d8c13115 	stw	r3,1220(sp)
10002b64:	20039a1e 	bne	r4,zero,100039d0 <___vfprintf_internal_r+0x144c>
10002b68:	d8812817 	ldw	r2,1184(sp)
10002b6c:	10e3c83a 	sub	r17,r2,r3
10002b70:	8805883a 	mov	r2,r17
10002b74:	8a40010e 	bge	r17,r9,10002b7c <___vfprintf_internal_r+0x5f8>
10002b78:	4805883a 	mov	r2,r9
10002b7c:	d8812b15 	stw	r2,1196(sp)
10002b80:	d8013415 	stw	zero,1232(sp)
10002b84:	98803fcc 	andi	r2,r19,255
10002b88:	1080201c 	xori	r2,r2,128
10002b8c:	10bfe004 	addi	r2,r2,-128
10002b90:	10000326 	beq	r2,zero,10002ba0 <___vfprintf_internal_r+0x61c>
10002b94:	d8c12b17 	ldw	r3,1196(sp)
10002b98:	18c00044 	addi	r3,r3,1
10002b9c:	d8c12b15 	stw	r3,1196(sp)
10002ba0:	e0c0008c 	andi	r3,fp,2
10002ba4:	d8c12c15 	stw	r3,1200(sp)
10002ba8:	18000326 	beq	r3,zero,10002bb8 <___vfprintf_internal_r+0x634>
10002bac:	d8c12b17 	ldw	r3,1196(sp)
10002bb0:	18c00084 	addi	r3,r3,2
10002bb4:	d8c12b15 	stw	r3,1196(sp)
10002bb8:	e0c0210c 	andi	r3,fp,132
10002bbc:	d8c13015 	stw	r3,1216(sp)
10002bc0:	1801f81e 	bne	r3,zero,100033a4 <___vfprintf_internal_r+0xe20>
10002bc4:	d9012e17 	ldw	r4,1208(sp)
10002bc8:	d8c12b17 	ldw	r3,1196(sp)
10002bcc:	20ebc83a 	sub	r21,r4,r3
10002bd0:	0541f40e 	bge	zero,r21,100033a4 <___vfprintf_internal_r+0xe20>
10002bd4:	02400404 	movi	r9,16
10002bd8:	d8c12017 	ldw	r3,1152(sp)
10002bdc:	d8811f17 	ldw	r2,1148(sp)
10002be0:	4d45750e 	bge	r9,r21,100041b8 <___vfprintf_internal_r+0x1c34>
10002be4:	01440074 	movhi	r5,4097
10002be8:	29478e84 	addi	r5,r5,7738
10002bec:	d9413615 	stw	r5,1240(sp)
10002bf0:	4827883a 	mov	r19,r9
10002bf4:	048001c4 	movi	r18,7
10002bf8:	00000306 	br	10002c08 <___vfprintf_internal_r+0x684>
10002bfc:	ad7ffc04 	addi	r21,r21,-16
10002c00:	42000204 	addi	r8,r8,8
10002c04:	9d40130e 	bge	r19,r21,10002c54 <___vfprintf_internal_r+0x6d0>
10002c08:	01040074 	movhi	r4,4097
10002c0c:	18c00404 	addi	r3,r3,16
10002c10:	10800044 	addi	r2,r2,1
10002c14:	21078e84 	addi	r4,r4,7738
10002c18:	41000015 	stw	r4,0(r8)
10002c1c:	44c00115 	stw	r19,4(r8)
10002c20:	d8c12015 	stw	r3,1152(sp)
10002c24:	d8811f15 	stw	r2,1148(sp)
10002c28:	90bff40e 	bge	r18,r2,10002bfc <__alt_data_end+0xf8002bfc>
10002c2c:	b809883a 	mov	r4,r23
10002c30:	b00b883a 	mov	r5,r22
10002c34:	d9811e04 	addi	r6,sp,1144
10002c38:	00099c40 	call	100099c4 <__sprint_r>
10002c3c:	103f691e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10002c40:	ad7ffc04 	addi	r21,r21,-16
10002c44:	d8c12017 	ldw	r3,1152(sp)
10002c48:	d8811f17 	ldw	r2,1148(sp)
10002c4c:	da000404 	addi	r8,sp,16
10002c50:	9d7fed16 	blt	r19,r21,10002c08 <__alt_data_end+0xf8002c08>
10002c54:	d9413617 	ldw	r5,1240(sp)
10002c58:	a8c7883a 	add	r3,r21,r3
10002c5c:	10800044 	addi	r2,r2,1
10002c60:	41400015 	stw	r5,0(r8)
10002c64:	45400115 	stw	r21,4(r8)
10002c68:	d8c12015 	stw	r3,1152(sp)
10002c6c:	d8811f15 	stw	r2,1148(sp)
10002c70:	010001c4 	movi	r4,7
10002c74:	20832b16 	blt	r4,r2,10003924 <___vfprintf_internal_r+0x13a0>
10002c78:	d8812787 	ldb	r2,1182(sp)
10002c7c:	42000204 	addi	r8,r8,8
10002c80:	10000c26 	beq	r2,zero,10002cb4 <___vfprintf_internal_r+0x730>
10002c84:	d8811f17 	ldw	r2,1148(sp)
10002c88:	d9012784 	addi	r4,sp,1182
10002c8c:	18c00044 	addi	r3,r3,1
10002c90:	10800044 	addi	r2,r2,1
10002c94:	41000015 	stw	r4,0(r8)
10002c98:	01000044 	movi	r4,1
10002c9c:	41000115 	stw	r4,4(r8)
10002ca0:	d8c12015 	stw	r3,1152(sp)
10002ca4:	d8811f15 	stw	r2,1148(sp)
10002ca8:	010001c4 	movi	r4,7
10002cac:	2082c416 	blt	r4,r2,100037c0 <___vfprintf_internal_r+0x123c>
10002cb0:	42000204 	addi	r8,r8,8
10002cb4:	d8812c17 	ldw	r2,1200(sp)
10002cb8:	10000c26 	beq	r2,zero,10002cec <___vfprintf_internal_r+0x768>
10002cbc:	d8811f17 	ldw	r2,1148(sp)
10002cc0:	d9012704 	addi	r4,sp,1180
10002cc4:	18c00084 	addi	r3,r3,2
10002cc8:	10800044 	addi	r2,r2,1
10002ccc:	41000015 	stw	r4,0(r8)
10002cd0:	01000084 	movi	r4,2
10002cd4:	41000115 	stw	r4,4(r8)
10002cd8:	d8c12015 	stw	r3,1152(sp)
10002cdc:	d8811f15 	stw	r2,1148(sp)
10002ce0:	010001c4 	movi	r4,7
10002ce4:	2082be16 	blt	r4,r2,100037e0 <___vfprintf_internal_r+0x125c>
10002ce8:	42000204 	addi	r8,r8,8
10002cec:	d9013017 	ldw	r4,1216(sp)
10002cf0:	00802004 	movi	r2,128
10002cf4:	20822026 	beq	r4,r2,10003578 <___vfprintf_internal_r+0xff4>
10002cf8:	d9413217 	ldw	r5,1224(sp)
10002cfc:	2c67c83a 	sub	r19,r5,r17
10002d00:	04c0260e 	bge	zero,r19,10002d9c <___vfprintf_internal_r+0x818>
10002d04:	05400404 	movi	r21,16
10002d08:	d8811f17 	ldw	r2,1148(sp)
10002d0c:	acc4720e 	bge	r21,r19,10003ed8 <___vfprintf_internal_r+0x1954>
10002d10:	01440074 	movhi	r5,4097
10002d14:	29478a84 	addi	r5,r5,7722
10002d18:	d9412c15 	stw	r5,1200(sp)
10002d1c:	048001c4 	movi	r18,7
10002d20:	00000306 	br	10002d30 <___vfprintf_internal_r+0x7ac>
10002d24:	9cfffc04 	addi	r19,r19,-16
10002d28:	42000204 	addi	r8,r8,8
10002d2c:	acc0110e 	bge	r21,r19,10002d74 <___vfprintf_internal_r+0x7f0>
10002d30:	18c00404 	addi	r3,r3,16
10002d34:	10800044 	addi	r2,r2,1
10002d38:	45000015 	stw	r20,0(r8)
10002d3c:	45400115 	stw	r21,4(r8)
10002d40:	d8c12015 	stw	r3,1152(sp)
10002d44:	d8811f15 	stw	r2,1148(sp)
10002d48:	90bff60e 	bge	r18,r2,10002d24 <__alt_data_end+0xf8002d24>
10002d4c:	b809883a 	mov	r4,r23
10002d50:	b00b883a 	mov	r5,r22
10002d54:	d9811e04 	addi	r6,sp,1144
10002d58:	00099c40 	call	100099c4 <__sprint_r>
10002d5c:	103f211e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10002d60:	9cfffc04 	addi	r19,r19,-16
10002d64:	d8c12017 	ldw	r3,1152(sp)
10002d68:	d8811f17 	ldw	r2,1148(sp)
10002d6c:	da000404 	addi	r8,sp,16
10002d70:	acffef16 	blt	r21,r19,10002d30 <__alt_data_end+0xf8002d30>
10002d74:	d9012c17 	ldw	r4,1200(sp)
10002d78:	1cc7883a 	add	r3,r3,r19
10002d7c:	10800044 	addi	r2,r2,1
10002d80:	41000015 	stw	r4,0(r8)
10002d84:	44c00115 	stw	r19,4(r8)
10002d88:	d8c12015 	stw	r3,1152(sp)
10002d8c:	d8811f15 	stw	r2,1148(sp)
10002d90:	010001c4 	movi	r4,7
10002d94:	20828216 	blt	r4,r2,100037a0 <___vfprintf_internal_r+0x121c>
10002d98:	42000204 	addi	r8,r8,8
10002d9c:	e080400c 	andi	r2,fp,256
10002da0:	1001ac1e 	bne	r2,zero,10003454 <___vfprintf_internal_r+0xed0>
10002da4:	d8811f17 	ldw	r2,1148(sp)
10002da8:	d9413117 	ldw	r5,1220(sp)
10002dac:	1c47883a 	add	r3,r3,r17
10002db0:	10800044 	addi	r2,r2,1
10002db4:	41400015 	stw	r5,0(r8)
10002db8:	44400115 	stw	r17,4(r8)
10002dbc:	d8c12015 	stw	r3,1152(sp)
10002dc0:	d8811f15 	stw	r2,1148(sp)
10002dc4:	010001c4 	movi	r4,7
10002dc8:	20825d16 	blt	r4,r2,10003740 <___vfprintf_internal_r+0x11bc>
10002dcc:	42000204 	addi	r8,r8,8
10002dd0:	e080010c 	andi	r2,fp,4
10002dd4:	10003126 	beq	r2,zero,10002e9c <___vfprintf_internal_r+0x918>
10002dd8:	d8812e17 	ldw	r2,1208(sp)
10002ddc:	d9012b17 	ldw	r4,1196(sp)
10002de0:	1121c83a 	sub	r16,r2,r4
10002de4:	04002d0e 	bge	zero,r16,10002e9c <___vfprintf_internal_r+0x918>
10002de8:	04400404 	movi	r17,16
10002dec:	d8811f17 	ldw	r2,1148(sp)
10002df0:	8c05340e 	bge	r17,r16,100042c4 <___vfprintf_internal_r+0x1d40>
10002df4:	01040074 	movhi	r4,4097
10002df8:	21078e84 	addi	r4,r4,7738
10002dfc:	d9013615 	stw	r4,1240(sp)
10002e00:	048001c4 	movi	r18,7
10002e04:	00000306 	br	10002e14 <___vfprintf_internal_r+0x890>
10002e08:	843ffc04 	addi	r16,r16,-16
10002e0c:	42000204 	addi	r8,r8,8
10002e10:	8c00130e 	bge	r17,r16,10002e60 <___vfprintf_internal_r+0x8dc>
10002e14:	01440074 	movhi	r5,4097
10002e18:	18c00404 	addi	r3,r3,16
10002e1c:	10800044 	addi	r2,r2,1
10002e20:	29478e84 	addi	r5,r5,7738
10002e24:	41400015 	stw	r5,0(r8)
10002e28:	44400115 	stw	r17,4(r8)
10002e2c:	d8c12015 	stw	r3,1152(sp)
10002e30:	d8811f15 	stw	r2,1148(sp)
10002e34:	90bff40e 	bge	r18,r2,10002e08 <__alt_data_end+0xf8002e08>
10002e38:	b809883a 	mov	r4,r23
10002e3c:	b00b883a 	mov	r5,r22
10002e40:	d9811e04 	addi	r6,sp,1144
10002e44:	00099c40 	call	100099c4 <__sprint_r>
10002e48:	103ee61e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10002e4c:	843ffc04 	addi	r16,r16,-16
10002e50:	d8c12017 	ldw	r3,1152(sp)
10002e54:	d8811f17 	ldw	r2,1148(sp)
10002e58:	da000404 	addi	r8,sp,16
10002e5c:	8c3fed16 	blt	r17,r16,10002e14 <__alt_data_end+0xf8002e14>
10002e60:	d9013617 	ldw	r4,1240(sp)
10002e64:	1c07883a 	add	r3,r3,r16
10002e68:	10800044 	addi	r2,r2,1
10002e6c:	41000015 	stw	r4,0(r8)
10002e70:	44000115 	stw	r16,4(r8)
10002e74:	d8c12015 	stw	r3,1152(sp)
10002e78:	d8811f15 	stw	r2,1148(sp)
10002e7c:	010001c4 	movi	r4,7
10002e80:	2080060e 	bge	r4,r2,10002e9c <___vfprintf_internal_r+0x918>
10002e84:	b809883a 	mov	r4,r23
10002e88:	b00b883a 	mov	r5,r22
10002e8c:	d9811e04 	addi	r6,sp,1144
10002e90:	00099c40 	call	100099c4 <__sprint_r>
10002e94:	103ed31e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10002e98:	d8c12017 	ldw	r3,1152(sp)
10002e9c:	df012b17 	ldw	fp,1196(sp)
10002ea0:	d9412e17 	ldw	r5,1208(sp)
10002ea4:	e140010e 	bge	fp,r5,10002eac <___vfprintf_internal_r+0x928>
10002ea8:	2839883a 	mov	fp,r5
10002eac:	d8812f17 	ldw	r2,1212(sp)
10002eb0:	1705883a 	add	r2,r2,fp
10002eb4:	d8812f15 	stw	r2,1212(sp)
10002eb8:	1802291e 	bne	r3,zero,10003760 <___vfprintf_internal_r+0x11dc>
10002ebc:	d8c12a17 	ldw	r3,1192(sp)
10002ec0:	d8011f15 	stw	zero,1148(sp)
10002ec4:	da000404 	addi	r8,sp,16
10002ec8:	18800007 	ldb	r2,0(r3)
10002ecc:	103ded1e 	bne	r2,zero,10002684 <__alt_data_end+0xf8002684>
10002ed0:	dc012a17 	ldw	r16,1192(sp)
10002ed4:	003e0506 	br	100026ec <__alt_data_end+0xf80026ec>
10002ed8:	d9012d17 	ldw	r4,1204(sp)
10002edc:	d9412d17 	ldw	r5,1204(sp)
10002ee0:	da012a17 	ldw	r8,1192(sp)
10002ee4:	21000017 	ldw	r4,0(r4)
10002ee8:	29400117 	ldw	r5,4(r5)
10002eec:	df012a15 	stw	fp,1192(sp)
10002ef0:	9839883a 	mov	fp,r19
10002ef4:	dcc12b03 	ldbu	r19,1196(sp)
10002ef8:	d9013715 	stw	r4,1244(sp)
10002efc:	d9413915 	stw	r5,1252(sp)
10002f00:	da013f15 	stw	r8,1276(sp)
10002f04:	da413e15 	stw	r9,1272(sp)
10002f08:	dcc12785 	stb	r19,1182(sp)
10002f0c:	00096200 	call	10009620 <__fpclassifyd>
10002f10:	d8c12d17 	ldw	r3,1204(sp)
10002f14:	04400044 	movi	r17,1
10002f18:	da013f17 	ldw	r8,1276(sp)
10002f1c:	1c800204 	addi	r18,r3,8
10002f20:	da413e17 	ldw	r9,1272(sp)
10002f24:	d9013717 	ldw	r4,1244(sp)
10002f28:	d9413917 	ldw	r5,1252(sp)
10002f2c:	1443451e 	bne	r2,r17,10003c44 <___vfprintf_internal_r+0x16c0>
10002f30:	000d883a 	mov	r6,zero
10002f34:	000f883a 	mov	r7,zero
10002f38:	000d9ac0 	call	1000d9ac <__ledf2>
10002f3c:	da013f17 	ldw	r8,1276(sp)
10002f40:	1004fe16 	blt	r2,zero,1000433c <___vfprintf_internal_r+0x1db8>
10002f44:	dcc12783 	ldbu	r19,1182(sp)
10002f48:	008011c4 	movi	r2,71
10002f4c:	14045d0e 	bge	r2,r16,100040c4 <___vfprintf_internal_r+0x1b40>
10002f50:	01440074 	movhi	r5,4097
10002f54:	29477b04 	addi	r5,r5,7660
10002f58:	d9413115 	stw	r5,1220(sp)
10002f5c:	00c000c4 	movi	r3,3
10002f60:	00bfdfc4 	movi	r2,-129
10002f64:	d8c12b15 	stw	r3,1196(sp)
10002f68:	e0b8703a 	and	fp,fp,r2
10002f6c:	dc812d15 	stw	r18,1204(sp)
10002f70:	1823883a 	mov	r17,r3
10002f74:	d8013215 	stw	zero,1224(sp)
10002f78:	d8013415 	stw	zero,1232(sp)
10002f7c:	003f0106 	br	10002b84 <__alt_data_end+0xf8002b84>
10002f80:	9cc00214 	ori	r19,r19,8
10002f84:	e005883a 	mov	r2,fp
10002f88:	e4000007 	ldb	r16,0(fp)
10002f8c:	003de506 	br	10002724 <__alt_data_end+0xf8002724>
10002f90:	da012a17 	ldw	r8,1192(sp)
10002f94:	df012a15 	stw	fp,1192(sp)
10002f98:	9f000414 	ori	fp,r19,16
10002f9c:	e0c0080c 	andi	r3,fp,32
10002fa0:	d8812d17 	ldw	r2,1204(sp)
10002fa4:	18007626 	beq	r3,zero,10003180 <___vfprintf_internal_r+0xbfc>
10002fa8:	d9412d17 	ldw	r5,1204(sp)
10002fac:	14800017 	ldw	r18,0(r2)
10002fb0:	15400117 	ldw	r21,4(r2)
10002fb4:	29400204 	addi	r5,r5,8
10002fb8:	d9412d15 	stw	r5,1204(sp)
10002fbc:	0005883a 	mov	r2,zero
10002fc0:	9546b03a 	or	r3,r18,r21
10002fc4:	d8012785 	stb	zero,1182(sp)
10002fc8:	da413215 	stw	r9,1224(sp)
10002fcc:	0027883a 	mov	r19,zero
10002fd0:	003ecd06 	br	10002b08 <__alt_data_end+0xf8002b08>
10002fd4:	da012a17 	ldw	r8,1192(sp)
10002fd8:	df012a15 	stw	fp,1192(sp)
10002fdc:	9f000414 	ori	fp,r19,16
10002fe0:	e0c0080c 	andi	r3,fp,32
10002fe4:	d8812d17 	ldw	r2,1204(sp)
10002fe8:	18002c26 	beq	r3,zero,1000309c <___vfprintf_internal_r+0xb18>
10002fec:	d9012d17 	ldw	r4,1204(sp)
10002ff0:	14800017 	ldw	r18,0(r2)
10002ff4:	15400117 	ldw	r21,4(r2)
10002ff8:	21000204 	addi	r4,r4,8
10002ffc:	d9012d15 	stw	r4,1204(sp)
10003000:	00800044 	movi	r2,1
10003004:	9546b03a 	or	r3,r18,r21
10003008:	003fee06 	br	10002fc4 <__alt_data_end+0xf8002fc4>
1000300c:	da012a17 	ldw	r8,1192(sp)
10003010:	df012a15 	stw	fp,1192(sp)
10003014:	9839883a 	mov	fp,r19
10003018:	dcc12b03 	ldbu	r19,1196(sp)
1000301c:	01440074 	movhi	r5,4097
10003020:	29477e04 	addi	r5,r5,7672
10003024:	dcc12785 	stb	r19,1182(sp)
10003028:	d9413b15 	stw	r5,1260(sp)
1000302c:	e0c0080c 	andi	r3,fp,32
10003030:	d8812d17 	ldw	r2,1204(sp)
10003034:	18002e26 	beq	r3,zero,100030f0 <___vfprintf_internal_r+0xb6c>
10003038:	d9412d17 	ldw	r5,1204(sp)
1000303c:	14800017 	ldw	r18,0(r2)
10003040:	15400117 	ldw	r21,4(r2)
10003044:	29400204 	addi	r5,r5,8
10003048:	d9412d15 	stw	r5,1204(sp)
1000304c:	e080004c 	andi	r2,fp,1
10003050:	10025c26 	beq	r2,zero,100039c4 <___vfprintf_internal_r+0x1440>
10003054:	9546b03a 	or	r3,r18,r21
10003058:	18038f26 	beq	r3,zero,10003e98 <___vfprintf_internal_r+0x1914>
1000305c:	00800c04 	movi	r2,48
10003060:	d8812705 	stb	r2,1180(sp)
10003064:	dc012745 	stb	r16,1181(sp)
10003068:	e7000094 	ori	fp,fp,2
1000306c:	00800084 	movi	r2,2
10003070:	003fd406 	br	10002fc4 <__alt_data_end+0xf8002fc4>
10003074:	9cc00814 	ori	r19,r19,32
10003078:	e005883a 	mov	r2,fp
1000307c:	e4000007 	ldb	r16,0(fp)
10003080:	003da806 	br	10002724 <__alt_data_end+0xf8002724>
10003084:	da012a17 	ldw	r8,1192(sp)
10003088:	df012a15 	stw	fp,1192(sp)
1000308c:	9839883a 	mov	fp,r19
10003090:	e0c0080c 	andi	r3,fp,32
10003094:	d8812d17 	ldw	r2,1204(sp)
10003098:	183fd41e 	bne	r3,zero,10002fec <__alt_data_end+0xf8002fec>
1000309c:	e0c0040c 	andi	r3,fp,16
100030a0:	18035f26 	beq	r3,zero,10003e20 <___vfprintf_internal_r+0x189c>
100030a4:	d9412d17 	ldw	r5,1204(sp)
100030a8:	14800017 	ldw	r18,0(r2)
100030ac:	002b883a 	mov	r21,zero
100030b0:	29400104 	addi	r5,r5,4
100030b4:	d9412d15 	stw	r5,1204(sp)
100030b8:	00800044 	movi	r2,1
100030bc:	9007883a 	mov	r3,r18
100030c0:	003fc006 	br	10002fc4 <__alt_data_end+0xf8002fc4>
100030c4:	da012a17 	ldw	r8,1192(sp)
100030c8:	df012a15 	stw	fp,1192(sp)
100030cc:	9839883a 	mov	fp,r19
100030d0:	dcc12b03 	ldbu	r19,1196(sp)
100030d4:	01040074 	movhi	r4,4097
100030d8:	21078304 	addi	r4,r4,7692
100030dc:	d9013b15 	stw	r4,1260(sp)
100030e0:	dcc12785 	stb	r19,1182(sp)
100030e4:	e0c0080c 	andi	r3,fp,32
100030e8:	d8812d17 	ldw	r2,1204(sp)
100030ec:	183fd21e 	bne	r3,zero,10003038 <__alt_data_end+0xf8003038>
100030f0:	e0c0040c 	andi	r3,fp,16
100030f4:	18035426 	beq	r3,zero,10003e48 <___vfprintf_internal_r+0x18c4>
100030f8:	d8c12d17 	ldw	r3,1204(sp)
100030fc:	14800017 	ldw	r18,0(r2)
10003100:	002b883a 	mov	r21,zero
10003104:	18c00104 	addi	r3,r3,4
10003108:	d8c12d15 	stw	r3,1204(sp)
1000310c:	003fcf06 	br	1000304c <__alt_data_end+0xf800304c>
10003110:	e4000007 	ldb	r16,0(fp)
10003114:	00801b04 	movi	r2,108
10003118:	8083f726 	beq	r16,r2,100040f8 <___vfprintf_internal_r+0x1b74>
1000311c:	9cc00414 	ori	r19,r19,16
10003120:	e005883a 	mov	r2,fp
10003124:	003d7f06 	br	10002724 <__alt_data_end+0xf8002724>
10003128:	da012a17 	ldw	r8,1192(sp)
1000312c:	df012a15 	stw	fp,1192(sp)
10003130:	9839883a 	mov	fp,r19
10003134:	dcc12b03 	ldbu	r19,1196(sp)
10003138:	e080080c 	andi	r2,fp,32
1000313c:	dcc12785 	stb	r19,1182(sp)
10003140:	10032226 	beq	r2,zero,10003dcc <___vfprintf_internal_r+0x1848>
10003144:	d9412d17 	ldw	r5,1204(sp)
10003148:	d9012f17 	ldw	r4,1212(sp)
1000314c:	28800017 	ldw	r2,0(r5)
10003150:	2007d7fa 	srai	r3,r4,31
10003154:	29400104 	addi	r5,r5,4
10003158:	d9412d15 	stw	r5,1204(sp)
1000315c:	11000015 	stw	r4,0(r2)
10003160:	10c00115 	stw	r3,4(r2)
10003164:	003d4406 	br	10002678 <__alt_data_end+0xf8002678>
10003168:	da012a17 	ldw	r8,1192(sp)
1000316c:	df012a15 	stw	fp,1192(sp)
10003170:	9839883a 	mov	fp,r19
10003174:	e0c0080c 	andi	r3,fp,32
10003178:	d8812d17 	ldw	r2,1204(sp)
1000317c:	183f8a1e 	bne	r3,zero,10002fa8 <__alt_data_end+0xf8002fa8>
10003180:	e0c0040c 	andi	r3,fp,16
10003184:	18031c26 	beq	r3,zero,10003df8 <___vfprintf_internal_r+0x1874>
10003188:	14800017 	ldw	r18,0(r2)
1000318c:	d8812d17 	ldw	r2,1204(sp)
10003190:	002b883a 	mov	r21,zero
10003194:	9007883a 	mov	r3,r18
10003198:	10800104 	addi	r2,r2,4
1000319c:	d8812d15 	stw	r2,1204(sp)
100031a0:	0005883a 	mov	r2,zero
100031a4:	003f8706 	br	10002fc4 <__alt_data_end+0xf8002fc4>
100031a8:	d9412d17 	ldw	r5,1204(sp)
100031ac:	00800c04 	movi	r2,48
100031b0:	d8812705 	stb	r2,1180(sp)
100031b4:	2c800017 	ldw	r18,0(r5)
100031b8:	00801e04 	movi	r2,120
100031bc:	d8812745 	stb	r2,1181(sp)
100031c0:	00840074 	movhi	r2,4097
100031c4:	10878304 	addi	r2,r2,7692
100031c8:	29400104 	addi	r5,r5,4
100031cc:	da012a17 	ldw	r8,1192(sp)
100031d0:	d8813b15 	stw	r2,1260(sp)
100031d4:	df012a15 	stw	fp,1192(sp)
100031d8:	002b883a 	mov	r21,zero
100031dc:	9f000094 	ori	fp,r19,2
100031e0:	d9412d15 	stw	r5,1204(sp)
100031e4:	00800084 	movi	r2,2
100031e8:	04001e04 	movi	r16,120
100031ec:	9007883a 	mov	r3,r18
100031f0:	003f7406 	br	10002fc4 <__alt_data_end+0xf8002fc4>
100031f4:	da012a17 	ldw	r8,1192(sp)
100031f8:	df012a15 	stw	fp,1192(sp)
100031fc:	9839883a 	mov	fp,r19
10003200:	dcc12b03 	ldbu	r19,1196(sp)
10003204:	e080080c 	andi	r2,fp,32
10003208:	d8c12d17 	ldw	r3,1204(sp)
1000320c:	dcc12785 	stb	r19,1182(sp)
10003210:	103e321e 	bne	r2,zero,10002adc <__alt_data_end+0xf8002adc>
10003214:	e080040c 	andi	r2,fp,16
10003218:	10031326 	beq	r2,zero,10003e68 <___vfprintf_internal_r+0x18e4>
1000321c:	1c800017 	ldw	r18,0(r3)
10003220:	d9412d17 	ldw	r5,1204(sp)
10003224:	902bd7fa 	srai	r21,r18,31
10003228:	29400104 	addi	r5,r5,4
1000322c:	d9412d15 	stw	r5,1204(sp)
10003230:	a805883a 	mov	r2,r21
10003234:	003e2f06 	br	10002af4 <__alt_data_end+0xf8002af4>
10003238:	9cc01014 	ori	r19,r19,64
1000323c:	e005883a 	mov	r2,fp
10003240:	e4000007 	ldb	r16,0(fp)
10003244:	003d3706 	br	10002724 <__alt_data_end+0xf8002724>
10003248:	d8c12d17 	ldw	r3,1204(sp)
1000324c:	d9012d17 	ldw	r4,1204(sp)
10003250:	da012a17 	ldw	r8,1192(sp)
10003254:	18800017 	ldw	r2,0(r3)
10003258:	21000104 	addi	r4,r4,4
1000325c:	00c00044 	movi	r3,1
10003260:	df012a15 	stw	fp,1192(sp)
10003264:	d8c12b15 	stw	r3,1196(sp)
10003268:	9839883a 	mov	fp,r19
1000326c:	d8012785 	stb	zero,1182(sp)
10003270:	d8810405 	stb	r2,1040(sp)
10003274:	d9012d15 	stw	r4,1204(sp)
10003278:	1823883a 	mov	r17,r3
1000327c:	d8c10404 	addi	r3,sp,1040
10003280:	d8013215 	stw	zero,1224(sp)
10003284:	d8013415 	stw	zero,1232(sp)
10003288:	d8c13115 	stw	r3,1220(sp)
1000328c:	0005883a 	mov	r2,zero
10003290:	003e4306 	br	10002ba0 <__alt_data_end+0xf8002ba0>
10003294:	d8812b07 	ldb	r2,1196(sp)
10003298:	1002fc1e 	bne	r2,zero,10003e8c <___vfprintf_internal_r+0x1908>
1000329c:	00c00804 	movi	r3,32
100032a0:	d8c12b05 	stb	r3,1196(sp)
100032a4:	e005883a 	mov	r2,fp
100032a8:	e4000007 	ldb	r16,0(fp)
100032ac:	003d1d06 	br	10002724 <__alt_data_end+0xf8002724>
100032b0:	9cc00054 	ori	r19,r19,1
100032b4:	e005883a 	mov	r2,fp
100032b8:	e4000007 	ldb	r16,0(fp)
100032bc:	003d1906 	br	10002724 <__alt_data_end+0xf8002724>
100032c0:	d9012d17 	ldw	r4,1204(sp)
100032c4:	d9412d17 	ldw	r5,1204(sp)
100032c8:	21000017 	ldw	r4,0(r4)
100032cc:	28c00104 	addi	r3,r5,4
100032d0:	d9012e15 	stw	r4,1208(sp)
100032d4:	20038c16 	blt	r4,zero,10004108 <___vfprintf_internal_r+0x1b84>
100032d8:	d8c12d15 	stw	r3,1204(sp)
100032dc:	e005883a 	mov	r2,fp
100032e0:	e4000007 	ldb	r16,0(fp)
100032e4:	003d0f06 	br	10002724 <__alt_data_end+0xf8002724>
100032e8:	00c00ac4 	movi	r3,43
100032ec:	d8c12b05 	stb	r3,1196(sp)
100032f0:	e005883a 	mov	r2,fp
100032f4:	e4000007 	ldb	r16,0(fp)
100032f8:	003d0a06 	br	10002724 <__alt_data_end+0xf8002724>
100032fc:	d8c12d17 	ldw	r3,1204(sp)
10003300:	d9012d17 	ldw	r4,1204(sp)
10003304:	da012a17 	ldw	r8,1192(sp)
10003308:	18c00017 	ldw	r3,0(r3)
1000330c:	df012a15 	stw	fp,1192(sp)
10003310:	d8012785 	stb	zero,1182(sp)
10003314:	d8c13115 	stw	r3,1220(sp)
10003318:	9839883a 	mov	fp,r19
1000331c:	24800104 	addi	r18,r4,4
10003320:	1803f726 	beq	r3,zero,10004300 <___vfprintf_internal_r+0x1d7c>
10003324:	d9013117 	ldw	r4,1220(sp)
10003328:	48038916 	blt	r9,zero,10004150 <___vfprintf_internal_r+0x1bcc>
1000332c:	480d883a 	mov	r6,r9
10003330:	000b883a 	mov	r5,zero
10003334:	da013f15 	stw	r8,1276(sp)
10003338:	da413e15 	stw	r9,1272(sp)
1000333c:	0007b980 	call	10007b98 <memchr>
10003340:	da013f17 	ldw	r8,1276(sp)
10003344:	da413e17 	ldw	r9,1272(sp)
10003348:	10045926 	beq	r2,zero,100044b0 <___vfprintf_internal_r+0x1f2c>
1000334c:	d8c13117 	ldw	r3,1220(sp)
10003350:	10e3c83a 	sub	r17,r2,r3
10003354:	4c433516 	blt	r9,r17,1000402c <___vfprintf_internal_r+0x1aa8>
10003358:	8805883a 	mov	r2,r17
1000335c:	88038116 	blt	r17,zero,10004164 <___vfprintf_internal_r+0x1be0>
10003360:	dcc12783 	ldbu	r19,1182(sp)
10003364:	d8812b15 	stw	r2,1196(sp)
10003368:	dc812d15 	stw	r18,1204(sp)
1000336c:	d8013215 	stw	zero,1224(sp)
10003370:	d8013415 	stw	zero,1232(sp)
10003374:	003e0306 	br	10002b84 <__alt_data_end+0xf8002b84>
10003378:	da012a17 	ldw	r8,1192(sp)
1000337c:	df012a15 	stw	fp,1192(sp)
10003380:	9839883a 	mov	fp,r19
10003384:	dcc12b03 	ldbu	r19,1196(sp)
10003388:	dcc12785 	stb	r19,1182(sp)
1000338c:	803d8f26 	beq	r16,zero,100029cc <__alt_data_end+0xf80029cc>
10003390:	00c00044 	movi	r3,1
10003394:	d8c12b15 	stw	r3,1196(sp)
10003398:	dc010405 	stb	r16,1040(sp)
1000339c:	d8012785 	stb	zero,1182(sp)
100033a0:	003fb506 	br	10003278 <__alt_data_end+0xf8003278>
100033a4:	d8c12017 	ldw	r3,1152(sp)
100033a8:	003e3506 	br	10002c80 <__alt_data_end+0xf8002c80>
100033ac:	10803fcc 	andi	r2,r2,255
100033b0:	00c00044 	movi	r3,1
100033b4:	10fddc1e 	bne	r2,r3,10002b28 <__alt_data_end+0xf8002b28>
100033b8:	a800021e 	bne	r21,zero,100033c4 <___vfprintf_internal_r+0xe40>
100033bc:	00800244 	movi	r2,9
100033c0:	14801e2e 	bgeu	r2,r18,1000343c <___vfprintf_internal_r+0xeb8>
100033c4:	dc012b15 	stw	r16,1196(sp)
100033c8:	dc410e04 	addi	r17,sp,1080
100033cc:	9021883a 	mov	r16,r18
100033d0:	da012c15 	stw	r8,1200(sp)
100033d4:	a825883a 	mov	r18,r21
100033d8:	482b883a 	mov	r21,r9
100033dc:	8009883a 	mov	r4,r16
100033e0:	900b883a 	mov	r5,r18
100033e4:	01800284 	movi	r6,10
100033e8:	000f883a 	mov	r7,zero
100033ec:	000bebc0 	call	1000bebc <__umoddi3>
100033f0:	10800c04 	addi	r2,r2,48
100033f4:	8c7fffc4 	addi	r17,r17,-1
100033f8:	8009883a 	mov	r4,r16
100033fc:	900b883a 	mov	r5,r18
10003400:	01800284 	movi	r6,10
10003404:	000f883a 	mov	r7,zero
10003408:	88800005 	stb	r2,0(r17)
1000340c:	000b87c0 	call	1000b87c <__udivdi3>
10003410:	1021883a 	mov	r16,r2
10003414:	10c4b03a 	or	r2,r2,r3
10003418:	1825883a 	mov	r18,r3
1000341c:	103fef1e 	bne	r2,zero,100033dc <__alt_data_end+0xf80033dc>
10003420:	d9012817 	ldw	r4,1184(sp)
10003424:	dc413115 	stw	r17,1220(sp)
10003428:	dc012b17 	ldw	r16,1196(sp)
1000342c:	da012c17 	ldw	r8,1200(sp)
10003430:	a813883a 	mov	r9,r21
10003434:	2463c83a 	sub	r17,r4,r17
10003438:	003dcd06 	br	10002b70 <__alt_data_end+0xf8002b70>
1000343c:	94800c04 	addi	r18,r18,48
10003440:	d8c10dc4 	addi	r3,sp,1079
10003444:	dc810dc5 	stb	r18,1079(sp)
10003448:	dc413c17 	ldw	r17,1264(sp)
1000344c:	d8c13115 	stw	r3,1220(sp)
10003450:	003dc706 	br	10002b70 <__alt_data_end+0xf8002b70>
10003454:	00801944 	movi	r2,101
10003458:	1400720e 	bge	r2,r16,10003624 <___vfprintf_internal_r+0x10a0>
1000345c:	d9013717 	ldw	r4,1244(sp)
10003460:	d9413917 	ldw	r5,1252(sp)
10003464:	000d883a 	mov	r6,zero
10003468:	000f883a 	mov	r7,zero
1000346c:	d8c13d15 	stw	r3,1268(sp)
10003470:	da013f15 	stw	r8,1276(sp)
10003474:	000d8480 	call	1000d848 <__eqdf2>
10003478:	d8c13d17 	ldw	r3,1268(sp)
1000347c:	da013f17 	ldw	r8,1276(sp)
10003480:	1000f41e 	bne	r2,zero,10003854 <___vfprintf_internal_r+0x12d0>
10003484:	d8811f17 	ldw	r2,1148(sp)
10003488:	01040074 	movhi	r4,4097
1000348c:	21078a04 	addi	r4,r4,7720
10003490:	18c00044 	addi	r3,r3,1
10003494:	10800044 	addi	r2,r2,1
10003498:	41000015 	stw	r4,0(r8)
1000349c:	01000044 	movi	r4,1
100034a0:	41000115 	stw	r4,4(r8)
100034a4:	d8c12015 	stw	r3,1152(sp)
100034a8:	d8811f15 	stw	r2,1148(sp)
100034ac:	010001c4 	movi	r4,7
100034b0:	20828d16 	blt	r4,r2,10003ee8 <___vfprintf_internal_r+0x1964>
100034b4:	42000204 	addi	r8,r8,8
100034b8:	d8812617 	ldw	r2,1176(sp)
100034bc:	d9413317 	ldw	r5,1228(sp)
100034c0:	11400216 	blt	r2,r5,100034cc <___vfprintf_internal_r+0xf48>
100034c4:	e080004c 	andi	r2,fp,1
100034c8:	103e4126 	beq	r2,zero,10002dd0 <__alt_data_end+0xf8002dd0>
100034cc:	d8813817 	ldw	r2,1248(sp)
100034d0:	d9013517 	ldw	r4,1236(sp)
100034d4:	d9413817 	ldw	r5,1248(sp)
100034d8:	1887883a 	add	r3,r3,r2
100034dc:	d8811f17 	ldw	r2,1148(sp)
100034e0:	41000015 	stw	r4,0(r8)
100034e4:	41400115 	stw	r5,4(r8)
100034e8:	10800044 	addi	r2,r2,1
100034ec:	d8c12015 	stw	r3,1152(sp)
100034f0:	d8811f15 	stw	r2,1148(sp)
100034f4:	010001c4 	movi	r4,7
100034f8:	20830916 	blt	r4,r2,10004120 <___vfprintf_internal_r+0x1b9c>
100034fc:	42000204 	addi	r8,r8,8
10003500:	d8813317 	ldw	r2,1228(sp)
10003504:	143fffc4 	addi	r16,r2,-1
10003508:	043e310e 	bge	zero,r16,10002dd0 <__alt_data_end+0xf8002dd0>
1000350c:	04400404 	movi	r17,16
10003510:	d8811f17 	ldw	r2,1148(sp)
10003514:	8c007e0e 	bge	r17,r16,10003710 <___vfprintf_internal_r+0x118c>
10003518:	01440074 	movhi	r5,4097
1000351c:	29478a84 	addi	r5,r5,7722
10003520:	d9412c15 	stw	r5,1200(sp)
10003524:	04c001c4 	movi	r19,7
10003528:	00000306 	br	10003538 <___vfprintf_internal_r+0xfb4>
1000352c:	42000204 	addi	r8,r8,8
10003530:	843ffc04 	addi	r16,r16,-16
10003534:	8c00790e 	bge	r17,r16,1000371c <___vfprintf_internal_r+0x1198>
10003538:	18c00404 	addi	r3,r3,16
1000353c:	10800044 	addi	r2,r2,1
10003540:	45000015 	stw	r20,0(r8)
10003544:	44400115 	stw	r17,4(r8)
10003548:	d8c12015 	stw	r3,1152(sp)
1000354c:	d8811f15 	stw	r2,1148(sp)
10003550:	98bff60e 	bge	r19,r2,1000352c <__alt_data_end+0xf800352c>
10003554:	b809883a 	mov	r4,r23
10003558:	b00b883a 	mov	r5,r22
1000355c:	d9811e04 	addi	r6,sp,1144
10003560:	00099c40 	call	100099c4 <__sprint_r>
10003564:	103d1f1e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10003568:	d8c12017 	ldw	r3,1152(sp)
1000356c:	d8811f17 	ldw	r2,1148(sp)
10003570:	da000404 	addi	r8,sp,16
10003574:	003fee06 	br	10003530 <__alt_data_end+0xf8003530>
10003578:	d9412e17 	ldw	r5,1208(sp)
1000357c:	d8812b17 	ldw	r2,1196(sp)
10003580:	28a7c83a 	sub	r19,r5,r2
10003584:	04fddc0e 	bge	zero,r19,10002cf8 <__alt_data_end+0xf8002cf8>
10003588:	05400404 	movi	r21,16
1000358c:	d8811f17 	ldw	r2,1148(sp)
10003590:	acc3870e 	bge	r21,r19,100043b0 <___vfprintf_internal_r+0x1e2c>
10003594:	01440074 	movhi	r5,4097
10003598:	29478a84 	addi	r5,r5,7722
1000359c:	d9412c15 	stw	r5,1200(sp)
100035a0:	048001c4 	movi	r18,7
100035a4:	00000306 	br	100035b4 <___vfprintf_internal_r+0x1030>
100035a8:	9cfffc04 	addi	r19,r19,-16
100035ac:	42000204 	addi	r8,r8,8
100035b0:	acc0110e 	bge	r21,r19,100035f8 <___vfprintf_internal_r+0x1074>
100035b4:	18c00404 	addi	r3,r3,16
100035b8:	10800044 	addi	r2,r2,1
100035bc:	45000015 	stw	r20,0(r8)
100035c0:	45400115 	stw	r21,4(r8)
100035c4:	d8c12015 	stw	r3,1152(sp)
100035c8:	d8811f15 	stw	r2,1148(sp)
100035cc:	90bff60e 	bge	r18,r2,100035a8 <__alt_data_end+0xf80035a8>
100035d0:	b809883a 	mov	r4,r23
100035d4:	b00b883a 	mov	r5,r22
100035d8:	d9811e04 	addi	r6,sp,1144
100035dc:	00099c40 	call	100099c4 <__sprint_r>
100035e0:	103d001e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
100035e4:	9cfffc04 	addi	r19,r19,-16
100035e8:	d8c12017 	ldw	r3,1152(sp)
100035ec:	d8811f17 	ldw	r2,1148(sp)
100035f0:	da000404 	addi	r8,sp,16
100035f4:	acffef16 	blt	r21,r19,100035b4 <__alt_data_end+0xf80035b4>
100035f8:	d9012c17 	ldw	r4,1200(sp)
100035fc:	1cc7883a 	add	r3,r3,r19
10003600:	10800044 	addi	r2,r2,1
10003604:	41000015 	stw	r4,0(r8)
10003608:	44c00115 	stw	r19,4(r8)
1000360c:	d8c12015 	stw	r3,1152(sp)
10003610:	d8811f15 	stw	r2,1148(sp)
10003614:	010001c4 	movi	r4,7
10003618:	20817816 	blt	r4,r2,10003bfc <___vfprintf_internal_r+0x1678>
1000361c:	42000204 	addi	r8,r8,8
10003620:	003db506 	br	10002cf8 <__alt_data_end+0xf8002cf8>
10003624:	d9413317 	ldw	r5,1228(sp)
10003628:	00800044 	movi	r2,1
1000362c:	18c00044 	addi	r3,r3,1
10003630:	11413e0e 	bge	r2,r5,10003b2c <___vfprintf_internal_r+0x15a8>
10003634:	dc011f17 	ldw	r16,1148(sp)
10003638:	d8813117 	ldw	r2,1220(sp)
1000363c:	d8c12015 	stw	r3,1152(sp)
10003640:	84000044 	addi	r16,r16,1
10003644:	40800015 	stw	r2,0(r8)
10003648:	00800044 	movi	r2,1
1000364c:	40800115 	stw	r2,4(r8)
10003650:	dc011f15 	stw	r16,1148(sp)
10003654:	008001c4 	movi	r2,7
10003658:	14015616 	blt	r2,r16,10003bb4 <___vfprintf_internal_r+0x1630>
1000365c:	42000204 	addi	r8,r8,8
10003660:	d9013817 	ldw	r4,1248(sp)
10003664:	d9413517 	ldw	r5,1236(sp)
10003668:	84000044 	addi	r16,r16,1
1000366c:	1907883a 	add	r3,r3,r4
10003670:	41400015 	stw	r5,0(r8)
10003674:	41000115 	stw	r4,4(r8)
10003678:	d8c12015 	stw	r3,1152(sp)
1000367c:	dc011f15 	stw	r16,1148(sp)
10003680:	008001c4 	movi	r2,7
10003684:	14015416 	blt	r2,r16,10003bd8 <___vfprintf_internal_r+0x1654>
10003688:	44400204 	addi	r17,r8,8
1000368c:	d9013717 	ldw	r4,1244(sp)
10003690:	d9413917 	ldw	r5,1252(sp)
10003694:	000d883a 	mov	r6,zero
10003698:	000f883a 	mov	r7,zero
1000369c:	d8c13d15 	stw	r3,1268(sp)
100036a0:	000d8480 	call	1000d848 <__eqdf2>
100036a4:	d8c13d17 	ldw	r3,1268(sp)
100036a8:	1000a726 	beq	r2,zero,10003948 <___vfprintf_internal_r+0x13c4>
100036ac:	d9013317 	ldw	r4,1228(sp)
100036b0:	d9413117 	ldw	r5,1220(sp)
100036b4:	84000044 	addi	r16,r16,1
100036b8:	20bfffc4 	addi	r2,r4,-1
100036bc:	1887883a 	add	r3,r3,r2
100036c0:	29000044 	addi	r4,r5,1
100036c4:	88800115 	stw	r2,4(r17)
100036c8:	89000015 	stw	r4,0(r17)
100036cc:	d8c12015 	stw	r3,1152(sp)
100036d0:	dc011f15 	stw	r16,1148(sp)
100036d4:	008001c4 	movi	r2,7
100036d8:	14012d16 	blt	r2,r16,10003b90 <___vfprintf_internal_r+0x160c>
100036dc:	8c400204 	addi	r17,r17,8
100036e0:	d9413a17 	ldw	r5,1256(sp)
100036e4:	dcc122c4 	addi	r19,sp,1163
100036e8:	84000044 	addi	r16,r16,1
100036ec:	28c7883a 	add	r3,r5,r3
100036f0:	8cc00015 	stw	r19,0(r17)
100036f4:	89400115 	stw	r5,4(r17)
100036f8:	d8c12015 	stw	r3,1152(sp)
100036fc:	dc011f15 	stw	r16,1148(sp)
10003700:	008001c4 	movi	r2,7
10003704:	14000e16 	blt	r2,r16,10003740 <___vfprintf_internal_r+0x11bc>
10003708:	8a000204 	addi	r8,r17,8
1000370c:	003db006 	br	10002dd0 <__alt_data_end+0xf8002dd0>
10003710:	01040074 	movhi	r4,4097
10003714:	21078a84 	addi	r4,r4,7722
10003718:	d9012c15 	stw	r4,1200(sp)
1000371c:	d9012c17 	ldw	r4,1200(sp)
10003720:	1c07883a 	add	r3,r3,r16
10003724:	44000115 	stw	r16,4(r8)
10003728:	41000015 	stw	r4,0(r8)
1000372c:	10800044 	addi	r2,r2,1
10003730:	d8c12015 	stw	r3,1152(sp)
10003734:	d8811f15 	stw	r2,1148(sp)
10003738:	010001c4 	movi	r4,7
1000373c:	20bda30e 	bge	r4,r2,10002dcc <__alt_data_end+0xf8002dcc>
10003740:	b809883a 	mov	r4,r23
10003744:	b00b883a 	mov	r5,r22
10003748:	d9811e04 	addi	r6,sp,1144
1000374c:	00099c40 	call	100099c4 <__sprint_r>
10003750:	103ca41e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10003754:	d8c12017 	ldw	r3,1152(sp)
10003758:	da000404 	addi	r8,sp,16
1000375c:	003d9c06 	br	10002dd0 <__alt_data_end+0xf8002dd0>
10003760:	b809883a 	mov	r4,r23
10003764:	b00b883a 	mov	r5,r22
10003768:	d9811e04 	addi	r6,sp,1144
1000376c:	00099c40 	call	100099c4 <__sprint_r>
10003770:	103dd226 	beq	r2,zero,10002ebc <__alt_data_end+0xf8002ebc>
10003774:	003c9b06 	br	100029e4 <__alt_data_end+0xf80029e4>
10003778:	10803fcc 	andi	r2,r2,255
1000377c:	1000311e 	bne	r2,zero,10003844 <___vfprintf_internal_r+0x12c0>
10003780:	e080004c 	andi	r2,fp,1
10003784:	10002f26 	beq	r2,zero,10003844 <___vfprintf_internal_r+0x12c0>
10003788:	00800c04 	movi	r2,48
1000378c:	d8c10dc4 	addi	r3,sp,1079
10003790:	d8810dc5 	stb	r2,1079(sp)
10003794:	dc413c17 	ldw	r17,1264(sp)
10003798:	d8c13115 	stw	r3,1220(sp)
1000379c:	003cf406 	br	10002b70 <__alt_data_end+0xf8002b70>
100037a0:	b809883a 	mov	r4,r23
100037a4:	b00b883a 	mov	r5,r22
100037a8:	d9811e04 	addi	r6,sp,1144
100037ac:	00099c40 	call	100099c4 <__sprint_r>
100037b0:	103c8c1e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
100037b4:	d8c12017 	ldw	r3,1152(sp)
100037b8:	da000404 	addi	r8,sp,16
100037bc:	003d7706 	br	10002d9c <__alt_data_end+0xf8002d9c>
100037c0:	b809883a 	mov	r4,r23
100037c4:	b00b883a 	mov	r5,r22
100037c8:	d9811e04 	addi	r6,sp,1144
100037cc:	00099c40 	call	100099c4 <__sprint_r>
100037d0:	103c841e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
100037d4:	d8c12017 	ldw	r3,1152(sp)
100037d8:	da000404 	addi	r8,sp,16
100037dc:	003d3506 	br	10002cb4 <__alt_data_end+0xf8002cb4>
100037e0:	b809883a 	mov	r4,r23
100037e4:	b00b883a 	mov	r5,r22
100037e8:	d9811e04 	addi	r6,sp,1144
100037ec:	00099c40 	call	100099c4 <__sprint_r>
100037f0:	103c7c1e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
100037f4:	d8c12017 	ldw	r3,1152(sp)
100037f8:	da000404 	addi	r8,sp,16
100037fc:	003d3b06 	br	10002cec <__alt_data_end+0xf8002cec>
10003800:	d9413b17 	ldw	r5,1260(sp)
10003804:	d8c10e04 	addi	r3,sp,1080
10003808:	908003cc 	andi	r2,r18,15
1000380c:	a808973a 	slli	r4,r21,28
10003810:	2885883a 	add	r2,r5,r2
10003814:	9024d13a 	srli	r18,r18,4
10003818:	10800003 	ldbu	r2,0(r2)
1000381c:	a82ad13a 	srli	r21,r21,4
10003820:	18ffffc4 	addi	r3,r3,-1
10003824:	24a4b03a 	or	r18,r4,r18
10003828:	18800005 	stb	r2,0(r3)
1000382c:	9544b03a 	or	r2,r18,r21
10003830:	103ff51e 	bne	r2,zero,10003808 <__alt_data_end+0xf8003808>
10003834:	d9412817 	ldw	r5,1184(sp)
10003838:	d8c13115 	stw	r3,1220(sp)
1000383c:	28e3c83a 	sub	r17,r5,r3
10003840:	003ccb06 	br	10002b70 <__alt_data_end+0xf8002b70>
10003844:	d8c10e04 	addi	r3,sp,1080
10003848:	0023883a 	mov	r17,zero
1000384c:	d8c13115 	stw	r3,1220(sp)
10003850:	003cc706 	br	10002b70 <__alt_data_end+0xf8002b70>
10003854:	dc012617 	ldw	r16,1176(sp)
10003858:	0401ab0e 	bge	zero,r16,10003f08 <___vfprintf_internal_r+0x1984>
1000385c:	d8813317 	ldw	r2,1228(sp)
10003860:	d9413117 	ldw	r5,1220(sp)
10003864:	d9013417 	ldw	r4,1232(sp)
10003868:	1023883a 	mov	r17,r2
1000386c:	28a1883a 	add	r16,r5,r2
10003870:	2080010e 	bge	r4,r2,10003878 <___vfprintf_internal_r+0x12f4>
10003874:	2023883a 	mov	r17,r4
10003878:	04400b0e 	bge	zero,r17,100038a8 <___vfprintf_internal_r+0x1324>
1000387c:	d8811f17 	ldw	r2,1148(sp)
10003880:	d9413117 	ldw	r5,1220(sp)
10003884:	1c47883a 	add	r3,r3,r17
10003888:	10800044 	addi	r2,r2,1
1000388c:	41400015 	stw	r5,0(r8)
10003890:	44400115 	stw	r17,4(r8)
10003894:	d8c12015 	stw	r3,1152(sp)
10003898:	d8811f15 	stw	r2,1148(sp)
1000389c:	010001c4 	movi	r4,7
100038a0:	20826716 	blt	r4,r2,10004240 <___vfprintf_internal_r+0x1cbc>
100038a4:	42000204 	addi	r8,r8,8
100038a8:	88026316 	blt	r17,zero,10004238 <___vfprintf_internal_r+0x1cb4>
100038ac:	d8813417 	ldw	r2,1232(sp)
100038b0:	1463c83a 	sub	r17,r2,r17
100038b4:	0440590e 	bge	zero,r17,10003a1c <___vfprintf_internal_r+0x1498>
100038b8:	04c00404 	movi	r19,16
100038bc:	d8811f17 	ldw	r2,1148(sp)
100038c0:	9c41770e 	bge	r19,r17,10003ea0 <___vfprintf_internal_r+0x191c>
100038c4:	01440074 	movhi	r5,4097
100038c8:	29478a84 	addi	r5,r5,7722
100038cc:	d9412c15 	stw	r5,1200(sp)
100038d0:	054001c4 	movi	r21,7
100038d4:	00000306 	br	100038e4 <___vfprintf_internal_r+0x1360>
100038d8:	42000204 	addi	r8,r8,8
100038dc:	8c7ffc04 	addi	r17,r17,-16
100038e0:	9c41720e 	bge	r19,r17,10003eac <___vfprintf_internal_r+0x1928>
100038e4:	18c00404 	addi	r3,r3,16
100038e8:	10800044 	addi	r2,r2,1
100038ec:	45000015 	stw	r20,0(r8)
100038f0:	44c00115 	stw	r19,4(r8)
100038f4:	d8c12015 	stw	r3,1152(sp)
100038f8:	d8811f15 	stw	r2,1148(sp)
100038fc:	a8bff60e 	bge	r21,r2,100038d8 <__alt_data_end+0xf80038d8>
10003900:	b809883a 	mov	r4,r23
10003904:	b00b883a 	mov	r5,r22
10003908:	d9811e04 	addi	r6,sp,1144
1000390c:	00099c40 	call	100099c4 <__sprint_r>
10003910:	103c341e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10003914:	d8c12017 	ldw	r3,1152(sp)
10003918:	d8811f17 	ldw	r2,1148(sp)
1000391c:	da000404 	addi	r8,sp,16
10003920:	003fee06 	br	100038dc <__alt_data_end+0xf80038dc>
10003924:	b809883a 	mov	r4,r23
10003928:	b00b883a 	mov	r5,r22
1000392c:	d9811e04 	addi	r6,sp,1144
10003930:	00099c40 	call	100099c4 <__sprint_r>
10003934:	103c2b1e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10003938:	d8c12017 	ldw	r3,1152(sp)
1000393c:	d8812787 	ldb	r2,1182(sp)
10003940:	da000404 	addi	r8,sp,16
10003944:	003cce06 	br	10002c80 <__alt_data_end+0xf8002c80>
10003948:	d8813317 	ldw	r2,1228(sp)
1000394c:	14ffffc4 	addi	r19,r2,-1
10003950:	04ff630e 	bge	zero,r19,100036e0 <__alt_data_end+0xf80036e0>
10003954:	05400404 	movi	r21,16
10003958:	acc0810e 	bge	r21,r19,10003b60 <___vfprintf_internal_r+0x15dc>
1000395c:	01440074 	movhi	r5,4097
10003960:	29478a84 	addi	r5,r5,7722
10003964:	d9412c15 	stw	r5,1200(sp)
10003968:	01c001c4 	movi	r7,7
1000396c:	00000306 	br	1000397c <___vfprintf_internal_r+0x13f8>
10003970:	8c400204 	addi	r17,r17,8
10003974:	9cfffc04 	addi	r19,r19,-16
10003978:	acc07c0e 	bge	r21,r19,10003b6c <___vfprintf_internal_r+0x15e8>
1000397c:	18c00404 	addi	r3,r3,16
10003980:	84000044 	addi	r16,r16,1
10003984:	8d000015 	stw	r20,0(r17)
10003988:	8d400115 	stw	r21,4(r17)
1000398c:	d8c12015 	stw	r3,1152(sp)
10003990:	dc011f15 	stw	r16,1148(sp)
10003994:	3c3ff60e 	bge	r7,r16,10003970 <__alt_data_end+0xf8003970>
10003998:	b809883a 	mov	r4,r23
1000399c:	b00b883a 	mov	r5,r22
100039a0:	d9811e04 	addi	r6,sp,1144
100039a4:	d9c13d15 	stw	r7,1268(sp)
100039a8:	00099c40 	call	100099c4 <__sprint_r>
100039ac:	d9c13d17 	ldw	r7,1268(sp)
100039b0:	103c0c1e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
100039b4:	d8c12017 	ldw	r3,1152(sp)
100039b8:	dc011f17 	ldw	r16,1148(sp)
100039bc:	dc400404 	addi	r17,sp,16
100039c0:	003fec06 	br	10003974 <__alt_data_end+0xf8003974>
100039c4:	00800084 	movi	r2,2
100039c8:	9546b03a 	or	r3,r18,r21
100039cc:	003d7d06 	br	10002fc4 <__alt_data_end+0xf8002fc4>
100039d0:	10803fcc 	andi	r2,r2,255
100039d4:	1080201c 	xori	r2,r2,128
100039d8:	10bfe004 	addi	r2,r2,-128
100039dc:	01000c04 	movi	r4,48
100039e0:	1101d726 	beq	r2,r4,10004140 <___vfprintf_internal_r+0x1bbc>
100039e4:	d9413117 	ldw	r5,1220(sp)
100039e8:	d8812817 	ldw	r2,1184(sp)
100039ec:	193fffc5 	stb	r4,-1(r3)
100039f0:	297fffc4 	addi	r5,r5,-1
100039f4:	d9413115 	stw	r5,1220(sp)
100039f8:	1163c83a 	sub	r17,r2,r5
100039fc:	003c5c06 	br	10002b70 <__alt_data_end+0xf8002b70>
10003a00:	b809883a 	mov	r4,r23
10003a04:	b00b883a 	mov	r5,r22
10003a08:	d9811e04 	addi	r6,sp,1144
10003a0c:	00099c40 	call	100099c4 <__sprint_r>
10003a10:	103bf41e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10003a14:	d8c12017 	ldw	r3,1152(sp)
10003a18:	da000404 	addi	r8,sp,16
10003a1c:	d9413117 	ldw	r5,1220(sp)
10003a20:	d9013417 	ldw	r4,1232(sp)
10003a24:	d8812617 	ldw	r2,1176(sp)
10003a28:	2923883a 	add	r17,r5,r4
10003a2c:	d9413317 	ldw	r5,1228(sp)
10003a30:	11400216 	blt	r2,r5,10003a3c <___vfprintf_internal_r+0x14b8>
10003a34:	e100004c 	andi	r4,fp,1
10003a38:	20000d26 	beq	r4,zero,10003a70 <___vfprintf_internal_r+0x14ec>
10003a3c:	d9013817 	ldw	r4,1248(sp)
10003a40:	d9413517 	ldw	r5,1236(sp)
10003a44:	1907883a 	add	r3,r3,r4
10003a48:	d9011f17 	ldw	r4,1148(sp)
10003a4c:	41400015 	stw	r5,0(r8)
10003a50:	d9413817 	ldw	r5,1248(sp)
10003a54:	21000044 	addi	r4,r4,1
10003a58:	d8c12015 	stw	r3,1152(sp)
10003a5c:	41400115 	stw	r5,4(r8)
10003a60:	d9011f15 	stw	r4,1148(sp)
10003a64:	014001c4 	movi	r5,7
10003a68:	2901fd16 	blt	r5,r4,10004260 <___vfprintf_internal_r+0x1cdc>
10003a6c:	42000204 	addi	r8,r8,8
10003a70:	d9013317 	ldw	r4,1228(sp)
10003a74:	2085c83a 	sub	r2,r4,r2
10003a78:	8449c83a 	sub	r4,r16,r17
10003a7c:	1021883a 	mov	r16,r2
10003a80:	2080010e 	bge	r4,r2,10003a88 <___vfprintf_internal_r+0x1504>
10003a84:	2021883a 	mov	r16,r4
10003a88:	04000a0e 	bge	zero,r16,10003ab4 <___vfprintf_internal_r+0x1530>
10003a8c:	d9011f17 	ldw	r4,1148(sp)
10003a90:	1c07883a 	add	r3,r3,r16
10003a94:	44400015 	stw	r17,0(r8)
10003a98:	21000044 	addi	r4,r4,1
10003a9c:	44000115 	stw	r16,4(r8)
10003aa0:	d8c12015 	stw	r3,1152(sp)
10003aa4:	d9011f15 	stw	r4,1148(sp)
10003aa8:	014001c4 	movi	r5,7
10003aac:	29020916 	blt	r5,r4,100042d4 <___vfprintf_internal_r+0x1d50>
10003ab0:	42000204 	addi	r8,r8,8
10003ab4:	80020116 	blt	r16,zero,100042bc <___vfprintf_internal_r+0x1d38>
10003ab8:	1421c83a 	sub	r16,r2,r16
10003abc:	043cc40e 	bge	zero,r16,10002dd0 <__alt_data_end+0xf8002dd0>
10003ac0:	04400404 	movi	r17,16
10003ac4:	d8811f17 	ldw	r2,1148(sp)
10003ac8:	8c3f110e 	bge	r17,r16,10003710 <__alt_data_end+0xf8003710>
10003acc:	01440074 	movhi	r5,4097
10003ad0:	29478a84 	addi	r5,r5,7722
10003ad4:	d9412c15 	stw	r5,1200(sp)
10003ad8:	04c001c4 	movi	r19,7
10003adc:	00000306 	br	10003aec <___vfprintf_internal_r+0x1568>
10003ae0:	42000204 	addi	r8,r8,8
10003ae4:	843ffc04 	addi	r16,r16,-16
10003ae8:	8c3f0c0e 	bge	r17,r16,1000371c <__alt_data_end+0xf800371c>
10003aec:	18c00404 	addi	r3,r3,16
10003af0:	10800044 	addi	r2,r2,1
10003af4:	45000015 	stw	r20,0(r8)
10003af8:	44400115 	stw	r17,4(r8)
10003afc:	d8c12015 	stw	r3,1152(sp)
10003b00:	d8811f15 	stw	r2,1148(sp)
10003b04:	98bff60e 	bge	r19,r2,10003ae0 <__alt_data_end+0xf8003ae0>
10003b08:	b809883a 	mov	r4,r23
10003b0c:	b00b883a 	mov	r5,r22
10003b10:	d9811e04 	addi	r6,sp,1144
10003b14:	00099c40 	call	100099c4 <__sprint_r>
10003b18:	103bb21e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10003b1c:	d8c12017 	ldw	r3,1152(sp)
10003b20:	d8811f17 	ldw	r2,1148(sp)
10003b24:	da000404 	addi	r8,sp,16
10003b28:	003fee06 	br	10003ae4 <__alt_data_end+0xf8003ae4>
10003b2c:	e088703a 	and	r4,fp,r2
10003b30:	203ec01e 	bne	r4,zero,10003634 <__alt_data_end+0xf8003634>
10003b34:	dc011f17 	ldw	r16,1148(sp)
10003b38:	d9013117 	ldw	r4,1220(sp)
10003b3c:	40800115 	stw	r2,4(r8)
10003b40:	84000044 	addi	r16,r16,1
10003b44:	41000015 	stw	r4,0(r8)
10003b48:	d8c12015 	stw	r3,1152(sp)
10003b4c:	dc011f15 	stw	r16,1148(sp)
10003b50:	008001c4 	movi	r2,7
10003b54:	14000e16 	blt	r2,r16,10003b90 <___vfprintf_internal_r+0x160c>
10003b58:	44400204 	addi	r17,r8,8
10003b5c:	003ee006 	br	100036e0 <__alt_data_end+0xf80036e0>
10003b60:	01040074 	movhi	r4,4097
10003b64:	21078a84 	addi	r4,r4,7722
10003b68:	d9012c15 	stw	r4,1200(sp)
10003b6c:	d8812c17 	ldw	r2,1200(sp)
10003b70:	1cc7883a 	add	r3,r3,r19
10003b74:	84000044 	addi	r16,r16,1
10003b78:	88800015 	stw	r2,0(r17)
10003b7c:	8cc00115 	stw	r19,4(r17)
10003b80:	d8c12015 	stw	r3,1152(sp)
10003b84:	dc011f15 	stw	r16,1148(sp)
10003b88:	008001c4 	movi	r2,7
10003b8c:	143ed30e 	bge	r2,r16,100036dc <__alt_data_end+0xf80036dc>
10003b90:	b809883a 	mov	r4,r23
10003b94:	b00b883a 	mov	r5,r22
10003b98:	d9811e04 	addi	r6,sp,1144
10003b9c:	00099c40 	call	100099c4 <__sprint_r>
10003ba0:	103b901e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10003ba4:	d8c12017 	ldw	r3,1152(sp)
10003ba8:	dc011f17 	ldw	r16,1148(sp)
10003bac:	dc400404 	addi	r17,sp,16
10003bb0:	003ecb06 	br	100036e0 <__alt_data_end+0xf80036e0>
10003bb4:	b809883a 	mov	r4,r23
10003bb8:	b00b883a 	mov	r5,r22
10003bbc:	d9811e04 	addi	r6,sp,1144
10003bc0:	00099c40 	call	100099c4 <__sprint_r>
10003bc4:	103b871e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10003bc8:	d8c12017 	ldw	r3,1152(sp)
10003bcc:	dc011f17 	ldw	r16,1148(sp)
10003bd0:	da000404 	addi	r8,sp,16
10003bd4:	003ea206 	br	10003660 <__alt_data_end+0xf8003660>
10003bd8:	b809883a 	mov	r4,r23
10003bdc:	b00b883a 	mov	r5,r22
10003be0:	d9811e04 	addi	r6,sp,1144
10003be4:	00099c40 	call	100099c4 <__sprint_r>
10003be8:	103b7e1e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10003bec:	d8c12017 	ldw	r3,1152(sp)
10003bf0:	dc011f17 	ldw	r16,1148(sp)
10003bf4:	dc400404 	addi	r17,sp,16
10003bf8:	003ea406 	br	1000368c <__alt_data_end+0xf800368c>
10003bfc:	b809883a 	mov	r4,r23
10003c00:	b00b883a 	mov	r5,r22
10003c04:	d9811e04 	addi	r6,sp,1144
10003c08:	00099c40 	call	100099c4 <__sprint_r>
10003c0c:	103b751e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10003c10:	d8c12017 	ldw	r3,1152(sp)
10003c14:	da000404 	addi	r8,sp,16
10003c18:	003c3706 	br	10002cf8 <__alt_data_end+0xf8002cf8>
10003c1c:	04a5c83a 	sub	r18,zero,r18
10003c20:	9004c03a 	cmpne	r2,r18,zero
10003c24:	056bc83a 	sub	r21,zero,r21
10003c28:	a8abc83a 	sub	r21,r21,r2
10003c2c:	04c00b44 	movi	r19,45
10003c30:	dcc12785 	stb	r19,1182(sp)
10003c34:	da413215 	stw	r9,1224(sp)
10003c38:	00800044 	movi	r2,1
10003c3c:	9546b03a 	or	r3,r18,r21
10003c40:	003bb106 	br	10002b08 <__alt_data_end+0xf8002b08>
10003c44:	da013f15 	stw	r8,1276(sp)
10003c48:	da413e15 	stw	r9,1272(sp)
10003c4c:	00096200 	call	10009620 <__fpclassifyd>
10003c50:	da013f17 	ldw	r8,1276(sp)
10003c54:	da413e17 	ldw	r9,1272(sp)
10003c58:	1000e526 	beq	r2,zero,10003ff0 <___vfprintf_internal_r+0x1a6c>
10003c5c:	04fff7c4 	movi	r19,-33
10003c60:	00bfffc4 	movi	r2,-1
10003c64:	84e6703a 	and	r19,r16,r19
10003c68:	48822926 	beq	r9,r2,10004510 <___vfprintf_internal_r+0x1f8c>
10003c6c:	008011c4 	movi	r2,71
10003c70:	98821626 	beq	r19,r2,100044cc <___vfprintf_internal_r+0x1f48>
10003c74:	d9013917 	ldw	r4,1252(sp)
10003c78:	e0c04014 	ori	r3,fp,256
10003c7c:	d8c12d15 	stw	r3,1204(sp)
10003c80:	20021f16 	blt	r4,zero,10004500 <___vfprintf_internal_r+0x1f7c>
10003c84:	dc413917 	ldw	r17,1252(sp)
10003c88:	d8012b05 	stb	zero,1196(sp)
10003c8c:	00801984 	movi	r2,102
10003c90:	80814d26 	beq	r16,r2,100041c8 <___vfprintf_internal_r+0x1c44>
10003c94:	00801184 	movi	r2,70
10003c98:	80814b26 	beq	r16,r2,100041c8 <___vfprintf_internal_r+0x1c44>
10003c9c:	00801144 	movi	r2,69
10003ca0:	98821d26 	beq	r19,r2,10004518 <___vfprintf_internal_r+0x1f94>
10003ca4:	482b883a 	mov	r21,r9
10003ca8:	d8812604 	addi	r2,sp,1176
10003cac:	d8800115 	stw	r2,4(sp)
10003cb0:	d9413717 	ldw	r5,1244(sp)
10003cb4:	d8812504 	addi	r2,sp,1172
10003cb8:	d8800215 	stw	r2,8(sp)
10003cbc:	d8812104 	addi	r2,sp,1156
10003cc0:	dd400015 	stw	r21,0(sp)
10003cc4:	d8800315 	stw	r2,12(sp)
10003cc8:	b809883a 	mov	r4,r23
10003ccc:	880d883a 	mov	r6,r17
10003cd0:	01c00084 	movi	r7,2
10003cd4:	da013f15 	stw	r8,1276(sp)
10003cd8:	da413e15 	stw	r9,1272(sp)
10003cdc:	00049fc0 	call	100049fc <_dtoa_r>
10003ce0:	d8813115 	stw	r2,1220(sp)
10003ce4:	008019c4 	movi	r2,103
10003ce8:	da013f17 	ldw	r8,1276(sp)
10003cec:	da413e17 	ldw	r9,1272(sp)
10003cf0:	80800226 	beq	r16,r2,10003cfc <___vfprintf_internal_r+0x1778>
10003cf4:	008011c4 	movi	r2,71
10003cf8:	8081451e 	bne	r16,r2,10004210 <___vfprintf_internal_r+0x1c8c>
10003cfc:	e080004c 	andi	r2,fp,1
10003d00:	10021e26 	beq	r2,zero,1000457c <___vfprintf_internal_r+0x1ff8>
10003d04:	d8c13117 	ldw	r3,1220(sp)
10003d08:	1d55883a 	add	r10,r3,r21
10003d0c:	d9013717 	ldw	r4,1244(sp)
10003d10:	880b883a 	mov	r5,r17
10003d14:	000d883a 	mov	r6,zero
10003d18:	000f883a 	mov	r7,zero
10003d1c:	da013f15 	stw	r8,1276(sp)
10003d20:	da413e15 	stw	r9,1272(sp)
10003d24:	da813d15 	stw	r10,1268(sp)
10003d28:	000d8480 	call	1000d848 <__eqdf2>
10003d2c:	da013f17 	ldw	r8,1276(sp)
10003d30:	da413e17 	ldw	r9,1272(sp)
10003d34:	da813d17 	ldw	r10,1268(sp)
10003d38:	1001a126 	beq	r2,zero,100043c0 <___vfprintf_internal_r+0x1e3c>
10003d3c:	d8812117 	ldw	r2,1156(sp)
10003d40:	1280062e 	bgeu	r2,r10,10003d5c <___vfprintf_internal_r+0x17d8>
10003d44:	01000c04 	movi	r4,48
10003d48:	10c00044 	addi	r3,r2,1
10003d4c:	d8c12115 	stw	r3,1156(sp)
10003d50:	11000005 	stb	r4,0(r2)
10003d54:	d8812117 	ldw	r2,1156(sp)
10003d58:	12bffb36 	bltu	r2,r10,10003d48 <__alt_data_end+0xf8003d48>
10003d5c:	d8c13117 	ldw	r3,1220(sp)
10003d60:	10c5c83a 	sub	r2,r2,r3
10003d64:	d8813315 	stw	r2,1228(sp)
10003d68:	008011c4 	movi	r2,71
10003d6c:	98818926 	beq	r19,r2,10004394 <___vfprintf_internal_r+0x1e10>
10003d70:	00801944 	movi	r2,101
10003d74:	14023c0e 	bge	r2,r16,10004668 <___vfprintf_internal_r+0x20e4>
10003d78:	d8c12617 	ldw	r3,1176(sp)
10003d7c:	00801984 	movi	r2,102
10003d80:	d8c13415 	stw	r3,1232(sp)
10003d84:	8081ef26 	beq	r16,r2,10004544 <___vfprintf_internal_r+0x1fc0>
10003d88:	d8c13417 	ldw	r3,1232(sp)
10003d8c:	d9013317 	ldw	r4,1228(sp)
10003d90:	1901e316 	blt	r3,r4,10004520 <___vfprintf_internal_r+0x1f9c>
10003d94:	e080004c 	andi	r2,fp,1
10003d98:	1001f426 	beq	r2,zero,1000456c <___vfprintf_internal_r+0x1fe8>
10003d9c:	d8c13417 	ldw	r3,1232(sp)
10003da0:	1c400044 	addi	r17,r3,1
10003da4:	8839883a 	mov	fp,r17
10003da8:	8801e416 	blt	r17,zero,1000453c <___vfprintf_internal_r+0x1fb8>
10003dac:	dd412b07 	ldb	r21,1196(sp)
10003db0:	a801701e 	bne	r21,zero,10004374 <___vfprintf_internal_r+0x1df0>
10003db4:	df012b15 	stw	fp,1196(sp)
10003db8:	dcc12783 	ldbu	r19,1182(sp)
10003dbc:	df012d17 	ldw	fp,1204(sp)
10003dc0:	d8013215 	stw	zero,1224(sp)
10003dc4:	dc812d15 	stw	r18,1204(sp)
10003dc8:	003b6e06 	br	10002b84 <__alt_data_end+0xf8002b84>
10003dcc:	e080040c 	andi	r2,fp,16
10003dd0:	1000b51e 	bne	r2,zero,100040a8 <___vfprintf_internal_r+0x1b24>
10003dd4:	e080100c 	andi	r2,fp,64
10003dd8:	10015b26 	beq	r2,zero,10004348 <___vfprintf_internal_r+0x1dc4>
10003ddc:	d9012d17 	ldw	r4,1204(sp)
10003de0:	d9412f17 	ldw	r5,1212(sp)
10003de4:	20800017 	ldw	r2,0(r4)
10003de8:	21000104 	addi	r4,r4,4
10003dec:	d9012d15 	stw	r4,1204(sp)
10003df0:	1140000d 	sth	r5,0(r2)
10003df4:	003a2006 	br	10002678 <__alt_data_end+0xf8002678>
10003df8:	e0c0100c 	andi	r3,fp,64
10003dfc:	1800a226 	beq	r3,zero,10004088 <___vfprintf_internal_r+0x1b04>
10003e00:	d8c12d17 	ldw	r3,1204(sp)
10003e04:	1480000b 	ldhu	r18,0(r2)
10003e08:	002b883a 	mov	r21,zero
10003e0c:	18c00104 	addi	r3,r3,4
10003e10:	d8c12d15 	stw	r3,1204(sp)
10003e14:	0005883a 	mov	r2,zero
10003e18:	9007883a 	mov	r3,r18
10003e1c:	003c6906 	br	10002fc4 <__alt_data_end+0xf8002fc4>
10003e20:	e0c0100c 	andi	r3,fp,64
10003e24:	18009026 	beq	r3,zero,10004068 <___vfprintf_internal_r+0x1ae4>
10003e28:	1480000b 	ldhu	r18,0(r2)
10003e2c:	d8812d17 	ldw	r2,1204(sp)
10003e30:	002b883a 	mov	r21,zero
10003e34:	9007883a 	mov	r3,r18
10003e38:	10800104 	addi	r2,r2,4
10003e3c:	d8812d15 	stw	r2,1204(sp)
10003e40:	00800044 	movi	r2,1
10003e44:	003c5f06 	br	10002fc4 <__alt_data_end+0xf8002fc4>
10003e48:	e0c0100c 	andi	r3,fp,64
10003e4c:	18008026 	beq	r3,zero,10004050 <___vfprintf_internal_r+0x1acc>
10003e50:	d9012d17 	ldw	r4,1204(sp)
10003e54:	1480000b 	ldhu	r18,0(r2)
10003e58:	002b883a 	mov	r21,zero
10003e5c:	21000104 	addi	r4,r4,4
10003e60:	d9012d15 	stw	r4,1204(sp)
10003e64:	003c7906 	br	1000304c <__alt_data_end+0xf800304c>
10003e68:	e080100c 	andi	r2,fp,64
10003e6c:	10007126 	beq	r2,zero,10004034 <___vfprintf_internal_r+0x1ab0>
10003e70:	1c80000f 	ldh	r18,0(r3)
10003e74:	d8812d17 	ldw	r2,1204(sp)
10003e78:	902bd7fa 	srai	r21,r18,31
10003e7c:	10800104 	addi	r2,r2,4
10003e80:	d8812d15 	stw	r2,1204(sp)
10003e84:	a805883a 	mov	r2,r21
10003e88:	003b1a06 	br	10002af4 <__alt_data_end+0xf8002af4>
10003e8c:	e4000007 	ldb	r16,0(fp)
10003e90:	e005883a 	mov	r2,fp
10003e94:	003a2306 	br	10002724 <__alt_data_end+0xf8002724>
10003e98:	00800084 	movi	r2,2
10003e9c:	003c4906 	br	10002fc4 <__alt_data_end+0xf8002fc4>
10003ea0:	01040074 	movhi	r4,4097
10003ea4:	21078a84 	addi	r4,r4,7722
10003ea8:	d9012c15 	stw	r4,1200(sp)
10003eac:	d9012c17 	ldw	r4,1200(sp)
10003eb0:	1c47883a 	add	r3,r3,r17
10003eb4:	10800044 	addi	r2,r2,1
10003eb8:	41000015 	stw	r4,0(r8)
10003ebc:	44400115 	stw	r17,4(r8)
10003ec0:	d8c12015 	stw	r3,1152(sp)
10003ec4:	d8811f15 	stw	r2,1148(sp)
10003ec8:	010001c4 	movi	r4,7
10003ecc:	20becc16 	blt	r4,r2,10003a00 <__alt_data_end+0xf8003a00>
10003ed0:	42000204 	addi	r8,r8,8
10003ed4:	003ed106 	br	10003a1c <__alt_data_end+0xf8003a1c>
10003ed8:	01040074 	movhi	r4,4097
10003edc:	21078a84 	addi	r4,r4,7722
10003ee0:	d9012c15 	stw	r4,1200(sp)
10003ee4:	003ba306 	br	10002d74 <__alt_data_end+0xf8002d74>
10003ee8:	b809883a 	mov	r4,r23
10003eec:	b00b883a 	mov	r5,r22
10003ef0:	d9811e04 	addi	r6,sp,1144
10003ef4:	00099c40 	call	100099c4 <__sprint_r>
10003ef8:	103aba1e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10003efc:	d8c12017 	ldw	r3,1152(sp)
10003f00:	da000404 	addi	r8,sp,16
10003f04:	003d6c06 	br	100034b8 <__alt_data_end+0xf80034b8>
10003f08:	d8811f17 	ldw	r2,1148(sp)
10003f0c:	01440074 	movhi	r5,4097
10003f10:	01000044 	movi	r4,1
10003f14:	18c00044 	addi	r3,r3,1
10003f18:	10800044 	addi	r2,r2,1
10003f1c:	29478a04 	addi	r5,r5,7720
10003f20:	41000115 	stw	r4,4(r8)
10003f24:	41400015 	stw	r5,0(r8)
10003f28:	d8c12015 	stw	r3,1152(sp)
10003f2c:	d8811f15 	stw	r2,1148(sp)
10003f30:	010001c4 	movi	r4,7
10003f34:	20806716 	blt	r4,r2,100040d4 <___vfprintf_internal_r+0x1b50>
10003f38:	42000204 	addi	r8,r8,8
10003f3c:	8000041e 	bne	r16,zero,10003f50 <___vfprintf_internal_r+0x19cc>
10003f40:	d8813317 	ldw	r2,1228(sp)
10003f44:	1000021e 	bne	r2,zero,10003f50 <___vfprintf_internal_r+0x19cc>
10003f48:	e080004c 	andi	r2,fp,1
10003f4c:	103ba026 	beq	r2,zero,10002dd0 <__alt_data_end+0xf8002dd0>
10003f50:	d9013817 	ldw	r4,1248(sp)
10003f54:	d8811f17 	ldw	r2,1148(sp)
10003f58:	d9413517 	ldw	r5,1236(sp)
10003f5c:	1907883a 	add	r3,r3,r4
10003f60:	10800044 	addi	r2,r2,1
10003f64:	41000115 	stw	r4,4(r8)
10003f68:	41400015 	stw	r5,0(r8)
10003f6c:	d8c12015 	stw	r3,1152(sp)
10003f70:	d8811f15 	stw	r2,1148(sp)
10003f74:	010001c4 	movi	r4,7
10003f78:	20815716 	blt	r4,r2,100044d8 <___vfprintf_internal_r+0x1f54>
10003f7c:	42000204 	addi	r8,r8,8
10003f80:	0421c83a 	sub	r16,zero,r16
10003f84:	0400810e 	bge	zero,r16,1000418c <___vfprintf_internal_r+0x1c08>
10003f88:	04400404 	movi	r17,16
10003f8c:	8c00bd0e 	bge	r17,r16,10004284 <___vfprintf_internal_r+0x1d00>
10003f90:	01440074 	movhi	r5,4097
10003f94:	29478a84 	addi	r5,r5,7722
10003f98:	d9412c15 	stw	r5,1200(sp)
10003f9c:	04c001c4 	movi	r19,7
10003fa0:	00000306 	br	10003fb0 <___vfprintf_internal_r+0x1a2c>
10003fa4:	42000204 	addi	r8,r8,8
10003fa8:	843ffc04 	addi	r16,r16,-16
10003fac:	8c00b80e 	bge	r17,r16,10004290 <___vfprintf_internal_r+0x1d0c>
10003fb0:	18c00404 	addi	r3,r3,16
10003fb4:	10800044 	addi	r2,r2,1
10003fb8:	45000015 	stw	r20,0(r8)
10003fbc:	44400115 	stw	r17,4(r8)
10003fc0:	d8c12015 	stw	r3,1152(sp)
10003fc4:	d8811f15 	stw	r2,1148(sp)
10003fc8:	98bff60e 	bge	r19,r2,10003fa4 <__alt_data_end+0xf8003fa4>
10003fcc:	b809883a 	mov	r4,r23
10003fd0:	b00b883a 	mov	r5,r22
10003fd4:	d9811e04 	addi	r6,sp,1144
10003fd8:	00099c40 	call	100099c4 <__sprint_r>
10003fdc:	103a811e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10003fe0:	d8c12017 	ldw	r3,1152(sp)
10003fe4:	d8811f17 	ldw	r2,1148(sp)
10003fe8:	da000404 	addi	r8,sp,16
10003fec:	003fee06 	br	10003fa8 <__alt_data_end+0xf8003fa8>
10003ff0:	008011c4 	movi	r2,71
10003ff4:	1400db16 	blt	r2,r16,10004364 <___vfprintf_internal_r+0x1de0>
10003ff8:	01040074 	movhi	r4,4097
10003ffc:	21077c04 	addi	r4,r4,7664
10004000:	d9013115 	stw	r4,1220(sp)
10004004:	00c000c4 	movi	r3,3
10004008:	00bfdfc4 	movi	r2,-129
1000400c:	d8c12b15 	stw	r3,1196(sp)
10004010:	e0b8703a 	and	fp,fp,r2
10004014:	dcc12783 	ldbu	r19,1182(sp)
10004018:	dc812d15 	stw	r18,1204(sp)
1000401c:	1823883a 	mov	r17,r3
10004020:	d8013215 	stw	zero,1224(sp)
10004024:	d8013415 	stw	zero,1232(sp)
10004028:	003ad606 	br	10002b84 <__alt_data_end+0xf8002b84>
1000402c:	4823883a 	mov	r17,r9
10004030:	003cc906 	br	10003358 <__alt_data_end+0xf8003358>
10004034:	1c800017 	ldw	r18,0(r3)
10004038:	d8c12d17 	ldw	r3,1204(sp)
1000403c:	902bd7fa 	srai	r21,r18,31
10004040:	18c00104 	addi	r3,r3,4
10004044:	d8c12d15 	stw	r3,1204(sp)
10004048:	a805883a 	mov	r2,r21
1000404c:	003aa906 	br	10002af4 <__alt_data_end+0xf8002af4>
10004050:	d9412d17 	ldw	r5,1204(sp)
10004054:	14800017 	ldw	r18,0(r2)
10004058:	002b883a 	mov	r21,zero
1000405c:	29400104 	addi	r5,r5,4
10004060:	d9412d15 	stw	r5,1204(sp)
10004064:	003bf906 	br	1000304c <__alt_data_end+0xf800304c>
10004068:	d8c12d17 	ldw	r3,1204(sp)
1000406c:	14800017 	ldw	r18,0(r2)
10004070:	002b883a 	mov	r21,zero
10004074:	18c00104 	addi	r3,r3,4
10004078:	d8c12d15 	stw	r3,1204(sp)
1000407c:	00800044 	movi	r2,1
10004080:	9007883a 	mov	r3,r18
10004084:	003bcf06 	br	10002fc4 <__alt_data_end+0xf8002fc4>
10004088:	d9012d17 	ldw	r4,1204(sp)
1000408c:	14800017 	ldw	r18,0(r2)
10004090:	002b883a 	mov	r21,zero
10004094:	21000104 	addi	r4,r4,4
10004098:	d9012d15 	stw	r4,1204(sp)
1000409c:	0005883a 	mov	r2,zero
100040a0:	9007883a 	mov	r3,r18
100040a4:	003bc706 	br	10002fc4 <__alt_data_end+0xf8002fc4>
100040a8:	d9412d17 	ldw	r5,1204(sp)
100040ac:	d8c12f17 	ldw	r3,1212(sp)
100040b0:	28800017 	ldw	r2,0(r5)
100040b4:	29400104 	addi	r5,r5,4
100040b8:	d9412d15 	stw	r5,1204(sp)
100040bc:	10c00015 	stw	r3,0(r2)
100040c0:	00396d06 	br	10002678 <__alt_data_end+0xf8002678>
100040c4:	01040074 	movhi	r4,4097
100040c8:	21077a04 	addi	r4,r4,7656
100040cc:	d9013115 	stw	r4,1220(sp)
100040d0:	003ba206 	br	10002f5c <__alt_data_end+0xf8002f5c>
100040d4:	b809883a 	mov	r4,r23
100040d8:	b00b883a 	mov	r5,r22
100040dc:	d9811e04 	addi	r6,sp,1144
100040e0:	00099c40 	call	100099c4 <__sprint_r>
100040e4:	103a3f1e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
100040e8:	dc012617 	ldw	r16,1176(sp)
100040ec:	d8c12017 	ldw	r3,1152(sp)
100040f0:	da000404 	addi	r8,sp,16
100040f4:	003f9106 	br	10003f3c <__alt_data_end+0xf8003f3c>
100040f8:	e0800044 	addi	r2,fp,1
100040fc:	9cc00814 	ori	r19,r19,32
10004100:	e4000047 	ldb	r16,1(fp)
10004104:	00398706 	br	10002724 <__alt_data_end+0xf8002724>
10004108:	d8812e17 	ldw	r2,1208(sp)
1000410c:	d8c12d15 	stw	r3,1204(sp)
10004110:	0085c83a 	sub	r2,zero,r2
10004114:	d8812e15 	stw	r2,1208(sp)
10004118:	e005883a 	mov	r2,fp
1000411c:	003a3a06 	br	10002a08 <__alt_data_end+0xf8002a08>
10004120:	b809883a 	mov	r4,r23
10004124:	b00b883a 	mov	r5,r22
10004128:	d9811e04 	addi	r6,sp,1144
1000412c:	00099c40 	call	100099c4 <__sprint_r>
10004130:	103a2c1e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10004134:	d8c12017 	ldw	r3,1152(sp)
10004138:	da000404 	addi	r8,sp,16
1000413c:	003cf006 	br	10003500 <__alt_data_end+0xf8003500>
10004140:	d8c12817 	ldw	r3,1184(sp)
10004144:	d9013117 	ldw	r4,1220(sp)
10004148:	1923c83a 	sub	r17,r3,r4
1000414c:	003a8806 	br	10002b70 <__alt_data_end+0xf8002b70>
10004150:	da013f15 	stw	r8,1276(sp)
10004154:	00024ec0 	call	100024ec <strlen>
10004158:	1023883a 	mov	r17,r2
1000415c:	da013f17 	ldw	r8,1276(sp)
10004160:	883c7f0e 	bge	r17,zero,10003360 <__alt_data_end+0xf8003360>
10004164:	0005883a 	mov	r2,zero
10004168:	003c7d06 	br	10003360 <__alt_data_end+0xf8003360>
1000416c:	b809883a 	mov	r4,r23
10004170:	b00b883a 	mov	r5,r22
10004174:	d9811e04 	addi	r6,sp,1144
10004178:	00099c40 	call	100099c4 <__sprint_r>
1000417c:	103a191e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10004180:	d8c12017 	ldw	r3,1152(sp)
10004184:	d8811f17 	ldw	r2,1148(sp)
10004188:	da000404 	addi	r8,sp,16
1000418c:	d9413317 	ldw	r5,1228(sp)
10004190:	d9013117 	ldw	r4,1220(sp)
10004194:	10800044 	addi	r2,r2,1
10004198:	28c7883a 	add	r3,r5,r3
1000419c:	41000015 	stw	r4,0(r8)
100041a0:	41400115 	stw	r5,4(r8)
100041a4:	d8c12015 	stw	r3,1152(sp)
100041a8:	d8811f15 	stw	r2,1148(sp)
100041ac:	010001c4 	movi	r4,7
100041b0:	20bb060e 	bge	r4,r2,10002dcc <__alt_data_end+0xf8002dcc>
100041b4:	003d6206 	br	10003740 <__alt_data_end+0xf8003740>
100041b8:	01040074 	movhi	r4,4097
100041bc:	21078e84 	addi	r4,r4,7738
100041c0:	d9013615 	stw	r4,1240(sp)
100041c4:	003aa306 	br	10002c54 <__alt_data_end+0xf8002c54>
100041c8:	d8812604 	addi	r2,sp,1176
100041cc:	d8800115 	stw	r2,4(sp)
100041d0:	d9413717 	ldw	r5,1244(sp)
100041d4:	d8812504 	addi	r2,sp,1172
100041d8:	d8800215 	stw	r2,8(sp)
100041dc:	d8812104 	addi	r2,sp,1156
100041e0:	da400015 	stw	r9,0(sp)
100041e4:	d8800315 	stw	r2,12(sp)
100041e8:	b809883a 	mov	r4,r23
100041ec:	880d883a 	mov	r6,r17
100041f0:	01c000c4 	movi	r7,3
100041f4:	da013f15 	stw	r8,1276(sp)
100041f8:	da413e15 	stw	r9,1272(sp)
100041fc:	00049fc0 	call	100049fc <_dtoa_r>
10004200:	da413e17 	ldw	r9,1272(sp)
10004204:	da013f17 	ldw	r8,1276(sp)
10004208:	d8813115 	stw	r2,1220(sp)
1000420c:	482b883a 	mov	r21,r9
10004210:	d8c13117 	ldw	r3,1220(sp)
10004214:	00801184 	movi	r2,70
10004218:	1d55883a 	add	r10,r3,r21
1000421c:	98bebb1e 	bne	r19,r2,10003d0c <__alt_data_end+0xf8003d0c>
10004220:	19000007 	ldb	r4,0(r3)
10004224:	00800c04 	movi	r2,48
10004228:	2080dd26 	beq	r4,r2,100045a0 <___vfprintf_internal_r+0x201c>
1000422c:	d8c12617 	ldw	r3,1176(sp)
10004230:	50d5883a 	add	r10,r10,r3
10004234:	003eb506 	br	10003d0c <__alt_data_end+0xf8003d0c>
10004238:	0023883a 	mov	r17,zero
1000423c:	003d9b06 	br	100038ac <__alt_data_end+0xf80038ac>
10004240:	b809883a 	mov	r4,r23
10004244:	b00b883a 	mov	r5,r22
10004248:	d9811e04 	addi	r6,sp,1144
1000424c:	00099c40 	call	100099c4 <__sprint_r>
10004250:	1039e41e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10004254:	d8c12017 	ldw	r3,1152(sp)
10004258:	da000404 	addi	r8,sp,16
1000425c:	003d9206 	br	100038a8 <__alt_data_end+0xf80038a8>
10004260:	b809883a 	mov	r4,r23
10004264:	b00b883a 	mov	r5,r22
10004268:	d9811e04 	addi	r6,sp,1144
1000426c:	00099c40 	call	100099c4 <__sprint_r>
10004270:	1039dc1e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
10004274:	d8812617 	ldw	r2,1176(sp)
10004278:	d8c12017 	ldw	r3,1152(sp)
1000427c:	da000404 	addi	r8,sp,16
10004280:	003dfb06 	br	10003a70 <__alt_data_end+0xf8003a70>
10004284:	01040074 	movhi	r4,4097
10004288:	21078a84 	addi	r4,r4,7722
1000428c:	d9012c15 	stw	r4,1200(sp)
10004290:	d9012c17 	ldw	r4,1200(sp)
10004294:	1c07883a 	add	r3,r3,r16
10004298:	10800044 	addi	r2,r2,1
1000429c:	41000015 	stw	r4,0(r8)
100042a0:	44000115 	stw	r16,4(r8)
100042a4:	d8c12015 	stw	r3,1152(sp)
100042a8:	d8811f15 	stw	r2,1148(sp)
100042ac:	010001c4 	movi	r4,7
100042b0:	20bfae16 	blt	r4,r2,1000416c <__alt_data_end+0xf800416c>
100042b4:	42000204 	addi	r8,r8,8
100042b8:	003fb406 	br	1000418c <__alt_data_end+0xf800418c>
100042bc:	0021883a 	mov	r16,zero
100042c0:	003dfd06 	br	10003ab8 <__alt_data_end+0xf8003ab8>
100042c4:	01440074 	movhi	r5,4097
100042c8:	29478e84 	addi	r5,r5,7738
100042cc:	d9413615 	stw	r5,1240(sp)
100042d0:	003ae306 	br	10002e60 <__alt_data_end+0xf8002e60>
100042d4:	b809883a 	mov	r4,r23
100042d8:	b00b883a 	mov	r5,r22
100042dc:	d9811e04 	addi	r6,sp,1144
100042e0:	00099c40 	call	100099c4 <__sprint_r>
100042e4:	1039bf1e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
100042e8:	d8812617 	ldw	r2,1176(sp)
100042ec:	d9413317 	ldw	r5,1228(sp)
100042f0:	d8c12017 	ldw	r3,1152(sp)
100042f4:	da000404 	addi	r8,sp,16
100042f8:	2885c83a 	sub	r2,r5,r2
100042fc:	003ded06 	br	10003ab4 <__alt_data_end+0xf8003ab4>
10004300:	00800184 	movi	r2,6
10004304:	1240012e 	bgeu	r2,r9,1000430c <___vfprintf_internal_r+0x1d88>
10004308:	1013883a 	mov	r9,r2
1000430c:	4823883a 	mov	r17,r9
10004310:	4805883a 	mov	r2,r9
10004314:	4800b216 	blt	r9,zero,100045e0 <___vfprintf_internal_r+0x205c>
10004318:	01440074 	movhi	r5,4097
1000431c:	29478804 	addi	r5,r5,7712
10004320:	d8812b15 	stw	r2,1196(sp)
10004324:	dc812d15 	stw	r18,1204(sp)
10004328:	d8013215 	stw	zero,1224(sp)
1000432c:	d8013415 	stw	zero,1232(sp)
10004330:	d9413115 	stw	r5,1220(sp)
10004334:	0005883a 	mov	r2,zero
10004338:	003a1906 	br	10002ba0 <__alt_data_end+0xf8002ba0>
1000433c:	04c00b44 	movi	r19,45
10004340:	dcc12785 	stb	r19,1182(sp)
10004344:	003b0006 	br	10002f48 <__alt_data_end+0xf8002f48>
10004348:	d8c12d17 	ldw	r3,1204(sp)
1000434c:	d9012f17 	ldw	r4,1212(sp)
10004350:	18800017 	ldw	r2,0(r3)
10004354:	18c00104 	addi	r3,r3,4
10004358:	d8c12d15 	stw	r3,1204(sp)
1000435c:	11000015 	stw	r4,0(r2)
10004360:	0038c506 	br	10002678 <__alt_data_end+0xf8002678>
10004364:	01440074 	movhi	r5,4097
10004368:	29477d04 	addi	r5,r5,7668
1000436c:	d9413115 	stw	r5,1220(sp)
10004370:	003f2406 	br	10004004 <__alt_data_end+0xf8004004>
10004374:	00800b44 	movi	r2,45
10004378:	d8812785 	stb	r2,1182(sp)
1000437c:	df012b15 	stw	fp,1196(sp)
10004380:	d8013215 	stw	zero,1224(sp)
10004384:	df012d17 	ldw	fp,1204(sp)
10004388:	00800b44 	movi	r2,45
1000438c:	dc812d15 	stw	r18,1204(sp)
10004390:	003a0006 	br	10002b94 <__alt_data_end+0xf8002b94>
10004394:	d8c12617 	ldw	r3,1176(sp)
10004398:	00bfff44 	movi	r2,-3
1000439c:	18800a16 	blt	r3,r2,100043c8 <___vfprintf_internal_r+0x1e44>
100043a0:	48c00916 	blt	r9,r3,100043c8 <___vfprintf_internal_r+0x1e44>
100043a4:	d8c13415 	stw	r3,1232(sp)
100043a8:	040019c4 	movi	r16,103
100043ac:	003e7606 	br	10003d88 <__alt_data_end+0xf8003d88>
100043b0:	01040074 	movhi	r4,4097
100043b4:	21078a84 	addi	r4,r4,7722
100043b8:	d9012c15 	stw	r4,1200(sp)
100043bc:	003c8e06 	br	100035f8 <__alt_data_end+0xf80035f8>
100043c0:	5005883a 	mov	r2,r10
100043c4:	003e6506 	br	10003d5c <__alt_data_end+0xf8003d5c>
100043c8:	843fff84 	addi	r16,r16,-2
100043cc:	1d7fffc4 	addi	r21,r3,-1
100043d0:	dd412615 	stw	r21,1176(sp)
100043d4:	dc0122c5 	stb	r16,1163(sp)
100043d8:	a8009216 	blt	r21,zero,10004624 <___vfprintf_internal_r+0x20a0>
100043dc:	00800ac4 	movi	r2,43
100043e0:	d8812305 	stb	r2,1164(sp)
100043e4:	00800244 	movi	r2,9
100043e8:	1540660e 	bge	r2,r21,10004584 <___vfprintf_internal_r+0x2000>
100043ec:	dcc122c4 	addi	r19,sp,1163
100043f0:	dc012c15 	stw	r16,1200(sp)
100043f4:	4023883a 	mov	r17,r8
100043f8:	9821883a 	mov	r16,r19
100043fc:	a809883a 	mov	r4,r21
10004400:	01400284 	movi	r5,10
10004404:	000c5980 	call	1000c598 <__modsi3>
10004408:	10800c04 	addi	r2,r2,48
1000440c:	843fffc4 	addi	r16,r16,-1
10004410:	a809883a 	mov	r4,r21
10004414:	01400284 	movi	r5,10
10004418:	80800005 	stb	r2,0(r16)
1000441c:	000c5440 	call	1000c544 <__divsi3>
10004420:	01000244 	movi	r4,9
10004424:	102b883a 	mov	r21,r2
10004428:	20bff416 	blt	r4,r2,100043fc <__alt_data_end+0xf80043fc>
1000442c:	8811883a 	mov	r8,r17
10004430:	10800c04 	addi	r2,r2,48
10004434:	8023883a 	mov	r17,r16
10004438:	897fffc4 	addi	r5,r17,-1
1000443c:	88bfffc5 	stb	r2,-1(r17)
10004440:	dc012c17 	ldw	r16,1200(sp)
10004444:	2cc08a2e 	bgeu	r5,r19,10004670 <___vfprintf_internal_r+0x20ec>
10004448:	d9812384 	addi	r6,sp,1166
1000444c:	344dc83a 	sub	r6,r6,r17
10004450:	d9012344 	addi	r4,sp,1165
10004454:	998d883a 	add	r6,r19,r6
10004458:	00000106 	br	10004460 <___vfprintf_internal_r+0x1edc>
1000445c:	28800003 	ldbu	r2,0(r5)
10004460:	20800005 	stb	r2,0(r4)
10004464:	21000044 	addi	r4,r4,1
10004468:	29400044 	addi	r5,r5,1
1000446c:	21bffb1e 	bne	r4,r6,1000445c <__alt_data_end+0xf800445c>
10004470:	d8812304 	addi	r2,sp,1164
10004474:	1445c83a 	sub	r2,r2,r17
10004478:	d9412344 	addi	r5,sp,1165
1000447c:	2885883a 	add	r2,r5,r2
10004480:	14e7c83a 	sub	r19,r2,r19
10004484:	d8813317 	ldw	r2,1228(sp)
10004488:	d8c13317 	ldw	r3,1228(sp)
1000448c:	dcc13a15 	stw	r19,1256(sp)
10004490:	14e3883a 	add	r17,r2,r19
10004494:	00800044 	movi	r2,1
10004498:	10c0550e 	bge	r2,r3,100045f0 <___vfprintf_internal_r+0x206c>
1000449c:	8c400044 	addi	r17,r17,1
100044a0:	8839883a 	mov	fp,r17
100044a4:	88005016 	blt	r17,zero,100045e8 <___vfprintf_internal_r+0x2064>
100044a8:	d8013415 	stw	zero,1232(sp)
100044ac:	003e3f06 	br	10003dac <__alt_data_end+0xf8003dac>
100044b0:	da412b15 	stw	r9,1196(sp)
100044b4:	dcc12783 	ldbu	r19,1182(sp)
100044b8:	4823883a 	mov	r17,r9
100044bc:	dc812d15 	stw	r18,1204(sp)
100044c0:	d8013215 	stw	zero,1224(sp)
100044c4:	d8013415 	stw	zero,1232(sp)
100044c8:	0039ae06 	br	10002b84 <__alt_data_end+0xf8002b84>
100044cc:	483de91e 	bne	r9,zero,10003c74 <__alt_data_end+0xf8003c74>
100044d0:	8813883a 	mov	r9,r17
100044d4:	003de706 	br	10003c74 <__alt_data_end+0xf8003c74>
100044d8:	b809883a 	mov	r4,r23
100044dc:	b00b883a 	mov	r5,r22
100044e0:	d9811e04 	addi	r6,sp,1144
100044e4:	00099c40 	call	100099c4 <__sprint_r>
100044e8:	10393e1e 	bne	r2,zero,100029e4 <__alt_data_end+0xf80029e4>
100044ec:	dc012617 	ldw	r16,1176(sp)
100044f0:	d8c12017 	ldw	r3,1152(sp)
100044f4:	d8811f17 	ldw	r2,1148(sp)
100044f8:	da000404 	addi	r8,sp,16
100044fc:	003ea006 	br	10003f80 <__alt_data_end+0xf8003f80>
10004500:	00c00b44 	movi	r3,45
10004504:	2460003c 	xorhi	r17,r4,32768
10004508:	d8c12b05 	stb	r3,1196(sp)
1000450c:	003ddf06 	br	10003c8c <__alt_data_end+0xf8003c8c>
10004510:	02400184 	movi	r9,6
10004514:	003dd706 	br	10003c74 <__alt_data_end+0xf8003c74>
10004518:	4d400044 	addi	r21,r9,1
1000451c:	003de206 	br	10003ca8 <__alt_data_end+0xf8003ca8>
10004520:	d8c13417 	ldw	r3,1232(sp)
10004524:	00c0490e 	bge	zero,r3,1000464c <___vfprintf_internal_r+0x20c8>
10004528:	04400044 	movi	r17,1
1000452c:	d9013317 	ldw	r4,1228(sp)
10004530:	8923883a 	add	r17,r17,r4
10004534:	8839883a 	mov	fp,r17
10004538:	883e1c0e 	bge	r17,zero,10003dac <__alt_data_end+0xf8003dac>
1000453c:	0039883a 	mov	fp,zero
10004540:	003e1a06 	br	10003dac <__alt_data_end+0xf8003dac>
10004544:	00c03b0e 	bge	zero,r3,10004634 <___vfprintf_internal_r+0x20b0>
10004548:	4800021e 	bne	r9,zero,10004554 <___vfprintf_internal_r+0x1fd0>
1000454c:	e080004c 	andi	r2,fp,1
10004550:	10000626 	beq	r2,zero,1000456c <___vfprintf_internal_r+0x1fe8>
10004554:	d8c13417 	ldw	r3,1232(sp)
10004558:	4a400044 	addi	r9,r9,1
1000455c:	1a63883a 	add	r17,r3,r9
10004560:	8839883a 	mov	fp,r17
10004564:	883e110e 	bge	r17,zero,10003dac <__alt_data_end+0xf8003dac>
10004568:	003ff406 	br	1000453c <__alt_data_end+0xf800453c>
1000456c:	1839883a 	mov	fp,r3
10004570:	18004116 	blt	r3,zero,10004678 <___vfprintf_internal_r+0x20f4>
10004574:	dc413417 	ldw	r17,1232(sp)
10004578:	003e0c06 	br	10003dac <__alt_data_end+0xf8003dac>
1000457c:	d8812117 	ldw	r2,1156(sp)
10004580:	003df606 	br	10003d5c <__alt_data_end+0xf8003d5c>
10004584:	00800c04 	movi	r2,48
10004588:	a8c00c04 	addi	r3,r21,48
1000458c:	d8812345 	stb	r2,1165(sp)
10004590:	d8c12385 	stb	r3,1166(sp)
10004594:	d88123c4 	addi	r2,sp,1167
10004598:	dcc122c4 	addi	r19,sp,1163
1000459c:	003fb806 	br	10004480 <__alt_data_end+0xf8004480>
100045a0:	d9013717 	ldw	r4,1244(sp)
100045a4:	880b883a 	mov	r5,r17
100045a8:	000d883a 	mov	r6,zero
100045ac:	000f883a 	mov	r7,zero
100045b0:	da013f15 	stw	r8,1276(sp)
100045b4:	da413e15 	stw	r9,1272(sp)
100045b8:	da813d15 	stw	r10,1268(sp)
100045bc:	000d8480 	call	1000d848 <__eqdf2>
100045c0:	da013f17 	ldw	r8,1276(sp)
100045c4:	da413e17 	ldw	r9,1272(sp)
100045c8:	da813d17 	ldw	r10,1268(sp)
100045cc:	103f1726 	beq	r2,zero,1000422c <__alt_data_end+0xf800422c>
100045d0:	00800044 	movi	r2,1
100045d4:	1547c83a 	sub	r3,r2,r21
100045d8:	d8c12615 	stw	r3,1176(sp)
100045dc:	003f1406 	br	10004230 <__alt_data_end+0xf8004230>
100045e0:	0005883a 	mov	r2,zero
100045e4:	003f4c06 	br	10004318 <__alt_data_end+0xf8004318>
100045e8:	0039883a 	mov	fp,zero
100045ec:	003fae06 	br	100044a8 <__alt_data_end+0xf80044a8>
100045f0:	e084703a 	and	r2,fp,r2
100045f4:	103faa26 	beq	r2,zero,100044a0 <__alt_data_end+0xf80044a0>
100045f8:	003fa806 	br	1000449c <__alt_data_end+0xf800449c>
100045fc:	d9412d17 	ldw	r5,1204(sp)
10004600:	2a400017 	ldw	r9,0(r5)
10004604:	28c00104 	addi	r3,r5,4
10004608:	d8c12d15 	stw	r3,1204(sp)
1000460c:	483ebc0e 	bge	r9,zero,10004100 <__alt_data_end+0xf8004100>
10004610:	027fffc4 	movi	r9,-1
10004614:	e4000047 	ldb	r16,1(fp)
10004618:	00384206 	br	10002724 <__alt_data_end+0xf8002724>
1000461c:	043fffc4 	movi	r16,-1
10004620:	0038ce06 	br	1000295c <__alt_data_end+0xf800295c>
10004624:	00800b44 	movi	r2,45
10004628:	056bc83a 	sub	r21,zero,r21
1000462c:	d8812305 	stb	r2,1164(sp)
10004630:	003f6c06 	br	100043e4 <__alt_data_end+0xf80043e4>
10004634:	4800081e 	bne	r9,zero,10004658 <___vfprintf_internal_r+0x20d4>
10004638:	e080004c 	andi	r2,fp,1
1000463c:	1000061e 	bne	r2,zero,10004658 <___vfprintf_internal_r+0x20d4>
10004640:	07000044 	movi	fp,1
10004644:	e023883a 	mov	r17,fp
10004648:	003dd806 	br	10003dac <__alt_data_end+0xf8003dac>
1000464c:	04400084 	movi	r17,2
10004650:	88e3c83a 	sub	r17,r17,r3
10004654:	003fb506 	br	1000452c <__alt_data_end+0xf800452c>
10004658:	4c400084 	addi	r17,r9,2
1000465c:	8839883a 	mov	fp,r17
10004660:	883dd20e 	bge	r17,zero,10003dac <__alt_data_end+0xf8003dac>
10004664:	003fb506 	br	1000453c <__alt_data_end+0xf800453c>
10004668:	d8c12617 	ldw	r3,1176(sp)
1000466c:	003f5706 	br	100043cc <__alt_data_end+0xf80043cc>
10004670:	d8812344 	addi	r2,sp,1165
10004674:	003f8206 	br	10004480 <__alt_data_end+0xf8004480>
10004678:	0039883a 	mov	fp,zero
1000467c:	003fbd06 	br	10004574 <__alt_data_end+0xf8004574>

10004680 <__vfprintf_internal>:
10004680:	2007883a 	mov	r3,r4
10004684:	01040074 	movhi	r4,4097
10004688:	210ee504 	addi	r4,r4,15252
1000468c:	21000017 	ldw	r4,0(r4)
10004690:	2805883a 	mov	r2,r5
10004694:	300f883a 	mov	r7,r6
10004698:	180b883a 	mov	r5,r3
1000469c:	100d883a 	mov	r6,r2
100046a0:	00025841 	jmpi	10002584 <___vfprintf_internal_r>

100046a4 <__swsetup_r>:
100046a4:	00840074 	movhi	r2,4097
100046a8:	defffd04 	addi	sp,sp,-12
100046ac:	108ee504 	addi	r2,r2,15252
100046b0:	dc400115 	stw	r17,4(sp)
100046b4:	2023883a 	mov	r17,r4
100046b8:	11000017 	ldw	r4,0(r2)
100046bc:	dc000015 	stw	r16,0(sp)
100046c0:	dfc00215 	stw	ra,8(sp)
100046c4:	2821883a 	mov	r16,r5
100046c8:	20000226 	beq	r4,zero,100046d4 <__swsetup_r+0x30>
100046cc:	20c00e17 	ldw	r3,56(r4)
100046d0:	18002e26 	beq	r3,zero,1000478c <__swsetup_r+0xe8>
100046d4:	8080030b 	ldhu	r2,12(r16)
100046d8:	10c0020c 	andi	r3,r2,8
100046dc:	100d883a 	mov	r6,r2
100046e0:	18000f26 	beq	r3,zero,10004720 <__swsetup_r+0x7c>
100046e4:	80c00417 	ldw	r3,16(r16)
100046e8:	18001526 	beq	r3,zero,10004740 <__swsetup_r+0x9c>
100046ec:	1100004c 	andi	r4,r2,1
100046f0:	20001c1e 	bne	r4,zero,10004764 <__swsetup_r+0xc0>
100046f4:	1080008c 	andi	r2,r2,2
100046f8:	1000261e 	bne	r2,zero,10004794 <__swsetup_r+0xf0>
100046fc:	80800517 	ldw	r2,20(r16)
10004700:	80800215 	stw	r2,8(r16)
10004704:	18001c26 	beq	r3,zero,10004778 <__swsetup_r+0xd4>
10004708:	0005883a 	mov	r2,zero
1000470c:	dfc00217 	ldw	ra,8(sp)
10004710:	dc400117 	ldw	r17,4(sp)
10004714:	dc000017 	ldw	r16,0(sp)
10004718:	dec00304 	addi	sp,sp,12
1000471c:	f800283a 	ret
10004720:	3080040c 	andi	r2,r6,16
10004724:	10001726 	beq	r2,zero,10004784 <__swsetup_r+0xe0>
10004728:	3080010c 	andi	r2,r6,4
1000472c:	10001b1e 	bne	r2,zero,1000479c <__swsetup_r+0xf8>
10004730:	80c00417 	ldw	r3,16(r16)
10004734:	30800214 	ori	r2,r6,8
10004738:	8080030d 	sth	r2,12(r16)
1000473c:	183feb1e 	bne	r3,zero,100046ec <__alt_data_end+0xf80046ec>
10004740:	1140a00c 	andi	r5,r2,640
10004744:	01008004 	movi	r4,512
10004748:	293fe826 	beq	r5,r4,100046ec <__alt_data_end+0xf80046ec>
1000474c:	8809883a 	mov	r4,r17
10004750:	800b883a 	mov	r5,r16
10004754:	00072380 	call	10007238 <__smakebuf_r>
10004758:	8080030b 	ldhu	r2,12(r16)
1000475c:	80c00417 	ldw	r3,16(r16)
10004760:	003fe206 	br	100046ec <__alt_data_end+0xf80046ec>
10004764:	80800517 	ldw	r2,20(r16)
10004768:	80000215 	stw	zero,8(r16)
1000476c:	0085c83a 	sub	r2,zero,r2
10004770:	80800615 	stw	r2,24(r16)
10004774:	183fe41e 	bne	r3,zero,10004708 <__alt_data_end+0xf8004708>
10004778:	8080030b 	ldhu	r2,12(r16)
1000477c:	1080200c 	andi	r2,r2,128
10004780:	103fe226 	beq	r2,zero,1000470c <__alt_data_end+0xf800470c>
10004784:	00bfffc4 	movi	r2,-1
10004788:	003fe006 	br	1000470c <__alt_data_end+0xf800470c>
1000478c:	00066e00 	call	100066e0 <__sinit>
10004790:	003fd006 	br	100046d4 <__alt_data_end+0xf80046d4>
10004794:	0005883a 	mov	r2,zero
10004798:	003fd906 	br	10004700 <__alt_data_end+0xf8004700>
1000479c:	81400c17 	ldw	r5,48(r16)
100047a0:	28000626 	beq	r5,zero,100047bc <__swsetup_r+0x118>
100047a4:	80801004 	addi	r2,r16,64
100047a8:	28800326 	beq	r5,r2,100047b8 <__swsetup_r+0x114>
100047ac:	8809883a 	mov	r4,r17
100047b0:	00068540 	call	10006854 <_free_r>
100047b4:	8180030b 	ldhu	r6,12(r16)
100047b8:	80000c15 	stw	zero,48(r16)
100047bc:	80c00417 	ldw	r3,16(r16)
100047c0:	00bff6c4 	movi	r2,-37
100047c4:	118c703a 	and	r6,r2,r6
100047c8:	80000115 	stw	zero,4(r16)
100047cc:	80c00015 	stw	r3,0(r16)
100047d0:	003fd806 	br	10004734 <__alt_data_end+0xf8004734>

100047d4 <quorem>:
100047d4:	defff204 	addi	sp,sp,-56
100047d8:	ddc00b15 	stw	r23,44(sp)
100047dc:	20800417 	ldw	r2,16(r4)
100047e0:	2dc00417 	ldw	r23,16(r5)
100047e4:	dfc00d15 	stw	ra,52(sp)
100047e8:	df000c15 	stw	fp,48(sp)
100047ec:	dd800a15 	stw	r22,40(sp)
100047f0:	dd400915 	stw	r21,36(sp)
100047f4:	dd000815 	stw	r20,32(sp)
100047f8:	dcc00715 	stw	r19,28(sp)
100047fc:	dc800615 	stw	r18,24(sp)
10004800:	dc400515 	stw	r17,20(sp)
10004804:	dc000415 	stw	r16,16(sp)
10004808:	15c07a16 	blt	r2,r23,100049f4 <quorem+0x220>
1000480c:	bdffffc4 	addi	r23,r23,-1
10004810:	bde9883a 	add	r20,r23,r23
10004814:	28c00504 	addi	r3,r5,20
10004818:	a529883a 	add	r20,r20,r20
1000481c:	1d39883a 	add	fp,r3,r20
10004820:	24c00504 	addi	r19,r4,20
10004824:	d9400215 	stw	r5,8(sp)
10004828:	9d29883a 	add	r20,r19,r20
1000482c:	e1400017 	ldw	r5,0(fp)
10004830:	d9000015 	stw	r4,0(sp)
10004834:	a1000017 	ldw	r4,0(r20)
10004838:	29400044 	addi	r5,r5,1
1000483c:	d8c00115 	stw	r3,4(sp)
10004840:	dd000315 	stw	r20,12(sp)
10004844:	000c5f40 	call	1000c5f4 <__udivsi3>
10004848:	1025883a 	mov	r18,r2
1000484c:	10003026 	beq	r2,zero,10004910 <quorem+0x13c>
10004850:	dc400117 	ldw	r17,4(sp)
10004854:	9829883a 	mov	r20,r19
10004858:	002d883a 	mov	r22,zero
1000485c:	0021883a 	mov	r16,zero
10004860:	8d400017 	ldw	r21,0(r17)
10004864:	900b883a 	mov	r5,r18
10004868:	8c400104 	addi	r17,r17,4
1000486c:	a93fffcc 	andi	r4,r21,65535
10004870:	000c6040 	call	1000c604 <__mulsi3>
10004874:	a808d43a 	srli	r4,r21,16
10004878:	900b883a 	mov	r5,r18
1000487c:	b0ad883a 	add	r22,r22,r2
10004880:	000c6040 	call	1000c604 <__mulsi3>
10004884:	a1000017 	ldw	r4,0(r20)
10004888:	b00cd43a 	srli	r6,r22,16
1000488c:	b0ffffcc 	andi	r3,r22,65535
10004890:	217fffcc 	andi	r5,r4,65535
10004894:	2c21883a 	add	r16,r5,r16
10004898:	80c7c83a 	sub	r3,r16,r3
1000489c:	2008d43a 	srli	r4,r4,16
100048a0:	3085883a 	add	r2,r6,r2
100048a4:	1821d43a 	srai	r16,r3,16
100048a8:	117fffcc 	andi	r5,r2,65535
100048ac:	2149c83a 	sub	r4,r4,r5
100048b0:	2421883a 	add	r16,r4,r16
100048b4:	8008943a 	slli	r4,r16,16
100048b8:	18ffffcc 	andi	r3,r3,65535
100048bc:	102cd43a 	srli	r22,r2,16
100048c0:	20c8b03a 	or	r4,r4,r3
100048c4:	a1000015 	stw	r4,0(r20)
100048c8:	8021d43a 	srai	r16,r16,16
100048cc:	a5000104 	addi	r20,r20,4
100048d0:	e47fe32e 	bgeu	fp,r17,10004860 <__alt_data_end+0xf8004860>
100048d4:	d8c00317 	ldw	r3,12(sp)
100048d8:	18800017 	ldw	r2,0(r3)
100048dc:	10000c1e 	bne	r2,zero,10004910 <quorem+0x13c>
100048e0:	18bfff04 	addi	r2,r3,-4
100048e4:	9880082e 	bgeu	r19,r2,10004908 <quorem+0x134>
100048e8:	18ffff17 	ldw	r3,-4(r3)
100048ec:	18000326 	beq	r3,zero,100048fc <quorem+0x128>
100048f0:	00000506 	br	10004908 <quorem+0x134>
100048f4:	10c00017 	ldw	r3,0(r2)
100048f8:	1800031e 	bne	r3,zero,10004908 <quorem+0x134>
100048fc:	10bfff04 	addi	r2,r2,-4
10004900:	bdffffc4 	addi	r23,r23,-1
10004904:	98bffb36 	bltu	r19,r2,100048f4 <__alt_data_end+0xf80048f4>
10004908:	d8c00017 	ldw	r3,0(sp)
1000490c:	1dc00415 	stw	r23,16(r3)
10004910:	d9000017 	ldw	r4,0(sp)
10004914:	d9400217 	ldw	r5,8(sp)
10004918:	00089b40 	call	100089b4 <__mcmp>
1000491c:	10002816 	blt	r2,zero,100049c0 <quorem+0x1ec>
10004920:	dc400117 	ldw	r17,4(sp)
10004924:	94800044 	addi	r18,r18,1
10004928:	980d883a 	mov	r6,r19
1000492c:	0007883a 	mov	r3,zero
10004930:	31000017 	ldw	r4,0(r6)
10004934:	89400017 	ldw	r5,0(r17)
10004938:	31800104 	addi	r6,r6,4
1000493c:	20bfffcc 	andi	r2,r4,65535
10004940:	10c7883a 	add	r3,r2,r3
10004944:	28bfffcc 	andi	r2,r5,65535
10004948:	1885c83a 	sub	r2,r3,r2
1000494c:	280ad43a 	srli	r5,r5,16
10004950:	2008d43a 	srli	r4,r4,16
10004954:	1007d43a 	srai	r3,r2,16
10004958:	10bfffcc 	andi	r2,r2,65535
1000495c:	2149c83a 	sub	r4,r4,r5
10004960:	20c9883a 	add	r4,r4,r3
10004964:	200a943a 	slli	r5,r4,16
10004968:	8c400104 	addi	r17,r17,4
1000496c:	2007d43a 	srai	r3,r4,16
10004970:	2884b03a 	or	r2,r5,r2
10004974:	30bfff15 	stw	r2,-4(r6)
10004978:	e47fed2e 	bgeu	fp,r17,10004930 <__alt_data_end+0xf8004930>
1000497c:	bdc5883a 	add	r2,r23,r23
10004980:	1085883a 	add	r2,r2,r2
10004984:	9887883a 	add	r3,r19,r2
10004988:	18800017 	ldw	r2,0(r3)
1000498c:	10000c1e 	bne	r2,zero,100049c0 <quorem+0x1ec>
10004990:	18bfff04 	addi	r2,r3,-4
10004994:	9880082e 	bgeu	r19,r2,100049b8 <quorem+0x1e4>
10004998:	18ffff17 	ldw	r3,-4(r3)
1000499c:	18000326 	beq	r3,zero,100049ac <quorem+0x1d8>
100049a0:	00000506 	br	100049b8 <quorem+0x1e4>
100049a4:	10c00017 	ldw	r3,0(r2)
100049a8:	1800031e 	bne	r3,zero,100049b8 <quorem+0x1e4>
100049ac:	10bfff04 	addi	r2,r2,-4
100049b0:	bdffffc4 	addi	r23,r23,-1
100049b4:	98bffb36 	bltu	r19,r2,100049a4 <__alt_data_end+0xf80049a4>
100049b8:	d8c00017 	ldw	r3,0(sp)
100049bc:	1dc00415 	stw	r23,16(r3)
100049c0:	9005883a 	mov	r2,r18
100049c4:	dfc00d17 	ldw	ra,52(sp)
100049c8:	df000c17 	ldw	fp,48(sp)
100049cc:	ddc00b17 	ldw	r23,44(sp)
100049d0:	dd800a17 	ldw	r22,40(sp)
100049d4:	dd400917 	ldw	r21,36(sp)
100049d8:	dd000817 	ldw	r20,32(sp)
100049dc:	dcc00717 	ldw	r19,28(sp)
100049e0:	dc800617 	ldw	r18,24(sp)
100049e4:	dc400517 	ldw	r17,20(sp)
100049e8:	dc000417 	ldw	r16,16(sp)
100049ec:	dec00e04 	addi	sp,sp,56
100049f0:	f800283a 	ret
100049f4:	0005883a 	mov	r2,zero
100049f8:	003ff206 	br	100049c4 <__alt_data_end+0xf80049c4>

100049fc <_dtoa_r>:
100049fc:	20801017 	ldw	r2,64(r4)
10004a00:	deffde04 	addi	sp,sp,-136
10004a04:	dd401d15 	stw	r21,116(sp)
10004a08:	dcc01b15 	stw	r19,108(sp)
10004a0c:	dc801a15 	stw	r18,104(sp)
10004a10:	dc401915 	stw	r17,100(sp)
10004a14:	dc001815 	stw	r16,96(sp)
10004a18:	dfc02115 	stw	ra,132(sp)
10004a1c:	df002015 	stw	fp,128(sp)
10004a20:	ddc01f15 	stw	r23,124(sp)
10004a24:	dd801e15 	stw	r22,120(sp)
10004a28:	dd001c15 	stw	r20,112(sp)
10004a2c:	d9c00315 	stw	r7,12(sp)
10004a30:	2021883a 	mov	r16,r4
10004a34:	302b883a 	mov	r21,r6
10004a38:	2825883a 	mov	r18,r5
10004a3c:	dc402417 	ldw	r17,144(sp)
10004a40:	3027883a 	mov	r19,r6
10004a44:	10000826 	beq	r2,zero,10004a68 <_dtoa_r+0x6c>
10004a48:	21801117 	ldw	r6,68(r4)
10004a4c:	00c00044 	movi	r3,1
10004a50:	100b883a 	mov	r5,r2
10004a54:	1986983a 	sll	r3,r3,r6
10004a58:	11800115 	stw	r6,4(r2)
10004a5c:	10c00215 	stw	r3,8(r2)
10004a60:	00080e00 	call	100080e0 <_Bfree>
10004a64:	80001015 	stw	zero,64(r16)
10004a68:	a8002d16 	blt	r21,zero,10004b20 <_dtoa_r+0x124>
10004a6c:	88000015 	stw	zero,0(r17)
10004a70:	a8dffc2c 	andhi	r3,r21,32752
10004a74:	009ffc34 	movhi	r2,32752
10004a78:	18801b26 	beq	r3,r2,10004ae8 <_dtoa_r+0xec>
10004a7c:	9009883a 	mov	r4,r18
10004a80:	980b883a 	mov	r5,r19
10004a84:	000d883a 	mov	r6,zero
10004a88:	000f883a 	mov	r7,zero
10004a8c:	000d8480 	call	1000d848 <__eqdf2>
10004a90:	10002a1e 	bne	r2,zero,10004b3c <_dtoa_r+0x140>
10004a94:	d8c02317 	ldw	r3,140(sp)
10004a98:	d9002517 	ldw	r4,148(sp)
10004a9c:	00800044 	movi	r2,1
10004aa0:	18800015 	stw	r2,0(r3)
10004aa4:	2001a226 	beq	r4,zero,10005130 <_dtoa_r+0x734>
10004aa8:	00840074 	movhi	r2,4097
10004aac:	10878a44 	addi	r2,r2,7721
10004ab0:	20800015 	stw	r2,0(r4)
10004ab4:	10bfffc4 	addi	r2,r2,-1
10004ab8:	dfc02117 	ldw	ra,132(sp)
10004abc:	df002017 	ldw	fp,128(sp)
10004ac0:	ddc01f17 	ldw	r23,124(sp)
10004ac4:	dd801e17 	ldw	r22,120(sp)
10004ac8:	dd401d17 	ldw	r21,116(sp)
10004acc:	dd001c17 	ldw	r20,112(sp)
10004ad0:	dcc01b17 	ldw	r19,108(sp)
10004ad4:	dc801a17 	ldw	r18,104(sp)
10004ad8:	dc401917 	ldw	r17,100(sp)
10004adc:	dc001817 	ldw	r16,96(sp)
10004ae0:	dec02204 	addi	sp,sp,136
10004ae4:	f800283a 	ret
10004ae8:	d8c02317 	ldw	r3,140(sp)
10004aec:	0089c3c4 	movi	r2,9999
10004af0:	18800015 	stw	r2,0(r3)
10004af4:	90017c26 	beq	r18,zero,100050e8 <_dtoa_r+0x6ec>
10004af8:	00840074 	movhi	r2,4097
10004afc:	10879604 	addi	r2,r2,7768
10004b00:	d9002517 	ldw	r4,148(sp)
10004b04:	203fec26 	beq	r4,zero,10004ab8 <__alt_data_end+0xf8004ab8>
10004b08:	10c000c7 	ldb	r3,3(r2)
10004b0c:	18017d1e 	bne	r3,zero,10005104 <_dtoa_r+0x708>
10004b10:	10c000c4 	addi	r3,r2,3
10004b14:	d9802517 	ldw	r6,148(sp)
10004b18:	30c00015 	stw	r3,0(r6)
10004b1c:	003fe606 	br	10004ab8 <__alt_data_end+0xf8004ab8>
10004b20:	04e00034 	movhi	r19,32768
10004b24:	9cffffc4 	addi	r19,r19,-1
10004b28:	00800044 	movi	r2,1
10004b2c:	ace6703a 	and	r19,r21,r19
10004b30:	88800015 	stw	r2,0(r17)
10004b34:	982b883a 	mov	r21,r19
10004b38:	003fcd06 	br	10004a70 <__alt_data_end+0xf8004a70>
10004b3c:	d8800204 	addi	r2,sp,8
10004b40:	a822d53a 	srli	r17,r21,20
10004b44:	d8800015 	stw	r2,0(sp)
10004b48:	8009883a 	mov	r4,r16
10004b4c:	900b883a 	mov	r5,r18
10004b50:	980d883a 	mov	r6,r19
10004b54:	d9c00104 	addi	r7,sp,4
10004b58:	0008d280 	call	10008d28 <__d2b>
10004b5c:	1039883a 	mov	fp,r2
10004b60:	88016a1e 	bne	r17,zero,1000510c <_dtoa_r+0x710>
10004b64:	dd000217 	ldw	r20,8(sp)
10004b68:	dc400117 	ldw	r17,4(sp)
10004b6c:	00befbc4 	movi	r2,-1041
10004b70:	a463883a 	add	r17,r20,r17
10004b74:	8882ea16 	blt	r17,r2,10005720 <_dtoa_r+0xd24>
10004b78:	00bf0384 	movi	r2,-1010
10004b7c:	1445c83a 	sub	r2,r2,r17
10004b80:	89010484 	addi	r4,r17,1042
10004b84:	a8aa983a 	sll	r21,r21,r2
10004b88:	9108d83a 	srl	r4,r18,r4
10004b8c:	a908b03a 	or	r4,r21,r4
10004b90:	000ed200 	call	1000ed20 <__floatunsidf>
10004b94:	017f8434 	movhi	r5,65040
10004b98:	01800044 	movi	r6,1
10004b9c:	1009883a 	mov	r4,r2
10004ba0:	194b883a 	add	r5,r3,r5
10004ba4:	8c7fffc4 	addi	r17,r17,-1
10004ba8:	d9800f15 	stw	r6,60(sp)
10004bac:	000d883a 	mov	r6,zero
10004bb0:	01cffe34 	movhi	r7,16376
10004bb4:	000e2f80 	call	1000e2f8 <__subdf3>
10004bb8:	0198dbf4 	movhi	r6,25455
10004bbc:	01cff4f4 	movhi	r7,16339
10004bc0:	1009883a 	mov	r4,r2
10004bc4:	180b883a 	mov	r5,r3
10004bc8:	3190d844 	addi	r6,r6,17249
10004bcc:	39e1e9c4 	addi	r7,r7,-30809
10004bd0:	000da8c0 	call	1000da8c <__muldf3>
10004bd4:	01a2d874 	movhi	r6,35681
10004bd8:	01cff1f4 	movhi	r7,16327
10004bdc:	180b883a 	mov	r5,r3
10004be0:	31b22cc4 	addi	r6,r6,-14157
10004be4:	39e28a04 	addi	r7,r7,-30168
10004be8:	1009883a 	mov	r4,r2
10004bec:	000c62c0 	call	1000c62c <__adddf3>
10004bf0:	8809883a 	mov	r4,r17
10004bf4:	102d883a 	mov	r22,r2
10004bf8:	182b883a 	mov	r21,r3
10004bfc:	000ec500 	call	1000ec50 <__floatsidf>
10004c00:	019427f4 	movhi	r6,20639
10004c04:	01cff4f4 	movhi	r7,16339
10004c08:	1009883a 	mov	r4,r2
10004c0c:	180b883a 	mov	r5,r3
10004c10:	319e7ec4 	addi	r6,r6,31227
10004c14:	39d104c4 	addi	r7,r7,17427
10004c18:	000da8c0 	call	1000da8c <__muldf3>
10004c1c:	b009883a 	mov	r4,r22
10004c20:	a80b883a 	mov	r5,r21
10004c24:	100d883a 	mov	r6,r2
10004c28:	180f883a 	mov	r7,r3
10004c2c:	000c62c0 	call	1000c62c <__adddf3>
10004c30:	1009883a 	mov	r4,r2
10004c34:	180b883a 	mov	r5,r3
10004c38:	102d883a 	mov	r22,r2
10004c3c:	182b883a 	mov	r21,r3
10004c40:	000ebc80 	call	1000ebc8 <__fixdfsi>
10004c44:	b009883a 	mov	r4,r22
10004c48:	a80b883a 	mov	r5,r21
10004c4c:	000d883a 	mov	r6,zero
10004c50:	000f883a 	mov	r7,zero
10004c54:	d8800515 	stw	r2,20(sp)
10004c58:	000d9ac0 	call	1000d9ac <__ledf2>
10004c5c:	10023116 	blt	r2,zero,10005524 <_dtoa_r+0xb28>
10004c60:	d8c00517 	ldw	r3,20(sp)
10004c64:	00800584 	movi	r2,22
10004c68:	10c21f36 	bltu	r2,r3,100054e8 <_dtoa_r+0xaec>
10004c6c:	180490fa 	slli	r2,r3,3
10004c70:	00c40074 	movhi	r3,4097
10004c74:	18c7b204 	addi	r3,r3,7880
10004c78:	1885883a 	add	r2,r3,r2
10004c7c:	11000017 	ldw	r4,0(r2)
10004c80:	11400117 	ldw	r5,4(r2)
10004c84:	900d883a 	mov	r6,r18
10004c88:	980f883a 	mov	r7,r19
10004c8c:	000d8cc0 	call	1000d8cc <__gedf2>
10004c90:	0082a70e 	bge	zero,r2,10005730 <_dtoa_r+0xd34>
10004c94:	d9000517 	ldw	r4,20(sp)
10004c98:	d8000c15 	stw	zero,48(sp)
10004c9c:	213fffc4 	addi	r4,r4,-1
10004ca0:	d9000515 	stw	r4,20(sp)
10004ca4:	a463c83a 	sub	r17,r20,r17
10004ca8:	8dbfffc4 	addi	r22,r17,-1
10004cac:	b0021916 	blt	r22,zero,10005514 <_dtoa_r+0xb18>
10004cb0:	d8000815 	stw	zero,32(sp)
10004cb4:	d8800517 	ldw	r2,20(sp)
10004cb8:	10020e16 	blt	r2,zero,100054f4 <_dtoa_r+0xaf8>
10004cbc:	b0ad883a 	add	r22,r22,r2
10004cc0:	d8800a15 	stw	r2,40(sp)
10004cc4:	d8000915 	stw	zero,36(sp)
10004cc8:	d8c00317 	ldw	r3,12(sp)
10004ccc:	00800244 	movi	r2,9
10004cd0:	10c11a36 	bltu	r2,r3,1000513c <_dtoa_r+0x740>
10004cd4:	00800144 	movi	r2,5
10004cd8:	10c4fc0e 	bge	r2,r3,100060cc <_dtoa_r+0x16d0>
10004cdc:	18ffff04 	addi	r3,r3,-4
10004ce0:	d8c00315 	stw	r3,12(sp)
10004ce4:	0029883a 	mov	r20,zero
10004ce8:	d9800317 	ldw	r6,12(sp)
10004cec:	008000c4 	movi	r2,3
10004cf0:	3083bd26 	beq	r6,r2,10005be8 <_dtoa_r+0x11ec>
10004cf4:	1183670e 	bge	r2,r6,10005a94 <_dtoa_r+0x1098>
10004cf8:	d8c00317 	ldw	r3,12(sp)
10004cfc:	00800104 	movi	r2,4
10004d00:	1882e726 	beq	r3,r2,100058a0 <_dtoa_r+0xea4>
10004d04:	00800144 	movi	r2,5
10004d08:	1884f21e 	bne	r3,r2,100060d4 <_dtoa_r+0x16d8>
10004d0c:	00800044 	movi	r2,1
10004d10:	d8800b15 	stw	r2,44(sp)
10004d14:	d8c02217 	ldw	r3,136(sp)
10004d18:	d9000517 	ldw	r4,20(sp)
10004d1c:	1907883a 	add	r3,r3,r4
10004d20:	19800044 	addi	r6,r3,1
10004d24:	d8c00d15 	stw	r3,52(sp)
10004d28:	d9800615 	stw	r6,24(sp)
10004d2c:	0183c30e 	bge	zero,r6,10005c3c <_dtoa_r+0x1240>
10004d30:	d9800617 	ldw	r6,24(sp)
10004d34:	3023883a 	mov	r17,r6
10004d38:	80001115 	stw	zero,68(r16)
10004d3c:	008005c4 	movi	r2,23
10004d40:	1184f62e 	bgeu	r2,r6,1000611c <_dtoa_r+0x1720>
10004d44:	00c00044 	movi	r3,1
10004d48:	00800104 	movi	r2,4
10004d4c:	1085883a 	add	r2,r2,r2
10004d50:	11000504 	addi	r4,r2,20
10004d54:	180b883a 	mov	r5,r3
10004d58:	18c00044 	addi	r3,r3,1
10004d5c:	313ffb2e 	bgeu	r6,r4,10004d4c <__alt_data_end+0xf8004d4c>
10004d60:	81401115 	stw	r5,68(r16)
10004d64:	8009883a 	mov	r4,r16
10004d68:	00080380 	call	10008038 <_Balloc>
10004d6c:	d8800715 	stw	r2,28(sp)
10004d70:	80801015 	stw	r2,64(r16)
10004d74:	00800384 	movi	r2,14
10004d78:	1440fd36 	bltu	r2,r17,10005170 <_dtoa_r+0x774>
10004d7c:	a000fc26 	beq	r20,zero,10005170 <_dtoa_r+0x774>
10004d80:	d8800517 	ldw	r2,20(sp)
10004d84:	0083b90e 	bge	zero,r2,10005c6c <_dtoa_r+0x1270>
10004d88:	d8c00517 	ldw	r3,20(sp)
10004d8c:	108003cc 	andi	r2,r2,15
10004d90:	100490fa 	slli	r2,r2,3
10004d94:	182fd13a 	srai	r23,r3,4
10004d98:	00c40074 	movhi	r3,4097
10004d9c:	18c7b204 	addi	r3,r3,7880
10004da0:	1885883a 	add	r2,r3,r2
10004da4:	b8c0040c 	andi	r3,r23,16
10004da8:	12c00017 	ldw	r11,0(r2)
10004dac:	12800117 	ldw	r10,4(r2)
10004db0:	18039726 	beq	r3,zero,10005c10 <_dtoa_r+0x1214>
10004db4:	00840074 	movhi	r2,4097
10004db8:	1087a804 	addi	r2,r2,7840
10004dbc:	11800817 	ldw	r6,32(r2)
10004dc0:	11c00917 	ldw	r7,36(r2)
10004dc4:	9009883a 	mov	r4,r18
10004dc8:	980b883a 	mov	r5,r19
10004dcc:	da801615 	stw	r10,88(sp)
10004dd0:	dac01515 	stw	r11,84(sp)
10004dd4:	000cec80 	call	1000cec8 <__divdf3>
10004dd8:	da801617 	ldw	r10,88(sp)
10004ddc:	dac01517 	ldw	r11,84(sp)
10004de0:	bdc003cc 	andi	r23,r23,15
10004de4:	044000c4 	movi	r17,3
10004de8:	d8800e15 	stw	r2,56(sp)
10004dec:	182b883a 	mov	r21,r3
10004df0:	b8001126 	beq	r23,zero,10004e38 <_dtoa_r+0x43c>
10004df4:	05040074 	movhi	r20,4097
10004df8:	a507a804 	addi	r20,r20,7840
10004dfc:	5805883a 	mov	r2,r11
10004e00:	5007883a 	mov	r3,r10
10004e04:	b980004c 	andi	r6,r23,1
10004e08:	1009883a 	mov	r4,r2
10004e0c:	b82fd07a 	srai	r23,r23,1
10004e10:	180b883a 	mov	r5,r3
10004e14:	30000426 	beq	r6,zero,10004e28 <_dtoa_r+0x42c>
10004e18:	a1800017 	ldw	r6,0(r20)
10004e1c:	a1c00117 	ldw	r7,4(r20)
10004e20:	8c400044 	addi	r17,r17,1
10004e24:	000da8c0 	call	1000da8c <__muldf3>
10004e28:	a5000204 	addi	r20,r20,8
10004e2c:	b83ff51e 	bne	r23,zero,10004e04 <__alt_data_end+0xf8004e04>
10004e30:	1017883a 	mov	r11,r2
10004e34:	1815883a 	mov	r10,r3
10004e38:	d9000e17 	ldw	r4,56(sp)
10004e3c:	a80b883a 	mov	r5,r21
10004e40:	580d883a 	mov	r6,r11
10004e44:	500f883a 	mov	r7,r10
10004e48:	000cec80 	call	1000cec8 <__divdf3>
10004e4c:	1029883a 	mov	r20,r2
10004e50:	182b883a 	mov	r21,r3
10004e54:	d9800c17 	ldw	r6,48(sp)
10004e58:	30000626 	beq	r6,zero,10004e74 <_dtoa_r+0x478>
10004e5c:	a009883a 	mov	r4,r20
10004e60:	a80b883a 	mov	r5,r21
10004e64:	000d883a 	mov	r6,zero
10004e68:	01cffc34 	movhi	r7,16368
10004e6c:	000d9ac0 	call	1000d9ac <__ledf2>
10004e70:	10043216 	blt	r2,zero,10005f3c <_dtoa_r+0x1540>
10004e74:	8809883a 	mov	r4,r17
10004e78:	000ec500 	call	1000ec50 <__floatsidf>
10004e7c:	1009883a 	mov	r4,r2
10004e80:	180b883a 	mov	r5,r3
10004e84:	a00d883a 	mov	r6,r20
10004e88:	a80f883a 	mov	r7,r21
10004e8c:	000da8c0 	call	1000da8c <__muldf3>
10004e90:	000d883a 	mov	r6,zero
10004e94:	1009883a 	mov	r4,r2
10004e98:	180b883a 	mov	r5,r3
10004e9c:	01d00734 	movhi	r7,16412
10004ea0:	000c62c0 	call	1000c62c <__adddf3>
10004ea4:	1023883a 	mov	r17,r2
10004ea8:	d9800617 	ldw	r6,24(sp)
10004eac:	00bf3034 	movhi	r2,64704
10004eb0:	1885883a 	add	r2,r3,r2
10004eb4:	d8800e15 	stw	r2,56(sp)
10004eb8:	30032e26 	beq	r6,zero,10005b74 <_dtoa_r+0x1178>
10004ebc:	d8c00517 	ldw	r3,20(sp)
10004ec0:	da800617 	ldw	r10,24(sp)
10004ec4:	d8c01215 	stw	r3,72(sp)
10004ec8:	d9000b17 	ldw	r4,44(sp)
10004ecc:	2003b026 	beq	r4,zero,10005d90 <_dtoa_r+0x1394>
10004ed0:	50bfffc4 	addi	r2,r10,-1
10004ed4:	100490fa 	slli	r2,r2,3
10004ed8:	00c40074 	movhi	r3,4097
10004edc:	18c7b204 	addi	r3,r3,7880
10004ee0:	1885883a 	add	r2,r3,r2
10004ee4:	11800017 	ldw	r6,0(r2)
10004ee8:	11c00117 	ldw	r7,4(r2)
10004eec:	d8800717 	ldw	r2,28(sp)
10004ef0:	0009883a 	mov	r4,zero
10004ef4:	014ff834 	movhi	r5,16352
10004ef8:	da801615 	stw	r10,88(sp)
10004efc:	15c00044 	addi	r23,r2,1
10004f00:	000cec80 	call	1000cec8 <__divdf3>
10004f04:	d9c00e17 	ldw	r7,56(sp)
10004f08:	880d883a 	mov	r6,r17
10004f0c:	1009883a 	mov	r4,r2
10004f10:	180b883a 	mov	r5,r3
10004f14:	000e2f80 	call	1000e2f8 <__subdf3>
10004f18:	a80b883a 	mov	r5,r21
10004f1c:	a009883a 	mov	r4,r20
10004f20:	d8c01015 	stw	r3,64(sp)
10004f24:	d8800e15 	stw	r2,56(sp)
10004f28:	000ebc80 	call	1000ebc8 <__fixdfsi>
10004f2c:	1009883a 	mov	r4,r2
10004f30:	d8801715 	stw	r2,92(sp)
10004f34:	000ec500 	call	1000ec50 <__floatsidf>
10004f38:	a009883a 	mov	r4,r20
10004f3c:	a80b883a 	mov	r5,r21
10004f40:	100d883a 	mov	r6,r2
10004f44:	180f883a 	mov	r7,r3
10004f48:	000e2f80 	call	1000e2f8 <__subdf3>
10004f4c:	da001717 	ldw	r8,92(sp)
10004f50:	1829883a 	mov	r20,r3
10004f54:	d8c00717 	ldw	r3,28(sp)
10004f58:	d9000e17 	ldw	r4,56(sp)
10004f5c:	d9401017 	ldw	r5,64(sp)
10004f60:	42000c04 	addi	r8,r8,48
10004f64:	1023883a 	mov	r17,r2
10004f68:	1a000005 	stb	r8,0(r3)
10004f6c:	880d883a 	mov	r6,r17
10004f70:	a00f883a 	mov	r7,r20
10004f74:	402b883a 	mov	r21,r8
10004f78:	000d8cc0 	call	1000d8cc <__gedf2>
10004f7c:	00844516 	blt	zero,r2,10006094 <_dtoa_r+0x1698>
10004f80:	0009883a 	mov	r4,zero
10004f84:	014ffc34 	movhi	r5,16368
10004f88:	880d883a 	mov	r6,r17
10004f8c:	a00f883a 	mov	r7,r20
10004f90:	000e2f80 	call	1000e2f8 <__subdf3>
10004f94:	d9000e17 	ldw	r4,56(sp)
10004f98:	d9401017 	ldw	r5,64(sp)
10004f9c:	100d883a 	mov	r6,r2
10004fa0:	180f883a 	mov	r7,r3
10004fa4:	000d8cc0 	call	1000d8cc <__gedf2>
10004fa8:	da801617 	ldw	r10,88(sp)
10004fac:	00843616 	blt	zero,r2,10006088 <_dtoa_r+0x168c>
10004fb0:	00800044 	movi	r2,1
10004fb4:	12806e0e 	bge	r2,r10,10005170 <_dtoa_r+0x774>
10004fb8:	d9000717 	ldw	r4,28(sp)
10004fbc:	dd801315 	stw	r22,76(sp)
10004fc0:	dc001115 	stw	r16,68(sp)
10004fc4:	2295883a 	add	r10,r4,r10
10004fc8:	dcc01415 	stw	r19,80(sp)
10004fcc:	502d883a 	mov	r22,r10
10004fd0:	dcc01017 	ldw	r19,64(sp)
10004fd4:	b821883a 	mov	r16,r23
10004fd8:	dc801015 	stw	r18,64(sp)
10004fdc:	dc800e17 	ldw	r18,56(sp)
10004fe0:	00000906 	br	10005008 <_dtoa_r+0x60c>
10004fe4:	000e2f80 	call	1000e2f8 <__subdf3>
10004fe8:	1009883a 	mov	r4,r2
10004fec:	180b883a 	mov	r5,r3
10004ff0:	900d883a 	mov	r6,r18
10004ff4:	980f883a 	mov	r7,r19
10004ff8:	000d9ac0 	call	1000d9ac <__ledf2>
10004ffc:	10040e16 	blt	r2,zero,10006038 <_dtoa_r+0x163c>
10005000:	b821883a 	mov	r16,r23
10005004:	bd841026 	beq	r23,r22,10006048 <_dtoa_r+0x164c>
10005008:	9009883a 	mov	r4,r18
1000500c:	980b883a 	mov	r5,r19
10005010:	000d883a 	mov	r6,zero
10005014:	01d00934 	movhi	r7,16420
10005018:	000da8c0 	call	1000da8c <__muldf3>
1000501c:	000d883a 	mov	r6,zero
10005020:	01d00934 	movhi	r7,16420
10005024:	8809883a 	mov	r4,r17
10005028:	a00b883a 	mov	r5,r20
1000502c:	1025883a 	mov	r18,r2
10005030:	1827883a 	mov	r19,r3
10005034:	000da8c0 	call	1000da8c <__muldf3>
10005038:	180b883a 	mov	r5,r3
1000503c:	1009883a 	mov	r4,r2
10005040:	1823883a 	mov	r17,r3
10005044:	1029883a 	mov	r20,r2
10005048:	000ebc80 	call	1000ebc8 <__fixdfsi>
1000504c:	1009883a 	mov	r4,r2
10005050:	102b883a 	mov	r21,r2
10005054:	000ec500 	call	1000ec50 <__floatsidf>
10005058:	a009883a 	mov	r4,r20
1000505c:	880b883a 	mov	r5,r17
10005060:	100d883a 	mov	r6,r2
10005064:	180f883a 	mov	r7,r3
10005068:	000e2f80 	call	1000e2f8 <__subdf3>
1000506c:	ad400c04 	addi	r21,r21,48
10005070:	1009883a 	mov	r4,r2
10005074:	180b883a 	mov	r5,r3
10005078:	900d883a 	mov	r6,r18
1000507c:	980f883a 	mov	r7,r19
10005080:	85400005 	stb	r21,0(r16)
10005084:	1023883a 	mov	r17,r2
10005088:	1829883a 	mov	r20,r3
1000508c:	000d9ac0 	call	1000d9ac <__ledf2>
10005090:	bdc00044 	addi	r23,r23,1
10005094:	0009883a 	mov	r4,zero
10005098:	014ffc34 	movhi	r5,16368
1000509c:	880d883a 	mov	r6,r17
100050a0:	a00f883a 	mov	r7,r20
100050a4:	103fcf0e 	bge	r2,zero,10004fe4 <__alt_data_end+0xf8004fe4>
100050a8:	d9801217 	ldw	r6,72(sp)
100050ac:	dc001117 	ldw	r16,68(sp)
100050b0:	d9800515 	stw	r6,20(sp)
100050b4:	8009883a 	mov	r4,r16
100050b8:	e00b883a 	mov	r5,fp
100050bc:	00080e00 	call	100080e0 <_Bfree>
100050c0:	d8c00517 	ldw	r3,20(sp)
100050c4:	d9002317 	ldw	r4,140(sp)
100050c8:	d9802517 	ldw	r6,148(sp)
100050cc:	b8000005 	stb	zero,0(r23)
100050d0:	18800044 	addi	r2,r3,1
100050d4:	20800015 	stw	r2,0(r4)
100050d8:	30027226 	beq	r6,zero,10005aa4 <_dtoa_r+0x10a8>
100050dc:	35c00015 	stw	r23,0(r6)
100050e0:	d8800717 	ldw	r2,28(sp)
100050e4:	003e7406 	br	10004ab8 <__alt_data_end+0xf8004ab8>
100050e8:	00800434 	movhi	r2,16
100050ec:	10bfffc4 	addi	r2,r2,-1
100050f0:	a8aa703a 	and	r21,r21,r2
100050f4:	a83e801e 	bne	r21,zero,10004af8 <__alt_data_end+0xf8004af8>
100050f8:	00840074 	movhi	r2,4097
100050fc:	10879304 	addi	r2,r2,7756
10005100:	003e7f06 	br	10004b00 <__alt_data_end+0xf8004b00>
10005104:	10c00204 	addi	r3,r2,8
10005108:	003e8206 	br	10004b14 <__alt_data_end+0xf8004b14>
1000510c:	01400434 	movhi	r5,16
10005110:	297fffc4 	addi	r5,r5,-1
10005114:	994a703a 	and	r5,r19,r5
10005118:	9009883a 	mov	r4,r18
1000511c:	8c7f0044 	addi	r17,r17,-1023
10005120:	294ffc34 	orhi	r5,r5,16368
10005124:	dd000217 	ldw	r20,8(sp)
10005128:	d8000f15 	stw	zero,60(sp)
1000512c:	003e9f06 	br	10004bac <__alt_data_end+0xf8004bac>
10005130:	00840074 	movhi	r2,4097
10005134:	10878a04 	addi	r2,r2,7720
10005138:	003e5f06 	br	10004ab8 <__alt_data_end+0xf8004ab8>
1000513c:	80001115 	stw	zero,68(r16)
10005140:	8009883a 	mov	r4,r16
10005144:	000b883a 	mov	r5,zero
10005148:	00080380 	call	10008038 <_Balloc>
1000514c:	01bfffc4 	movi	r6,-1
10005150:	d8800715 	stw	r2,28(sp)
10005154:	80801015 	stw	r2,64(r16)
10005158:	00800044 	movi	r2,1
1000515c:	d9800615 	stw	r6,24(sp)
10005160:	d8800b15 	stw	r2,44(sp)
10005164:	d8002215 	stw	zero,136(sp)
10005168:	d9800d15 	stw	r6,52(sp)
1000516c:	d8000315 	stw	zero,12(sp)
10005170:	d8800117 	ldw	r2,4(sp)
10005174:	10008e16 	blt	r2,zero,100053b0 <_dtoa_r+0x9b4>
10005178:	d9000517 	ldw	r4,20(sp)
1000517c:	00c00384 	movi	r3,14
10005180:	19008b16 	blt	r3,r4,100053b0 <_dtoa_r+0x9b4>
10005184:	200490fa 	slli	r2,r4,3
10005188:	00c40074 	movhi	r3,4097
1000518c:	d9802217 	ldw	r6,136(sp)
10005190:	18c7b204 	addi	r3,r3,7880
10005194:	1885883a 	add	r2,r3,r2
10005198:	14400017 	ldw	r17,0(r2)
1000519c:	15000117 	ldw	r20,4(r2)
100051a0:	3001c716 	blt	r6,zero,100058c0 <_dtoa_r+0xec4>
100051a4:	880d883a 	mov	r6,r17
100051a8:	a00f883a 	mov	r7,r20
100051ac:	9009883a 	mov	r4,r18
100051b0:	980b883a 	mov	r5,r19
100051b4:	000cec80 	call	1000cec8 <__divdf3>
100051b8:	180b883a 	mov	r5,r3
100051bc:	1009883a 	mov	r4,r2
100051c0:	000ebc80 	call	1000ebc8 <__fixdfsi>
100051c4:	1009883a 	mov	r4,r2
100051c8:	102d883a 	mov	r22,r2
100051cc:	000ec500 	call	1000ec50 <__floatsidf>
100051d0:	1009883a 	mov	r4,r2
100051d4:	180b883a 	mov	r5,r3
100051d8:	880d883a 	mov	r6,r17
100051dc:	a00f883a 	mov	r7,r20
100051e0:	000da8c0 	call	1000da8c <__muldf3>
100051e4:	9009883a 	mov	r4,r18
100051e8:	980b883a 	mov	r5,r19
100051ec:	100d883a 	mov	r6,r2
100051f0:	180f883a 	mov	r7,r3
100051f4:	000e2f80 	call	1000e2f8 <__subdf3>
100051f8:	d9000717 	ldw	r4,28(sp)
100051fc:	d9800617 	ldw	r6,24(sp)
10005200:	180b883a 	mov	r5,r3
10005204:	b0c00c04 	addi	r3,r22,48
10005208:	20c00005 	stb	r3,0(r4)
1000520c:	25c00044 	addi	r23,r4,1
10005210:	01000044 	movi	r4,1
10005214:	1011883a 	mov	r8,r2
10005218:	2807883a 	mov	r3,r5
1000521c:	31003d26 	beq	r6,r4,10005314 <_dtoa_r+0x918>
10005220:	000d883a 	mov	r6,zero
10005224:	01d00934 	movhi	r7,16420
10005228:	1009883a 	mov	r4,r2
1000522c:	000da8c0 	call	1000da8c <__muldf3>
10005230:	1009883a 	mov	r4,r2
10005234:	180b883a 	mov	r5,r3
10005238:	000d883a 	mov	r6,zero
1000523c:	000f883a 	mov	r7,zero
10005240:	1027883a 	mov	r19,r2
10005244:	182b883a 	mov	r21,r3
10005248:	000d8480 	call	1000d848 <__eqdf2>
1000524c:	103f9926 	beq	r2,zero,100050b4 <__alt_data_end+0xf80050b4>
10005250:	d8c00617 	ldw	r3,24(sp)
10005254:	d9000717 	ldw	r4,28(sp)
10005258:	b825883a 	mov	r18,r23
1000525c:	18bfffc4 	addi	r2,r3,-1
10005260:	20ad883a 	add	r22,r4,r2
10005264:	dc000315 	stw	r16,12(sp)
10005268:	00000a06 	br	10005294 <_dtoa_r+0x898>
1000526c:	000da8c0 	call	1000da8c <__muldf3>
10005270:	1009883a 	mov	r4,r2
10005274:	180b883a 	mov	r5,r3
10005278:	000d883a 	mov	r6,zero
1000527c:	000f883a 	mov	r7,zero
10005280:	1027883a 	mov	r19,r2
10005284:	182b883a 	mov	r21,r3
10005288:	b825883a 	mov	r18,r23
1000528c:	000d8480 	call	1000d848 <__eqdf2>
10005290:	10022626 	beq	r2,zero,10005b2c <_dtoa_r+0x1130>
10005294:	880d883a 	mov	r6,r17
10005298:	a00f883a 	mov	r7,r20
1000529c:	9809883a 	mov	r4,r19
100052a0:	a80b883a 	mov	r5,r21
100052a4:	000cec80 	call	1000cec8 <__divdf3>
100052a8:	180b883a 	mov	r5,r3
100052ac:	1009883a 	mov	r4,r2
100052b0:	000ebc80 	call	1000ebc8 <__fixdfsi>
100052b4:	1009883a 	mov	r4,r2
100052b8:	1021883a 	mov	r16,r2
100052bc:	000ec500 	call	1000ec50 <__floatsidf>
100052c0:	1009883a 	mov	r4,r2
100052c4:	180b883a 	mov	r5,r3
100052c8:	880d883a 	mov	r6,r17
100052cc:	a00f883a 	mov	r7,r20
100052d0:	000da8c0 	call	1000da8c <__muldf3>
100052d4:	9809883a 	mov	r4,r19
100052d8:	a80b883a 	mov	r5,r21
100052dc:	100d883a 	mov	r6,r2
100052e0:	180f883a 	mov	r7,r3
100052e4:	000e2f80 	call	1000e2f8 <__subdf3>
100052e8:	82000c04 	addi	r8,r16,48
100052ec:	92000005 	stb	r8,0(r18)
100052f0:	1009883a 	mov	r4,r2
100052f4:	180b883a 	mov	r5,r3
100052f8:	000d883a 	mov	r6,zero
100052fc:	01d00934 	movhi	r7,16420
10005300:	1011883a 	mov	r8,r2
10005304:	bdc00044 	addi	r23,r23,1
10005308:	95bfd81e 	bne	r18,r22,1000526c <__alt_data_end+0xf800526c>
1000530c:	802d883a 	mov	r22,r16
10005310:	dc000317 	ldw	r16,12(sp)
10005314:	4009883a 	mov	r4,r8
10005318:	180b883a 	mov	r5,r3
1000531c:	400d883a 	mov	r6,r8
10005320:	180f883a 	mov	r7,r3
10005324:	000c62c0 	call	1000c62c <__adddf3>
10005328:	8809883a 	mov	r4,r17
1000532c:	a00b883a 	mov	r5,r20
10005330:	100d883a 	mov	r6,r2
10005334:	180f883a 	mov	r7,r3
10005338:	1027883a 	mov	r19,r2
1000533c:	1825883a 	mov	r18,r3
10005340:	000d9ac0 	call	1000d9ac <__ledf2>
10005344:	10000816 	blt	r2,zero,10005368 <_dtoa_r+0x96c>
10005348:	8809883a 	mov	r4,r17
1000534c:	a00b883a 	mov	r5,r20
10005350:	980d883a 	mov	r6,r19
10005354:	900f883a 	mov	r7,r18
10005358:	000d8480 	call	1000d848 <__eqdf2>
1000535c:	103f551e 	bne	r2,zero,100050b4 <__alt_data_end+0xf80050b4>
10005360:	b580004c 	andi	r22,r22,1
10005364:	b03f5326 	beq	r22,zero,100050b4 <__alt_data_end+0xf80050b4>
10005368:	bd7fffc3 	ldbu	r21,-1(r23)
1000536c:	b8bfffc4 	addi	r2,r23,-1
10005370:	1007883a 	mov	r3,r2
10005374:	01400e44 	movi	r5,57
10005378:	d9800717 	ldw	r6,28(sp)
1000537c:	00000506 	br	10005394 <_dtoa_r+0x998>
10005380:	18ffffc4 	addi	r3,r3,-1
10005384:	30825e26 	beq	r6,r2,10005d00 <_dtoa_r+0x1304>
10005388:	1d400003 	ldbu	r21,0(r3)
1000538c:	102f883a 	mov	r23,r2
10005390:	10bfffc4 	addi	r2,r2,-1
10005394:	a9003fcc 	andi	r4,r21,255
10005398:	2100201c 	xori	r4,r4,128
1000539c:	213fe004 	addi	r4,r4,-128
100053a0:	217ff726 	beq	r4,r5,10005380 <__alt_data_end+0xf8005380>
100053a4:	aa000044 	addi	r8,r21,1
100053a8:	12000005 	stb	r8,0(r2)
100053ac:	003f4106 	br	100050b4 <__alt_data_end+0xf80050b4>
100053b0:	d8c00b17 	ldw	r3,44(sp)
100053b4:	18006726 	beq	r3,zero,10005554 <_dtoa_r+0xb58>
100053b8:	d9000317 	ldw	r4,12(sp)
100053bc:	00c00044 	movi	r3,1
100053c0:	19016a0e 	bge	r3,r4,1000596c <_dtoa_r+0xf70>
100053c4:	d8800617 	ldw	r2,24(sp)
100053c8:	d8c00917 	ldw	r3,36(sp)
100053cc:	157fffc4 	addi	r21,r2,-1
100053d0:	1d420716 	blt	r3,r21,10005bf0 <_dtoa_r+0x11f4>
100053d4:	1d6bc83a 	sub	r21,r3,r21
100053d8:	d8800617 	ldw	r2,24(sp)
100053dc:	1002c716 	blt	r2,zero,10005efc <_dtoa_r+0x1500>
100053e0:	dd000817 	ldw	r20,32(sp)
100053e4:	d8800617 	ldw	r2,24(sp)
100053e8:	d9800817 	ldw	r6,32(sp)
100053ec:	8009883a 	mov	r4,r16
100053f0:	01400044 	movi	r5,1
100053f4:	308d883a 	add	r6,r6,r2
100053f8:	d9800815 	stw	r6,32(sp)
100053fc:	b0ad883a 	add	r22,r22,r2
10005400:	00084600 	call	10008460 <__i2b>
10005404:	1023883a 	mov	r17,r2
10005408:	a0000826 	beq	r20,zero,1000542c <_dtoa_r+0xa30>
1000540c:	0580070e 	bge	zero,r22,1000542c <_dtoa_r+0xa30>
10005410:	b005883a 	mov	r2,r22
10005414:	a5812016 	blt	r20,r22,10005898 <_dtoa_r+0xe9c>
10005418:	d8c00817 	ldw	r3,32(sp)
1000541c:	a0a9c83a 	sub	r20,r20,r2
10005420:	b0adc83a 	sub	r22,r22,r2
10005424:	1887c83a 	sub	r3,r3,r2
10005428:	d8c00815 	stw	r3,32(sp)
1000542c:	d9000917 	ldw	r4,36(sp)
10005430:	0100140e 	bge	zero,r4,10005484 <_dtoa_r+0xa88>
10005434:	d9800b17 	ldw	r6,44(sp)
10005438:	3001e526 	beq	r6,zero,10005bd0 <_dtoa_r+0x11d4>
1000543c:	05400e0e 	bge	zero,r21,10005478 <_dtoa_r+0xa7c>
10005440:	880b883a 	mov	r5,r17
10005444:	8009883a 	mov	r4,r16
10005448:	a80d883a 	mov	r6,r21
1000544c:	000872c0 	call	1000872c <__pow5mult>
10005450:	e00d883a 	mov	r6,fp
10005454:	8009883a 	mov	r4,r16
10005458:	100b883a 	mov	r5,r2
1000545c:	1023883a 	mov	r17,r2
10005460:	000849c0 	call	1000849c <__multiply>
10005464:	102f883a 	mov	r23,r2
10005468:	e00b883a 	mov	r5,fp
1000546c:	8009883a 	mov	r4,r16
10005470:	00080e00 	call	100080e0 <_Bfree>
10005474:	b839883a 	mov	fp,r23
10005478:	d8800917 	ldw	r2,36(sp)
1000547c:	154dc83a 	sub	r6,r2,r21
10005480:	3001281e 	bne	r6,zero,10005924 <_dtoa_r+0xf28>
10005484:	05c00044 	movi	r23,1
10005488:	8009883a 	mov	r4,r16
1000548c:	b80b883a 	mov	r5,r23
10005490:	00084600 	call	10008460 <__i2b>
10005494:	d8c00a17 	ldw	r3,40(sp)
10005498:	102b883a 	mov	r21,r2
1000549c:	00c0310e 	bge	zero,r3,10005564 <_dtoa_r+0xb68>
100054a0:	8009883a 	mov	r4,r16
100054a4:	100b883a 	mov	r5,r2
100054a8:	180d883a 	mov	r6,r3
100054ac:	000872c0 	call	1000872c <__pow5mult>
100054b0:	d9000317 	ldw	r4,12(sp)
100054b4:	102b883a 	mov	r21,r2
100054b8:	b9011f0e 	bge	r23,r4,10005938 <_dtoa_r+0xf3c>
100054bc:	0027883a 	mov	r19,zero
100054c0:	a8800417 	ldw	r2,16(r21)
100054c4:	10800104 	addi	r2,r2,4
100054c8:	1085883a 	add	r2,r2,r2
100054cc:	1085883a 	add	r2,r2,r2
100054d0:	a885883a 	add	r2,r21,r2
100054d4:	11000017 	ldw	r4,0(r2)
100054d8:	00083480 	call	10008348 <__hi0bits>
100054dc:	00c00804 	movi	r3,32
100054e0:	1885c83a 	sub	r2,r3,r2
100054e4:	00002506 	br	1000557c <_dtoa_r+0xb80>
100054e8:	01800044 	movi	r6,1
100054ec:	d9800c15 	stw	r6,48(sp)
100054f0:	003dec06 	br	10004ca4 <__alt_data_end+0xf8004ca4>
100054f4:	d8c00817 	ldw	r3,32(sp)
100054f8:	d9000517 	ldw	r4,20(sp)
100054fc:	d8000a15 	stw	zero,40(sp)
10005500:	1907c83a 	sub	r3,r3,r4
10005504:	010dc83a 	sub	r6,zero,r4
10005508:	d8c00815 	stw	r3,32(sp)
1000550c:	d9800915 	stw	r6,36(sp)
10005510:	003ded06 	br	10004cc8 <__alt_data_end+0xf8004cc8>
10005514:	05adc83a 	sub	r22,zero,r22
10005518:	dd800815 	stw	r22,32(sp)
1000551c:	002d883a 	mov	r22,zero
10005520:	003de406 	br	10004cb4 <__alt_data_end+0xf8004cb4>
10005524:	d9000517 	ldw	r4,20(sp)
10005528:	000ec500 	call	1000ec50 <__floatsidf>
1000552c:	1009883a 	mov	r4,r2
10005530:	180b883a 	mov	r5,r3
10005534:	b00d883a 	mov	r6,r22
10005538:	a80f883a 	mov	r7,r21
1000553c:	000d8480 	call	1000d848 <__eqdf2>
10005540:	103dc726 	beq	r2,zero,10004c60 <__alt_data_end+0xf8004c60>
10005544:	d8800517 	ldw	r2,20(sp)
10005548:	10bfffc4 	addi	r2,r2,-1
1000554c:	d8800515 	stw	r2,20(sp)
10005550:	003dc306 	br	10004c60 <__alt_data_end+0xf8004c60>
10005554:	dd400917 	ldw	r21,36(sp)
10005558:	dd000817 	ldw	r20,32(sp)
1000555c:	0023883a 	mov	r17,zero
10005560:	003fa906 	br	10005408 <__alt_data_end+0xf8005408>
10005564:	d9800317 	ldw	r6,12(sp)
10005568:	b981670e 	bge	r23,r6,10005b08 <_dtoa_r+0x110c>
1000556c:	0027883a 	mov	r19,zero
10005570:	d8c00a17 	ldw	r3,40(sp)
10005574:	183fd21e 	bne	r3,zero,100054c0 <__alt_data_end+0xf80054c0>
10005578:	00800044 	movi	r2,1
1000557c:	1585883a 	add	r2,r2,r22
10005580:	108007cc 	andi	r2,r2,31
10005584:	10005f26 	beq	r2,zero,10005704 <_dtoa_r+0xd08>
10005588:	00c00804 	movi	r3,32
1000558c:	1887c83a 	sub	r3,r3,r2
10005590:	01000104 	movi	r4,4
10005594:	20c2dd0e 	bge	r4,r3,1000610c <_dtoa_r+0x1710>
10005598:	d9000817 	ldw	r4,32(sp)
1000559c:	00c00704 	movi	r3,28
100055a0:	1885c83a 	sub	r2,r3,r2
100055a4:	2089883a 	add	r4,r4,r2
100055a8:	d9000815 	stw	r4,32(sp)
100055ac:	a0a9883a 	add	r20,r20,r2
100055b0:	b0ad883a 	add	r22,r22,r2
100055b4:	d8800817 	ldw	r2,32(sp)
100055b8:	0080050e 	bge	zero,r2,100055d0 <_dtoa_r+0xbd4>
100055bc:	e00b883a 	mov	r5,fp
100055c0:	8009883a 	mov	r4,r16
100055c4:	100d883a 	mov	r6,r2
100055c8:	000886c0 	call	1000886c <__lshift>
100055cc:	1039883a 	mov	fp,r2
100055d0:	0580050e 	bge	zero,r22,100055e8 <_dtoa_r+0xbec>
100055d4:	a80b883a 	mov	r5,r21
100055d8:	8009883a 	mov	r4,r16
100055dc:	b00d883a 	mov	r6,r22
100055e0:	000886c0 	call	1000886c <__lshift>
100055e4:	102b883a 	mov	r21,r2
100055e8:	d8c00c17 	ldw	r3,48(sp)
100055ec:	1801161e 	bne	r3,zero,10005a48 <_dtoa_r+0x104c>
100055f0:	d8c00617 	ldw	r3,24(sp)
100055f4:	00c12d0e 	bge	zero,r3,10005aac <_dtoa_r+0x10b0>
100055f8:	d8c00b17 	ldw	r3,44(sp)
100055fc:	1800571e 	bne	r3,zero,1000575c <_dtoa_r+0xd60>
10005600:	dc800717 	ldw	r18,28(sp)
10005604:	dcc00617 	ldw	r19,24(sp)
10005608:	9029883a 	mov	r20,r18
1000560c:	00000206 	br	10005618 <_dtoa_r+0xc1c>
10005610:	00081080 	call	10008108 <__multadd>
10005614:	1039883a 	mov	fp,r2
10005618:	e009883a 	mov	r4,fp
1000561c:	a80b883a 	mov	r5,r21
10005620:	00047d40 	call	100047d4 <quorem>
10005624:	10800c04 	addi	r2,r2,48
10005628:	90800005 	stb	r2,0(r18)
1000562c:	94800044 	addi	r18,r18,1
10005630:	9507c83a 	sub	r3,r18,r20
10005634:	8009883a 	mov	r4,r16
10005638:	e00b883a 	mov	r5,fp
1000563c:	01800284 	movi	r6,10
10005640:	000f883a 	mov	r7,zero
10005644:	1cfff216 	blt	r3,r19,10005610 <__alt_data_end+0xf8005610>
10005648:	1011883a 	mov	r8,r2
1000564c:	d8800617 	ldw	r2,24(sp)
10005650:	00822e0e 	bge	zero,r2,10005f0c <_dtoa_r+0x1510>
10005654:	d9000717 	ldw	r4,28(sp)
10005658:	0025883a 	mov	r18,zero
1000565c:	20af883a 	add	r23,r4,r2
10005660:	e00b883a 	mov	r5,fp
10005664:	01800044 	movi	r6,1
10005668:	8009883a 	mov	r4,r16
1000566c:	da001715 	stw	r8,92(sp)
10005670:	000886c0 	call	1000886c <__lshift>
10005674:	1009883a 	mov	r4,r2
10005678:	a80b883a 	mov	r5,r21
1000567c:	1039883a 	mov	fp,r2
10005680:	00089b40 	call	100089b4 <__mcmp>
10005684:	da001717 	ldw	r8,92(sp)
10005688:	00816e0e 	bge	zero,r2,10005c44 <_dtoa_r+0x1248>
1000568c:	b93fffc3 	ldbu	r4,-1(r23)
10005690:	b8bfffc4 	addi	r2,r23,-1
10005694:	1007883a 	mov	r3,r2
10005698:	01800e44 	movi	r6,57
1000569c:	d9c00717 	ldw	r7,28(sp)
100056a0:	00000506 	br	100056b8 <_dtoa_r+0xcbc>
100056a4:	18ffffc4 	addi	r3,r3,-1
100056a8:	38811926 	beq	r7,r2,10005b10 <_dtoa_r+0x1114>
100056ac:	19000003 	ldbu	r4,0(r3)
100056b0:	102f883a 	mov	r23,r2
100056b4:	10bfffc4 	addi	r2,r2,-1
100056b8:	21403fcc 	andi	r5,r4,255
100056bc:	2940201c 	xori	r5,r5,128
100056c0:	297fe004 	addi	r5,r5,-128
100056c4:	29bff726 	beq	r5,r6,100056a4 <__alt_data_end+0xf80056a4>
100056c8:	21000044 	addi	r4,r4,1
100056cc:	11000005 	stb	r4,0(r2)
100056d0:	8009883a 	mov	r4,r16
100056d4:	a80b883a 	mov	r5,r21
100056d8:	00080e00 	call	100080e0 <_Bfree>
100056dc:	883e7526 	beq	r17,zero,100050b4 <__alt_data_end+0xf80050b4>
100056e0:	90000426 	beq	r18,zero,100056f4 <_dtoa_r+0xcf8>
100056e4:	94400326 	beq	r18,r17,100056f4 <_dtoa_r+0xcf8>
100056e8:	8009883a 	mov	r4,r16
100056ec:	900b883a 	mov	r5,r18
100056f0:	00080e00 	call	100080e0 <_Bfree>
100056f4:	8009883a 	mov	r4,r16
100056f8:	880b883a 	mov	r5,r17
100056fc:	00080e00 	call	100080e0 <_Bfree>
10005700:	003e6c06 	br	100050b4 <__alt_data_end+0xf80050b4>
10005704:	00800704 	movi	r2,28
10005708:	d9800817 	ldw	r6,32(sp)
1000570c:	a0a9883a 	add	r20,r20,r2
10005710:	b0ad883a 	add	r22,r22,r2
10005714:	308d883a 	add	r6,r6,r2
10005718:	d9800815 	stw	r6,32(sp)
1000571c:	003fa506 	br	100055b4 <__alt_data_end+0xf80055b4>
10005720:	013efb84 	movi	r4,-1042
10005724:	246bc83a 	sub	r21,r4,r17
10005728:	9548983a 	sll	r4,r18,r21
1000572c:	003d1806 	br	10004b90 <__alt_data_end+0xf8004b90>
10005730:	d8000c15 	stw	zero,48(sp)
10005734:	003d5b06 	br	10004ca4 <__alt_data_end+0xf8004ca4>
10005738:	880b883a 	mov	r5,r17
1000573c:	8009883a 	mov	r4,r16
10005740:	01800284 	movi	r6,10
10005744:	000f883a 	mov	r7,zero
10005748:	00081080 	call	10008108 <__multadd>
1000574c:	1023883a 	mov	r17,r2
10005750:	d8800d17 	ldw	r2,52(sp)
10005754:	0082550e 	bge	zero,r2,100060ac <_dtoa_r+0x16b0>
10005758:	d8800615 	stw	r2,24(sp)
1000575c:	0500050e 	bge	zero,r20,10005774 <_dtoa_r+0xd78>
10005760:	880b883a 	mov	r5,r17
10005764:	8009883a 	mov	r4,r16
10005768:	a00d883a 	mov	r6,r20
1000576c:	000886c0 	call	1000886c <__lshift>
10005770:	1023883a 	mov	r17,r2
10005774:	98016a1e 	bne	r19,zero,10005d20 <_dtoa_r+0x1324>
10005778:	8829883a 	mov	r20,r17
1000577c:	d9000617 	ldw	r4,24(sp)
10005780:	dcc00717 	ldw	r19,28(sp)
10005784:	9480004c 	andi	r18,r18,1
10005788:	20bfffc4 	addi	r2,r4,-1
1000578c:	9885883a 	add	r2,r19,r2
10005790:	d8800415 	stw	r2,16(sp)
10005794:	dc800615 	stw	r18,24(sp)
10005798:	e009883a 	mov	r4,fp
1000579c:	a80b883a 	mov	r5,r21
100057a0:	00047d40 	call	100047d4 <quorem>
100057a4:	e009883a 	mov	r4,fp
100057a8:	880b883a 	mov	r5,r17
100057ac:	102f883a 	mov	r23,r2
100057b0:	00089b40 	call	100089b4 <__mcmp>
100057b4:	8009883a 	mov	r4,r16
100057b8:	a80b883a 	mov	r5,r21
100057bc:	a00d883a 	mov	r6,r20
100057c0:	102d883a 	mov	r22,r2
100057c4:	0008a140 	call	10008a14 <__mdiff>
100057c8:	1007883a 	mov	r3,r2
100057cc:	10800317 	ldw	r2,12(r2)
100057d0:	bc800c04 	addi	r18,r23,48
100057d4:	1000971e 	bne	r2,zero,10005a34 <_dtoa_r+0x1038>
100057d8:	180b883a 	mov	r5,r3
100057dc:	e009883a 	mov	r4,fp
100057e0:	d8c01515 	stw	r3,84(sp)
100057e4:	00089b40 	call	100089b4 <__mcmp>
100057e8:	d8c01517 	ldw	r3,84(sp)
100057ec:	8009883a 	mov	r4,r16
100057f0:	d8801515 	stw	r2,84(sp)
100057f4:	180b883a 	mov	r5,r3
100057f8:	00080e00 	call	100080e0 <_Bfree>
100057fc:	d8801517 	ldw	r2,84(sp)
10005800:	1000041e 	bne	r2,zero,10005814 <_dtoa_r+0xe18>
10005804:	d9800317 	ldw	r6,12(sp)
10005808:	3000021e 	bne	r6,zero,10005814 <_dtoa_r+0xe18>
1000580c:	d8c00617 	ldw	r3,24(sp)
10005810:	18007626 	beq	r3,zero,100059ec <_dtoa_r+0xff0>
10005814:	b0005b16 	blt	r22,zero,10005984 <_dtoa_r+0xf88>
10005818:	b000041e 	bne	r22,zero,1000582c <_dtoa_r+0xe30>
1000581c:	d9000317 	ldw	r4,12(sp)
10005820:	2000021e 	bne	r4,zero,1000582c <_dtoa_r+0xe30>
10005824:	d8c00617 	ldw	r3,24(sp)
10005828:	18005626 	beq	r3,zero,10005984 <_dtoa_r+0xf88>
1000582c:	00814d16 	blt	zero,r2,10005d64 <_dtoa_r+0x1368>
10005830:	d8c00417 	ldw	r3,16(sp)
10005834:	9d800044 	addi	r22,r19,1
10005838:	9c800005 	stb	r18,0(r19)
1000583c:	b02f883a 	mov	r23,r22
10005840:	98c14c26 	beq	r19,r3,10005d74 <_dtoa_r+0x1378>
10005844:	e00b883a 	mov	r5,fp
10005848:	8009883a 	mov	r4,r16
1000584c:	01800284 	movi	r6,10
10005850:	000f883a 	mov	r7,zero
10005854:	00081080 	call	10008108 <__multadd>
10005858:	1039883a 	mov	fp,r2
1000585c:	8d006d26 	beq	r17,r20,10005a14 <_dtoa_r+0x1018>
10005860:	880b883a 	mov	r5,r17
10005864:	01800284 	movi	r6,10
10005868:	000f883a 	mov	r7,zero
1000586c:	8009883a 	mov	r4,r16
10005870:	00081080 	call	10008108 <__multadd>
10005874:	a00b883a 	mov	r5,r20
10005878:	8009883a 	mov	r4,r16
1000587c:	01800284 	movi	r6,10
10005880:	000f883a 	mov	r7,zero
10005884:	1023883a 	mov	r17,r2
10005888:	00081080 	call	10008108 <__multadd>
1000588c:	1029883a 	mov	r20,r2
10005890:	b027883a 	mov	r19,r22
10005894:	003fc006 	br	10005798 <__alt_data_end+0xf8005798>
10005898:	a005883a 	mov	r2,r20
1000589c:	003ede06 	br	10005418 <__alt_data_end+0xf8005418>
100058a0:	01000044 	movi	r4,1
100058a4:	d9000b15 	stw	r4,44(sp)
100058a8:	d9802217 	ldw	r6,136(sp)
100058ac:	0180dc0e 	bge	zero,r6,10005c20 <_dtoa_r+0x1224>
100058b0:	3023883a 	mov	r17,r6
100058b4:	d9800d15 	stw	r6,52(sp)
100058b8:	d9800615 	stw	r6,24(sp)
100058bc:	003d1e06 	br	10004d38 <__alt_data_end+0xf8004d38>
100058c0:	d8800617 	ldw	r2,24(sp)
100058c4:	00be3716 	blt	zero,r2,100051a4 <__alt_data_end+0xf80051a4>
100058c8:	1000be1e 	bne	r2,zero,10005bc4 <_dtoa_r+0x11c8>
100058cc:	8809883a 	mov	r4,r17
100058d0:	a00b883a 	mov	r5,r20
100058d4:	000d883a 	mov	r6,zero
100058d8:	01d00534 	movhi	r7,16404
100058dc:	000da8c0 	call	1000da8c <__muldf3>
100058e0:	1009883a 	mov	r4,r2
100058e4:	180b883a 	mov	r5,r3
100058e8:	900d883a 	mov	r6,r18
100058ec:	980f883a 	mov	r7,r19
100058f0:	000d8cc0 	call	1000d8cc <__gedf2>
100058f4:	002b883a 	mov	r21,zero
100058f8:	0023883a 	mov	r17,zero
100058fc:	10007a16 	blt	r2,zero,10005ae8 <_dtoa_r+0x10ec>
10005900:	d9002217 	ldw	r4,136(sp)
10005904:	ddc00717 	ldw	r23,28(sp)
10005908:	0108303a 	nor	r4,zero,r4
1000590c:	d9000515 	stw	r4,20(sp)
10005910:	8009883a 	mov	r4,r16
10005914:	a80b883a 	mov	r5,r21
10005918:	00080e00 	call	100080e0 <_Bfree>
1000591c:	883f751e 	bne	r17,zero,100056f4 <__alt_data_end+0xf80056f4>
10005920:	003de406 	br	100050b4 <__alt_data_end+0xf80050b4>
10005924:	e00b883a 	mov	r5,fp
10005928:	8009883a 	mov	r4,r16
1000592c:	000872c0 	call	1000872c <__pow5mult>
10005930:	1039883a 	mov	fp,r2
10005934:	003ed306 	br	10005484 <__alt_data_end+0xf8005484>
10005938:	903ee01e 	bne	r18,zero,100054bc <__alt_data_end+0xf80054bc>
1000593c:	00800434 	movhi	r2,16
10005940:	10bfffc4 	addi	r2,r2,-1
10005944:	9884703a 	and	r2,r19,r2
10005948:	103f081e 	bne	r2,zero,1000556c <__alt_data_end+0xf800556c>
1000594c:	9cdffc2c 	andhi	r19,r19,32752
10005950:	983f0626 	beq	r19,zero,1000556c <__alt_data_end+0xf800556c>
10005954:	d8800817 	ldw	r2,32(sp)
10005958:	b5800044 	addi	r22,r22,1
1000595c:	04c00044 	movi	r19,1
10005960:	10800044 	addi	r2,r2,1
10005964:	d8800815 	stw	r2,32(sp)
10005968:	003f0106 	br	10005570 <__alt_data_end+0xf8005570>
1000596c:	d9800f17 	ldw	r6,60(sp)
10005970:	30016826 	beq	r6,zero,10005f14 <_dtoa_r+0x1518>
10005974:	10810cc4 	addi	r2,r2,1075
10005978:	dd400917 	ldw	r21,36(sp)
1000597c:	dd000817 	ldw	r20,32(sp)
10005980:	003e9906 	br	100053e8 <__alt_data_end+0xf80053e8>
10005984:	9011883a 	mov	r8,r18
10005988:	4007883a 	mov	r3,r8
1000598c:	e02d883a 	mov	r22,fp
10005990:	0080100e 	bge	zero,r2,100059d4 <_dtoa_r+0xfd8>
10005994:	01800044 	movi	r6,1
10005998:	8009883a 	mov	r4,r16
1000599c:	e00b883a 	mov	r5,fp
100059a0:	da001515 	stw	r8,84(sp)
100059a4:	da001715 	stw	r8,92(sp)
100059a8:	000886c0 	call	1000886c <__lshift>
100059ac:	1009883a 	mov	r4,r2
100059b0:	a80b883a 	mov	r5,r21
100059b4:	102d883a 	mov	r22,r2
100059b8:	00089b40 	call	100089b4 <__mcmp>
100059bc:	d8c01517 	ldw	r3,84(sp)
100059c0:	da001717 	ldw	r8,92(sp)
100059c4:	0081a50e 	bge	zero,r2,1000605c <_dtoa_r+0x1660>
100059c8:	00800e44 	movi	r2,57
100059cc:	40817b26 	beq	r8,r2,10005fbc <_dtoa_r+0x15c0>
100059d0:	40c00044 	addi	r3,r8,1
100059d4:	8825883a 	mov	r18,r17
100059d8:	9dc00044 	addi	r23,r19,1
100059dc:	98c00005 	stb	r3,0(r19)
100059e0:	a023883a 	mov	r17,r20
100059e4:	b039883a 	mov	fp,r22
100059e8:	003f3906 	br	100056d0 <__alt_data_end+0xf80056d0>
100059ec:	00800e44 	movi	r2,57
100059f0:	9011883a 	mov	r8,r18
100059f4:	90817226 	beq	r18,r2,10005fc0 <_dtoa_r+0x15c4>
100059f8:	0580010e 	bge	zero,r22,10005a00 <_dtoa_r+0x1004>
100059fc:	ba000c44 	addi	r8,r23,49
10005a00:	8825883a 	mov	r18,r17
10005a04:	9dc00044 	addi	r23,r19,1
10005a08:	9a000005 	stb	r8,0(r19)
10005a0c:	a023883a 	mov	r17,r20
10005a10:	003f2f06 	br	100056d0 <__alt_data_end+0xf80056d0>
10005a14:	880b883a 	mov	r5,r17
10005a18:	8009883a 	mov	r4,r16
10005a1c:	01800284 	movi	r6,10
10005a20:	000f883a 	mov	r7,zero
10005a24:	00081080 	call	10008108 <__multadd>
10005a28:	1023883a 	mov	r17,r2
10005a2c:	1029883a 	mov	r20,r2
10005a30:	003f9706 	br	10005890 <__alt_data_end+0xf8005890>
10005a34:	8009883a 	mov	r4,r16
10005a38:	180b883a 	mov	r5,r3
10005a3c:	00080e00 	call	100080e0 <_Bfree>
10005a40:	00800044 	movi	r2,1
10005a44:	003f7306 	br	10005814 <__alt_data_end+0xf8005814>
10005a48:	e009883a 	mov	r4,fp
10005a4c:	a80b883a 	mov	r5,r21
10005a50:	00089b40 	call	100089b4 <__mcmp>
10005a54:	103ee60e 	bge	r2,zero,100055f0 <__alt_data_end+0xf80055f0>
10005a58:	8009883a 	mov	r4,r16
10005a5c:	e00b883a 	mov	r5,fp
10005a60:	01800284 	movi	r6,10
10005a64:	000f883a 	mov	r7,zero
10005a68:	00081080 	call	10008108 <__multadd>
10005a6c:	d9000517 	ldw	r4,20(sp)
10005a70:	d9800b17 	ldw	r6,44(sp)
10005a74:	1039883a 	mov	fp,r2
10005a78:	213fffc4 	addi	r4,r4,-1
10005a7c:	d9000515 	stw	r4,20(sp)
10005a80:	303f2d1e 	bne	r6,zero,10005738 <__alt_data_end+0xf8005738>
10005a84:	d9000d17 	ldw	r4,52(sp)
10005a88:	0101780e 	bge	zero,r4,1000606c <_dtoa_r+0x1670>
10005a8c:	d9000615 	stw	r4,24(sp)
10005a90:	003edb06 	br	10005600 <__alt_data_end+0xf8005600>
10005a94:	00800084 	movi	r2,2
10005a98:	30818e1e 	bne	r6,r2,100060d4 <_dtoa_r+0x16d8>
10005a9c:	d8000b15 	stw	zero,44(sp)
10005aa0:	003f8106 	br	100058a8 <__alt_data_end+0xf80058a8>
10005aa4:	d8800717 	ldw	r2,28(sp)
10005aa8:	003c0306 	br	10004ab8 <__alt_data_end+0xf8004ab8>
10005aac:	d9000317 	ldw	r4,12(sp)
10005ab0:	00800084 	movi	r2,2
10005ab4:	113ed00e 	bge	r2,r4,100055f8 <__alt_data_end+0xf80055f8>
10005ab8:	d8c00617 	ldw	r3,24(sp)
10005abc:	183f901e 	bne	r3,zero,10005900 <__alt_data_end+0xf8005900>
10005ac0:	a80b883a 	mov	r5,r21
10005ac4:	8009883a 	mov	r4,r16
10005ac8:	01800144 	movi	r6,5
10005acc:	000f883a 	mov	r7,zero
10005ad0:	00081080 	call	10008108 <__multadd>
10005ad4:	e009883a 	mov	r4,fp
10005ad8:	100b883a 	mov	r5,r2
10005adc:	102b883a 	mov	r21,r2
10005ae0:	00089b40 	call	100089b4 <__mcmp>
10005ae4:	00bf860e 	bge	zero,r2,10005900 <__alt_data_end+0xf8005900>
10005ae8:	d9800717 	ldw	r6,28(sp)
10005aec:	00800c44 	movi	r2,49
10005af0:	30800005 	stb	r2,0(r6)
10005af4:	d8800517 	ldw	r2,20(sp)
10005af8:	35c00044 	addi	r23,r6,1
10005afc:	10800044 	addi	r2,r2,1
10005b00:	d8800515 	stw	r2,20(sp)
10005b04:	003f8206 	br	10005910 <__alt_data_end+0xf8005910>
10005b08:	903e981e 	bne	r18,zero,1000556c <__alt_data_end+0xf800556c>
10005b0c:	003f8b06 	br	1000593c <__alt_data_end+0xf800593c>
10005b10:	d9800517 	ldw	r6,20(sp)
10005b14:	d8c00717 	ldw	r3,28(sp)
10005b18:	00800c44 	movi	r2,49
10005b1c:	31800044 	addi	r6,r6,1
10005b20:	d9800515 	stw	r6,20(sp)
10005b24:	18800005 	stb	r2,0(r3)
10005b28:	003ee906 	br	100056d0 <__alt_data_end+0xf80056d0>
10005b2c:	dc000317 	ldw	r16,12(sp)
10005b30:	003d6006 	br	100050b4 <__alt_data_end+0xf80050b4>
10005b34:	8809883a 	mov	r4,r17
10005b38:	000ec500 	call	1000ec50 <__floatsidf>
10005b3c:	a009883a 	mov	r4,r20
10005b40:	a80b883a 	mov	r5,r21
10005b44:	100d883a 	mov	r6,r2
10005b48:	180f883a 	mov	r7,r3
10005b4c:	000da8c0 	call	1000da8c <__muldf3>
10005b50:	1009883a 	mov	r4,r2
10005b54:	180b883a 	mov	r5,r3
10005b58:	000d883a 	mov	r6,zero
10005b5c:	01d00734 	movhi	r7,16412
10005b60:	000c62c0 	call	1000c62c <__adddf3>
10005b64:	1023883a 	mov	r17,r2
10005b68:	00bf3034 	movhi	r2,64704
10005b6c:	1885883a 	add	r2,r3,r2
10005b70:	d8800e15 	stw	r2,56(sp)
10005b74:	a009883a 	mov	r4,r20
10005b78:	a80b883a 	mov	r5,r21
10005b7c:	000d883a 	mov	r6,zero
10005b80:	01d00534 	movhi	r7,16404
10005b84:	000e2f80 	call	1000e2f8 <__subdf3>
10005b88:	d9c00e17 	ldw	r7,56(sp)
10005b8c:	1009883a 	mov	r4,r2
10005b90:	180b883a 	mov	r5,r3
10005b94:	880d883a 	mov	r6,r17
10005b98:	102b883a 	mov	r21,r2
10005b9c:	1829883a 	mov	r20,r3
10005ba0:	000d8cc0 	call	1000d8cc <__gedf2>
10005ba4:	00807716 	blt	zero,r2,10005d84 <_dtoa_r+0x1388>
10005ba8:	d8800e17 	ldw	r2,56(sp)
10005bac:	a809883a 	mov	r4,r21
10005bb0:	a00b883a 	mov	r5,r20
10005bb4:	11e0003c 	xorhi	r7,r2,32768
10005bb8:	880d883a 	mov	r6,r17
10005bbc:	000d9ac0 	call	1000d9ac <__ledf2>
10005bc0:	103d6b0e 	bge	r2,zero,10005170 <__alt_data_end+0xf8005170>
10005bc4:	002b883a 	mov	r21,zero
10005bc8:	0023883a 	mov	r17,zero
10005bcc:	003f4c06 	br	10005900 <__alt_data_end+0xf8005900>
10005bd0:	d9800917 	ldw	r6,36(sp)
10005bd4:	e00b883a 	mov	r5,fp
10005bd8:	8009883a 	mov	r4,r16
10005bdc:	000872c0 	call	1000872c <__pow5mult>
10005be0:	1039883a 	mov	fp,r2
10005be4:	003e2706 	br	10005484 <__alt_data_end+0xf8005484>
10005be8:	d8000b15 	stw	zero,44(sp)
10005bec:	003c4906 	br	10004d14 <__alt_data_end+0xf8004d14>
10005bf0:	d9000917 	ldw	r4,36(sp)
10005bf4:	d9800a17 	ldw	r6,40(sp)
10005bf8:	dd400915 	stw	r21,36(sp)
10005bfc:	a905c83a 	sub	r2,r21,r4
10005c00:	308d883a 	add	r6,r6,r2
10005c04:	d9800a15 	stw	r6,40(sp)
10005c08:	002b883a 	mov	r21,zero
10005c0c:	003df206 	br	100053d8 <__alt_data_end+0xf80053d8>
10005c10:	dc800e15 	stw	r18,56(sp)
10005c14:	982b883a 	mov	r21,r19
10005c18:	04400084 	movi	r17,2
10005c1c:	003c7406 	br	10004df0 <__alt_data_end+0xf8004df0>
10005c20:	04400044 	movi	r17,1
10005c24:	dc400d15 	stw	r17,52(sp)
10005c28:	dc400615 	stw	r17,24(sp)
10005c2c:	dc402215 	stw	r17,136(sp)
10005c30:	80001115 	stw	zero,68(r16)
10005c34:	000b883a 	mov	r5,zero
10005c38:	003c4a06 	br	10004d64 <__alt_data_end+0xf8004d64>
10005c3c:	3023883a 	mov	r17,r6
10005c40:	003ffb06 	br	10005c30 <__alt_data_end+0xf8005c30>
10005c44:	1000021e 	bne	r2,zero,10005c50 <_dtoa_r+0x1254>
10005c48:	4200004c 	andi	r8,r8,1
10005c4c:	403e8f1e 	bne	r8,zero,1000568c <__alt_data_end+0xf800568c>
10005c50:	01000c04 	movi	r4,48
10005c54:	00000106 	br	10005c5c <_dtoa_r+0x1260>
10005c58:	102f883a 	mov	r23,r2
10005c5c:	b8bfffc4 	addi	r2,r23,-1
10005c60:	10c00007 	ldb	r3,0(r2)
10005c64:	193ffc26 	beq	r3,r4,10005c58 <__alt_data_end+0xf8005c58>
10005c68:	003e9906 	br	100056d0 <__alt_data_end+0xf80056d0>
10005c6c:	d9000517 	ldw	r4,20(sp)
10005c70:	012fc83a 	sub	r23,zero,r4
10005c74:	b800ad26 	beq	r23,zero,10005f2c <_dtoa_r+0x1530>
10005c78:	b88003cc 	andi	r2,r23,15
10005c7c:	100490fa 	slli	r2,r2,3
10005c80:	00c40074 	movhi	r3,4097
10005c84:	18c7b204 	addi	r3,r3,7880
10005c88:	1885883a 	add	r2,r3,r2
10005c8c:	11800017 	ldw	r6,0(r2)
10005c90:	11c00117 	ldw	r7,4(r2)
10005c94:	b82fd13a 	srai	r23,r23,4
10005c98:	9009883a 	mov	r4,r18
10005c9c:	980b883a 	mov	r5,r19
10005ca0:	000da8c0 	call	1000da8c <__muldf3>
10005ca4:	1029883a 	mov	r20,r2
10005ca8:	182b883a 	mov	r21,r3
10005cac:	b800f426 	beq	r23,zero,10006080 <_dtoa_r+0x1684>
10005cb0:	02040074 	movhi	r8,4097
10005cb4:	4207a804 	addi	r8,r8,7840
10005cb8:	8029883a 	mov	r20,r16
10005cbc:	04400084 	movi	r17,2
10005cc0:	4021883a 	mov	r16,r8
10005cc4:	b980004c 	andi	r6,r23,1
10005cc8:	1009883a 	mov	r4,r2
10005ccc:	b82fd07a 	srai	r23,r23,1
10005cd0:	180b883a 	mov	r5,r3
10005cd4:	30000426 	beq	r6,zero,10005ce8 <_dtoa_r+0x12ec>
10005cd8:	81800017 	ldw	r6,0(r16)
10005cdc:	81c00117 	ldw	r7,4(r16)
10005ce0:	8c400044 	addi	r17,r17,1
10005ce4:	000da8c0 	call	1000da8c <__muldf3>
10005ce8:	84000204 	addi	r16,r16,8
10005cec:	b83ff51e 	bne	r23,zero,10005cc4 <__alt_data_end+0xf8005cc4>
10005cf0:	a021883a 	mov	r16,r20
10005cf4:	182b883a 	mov	r21,r3
10005cf8:	1029883a 	mov	r20,r2
10005cfc:	003c5506 	br	10004e54 <__alt_data_end+0xf8004e54>
10005d00:	d9800517 	ldw	r6,20(sp)
10005d04:	d9000717 	ldw	r4,28(sp)
10005d08:	00c00c04 	movi	r3,48
10005d0c:	31800044 	addi	r6,r6,1
10005d10:	d9800515 	stw	r6,20(sp)
10005d14:	20c00005 	stb	r3,0(r4)
10005d18:	02000c44 	movi	r8,49
10005d1c:	003da206 	br	100053a8 <__alt_data_end+0xf80053a8>
10005d20:	89400117 	ldw	r5,4(r17)
10005d24:	8009883a 	mov	r4,r16
10005d28:	00080380 	call	10008038 <_Balloc>
10005d2c:	89800417 	ldw	r6,16(r17)
10005d30:	11000304 	addi	r4,r2,12
10005d34:	89400304 	addi	r5,r17,12
10005d38:	31800084 	addi	r6,r6,2
10005d3c:	318d883a 	add	r6,r6,r6
10005d40:	318d883a 	add	r6,r6,r6
10005d44:	1027883a 	mov	r19,r2
10005d48:	0007c800 	call	10007c80 <memcpy>
10005d4c:	8009883a 	mov	r4,r16
10005d50:	980b883a 	mov	r5,r19
10005d54:	01800044 	movi	r6,1
10005d58:	000886c0 	call	1000886c <__lshift>
10005d5c:	1029883a 	mov	r20,r2
10005d60:	003e8606 	br	1000577c <__alt_data_end+0xf800577c>
10005d64:	00800e44 	movi	r2,57
10005d68:	90809526 	beq	r18,r2,10005fc0 <_dtoa_r+0x15c4>
10005d6c:	92000044 	addi	r8,r18,1
10005d70:	003f2306 	br	10005a00 <__alt_data_end+0xf8005a00>
10005d74:	9011883a 	mov	r8,r18
10005d78:	8825883a 	mov	r18,r17
10005d7c:	a023883a 	mov	r17,r20
10005d80:	003e3706 	br	10005660 <__alt_data_end+0xf8005660>
10005d84:	002b883a 	mov	r21,zero
10005d88:	0023883a 	mov	r17,zero
10005d8c:	003f5606 	br	10005ae8 <__alt_data_end+0xf8005ae8>
10005d90:	51bfffc4 	addi	r6,r10,-1
10005d94:	300490fa 	slli	r2,r6,3
10005d98:	00c40074 	movhi	r3,4097
10005d9c:	18c7b204 	addi	r3,r3,7880
10005da0:	1885883a 	add	r2,r3,r2
10005da4:	d9c00e17 	ldw	r7,56(sp)
10005da8:	11000017 	ldw	r4,0(r2)
10005dac:	11400117 	ldw	r5,4(r2)
10005db0:	d8800717 	ldw	r2,28(sp)
10005db4:	d9801015 	stw	r6,64(sp)
10005db8:	880d883a 	mov	r6,r17
10005dbc:	da801615 	stw	r10,88(sp)
10005dc0:	15c00044 	addi	r23,r2,1
10005dc4:	000da8c0 	call	1000da8c <__muldf3>
10005dc8:	a80b883a 	mov	r5,r21
10005dcc:	a009883a 	mov	r4,r20
10005dd0:	d8c01115 	stw	r3,68(sp)
10005dd4:	d8800e15 	stw	r2,56(sp)
10005dd8:	000ebc80 	call	1000ebc8 <__fixdfsi>
10005ddc:	1009883a 	mov	r4,r2
10005de0:	1023883a 	mov	r17,r2
10005de4:	000ec500 	call	1000ec50 <__floatsidf>
10005de8:	a009883a 	mov	r4,r20
10005dec:	a80b883a 	mov	r5,r21
10005df0:	100d883a 	mov	r6,r2
10005df4:	180f883a 	mov	r7,r3
10005df8:	000e2f80 	call	1000e2f8 <__subdf3>
10005dfc:	1813883a 	mov	r9,r3
10005e00:	d8c00717 	ldw	r3,28(sp)
10005e04:	8c400c04 	addi	r17,r17,48
10005e08:	1011883a 	mov	r8,r2
10005e0c:	1c400005 	stb	r17,0(r3)
10005e10:	da801617 	ldw	r10,88(sp)
10005e14:	00800044 	movi	r2,1
10005e18:	50802326 	beq	r10,r2,10005ea8 <_dtoa_r+0x14ac>
10005e1c:	d8800717 	ldw	r2,28(sp)
10005e20:	b82b883a 	mov	r21,r23
10005e24:	dc001315 	stw	r16,76(sp)
10005e28:	12a9883a 	add	r20,r2,r10
10005e2c:	4807883a 	mov	r3,r9
10005e30:	4005883a 	mov	r2,r8
10005e34:	dc801415 	stw	r18,80(sp)
10005e38:	000d883a 	mov	r6,zero
10005e3c:	01d00934 	movhi	r7,16420
10005e40:	1009883a 	mov	r4,r2
10005e44:	180b883a 	mov	r5,r3
10005e48:	000da8c0 	call	1000da8c <__muldf3>
10005e4c:	180b883a 	mov	r5,r3
10005e50:	1009883a 	mov	r4,r2
10005e54:	1821883a 	mov	r16,r3
10005e58:	1025883a 	mov	r18,r2
10005e5c:	000ebc80 	call	1000ebc8 <__fixdfsi>
10005e60:	1009883a 	mov	r4,r2
10005e64:	1023883a 	mov	r17,r2
10005e68:	000ec500 	call	1000ec50 <__floatsidf>
10005e6c:	9009883a 	mov	r4,r18
10005e70:	800b883a 	mov	r5,r16
10005e74:	100d883a 	mov	r6,r2
10005e78:	180f883a 	mov	r7,r3
10005e7c:	8c400c04 	addi	r17,r17,48
10005e80:	000e2f80 	call	1000e2f8 <__subdf3>
10005e84:	ad400044 	addi	r21,r21,1
10005e88:	ac7fffc5 	stb	r17,-1(r21)
10005e8c:	ad3fea1e 	bne	r21,r20,10005e38 <__alt_data_end+0xf8005e38>
10005e90:	1813883a 	mov	r9,r3
10005e94:	d8c01017 	ldw	r3,64(sp)
10005e98:	dc001317 	ldw	r16,76(sp)
10005e9c:	dc801417 	ldw	r18,80(sp)
10005ea0:	1011883a 	mov	r8,r2
10005ea4:	b8ef883a 	add	r23,r23,r3
10005ea8:	d9000e17 	ldw	r4,56(sp)
10005eac:	d9401117 	ldw	r5,68(sp)
10005eb0:	000d883a 	mov	r6,zero
10005eb4:	01cff834 	movhi	r7,16352
10005eb8:	da001715 	stw	r8,92(sp)
10005ebc:	da401515 	stw	r9,84(sp)
10005ec0:	000c62c0 	call	1000c62c <__adddf3>
10005ec4:	da001717 	ldw	r8,92(sp)
10005ec8:	da401517 	ldw	r9,84(sp)
10005ecc:	1009883a 	mov	r4,r2
10005ed0:	400d883a 	mov	r6,r8
10005ed4:	480f883a 	mov	r7,r9
10005ed8:	180b883a 	mov	r5,r3
10005edc:	000d9ac0 	call	1000d9ac <__ledf2>
10005ee0:	da001717 	ldw	r8,92(sp)
10005ee4:	da401517 	ldw	r9,84(sp)
10005ee8:	10003b0e 	bge	r2,zero,10005fd8 <_dtoa_r+0x15dc>
10005eec:	d9001217 	ldw	r4,72(sp)
10005ef0:	bd7fffc3 	ldbu	r21,-1(r23)
10005ef4:	d9000515 	stw	r4,20(sp)
10005ef8:	003d1c06 	br	1000536c <__alt_data_end+0xf800536c>
10005efc:	d8c00817 	ldw	r3,32(sp)
10005f00:	18a9c83a 	sub	r20,r3,r2
10005f04:	0005883a 	mov	r2,zero
10005f08:	003d3706 	br	100053e8 <__alt_data_end+0xf80053e8>
10005f0c:	00800044 	movi	r2,1
10005f10:	003dd006 	br	10005654 <__alt_data_end+0xf8005654>
10005f14:	d8c00217 	ldw	r3,8(sp)
10005f18:	00800d84 	movi	r2,54
10005f1c:	dd400917 	ldw	r21,36(sp)
10005f20:	10c5c83a 	sub	r2,r2,r3
10005f24:	dd000817 	ldw	r20,32(sp)
10005f28:	003d2f06 	br	100053e8 <__alt_data_end+0xf80053e8>
10005f2c:	9029883a 	mov	r20,r18
10005f30:	982b883a 	mov	r21,r19
10005f34:	04400084 	movi	r17,2
10005f38:	003bc606 	br	10004e54 <__alt_data_end+0xf8004e54>
10005f3c:	d8800617 	ldw	r2,24(sp)
10005f40:	103efc26 	beq	r2,zero,10005b34 <__alt_data_end+0xf8005b34>
10005f44:	d8c00d17 	ldw	r3,52(sp)
10005f48:	00fc890e 	bge	zero,r3,10005170 <__alt_data_end+0xf8005170>
10005f4c:	a80b883a 	mov	r5,r21
10005f50:	a009883a 	mov	r4,r20
10005f54:	000d883a 	mov	r6,zero
10005f58:	01d00934 	movhi	r7,16420
10005f5c:	000da8c0 	call	1000da8c <__muldf3>
10005f60:	89000044 	addi	r4,r17,1
10005f64:	1029883a 	mov	r20,r2
10005f68:	182b883a 	mov	r21,r3
10005f6c:	000ec500 	call	1000ec50 <__floatsidf>
10005f70:	a009883a 	mov	r4,r20
10005f74:	a80b883a 	mov	r5,r21
10005f78:	100d883a 	mov	r6,r2
10005f7c:	180f883a 	mov	r7,r3
10005f80:	000da8c0 	call	1000da8c <__muldf3>
10005f84:	1009883a 	mov	r4,r2
10005f88:	180b883a 	mov	r5,r3
10005f8c:	000d883a 	mov	r6,zero
10005f90:	01d00734 	movhi	r7,16412
10005f94:	000c62c0 	call	1000c62c <__adddf3>
10005f98:	d9000517 	ldw	r4,20(sp)
10005f9c:	1023883a 	mov	r17,r2
10005fa0:	00bf3034 	movhi	r2,64704
10005fa4:	213fffc4 	addi	r4,r4,-1
10005fa8:	1885883a 	add	r2,r3,r2
10005fac:	d9001215 	stw	r4,72(sp)
10005fb0:	d8800e15 	stw	r2,56(sp)
10005fb4:	da800d17 	ldw	r10,52(sp)
10005fb8:	003bc306 	br	10004ec8 <__alt_data_end+0xf8004ec8>
10005fbc:	b039883a 	mov	fp,r22
10005fc0:	01000e44 	movi	r4,57
10005fc4:	8825883a 	mov	r18,r17
10005fc8:	9dc00044 	addi	r23,r19,1
10005fcc:	99000005 	stb	r4,0(r19)
10005fd0:	a023883a 	mov	r17,r20
10005fd4:	003dae06 	br	10005690 <__alt_data_end+0xf8005690>
10005fd8:	d9800e17 	ldw	r6,56(sp)
10005fdc:	d9c01117 	ldw	r7,68(sp)
10005fe0:	0009883a 	mov	r4,zero
10005fe4:	014ff834 	movhi	r5,16352
10005fe8:	da001715 	stw	r8,92(sp)
10005fec:	da401515 	stw	r9,84(sp)
10005ff0:	000e2f80 	call	1000e2f8 <__subdf3>
10005ff4:	da001717 	ldw	r8,92(sp)
10005ff8:	da401517 	ldw	r9,84(sp)
10005ffc:	1009883a 	mov	r4,r2
10006000:	180b883a 	mov	r5,r3
10006004:	400d883a 	mov	r6,r8
10006008:	480f883a 	mov	r7,r9
1000600c:	000d8cc0 	call	1000d8cc <__gedf2>
10006010:	00bc570e 	bge	zero,r2,10005170 <__alt_data_end+0xf8005170>
10006014:	01000c04 	movi	r4,48
10006018:	00000106 	br	10006020 <_dtoa_r+0x1624>
1000601c:	102f883a 	mov	r23,r2
10006020:	b8bfffc4 	addi	r2,r23,-1
10006024:	10c00007 	ldb	r3,0(r2)
10006028:	193ffc26 	beq	r3,r4,1000601c <__alt_data_end+0xf800601c>
1000602c:	d9801217 	ldw	r6,72(sp)
10006030:	d9800515 	stw	r6,20(sp)
10006034:	003c1f06 	br	100050b4 <__alt_data_end+0xf80050b4>
10006038:	d8801217 	ldw	r2,72(sp)
1000603c:	dc001117 	ldw	r16,68(sp)
10006040:	d8800515 	stw	r2,20(sp)
10006044:	003cc906 	br	1000536c <__alt_data_end+0xf800536c>
10006048:	dd801317 	ldw	r22,76(sp)
1000604c:	dc001117 	ldw	r16,68(sp)
10006050:	dcc01417 	ldw	r19,80(sp)
10006054:	dc801017 	ldw	r18,64(sp)
10006058:	003c4506 	br	10005170 <__alt_data_end+0xf8005170>
1000605c:	103e5d1e 	bne	r2,zero,100059d4 <__alt_data_end+0xf80059d4>
10006060:	4080004c 	andi	r2,r8,1
10006064:	103e5b26 	beq	r2,zero,100059d4 <__alt_data_end+0xf80059d4>
10006068:	003e5706 	br	100059c8 <__alt_data_end+0xf80059c8>
1000606c:	d8c00317 	ldw	r3,12(sp)
10006070:	00800084 	movi	r2,2
10006074:	10c00a16 	blt	r2,r3,100060a0 <_dtoa_r+0x16a4>
10006078:	d9000d17 	ldw	r4,52(sp)
1000607c:	003e8306 	br	10005a8c <__alt_data_end+0xf8005a8c>
10006080:	04400084 	movi	r17,2
10006084:	003b7306 	br	10004e54 <__alt_data_end+0xf8004e54>
10006088:	d9801217 	ldw	r6,72(sp)
1000608c:	d9800515 	stw	r6,20(sp)
10006090:	003cb606 	br	1000536c <__alt_data_end+0xf800536c>
10006094:	d9001217 	ldw	r4,72(sp)
10006098:	d9000515 	stw	r4,20(sp)
1000609c:	003c0506 	br	100050b4 <__alt_data_end+0xf80050b4>
100060a0:	d9800d17 	ldw	r6,52(sp)
100060a4:	d9800615 	stw	r6,24(sp)
100060a8:	003e8306 	br	10005ab8 <__alt_data_end+0xf8005ab8>
100060ac:	d9800317 	ldw	r6,12(sp)
100060b0:	00800084 	movi	r2,2
100060b4:	11800216 	blt	r2,r6,100060c0 <_dtoa_r+0x16c4>
100060b8:	d8800d17 	ldw	r2,52(sp)
100060bc:	003da606 	br	10005758 <__alt_data_end+0xf8005758>
100060c0:	d8800d17 	ldw	r2,52(sp)
100060c4:	d8800615 	stw	r2,24(sp)
100060c8:	003e7b06 	br	10005ab8 <__alt_data_end+0xf8005ab8>
100060cc:	05000044 	movi	r20,1
100060d0:	003b0506 	br	10004ce8 <__alt_data_end+0xf8004ce8>
100060d4:	8009883a 	mov	r4,r16
100060d8:	80001115 	stw	zero,68(r16)
100060dc:	000b883a 	mov	r5,zero
100060e0:	00080380 	call	10008038 <_Balloc>
100060e4:	d8800715 	stw	r2,28(sp)
100060e8:	d8c00717 	ldw	r3,28(sp)
100060ec:	00bfffc4 	movi	r2,-1
100060f0:	01000044 	movi	r4,1
100060f4:	d8800615 	stw	r2,24(sp)
100060f8:	80c01015 	stw	r3,64(r16)
100060fc:	d9000b15 	stw	r4,44(sp)
10006100:	d8002215 	stw	zero,136(sp)
10006104:	d8800d15 	stw	r2,52(sp)
10006108:	003c1906 	br	10005170 <__alt_data_end+0xf8005170>
1000610c:	193d2926 	beq	r3,r4,100055b4 <__alt_data_end+0xf80055b4>
10006110:	00c00f04 	movi	r3,60
10006114:	1885c83a 	sub	r2,r3,r2
10006118:	003d7b06 	br	10005708 <__alt_data_end+0xf8005708>
1000611c:	000b883a 	mov	r5,zero
10006120:	003b1006 	br	10004d64 <__alt_data_end+0xf8004d64>

10006124 <_fflush_r>:
10006124:	defffb04 	addi	sp,sp,-20
10006128:	dcc00315 	stw	r19,12(sp)
1000612c:	dc000015 	stw	r16,0(sp)
10006130:	dfc00415 	stw	ra,16(sp)
10006134:	dc800215 	stw	r18,8(sp)
10006138:	dc400115 	stw	r17,4(sp)
1000613c:	2027883a 	mov	r19,r4
10006140:	2821883a 	mov	r16,r5
10006144:	20000226 	beq	r4,zero,10006150 <_fflush_r+0x2c>
10006148:	20800e17 	ldw	r2,56(r4)
1000614c:	10005326 	beq	r2,zero,1000629c <_fflush_r+0x178>
10006150:	8080030b 	ldhu	r2,12(r16)
10006154:	10ffffcc 	andi	r3,r2,65535
10006158:	18e0001c 	xori	r3,r3,32768
1000615c:	18e00004 	addi	r3,r3,-32768
10006160:	18002c26 	beq	r3,zero,10006214 <_fflush_r+0xf0>
10006164:	10c0020c 	andi	r3,r2,8
10006168:	1800321e 	bne	r3,zero,10006234 <_fflush_r+0x110>
1000616c:	80c00117 	ldw	r3,4(r16)
10006170:	10820014 	ori	r2,r2,2048
10006174:	8080030d 	sth	r2,12(r16)
10006178:	00c0570e 	bge	zero,r3,100062d8 <_fflush_r+0x1b4>
1000617c:	82000a17 	ldw	r8,40(r16)
10006180:	40002426 	beq	r8,zero,10006214 <_fflush_r+0xf0>
10006184:	9c400017 	ldw	r17,0(r19)
10006188:	10c4000c 	andi	r3,r2,4096
1000618c:	98000015 	stw	zero,0(r19)
10006190:	18004626 	beq	r3,zero,100062ac <_fflush_r+0x188>
10006194:	81801417 	ldw	r6,80(r16)
10006198:	10c0010c 	andi	r3,r2,4
1000619c:	18000626 	beq	r3,zero,100061b8 <_fflush_r+0x94>
100061a0:	80c00117 	ldw	r3,4(r16)
100061a4:	80800c17 	ldw	r2,48(r16)
100061a8:	30cdc83a 	sub	r6,r6,r3
100061ac:	10000226 	beq	r2,zero,100061b8 <_fflush_r+0x94>
100061b0:	80800f17 	ldw	r2,60(r16)
100061b4:	308dc83a 	sub	r6,r6,r2
100061b8:	81400717 	ldw	r5,28(r16)
100061bc:	9809883a 	mov	r4,r19
100061c0:	000f883a 	mov	r7,zero
100061c4:	403ee83a 	callr	r8
100061c8:	00ffffc4 	movi	r3,-1
100061cc:	10c04526 	beq	r2,r3,100062e4 <_fflush_r+0x1c0>
100061d0:	80c0030b 	ldhu	r3,12(r16)
100061d4:	81000417 	ldw	r4,16(r16)
100061d8:	80000115 	stw	zero,4(r16)
100061dc:	197dffcc 	andi	r5,r3,63487
100061e0:	8140030d 	sth	r5,12(r16)
100061e4:	81000015 	stw	r4,0(r16)
100061e8:	18c4000c 	andi	r3,r3,4096
100061ec:	18000126 	beq	r3,zero,100061f4 <_fflush_r+0xd0>
100061f0:	80801415 	stw	r2,80(r16)
100061f4:	81400c17 	ldw	r5,48(r16)
100061f8:	9c400015 	stw	r17,0(r19)
100061fc:	28000526 	beq	r5,zero,10006214 <_fflush_r+0xf0>
10006200:	80801004 	addi	r2,r16,64
10006204:	28800226 	beq	r5,r2,10006210 <_fflush_r+0xec>
10006208:	9809883a 	mov	r4,r19
1000620c:	00068540 	call	10006854 <_free_r>
10006210:	80000c15 	stw	zero,48(r16)
10006214:	0005883a 	mov	r2,zero
10006218:	dfc00417 	ldw	ra,16(sp)
1000621c:	dcc00317 	ldw	r19,12(sp)
10006220:	dc800217 	ldw	r18,8(sp)
10006224:	dc400117 	ldw	r17,4(sp)
10006228:	dc000017 	ldw	r16,0(sp)
1000622c:	dec00504 	addi	sp,sp,20
10006230:	f800283a 	ret
10006234:	84800417 	ldw	r18,16(r16)
10006238:	903ff626 	beq	r18,zero,10006214 <__alt_data_end+0xf8006214>
1000623c:	84400017 	ldw	r17,0(r16)
10006240:	108000cc 	andi	r2,r2,3
10006244:	84800015 	stw	r18,0(r16)
10006248:	8ca3c83a 	sub	r17,r17,r18
1000624c:	10001526 	beq	r2,zero,100062a4 <_fflush_r+0x180>
10006250:	0005883a 	mov	r2,zero
10006254:	80800215 	stw	r2,8(r16)
10006258:	04400316 	blt	zero,r17,10006268 <_fflush_r+0x144>
1000625c:	003fed06 	br	10006214 <__alt_data_end+0xf8006214>
10006260:	90a5883a 	add	r18,r18,r2
10006264:	047feb0e 	bge	zero,r17,10006214 <__alt_data_end+0xf8006214>
10006268:	80800917 	ldw	r2,36(r16)
1000626c:	81400717 	ldw	r5,28(r16)
10006270:	880f883a 	mov	r7,r17
10006274:	900d883a 	mov	r6,r18
10006278:	9809883a 	mov	r4,r19
1000627c:	103ee83a 	callr	r2
10006280:	88a3c83a 	sub	r17,r17,r2
10006284:	00bff616 	blt	zero,r2,10006260 <__alt_data_end+0xf8006260>
10006288:	80c0030b 	ldhu	r3,12(r16)
1000628c:	00bfffc4 	movi	r2,-1
10006290:	18c01014 	ori	r3,r3,64
10006294:	80c0030d 	sth	r3,12(r16)
10006298:	003fdf06 	br	10006218 <__alt_data_end+0xf8006218>
1000629c:	00066e00 	call	100066e0 <__sinit>
100062a0:	003fab06 	br	10006150 <__alt_data_end+0xf8006150>
100062a4:	80800517 	ldw	r2,20(r16)
100062a8:	003fea06 	br	10006254 <__alt_data_end+0xf8006254>
100062ac:	81400717 	ldw	r5,28(r16)
100062b0:	000d883a 	mov	r6,zero
100062b4:	9809883a 	mov	r4,r19
100062b8:	01c00044 	movi	r7,1
100062bc:	403ee83a 	callr	r8
100062c0:	100d883a 	mov	r6,r2
100062c4:	00bfffc4 	movi	r2,-1
100062c8:	30801326 	beq	r6,r2,10006318 <_fflush_r+0x1f4>
100062cc:	8080030b 	ldhu	r2,12(r16)
100062d0:	82000a17 	ldw	r8,40(r16)
100062d4:	003fb006 	br	10006198 <__alt_data_end+0xf8006198>
100062d8:	80c00f17 	ldw	r3,60(r16)
100062dc:	00ffa716 	blt	zero,r3,1000617c <__alt_data_end+0xf800617c>
100062e0:	003fcc06 	br	10006214 <__alt_data_end+0xf8006214>
100062e4:	98c00017 	ldw	r3,0(r19)
100062e8:	183fb926 	beq	r3,zero,100061d0 <__alt_data_end+0xf80061d0>
100062ec:	01000744 	movi	r4,29
100062f0:	19000226 	beq	r3,r4,100062fc <_fflush_r+0x1d8>
100062f4:	01000584 	movi	r4,22
100062f8:	1900101e 	bne	r3,r4,1000633c <_fflush_r+0x218>
100062fc:	8080030b 	ldhu	r2,12(r16)
10006300:	80c00417 	ldw	r3,16(r16)
10006304:	80000115 	stw	zero,4(r16)
10006308:	10bdffcc 	andi	r2,r2,63487
1000630c:	8080030d 	sth	r2,12(r16)
10006310:	80c00015 	stw	r3,0(r16)
10006314:	003fb706 	br	100061f4 <__alt_data_end+0xf80061f4>
10006318:	98800017 	ldw	r2,0(r19)
1000631c:	103feb26 	beq	r2,zero,100062cc <__alt_data_end+0xf80062cc>
10006320:	00c00744 	movi	r3,29
10006324:	10c00226 	beq	r2,r3,10006330 <_fflush_r+0x20c>
10006328:	00c00584 	movi	r3,22
1000632c:	10ffd61e 	bne	r2,r3,10006288 <__alt_data_end+0xf8006288>
10006330:	9c400015 	stw	r17,0(r19)
10006334:	0005883a 	mov	r2,zero
10006338:	003fb706 	br	10006218 <__alt_data_end+0xf8006218>
1000633c:	80c0030b 	ldhu	r3,12(r16)
10006340:	18c01014 	ori	r3,r3,64
10006344:	80c0030d 	sth	r3,12(r16)
10006348:	003fb306 	br	10006218 <__alt_data_end+0xf8006218>

1000634c <fflush>:
1000634c:	20000526 	beq	r4,zero,10006364 <fflush+0x18>
10006350:	00840074 	movhi	r2,4097
10006354:	108ee504 	addi	r2,r2,15252
10006358:	200b883a 	mov	r5,r4
1000635c:	11000017 	ldw	r4,0(r2)
10006360:	00061241 	jmpi	10006124 <_fflush_r>
10006364:	00840074 	movhi	r2,4097
10006368:	108ee404 	addi	r2,r2,15248
1000636c:	11000017 	ldw	r4,0(r2)
10006370:	01440034 	movhi	r5,4096
10006374:	29584904 	addi	r5,r5,24868
10006378:	00070a01 	jmpi	100070a0 <_fwalk_reent>

1000637c <__fp_lock>:
1000637c:	0005883a 	mov	r2,zero
10006380:	f800283a 	ret

10006384 <__fp_unlock>:
10006384:	0005883a 	mov	r2,zero
10006388:	f800283a 	ret

1000638c <_cleanup_r>:
1000638c:	01440074 	movhi	r5,4097
10006390:	296c2b04 	addi	r5,r5,-20308
10006394:	0006fe81 	jmpi	10006fe8 <_fwalk>

10006398 <__sinit.part.1>:
10006398:	defff604 	addi	sp,sp,-40
1000639c:	00c40034 	movhi	r3,4096
100063a0:	dfc00915 	stw	ra,36(sp)
100063a4:	df000815 	stw	fp,32(sp)
100063a8:	ddc00715 	stw	r23,28(sp)
100063ac:	dd800615 	stw	r22,24(sp)
100063b0:	dd400515 	stw	r21,20(sp)
100063b4:	dd000415 	stw	r20,16(sp)
100063b8:	dcc00315 	stw	r19,12(sp)
100063bc:	dc800215 	stw	r18,8(sp)
100063c0:	dc400115 	stw	r17,4(sp)
100063c4:	dc000015 	stw	r16,0(sp)
100063c8:	18d8e304 	addi	r3,r3,25484
100063cc:	24000117 	ldw	r16,4(r4)
100063d0:	20c00f15 	stw	r3,60(r4)
100063d4:	07000044 	movi	fp,1
100063d8:	00c000c4 	movi	r3,3
100063dc:	2080bb04 	addi	r2,r4,748
100063e0:	20c0b915 	stw	r3,740(r4)
100063e4:	27000e15 	stw	fp,56(r4)
100063e8:	2080ba15 	stw	r2,744(r4)
100063ec:	2000b815 	stw	zero,736(r4)
100063f0:	05c00204 	movi	r23,8
100063f4:	00800104 	movi	r2,4
100063f8:	2025883a 	mov	r18,r4
100063fc:	b80d883a 	mov	r6,r23
10006400:	81001704 	addi	r4,r16,92
10006404:	000b883a 	mov	r5,zero
10006408:	80000015 	stw	zero,0(r16)
1000640c:	80000115 	stw	zero,4(r16)
10006410:	80000215 	stw	zero,8(r16)
10006414:	8080030d 	sth	r2,12(r16)
10006418:	80001915 	stw	zero,100(r16)
1000641c:	8000038d 	sth	zero,14(r16)
10006420:	80000415 	stw	zero,16(r16)
10006424:	80000515 	stw	zero,20(r16)
10006428:	80000615 	stw	zero,24(r16)
1000642c:	0007f140 	call	10007f14 <memset>
10006430:	05840074 	movhi	r22,4097
10006434:	94400217 	ldw	r17,8(r18)
10006438:	05440074 	movhi	r21,4097
1000643c:	05040074 	movhi	r20,4097
10006440:	04c40074 	movhi	r19,4097
10006444:	b5a5ba04 	addi	r22,r22,-26904
10006448:	ad65d104 	addi	r21,r21,-26812
1000644c:	a525f004 	addi	r20,r20,-26688
10006450:	9ce60704 	addi	r19,r19,-26596
10006454:	85800815 	stw	r22,32(r16)
10006458:	85400915 	stw	r21,36(r16)
1000645c:	85000a15 	stw	r20,40(r16)
10006460:	84c00b15 	stw	r19,44(r16)
10006464:	84000715 	stw	r16,28(r16)
10006468:	00800284 	movi	r2,10
1000646c:	89001704 	addi	r4,r17,92
10006470:	b80d883a 	mov	r6,r23
10006474:	000b883a 	mov	r5,zero
10006478:	88000015 	stw	zero,0(r17)
1000647c:	88000115 	stw	zero,4(r17)
10006480:	88000215 	stw	zero,8(r17)
10006484:	8880030d 	sth	r2,12(r17)
10006488:	88001915 	stw	zero,100(r17)
1000648c:	8f00038d 	sth	fp,14(r17)
10006490:	88000415 	stw	zero,16(r17)
10006494:	88000515 	stw	zero,20(r17)
10006498:	88000615 	stw	zero,24(r17)
1000649c:	0007f140 	call	10007f14 <memset>
100064a0:	94000317 	ldw	r16,12(r18)
100064a4:	00800484 	movi	r2,18
100064a8:	8c400715 	stw	r17,28(r17)
100064ac:	8d800815 	stw	r22,32(r17)
100064b0:	8d400915 	stw	r21,36(r17)
100064b4:	8d000a15 	stw	r20,40(r17)
100064b8:	8cc00b15 	stw	r19,44(r17)
100064bc:	8080030d 	sth	r2,12(r16)
100064c0:	00800084 	movi	r2,2
100064c4:	80000015 	stw	zero,0(r16)
100064c8:	80000115 	stw	zero,4(r16)
100064cc:	80000215 	stw	zero,8(r16)
100064d0:	80001915 	stw	zero,100(r16)
100064d4:	8080038d 	sth	r2,14(r16)
100064d8:	80000415 	stw	zero,16(r16)
100064dc:	80000515 	stw	zero,20(r16)
100064e0:	80000615 	stw	zero,24(r16)
100064e4:	81001704 	addi	r4,r16,92
100064e8:	000b883a 	mov	r5,zero
100064ec:	b80d883a 	mov	r6,r23
100064f0:	0007f140 	call	10007f14 <memset>
100064f4:	84000715 	stw	r16,28(r16)
100064f8:	85800815 	stw	r22,32(r16)
100064fc:	85400915 	stw	r21,36(r16)
10006500:	85000a15 	stw	r20,40(r16)
10006504:	84c00b15 	stw	r19,44(r16)
10006508:	dfc00917 	ldw	ra,36(sp)
1000650c:	df000817 	ldw	fp,32(sp)
10006510:	ddc00717 	ldw	r23,28(sp)
10006514:	dd800617 	ldw	r22,24(sp)
10006518:	dd400517 	ldw	r21,20(sp)
1000651c:	dd000417 	ldw	r20,16(sp)
10006520:	dcc00317 	ldw	r19,12(sp)
10006524:	dc800217 	ldw	r18,8(sp)
10006528:	dc400117 	ldw	r17,4(sp)
1000652c:	dc000017 	ldw	r16,0(sp)
10006530:	dec00a04 	addi	sp,sp,40
10006534:	f800283a 	ret

10006538 <__sfmoreglue>:
10006538:	defffc04 	addi	sp,sp,-16
1000653c:	dc800215 	stw	r18,8(sp)
10006540:	2825883a 	mov	r18,r5
10006544:	dc000015 	stw	r16,0(sp)
10006548:	01401a04 	movi	r5,104
1000654c:	2021883a 	mov	r16,r4
10006550:	9009883a 	mov	r4,r18
10006554:	dfc00315 	stw	ra,12(sp)
10006558:	dc400115 	stw	r17,4(sp)
1000655c:	000c6040 	call	1000c604 <__mulsi3>
10006560:	8009883a 	mov	r4,r16
10006564:	11400304 	addi	r5,r2,12
10006568:	1023883a 	mov	r17,r2
1000656c:	00073f00 	call	100073f0 <_malloc_r>
10006570:	1021883a 	mov	r16,r2
10006574:	10000726 	beq	r2,zero,10006594 <__sfmoreglue+0x5c>
10006578:	11000304 	addi	r4,r2,12
1000657c:	10000015 	stw	zero,0(r2)
10006580:	14800115 	stw	r18,4(r2)
10006584:	11000215 	stw	r4,8(r2)
10006588:	000b883a 	mov	r5,zero
1000658c:	880d883a 	mov	r6,r17
10006590:	0007f140 	call	10007f14 <memset>
10006594:	8005883a 	mov	r2,r16
10006598:	dfc00317 	ldw	ra,12(sp)
1000659c:	dc800217 	ldw	r18,8(sp)
100065a0:	dc400117 	ldw	r17,4(sp)
100065a4:	dc000017 	ldw	r16,0(sp)
100065a8:	dec00404 	addi	sp,sp,16
100065ac:	f800283a 	ret

100065b0 <__sfp>:
100065b0:	00840074 	movhi	r2,4097
100065b4:	defffb04 	addi	sp,sp,-20
100065b8:	108ee404 	addi	r2,r2,15248
100065bc:	dc800215 	stw	r18,8(sp)
100065c0:	14800017 	ldw	r18,0(r2)
100065c4:	dcc00315 	stw	r19,12(sp)
100065c8:	dfc00415 	stw	ra,16(sp)
100065cc:	90800e17 	ldw	r2,56(r18)
100065d0:	dc400115 	stw	r17,4(sp)
100065d4:	dc000015 	stw	r16,0(sp)
100065d8:	2027883a 	mov	r19,r4
100065dc:	1000021e 	bne	r2,zero,100065e8 <__sfp+0x38>
100065e0:	9009883a 	mov	r4,r18
100065e4:	00063980 	call	10006398 <__sinit.part.1>
100065e8:	9480b804 	addi	r18,r18,736
100065ec:	047fffc4 	movi	r17,-1
100065f0:	91400117 	ldw	r5,4(r18)
100065f4:	94000217 	ldw	r16,8(r18)
100065f8:	297fffc4 	addi	r5,r5,-1
100065fc:	28000a16 	blt	r5,zero,10006628 <__sfp+0x78>
10006600:	8080030f 	ldh	r2,12(r16)
10006604:	10000c26 	beq	r2,zero,10006638 <__sfp+0x88>
10006608:	80c01d04 	addi	r3,r16,116
1000660c:	00000206 	br	10006618 <__sfp+0x68>
10006610:	18bfe60f 	ldh	r2,-104(r3)
10006614:	10000826 	beq	r2,zero,10006638 <__sfp+0x88>
10006618:	297fffc4 	addi	r5,r5,-1
1000661c:	1c3ffd04 	addi	r16,r3,-12
10006620:	18c01a04 	addi	r3,r3,104
10006624:	2c7ffa1e 	bne	r5,r17,10006610 <__alt_data_end+0xf8006610>
10006628:	90800017 	ldw	r2,0(r18)
1000662c:	10001d26 	beq	r2,zero,100066a4 <__sfp+0xf4>
10006630:	1025883a 	mov	r18,r2
10006634:	003fee06 	br	100065f0 <__alt_data_end+0xf80065f0>
10006638:	00bfffc4 	movi	r2,-1
1000663c:	8080038d 	sth	r2,14(r16)
10006640:	00800044 	movi	r2,1
10006644:	8080030d 	sth	r2,12(r16)
10006648:	80001915 	stw	zero,100(r16)
1000664c:	80000015 	stw	zero,0(r16)
10006650:	80000215 	stw	zero,8(r16)
10006654:	80000115 	stw	zero,4(r16)
10006658:	80000415 	stw	zero,16(r16)
1000665c:	80000515 	stw	zero,20(r16)
10006660:	80000615 	stw	zero,24(r16)
10006664:	81001704 	addi	r4,r16,92
10006668:	000b883a 	mov	r5,zero
1000666c:	01800204 	movi	r6,8
10006670:	0007f140 	call	10007f14 <memset>
10006674:	8005883a 	mov	r2,r16
10006678:	80000c15 	stw	zero,48(r16)
1000667c:	80000d15 	stw	zero,52(r16)
10006680:	80001115 	stw	zero,68(r16)
10006684:	80001215 	stw	zero,72(r16)
10006688:	dfc00417 	ldw	ra,16(sp)
1000668c:	dcc00317 	ldw	r19,12(sp)
10006690:	dc800217 	ldw	r18,8(sp)
10006694:	dc400117 	ldw	r17,4(sp)
10006698:	dc000017 	ldw	r16,0(sp)
1000669c:	dec00504 	addi	sp,sp,20
100066a0:	f800283a 	ret
100066a4:	9809883a 	mov	r4,r19
100066a8:	01400104 	movi	r5,4
100066ac:	00065380 	call	10006538 <__sfmoreglue>
100066b0:	90800015 	stw	r2,0(r18)
100066b4:	103fde1e 	bne	r2,zero,10006630 <__alt_data_end+0xf8006630>
100066b8:	00800304 	movi	r2,12
100066bc:	98800015 	stw	r2,0(r19)
100066c0:	0005883a 	mov	r2,zero
100066c4:	003ff006 	br	10006688 <__alt_data_end+0xf8006688>

100066c8 <_cleanup>:
100066c8:	00840074 	movhi	r2,4097
100066cc:	108ee404 	addi	r2,r2,15248
100066d0:	11000017 	ldw	r4,0(r2)
100066d4:	01440074 	movhi	r5,4097
100066d8:	296c2b04 	addi	r5,r5,-20308
100066dc:	0006fe81 	jmpi	10006fe8 <_fwalk>

100066e0 <__sinit>:
100066e0:	20800e17 	ldw	r2,56(r4)
100066e4:	10000126 	beq	r2,zero,100066ec <__sinit+0xc>
100066e8:	f800283a 	ret
100066ec:	00063981 	jmpi	10006398 <__sinit.part.1>

100066f0 <__sfp_lock_acquire>:
100066f0:	f800283a 	ret

100066f4 <__sfp_lock_release>:
100066f4:	f800283a 	ret

100066f8 <__sinit_lock_acquire>:
100066f8:	f800283a 	ret

100066fc <__sinit_lock_release>:
100066fc:	f800283a 	ret

10006700 <__fp_lock_all>:
10006700:	00840074 	movhi	r2,4097
10006704:	108ee504 	addi	r2,r2,15252
10006708:	11000017 	ldw	r4,0(r2)
1000670c:	01440034 	movhi	r5,4096
10006710:	2958df04 	addi	r5,r5,25468
10006714:	0006fe81 	jmpi	10006fe8 <_fwalk>

10006718 <__fp_unlock_all>:
10006718:	00840074 	movhi	r2,4097
1000671c:	108ee504 	addi	r2,r2,15252
10006720:	11000017 	ldw	r4,0(r2)
10006724:	01440034 	movhi	r5,4096
10006728:	2958e104 	addi	r5,r5,25476
1000672c:	0006fe81 	jmpi	10006fe8 <_fwalk>

10006730 <_malloc_trim_r>:
10006730:	defffb04 	addi	sp,sp,-20
10006734:	dcc00315 	stw	r19,12(sp)
10006738:	04c40074 	movhi	r19,4097
1000673c:	dc800215 	stw	r18,8(sp)
10006740:	dc400115 	stw	r17,4(sp)
10006744:	dc000015 	stw	r16,0(sp)
10006748:	dfc00415 	stw	ra,16(sp)
1000674c:	2821883a 	mov	r16,r5
10006750:	9cc96004 	addi	r19,r19,9600
10006754:	2025883a 	mov	r18,r4
10006758:	000f4080 	call	1000f408 <__malloc_lock>
1000675c:	98800217 	ldw	r2,8(r19)
10006760:	14400117 	ldw	r17,4(r2)
10006764:	00bfff04 	movi	r2,-4
10006768:	88a2703a 	and	r17,r17,r2
1000676c:	8c21c83a 	sub	r16,r17,r16
10006770:	8403fbc4 	addi	r16,r16,4079
10006774:	8020d33a 	srli	r16,r16,12
10006778:	0083ffc4 	movi	r2,4095
1000677c:	843fffc4 	addi	r16,r16,-1
10006780:	8020933a 	slli	r16,r16,12
10006784:	1400060e 	bge	r2,r16,100067a0 <_malloc_trim_r+0x70>
10006788:	9009883a 	mov	r4,r18
1000678c:	000b883a 	mov	r5,zero
10006790:	00096940 	call	10009694 <_sbrk_r>
10006794:	98c00217 	ldw	r3,8(r19)
10006798:	1c47883a 	add	r3,r3,r17
1000679c:	10c00a26 	beq	r2,r3,100067c8 <_malloc_trim_r+0x98>
100067a0:	9009883a 	mov	r4,r18
100067a4:	000f4280 	call	1000f428 <__malloc_unlock>
100067a8:	0005883a 	mov	r2,zero
100067ac:	dfc00417 	ldw	ra,16(sp)
100067b0:	dcc00317 	ldw	r19,12(sp)
100067b4:	dc800217 	ldw	r18,8(sp)
100067b8:	dc400117 	ldw	r17,4(sp)
100067bc:	dc000017 	ldw	r16,0(sp)
100067c0:	dec00504 	addi	sp,sp,20
100067c4:	f800283a 	ret
100067c8:	9009883a 	mov	r4,r18
100067cc:	040bc83a 	sub	r5,zero,r16
100067d0:	00096940 	call	10009694 <_sbrk_r>
100067d4:	00ffffc4 	movi	r3,-1
100067d8:	10c00d26 	beq	r2,r3,10006810 <_malloc_trim_r+0xe0>
100067dc:	00c40074 	movhi	r3,4097
100067e0:	18d5c204 	addi	r3,r3,22280
100067e4:	18800017 	ldw	r2,0(r3)
100067e8:	99000217 	ldw	r4,8(r19)
100067ec:	8c23c83a 	sub	r17,r17,r16
100067f0:	8c400054 	ori	r17,r17,1
100067f4:	1421c83a 	sub	r16,r2,r16
100067f8:	24400115 	stw	r17,4(r4)
100067fc:	9009883a 	mov	r4,r18
10006800:	1c000015 	stw	r16,0(r3)
10006804:	000f4280 	call	1000f428 <__malloc_unlock>
10006808:	00800044 	movi	r2,1
1000680c:	003fe706 	br	100067ac <__alt_data_end+0xf80067ac>
10006810:	9009883a 	mov	r4,r18
10006814:	000b883a 	mov	r5,zero
10006818:	00096940 	call	10009694 <_sbrk_r>
1000681c:	99000217 	ldw	r4,8(r19)
10006820:	014003c4 	movi	r5,15
10006824:	1107c83a 	sub	r3,r2,r4
10006828:	28ffdd0e 	bge	r5,r3,100067a0 <__alt_data_end+0xf80067a0>
1000682c:	01440074 	movhi	r5,4097
10006830:	294ee704 	addi	r5,r5,15260
10006834:	29400017 	ldw	r5,0(r5)
10006838:	18c00054 	ori	r3,r3,1
1000683c:	20c00115 	stw	r3,4(r4)
10006840:	00c40074 	movhi	r3,4097
10006844:	1145c83a 	sub	r2,r2,r5
10006848:	18d5c204 	addi	r3,r3,22280
1000684c:	18800015 	stw	r2,0(r3)
10006850:	003fd306 	br	100067a0 <__alt_data_end+0xf80067a0>

10006854 <_free_r>:
10006854:	28004c26 	beq	r5,zero,10006988 <_free_r+0x134>
10006858:	defffd04 	addi	sp,sp,-12
1000685c:	dc400115 	stw	r17,4(sp)
10006860:	dc000015 	stw	r16,0(sp)
10006864:	2023883a 	mov	r17,r4
10006868:	2821883a 	mov	r16,r5
1000686c:	dfc00215 	stw	ra,8(sp)
10006870:	000f4080 	call	1000f408 <__malloc_lock>
10006874:	813fff17 	ldw	r4,-4(r16)
10006878:	00bfff84 	movi	r2,-2
1000687c:	02440074 	movhi	r9,4097
10006880:	81bffe04 	addi	r6,r16,-8
10006884:	2084703a 	and	r2,r4,r2
10006888:	4a496004 	addi	r9,r9,9600
1000688c:	308b883a 	add	r5,r6,r2
10006890:	2a000117 	ldw	r8,4(r5)
10006894:	49c00217 	ldw	r7,8(r9)
10006898:	00ffff04 	movi	r3,-4
1000689c:	40c6703a 	and	r3,r8,r3
100068a0:	39405326 	beq	r7,r5,100069f0 <_free_r+0x19c>
100068a4:	28c00115 	stw	r3,4(r5)
100068a8:	2100004c 	andi	r4,r4,1
100068ac:	2000091e 	bne	r4,zero,100068d4 <_free_r+0x80>
100068b0:	81fffe17 	ldw	r7,-8(r16)
100068b4:	4a000204 	addi	r8,r9,8
100068b8:	31cdc83a 	sub	r6,r6,r7
100068bc:	31000217 	ldw	r4,8(r6)
100068c0:	11c5883a 	add	r2,r2,r7
100068c4:	22006126 	beq	r4,r8,10006a4c <_free_r+0x1f8>
100068c8:	31c00317 	ldw	r7,12(r6)
100068cc:	21c00315 	stw	r7,12(r4)
100068d0:	39000215 	stw	r4,8(r7)
100068d4:	28c9883a 	add	r4,r5,r3
100068d8:	21c00117 	ldw	r7,4(r4)
100068dc:	39c0004c 	andi	r7,r7,1
100068e0:	38000d1e 	bne	r7,zero,10006918 <_free_r+0xc4>
100068e4:	29000217 	ldw	r4,8(r5)
100068e8:	10c5883a 	add	r2,r2,r3
100068ec:	00c40074 	movhi	r3,4097
100068f0:	18c96204 	addi	r3,r3,9608
100068f4:	20c07526 	beq	r4,r3,10006acc <_free_r+0x278>
100068f8:	29c00317 	ldw	r7,12(r5)
100068fc:	11400054 	ori	r5,r2,1
10006900:	3087883a 	add	r3,r6,r2
10006904:	21c00315 	stw	r7,12(r4)
10006908:	39000215 	stw	r4,8(r7)
1000690c:	31400115 	stw	r5,4(r6)
10006910:	18800015 	stw	r2,0(r3)
10006914:	00000406 	br	10006928 <_free_r+0xd4>
10006918:	10c00054 	ori	r3,r2,1
1000691c:	30c00115 	stw	r3,4(r6)
10006920:	3087883a 	add	r3,r6,r2
10006924:	18800015 	stw	r2,0(r3)
10006928:	00c07fc4 	movi	r3,511
1000692c:	18801736 	bltu	r3,r2,1000698c <_free_r+0x138>
10006930:	1004d0fa 	srli	r2,r2,3
10006934:	01400044 	movi	r5,1
10006938:	49000117 	ldw	r4,4(r9)
1000693c:	1087883a 	add	r3,r2,r2
10006940:	18c7883a 	add	r3,r3,r3
10006944:	1005d0ba 	srai	r2,r2,2
10006948:	18c7883a 	add	r3,r3,r3
1000694c:	1a47883a 	add	r3,r3,r9
10006950:	19c00217 	ldw	r7,8(r3)
10006954:	2884983a 	sll	r2,r5,r2
10006958:	30c00315 	stw	r3,12(r6)
1000695c:	31c00215 	stw	r7,8(r6)
10006960:	1104b03a 	or	r2,r2,r4
10006964:	19800215 	stw	r6,8(r3)
10006968:	48800115 	stw	r2,4(r9)
1000696c:	39800315 	stw	r6,12(r7)
10006970:	8809883a 	mov	r4,r17
10006974:	dfc00217 	ldw	ra,8(sp)
10006978:	dc400117 	ldw	r17,4(sp)
1000697c:	dc000017 	ldw	r16,0(sp)
10006980:	dec00304 	addi	sp,sp,12
10006984:	000f4281 	jmpi	1000f428 <__malloc_unlock>
10006988:	f800283a 	ret
1000698c:	1006d27a 	srli	r3,r2,9
10006990:	01000104 	movi	r4,4
10006994:	20c04036 	bltu	r4,r3,10006a98 <_free_r+0x244>
10006998:	1006d1ba 	srli	r3,r2,6
1000699c:	19400e04 	addi	r5,r3,56
100069a0:	2947883a 	add	r3,r5,r5
100069a4:	18c7883a 	add	r3,r3,r3
100069a8:	18c7883a 	add	r3,r3,r3
100069ac:	1a49883a 	add	r4,r3,r9
100069b0:	20c00217 	ldw	r3,8(r4)
100069b4:	01c40074 	movhi	r7,4097
100069b8:	39c96004 	addi	r7,r7,9600
100069bc:	19003b26 	beq	r3,r4,10006aac <_free_r+0x258>
100069c0:	01ffff04 	movi	r7,-4
100069c4:	19400117 	ldw	r5,4(r3)
100069c8:	29ca703a 	and	r5,r5,r7
100069cc:	1140022e 	bgeu	r2,r5,100069d8 <_free_r+0x184>
100069d0:	18c00217 	ldw	r3,8(r3)
100069d4:	20fffb1e 	bne	r4,r3,100069c4 <__alt_data_end+0xf80069c4>
100069d8:	18800317 	ldw	r2,12(r3)
100069dc:	30800315 	stw	r2,12(r6)
100069e0:	30c00215 	stw	r3,8(r6)
100069e4:	11800215 	stw	r6,8(r2)
100069e8:	19800315 	stw	r6,12(r3)
100069ec:	003fe006 	br	10006970 <__alt_data_end+0xf8006970>
100069f0:	2100004c 	andi	r4,r4,1
100069f4:	1885883a 	add	r2,r3,r2
100069f8:	2000071e 	bne	r4,zero,10006a18 <_free_r+0x1c4>
100069fc:	817ffe17 	ldw	r5,-8(r16)
10006a00:	314dc83a 	sub	r6,r6,r5
10006a04:	30c00317 	ldw	r3,12(r6)
10006a08:	31000217 	ldw	r4,8(r6)
10006a0c:	1145883a 	add	r2,r2,r5
10006a10:	20c00315 	stw	r3,12(r4)
10006a14:	19000215 	stw	r4,8(r3)
10006a18:	10c00054 	ori	r3,r2,1
10006a1c:	30c00115 	stw	r3,4(r6)
10006a20:	00c40074 	movhi	r3,4097
10006a24:	18cee804 	addi	r3,r3,15264
10006a28:	18c00017 	ldw	r3,0(r3)
10006a2c:	49800215 	stw	r6,8(r9)
10006a30:	10ffcf36 	bltu	r2,r3,10006970 <__alt_data_end+0xf8006970>
10006a34:	00840074 	movhi	r2,4097
10006a38:	1095b504 	addi	r2,r2,22228
10006a3c:	11400017 	ldw	r5,0(r2)
10006a40:	8809883a 	mov	r4,r17
10006a44:	00067300 	call	10006730 <_malloc_trim_r>
10006a48:	003fc906 	br	10006970 <__alt_data_end+0xf8006970>
10006a4c:	28c9883a 	add	r4,r5,r3
10006a50:	21000117 	ldw	r4,4(r4)
10006a54:	2100004c 	andi	r4,r4,1
10006a58:	20000a1e 	bne	r4,zero,10006a84 <_free_r+0x230>
10006a5c:	29000317 	ldw	r4,12(r5)
10006a60:	29400217 	ldw	r5,8(r5)
10006a64:	10c5883a 	add	r2,r2,r3
10006a68:	10c00054 	ori	r3,r2,1
10006a6c:	29000315 	stw	r4,12(r5)
10006a70:	21400215 	stw	r5,8(r4)
10006a74:	30c00115 	stw	r3,4(r6)
10006a78:	308d883a 	add	r6,r6,r2
10006a7c:	30800015 	stw	r2,0(r6)
10006a80:	003fbb06 	br	10006970 <__alt_data_end+0xf8006970>
10006a84:	10c00054 	ori	r3,r2,1
10006a88:	30c00115 	stw	r3,4(r6)
10006a8c:	308d883a 	add	r6,r6,r2
10006a90:	30800015 	stw	r2,0(r6)
10006a94:	003fb606 	br	10006970 <__alt_data_end+0xf8006970>
10006a98:	01000504 	movi	r4,20
10006a9c:	20c01436 	bltu	r4,r3,10006af0 <_free_r+0x29c>
10006aa0:	194016c4 	addi	r5,r3,91
10006aa4:	2947883a 	add	r3,r5,r5
10006aa8:	003fbe06 	br	100069a4 <__alt_data_end+0xf80069a4>
10006aac:	280bd0ba 	srai	r5,r5,2
10006ab0:	00800044 	movi	r2,1
10006ab4:	39000117 	ldw	r4,4(r7)
10006ab8:	114a983a 	sll	r5,r2,r5
10006abc:	1805883a 	mov	r2,r3
10006ac0:	2908b03a 	or	r4,r5,r4
10006ac4:	39000115 	stw	r4,4(r7)
10006ac8:	003fc406 	br	100069dc <__alt_data_end+0xf80069dc>
10006acc:	49800515 	stw	r6,20(r9)
10006ad0:	49800415 	stw	r6,16(r9)
10006ad4:	10c00054 	ori	r3,r2,1
10006ad8:	31000315 	stw	r4,12(r6)
10006adc:	31000215 	stw	r4,8(r6)
10006ae0:	30c00115 	stw	r3,4(r6)
10006ae4:	308d883a 	add	r6,r6,r2
10006ae8:	30800015 	stw	r2,0(r6)
10006aec:	003fa006 	br	10006970 <__alt_data_end+0xf8006970>
10006af0:	01001504 	movi	r4,84
10006af4:	20c00436 	bltu	r4,r3,10006b08 <_free_r+0x2b4>
10006af8:	1006d33a 	srli	r3,r2,12
10006afc:	19401b84 	addi	r5,r3,110
10006b00:	2947883a 	add	r3,r5,r5
10006b04:	003fa706 	br	100069a4 <__alt_data_end+0xf80069a4>
10006b08:	01005504 	movi	r4,340
10006b0c:	20c00436 	bltu	r4,r3,10006b20 <_free_r+0x2cc>
10006b10:	1006d3fa 	srli	r3,r2,15
10006b14:	19401dc4 	addi	r5,r3,119
10006b18:	2947883a 	add	r3,r5,r5
10006b1c:	003fa106 	br	100069a4 <__alt_data_end+0xf80069a4>
10006b20:	01015504 	movi	r4,1364
10006b24:	20c00436 	bltu	r4,r3,10006b38 <_free_r+0x2e4>
10006b28:	1006d4ba 	srli	r3,r2,18
10006b2c:	19401f04 	addi	r5,r3,124
10006b30:	2947883a 	add	r3,r5,r5
10006b34:	003f9b06 	br	100069a4 <__alt_data_end+0xf80069a4>
10006b38:	00c03f04 	movi	r3,252
10006b3c:	01401f84 	movi	r5,126
10006b40:	003f9806 	br	100069a4 <__alt_data_end+0xf80069a4>

10006b44 <__sfvwrite_r>:
10006b44:	30800217 	ldw	r2,8(r6)
10006b48:	10004526 	beq	r2,zero,10006c60 <__sfvwrite_r+0x11c>
10006b4c:	28c0030b 	ldhu	r3,12(r5)
10006b50:	defff404 	addi	sp,sp,-48
10006b54:	dd400715 	stw	r21,28(sp)
10006b58:	dcc00515 	stw	r19,20(sp)
10006b5c:	dc000215 	stw	r16,8(sp)
10006b60:	dfc00b15 	stw	ra,44(sp)
10006b64:	df000a15 	stw	fp,40(sp)
10006b68:	ddc00915 	stw	r23,36(sp)
10006b6c:	dd800815 	stw	r22,32(sp)
10006b70:	dd000615 	stw	r20,24(sp)
10006b74:	dc800415 	stw	r18,16(sp)
10006b78:	dc400315 	stw	r17,12(sp)
10006b7c:	1880020c 	andi	r2,r3,8
10006b80:	2821883a 	mov	r16,r5
10006b84:	202b883a 	mov	r21,r4
10006b88:	3027883a 	mov	r19,r6
10006b8c:	10002526 	beq	r2,zero,10006c24 <__sfvwrite_r+0xe0>
10006b90:	28800417 	ldw	r2,16(r5)
10006b94:	10002326 	beq	r2,zero,10006c24 <__sfvwrite_r+0xe0>
10006b98:	1880008c 	andi	r2,r3,2
10006b9c:	9c400017 	ldw	r17,0(r19)
10006ba0:	10003126 	beq	r2,zero,10006c68 <__sfvwrite_r+0x124>
10006ba4:	0029883a 	mov	r20,zero
10006ba8:	0025883a 	mov	r18,zero
10006bac:	05810004 	movi	r22,1024
10006bb0:	a00d883a 	mov	r6,r20
10006bb4:	a809883a 	mov	r4,r21
10006bb8:	90002526 	beq	r18,zero,10006c50 <__sfvwrite_r+0x10c>
10006bbc:	900f883a 	mov	r7,r18
10006bc0:	81400717 	ldw	r5,28(r16)
10006bc4:	b480012e 	bgeu	r22,r18,10006bcc <__sfvwrite_r+0x88>
10006bc8:	01c10004 	movi	r7,1024
10006bcc:	80800917 	ldw	r2,36(r16)
10006bd0:	103ee83a 	callr	r2
10006bd4:	0080510e 	bge	zero,r2,10006d1c <__sfvwrite_r+0x1d8>
10006bd8:	98c00217 	ldw	r3,8(r19)
10006bdc:	a0a9883a 	add	r20,r20,r2
10006be0:	90a5c83a 	sub	r18,r18,r2
10006be4:	1885c83a 	sub	r2,r3,r2
10006be8:	98800215 	stw	r2,8(r19)
10006bec:	103ff01e 	bne	r2,zero,10006bb0 <__alt_data_end+0xf8006bb0>
10006bf0:	0005883a 	mov	r2,zero
10006bf4:	dfc00b17 	ldw	ra,44(sp)
10006bf8:	df000a17 	ldw	fp,40(sp)
10006bfc:	ddc00917 	ldw	r23,36(sp)
10006c00:	dd800817 	ldw	r22,32(sp)
10006c04:	dd400717 	ldw	r21,28(sp)
10006c08:	dd000617 	ldw	r20,24(sp)
10006c0c:	dcc00517 	ldw	r19,20(sp)
10006c10:	dc800417 	ldw	r18,16(sp)
10006c14:	dc400317 	ldw	r17,12(sp)
10006c18:	dc000217 	ldw	r16,8(sp)
10006c1c:	dec00c04 	addi	sp,sp,48
10006c20:	f800283a 	ret
10006c24:	a809883a 	mov	r4,r21
10006c28:	800b883a 	mov	r5,r16
10006c2c:	00046a40 	call	100046a4 <__swsetup_r>
10006c30:	80c0030b 	ldhu	r3,12(r16)
10006c34:	103fd826 	beq	r2,zero,10006b98 <__alt_data_end+0xf8006b98>
10006c38:	18c01014 	ori	r3,r3,64
10006c3c:	80c0030d 	sth	r3,12(r16)
10006c40:	00c00244 	movi	r3,9
10006c44:	00bfffc4 	movi	r2,-1
10006c48:	a8c00015 	stw	r3,0(r21)
10006c4c:	003fe906 	br	10006bf4 <__alt_data_end+0xf8006bf4>
10006c50:	8d000017 	ldw	r20,0(r17)
10006c54:	8c800117 	ldw	r18,4(r17)
10006c58:	8c400204 	addi	r17,r17,8
10006c5c:	003fd406 	br	10006bb0 <__alt_data_end+0xf8006bb0>
10006c60:	0005883a 	mov	r2,zero
10006c64:	f800283a 	ret
10006c68:	1880004c 	andi	r2,r3,1
10006c6c:	1000301e 	bne	r2,zero,10006d30 <__sfvwrite_r+0x1ec>
10006c70:	002f883a 	mov	r23,zero
10006c74:	0025883a 	mov	r18,zero
10006c78:	90001c26 	beq	r18,zero,10006cec <__sfvwrite_r+0x1a8>
10006c7c:	1880800c 	andi	r2,r3,512
10006c80:	85000217 	ldw	r20,8(r16)
10006c84:	10006c26 	beq	r2,zero,10006e38 <__sfvwrite_r+0x2f4>
10006c88:	a02d883a 	mov	r22,r20
10006c8c:	95008536 	bltu	r18,r20,10006ea4 <__sfvwrite_r+0x360>
10006c90:	1881200c 	andi	r2,r3,1152
10006c94:	10009d1e 	bne	r2,zero,10006f0c <__sfvwrite_r+0x3c8>
10006c98:	81000017 	ldw	r4,0(r16)
10006c9c:	a039883a 	mov	fp,r20
10006ca0:	9029883a 	mov	r20,r18
10006ca4:	b80b883a 	mov	r5,r23
10006ca8:	b00d883a 	mov	r6,r22
10006cac:	0007db80 	call	10007db8 <memmove>
10006cb0:	80c00217 	ldw	r3,8(r16)
10006cb4:	81000017 	ldw	r4,0(r16)
10006cb8:	9005883a 	mov	r2,r18
10006cbc:	1f39c83a 	sub	fp,r3,fp
10006cc0:	258f883a 	add	r7,r4,r22
10006cc4:	87000215 	stw	fp,8(r16)
10006cc8:	81c00015 	stw	r7,0(r16)
10006ccc:	98c00217 	ldw	r3,8(r19)
10006cd0:	b8af883a 	add	r23,r23,r2
10006cd4:	90a5c83a 	sub	r18,r18,r2
10006cd8:	1d05c83a 	sub	r2,r3,r20
10006cdc:	98800215 	stw	r2,8(r19)
10006ce0:	103fc326 	beq	r2,zero,10006bf0 <__alt_data_end+0xf8006bf0>
10006ce4:	80c0030b 	ldhu	r3,12(r16)
10006ce8:	903fe41e 	bne	r18,zero,10006c7c <__alt_data_end+0xf8006c7c>
10006cec:	8dc00017 	ldw	r23,0(r17)
10006cf0:	8c800117 	ldw	r18,4(r17)
10006cf4:	8c400204 	addi	r17,r17,8
10006cf8:	003fdf06 	br	10006c78 <__alt_data_end+0xf8006c78>
10006cfc:	00090800 	call	10009080 <_realloc_r>
10006d00:	102d883a 	mov	r22,r2
10006d04:	1000a01e 	bne	r2,zero,10006f88 <__sfvwrite_r+0x444>
10006d08:	81400417 	ldw	r5,16(r16)
10006d0c:	a809883a 	mov	r4,r21
10006d10:	00068540 	call	10006854 <_free_r>
10006d14:	00800304 	movi	r2,12
10006d18:	a8800015 	stw	r2,0(r21)
10006d1c:	80c0030b 	ldhu	r3,12(r16)
10006d20:	00bfffc4 	movi	r2,-1
10006d24:	18c01014 	ori	r3,r3,64
10006d28:	80c0030d 	sth	r3,12(r16)
10006d2c:	003fb106 	br	10006bf4 <__alt_data_end+0xf8006bf4>
10006d30:	0029883a 	mov	r20,zero
10006d34:	0011883a 	mov	r8,zero
10006d38:	0039883a 	mov	fp,zero
10006d3c:	0025883a 	mov	r18,zero
10006d40:	90001f26 	beq	r18,zero,10006dc0 <__sfvwrite_r+0x27c>
10006d44:	40006826 	beq	r8,zero,10006ee8 <__sfvwrite_r+0x3a4>
10006d48:	a02f883a 	mov	r23,r20
10006d4c:	9500012e 	bgeu	r18,r20,10006d54 <__sfvwrite_r+0x210>
10006d50:	902f883a 	mov	r23,r18
10006d54:	81000017 	ldw	r4,0(r16)
10006d58:	80800417 	ldw	r2,16(r16)
10006d5c:	b82d883a 	mov	r22,r23
10006d60:	81800217 	ldw	r6,8(r16)
10006d64:	81c00517 	ldw	r7,20(r16)
10006d68:	1100022e 	bgeu	r2,r4,10006d74 <__sfvwrite_r+0x230>
10006d6c:	31c7883a 	add	r3,r6,r7
10006d70:	1dc01816 	blt	r3,r23,10006dd4 <__sfvwrite_r+0x290>
10006d74:	b9c03f16 	blt	r23,r7,10006e74 <__sfvwrite_r+0x330>
10006d78:	80800917 	ldw	r2,36(r16)
10006d7c:	81400717 	ldw	r5,28(r16)
10006d80:	a809883a 	mov	r4,r21
10006d84:	da000115 	stw	r8,4(sp)
10006d88:	e00d883a 	mov	r6,fp
10006d8c:	103ee83a 	callr	r2
10006d90:	102d883a 	mov	r22,r2
10006d94:	da000117 	ldw	r8,4(sp)
10006d98:	00bfe00e 	bge	zero,r2,10006d1c <__alt_data_end+0xf8006d1c>
10006d9c:	a5a9c83a 	sub	r20,r20,r22
10006da0:	a0001f26 	beq	r20,zero,10006e20 <__sfvwrite_r+0x2dc>
10006da4:	98800217 	ldw	r2,8(r19)
10006da8:	e5b9883a 	add	fp,fp,r22
10006dac:	95a5c83a 	sub	r18,r18,r22
10006db0:	15adc83a 	sub	r22,r2,r22
10006db4:	9d800215 	stw	r22,8(r19)
10006db8:	b03f8d26 	beq	r22,zero,10006bf0 <__alt_data_end+0xf8006bf0>
10006dbc:	903fe11e 	bne	r18,zero,10006d44 <__alt_data_end+0xf8006d44>
10006dc0:	8f000017 	ldw	fp,0(r17)
10006dc4:	8c800117 	ldw	r18,4(r17)
10006dc8:	0011883a 	mov	r8,zero
10006dcc:	8c400204 	addi	r17,r17,8
10006dd0:	003fdb06 	br	10006d40 <__alt_data_end+0xf8006d40>
10006dd4:	180d883a 	mov	r6,r3
10006dd8:	e00b883a 	mov	r5,fp
10006ddc:	da000115 	stw	r8,4(sp)
10006de0:	d8c00015 	stw	r3,0(sp)
10006de4:	0007db80 	call	10007db8 <memmove>
10006de8:	d8c00017 	ldw	r3,0(sp)
10006dec:	80800017 	ldw	r2,0(r16)
10006df0:	a809883a 	mov	r4,r21
10006df4:	800b883a 	mov	r5,r16
10006df8:	10c5883a 	add	r2,r2,r3
10006dfc:	80800015 	stw	r2,0(r16)
10006e00:	d8c00015 	stw	r3,0(sp)
10006e04:	00061240 	call	10006124 <_fflush_r>
10006e08:	d8c00017 	ldw	r3,0(sp)
10006e0c:	da000117 	ldw	r8,4(sp)
10006e10:	103fc21e 	bne	r2,zero,10006d1c <__alt_data_end+0xf8006d1c>
10006e14:	182d883a 	mov	r22,r3
10006e18:	a5a9c83a 	sub	r20,r20,r22
10006e1c:	a03fe11e 	bne	r20,zero,10006da4 <__alt_data_end+0xf8006da4>
10006e20:	a809883a 	mov	r4,r21
10006e24:	800b883a 	mov	r5,r16
10006e28:	00061240 	call	10006124 <_fflush_r>
10006e2c:	103fbb1e 	bne	r2,zero,10006d1c <__alt_data_end+0xf8006d1c>
10006e30:	0011883a 	mov	r8,zero
10006e34:	003fdb06 	br	10006da4 <__alt_data_end+0xf8006da4>
10006e38:	81000017 	ldw	r4,0(r16)
10006e3c:	80800417 	ldw	r2,16(r16)
10006e40:	1100012e 	bgeu	r2,r4,10006e48 <__sfvwrite_r+0x304>
10006e44:	a4805a36 	bltu	r20,r18,10006fb0 <__sfvwrite_r+0x46c>
10006e48:	81c00517 	ldw	r7,20(r16)
10006e4c:	91c01a36 	bltu	r18,r7,10006eb8 <__sfvwrite_r+0x374>
10006e50:	80800917 	ldw	r2,36(r16)
10006e54:	81400717 	ldw	r5,28(r16)
10006e58:	a809883a 	mov	r4,r21
10006e5c:	b80d883a 	mov	r6,r23
10006e60:	103ee83a 	callr	r2
10006e64:	1029883a 	mov	r20,r2
10006e68:	00bfac0e 	bge	zero,r2,10006d1c <__alt_data_end+0xf8006d1c>
10006e6c:	a005883a 	mov	r2,r20
10006e70:	003f9606 	br	10006ccc <__alt_data_end+0xf8006ccc>
10006e74:	b80d883a 	mov	r6,r23
10006e78:	e00b883a 	mov	r5,fp
10006e7c:	da000115 	stw	r8,4(sp)
10006e80:	0007db80 	call	10007db8 <memmove>
10006e84:	80800217 	ldw	r2,8(r16)
10006e88:	80c00017 	ldw	r3,0(r16)
10006e8c:	da000117 	ldw	r8,4(sp)
10006e90:	15c5c83a 	sub	r2,r2,r23
10006e94:	1def883a 	add	r23,r3,r23
10006e98:	80800215 	stw	r2,8(r16)
10006e9c:	85c00015 	stw	r23,0(r16)
10006ea0:	003fbe06 	br	10006d9c <__alt_data_end+0xf8006d9c>
10006ea4:	81000017 	ldw	r4,0(r16)
10006ea8:	9039883a 	mov	fp,r18
10006eac:	9029883a 	mov	r20,r18
10006eb0:	902d883a 	mov	r22,r18
10006eb4:	003f7b06 	br	10006ca4 <__alt_data_end+0xf8006ca4>
10006eb8:	b80b883a 	mov	r5,r23
10006ebc:	900d883a 	mov	r6,r18
10006ec0:	0007db80 	call	10007db8 <memmove>
10006ec4:	80c00217 	ldw	r3,8(r16)
10006ec8:	80800017 	ldw	r2,0(r16)
10006ecc:	9029883a 	mov	r20,r18
10006ed0:	1c87c83a 	sub	r3,r3,r18
10006ed4:	1485883a 	add	r2,r2,r18
10006ed8:	80800015 	stw	r2,0(r16)
10006edc:	80c00215 	stw	r3,8(r16)
10006ee0:	9005883a 	mov	r2,r18
10006ee4:	003f7906 	br	10006ccc <__alt_data_end+0xf8006ccc>
10006ee8:	e009883a 	mov	r4,fp
10006eec:	01400284 	movi	r5,10
10006ef0:	900d883a 	mov	r6,r18
10006ef4:	0007b980 	call	10007b98 <memchr>
10006ef8:	10003826 	beq	r2,zero,10006fdc <__sfvwrite_r+0x498>
10006efc:	10800044 	addi	r2,r2,1
10006f00:	1729c83a 	sub	r20,r2,fp
10006f04:	02000044 	movi	r8,1
10006f08:	003f8f06 	br	10006d48 <__alt_data_end+0xf8006d48>
10006f0c:	80800517 	ldw	r2,20(r16)
10006f10:	81400417 	ldw	r5,16(r16)
10006f14:	87000017 	ldw	fp,0(r16)
10006f18:	10a9883a 	add	r20,r2,r2
10006f1c:	a085883a 	add	r2,r20,r2
10006f20:	1028d7fa 	srli	r20,r2,31
10006f24:	e179c83a 	sub	fp,fp,r5
10006f28:	e1000044 	addi	r4,fp,1
10006f2c:	a085883a 	add	r2,r20,r2
10006f30:	1029d07a 	srai	r20,r2,1
10006f34:	2485883a 	add	r2,r4,r18
10006f38:	a00d883a 	mov	r6,r20
10006f3c:	a080022e 	bgeu	r20,r2,10006f48 <__sfvwrite_r+0x404>
10006f40:	1029883a 	mov	r20,r2
10006f44:	100d883a 	mov	r6,r2
10006f48:	18c1000c 	andi	r3,r3,1024
10006f4c:	a809883a 	mov	r4,r21
10006f50:	183f6a26 	beq	r3,zero,10006cfc <__alt_data_end+0xf8006cfc>
10006f54:	300b883a 	mov	r5,r6
10006f58:	00073f00 	call	100073f0 <_malloc_r>
10006f5c:	102d883a 	mov	r22,r2
10006f60:	103f6c26 	beq	r2,zero,10006d14 <__alt_data_end+0xf8006d14>
10006f64:	81400417 	ldw	r5,16(r16)
10006f68:	1009883a 	mov	r4,r2
10006f6c:	e00d883a 	mov	r6,fp
10006f70:	0007c800 	call	10007c80 <memcpy>
10006f74:	8080030b 	ldhu	r2,12(r16)
10006f78:	00fedfc4 	movi	r3,-1153
10006f7c:	10c4703a 	and	r2,r2,r3
10006f80:	10802014 	ori	r2,r2,128
10006f84:	8080030d 	sth	r2,12(r16)
10006f88:	b709883a 	add	r4,r22,fp
10006f8c:	a707c83a 	sub	r3,r20,fp
10006f90:	85800415 	stw	r22,16(r16)
10006f94:	85000515 	stw	r20,20(r16)
10006f98:	81000015 	stw	r4,0(r16)
10006f9c:	9039883a 	mov	fp,r18
10006fa0:	80c00215 	stw	r3,8(r16)
10006fa4:	9029883a 	mov	r20,r18
10006fa8:	902d883a 	mov	r22,r18
10006fac:	003f3d06 	br	10006ca4 <__alt_data_end+0xf8006ca4>
10006fb0:	b80b883a 	mov	r5,r23
10006fb4:	a00d883a 	mov	r6,r20
10006fb8:	0007db80 	call	10007db8 <memmove>
10006fbc:	80800017 	ldw	r2,0(r16)
10006fc0:	a809883a 	mov	r4,r21
10006fc4:	800b883a 	mov	r5,r16
10006fc8:	1505883a 	add	r2,r2,r20
10006fcc:	80800015 	stw	r2,0(r16)
10006fd0:	00061240 	call	10006124 <_fflush_r>
10006fd4:	103fa526 	beq	r2,zero,10006e6c <__alt_data_end+0xf8006e6c>
10006fd8:	003f5006 	br	10006d1c <__alt_data_end+0xf8006d1c>
10006fdc:	95000044 	addi	r20,r18,1
10006fe0:	02000044 	movi	r8,1
10006fe4:	003f5806 	br	10006d48 <__alt_data_end+0xf8006d48>

10006fe8 <_fwalk>:
10006fe8:	defff804 	addi	sp,sp,-32
10006fec:	dd400515 	stw	r21,20(sp)
10006ff0:	2540b804 	addi	r21,r4,736
10006ff4:	dd800615 	stw	r22,24(sp)
10006ff8:	dd000415 	stw	r20,16(sp)
10006ffc:	dfc00715 	stw	ra,28(sp)
10007000:	dcc00315 	stw	r19,12(sp)
10007004:	dc800215 	stw	r18,8(sp)
10007008:	dc400115 	stw	r17,4(sp)
1000700c:	dc000015 	stw	r16,0(sp)
10007010:	2829883a 	mov	r20,r5
10007014:	002d883a 	mov	r22,zero
10007018:	00066f00 	call	100066f0 <__sfp_lock_acquire>
1000701c:	a8001426 	beq	r21,zero,10007070 <_fwalk+0x88>
10007020:	04ffffc4 	movi	r19,-1
10007024:	ac400117 	ldw	r17,4(r21)
10007028:	ac800217 	ldw	r18,8(r21)
1000702c:	8c7fffc4 	addi	r17,r17,-1
10007030:	88000d16 	blt	r17,zero,10007068 <_fwalk+0x80>
10007034:	94000304 	addi	r16,r18,12
10007038:	94800384 	addi	r18,r18,14
1000703c:	80c0000f 	ldh	r3,0(r16)
10007040:	8c7fffc4 	addi	r17,r17,-1
10007044:	813ffd04 	addi	r4,r16,-12
10007048:	18000426 	beq	r3,zero,1000705c <_fwalk+0x74>
1000704c:	90c0000f 	ldh	r3,0(r18)
10007050:	1cc00226 	beq	r3,r19,1000705c <_fwalk+0x74>
10007054:	a03ee83a 	callr	r20
10007058:	b0acb03a 	or	r22,r22,r2
1000705c:	84001a04 	addi	r16,r16,104
10007060:	94801a04 	addi	r18,r18,104
10007064:	8cfff51e 	bne	r17,r19,1000703c <__alt_data_end+0xf800703c>
10007068:	ad400017 	ldw	r21,0(r21)
1000706c:	a83fed1e 	bne	r21,zero,10007024 <__alt_data_end+0xf8007024>
10007070:	00066f40 	call	100066f4 <__sfp_lock_release>
10007074:	b005883a 	mov	r2,r22
10007078:	dfc00717 	ldw	ra,28(sp)
1000707c:	dd800617 	ldw	r22,24(sp)
10007080:	dd400517 	ldw	r21,20(sp)
10007084:	dd000417 	ldw	r20,16(sp)
10007088:	dcc00317 	ldw	r19,12(sp)
1000708c:	dc800217 	ldw	r18,8(sp)
10007090:	dc400117 	ldw	r17,4(sp)
10007094:	dc000017 	ldw	r16,0(sp)
10007098:	dec00804 	addi	sp,sp,32
1000709c:	f800283a 	ret

100070a0 <_fwalk_reent>:
100070a0:	defff804 	addi	sp,sp,-32
100070a4:	dd400515 	stw	r21,20(sp)
100070a8:	2540b804 	addi	r21,r4,736
100070ac:	dd800615 	stw	r22,24(sp)
100070b0:	dd000415 	stw	r20,16(sp)
100070b4:	dcc00315 	stw	r19,12(sp)
100070b8:	dfc00715 	stw	ra,28(sp)
100070bc:	dc800215 	stw	r18,8(sp)
100070c0:	dc400115 	stw	r17,4(sp)
100070c4:	dc000015 	stw	r16,0(sp)
100070c8:	2027883a 	mov	r19,r4
100070cc:	2829883a 	mov	r20,r5
100070d0:	002d883a 	mov	r22,zero
100070d4:	00066f00 	call	100066f0 <__sfp_lock_acquire>
100070d8:	a8001326 	beq	r21,zero,10007128 <_fwalk_reent+0x88>
100070dc:	04bfffc4 	movi	r18,-1
100070e0:	ac400117 	ldw	r17,4(r21)
100070e4:	ac000217 	ldw	r16,8(r21)
100070e8:	8c7fffc4 	addi	r17,r17,-1
100070ec:	88000c16 	blt	r17,zero,10007120 <_fwalk_reent+0x80>
100070f0:	84000304 	addi	r16,r16,12
100070f4:	80c0000f 	ldh	r3,0(r16)
100070f8:	8c7fffc4 	addi	r17,r17,-1
100070fc:	817ffd04 	addi	r5,r16,-12
10007100:	18000526 	beq	r3,zero,10007118 <_fwalk_reent+0x78>
10007104:	80c0008f 	ldh	r3,2(r16)
10007108:	9809883a 	mov	r4,r19
1000710c:	1c800226 	beq	r3,r18,10007118 <_fwalk_reent+0x78>
10007110:	a03ee83a 	callr	r20
10007114:	b0acb03a 	or	r22,r22,r2
10007118:	84001a04 	addi	r16,r16,104
1000711c:	8cbff51e 	bne	r17,r18,100070f4 <__alt_data_end+0xf80070f4>
10007120:	ad400017 	ldw	r21,0(r21)
10007124:	a83fee1e 	bne	r21,zero,100070e0 <__alt_data_end+0xf80070e0>
10007128:	00066f40 	call	100066f4 <__sfp_lock_release>
1000712c:	b005883a 	mov	r2,r22
10007130:	dfc00717 	ldw	ra,28(sp)
10007134:	dd800617 	ldw	r22,24(sp)
10007138:	dd400517 	ldw	r21,20(sp)
1000713c:	dd000417 	ldw	r20,16(sp)
10007140:	dcc00317 	ldw	r19,12(sp)
10007144:	dc800217 	ldw	r18,8(sp)
10007148:	dc400117 	ldw	r17,4(sp)
1000714c:	dc000017 	ldw	r16,0(sp)
10007150:	dec00804 	addi	sp,sp,32
10007154:	f800283a 	ret

10007158 <_setlocale_r>:
10007158:	30001b26 	beq	r6,zero,100071c8 <_setlocale_r+0x70>
1000715c:	01440074 	movhi	r5,4097
10007160:	defffe04 	addi	sp,sp,-8
10007164:	29479804 	addi	r5,r5,7776
10007168:	3009883a 	mov	r4,r6
1000716c:	dc000015 	stw	r16,0(sp)
10007170:	dfc00115 	stw	ra,4(sp)
10007174:	3021883a 	mov	r16,r6
10007178:	00098240 	call	10009824 <strcmp>
1000717c:	1000061e 	bne	r2,zero,10007198 <_setlocale_r+0x40>
10007180:	00840074 	movhi	r2,4097
10007184:	10879704 	addi	r2,r2,7772
10007188:	dfc00117 	ldw	ra,4(sp)
1000718c:	dc000017 	ldw	r16,0(sp)
10007190:	dec00204 	addi	sp,sp,8
10007194:	f800283a 	ret
10007198:	01440074 	movhi	r5,4097
1000719c:	29479704 	addi	r5,r5,7772
100071a0:	8009883a 	mov	r4,r16
100071a4:	00098240 	call	10009824 <strcmp>
100071a8:	103ff526 	beq	r2,zero,10007180 <__alt_data_end+0xf8007180>
100071ac:	01440074 	movhi	r5,4097
100071b0:	29478204 	addi	r5,r5,7688
100071b4:	8009883a 	mov	r4,r16
100071b8:	00098240 	call	10009824 <strcmp>
100071bc:	103ff026 	beq	r2,zero,10007180 <__alt_data_end+0xf8007180>
100071c0:	0005883a 	mov	r2,zero
100071c4:	003ff006 	br	10007188 <__alt_data_end+0xf8007188>
100071c8:	00840074 	movhi	r2,4097
100071cc:	10879704 	addi	r2,r2,7772
100071d0:	f800283a 	ret

100071d4 <__locale_charset>:
100071d4:	00840074 	movhi	r2,4097
100071d8:	10894a04 	addi	r2,r2,9512
100071dc:	f800283a 	ret

100071e0 <__locale_mb_cur_max>:
100071e0:	00840074 	movhi	r2,4097
100071e4:	108ee604 	addi	r2,r2,15256
100071e8:	10800017 	ldw	r2,0(r2)
100071ec:	f800283a 	ret

100071f0 <__locale_msgcharset>:
100071f0:	00840074 	movhi	r2,4097
100071f4:	10894204 	addi	r2,r2,9480
100071f8:	f800283a 	ret

100071fc <__locale_cjk_lang>:
100071fc:	0005883a 	mov	r2,zero
10007200:	f800283a 	ret

10007204 <_localeconv_r>:
10007204:	00840074 	movhi	r2,4097
10007208:	10895204 	addi	r2,r2,9544
1000720c:	f800283a 	ret

10007210 <setlocale>:
10007210:	00c40074 	movhi	r3,4097
10007214:	18cee504 	addi	r3,r3,15252
10007218:	2005883a 	mov	r2,r4
1000721c:	19000017 	ldw	r4,0(r3)
10007220:	280d883a 	mov	r6,r5
10007224:	100b883a 	mov	r5,r2
10007228:	00071581 	jmpi	10007158 <_setlocale_r>

1000722c <localeconv>:
1000722c:	00840074 	movhi	r2,4097
10007230:	10895204 	addi	r2,r2,9544
10007234:	f800283a 	ret

10007238 <__smakebuf_r>:
10007238:	2880030b 	ldhu	r2,12(r5)
1000723c:	10c0008c 	andi	r3,r2,2
10007240:	1800401e 	bne	r3,zero,10007344 <__smakebuf_r+0x10c>
10007244:	deffec04 	addi	sp,sp,-80
10007248:	dc000f15 	stw	r16,60(sp)
1000724c:	2821883a 	mov	r16,r5
10007250:	2940038f 	ldh	r5,14(r5)
10007254:	dc401015 	stw	r17,64(sp)
10007258:	dfc01315 	stw	ra,76(sp)
1000725c:	dcc01215 	stw	r19,72(sp)
10007260:	dc801115 	stw	r18,68(sp)
10007264:	2023883a 	mov	r17,r4
10007268:	28001b16 	blt	r5,zero,100072d8 <__smakebuf_r+0xa0>
1000726c:	d80d883a 	mov	r6,sp
10007270:	000b29c0 	call	1000b29c <_fstat_r>
10007274:	10001716 	blt	r2,zero,100072d4 <__smakebuf_r+0x9c>
10007278:	d8800117 	ldw	r2,4(sp)
1000727c:	00e00014 	movui	r3,32768
10007280:	10bc000c 	andi	r2,r2,61440
10007284:	10c03726 	beq	r2,r3,10007364 <__smakebuf_r+0x12c>
10007288:	80c0030b 	ldhu	r3,12(r16)
1000728c:	18c20014 	ori	r3,r3,2048
10007290:	80c0030d 	sth	r3,12(r16)
10007294:	00c80004 	movi	r3,8192
10007298:	10c03c1e 	bne	r2,r3,1000738c <__smakebuf_r+0x154>
1000729c:	8140038f 	ldh	r5,14(r16)
100072a0:	8809883a 	mov	r4,r17
100072a4:	000b2f40 	call	1000b2f4 <_isatty_r>
100072a8:	10004e26 	beq	r2,zero,100073e4 <__smakebuf_r+0x1ac>
100072ac:	8080030b 	ldhu	r2,12(r16)
100072b0:	04c00044 	movi	r19,1
100072b4:	80c010c4 	addi	r3,r16,67
100072b8:	14c4b03a 	or	r2,r2,r19
100072bc:	8080030d 	sth	r2,12(r16)
100072c0:	80c00015 	stw	r3,0(r16)
100072c4:	80c00415 	stw	r3,16(r16)
100072c8:	84c00515 	stw	r19,20(r16)
100072cc:	04810004 	movi	r18,1024
100072d0:	00000706 	br	100072f0 <__smakebuf_r+0xb8>
100072d4:	8080030b 	ldhu	r2,12(r16)
100072d8:	10c0200c 	andi	r3,r2,128
100072dc:	18001f1e 	bne	r3,zero,1000735c <__smakebuf_r+0x124>
100072e0:	04810004 	movi	r18,1024
100072e4:	10820014 	ori	r2,r2,2048
100072e8:	8080030d 	sth	r2,12(r16)
100072ec:	0027883a 	mov	r19,zero
100072f0:	8809883a 	mov	r4,r17
100072f4:	900b883a 	mov	r5,r18
100072f8:	00073f00 	call	100073f0 <_malloc_r>
100072fc:	10002e26 	beq	r2,zero,100073b8 <__smakebuf_r+0x180>
10007300:	80c0030b 	ldhu	r3,12(r16)
10007304:	01040034 	movhi	r4,4096
10007308:	2118e304 	addi	r4,r4,25484
1000730c:	89000f15 	stw	r4,60(r17)
10007310:	18c02014 	ori	r3,r3,128
10007314:	80c0030d 	sth	r3,12(r16)
10007318:	80800015 	stw	r2,0(r16)
1000731c:	80800415 	stw	r2,16(r16)
10007320:	84800515 	stw	r18,20(r16)
10007324:	98001c1e 	bne	r19,zero,10007398 <__smakebuf_r+0x160>
10007328:	dfc01317 	ldw	ra,76(sp)
1000732c:	dcc01217 	ldw	r19,72(sp)
10007330:	dc801117 	ldw	r18,68(sp)
10007334:	dc401017 	ldw	r17,64(sp)
10007338:	dc000f17 	ldw	r16,60(sp)
1000733c:	dec01404 	addi	sp,sp,80
10007340:	f800283a 	ret
10007344:	288010c4 	addi	r2,r5,67
10007348:	28800015 	stw	r2,0(r5)
1000734c:	28800415 	stw	r2,16(r5)
10007350:	00800044 	movi	r2,1
10007354:	28800515 	stw	r2,20(r5)
10007358:	f800283a 	ret
1000735c:	04801004 	movi	r18,64
10007360:	003fe006 	br	100072e4 <__alt_data_end+0xf80072e4>
10007364:	81000a17 	ldw	r4,40(r16)
10007368:	00c40074 	movhi	r3,4097
1000736c:	18e5f004 	addi	r3,r3,-26688
10007370:	20ffc51e 	bne	r4,r3,10007288 <__alt_data_end+0xf8007288>
10007374:	80c0030b 	ldhu	r3,12(r16)
10007378:	01010004 	movi	r4,1024
1000737c:	81001315 	stw	r4,76(r16)
10007380:	1906b03a 	or	r3,r3,r4
10007384:	80c0030d 	sth	r3,12(r16)
10007388:	003fc206 	br	10007294 <__alt_data_end+0xf8007294>
1000738c:	0027883a 	mov	r19,zero
10007390:	04810004 	movi	r18,1024
10007394:	003fd606 	br	100072f0 <__alt_data_end+0xf80072f0>
10007398:	8140038f 	ldh	r5,14(r16)
1000739c:	8809883a 	mov	r4,r17
100073a0:	000b2f40 	call	1000b2f4 <_isatty_r>
100073a4:	103fe026 	beq	r2,zero,10007328 <__alt_data_end+0xf8007328>
100073a8:	8080030b 	ldhu	r2,12(r16)
100073ac:	10800054 	ori	r2,r2,1
100073b0:	8080030d 	sth	r2,12(r16)
100073b4:	003fdc06 	br	10007328 <__alt_data_end+0xf8007328>
100073b8:	8080030b 	ldhu	r2,12(r16)
100073bc:	10c0800c 	andi	r3,r2,512
100073c0:	183fd91e 	bne	r3,zero,10007328 <__alt_data_end+0xf8007328>
100073c4:	10800094 	ori	r2,r2,2
100073c8:	80c010c4 	addi	r3,r16,67
100073cc:	8080030d 	sth	r2,12(r16)
100073d0:	00800044 	movi	r2,1
100073d4:	80c00015 	stw	r3,0(r16)
100073d8:	80c00415 	stw	r3,16(r16)
100073dc:	80800515 	stw	r2,20(r16)
100073e0:	003fd106 	br	10007328 <__alt_data_end+0xf8007328>
100073e4:	04c00044 	movi	r19,1
100073e8:	04810004 	movi	r18,1024
100073ec:	003fc006 	br	100072f0 <__alt_data_end+0xf80072f0>

100073f0 <_malloc_r>:
100073f0:	defff504 	addi	sp,sp,-44
100073f4:	dc800315 	stw	r18,12(sp)
100073f8:	dfc00a15 	stw	ra,40(sp)
100073fc:	df000915 	stw	fp,36(sp)
10007400:	ddc00815 	stw	r23,32(sp)
10007404:	dd800715 	stw	r22,28(sp)
10007408:	dd400615 	stw	r21,24(sp)
1000740c:	dd000515 	stw	r20,20(sp)
10007410:	dcc00415 	stw	r19,16(sp)
10007414:	dc400215 	stw	r17,8(sp)
10007418:	dc000115 	stw	r16,4(sp)
1000741c:	288002c4 	addi	r2,r5,11
10007420:	00c00584 	movi	r3,22
10007424:	2025883a 	mov	r18,r4
10007428:	18802a2e 	bgeu	r3,r2,100074d4 <_malloc_r+0xe4>
1000742c:	047ffe04 	movi	r17,-8
10007430:	1462703a 	and	r17,r2,r17
10007434:	88009e16 	blt	r17,zero,100076b0 <_malloc_r+0x2c0>
10007438:	89409d36 	bltu	r17,r5,100076b0 <_malloc_r+0x2c0>
1000743c:	000f4080 	call	1000f408 <__malloc_lock>
10007440:	00807dc4 	movi	r2,503
10007444:	14402736 	bltu	r2,r17,100074e4 <_malloc_r+0xf4>
10007448:	8806d0fa 	srli	r3,r17,3
1000744c:	04c40074 	movhi	r19,4097
10007450:	9cc96004 	addi	r19,r19,9600
10007454:	18c5883a 	add	r2,r3,r3
10007458:	1085883a 	add	r2,r2,r2
1000745c:	1085883a 	add	r2,r2,r2
10007460:	9885883a 	add	r2,r19,r2
10007464:	14000317 	ldw	r16,12(r2)
10007468:	80814a26 	beq	r16,r2,10007994 <_malloc_r+0x5a4>
1000746c:	80c00117 	ldw	r3,4(r16)
10007470:	81000317 	ldw	r4,12(r16)
10007474:	00bfff04 	movi	r2,-4
10007478:	1884703a 	and	r2,r3,r2
1000747c:	81400217 	ldw	r5,8(r16)
10007480:	8085883a 	add	r2,r16,r2
10007484:	10c00117 	ldw	r3,4(r2)
10007488:	29000315 	stw	r4,12(r5)
1000748c:	21400215 	stw	r5,8(r4)
10007490:	18c00054 	ori	r3,r3,1
10007494:	10c00115 	stw	r3,4(r2)
10007498:	9009883a 	mov	r4,r18
1000749c:	000f4280 	call	1000f428 <__malloc_unlock>
100074a0:	80800204 	addi	r2,r16,8
100074a4:	dfc00a17 	ldw	ra,40(sp)
100074a8:	df000917 	ldw	fp,36(sp)
100074ac:	ddc00817 	ldw	r23,32(sp)
100074b0:	dd800717 	ldw	r22,28(sp)
100074b4:	dd400617 	ldw	r21,24(sp)
100074b8:	dd000517 	ldw	r20,20(sp)
100074bc:	dcc00417 	ldw	r19,16(sp)
100074c0:	dc800317 	ldw	r18,12(sp)
100074c4:	dc400217 	ldw	r17,8(sp)
100074c8:	dc000117 	ldw	r16,4(sp)
100074cc:	dec00b04 	addi	sp,sp,44
100074d0:	f800283a 	ret
100074d4:	04400404 	movi	r17,16
100074d8:	89407536 	bltu	r17,r5,100076b0 <_malloc_r+0x2c0>
100074dc:	000f4080 	call	1000f408 <__malloc_lock>
100074e0:	003fd906 	br	10007448 <__alt_data_end+0xf8007448>
100074e4:	8806d27a 	srli	r3,r17,9
100074e8:	18007526 	beq	r3,zero,100076c0 <_malloc_r+0x2d0>
100074ec:	00800104 	movi	r2,4
100074f0:	10c0ef36 	bltu	r2,r3,100078b0 <_malloc_r+0x4c0>
100074f4:	8806d1ba 	srli	r3,r17,6
100074f8:	19c00e04 	addi	r7,r3,56
100074fc:	39cb883a 	add	r5,r7,r7
10007500:	04c40074 	movhi	r19,4097
10007504:	294b883a 	add	r5,r5,r5
10007508:	9cc96004 	addi	r19,r19,9600
1000750c:	294b883a 	add	r5,r5,r5
10007510:	994b883a 	add	r5,r19,r5
10007514:	2c000317 	ldw	r16,12(r5)
10007518:	2c000e26 	beq	r5,r16,10007554 <_malloc_r+0x164>
1000751c:	80800117 	ldw	r2,4(r16)
10007520:	01bfff04 	movi	r6,-4
10007524:	010003c4 	movi	r4,15
10007528:	1184703a 	and	r2,r2,r6
1000752c:	1447c83a 	sub	r3,r2,r17
10007530:	20c00716 	blt	r4,r3,10007550 <_malloc_r+0x160>
10007534:	1800650e 	bge	r3,zero,100076cc <_malloc_r+0x2dc>
10007538:	84000317 	ldw	r16,12(r16)
1000753c:	2c000526 	beq	r5,r16,10007554 <_malloc_r+0x164>
10007540:	80800117 	ldw	r2,4(r16)
10007544:	1184703a 	and	r2,r2,r6
10007548:	1447c83a 	sub	r3,r2,r17
1000754c:	20fff90e 	bge	r4,r3,10007534 <__alt_data_end+0xf8007534>
10007550:	39ffffc4 	addi	r7,r7,-1
10007554:	38c00044 	addi	r3,r7,1
10007558:	01840074 	movhi	r6,4097
1000755c:	9c000417 	ldw	r16,16(r19)
10007560:	31896004 	addi	r6,r6,9600
10007564:	32400204 	addi	r9,r6,8
10007568:	82410326 	beq	r16,r9,10007978 <_malloc_r+0x588>
1000756c:	81000117 	ldw	r4,4(r16)
10007570:	00bfff04 	movi	r2,-4
10007574:	208e703a 	and	r7,r4,r2
10007578:	3c45c83a 	sub	r2,r7,r17
1000757c:	010003c4 	movi	r4,15
10007580:	2080ee16 	blt	r4,r2,1000793c <_malloc_r+0x54c>
10007584:	32400515 	stw	r9,20(r6)
10007588:	32400415 	stw	r9,16(r6)
1000758c:	1000510e 	bge	r2,zero,100076d4 <_malloc_r+0x2e4>
10007590:	00807fc4 	movi	r2,511
10007594:	11c0ce36 	bltu	r2,r7,100078d0 <_malloc_r+0x4e0>
10007598:	3808d0fa 	srli	r4,r7,3
1000759c:	01c00044 	movi	r7,1
100075a0:	30800117 	ldw	r2,4(r6)
100075a4:	210b883a 	add	r5,r4,r4
100075a8:	294b883a 	add	r5,r5,r5
100075ac:	2009d0ba 	srai	r4,r4,2
100075b0:	294b883a 	add	r5,r5,r5
100075b4:	298b883a 	add	r5,r5,r6
100075b8:	2a000217 	ldw	r8,8(r5)
100075bc:	3908983a 	sll	r4,r7,r4
100075c0:	81400315 	stw	r5,12(r16)
100075c4:	82000215 	stw	r8,8(r16)
100075c8:	2088b03a 	or	r4,r4,r2
100075cc:	2c000215 	stw	r16,8(r5)
100075d0:	31000115 	stw	r4,4(r6)
100075d4:	44000315 	stw	r16,12(r8)
100075d8:	1805d0ba 	srai	r2,r3,2
100075dc:	01400044 	movi	r5,1
100075e0:	288a983a 	sll	r5,r5,r2
100075e4:	21404336 	bltu	r4,r5,100076f4 <_malloc_r+0x304>
100075e8:	2144703a 	and	r2,r4,r5
100075ec:	10000a1e 	bne	r2,zero,10007618 <_malloc_r+0x228>
100075f0:	00bfff04 	movi	r2,-4
100075f4:	294b883a 	add	r5,r5,r5
100075f8:	1886703a 	and	r3,r3,r2
100075fc:	2144703a 	and	r2,r4,r5
10007600:	18c00104 	addi	r3,r3,4
10007604:	1000041e 	bne	r2,zero,10007618 <_malloc_r+0x228>
10007608:	294b883a 	add	r5,r5,r5
1000760c:	2144703a 	and	r2,r4,r5
10007610:	18c00104 	addi	r3,r3,4
10007614:	103ffc26 	beq	r2,zero,10007608 <__alt_data_end+0xf8007608>
10007618:	023fff04 	movi	r8,-4
1000761c:	01c003c4 	movi	r7,15
10007620:	18c5883a 	add	r2,r3,r3
10007624:	1085883a 	add	r2,r2,r2
10007628:	1085883a 	add	r2,r2,r2
1000762c:	9895883a 	add	r10,r19,r2
10007630:	52c00304 	addi	r11,r10,12
10007634:	1819883a 	mov	r12,r3
10007638:	5c000017 	ldw	r16,0(r11)
1000763c:	59bffd04 	addi	r6,r11,-12
10007640:	8180041e 	bne	r16,r6,10007654 <_malloc_r+0x264>
10007644:	0000ce06 	br	10007980 <_malloc_r+0x590>
10007648:	2000d70e 	bge	r4,zero,100079a8 <_malloc_r+0x5b8>
1000764c:	84000317 	ldw	r16,12(r16)
10007650:	8180cb26 	beq	r16,r6,10007980 <_malloc_r+0x590>
10007654:	80800117 	ldw	r2,4(r16)
10007658:	1204703a 	and	r2,r2,r8
1000765c:	1449c83a 	sub	r4,r2,r17
10007660:	393ff90e 	bge	r7,r4,10007648 <__alt_data_end+0xf8007648>
10007664:	80800317 	ldw	r2,12(r16)
10007668:	80c00217 	ldw	r3,8(r16)
1000766c:	89400054 	ori	r5,r17,1
10007670:	81400115 	stw	r5,4(r16)
10007674:	18800315 	stw	r2,12(r3)
10007678:	10c00215 	stw	r3,8(r2)
1000767c:	8463883a 	add	r17,r16,r17
10007680:	9c400515 	stw	r17,20(r19)
10007684:	9c400415 	stw	r17,16(r19)
10007688:	20800054 	ori	r2,r4,1
1000768c:	88800115 	stw	r2,4(r17)
10007690:	8a400315 	stw	r9,12(r17)
10007694:	8a400215 	stw	r9,8(r17)
10007698:	8923883a 	add	r17,r17,r4
1000769c:	89000015 	stw	r4,0(r17)
100076a0:	9009883a 	mov	r4,r18
100076a4:	000f4280 	call	1000f428 <__malloc_unlock>
100076a8:	80800204 	addi	r2,r16,8
100076ac:	003f7d06 	br	100074a4 <__alt_data_end+0xf80074a4>
100076b0:	00800304 	movi	r2,12
100076b4:	90800015 	stw	r2,0(r18)
100076b8:	0005883a 	mov	r2,zero
100076bc:	003f7906 	br	100074a4 <__alt_data_end+0xf80074a4>
100076c0:	01401f84 	movi	r5,126
100076c4:	01c00fc4 	movi	r7,63
100076c8:	003f8d06 	br	10007500 <__alt_data_end+0xf8007500>
100076cc:	81000317 	ldw	r4,12(r16)
100076d0:	003f6a06 	br	1000747c <__alt_data_end+0xf800747c>
100076d4:	81c5883a 	add	r2,r16,r7
100076d8:	10c00117 	ldw	r3,4(r2)
100076dc:	9009883a 	mov	r4,r18
100076e0:	18c00054 	ori	r3,r3,1
100076e4:	10c00115 	stw	r3,4(r2)
100076e8:	000f4280 	call	1000f428 <__malloc_unlock>
100076ec:	80800204 	addi	r2,r16,8
100076f0:	003f6c06 	br	100074a4 <__alt_data_end+0xf80074a4>
100076f4:	9c000217 	ldw	r16,8(r19)
100076f8:	00bfff04 	movi	r2,-4
100076fc:	85800117 	ldw	r22,4(r16)
10007700:	b0ac703a 	and	r22,r22,r2
10007704:	b4400336 	bltu	r22,r17,10007714 <_malloc_r+0x324>
10007708:	b445c83a 	sub	r2,r22,r17
1000770c:	00c003c4 	movi	r3,15
10007710:	18805d16 	blt	r3,r2,10007888 <_malloc_r+0x498>
10007714:	05c40074 	movhi	r23,4097
10007718:	00840074 	movhi	r2,4097
1000771c:	bdcee704 	addi	r23,r23,15260
10007720:	1095b504 	addi	r2,r2,22228
10007724:	15400017 	ldw	r21,0(r2)
10007728:	b9000017 	ldw	r4,0(r23)
1000772c:	00ffffc4 	movi	r3,-1
10007730:	858d883a 	add	r6,r16,r22
10007734:	8d6b883a 	add	r21,r17,r21
10007738:	20c0e426 	beq	r4,r3,10007acc <_malloc_r+0x6dc>
1000773c:	ad4403c4 	addi	r21,r21,4111
10007740:	00fc0004 	movi	r3,-4096
10007744:	a8ea703a 	and	r21,r21,r3
10007748:	9009883a 	mov	r4,r18
1000774c:	a80b883a 	mov	r5,r21
10007750:	d9800015 	stw	r6,0(sp)
10007754:	00096940 	call	10009694 <_sbrk_r>
10007758:	00ffffc4 	movi	r3,-1
1000775c:	1029883a 	mov	r20,r2
10007760:	d9800017 	ldw	r6,0(sp)
10007764:	10c0a426 	beq	r2,r3,100079f8 <_malloc_r+0x608>
10007768:	1180a236 	bltu	r2,r6,100079f4 <_malloc_r+0x604>
1000776c:	07040074 	movhi	fp,4097
10007770:	e715c204 	addi	fp,fp,22280
10007774:	e0c00017 	ldw	r3,0(fp)
10007778:	a8c7883a 	add	r3,r21,r3
1000777c:	e0c00015 	stw	r3,0(fp)
10007780:	3500da26 	beq	r6,r20,10007aec <_malloc_r+0x6fc>
10007784:	b9000017 	ldw	r4,0(r23)
10007788:	00bfffc4 	movi	r2,-1
1000778c:	2080e426 	beq	r4,r2,10007b20 <_malloc_r+0x730>
10007790:	a185c83a 	sub	r2,r20,r6
10007794:	1885883a 	add	r2,r3,r2
10007798:	e0800015 	stw	r2,0(fp)
1000779c:	a0c001cc 	andi	r3,r20,7
100077a0:	1800b526 	beq	r3,zero,10007a78 <_malloc_r+0x688>
100077a4:	a0e9c83a 	sub	r20,r20,r3
100077a8:	00840204 	movi	r2,4104
100077ac:	a5000204 	addi	r20,r20,8
100077b0:	10c7c83a 	sub	r3,r2,r3
100077b4:	a545883a 	add	r2,r20,r21
100077b8:	1083ffcc 	andi	r2,r2,4095
100077bc:	18abc83a 	sub	r21,r3,r2
100077c0:	9009883a 	mov	r4,r18
100077c4:	a80b883a 	mov	r5,r21
100077c8:	00096940 	call	10009694 <_sbrk_r>
100077cc:	00ffffc4 	movi	r3,-1
100077d0:	10c0d026 	beq	r2,r3,10007b14 <_malloc_r+0x724>
100077d4:	1507c83a 	sub	r3,r2,r20
100077d8:	a8c7883a 	add	r3,r21,r3
100077dc:	18c00054 	ori	r3,r3,1
100077e0:	e0800017 	ldw	r2,0(fp)
100077e4:	9d000215 	stw	r20,8(r19)
100077e8:	a0c00115 	stw	r3,4(r20)
100077ec:	a887883a 	add	r3,r21,r2
100077f0:	e0c00015 	stw	r3,0(fp)
100077f4:	84c00e26 	beq	r16,r19,10007830 <_malloc_r+0x440>
100077f8:	018003c4 	movi	r6,15
100077fc:	3580a02e 	bgeu	r6,r22,10007a80 <_malloc_r+0x690>
10007800:	81400117 	ldw	r5,4(r16)
10007804:	013ffe04 	movi	r4,-8
10007808:	b0bffd04 	addi	r2,r22,-12
1000780c:	1104703a 	and	r2,r2,r4
10007810:	2900004c 	andi	r4,r5,1
10007814:	1108b03a 	or	r4,r2,r4
10007818:	81000115 	stw	r4,4(r16)
1000781c:	01400144 	movi	r5,5
10007820:	8089883a 	add	r4,r16,r2
10007824:	21400115 	stw	r5,4(r4)
10007828:	21400215 	stw	r5,8(r4)
1000782c:	3080c036 	bltu	r6,r2,10007b30 <_malloc_r+0x740>
10007830:	00840074 	movhi	r2,4097
10007834:	1095b404 	addi	r2,r2,22224
10007838:	11000017 	ldw	r4,0(r2)
1000783c:	20c0012e 	bgeu	r4,r3,10007844 <_malloc_r+0x454>
10007840:	10c00015 	stw	r3,0(r2)
10007844:	00840074 	movhi	r2,4097
10007848:	1095b304 	addi	r2,r2,22220
1000784c:	11000017 	ldw	r4,0(r2)
10007850:	9c000217 	ldw	r16,8(r19)
10007854:	20c0012e 	bgeu	r4,r3,1000785c <_malloc_r+0x46c>
10007858:	10c00015 	stw	r3,0(r2)
1000785c:	80c00117 	ldw	r3,4(r16)
10007860:	00bfff04 	movi	r2,-4
10007864:	1886703a 	and	r3,r3,r2
10007868:	1c45c83a 	sub	r2,r3,r17
1000786c:	1c400236 	bltu	r3,r17,10007878 <_malloc_r+0x488>
10007870:	00c003c4 	movi	r3,15
10007874:	18800416 	blt	r3,r2,10007888 <_malloc_r+0x498>
10007878:	9009883a 	mov	r4,r18
1000787c:	000f4280 	call	1000f428 <__malloc_unlock>
10007880:	0005883a 	mov	r2,zero
10007884:	003f0706 	br	100074a4 <__alt_data_end+0xf80074a4>
10007888:	88c00054 	ori	r3,r17,1
1000788c:	80c00115 	stw	r3,4(r16)
10007890:	8463883a 	add	r17,r16,r17
10007894:	10800054 	ori	r2,r2,1
10007898:	9c400215 	stw	r17,8(r19)
1000789c:	88800115 	stw	r2,4(r17)
100078a0:	9009883a 	mov	r4,r18
100078a4:	000f4280 	call	1000f428 <__malloc_unlock>
100078a8:	80800204 	addi	r2,r16,8
100078ac:	003efd06 	br	100074a4 <__alt_data_end+0xf80074a4>
100078b0:	00800504 	movi	r2,20
100078b4:	10c0482e 	bgeu	r2,r3,100079d8 <_malloc_r+0x5e8>
100078b8:	00801504 	movi	r2,84
100078bc:	10c06836 	bltu	r2,r3,10007a60 <_malloc_r+0x670>
100078c0:	8806d33a 	srli	r3,r17,12
100078c4:	19c01b84 	addi	r7,r3,110
100078c8:	39cb883a 	add	r5,r7,r7
100078cc:	003f0c06 	br	10007500 <__alt_data_end+0xf8007500>
100078d0:	3804d27a 	srli	r2,r7,9
100078d4:	01000104 	movi	r4,4
100078d8:	2080422e 	bgeu	r4,r2,100079e4 <_malloc_r+0x5f4>
100078dc:	01000504 	movi	r4,20
100078e0:	20807c36 	bltu	r4,r2,10007ad4 <_malloc_r+0x6e4>
100078e4:	110016c4 	addi	r4,r2,91
100078e8:	210b883a 	add	r5,r4,r4
100078ec:	294b883a 	add	r5,r5,r5
100078f0:	294b883a 	add	r5,r5,r5
100078f4:	994b883a 	add	r5,r19,r5
100078f8:	28800217 	ldw	r2,8(r5)
100078fc:	02040074 	movhi	r8,4097
10007900:	42096004 	addi	r8,r8,9600
10007904:	11406326 	beq	r2,r5,10007a94 <_malloc_r+0x6a4>
10007908:	01bfff04 	movi	r6,-4
1000790c:	11000117 	ldw	r4,4(r2)
10007910:	2188703a 	and	r4,r4,r6
10007914:	3900022e 	bgeu	r7,r4,10007920 <_malloc_r+0x530>
10007918:	10800217 	ldw	r2,8(r2)
1000791c:	28bffb1e 	bne	r5,r2,1000790c <__alt_data_end+0xf800790c>
10007920:	11800317 	ldw	r6,12(r2)
10007924:	99000117 	ldw	r4,4(r19)
10007928:	81800315 	stw	r6,12(r16)
1000792c:	80800215 	stw	r2,8(r16)
10007930:	34000215 	stw	r16,8(r6)
10007934:	14000315 	stw	r16,12(r2)
10007938:	003f2706 	br	100075d8 <__alt_data_end+0xf80075d8>
1000793c:	88c00054 	ori	r3,r17,1
10007940:	80c00115 	stw	r3,4(r16)
10007944:	8463883a 	add	r17,r16,r17
10007948:	34400515 	stw	r17,20(r6)
1000794c:	34400415 	stw	r17,16(r6)
10007950:	10c00054 	ori	r3,r2,1
10007954:	8a400315 	stw	r9,12(r17)
10007958:	8a400215 	stw	r9,8(r17)
1000795c:	88c00115 	stw	r3,4(r17)
10007960:	88a3883a 	add	r17,r17,r2
10007964:	88800015 	stw	r2,0(r17)
10007968:	9009883a 	mov	r4,r18
1000796c:	000f4280 	call	1000f428 <__malloc_unlock>
10007970:	80800204 	addi	r2,r16,8
10007974:	003ecb06 	br	100074a4 <__alt_data_end+0xf80074a4>
10007978:	31000117 	ldw	r4,4(r6)
1000797c:	003f1606 	br	100075d8 <__alt_data_end+0xf80075d8>
10007980:	63000044 	addi	r12,r12,1
10007984:	608000cc 	andi	r2,r12,3
10007988:	5ac00204 	addi	r11,r11,8
1000798c:	103f2a1e 	bne	r2,zero,10007638 <__alt_data_end+0xf8007638>
10007990:	00002106 	br	10007a18 <_malloc_r+0x628>
10007994:	80800204 	addi	r2,r16,8
10007998:	84000517 	ldw	r16,20(r16)
1000799c:	143eb31e 	bne	r2,r16,1000746c <__alt_data_end+0xf800746c>
100079a0:	18c00084 	addi	r3,r3,2
100079a4:	003eec06 	br	10007558 <__alt_data_end+0xf8007558>
100079a8:	8085883a 	add	r2,r16,r2
100079ac:	10c00117 	ldw	r3,4(r2)
100079b0:	81000317 	ldw	r4,12(r16)
100079b4:	81400217 	ldw	r5,8(r16)
100079b8:	18c00054 	ori	r3,r3,1
100079bc:	10c00115 	stw	r3,4(r2)
100079c0:	29000315 	stw	r4,12(r5)
100079c4:	21400215 	stw	r5,8(r4)
100079c8:	9009883a 	mov	r4,r18
100079cc:	000f4280 	call	1000f428 <__malloc_unlock>
100079d0:	80800204 	addi	r2,r16,8
100079d4:	003eb306 	br	100074a4 <__alt_data_end+0xf80074a4>
100079d8:	19c016c4 	addi	r7,r3,91
100079dc:	39cb883a 	add	r5,r7,r7
100079e0:	003ec706 	br	10007500 <__alt_data_end+0xf8007500>
100079e4:	3804d1ba 	srli	r2,r7,6
100079e8:	11000e04 	addi	r4,r2,56
100079ec:	210b883a 	add	r5,r4,r4
100079f0:	003fbe06 	br	100078ec <__alt_data_end+0xf80078ec>
100079f4:	84ff5d26 	beq	r16,r19,1000776c <__alt_data_end+0xf800776c>
100079f8:	9c000217 	ldw	r16,8(r19)
100079fc:	00bfff04 	movi	r2,-4
10007a00:	80c00117 	ldw	r3,4(r16)
10007a04:	1886703a 	and	r3,r3,r2
10007a08:	003f9706 	br	10007868 <__alt_data_end+0xf8007868>
10007a0c:	52800017 	ldw	r10,0(r10)
10007a10:	18ffffc4 	addi	r3,r3,-1
10007a14:	50805c1e 	bne	r10,r2,10007b88 <_malloc_r+0x798>
10007a18:	190000cc 	andi	r4,r3,3
10007a1c:	50bffe04 	addi	r2,r10,-8
10007a20:	203ffa1e 	bne	r4,zero,10007a0c <__alt_data_end+0xf8007a0c>
10007a24:	98800117 	ldw	r2,4(r19)
10007a28:	0146303a 	nor	r3,zero,r5
10007a2c:	1884703a 	and	r2,r3,r2
10007a30:	98800115 	stw	r2,4(r19)
10007a34:	294b883a 	add	r5,r5,r5
10007a38:	117f2e36 	bltu	r2,r5,100076f4 <__alt_data_end+0xf80076f4>
10007a3c:	283f2d26 	beq	r5,zero,100076f4 <__alt_data_end+0xf80076f4>
10007a40:	1146703a 	and	r3,r2,r5
10007a44:	1800521e 	bne	r3,zero,10007b90 <_malloc_r+0x7a0>
10007a48:	6007883a 	mov	r3,r12
10007a4c:	294b883a 	add	r5,r5,r5
10007a50:	1148703a 	and	r4,r2,r5
10007a54:	18c00104 	addi	r3,r3,4
10007a58:	203ffc26 	beq	r4,zero,10007a4c <__alt_data_end+0xf8007a4c>
10007a5c:	003ef006 	br	10007620 <__alt_data_end+0xf8007620>
10007a60:	00805504 	movi	r2,340
10007a64:	10c01336 	bltu	r2,r3,10007ab4 <_malloc_r+0x6c4>
10007a68:	8806d3fa 	srli	r3,r17,15
10007a6c:	19c01dc4 	addi	r7,r3,119
10007a70:	39cb883a 	add	r5,r7,r7
10007a74:	003ea206 	br	10007500 <__alt_data_end+0xf8007500>
10007a78:	00c40004 	movi	r3,4096
10007a7c:	003f4d06 	br	100077b4 <__alt_data_end+0xf80077b4>
10007a80:	00800044 	movi	r2,1
10007a84:	a0800115 	stw	r2,4(r20)
10007a88:	a021883a 	mov	r16,r20
10007a8c:	0007883a 	mov	r3,zero
10007a90:	003f7506 	br	10007868 <__alt_data_end+0xf8007868>
10007a94:	200bd0ba 	srai	r5,r4,2
10007a98:	01800044 	movi	r6,1
10007a9c:	41000117 	ldw	r4,4(r8)
10007aa0:	314a983a 	sll	r5,r6,r5
10007aa4:	100d883a 	mov	r6,r2
10007aa8:	2908b03a 	or	r4,r5,r4
10007aac:	41000115 	stw	r4,4(r8)
10007ab0:	003f9d06 	br	10007928 <__alt_data_end+0xf8007928>
10007ab4:	00815504 	movi	r2,1364
10007ab8:	10c01336 	bltu	r2,r3,10007b08 <_malloc_r+0x718>
10007abc:	8806d4ba 	srli	r3,r17,18
10007ac0:	19c01f04 	addi	r7,r3,124
10007ac4:	39cb883a 	add	r5,r7,r7
10007ac8:	003e8d06 	br	10007500 <__alt_data_end+0xf8007500>
10007acc:	ad400404 	addi	r21,r21,16
10007ad0:	003f1d06 	br	10007748 <__alt_data_end+0xf8007748>
10007ad4:	01001504 	movi	r4,84
10007ad8:	20801c36 	bltu	r4,r2,10007b4c <_malloc_r+0x75c>
10007adc:	3804d33a 	srli	r2,r7,12
10007ae0:	11001b84 	addi	r4,r2,110
10007ae4:	210b883a 	add	r5,r4,r4
10007ae8:	003f8006 	br	100078ec <__alt_data_end+0xf80078ec>
10007aec:	3083ffcc 	andi	r2,r6,4095
10007af0:	103f241e 	bne	r2,zero,10007784 <__alt_data_end+0xf8007784>
10007af4:	99000217 	ldw	r4,8(r19)
10007af8:	ad85883a 	add	r2,r21,r22
10007afc:	10800054 	ori	r2,r2,1
10007b00:	20800115 	stw	r2,4(r4)
10007b04:	003f4a06 	br	10007830 <__alt_data_end+0xf8007830>
10007b08:	01403f04 	movi	r5,252
10007b0c:	01c01f84 	movi	r7,126
10007b10:	003e7b06 	br	10007500 <__alt_data_end+0xf8007500>
10007b14:	00c00044 	movi	r3,1
10007b18:	002b883a 	mov	r21,zero
10007b1c:	003f3006 	br	100077e0 <__alt_data_end+0xf80077e0>
10007b20:	00840074 	movhi	r2,4097
10007b24:	108ee704 	addi	r2,r2,15260
10007b28:	15000015 	stw	r20,0(r2)
10007b2c:	003f1b06 	br	1000779c <__alt_data_end+0xf800779c>
10007b30:	9009883a 	mov	r4,r18
10007b34:	81400204 	addi	r5,r16,8
10007b38:	00068540 	call	10006854 <_free_r>
10007b3c:	00840074 	movhi	r2,4097
10007b40:	1095c204 	addi	r2,r2,22280
10007b44:	10c00017 	ldw	r3,0(r2)
10007b48:	003f3906 	br	10007830 <__alt_data_end+0xf8007830>
10007b4c:	01005504 	movi	r4,340
10007b50:	20800436 	bltu	r4,r2,10007b64 <_malloc_r+0x774>
10007b54:	3804d3fa 	srli	r2,r7,15
10007b58:	11001dc4 	addi	r4,r2,119
10007b5c:	210b883a 	add	r5,r4,r4
10007b60:	003f6206 	br	100078ec <__alt_data_end+0xf80078ec>
10007b64:	01015504 	movi	r4,1364
10007b68:	20800436 	bltu	r4,r2,10007b7c <_malloc_r+0x78c>
10007b6c:	3804d4ba 	srli	r2,r7,18
10007b70:	11001f04 	addi	r4,r2,124
10007b74:	210b883a 	add	r5,r4,r4
10007b78:	003f5c06 	br	100078ec <__alt_data_end+0xf80078ec>
10007b7c:	01403f04 	movi	r5,252
10007b80:	01001f84 	movi	r4,126
10007b84:	003f5906 	br	100078ec <__alt_data_end+0xf80078ec>
10007b88:	98800117 	ldw	r2,4(r19)
10007b8c:	003fa906 	br	10007a34 <__alt_data_end+0xf8007a34>
10007b90:	6007883a 	mov	r3,r12
10007b94:	003ea206 	br	10007620 <__alt_data_end+0xf8007620>

10007b98 <memchr>:
10007b98:	208000cc 	andi	r2,r4,3
10007b9c:	280f883a 	mov	r7,r5
10007ba0:	10003526 	beq	r2,zero,10007c78 <memchr+0xe0>
10007ba4:	30bfffc4 	addi	r2,r6,-1
10007ba8:	30001b26 	beq	r6,zero,10007c18 <memchr+0x80>
10007bac:	21800003 	ldbu	r6,0(r4)
10007bb0:	28c03fcc 	andi	r3,r5,255
10007bb4:	30c01a26 	beq	r6,r3,10007c20 <memchr+0x88>
10007bb8:	180d883a 	mov	r6,r3
10007bbc:	00000406 	br	10007bd0 <memchr+0x38>
10007bc0:	10001526 	beq	r2,zero,10007c18 <memchr+0x80>
10007bc4:	20c00003 	ldbu	r3,0(r4)
10007bc8:	10bfffc4 	addi	r2,r2,-1
10007bcc:	19801426 	beq	r3,r6,10007c20 <memchr+0x88>
10007bd0:	21000044 	addi	r4,r4,1
10007bd4:	20c000cc 	andi	r3,r4,3
10007bd8:	183ff91e 	bne	r3,zero,10007bc0 <__alt_data_end+0xf8007bc0>
10007bdc:	024000c4 	movi	r9,3
10007be0:	48801136 	bltu	r9,r2,10007c28 <memchr+0x90>
10007be4:	10000c26 	beq	r2,zero,10007c18 <memchr+0x80>
10007be8:	20c00003 	ldbu	r3,0(r4)
10007bec:	29403fcc 	andi	r5,r5,255
10007bf0:	19400b26 	beq	r3,r5,10007c20 <memchr+0x88>
10007bf4:	20c00044 	addi	r3,r4,1
10007bf8:	2085883a 	add	r2,r4,r2
10007bfc:	39803fcc 	andi	r6,r7,255
10007c00:	00000306 	br	10007c10 <memchr+0x78>
10007c04:	18c00044 	addi	r3,r3,1
10007c08:	197fffc3 	ldbu	r5,-1(r3)
10007c0c:	29800426 	beq	r5,r6,10007c20 <memchr+0x88>
10007c10:	1809883a 	mov	r4,r3
10007c14:	18bffb1e 	bne	r3,r2,10007c04 <__alt_data_end+0xf8007c04>
10007c18:	0005883a 	mov	r2,zero
10007c1c:	f800283a 	ret
10007c20:	2005883a 	mov	r2,r4
10007c24:	f800283a 	ret
10007c28:	28c03fcc 	andi	r3,r5,255
10007c2c:	1810923a 	slli	r8,r3,8
10007c30:	02ffbff4 	movhi	r11,65279
10007c34:	02a02074 	movhi	r10,32897
10007c38:	40c6b03a 	or	r3,r8,r3
10007c3c:	1810943a 	slli	r8,r3,16
10007c40:	5affbfc4 	addi	r11,r11,-257
10007c44:	52a02004 	addi	r10,r10,-32640
10007c48:	40d0b03a 	or	r8,r8,r3
10007c4c:	20c00017 	ldw	r3,0(r4)
10007c50:	40c6f03a 	xor	r3,r8,r3
10007c54:	1acd883a 	add	r6,r3,r11
10007c58:	00c6303a 	nor	r3,zero,r3
10007c5c:	30c6703a 	and	r3,r6,r3
10007c60:	1a86703a 	and	r3,r3,r10
10007c64:	183fdf1e 	bne	r3,zero,10007be4 <__alt_data_end+0xf8007be4>
10007c68:	10bfff04 	addi	r2,r2,-4
10007c6c:	21000104 	addi	r4,r4,4
10007c70:	48bff636 	bltu	r9,r2,10007c4c <__alt_data_end+0xf8007c4c>
10007c74:	003fdb06 	br	10007be4 <__alt_data_end+0xf8007be4>
10007c78:	3005883a 	mov	r2,r6
10007c7c:	003fd706 	br	10007bdc <__alt_data_end+0xf8007bdc>

10007c80 <memcpy>:
10007c80:	deffff04 	addi	sp,sp,-4
10007c84:	dc000015 	stw	r16,0(sp)
10007c88:	00c003c4 	movi	r3,15
10007c8c:	2005883a 	mov	r2,r4
10007c90:	1980432e 	bgeu	r3,r6,10007da0 <memcpy+0x120>
10007c94:	2146b03a 	or	r3,r4,r5
10007c98:	18c000cc 	andi	r3,r3,3
10007c9c:	1800421e 	bne	r3,zero,10007da8 <memcpy+0x128>
10007ca0:	343ffc04 	addi	r16,r6,-16
10007ca4:	8020d13a 	srli	r16,r16,4
10007ca8:	28c00104 	addi	r3,r5,4
10007cac:	23400104 	addi	r13,r4,4
10007cb0:	801e913a 	slli	r15,r16,4
10007cb4:	2b000204 	addi	r12,r5,8
10007cb8:	22c00204 	addi	r11,r4,8
10007cbc:	7bc00504 	addi	r15,r15,20
10007cc0:	2a800304 	addi	r10,r5,12
10007cc4:	22400304 	addi	r9,r4,12
10007cc8:	2bdf883a 	add	r15,r5,r15
10007ccc:	2811883a 	mov	r8,r5
10007cd0:	200f883a 	mov	r7,r4
10007cd4:	41000017 	ldw	r4,0(r8)
10007cd8:	39c00404 	addi	r7,r7,16
10007cdc:	18c00404 	addi	r3,r3,16
10007ce0:	393ffc15 	stw	r4,-16(r7)
10007ce4:	1bbffc17 	ldw	r14,-16(r3)
10007ce8:	6b400404 	addi	r13,r13,16
10007cec:	5ac00404 	addi	r11,r11,16
10007cf0:	6bbffc15 	stw	r14,-16(r13)
10007cf4:	63800017 	ldw	r14,0(r12)
10007cf8:	4a400404 	addi	r9,r9,16
10007cfc:	42000404 	addi	r8,r8,16
10007d00:	5bbffc15 	stw	r14,-16(r11)
10007d04:	53800017 	ldw	r14,0(r10)
10007d08:	63000404 	addi	r12,r12,16
10007d0c:	52800404 	addi	r10,r10,16
10007d10:	4bbffc15 	stw	r14,-16(r9)
10007d14:	1bffef1e 	bne	r3,r15,10007cd4 <__alt_data_end+0xf8007cd4>
10007d18:	81c00044 	addi	r7,r16,1
10007d1c:	380e913a 	slli	r7,r7,4
10007d20:	310003cc 	andi	r4,r6,15
10007d24:	02c000c4 	movi	r11,3
10007d28:	11c7883a 	add	r3,r2,r7
10007d2c:	29cb883a 	add	r5,r5,r7
10007d30:	59001f2e 	bgeu	r11,r4,10007db0 <memcpy+0x130>
10007d34:	1813883a 	mov	r9,r3
10007d38:	2811883a 	mov	r8,r5
10007d3c:	200f883a 	mov	r7,r4
10007d40:	42800017 	ldw	r10,0(r8)
10007d44:	4a400104 	addi	r9,r9,4
10007d48:	39ffff04 	addi	r7,r7,-4
10007d4c:	4abfff15 	stw	r10,-4(r9)
10007d50:	42000104 	addi	r8,r8,4
10007d54:	59fffa36 	bltu	r11,r7,10007d40 <__alt_data_end+0xf8007d40>
10007d58:	213fff04 	addi	r4,r4,-4
10007d5c:	2008d0ba 	srli	r4,r4,2
10007d60:	318000cc 	andi	r6,r6,3
10007d64:	21000044 	addi	r4,r4,1
10007d68:	2109883a 	add	r4,r4,r4
10007d6c:	2109883a 	add	r4,r4,r4
10007d70:	1907883a 	add	r3,r3,r4
10007d74:	290b883a 	add	r5,r5,r4
10007d78:	30000626 	beq	r6,zero,10007d94 <memcpy+0x114>
10007d7c:	198d883a 	add	r6,r3,r6
10007d80:	29c00003 	ldbu	r7,0(r5)
10007d84:	18c00044 	addi	r3,r3,1
10007d88:	29400044 	addi	r5,r5,1
10007d8c:	19ffffc5 	stb	r7,-1(r3)
10007d90:	19bffb1e 	bne	r3,r6,10007d80 <__alt_data_end+0xf8007d80>
10007d94:	dc000017 	ldw	r16,0(sp)
10007d98:	dec00104 	addi	sp,sp,4
10007d9c:	f800283a 	ret
10007da0:	2007883a 	mov	r3,r4
10007da4:	003ff406 	br	10007d78 <__alt_data_end+0xf8007d78>
10007da8:	2007883a 	mov	r3,r4
10007dac:	003ff306 	br	10007d7c <__alt_data_end+0xf8007d7c>
10007db0:	200d883a 	mov	r6,r4
10007db4:	003ff006 	br	10007d78 <__alt_data_end+0xf8007d78>

10007db8 <memmove>:
10007db8:	2005883a 	mov	r2,r4
10007dbc:	29000b2e 	bgeu	r5,r4,10007dec <memmove+0x34>
10007dc0:	298f883a 	add	r7,r5,r6
10007dc4:	21c0092e 	bgeu	r4,r7,10007dec <memmove+0x34>
10007dc8:	2187883a 	add	r3,r4,r6
10007dcc:	198bc83a 	sub	r5,r3,r6
10007dd0:	30004b26 	beq	r6,zero,10007f00 <memmove+0x148>
10007dd4:	39ffffc4 	addi	r7,r7,-1
10007dd8:	39000003 	ldbu	r4,0(r7)
10007ddc:	18ffffc4 	addi	r3,r3,-1
10007de0:	19000005 	stb	r4,0(r3)
10007de4:	197ffb1e 	bne	r3,r5,10007dd4 <__alt_data_end+0xf8007dd4>
10007de8:	f800283a 	ret
10007dec:	00c003c4 	movi	r3,15
10007df0:	1980412e 	bgeu	r3,r6,10007ef8 <memmove+0x140>
10007df4:	1146b03a 	or	r3,r2,r5
10007df8:	18c000cc 	andi	r3,r3,3
10007dfc:	1800411e 	bne	r3,zero,10007f04 <memmove+0x14c>
10007e00:	33fffc04 	addi	r15,r6,-16
10007e04:	781ed13a 	srli	r15,r15,4
10007e08:	28c00104 	addi	r3,r5,4
10007e0c:	13400104 	addi	r13,r2,4
10007e10:	781c913a 	slli	r14,r15,4
10007e14:	2b000204 	addi	r12,r5,8
10007e18:	12c00204 	addi	r11,r2,8
10007e1c:	73800504 	addi	r14,r14,20
10007e20:	2a800304 	addi	r10,r5,12
10007e24:	12400304 	addi	r9,r2,12
10007e28:	2b9d883a 	add	r14,r5,r14
10007e2c:	2811883a 	mov	r8,r5
10007e30:	100f883a 	mov	r7,r2
10007e34:	41000017 	ldw	r4,0(r8)
10007e38:	39c00404 	addi	r7,r7,16
10007e3c:	18c00404 	addi	r3,r3,16
10007e40:	393ffc15 	stw	r4,-16(r7)
10007e44:	193ffc17 	ldw	r4,-16(r3)
10007e48:	6b400404 	addi	r13,r13,16
10007e4c:	5ac00404 	addi	r11,r11,16
10007e50:	693ffc15 	stw	r4,-16(r13)
10007e54:	61000017 	ldw	r4,0(r12)
10007e58:	4a400404 	addi	r9,r9,16
10007e5c:	42000404 	addi	r8,r8,16
10007e60:	593ffc15 	stw	r4,-16(r11)
10007e64:	51000017 	ldw	r4,0(r10)
10007e68:	63000404 	addi	r12,r12,16
10007e6c:	52800404 	addi	r10,r10,16
10007e70:	493ffc15 	stw	r4,-16(r9)
10007e74:	1bbfef1e 	bne	r3,r14,10007e34 <__alt_data_end+0xf8007e34>
10007e78:	79000044 	addi	r4,r15,1
10007e7c:	2008913a 	slli	r4,r4,4
10007e80:	328003cc 	andi	r10,r6,15
10007e84:	02c000c4 	movi	r11,3
10007e88:	1107883a 	add	r3,r2,r4
10007e8c:	290b883a 	add	r5,r5,r4
10007e90:	5a801e2e 	bgeu	r11,r10,10007f0c <memmove+0x154>
10007e94:	1813883a 	mov	r9,r3
10007e98:	2811883a 	mov	r8,r5
10007e9c:	500f883a 	mov	r7,r10
10007ea0:	41000017 	ldw	r4,0(r8)
10007ea4:	4a400104 	addi	r9,r9,4
10007ea8:	39ffff04 	addi	r7,r7,-4
10007eac:	493fff15 	stw	r4,-4(r9)
10007eb0:	42000104 	addi	r8,r8,4
10007eb4:	59fffa36 	bltu	r11,r7,10007ea0 <__alt_data_end+0xf8007ea0>
10007eb8:	513fff04 	addi	r4,r10,-4
10007ebc:	2008d0ba 	srli	r4,r4,2
10007ec0:	318000cc 	andi	r6,r6,3
10007ec4:	21000044 	addi	r4,r4,1
10007ec8:	2109883a 	add	r4,r4,r4
10007ecc:	2109883a 	add	r4,r4,r4
10007ed0:	1907883a 	add	r3,r3,r4
10007ed4:	290b883a 	add	r5,r5,r4
10007ed8:	30000926 	beq	r6,zero,10007f00 <memmove+0x148>
10007edc:	198d883a 	add	r6,r3,r6
10007ee0:	29c00003 	ldbu	r7,0(r5)
10007ee4:	18c00044 	addi	r3,r3,1
10007ee8:	29400044 	addi	r5,r5,1
10007eec:	19ffffc5 	stb	r7,-1(r3)
10007ef0:	19bffb1e 	bne	r3,r6,10007ee0 <__alt_data_end+0xf8007ee0>
10007ef4:	f800283a 	ret
10007ef8:	1007883a 	mov	r3,r2
10007efc:	003ff606 	br	10007ed8 <__alt_data_end+0xf8007ed8>
10007f00:	f800283a 	ret
10007f04:	1007883a 	mov	r3,r2
10007f08:	003ff406 	br	10007edc <__alt_data_end+0xf8007edc>
10007f0c:	500d883a 	mov	r6,r10
10007f10:	003ff106 	br	10007ed8 <__alt_data_end+0xf8007ed8>

10007f14 <memset>:
10007f14:	20c000cc 	andi	r3,r4,3
10007f18:	2005883a 	mov	r2,r4
10007f1c:	18004326 	beq	r3,zero,1000802c <memset+0x118>
10007f20:	31ffffc4 	addi	r7,r6,-1
10007f24:	30004026 	beq	r6,zero,10008028 <memset+0x114>
10007f28:	2813883a 	mov	r9,r5
10007f2c:	200d883a 	mov	r6,r4
10007f30:	2007883a 	mov	r3,r4
10007f34:	00000406 	br	10007f48 <memset+0x34>
10007f38:	3a3fffc4 	addi	r8,r7,-1
10007f3c:	31800044 	addi	r6,r6,1
10007f40:	38003926 	beq	r7,zero,10008028 <memset+0x114>
10007f44:	400f883a 	mov	r7,r8
10007f48:	18c00044 	addi	r3,r3,1
10007f4c:	32400005 	stb	r9,0(r6)
10007f50:	1a0000cc 	andi	r8,r3,3
10007f54:	403ff81e 	bne	r8,zero,10007f38 <__alt_data_end+0xf8007f38>
10007f58:	010000c4 	movi	r4,3
10007f5c:	21c02d2e 	bgeu	r4,r7,10008014 <memset+0x100>
10007f60:	29803fcc 	andi	r6,r5,255
10007f64:	3008923a 	slli	r4,r6,8
10007f68:	218cb03a 	or	r6,r4,r6
10007f6c:	3008943a 	slli	r4,r6,16
10007f70:	218cb03a 	or	r6,r4,r6
10007f74:	010003c4 	movi	r4,15
10007f78:	21c0182e 	bgeu	r4,r7,10007fdc <memset+0xc8>
10007f7c:	3b3ffc04 	addi	r12,r7,-16
10007f80:	6018d13a 	srli	r12,r12,4
10007f84:	1a000104 	addi	r8,r3,4
10007f88:	1ac00204 	addi	r11,r3,8
10007f8c:	6008913a 	slli	r4,r12,4
10007f90:	1a800304 	addi	r10,r3,12
10007f94:	1813883a 	mov	r9,r3
10007f98:	21000504 	addi	r4,r4,20
10007f9c:	1909883a 	add	r4,r3,r4
10007fa0:	49800015 	stw	r6,0(r9)
10007fa4:	41800015 	stw	r6,0(r8)
10007fa8:	59800015 	stw	r6,0(r11)
10007fac:	51800015 	stw	r6,0(r10)
10007fb0:	42000404 	addi	r8,r8,16
10007fb4:	4a400404 	addi	r9,r9,16
10007fb8:	5ac00404 	addi	r11,r11,16
10007fbc:	52800404 	addi	r10,r10,16
10007fc0:	413ff71e 	bne	r8,r4,10007fa0 <__alt_data_end+0xf8007fa0>
10007fc4:	63000044 	addi	r12,r12,1
10007fc8:	6018913a 	slli	r12,r12,4
10007fcc:	39c003cc 	andi	r7,r7,15
10007fd0:	010000c4 	movi	r4,3
10007fd4:	1b07883a 	add	r3,r3,r12
10007fd8:	21c00e2e 	bgeu	r4,r7,10008014 <memset+0x100>
10007fdc:	1813883a 	mov	r9,r3
10007fe0:	3811883a 	mov	r8,r7
10007fe4:	010000c4 	movi	r4,3
10007fe8:	49800015 	stw	r6,0(r9)
10007fec:	423fff04 	addi	r8,r8,-4
10007ff0:	4a400104 	addi	r9,r9,4
10007ff4:	223ffc36 	bltu	r4,r8,10007fe8 <__alt_data_end+0xf8007fe8>
10007ff8:	393fff04 	addi	r4,r7,-4
10007ffc:	2008d0ba 	srli	r4,r4,2
10008000:	39c000cc 	andi	r7,r7,3
10008004:	21000044 	addi	r4,r4,1
10008008:	2109883a 	add	r4,r4,r4
1000800c:	2109883a 	add	r4,r4,r4
10008010:	1907883a 	add	r3,r3,r4
10008014:	38000426 	beq	r7,zero,10008028 <memset+0x114>
10008018:	19cf883a 	add	r7,r3,r7
1000801c:	19400005 	stb	r5,0(r3)
10008020:	18c00044 	addi	r3,r3,1
10008024:	19fffd1e 	bne	r3,r7,1000801c <__alt_data_end+0xf800801c>
10008028:	f800283a 	ret
1000802c:	2007883a 	mov	r3,r4
10008030:	300f883a 	mov	r7,r6
10008034:	003fc806 	br	10007f58 <__alt_data_end+0xf8007f58>

10008038 <_Balloc>:
10008038:	20801317 	ldw	r2,76(r4)
1000803c:	defffc04 	addi	sp,sp,-16
10008040:	dc400115 	stw	r17,4(sp)
10008044:	dc000015 	stw	r16,0(sp)
10008048:	dfc00315 	stw	ra,12(sp)
1000804c:	dc800215 	stw	r18,8(sp)
10008050:	2023883a 	mov	r17,r4
10008054:	2821883a 	mov	r16,r5
10008058:	10000f26 	beq	r2,zero,10008098 <_Balloc+0x60>
1000805c:	8407883a 	add	r3,r16,r16
10008060:	18c7883a 	add	r3,r3,r3
10008064:	10c7883a 	add	r3,r2,r3
10008068:	18800017 	ldw	r2,0(r3)
1000806c:	10001126 	beq	r2,zero,100080b4 <_Balloc+0x7c>
10008070:	11000017 	ldw	r4,0(r2)
10008074:	19000015 	stw	r4,0(r3)
10008078:	10000415 	stw	zero,16(r2)
1000807c:	10000315 	stw	zero,12(r2)
10008080:	dfc00317 	ldw	ra,12(sp)
10008084:	dc800217 	ldw	r18,8(sp)
10008088:	dc400117 	ldw	r17,4(sp)
1000808c:	dc000017 	ldw	r16,0(sp)
10008090:	dec00404 	addi	sp,sp,16
10008094:	f800283a 	ret
10008098:	01400104 	movi	r5,4
1000809c:	01800844 	movi	r6,33
100080a0:	000aed40 	call	1000aed4 <_calloc_r>
100080a4:	88801315 	stw	r2,76(r17)
100080a8:	103fec1e 	bne	r2,zero,1000805c <__alt_data_end+0xf800805c>
100080ac:	0005883a 	mov	r2,zero
100080b0:	003ff306 	br	10008080 <__alt_data_end+0xf8008080>
100080b4:	01400044 	movi	r5,1
100080b8:	2c24983a 	sll	r18,r5,r16
100080bc:	8809883a 	mov	r4,r17
100080c0:	91800144 	addi	r6,r18,5
100080c4:	318d883a 	add	r6,r6,r6
100080c8:	318d883a 	add	r6,r6,r6
100080cc:	000aed40 	call	1000aed4 <_calloc_r>
100080d0:	103ff626 	beq	r2,zero,100080ac <__alt_data_end+0xf80080ac>
100080d4:	14000115 	stw	r16,4(r2)
100080d8:	14800215 	stw	r18,8(r2)
100080dc:	003fe606 	br	10008078 <__alt_data_end+0xf8008078>

100080e0 <_Bfree>:
100080e0:	28000826 	beq	r5,zero,10008104 <_Bfree+0x24>
100080e4:	28c00117 	ldw	r3,4(r5)
100080e8:	20801317 	ldw	r2,76(r4)
100080ec:	18c7883a 	add	r3,r3,r3
100080f0:	18c7883a 	add	r3,r3,r3
100080f4:	10c5883a 	add	r2,r2,r3
100080f8:	10c00017 	ldw	r3,0(r2)
100080fc:	28c00015 	stw	r3,0(r5)
10008100:	11400015 	stw	r5,0(r2)
10008104:	f800283a 	ret

10008108 <__multadd>:
10008108:	defff704 	addi	sp,sp,-36
1000810c:	dc800215 	stw	r18,8(sp)
10008110:	2c800417 	ldw	r18,16(r5)
10008114:	ddc00715 	stw	r23,28(sp)
10008118:	dd800615 	stw	r22,24(sp)
1000811c:	dd000415 	stw	r20,16(sp)
10008120:	dcc00315 	stw	r19,12(sp)
10008124:	dc400115 	stw	r17,4(sp)
10008128:	dc000015 	stw	r16,0(sp)
1000812c:	dfc00815 	stw	ra,32(sp)
10008130:	dd400515 	stw	r21,20(sp)
10008134:	2827883a 	mov	r19,r5
10008138:	2029883a 	mov	r20,r4
1000813c:	3023883a 	mov	r17,r6
10008140:	3821883a 	mov	r16,r7
10008144:	2d800504 	addi	r22,r5,20
10008148:	002f883a 	mov	r23,zero
1000814c:	b5400017 	ldw	r21,0(r22)
10008150:	880b883a 	mov	r5,r17
10008154:	bdc00044 	addi	r23,r23,1
10008158:	a93fffcc 	andi	r4,r21,65535
1000815c:	000c6040 	call	1000c604 <__mulsi3>
10008160:	1421883a 	add	r16,r2,r16
10008164:	a808d43a 	srli	r4,r21,16
10008168:	802ad43a 	srli	r21,r16,16
1000816c:	880b883a 	mov	r5,r17
10008170:	000c6040 	call	1000c604 <__mulsi3>
10008174:	a88f883a 	add	r7,r21,r2
10008178:	3804943a 	slli	r2,r7,16
1000817c:	80ffffcc 	andi	r3,r16,65535
10008180:	b5800104 	addi	r22,r22,4
10008184:	10c7883a 	add	r3,r2,r3
10008188:	b0ffff15 	stw	r3,-4(r22)
1000818c:	3820d43a 	srli	r16,r7,16
10008190:	bcbfee16 	blt	r23,r18,1000814c <__alt_data_end+0xf800814c>
10008194:	80000926 	beq	r16,zero,100081bc <__multadd+0xb4>
10008198:	98800217 	ldw	r2,8(r19)
1000819c:	9080130e 	bge	r18,r2,100081ec <__multadd+0xe4>
100081a0:	90800144 	addi	r2,r18,5
100081a4:	1085883a 	add	r2,r2,r2
100081a8:	1085883a 	add	r2,r2,r2
100081ac:	9885883a 	add	r2,r19,r2
100081b0:	14000015 	stw	r16,0(r2)
100081b4:	94800044 	addi	r18,r18,1
100081b8:	9c800415 	stw	r18,16(r19)
100081bc:	9805883a 	mov	r2,r19
100081c0:	dfc00817 	ldw	ra,32(sp)
100081c4:	ddc00717 	ldw	r23,28(sp)
100081c8:	dd800617 	ldw	r22,24(sp)
100081cc:	dd400517 	ldw	r21,20(sp)
100081d0:	dd000417 	ldw	r20,16(sp)
100081d4:	dcc00317 	ldw	r19,12(sp)
100081d8:	dc800217 	ldw	r18,8(sp)
100081dc:	dc400117 	ldw	r17,4(sp)
100081e0:	dc000017 	ldw	r16,0(sp)
100081e4:	dec00904 	addi	sp,sp,36
100081e8:	f800283a 	ret
100081ec:	99400117 	ldw	r5,4(r19)
100081f0:	a009883a 	mov	r4,r20
100081f4:	29400044 	addi	r5,r5,1
100081f8:	00080380 	call	10008038 <_Balloc>
100081fc:	99800417 	ldw	r6,16(r19)
10008200:	99400304 	addi	r5,r19,12
10008204:	11000304 	addi	r4,r2,12
10008208:	31800084 	addi	r6,r6,2
1000820c:	318d883a 	add	r6,r6,r6
10008210:	318d883a 	add	r6,r6,r6
10008214:	1023883a 	mov	r17,r2
10008218:	0007c800 	call	10007c80 <memcpy>
1000821c:	99000117 	ldw	r4,4(r19)
10008220:	a0c01317 	ldw	r3,76(r20)
10008224:	2109883a 	add	r4,r4,r4
10008228:	2109883a 	add	r4,r4,r4
1000822c:	1907883a 	add	r3,r3,r4
10008230:	18800017 	ldw	r2,0(r3)
10008234:	98800015 	stw	r2,0(r19)
10008238:	1cc00015 	stw	r19,0(r3)
1000823c:	8827883a 	mov	r19,r17
10008240:	003fd706 	br	100081a0 <__alt_data_end+0xf80081a0>

10008244 <__s2b>:
10008244:	defff904 	addi	sp,sp,-28
10008248:	dc400115 	stw	r17,4(sp)
1000824c:	dc000015 	stw	r16,0(sp)
10008250:	2023883a 	mov	r17,r4
10008254:	2821883a 	mov	r16,r5
10008258:	39000204 	addi	r4,r7,8
1000825c:	01400244 	movi	r5,9
10008260:	dcc00315 	stw	r19,12(sp)
10008264:	dc800215 	stw	r18,8(sp)
10008268:	dfc00615 	stw	ra,24(sp)
1000826c:	dd400515 	stw	r21,20(sp)
10008270:	dd000415 	stw	r20,16(sp)
10008274:	3825883a 	mov	r18,r7
10008278:	3027883a 	mov	r19,r6
1000827c:	000c5440 	call	1000c544 <__divsi3>
10008280:	00c00044 	movi	r3,1
10008284:	000b883a 	mov	r5,zero
10008288:	1880030e 	bge	r3,r2,10008298 <__s2b+0x54>
1000828c:	18c7883a 	add	r3,r3,r3
10008290:	29400044 	addi	r5,r5,1
10008294:	18bffd16 	blt	r3,r2,1000828c <__alt_data_end+0xf800828c>
10008298:	8809883a 	mov	r4,r17
1000829c:	00080380 	call	10008038 <_Balloc>
100082a0:	d8c00717 	ldw	r3,28(sp)
100082a4:	10c00515 	stw	r3,20(r2)
100082a8:	00c00044 	movi	r3,1
100082ac:	10c00415 	stw	r3,16(r2)
100082b0:	00c00244 	movi	r3,9
100082b4:	1cc0210e 	bge	r3,r19,1000833c <__s2b+0xf8>
100082b8:	80eb883a 	add	r21,r16,r3
100082bc:	a829883a 	mov	r20,r21
100082c0:	84e1883a 	add	r16,r16,r19
100082c4:	a1c00007 	ldb	r7,0(r20)
100082c8:	8809883a 	mov	r4,r17
100082cc:	a5000044 	addi	r20,r20,1
100082d0:	100b883a 	mov	r5,r2
100082d4:	01800284 	movi	r6,10
100082d8:	39fff404 	addi	r7,r7,-48
100082dc:	00081080 	call	10008108 <__multadd>
100082e0:	a43ff81e 	bne	r20,r16,100082c4 <__alt_data_end+0xf80082c4>
100082e4:	ace1883a 	add	r16,r21,r19
100082e8:	843ffe04 	addi	r16,r16,-8
100082ec:	9c800a0e 	bge	r19,r18,10008318 <__s2b+0xd4>
100082f0:	94e5c83a 	sub	r18,r18,r19
100082f4:	84a5883a 	add	r18,r16,r18
100082f8:	81c00007 	ldb	r7,0(r16)
100082fc:	8809883a 	mov	r4,r17
10008300:	84000044 	addi	r16,r16,1
10008304:	100b883a 	mov	r5,r2
10008308:	01800284 	movi	r6,10
1000830c:	39fff404 	addi	r7,r7,-48
10008310:	00081080 	call	10008108 <__multadd>
10008314:	84bff81e 	bne	r16,r18,100082f8 <__alt_data_end+0xf80082f8>
10008318:	dfc00617 	ldw	ra,24(sp)
1000831c:	dd400517 	ldw	r21,20(sp)
10008320:	dd000417 	ldw	r20,16(sp)
10008324:	dcc00317 	ldw	r19,12(sp)
10008328:	dc800217 	ldw	r18,8(sp)
1000832c:	dc400117 	ldw	r17,4(sp)
10008330:	dc000017 	ldw	r16,0(sp)
10008334:	dec00704 	addi	sp,sp,28
10008338:	f800283a 	ret
1000833c:	84000284 	addi	r16,r16,10
10008340:	1827883a 	mov	r19,r3
10008344:	003fe906 	br	100082ec <__alt_data_end+0xf80082ec>

10008348 <__hi0bits>:
10008348:	20bfffec 	andhi	r2,r4,65535
1000834c:	1000141e 	bne	r2,zero,100083a0 <__hi0bits+0x58>
10008350:	2008943a 	slli	r4,r4,16
10008354:	00800404 	movi	r2,16
10008358:	20ffc02c 	andhi	r3,r4,65280
1000835c:	1800021e 	bne	r3,zero,10008368 <__hi0bits+0x20>
10008360:	2008923a 	slli	r4,r4,8
10008364:	10800204 	addi	r2,r2,8
10008368:	20fc002c 	andhi	r3,r4,61440
1000836c:	1800021e 	bne	r3,zero,10008378 <__hi0bits+0x30>
10008370:	2008913a 	slli	r4,r4,4
10008374:	10800104 	addi	r2,r2,4
10008378:	20f0002c 	andhi	r3,r4,49152
1000837c:	1800031e 	bne	r3,zero,1000838c <__hi0bits+0x44>
10008380:	2109883a 	add	r4,r4,r4
10008384:	10800084 	addi	r2,r2,2
10008388:	2109883a 	add	r4,r4,r4
1000838c:	20000316 	blt	r4,zero,1000839c <__hi0bits+0x54>
10008390:	2110002c 	andhi	r4,r4,16384
10008394:	2000041e 	bne	r4,zero,100083a8 <__hi0bits+0x60>
10008398:	00800804 	movi	r2,32
1000839c:	f800283a 	ret
100083a0:	0005883a 	mov	r2,zero
100083a4:	003fec06 	br	10008358 <__alt_data_end+0xf8008358>
100083a8:	10800044 	addi	r2,r2,1
100083ac:	f800283a 	ret

100083b0 <__lo0bits>:
100083b0:	20c00017 	ldw	r3,0(r4)
100083b4:	188001cc 	andi	r2,r3,7
100083b8:	10000826 	beq	r2,zero,100083dc <__lo0bits+0x2c>
100083bc:	1880004c 	andi	r2,r3,1
100083c0:	1000211e 	bne	r2,zero,10008448 <__lo0bits+0x98>
100083c4:	1880008c 	andi	r2,r3,2
100083c8:	1000211e 	bne	r2,zero,10008450 <__lo0bits+0xa0>
100083cc:	1806d0ba 	srli	r3,r3,2
100083d0:	00800084 	movi	r2,2
100083d4:	20c00015 	stw	r3,0(r4)
100083d8:	f800283a 	ret
100083dc:	18bfffcc 	andi	r2,r3,65535
100083e0:	10001326 	beq	r2,zero,10008430 <__lo0bits+0x80>
100083e4:	0005883a 	mov	r2,zero
100083e8:	19403fcc 	andi	r5,r3,255
100083ec:	2800021e 	bne	r5,zero,100083f8 <__lo0bits+0x48>
100083f0:	1806d23a 	srli	r3,r3,8
100083f4:	10800204 	addi	r2,r2,8
100083f8:	194003cc 	andi	r5,r3,15
100083fc:	2800021e 	bne	r5,zero,10008408 <__lo0bits+0x58>
10008400:	1806d13a 	srli	r3,r3,4
10008404:	10800104 	addi	r2,r2,4
10008408:	194000cc 	andi	r5,r3,3
1000840c:	2800021e 	bne	r5,zero,10008418 <__lo0bits+0x68>
10008410:	1806d0ba 	srli	r3,r3,2
10008414:	10800084 	addi	r2,r2,2
10008418:	1940004c 	andi	r5,r3,1
1000841c:	2800081e 	bne	r5,zero,10008440 <__lo0bits+0x90>
10008420:	1806d07a 	srli	r3,r3,1
10008424:	1800051e 	bne	r3,zero,1000843c <__lo0bits+0x8c>
10008428:	00800804 	movi	r2,32
1000842c:	f800283a 	ret
10008430:	1806d43a 	srli	r3,r3,16
10008434:	00800404 	movi	r2,16
10008438:	003feb06 	br	100083e8 <__alt_data_end+0xf80083e8>
1000843c:	10800044 	addi	r2,r2,1
10008440:	20c00015 	stw	r3,0(r4)
10008444:	f800283a 	ret
10008448:	0005883a 	mov	r2,zero
1000844c:	f800283a 	ret
10008450:	1806d07a 	srli	r3,r3,1
10008454:	00800044 	movi	r2,1
10008458:	20c00015 	stw	r3,0(r4)
1000845c:	f800283a 	ret

10008460 <__i2b>:
10008460:	defffd04 	addi	sp,sp,-12
10008464:	dc000015 	stw	r16,0(sp)
10008468:	04000044 	movi	r16,1
1000846c:	dc400115 	stw	r17,4(sp)
10008470:	2823883a 	mov	r17,r5
10008474:	800b883a 	mov	r5,r16
10008478:	dfc00215 	stw	ra,8(sp)
1000847c:	00080380 	call	10008038 <_Balloc>
10008480:	14400515 	stw	r17,20(r2)
10008484:	14000415 	stw	r16,16(r2)
10008488:	dfc00217 	ldw	ra,8(sp)
1000848c:	dc400117 	ldw	r17,4(sp)
10008490:	dc000017 	ldw	r16,0(sp)
10008494:	dec00304 	addi	sp,sp,12
10008498:	f800283a 	ret

1000849c <__multiply>:
1000849c:	deffef04 	addi	sp,sp,-68
100084a0:	dc400815 	stw	r17,32(sp)
100084a4:	dc000715 	stw	r16,28(sp)
100084a8:	2c400417 	ldw	r17,16(r5)
100084ac:	34000417 	ldw	r16,16(r6)
100084b0:	dd800d15 	stw	r22,52(sp)
100084b4:	dc800915 	stw	r18,36(sp)
100084b8:	dfc01015 	stw	ra,64(sp)
100084bc:	df000f15 	stw	fp,60(sp)
100084c0:	ddc00e15 	stw	r23,56(sp)
100084c4:	dd400c15 	stw	r21,48(sp)
100084c8:	dd000b15 	stw	r20,44(sp)
100084cc:	dcc00a15 	stw	r19,40(sp)
100084d0:	2825883a 	mov	r18,r5
100084d4:	302d883a 	mov	r22,r6
100084d8:	8c009116 	blt	r17,r16,10008720 <__multiply+0x284>
100084dc:	8005883a 	mov	r2,r16
100084e0:	8821883a 	mov	r16,r17
100084e4:	1023883a 	mov	r17,r2
100084e8:	90800217 	ldw	r2,8(r18)
100084ec:	8447883a 	add	r3,r16,r17
100084f0:	d8c00215 	stw	r3,8(sp)
100084f4:	91400117 	ldw	r5,4(r18)
100084f8:	10c0010e 	bge	r2,r3,10008500 <__multiply+0x64>
100084fc:	29400044 	addi	r5,r5,1
10008500:	00080380 	call	10008038 <_Balloc>
10008504:	d8c00217 	ldw	r3,8(sp)
10008508:	d8800615 	stw	r2,24(sp)
1000850c:	18eb883a 	add	r21,r3,r3
10008510:	ad6b883a 	add	r21,r21,r21
10008514:	10c00504 	addi	r3,r2,20
10008518:	1d6b883a 	add	r21,r3,r21
1000851c:	d8c00115 	stw	r3,4(sp)
10008520:	dd400315 	stw	r21,12(sp)
10008524:	1805883a 	mov	r2,r3
10008528:	1d40042e 	bgeu	r3,r21,1000853c <__multiply+0xa0>
1000852c:	d8c00317 	ldw	r3,12(sp)
10008530:	10000015 	stw	zero,0(r2)
10008534:	10800104 	addi	r2,r2,4
10008538:	10fffc36 	bltu	r2,r3,1000852c <__alt_data_end+0xf800852c>
1000853c:	8c63883a 	add	r17,r17,r17
10008540:	b5800504 	addi	r22,r22,20
10008544:	8c63883a 	add	r17,r17,r17
10008548:	94800504 	addi	r18,r18,20
1000854c:	8421883a 	add	r16,r16,r16
10008550:	b463883a 	add	r17,r22,r17
10008554:	8421883a 	add	r16,r16,r16
10008558:	dd800015 	stw	r22,0(sp)
1000855c:	dc800415 	stw	r18,16(sp)
10008560:	dc400515 	stw	r17,20(sp)
10008564:	9429883a 	add	r20,r18,r16
10008568:	b4404f2e 	bgeu	r22,r17,100086a8 <__multiply+0x20c>
1000856c:	d8c00017 	ldw	r3,0(sp)
10008570:	1c800017 	ldw	r18,0(r3)
10008574:	943fffcc 	andi	r16,r18,65535
10008578:	80001e26 	beq	r16,zero,100085f4 <__multiply+0x158>
1000857c:	dd800117 	ldw	r22,4(sp)
10008580:	dd400417 	ldw	r21,16(sp)
10008584:	0025883a 	mov	r18,zero
10008588:	adc00017 	ldw	r23,0(r21)
1000858c:	b4c00017 	ldw	r19,0(r22)
10008590:	800b883a 	mov	r5,r16
10008594:	b93fffcc 	andi	r4,r23,65535
10008598:	000c6040 	call	1000c604 <__mulsi3>
1000859c:	9c7fffcc 	andi	r17,r19,65535
100085a0:	8885883a 	add	r2,r17,r2
100085a4:	b808d43a 	srli	r4,r23,16
100085a8:	14a3883a 	add	r17,r2,r18
100085ac:	9826d43a 	srli	r19,r19,16
100085b0:	8824d43a 	srli	r18,r17,16
100085b4:	800b883a 	mov	r5,r16
100085b8:	000c6040 	call	1000c604 <__mulsi3>
100085bc:	9885883a 	add	r2,r19,r2
100085c0:	14a7883a 	add	r19,r2,r18
100085c4:	88ffffcc 	andi	r3,r17,65535
100085c8:	9822943a 	slli	r17,r19,16
100085cc:	ad400104 	addi	r21,r21,4
100085d0:	b005883a 	mov	r2,r22
100085d4:	88c6b03a 	or	r3,r17,r3
100085d8:	b0c00015 	stw	r3,0(r22)
100085dc:	9824d43a 	srli	r18,r19,16
100085e0:	b5800104 	addi	r22,r22,4
100085e4:	ad3fe836 	bltu	r21,r20,10008588 <__alt_data_end+0xf8008588>
100085e8:	d8c00017 	ldw	r3,0(sp)
100085ec:	14800115 	stw	r18,4(r2)
100085f0:	1c800017 	ldw	r18,0(r3)
100085f4:	9024d43a 	srli	r18,r18,16
100085f8:	90002226 	beq	r18,zero,10008684 <__multiply+0x1e8>
100085fc:	d8c00117 	ldw	r3,4(sp)
10008600:	dd800417 	ldw	r22,16(sp)
10008604:	002f883a 	mov	r23,zero
10008608:	1f000017 	ldw	fp,0(r3)
1000860c:	1823883a 	mov	r17,r3
10008610:	182b883a 	mov	r21,r3
10008614:	e021883a 	mov	r16,fp
10008618:	00000106 	br	10008620 <__multiply+0x184>
1000861c:	982b883a 	mov	r21,r19
10008620:	b100000b 	ldhu	r4,0(r22)
10008624:	8020d43a 	srli	r16,r16,16
10008628:	900b883a 	mov	r5,r18
1000862c:	000c6040 	call	1000c604 <__mulsi3>
10008630:	1405883a 	add	r2,r2,r16
10008634:	15ef883a 	add	r23,r2,r23
10008638:	b804943a 	slli	r2,r23,16
1000863c:	e0ffffcc 	andi	r3,fp,65535
10008640:	8c400104 	addi	r17,r17,4
10008644:	10c6b03a 	or	r3,r2,r3
10008648:	88ffff15 	stw	r3,-4(r17)
1000864c:	b5800104 	addi	r22,r22,4
10008650:	b13fff17 	ldw	r4,-4(r22)
10008654:	acc00104 	addi	r19,r21,4
10008658:	900b883a 	mov	r5,r18
1000865c:	2008d43a 	srli	r4,r4,16
10008660:	9c000017 	ldw	r16,0(r19)
10008664:	000c6040 	call	1000c604 <__mulsi3>
10008668:	b806d43a 	srli	r3,r23,16
1000866c:	813fffcc 	andi	r4,r16,65535
10008670:	1105883a 	add	r2,r2,r4
10008674:	10f9883a 	add	fp,r2,r3
10008678:	e02ed43a 	srli	r23,fp,16
1000867c:	b53fe736 	bltu	r22,r20,1000861c <__alt_data_end+0xf800861c>
10008680:	af000115 	stw	fp,4(r21)
10008684:	d8c00017 	ldw	r3,0(sp)
10008688:	d9000517 	ldw	r4,20(sp)
1000868c:	18c00104 	addi	r3,r3,4
10008690:	d8c00015 	stw	r3,0(sp)
10008694:	d8c00117 	ldw	r3,4(sp)
10008698:	18c00104 	addi	r3,r3,4
1000869c:	d8c00115 	stw	r3,4(sp)
100086a0:	d8c00017 	ldw	r3,0(sp)
100086a4:	193fb136 	bltu	r3,r4,1000856c <__alt_data_end+0xf800856c>
100086a8:	d8c00217 	ldw	r3,8(sp)
100086ac:	00c00c0e 	bge	zero,r3,100086e0 <__multiply+0x244>
100086b0:	d8c00317 	ldw	r3,12(sp)
100086b4:	18bfff17 	ldw	r2,-4(r3)
100086b8:	1d7fff04 	addi	r21,r3,-4
100086bc:	10000326 	beq	r2,zero,100086cc <__multiply+0x230>
100086c0:	00000706 	br	100086e0 <__multiply+0x244>
100086c4:	a8800017 	ldw	r2,0(r21)
100086c8:	1000051e 	bne	r2,zero,100086e0 <__multiply+0x244>
100086cc:	d8c00217 	ldw	r3,8(sp)
100086d0:	ad7fff04 	addi	r21,r21,-4
100086d4:	18ffffc4 	addi	r3,r3,-1
100086d8:	d8c00215 	stw	r3,8(sp)
100086dc:	183ff91e 	bne	r3,zero,100086c4 <__alt_data_end+0xf80086c4>
100086e0:	d8c00617 	ldw	r3,24(sp)
100086e4:	d9000217 	ldw	r4,8(sp)
100086e8:	1805883a 	mov	r2,r3
100086ec:	19000415 	stw	r4,16(r3)
100086f0:	dfc01017 	ldw	ra,64(sp)
100086f4:	df000f17 	ldw	fp,60(sp)
100086f8:	ddc00e17 	ldw	r23,56(sp)
100086fc:	dd800d17 	ldw	r22,52(sp)
10008700:	dd400c17 	ldw	r21,48(sp)
10008704:	dd000b17 	ldw	r20,44(sp)
10008708:	dcc00a17 	ldw	r19,40(sp)
1000870c:	dc800917 	ldw	r18,36(sp)
10008710:	dc400817 	ldw	r17,32(sp)
10008714:	dc000717 	ldw	r16,28(sp)
10008718:	dec01104 	addi	sp,sp,68
1000871c:	f800283a 	ret
10008720:	3025883a 	mov	r18,r6
10008724:	282d883a 	mov	r22,r5
10008728:	003f6f06 	br	100084e8 <__alt_data_end+0xf80084e8>

1000872c <__pow5mult>:
1000872c:	defffa04 	addi	sp,sp,-24
10008730:	dcc00315 	stw	r19,12(sp)
10008734:	dc800215 	stw	r18,8(sp)
10008738:	dc000015 	stw	r16,0(sp)
1000873c:	dfc00515 	stw	ra,20(sp)
10008740:	dd000415 	stw	r20,16(sp)
10008744:	dc400115 	stw	r17,4(sp)
10008748:	308000cc 	andi	r2,r6,3
1000874c:	3021883a 	mov	r16,r6
10008750:	2027883a 	mov	r19,r4
10008754:	2825883a 	mov	r18,r5
10008758:	10002e1e 	bne	r2,zero,10008814 <__pow5mult+0xe8>
1000875c:	8021d0ba 	srai	r16,r16,2
10008760:	80001a26 	beq	r16,zero,100087cc <__pow5mult+0xa0>
10008764:	9c401217 	ldw	r17,72(r19)
10008768:	8800061e 	bne	r17,zero,10008784 <__pow5mult+0x58>
1000876c:	00003406 	br	10008840 <__pow5mult+0x114>
10008770:	8021d07a 	srai	r16,r16,1
10008774:	80001526 	beq	r16,zero,100087cc <__pow5mult+0xa0>
10008778:	88800017 	ldw	r2,0(r17)
1000877c:	10001c26 	beq	r2,zero,100087f0 <__pow5mult+0xc4>
10008780:	1023883a 	mov	r17,r2
10008784:	80c0004c 	andi	r3,r16,1
10008788:	183ff926 	beq	r3,zero,10008770 <__alt_data_end+0xf8008770>
1000878c:	900b883a 	mov	r5,r18
10008790:	880d883a 	mov	r6,r17
10008794:	9809883a 	mov	r4,r19
10008798:	000849c0 	call	1000849c <__multiply>
1000879c:	90001b26 	beq	r18,zero,1000880c <__pow5mult+0xe0>
100087a0:	91c00117 	ldw	r7,4(r18)
100087a4:	98c01317 	ldw	r3,76(r19)
100087a8:	8021d07a 	srai	r16,r16,1
100087ac:	39cf883a 	add	r7,r7,r7
100087b0:	39cf883a 	add	r7,r7,r7
100087b4:	19c7883a 	add	r3,r3,r7
100087b8:	19000017 	ldw	r4,0(r3)
100087bc:	91000015 	stw	r4,0(r18)
100087c0:	1c800015 	stw	r18,0(r3)
100087c4:	1025883a 	mov	r18,r2
100087c8:	803feb1e 	bne	r16,zero,10008778 <__alt_data_end+0xf8008778>
100087cc:	9005883a 	mov	r2,r18
100087d0:	dfc00517 	ldw	ra,20(sp)
100087d4:	dd000417 	ldw	r20,16(sp)
100087d8:	dcc00317 	ldw	r19,12(sp)
100087dc:	dc800217 	ldw	r18,8(sp)
100087e0:	dc400117 	ldw	r17,4(sp)
100087e4:	dc000017 	ldw	r16,0(sp)
100087e8:	dec00604 	addi	sp,sp,24
100087ec:	f800283a 	ret
100087f0:	9809883a 	mov	r4,r19
100087f4:	880b883a 	mov	r5,r17
100087f8:	880d883a 	mov	r6,r17
100087fc:	000849c0 	call	1000849c <__multiply>
10008800:	88800015 	stw	r2,0(r17)
10008804:	10000015 	stw	zero,0(r2)
10008808:	003fdd06 	br	10008780 <__alt_data_end+0xf8008780>
1000880c:	1025883a 	mov	r18,r2
10008810:	003fd706 	br	10008770 <__alt_data_end+0xf8008770>
10008814:	10bfffc4 	addi	r2,r2,-1
10008818:	1085883a 	add	r2,r2,r2
1000881c:	00c40074 	movhi	r3,4097
10008820:	18c79b04 	addi	r3,r3,7788
10008824:	1085883a 	add	r2,r2,r2
10008828:	1885883a 	add	r2,r3,r2
1000882c:	11800017 	ldw	r6,0(r2)
10008830:	000f883a 	mov	r7,zero
10008834:	00081080 	call	10008108 <__multadd>
10008838:	1025883a 	mov	r18,r2
1000883c:	003fc706 	br	1000875c <__alt_data_end+0xf800875c>
10008840:	05000044 	movi	r20,1
10008844:	9809883a 	mov	r4,r19
10008848:	a00b883a 	mov	r5,r20
1000884c:	00080380 	call	10008038 <_Balloc>
10008850:	1023883a 	mov	r17,r2
10008854:	00809c44 	movi	r2,625
10008858:	88800515 	stw	r2,20(r17)
1000885c:	8d000415 	stw	r20,16(r17)
10008860:	9c401215 	stw	r17,72(r19)
10008864:	88000015 	stw	zero,0(r17)
10008868:	003fc606 	br	10008784 <__alt_data_end+0xf8008784>

1000886c <__lshift>:
1000886c:	defff904 	addi	sp,sp,-28
10008870:	dd000415 	stw	r20,16(sp)
10008874:	dcc00315 	stw	r19,12(sp)
10008878:	3029d17a 	srai	r20,r6,5
1000887c:	2cc00417 	ldw	r19,16(r5)
10008880:	28800217 	ldw	r2,8(r5)
10008884:	dd400515 	stw	r21,20(sp)
10008888:	a4e7883a 	add	r19,r20,r19
1000888c:	dc800215 	stw	r18,8(sp)
10008890:	dc400115 	stw	r17,4(sp)
10008894:	dc000015 	stw	r16,0(sp)
10008898:	dfc00615 	stw	ra,24(sp)
1000889c:	9c000044 	addi	r16,r19,1
100088a0:	2823883a 	mov	r17,r5
100088a4:	302b883a 	mov	r21,r6
100088a8:	2025883a 	mov	r18,r4
100088ac:	29400117 	ldw	r5,4(r5)
100088b0:	1400030e 	bge	r2,r16,100088c0 <__lshift+0x54>
100088b4:	1085883a 	add	r2,r2,r2
100088b8:	29400044 	addi	r5,r5,1
100088bc:	143ffd16 	blt	r2,r16,100088b4 <__alt_data_end+0xf80088b4>
100088c0:	9009883a 	mov	r4,r18
100088c4:	00080380 	call	10008038 <_Balloc>
100088c8:	11c00504 	addi	r7,r2,20
100088cc:	0500090e 	bge	zero,r20,100088f4 <__lshift+0x88>
100088d0:	3811883a 	mov	r8,r7
100088d4:	0007883a 	mov	r3,zero
100088d8:	40000015 	stw	zero,0(r8)
100088dc:	18c00044 	addi	r3,r3,1
100088e0:	42000104 	addi	r8,r8,4
100088e4:	1d3ffc1e 	bne	r3,r20,100088d8 <__alt_data_end+0xf80088d8>
100088e8:	18c7883a 	add	r3,r3,r3
100088ec:	18c7883a 	add	r3,r3,r3
100088f0:	38cf883a 	add	r7,r7,r3
100088f4:	89000417 	ldw	r4,16(r17)
100088f8:	88c00504 	addi	r3,r17,20
100088fc:	a98007cc 	andi	r6,r21,31
10008900:	2109883a 	add	r4,r4,r4
10008904:	2109883a 	add	r4,r4,r4
10008908:	1909883a 	add	r4,r3,r4
1000890c:	30002326 	beq	r6,zero,1000899c <__lshift+0x130>
10008910:	01400804 	movi	r5,32
10008914:	298bc83a 	sub	r5,r5,r6
10008918:	0013883a 	mov	r9,zero
1000891c:	1a000017 	ldw	r8,0(r3)
10008920:	3815883a 	mov	r10,r7
10008924:	39c00104 	addi	r7,r7,4
10008928:	4190983a 	sll	r8,r8,r6
1000892c:	18c00104 	addi	r3,r3,4
10008930:	4a10b03a 	or	r8,r9,r8
10008934:	3a3fff15 	stw	r8,-4(r7)
10008938:	1a3fff17 	ldw	r8,-4(r3)
1000893c:	4152d83a 	srl	r9,r8,r5
10008940:	193ff636 	bltu	r3,r4,1000891c <__alt_data_end+0xf800891c>
10008944:	52400115 	stw	r9,4(r10)
10008948:	48000126 	beq	r9,zero,10008950 <__lshift+0xe4>
1000894c:	9c000084 	addi	r16,r19,2
10008950:	89000117 	ldw	r4,4(r17)
10008954:	90c01317 	ldw	r3,76(r18)
10008958:	843fffc4 	addi	r16,r16,-1
1000895c:	2109883a 	add	r4,r4,r4
10008960:	2109883a 	add	r4,r4,r4
10008964:	1907883a 	add	r3,r3,r4
10008968:	19000017 	ldw	r4,0(r3)
1000896c:	14000415 	stw	r16,16(r2)
10008970:	89000015 	stw	r4,0(r17)
10008974:	1c400015 	stw	r17,0(r3)
10008978:	dfc00617 	ldw	ra,24(sp)
1000897c:	dd400517 	ldw	r21,20(sp)
10008980:	dd000417 	ldw	r20,16(sp)
10008984:	dcc00317 	ldw	r19,12(sp)
10008988:	dc800217 	ldw	r18,8(sp)
1000898c:	dc400117 	ldw	r17,4(sp)
10008990:	dc000017 	ldw	r16,0(sp)
10008994:	dec00704 	addi	sp,sp,28
10008998:	f800283a 	ret
1000899c:	19400017 	ldw	r5,0(r3)
100089a0:	39c00104 	addi	r7,r7,4
100089a4:	18c00104 	addi	r3,r3,4
100089a8:	397fff15 	stw	r5,-4(r7)
100089ac:	193ffb36 	bltu	r3,r4,1000899c <__alt_data_end+0xf800899c>
100089b0:	003fe706 	br	10008950 <__alt_data_end+0xf8008950>

100089b4 <__mcmp>:
100089b4:	20800417 	ldw	r2,16(r4)
100089b8:	28c00417 	ldw	r3,16(r5)
100089bc:	10c5c83a 	sub	r2,r2,r3
100089c0:	1000111e 	bne	r2,zero,10008a08 <__mcmp+0x54>
100089c4:	18c7883a 	add	r3,r3,r3
100089c8:	18c7883a 	add	r3,r3,r3
100089cc:	21000504 	addi	r4,r4,20
100089d0:	29400504 	addi	r5,r5,20
100089d4:	20c5883a 	add	r2,r4,r3
100089d8:	28cb883a 	add	r5,r5,r3
100089dc:	00000106 	br	100089e4 <__mcmp+0x30>
100089e0:	20800a2e 	bgeu	r4,r2,10008a0c <__mcmp+0x58>
100089e4:	10bfff04 	addi	r2,r2,-4
100089e8:	297fff04 	addi	r5,r5,-4
100089ec:	11800017 	ldw	r6,0(r2)
100089f0:	28c00017 	ldw	r3,0(r5)
100089f4:	30fffa26 	beq	r6,r3,100089e0 <__alt_data_end+0xf80089e0>
100089f8:	30c00236 	bltu	r6,r3,10008a04 <__mcmp+0x50>
100089fc:	00800044 	movi	r2,1
10008a00:	f800283a 	ret
10008a04:	00bfffc4 	movi	r2,-1
10008a08:	f800283a 	ret
10008a0c:	0005883a 	mov	r2,zero
10008a10:	f800283a 	ret

10008a14 <__mdiff>:
10008a14:	defffb04 	addi	sp,sp,-20
10008a18:	dc000015 	stw	r16,0(sp)
10008a1c:	2821883a 	mov	r16,r5
10008a20:	dcc00315 	stw	r19,12(sp)
10008a24:	300b883a 	mov	r5,r6
10008a28:	2027883a 	mov	r19,r4
10008a2c:	8009883a 	mov	r4,r16
10008a30:	dc800215 	stw	r18,8(sp)
10008a34:	dfc00415 	stw	ra,16(sp)
10008a38:	dc400115 	stw	r17,4(sp)
10008a3c:	3025883a 	mov	r18,r6
10008a40:	00089b40 	call	100089b4 <__mcmp>
10008a44:	10005226 	beq	r2,zero,10008b90 <__mdiff+0x17c>
10008a48:	10004c16 	blt	r2,zero,10008b7c <__mdiff+0x168>
10008a4c:	0023883a 	mov	r17,zero
10008a50:	81400117 	ldw	r5,4(r16)
10008a54:	9809883a 	mov	r4,r19
10008a58:	00080380 	call	10008038 <_Balloc>
10008a5c:	83400417 	ldw	r13,16(r16)
10008a60:	93800417 	ldw	r14,16(r18)
10008a64:	81000504 	addi	r4,r16,20
10008a68:	6b59883a 	add	r12,r13,r13
10008a6c:	739d883a 	add	r14,r14,r14
10008a70:	6319883a 	add	r12,r12,r12
10008a74:	91800504 	addi	r6,r18,20
10008a78:	739d883a 	add	r14,r14,r14
10008a7c:	14400315 	stw	r17,12(r2)
10008a80:	2319883a 	add	r12,r4,r12
10008a84:	339d883a 	add	r14,r6,r14
10008a88:	12400504 	addi	r9,r2,20
10008a8c:	0007883a 	mov	r3,zero
10008a90:	22000017 	ldw	r8,0(r4)
10008a94:	32800017 	ldw	r10,0(r6)
10008a98:	4ac00104 	addi	r11,r9,4
10008a9c:	41ffffcc 	andi	r7,r8,65535
10008aa0:	38c7883a 	add	r3,r7,r3
10008aa4:	51ffffcc 	andi	r7,r10,65535
10008aa8:	19cfc83a 	sub	r7,r3,r7
10008aac:	4010d43a 	srli	r8,r8,16
10008ab0:	5014d43a 	srli	r10,r10,16
10008ab4:	3807d43a 	srai	r3,r7,16
10008ab8:	39ffffcc 	andi	r7,r7,65535
10008abc:	4291c83a 	sub	r8,r8,r10
10008ac0:	40c7883a 	add	r3,r8,r3
10008ac4:	1810943a 	slli	r8,r3,16
10008ac8:	31800104 	addi	r6,r6,4
10008acc:	21000104 	addi	r4,r4,4
10008ad0:	41ceb03a 	or	r7,r8,r7
10008ad4:	49c00015 	stw	r7,0(r9)
10008ad8:	1807d43a 	srai	r3,r3,16
10008adc:	580b883a 	mov	r5,r11
10008ae0:	5813883a 	mov	r9,r11
10008ae4:	33bfea36 	bltu	r6,r14,10008a90 <__alt_data_end+0xf8008a90>
10008ae8:	2011883a 	mov	r8,r4
10008aec:	2300152e 	bgeu	r4,r12,10008b44 <__mdiff+0x130>
10008af0:	21400017 	ldw	r5,0(r4)
10008af4:	4a400104 	addi	r9,r9,4
10008af8:	21000104 	addi	r4,r4,4
10008afc:	29ffffcc 	andi	r7,r5,65535
10008b00:	38c7883a 	add	r3,r7,r3
10008b04:	280ad43a 	srli	r5,r5,16
10008b08:	180dd43a 	srai	r6,r3,16
10008b0c:	19ffffcc 	andi	r7,r3,65535
10008b10:	3147883a 	add	r3,r6,r5
10008b14:	180a943a 	slli	r5,r3,16
10008b18:	1807d43a 	srai	r3,r3,16
10008b1c:	29ceb03a 	or	r7,r5,r7
10008b20:	49ffff15 	stw	r7,-4(r9)
10008b24:	233ff236 	bltu	r4,r12,10008af0 <__alt_data_end+0xf8008af0>
10008b28:	0206303a 	nor	r3,zero,r8
10008b2c:	1b07883a 	add	r3,r3,r12
10008b30:	1806d0ba 	srli	r3,r3,2
10008b34:	18c00044 	addi	r3,r3,1
10008b38:	18c7883a 	add	r3,r3,r3
10008b3c:	18c7883a 	add	r3,r3,r3
10008b40:	58cb883a 	add	r5,r11,r3
10008b44:	28ffff04 	addi	r3,r5,-4
10008b48:	3800041e 	bne	r7,zero,10008b5c <__mdiff+0x148>
10008b4c:	18ffff04 	addi	r3,r3,-4
10008b50:	19000017 	ldw	r4,0(r3)
10008b54:	6b7fffc4 	addi	r13,r13,-1
10008b58:	203ffc26 	beq	r4,zero,10008b4c <__alt_data_end+0xf8008b4c>
10008b5c:	13400415 	stw	r13,16(r2)
10008b60:	dfc00417 	ldw	ra,16(sp)
10008b64:	dcc00317 	ldw	r19,12(sp)
10008b68:	dc800217 	ldw	r18,8(sp)
10008b6c:	dc400117 	ldw	r17,4(sp)
10008b70:	dc000017 	ldw	r16,0(sp)
10008b74:	dec00504 	addi	sp,sp,20
10008b78:	f800283a 	ret
10008b7c:	8005883a 	mov	r2,r16
10008b80:	04400044 	movi	r17,1
10008b84:	9021883a 	mov	r16,r18
10008b88:	1025883a 	mov	r18,r2
10008b8c:	003fb006 	br	10008a50 <__alt_data_end+0xf8008a50>
10008b90:	9809883a 	mov	r4,r19
10008b94:	000b883a 	mov	r5,zero
10008b98:	00080380 	call	10008038 <_Balloc>
10008b9c:	00c00044 	movi	r3,1
10008ba0:	10c00415 	stw	r3,16(r2)
10008ba4:	10000515 	stw	zero,20(r2)
10008ba8:	003fed06 	br	10008b60 <__alt_data_end+0xf8008b60>

10008bac <__ulp>:
10008bac:	295ffc2c 	andhi	r5,r5,32752
10008bb0:	00bf3034 	movhi	r2,64704
10008bb4:	2887883a 	add	r3,r5,r2
10008bb8:	00c0020e 	bge	zero,r3,10008bc4 <__ulp+0x18>
10008bbc:	0005883a 	mov	r2,zero
10008bc0:	f800283a 	ret
10008bc4:	00c7c83a 	sub	r3,zero,r3
10008bc8:	180bd53a 	srai	r5,r3,20
10008bcc:	008004c4 	movi	r2,19
10008bd0:	11400a0e 	bge	r2,r5,10008bfc <__ulp+0x50>
10008bd4:	00800c84 	movi	r2,50
10008bd8:	0007883a 	mov	r3,zero
10008bdc:	11400516 	blt	r2,r5,10008bf4 <__ulp+0x48>
10008be0:	00800cc4 	movi	r2,51
10008be4:	114bc83a 	sub	r5,r2,r5
10008be8:	00800044 	movi	r2,1
10008bec:	1144983a 	sll	r2,r2,r5
10008bf0:	f800283a 	ret
10008bf4:	00800044 	movi	r2,1
10008bf8:	f800283a 	ret
10008bfc:	00800234 	movhi	r2,8
10008c00:	1147d83a 	sra	r3,r2,r5
10008c04:	0005883a 	mov	r2,zero
10008c08:	f800283a 	ret

10008c0c <__b2d>:
10008c0c:	defffa04 	addi	sp,sp,-24
10008c10:	dc000015 	stw	r16,0(sp)
10008c14:	24000417 	ldw	r16,16(r4)
10008c18:	dc400115 	stw	r17,4(sp)
10008c1c:	24400504 	addi	r17,r4,20
10008c20:	8421883a 	add	r16,r16,r16
10008c24:	8421883a 	add	r16,r16,r16
10008c28:	8c21883a 	add	r16,r17,r16
10008c2c:	dc800215 	stw	r18,8(sp)
10008c30:	84bfff17 	ldw	r18,-4(r16)
10008c34:	dd000415 	stw	r20,16(sp)
10008c38:	dcc00315 	stw	r19,12(sp)
10008c3c:	9009883a 	mov	r4,r18
10008c40:	2829883a 	mov	r20,r5
10008c44:	dfc00515 	stw	ra,20(sp)
10008c48:	00083480 	call	10008348 <__hi0bits>
10008c4c:	00c00804 	movi	r3,32
10008c50:	1887c83a 	sub	r3,r3,r2
10008c54:	a0c00015 	stw	r3,0(r20)
10008c58:	00c00284 	movi	r3,10
10008c5c:	84ffff04 	addi	r19,r16,-4
10008c60:	18801216 	blt	r3,r2,10008cac <__b2d+0xa0>
10008c64:	014002c4 	movi	r5,11
10008c68:	2889c83a 	sub	r4,r5,r2
10008c6c:	9106d83a 	srl	r3,r18,r4
10008c70:	18cffc34 	orhi	r3,r3,16368
10008c74:	8cc0282e 	bgeu	r17,r19,10008d18 <__b2d+0x10c>
10008c78:	817ffe17 	ldw	r5,-8(r16)
10008c7c:	290ad83a 	srl	r5,r5,r4
10008c80:	10800544 	addi	r2,r2,21
10008c84:	9084983a 	sll	r2,r18,r2
10008c88:	2884b03a 	or	r2,r5,r2
10008c8c:	dfc00517 	ldw	ra,20(sp)
10008c90:	dd000417 	ldw	r20,16(sp)
10008c94:	dcc00317 	ldw	r19,12(sp)
10008c98:	dc800217 	ldw	r18,8(sp)
10008c9c:	dc400117 	ldw	r17,4(sp)
10008ca0:	dc000017 	ldw	r16,0(sp)
10008ca4:	dec00604 	addi	sp,sp,24
10008ca8:	f800283a 	ret
10008cac:	113ffd44 	addi	r4,r2,-11
10008cb0:	8cc00f2e 	bgeu	r17,r19,10008cf0 <__b2d+0xe4>
10008cb4:	81bffe04 	addi	r6,r16,-8
10008cb8:	817ffe17 	ldw	r5,-8(r16)
10008cbc:	20001326 	beq	r4,zero,10008d0c <__b2d+0x100>
10008cc0:	00c00ac4 	movi	r3,43
10008cc4:	1885c83a 	sub	r2,r3,r2
10008cc8:	2886d83a 	srl	r3,r5,r2
10008ccc:	9124983a 	sll	r18,r18,r4
10008cd0:	90e4b03a 	or	r18,r18,r3
10008cd4:	90cffc34 	orhi	r3,r18,16368
10008cd8:	8980112e 	bgeu	r17,r6,10008d20 <__b2d+0x114>
10008cdc:	81bffd17 	ldw	r6,-12(r16)
10008ce0:	308cd83a 	srl	r6,r6,r2
10008ce4:	2904983a 	sll	r2,r5,r4
10008ce8:	1184b03a 	or	r2,r2,r6
10008cec:	003fe706 	br	10008c8c <__alt_data_end+0xf8008c8c>
10008cf0:	20000526 	beq	r4,zero,10008d08 <__b2d+0xfc>
10008cf4:	9124983a 	sll	r18,r18,r4
10008cf8:	000d883a 	mov	r6,zero
10008cfc:	000b883a 	mov	r5,zero
10008d00:	90cffc34 	orhi	r3,r18,16368
10008d04:	003ff706 	br	10008ce4 <__alt_data_end+0xf8008ce4>
10008d08:	000b883a 	mov	r5,zero
10008d0c:	90cffc34 	orhi	r3,r18,16368
10008d10:	2805883a 	mov	r2,r5
10008d14:	003fdd06 	br	10008c8c <__alt_data_end+0xf8008c8c>
10008d18:	000b883a 	mov	r5,zero
10008d1c:	003fd806 	br	10008c80 <__alt_data_end+0xf8008c80>
10008d20:	000d883a 	mov	r6,zero
10008d24:	003fef06 	br	10008ce4 <__alt_data_end+0xf8008ce4>

10008d28 <__d2b>:
10008d28:	defff704 	addi	sp,sp,-36
10008d2c:	dc000215 	stw	r16,8(sp)
10008d30:	3021883a 	mov	r16,r6
10008d34:	dc400315 	stw	r17,12(sp)
10008d38:	8022907a 	slli	r17,r16,1
10008d3c:	dd400715 	stw	r21,28(sp)
10008d40:	282b883a 	mov	r21,r5
10008d44:	01400044 	movi	r5,1
10008d48:	dd000615 	stw	r20,24(sp)
10008d4c:	dcc00515 	stw	r19,20(sp)
10008d50:	dc800415 	stw	r18,16(sp)
10008d54:	dfc00815 	stw	ra,32(sp)
10008d58:	3829883a 	mov	r20,r7
10008d5c:	dc800917 	ldw	r18,36(sp)
10008d60:	8822d57a 	srli	r17,r17,21
10008d64:	00080380 	call	10008038 <_Balloc>
10008d68:	1027883a 	mov	r19,r2
10008d6c:	00800434 	movhi	r2,16
10008d70:	10bfffc4 	addi	r2,r2,-1
10008d74:	808c703a 	and	r6,r16,r2
10008d78:	88000126 	beq	r17,zero,10008d80 <__d2b+0x58>
10008d7c:	31800434 	orhi	r6,r6,16
10008d80:	d9800015 	stw	r6,0(sp)
10008d84:	a8001f26 	beq	r21,zero,10008e04 <__d2b+0xdc>
10008d88:	d9000104 	addi	r4,sp,4
10008d8c:	dd400115 	stw	r21,4(sp)
10008d90:	00083b00 	call	100083b0 <__lo0bits>
10008d94:	d8c00017 	ldw	r3,0(sp)
10008d98:	1000291e 	bne	r2,zero,10008e40 <__d2b+0x118>
10008d9c:	d9000117 	ldw	r4,4(sp)
10008da0:	99000515 	stw	r4,20(r19)
10008da4:	1820c03a 	cmpne	r16,r3,zero
10008da8:	84000044 	addi	r16,r16,1
10008dac:	98c00615 	stw	r3,24(r19)
10008db0:	9c000415 	stw	r16,16(r19)
10008db4:	88001b1e 	bne	r17,zero,10008e24 <__d2b+0xfc>
10008db8:	800690ba 	slli	r3,r16,2
10008dbc:	10bef384 	addi	r2,r2,-1074
10008dc0:	a0800015 	stw	r2,0(r20)
10008dc4:	98c5883a 	add	r2,r19,r3
10008dc8:	11000417 	ldw	r4,16(r2)
10008dcc:	8020917a 	slli	r16,r16,5
10008dd0:	00083480 	call	10008348 <__hi0bits>
10008dd4:	8085c83a 	sub	r2,r16,r2
10008dd8:	90800015 	stw	r2,0(r18)
10008ddc:	9805883a 	mov	r2,r19
10008de0:	dfc00817 	ldw	ra,32(sp)
10008de4:	dd400717 	ldw	r21,28(sp)
10008de8:	dd000617 	ldw	r20,24(sp)
10008dec:	dcc00517 	ldw	r19,20(sp)
10008df0:	dc800417 	ldw	r18,16(sp)
10008df4:	dc400317 	ldw	r17,12(sp)
10008df8:	dc000217 	ldw	r16,8(sp)
10008dfc:	dec00904 	addi	sp,sp,36
10008e00:	f800283a 	ret
10008e04:	d809883a 	mov	r4,sp
10008e08:	00083b00 	call	100083b0 <__lo0bits>
10008e0c:	d8c00017 	ldw	r3,0(sp)
10008e10:	04000044 	movi	r16,1
10008e14:	9c000415 	stw	r16,16(r19)
10008e18:	98c00515 	stw	r3,20(r19)
10008e1c:	10800804 	addi	r2,r2,32
10008e20:	883fe526 	beq	r17,zero,10008db8 <__alt_data_end+0xf8008db8>
10008e24:	8c7ef344 	addi	r17,r17,-1075
10008e28:	88a3883a 	add	r17,r17,r2
10008e2c:	00c00d44 	movi	r3,53
10008e30:	a4400015 	stw	r17,0(r20)
10008e34:	1885c83a 	sub	r2,r3,r2
10008e38:	90800015 	stw	r2,0(r18)
10008e3c:	003fe706 	br	10008ddc <__alt_data_end+0xf8008ddc>
10008e40:	01000804 	movi	r4,32
10008e44:	2089c83a 	sub	r4,r4,r2
10008e48:	1908983a 	sll	r4,r3,r4
10008e4c:	d9400117 	ldw	r5,4(sp)
10008e50:	1886d83a 	srl	r3,r3,r2
10008e54:	2148b03a 	or	r4,r4,r5
10008e58:	99000515 	stw	r4,20(r19)
10008e5c:	d8c00015 	stw	r3,0(sp)
10008e60:	003fd006 	br	10008da4 <__alt_data_end+0xf8008da4>

10008e64 <__ratio>:
10008e64:	defff904 	addi	sp,sp,-28
10008e68:	dc400315 	stw	r17,12(sp)
10008e6c:	2823883a 	mov	r17,r5
10008e70:	d9400104 	addi	r5,sp,4
10008e74:	dfc00615 	stw	ra,24(sp)
10008e78:	dcc00515 	stw	r19,20(sp)
10008e7c:	dc800415 	stw	r18,16(sp)
10008e80:	2027883a 	mov	r19,r4
10008e84:	dc000215 	stw	r16,8(sp)
10008e88:	0008c0c0 	call	10008c0c <__b2d>
10008e8c:	8809883a 	mov	r4,r17
10008e90:	d80b883a 	mov	r5,sp
10008e94:	1025883a 	mov	r18,r2
10008e98:	1821883a 	mov	r16,r3
10008e9c:	0008c0c0 	call	10008c0c <__b2d>
10008ea0:	8a400417 	ldw	r9,16(r17)
10008ea4:	9a000417 	ldw	r8,16(r19)
10008ea8:	100d883a 	mov	r6,r2
10008eac:	d8800017 	ldw	r2,0(sp)
10008eb0:	4251c83a 	sub	r8,r8,r9
10008eb4:	4012917a 	slli	r9,r8,5
10008eb8:	da000117 	ldw	r8,4(sp)
10008ebc:	4091c83a 	sub	r8,r8,r2
10008ec0:	4251883a 	add	r8,r8,r9
10008ec4:	02000d0e 	bge	zero,r8,10008efc <__ratio+0x98>
10008ec8:	4010953a 	slli	r8,r8,20
10008ecc:	4421883a 	add	r16,r8,r16
10008ed0:	9009883a 	mov	r4,r18
10008ed4:	800b883a 	mov	r5,r16
10008ed8:	180f883a 	mov	r7,r3
10008edc:	000cec80 	call	1000cec8 <__divdf3>
10008ee0:	dfc00617 	ldw	ra,24(sp)
10008ee4:	dcc00517 	ldw	r19,20(sp)
10008ee8:	dc800417 	ldw	r18,16(sp)
10008eec:	dc400317 	ldw	r17,12(sp)
10008ef0:	dc000217 	ldw	r16,8(sp)
10008ef4:	dec00704 	addi	sp,sp,28
10008ef8:	f800283a 	ret
10008efc:	4010953a 	slli	r8,r8,20
10008f00:	1a07c83a 	sub	r3,r3,r8
10008f04:	003ff206 	br	10008ed0 <__alt_data_end+0xf8008ed0>

10008f08 <_mprec_log10>:
10008f08:	defffe04 	addi	sp,sp,-8
10008f0c:	dc000015 	stw	r16,0(sp)
10008f10:	dfc00115 	stw	ra,4(sp)
10008f14:	008005c4 	movi	r2,23
10008f18:	2021883a 	mov	r16,r4
10008f1c:	11000d0e 	bge	r2,r4,10008f54 <_mprec_log10+0x4c>
10008f20:	0005883a 	mov	r2,zero
10008f24:	00cffc34 	movhi	r3,16368
10008f28:	843fffc4 	addi	r16,r16,-1
10008f2c:	1009883a 	mov	r4,r2
10008f30:	180b883a 	mov	r5,r3
10008f34:	000d883a 	mov	r6,zero
10008f38:	01d00934 	movhi	r7,16420
10008f3c:	000da8c0 	call	1000da8c <__muldf3>
10008f40:	803ff91e 	bne	r16,zero,10008f28 <__alt_data_end+0xf8008f28>
10008f44:	dfc00117 	ldw	ra,4(sp)
10008f48:	dc000017 	ldw	r16,0(sp)
10008f4c:	dec00204 	addi	sp,sp,8
10008f50:	f800283a 	ret
10008f54:	202090fa 	slli	r16,r4,3
10008f58:	00840074 	movhi	r2,4097
10008f5c:	1087b204 	addi	r2,r2,7880
10008f60:	1421883a 	add	r16,r2,r16
10008f64:	80800017 	ldw	r2,0(r16)
10008f68:	80c00117 	ldw	r3,4(r16)
10008f6c:	dfc00117 	ldw	ra,4(sp)
10008f70:	dc000017 	ldw	r16,0(sp)
10008f74:	dec00204 	addi	sp,sp,8
10008f78:	f800283a 	ret

10008f7c <__copybits>:
10008f7c:	297fffc4 	addi	r5,r5,-1
10008f80:	280fd17a 	srai	r7,r5,5
10008f84:	30c00417 	ldw	r3,16(r6)
10008f88:	30800504 	addi	r2,r6,20
10008f8c:	39c00044 	addi	r7,r7,1
10008f90:	18c7883a 	add	r3,r3,r3
10008f94:	39cf883a 	add	r7,r7,r7
10008f98:	18c7883a 	add	r3,r3,r3
10008f9c:	39cf883a 	add	r7,r7,r7
10008fa0:	10c7883a 	add	r3,r2,r3
10008fa4:	21cf883a 	add	r7,r4,r7
10008fa8:	10c00d2e 	bgeu	r2,r3,10008fe0 <__copybits+0x64>
10008fac:	200b883a 	mov	r5,r4
10008fb0:	12000017 	ldw	r8,0(r2)
10008fb4:	29400104 	addi	r5,r5,4
10008fb8:	10800104 	addi	r2,r2,4
10008fbc:	2a3fff15 	stw	r8,-4(r5)
10008fc0:	10fffb36 	bltu	r2,r3,10008fb0 <__alt_data_end+0xf8008fb0>
10008fc4:	1985c83a 	sub	r2,r3,r6
10008fc8:	10bffac4 	addi	r2,r2,-21
10008fcc:	1004d0ba 	srli	r2,r2,2
10008fd0:	10800044 	addi	r2,r2,1
10008fd4:	1085883a 	add	r2,r2,r2
10008fd8:	1085883a 	add	r2,r2,r2
10008fdc:	2089883a 	add	r4,r4,r2
10008fe0:	21c0032e 	bgeu	r4,r7,10008ff0 <__copybits+0x74>
10008fe4:	20000015 	stw	zero,0(r4)
10008fe8:	21000104 	addi	r4,r4,4
10008fec:	21fffd36 	bltu	r4,r7,10008fe4 <__alt_data_end+0xf8008fe4>
10008ff0:	f800283a 	ret

10008ff4 <__any_on>:
10008ff4:	20c00417 	ldw	r3,16(r4)
10008ff8:	2805d17a 	srai	r2,r5,5
10008ffc:	21000504 	addi	r4,r4,20
10009000:	18800d0e 	bge	r3,r2,10009038 <__any_on+0x44>
10009004:	18c7883a 	add	r3,r3,r3
10009008:	18c7883a 	add	r3,r3,r3
1000900c:	20c7883a 	add	r3,r4,r3
10009010:	20c0192e 	bgeu	r4,r3,10009078 <__any_on+0x84>
10009014:	18bfff17 	ldw	r2,-4(r3)
10009018:	18ffff04 	addi	r3,r3,-4
1000901c:	1000041e 	bne	r2,zero,10009030 <__any_on+0x3c>
10009020:	20c0142e 	bgeu	r4,r3,10009074 <__any_on+0x80>
10009024:	18ffff04 	addi	r3,r3,-4
10009028:	19400017 	ldw	r5,0(r3)
1000902c:	283ffc26 	beq	r5,zero,10009020 <__alt_data_end+0xf8009020>
10009030:	00800044 	movi	r2,1
10009034:	f800283a 	ret
10009038:	10c00a0e 	bge	r2,r3,10009064 <__any_on+0x70>
1000903c:	1085883a 	add	r2,r2,r2
10009040:	1085883a 	add	r2,r2,r2
10009044:	294007cc 	andi	r5,r5,31
10009048:	2087883a 	add	r3,r4,r2
1000904c:	283ff026 	beq	r5,zero,10009010 <__alt_data_end+0xf8009010>
10009050:	19800017 	ldw	r6,0(r3)
10009054:	3144d83a 	srl	r2,r6,r5
10009058:	114a983a 	sll	r5,r2,r5
1000905c:	29bff41e 	bne	r5,r6,10009030 <__alt_data_end+0xf8009030>
10009060:	003feb06 	br	10009010 <__alt_data_end+0xf8009010>
10009064:	1085883a 	add	r2,r2,r2
10009068:	1085883a 	add	r2,r2,r2
1000906c:	2087883a 	add	r3,r4,r2
10009070:	003fe706 	br	10009010 <__alt_data_end+0xf8009010>
10009074:	f800283a 	ret
10009078:	0005883a 	mov	r2,zero
1000907c:	f800283a 	ret

10009080 <_realloc_r>:
10009080:	defff604 	addi	sp,sp,-40
10009084:	dcc00315 	stw	r19,12(sp)
10009088:	dc400115 	stw	r17,4(sp)
1000908c:	dfc00915 	stw	ra,36(sp)
10009090:	df000815 	stw	fp,32(sp)
10009094:	ddc00715 	stw	r23,28(sp)
10009098:	dd800615 	stw	r22,24(sp)
1000909c:	dd400515 	stw	r21,20(sp)
100090a0:	dd000415 	stw	r20,16(sp)
100090a4:	dc800215 	stw	r18,8(sp)
100090a8:	dc000015 	stw	r16,0(sp)
100090ac:	2827883a 	mov	r19,r5
100090b0:	3023883a 	mov	r17,r6
100090b4:	2800bf26 	beq	r5,zero,100093b4 <_realloc_r+0x334>
100090b8:	2025883a 	mov	r18,r4
100090bc:	000f4080 	call	1000f408 <__malloc_lock>
100090c0:	98ffff17 	ldw	r3,-4(r19)
100090c4:	01bfff04 	movi	r6,-4
100090c8:	890002c4 	addi	r4,r17,11
100090cc:	01c00584 	movi	r7,22
100090d0:	9d7ffe04 	addi	r21,r19,-8
100090d4:	19a0703a 	and	r16,r3,r6
100090d8:	39003f2e 	bgeu	r7,r4,100091d8 <_realloc_r+0x158>
100090dc:	053ffe04 	movi	r20,-8
100090e0:	2528703a 	and	r20,r4,r20
100090e4:	a00f883a 	mov	r7,r20
100090e8:	a0008216 	blt	r20,zero,100092f4 <_realloc_r+0x274>
100090ec:	a4408136 	bltu	r20,r17,100092f4 <_realloc_r+0x274>
100090f0:	81c03c0e 	bge	r16,r7,100091e4 <_realloc_r+0x164>
100090f4:	07040074 	movhi	fp,4097
100090f8:	e7096004 	addi	fp,fp,9600
100090fc:	e1000217 	ldw	r4,8(fp)
10009100:	ac05883a 	add	r2,r21,r16
10009104:	2080bf26 	beq	r4,r2,10009404 <_realloc_r+0x384>
10009108:	11000117 	ldw	r4,4(r2)
1000910c:	023fff84 	movi	r8,-2
10009110:	2210703a 	and	r8,r4,r8
10009114:	1211883a 	add	r8,r2,r8
10009118:	41400117 	ldw	r5,4(r8)
1000911c:	2940004c 	andi	r5,r5,1
10009120:	28004a1e 	bne	r5,zero,1000924c <_realloc_r+0x1cc>
10009124:	017fff04 	movi	r5,-4
10009128:	2148703a 	and	r4,r4,r5
1000912c:	2409883a 	add	r4,r4,r16
10009130:	21c0ad0e 	bge	r4,r7,100093e8 <_realloc_r+0x368>
10009134:	18c0004c 	andi	r3,r3,1
10009138:	18007f1e 	bne	r3,zero,10009338 <_realloc_r+0x2b8>
1000913c:	9dfffe17 	ldw	r23,-8(r19)
10009140:	adefc83a 	sub	r23,r21,r23
10009144:	bd800117 	ldw	r22,4(r23)
10009148:	b14a703a 	and	r5,r22,r5
1000914c:	216d883a 	add	r22,r4,r5
10009150:	b1c04516 	blt	r22,r7,10009268 <_realloc_r+0x1e8>
10009154:	10c00317 	ldw	r3,12(r2)
10009158:	10800217 	ldw	r2,8(r2)
1000915c:	81bfff04 	addi	r6,r16,-4
10009160:	bc400204 	addi	r17,r23,8
10009164:	10c00315 	stw	r3,12(r2)
10009168:	18800215 	stw	r2,8(r3)
1000916c:	b9400217 	ldw	r5,8(r23)
10009170:	b8c00317 	ldw	r3,12(r23)
10009174:	00800904 	movi	r2,36
10009178:	28c00315 	stw	r3,12(r5)
1000917c:	19400215 	stw	r5,8(r3)
10009180:	1180ef36 	bltu	r2,r6,10009540 <_realloc_r+0x4c0>
10009184:	008004c4 	movi	r2,19
10009188:	1180da2e 	bgeu	r2,r6,100094f4 <_realloc_r+0x474>
1000918c:	98800017 	ldw	r2,0(r19)
10009190:	b8800215 	stw	r2,8(r23)
10009194:	98800117 	ldw	r2,4(r19)
10009198:	b8800315 	stw	r2,12(r23)
1000919c:	008006c4 	movi	r2,27
100091a0:	1180fc2e 	bgeu	r2,r6,10009594 <_realloc_r+0x514>
100091a4:	98800217 	ldw	r2,8(r19)
100091a8:	b8800415 	stw	r2,16(r23)
100091ac:	98800317 	ldw	r2,12(r19)
100091b0:	b8800515 	stw	r2,20(r23)
100091b4:	00800904 	movi	r2,36
100091b8:	3080421e 	bne	r6,r2,100092c4 <_realloc_r+0x244>
100091bc:	98800417 	ldw	r2,16(r19)
100091c0:	9cc00604 	addi	r19,r19,24
100091c4:	b8c00804 	addi	r3,r23,32
100091c8:	b8800615 	stw	r2,24(r23)
100091cc:	98bfff17 	ldw	r2,-4(r19)
100091d0:	b8800715 	stw	r2,28(r23)
100091d4:	00003d06 	br	100092cc <_realloc_r+0x24c>
100091d8:	01c00404 	movi	r7,16
100091dc:	3829883a 	mov	r20,r7
100091e0:	003fc206 	br	100090ec <__alt_data_end+0xf80090ec>
100091e4:	9823883a 	mov	r17,r19
100091e8:	850fc83a 	sub	r7,r16,r20
100091ec:	008003c4 	movi	r2,15
100091f0:	18c0004c 	andi	r3,r3,1
100091f4:	11c04336 	bltu	r2,r7,10009304 <_realloc_r+0x284>
100091f8:	1c06b03a 	or	r3,r3,r16
100091fc:	a8c00115 	stw	r3,4(r21)
10009200:	ac21883a 	add	r16,r21,r16
10009204:	80c00117 	ldw	r3,4(r16)
10009208:	18c00054 	ori	r3,r3,1
1000920c:	80c00115 	stw	r3,4(r16)
10009210:	9009883a 	mov	r4,r18
10009214:	000f4280 	call	1000f428 <__malloc_unlock>
10009218:	8805883a 	mov	r2,r17
1000921c:	dfc00917 	ldw	ra,36(sp)
10009220:	df000817 	ldw	fp,32(sp)
10009224:	ddc00717 	ldw	r23,28(sp)
10009228:	dd800617 	ldw	r22,24(sp)
1000922c:	dd400517 	ldw	r21,20(sp)
10009230:	dd000417 	ldw	r20,16(sp)
10009234:	dcc00317 	ldw	r19,12(sp)
10009238:	dc800217 	ldw	r18,8(sp)
1000923c:	dc400117 	ldw	r17,4(sp)
10009240:	dc000017 	ldw	r16,0(sp)
10009244:	dec00a04 	addi	sp,sp,40
10009248:	f800283a 	ret
1000924c:	18c0004c 	andi	r3,r3,1
10009250:	1800391e 	bne	r3,zero,10009338 <_realloc_r+0x2b8>
10009254:	9dfffe17 	ldw	r23,-8(r19)
10009258:	00bfff04 	movi	r2,-4
1000925c:	adefc83a 	sub	r23,r21,r23
10009260:	b9400117 	ldw	r5,4(r23)
10009264:	288a703a 	and	r5,r5,r2
10009268:	2c2d883a 	add	r22,r5,r16
1000926c:	b1c03216 	blt	r22,r7,10009338 <_realloc_r+0x2b8>
10009270:	b8800317 	ldw	r2,12(r23)
10009274:	b8c00217 	ldw	r3,8(r23)
10009278:	81bfff04 	addi	r6,r16,-4
1000927c:	01000904 	movi	r4,36
10009280:	18800315 	stw	r2,12(r3)
10009284:	10c00215 	stw	r3,8(r2)
10009288:	bc400204 	addi	r17,r23,8
1000928c:	2180ac36 	bltu	r4,r6,10009540 <_realloc_r+0x4c0>
10009290:	008004c4 	movi	r2,19
10009294:	1180972e 	bgeu	r2,r6,100094f4 <_realloc_r+0x474>
10009298:	98800017 	ldw	r2,0(r19)
1000929c:	b8800215 	stw	r2,8(r23)
100092a0:	98800117 	ldw	r2,4(r19)
100092a4:	b8800315 	stw	r2,12(r23)
100092a8:	008006c4 	movi	r2,27
100092ac:	1180b92e 	bgeu	r2,r6,10009594 <_realloc_r+0x514>
100092b0:	98800217 	ldw	r2,8(r19)
100092b4:	b8800415 	stw	r2,16(r23)
100092b8:	98800317 	ldw	r2,12(r19)
100092bc:	b8800515 	stw	r2,20(r23)
100092c0:	313fbe26 	beq	r6,r4,100091bc <__alt_data_end+0xf80091bc>
100092c4:	b8c00604 	addi	r3,r23,24
100092c8:	9cc00404 	addi	r19,r19,16
100092cc:	98800017 	ldw	r2,0(r19)
100092d0:	b021883a 	mov	r16,r22
100092d4:	b82b883a 	mov	r21,r23
100092d8:	18800015 	stw	r2,0(r3)
100092dc:	98800117 	ldw	r2,4(r19)
100092e0:	18800115 	stw	r2,4(r3)
100092e4:	98800217 	ldw	r2,8(r19)
100092e8:	18800215 	stw	r2,8(r3)
100092ec:	b8c00117 	ldw	r3,4(r23)
100092f0:	003fbd06 	br	100091e8 <__alt_data_end+0xf80091e8>
100092f4:	00800304 	movi	r2,12
100092f8:	90800015 	stw	r2,0(r18)
100092fc:	0005883a 	mov	r2,zero
10009300:	003fc606 	br	1000921c <__alt_data_end+0xf800921c>
10009304:	1d06b03a 	or	r3,r3,r20
10009308:	ad0b883a 	add	r5,r21,r20
1000930c:	a8c00115 	stw	r3,4(r21)
10009310:	38800054 	ori	r2,r7,1
10009314:	28800115 	stw	r2,4(r5)
10009318:	29cf883a 	add	r7,r5,r7
1000931c:	38800117 	ldw	r2,4(r7)
10009320:	9009883a 	mov	r4,r18
10009324:	29400204 	addi	r5,r5,8
10009328:	10800054 	ori	r2,r2,1
1000932c:	38800115 	stw	r2,4(r7)
10009330:	00068540 	call	10006854 <_free_r>
10009334:	003fb606 	br	10009210 <__alt_data_end+0xf8009210>
10009338:	880b883a 	mov	r5,r17
1000933c:	9009883a 	mov	r4,r18
10009340:	00073f00 	call	100073f0 <_malloc_r>
10009344:	1023883a 	mov	r17,r2
10009348:	1000aa26 	beq	r2,zero,100095f4 <_realloc_r+0x574>
1000934c:	98ffff17 	ldw	r3,-4(r19)
10009350:	113ffe04 	addi	r4,r2,-8
10009354:	00bfff84 	movi	r2,-2
10009358:	1884703a 	and	r2,r3,r2
1000935c:	a885883a 	add	r2,r21,r2
10009360:	20808626 	beq	r4,r2,1000957c <_realloc_r+0x4fc>
10009364:	81bfff04 	addi	r6,r16,-4
10009368:	00800904 	movi	r2,36
1000936c:	11807036 	bltu	r2,r6,10009530 <_realloc_r+0x4b0>
10009370:	00c004c4 	movi	r3,19
10009374:	19805636 	bltu	r3,r6,100094d0 <_realloc_r+0x450>
10009378:	8805883a 	mov	r2,r17
1000937c:	9807883a 	mov	r3,r19
10009380:	19000017 	ldw	r4,0(r3)
10009384:	11000015 	stw	r4,0(r2)
10009388:	19000117 	ldw	r4,4(r3)
1000938c:	11000115 	stw	r4,4(r2)
10009390:	18c00217 	ldw	r3,8(r3)
10009394:	10c00215 	stw	r3,8(r2)
10009398:	980b883a 	mov	r5,r19
1000939c:	9009883a 	mov	r4,r18
100093a0:	00068540 	call	10006854 <_free_r>
100093a4:	9009883a 	mov	r4,r18
100093a8:	000f4280 	call	1000f428 <__malloc_unlock>
100093ac:	8805883a 	mov	r2,r17
100093b0:	003f9a06 	br	1000921c <__alt_data_end+0xf800921c>
100093b4:	300b883a 	mov	r5,r6
100093b8:	dfc00917 	ldw	ra,36(sp)
100093bc:	df000817 	ldw	fp,32(sp)
100093c0:	ddc00717 	ldw	r23,28(sp)
100093c4:	dd800617 	ldw	r22,24(sp)
100093c8:	dd400517 	ldw	r21,20(sp)
100093cc:	dd000417 	ldw	r20,16(sp)
100093d0:	dcc00317 	ldw	r19,12(sp)
100093d4:	dc800217 	ldw	r18,8(sp)
100093d8:	dc400117 	ldw	r17,4(sp)
100093dc:	dc000017 	ldw	r16,0(sp)
100093e0:	dec00a04 	addi	sp,sp,40
100093e4:	00073f01 	jmpi	100073f0 <_malloc_r>
100093e8:	11400317 	ldw	r5,12(r2)
100093ec:	10800217 	ldw	r2,8(r2)
100093f0:	9823883a 	mov	r17,r19
100093f4:	2021883a 	mov	r16,r4
100093f8:	11400315 	stw	r5,12(r2)
100093fc:	28800215 	stw	r2,8(r5)
10009400:	003f7906 	br	100091e8 <__alt_data_end+0xf80091e8>
10009404:	21000117 	ldw	r4,4(r4)
10009408:	00bfff04 	movi	r2,-4
1000940c:	a1800404 	addi	r6,r20,16
10009410:	2088703a 	and	r4,r4,r2
10009414:	2409883a 	add	r4,r4,r16
10009418:	2180380e 	bge	r4,r6,100094fc <_realloc_r+0x47c>
1000941c:	18c0004c 	andi	r3,r3,1
10009420:	183fc51e 	bne	r3,zero,10009338 <__alt_data_end+0xf8009338>
10009424:	9dfffe17 	ldw	r23,-8(r19)
10009428:	adefc83a 	sub	r23,r21,r23
1000942c:	b9400117 	ldw	r5,4(r23)
10009430:	288a703a 	and	r5,r5,r2
10009434:	216d883a 	add	r22,r4,r5
10009438:	b1bf8b16 	blt	r22,r6,10009268 <__alt_data_end+0xf8009268>
1000943c:	b8800317 	ldw	r2,12(r23)
10009440:	b8c00217 	ldw	r3,8(r23)
10009444:	81bfff04 	addi	r6,r16,-4
10009448:	01000904 	movi	r4,36
1000944c:	18800315 	stw	r2,12(r3)
10009450:	10c00215 	stw	r3,8(r2)
10009454:	bc400204 	addi	r17,r23,8
10009458:	21805a36 	bltu	r4,r6,100095c4 <_realloc_r+0x544>
1000945c:	008004c4 	movi	r2,19
10009460:	1180562e 	bgeu	r2,r6,100095bc <_realloc_r+0x53c>
10009464:	98800017 	ldw	r2,0(r19)
10009468:	b8800215 	stw	r2,8(r23)
1000946c:	98800117 	ldw	r2,4(r19)
10009470:	b8800315 	stw	r2,12(r23)
10009474:	008006c4 	movi	r2,27
10009478:	11805636 	bltu	r2,r6,100095d4 <_realloc_r+0x554>
1000947c:	b8800404 	addi	r2,r23,16
10009480:	9cc00204 	addi	r19,r19,8
10009484:	98c00017 	ldw	r3,0(r19)
10009488:	10c00015 	stw	r3,0(r2)
1000948c:	98c00117 	ldw	r3,4(r19)
10009490:	10c00115 	stw	r3,4(r2)
10009494:	98c00217 	ldw	r3,8(r19)
10009498:	10c00215 	stw	r3,8(r2)
1000949c:	bd07883a 	add	r3,r23,r20
100094a0:	b505c83a 	sub	r2,r22,r20
100094a4:	e0c00215 	stw	r3,8(fp)
100094a8:	10800054 	ori	r2,r2,1
100094ac:	18800115 	stw	r2,4(r3)
100094b0:	b8800117 	ldw	r2,4(r23)
100094b4:	9009883a 	mov	r4,r18
100094b8:	1080004c 	andi	r2,r2,1
100094bc:	a0a8b03a 	or	r20,r20,r2
100094c0:	bd000115 	stw	r20,4(r23)
100094c4:	000f4280 	call	1000f428 <__malloc_unlock>
100094c8:	8805883a 	mov	r2,r17
100094cc:	003f5306 	br	1000921c <__alt_data_end+0xf800921c>
100094d0:	98c00017 	ldw	r3,0(r19)
100094d4:	88c00015 	stw	r3,0(r17)
100094d8:	98c00117 	ldw	r3,4(r19)
100094dc:	88c00115 	stw	r3,4(r17)
100094e0:	00c006c4 	movi	r3,27
100094e4:	19801d36 	bltu	r3,r6,1000955c <_realloc_r+0x4dc>
100094e8:	88800204 	addi	r2,r17,8
100094ec:	98c00204 	addi	r3,r19,8
100094f0:	003fa306 	br	10009380 <__alt_data_end+0xf8009380>
100094f4:	8807883a 	mov	r3,r17
100094f8:	003f7406 	br	100092cc <__alt_data_end+0xf80092cc>
100094fc:	ad2b883a 	add	r21,r21,r20
10009500:	2505c83a 	sub	r2,r4,r20
10009504:	e5400215 	stw	r21,8(fp)
10009508:	10800054 	ori	r2,r2,1
1000950c:	a8800115 	stw	r2,4(r21)
10009510:	98bfff17 	ldw	r2,-4(r19)
10009514:	9009883a 	mov	r4,r18
10009518:	1080004c 	andi	r2,r2,1
1000951c:	a0a8b03a 	or	r20,r20,r2
10009520:	9d3fff15 	stw	r20,-4(r19)
10009524:	000f4280 	call	1000f428 <__malloc_unlock>
10009528:	9805883a 	mov	r2,r19
1000952c:	003f3b06 	br	1000921c <__alt_data_end+0xf800921c>
10009530:	8809883a 	mov	r4,r17
10009534:	980b883a 	mov	r5,r19
10009538:	0007db80 	call	10007db8 <memmove>
1000953c:	003f9606 	br	10009398 <__alt_data_end+0xf8009398>
10009540:	8809883a 	mov	r4,r17
10009544:	980b883a 	mov	r5,r19
10009548:	0007db80 	call	10007db8 <memmove>
1000954c:	b8c00117 	ldw	r3,4(r23)
10009550:	b021883a 	mov	r16,r22
10009554:	b82b883a 	mov	r21,r23
10009558:	003f2306 	br	100091e8 <__alt_data_end+0xf80091e8>
1000955c:	98c00217 	ldw	r3,8(r19)
10009560:	88c00215 	stw	r3,8(r17)
10009564:	98c00317 	ldw	r3,12(r19)
10009568:	88c00315 	stw	r3,12(r17)
1000956c:	30800c26 	beq	r6,r2,100095a0 <_realloc_r+0x520>
10009570:	88800404 	addi	r2,r17,16
10009574:	98c00404 	addi	r3,r19,16
10009578:	003f8106 	br	10009380 <__alt_data_end+0xf8009380>
1000957c:	893fff17 	ldw	r4,-4(r17)
10009580:	00bfff04 	movi	r2,-4
10009584:	9823883a 	mov	r17,r19
10009588:	2084703a 	and	r2,r4,r2
1000958c:	80a1883a 	add	r16,r16,r2
10009590:	003f1506 	br	100091e8 <__alt_data_end+0xf80091e8>
10009594:	b8c00404 	addi	r3,r23,16
10009598:	9cc00204 	addi	r19,r19,8
1000959c:	003f4b06 	br	100092cc <__alt_data_end+0xf80092cc>
100095a0:	99000417 	ldw	r4,16(r19)
100095a4:	88800604 	addi	r2,r17,24
100095a8:	98c00604 	addi	r3,r19,24
100095ac:	89000415 	stw	r4,16(r17)
100095b0:	99000517 	ldw	r4,20(r19)
100095b4:	89000515 	stw	r4,20(r17)
100095b8:	003f7106 	br	10009380 <__alt_data_end+0xf8009380>
100095bc:	8805883a 	mov	r2,r17
100095c0:	003fb006 	br	10009484 <__alt_data_end+0xf8009484>
100095c4:	8809883a 	mov	r4,r17
100095c8:	980b883a 	mov	r5,r19
100095cc:	0007db80 	call	10007db8 <memmove>
100095d0:	003fb206 	br	1000949c <__alt_data_end+0xf800949c>
100095d4:	98800217 	ldw	r2,8(r19)
100095d8:	b8800415 	stw	r2,16(r23)
100095dc:	98800317 	ldw	r2,12(r19)
100095e0:	b8800515 	stw	r2,20(r23)
100095e4:	31000726 	beq	r6,r4,10009604 <_realloc_r+0x584>
100095e8:	b8800604 	addi	r2,r23,24
100095ec:	9cc00404 	addi	r19,r19,16
100095f0:	003fa406 	br	10009484 <__alt_data_end+0xf8009484>
100095f4:	9009883a 	mov	r4,r18
100095f8:	000f4280 	call	1000f428 <__malloc_unlock>
100095fc:	0005883a 	mov	r2,zero
10009600:	003f0606 	br	1000921c <__alt_data_end+0xf800921c>
10009604:	98c00417 	ldw	r3,16(r19)
10009608:	9cc00604 	addi	r19,r19,24
1000960c:	b8800804 	addi	r2,r23,32
10009610:	b8c00615 	stw	r3,24(r23)
10009614:	98ffff17 	ldw	r3,-4(r19)
10009618:	b8c00715 	stw	r3,28(r23)
1000961c:	003f9906 	br	10009484 <__alt_data_end+0xf8009484>

10009620 <__fpclassifyd>:
10009620:	00a00034 	movhi	r2,32768
10009624:	10bfffc4 	addi	r2,r2,-1
10009628:	2884703a 	and	r2,r5,r2
1000962c:	10000726 	beq	r2,zero,1000964c <__fpclassifyd+0x2c>
10009630:	00fffc34 	movhi	r3,65520
10009634:	019ff834 	movhi	r6,32736
10009638:	28c7883a 	add	r3,r5,r3
1000963c:	31bfffc4 	addi	r6,r6,-1
10009640:	30c00536 	bltu	r6,r3,10009658 <__fpclassifyd+0x38>
10009644:	00800104 	movi	r2,4
10009648:	f800283a 	ret
1000964c:	2000021e 	bne	r4,zero,10009658 <__fpclassifyd+0x38>
10009650:	00800084 	movi	r2,2
10009654:	f800283a 	ret
10009658:	00dffc34 	movhi	r3,32752
1000965c:	019ff834 	movhi	r6,32736
10009660:	28cb883a 	add	r5,r5,r3
10009664:	31bfffc4 	addi	r6,r6,-1
10009668:	317ff62e 	bgeu	r6,r5,10009644 <__alt_data_end+0xf8009644>
1000966c:	01400434 	movhi	r5,16
10009670:	297fffc4 	addi	r5,r5,-1
10009674:	28800236 	bltu	r5,r2,10009680 <__fpclassifyd+0x60>
10009678:	008000c4 	movi	r2,3
1000967c:	f800283a 	ret
10009680:	10c00226 	beq	r2,r3,1000968c <__fpclassifyd+0x6c>
10009684:	0005883a 	mov	r2,zero
10009688:	f800283a 	ret
1000968c:	2005003a 	cmpeq	r2,r4,zero
10009690:	f800283a 	ret

10009694 <_sbrk_r>:
10009694:	defffd04 	addi	sp,sp,-12
10009698:	dc000015 	stw	r16,0(sp)
1000969c:	04040074 	movhi	r16,4097
100096a0:	dc400115 	stw	r17,4(sp)
100096a4:	8415b604 	addi	r16,r16,22232
100096a8:	2023883a 	mov	r17,r4
100096ac:	2809883a 	mov	r4,r5
100096b0:	dfc00215 	stw	ra,8(sp)
100096b4:	80000015 	stw	zero,0(r16)
100096b8:	000f61c0 	call	1000f61c <sbrk>
100096bc:	00ffffc4 	movi	r3,-1
100096c0:	10c00526 	beq	r2,r3,100096d8 <_sbrk_r+0x44>
100096c4:	dfc00217 	ldw	ra,8(sp)
100096c8:	dc400117 	ldw	r17,4(sp)
100096cc:	dc000017 	ldw	r16,0(sp)
100096d0:	dec00304 	addi	sp,sp,12
100096d4:	f800283a 	ret
100096d8:	80c00017 	ldw	r3,0(r16)
100096dc:	183ff926 	beq	r3,zero,100096c4 <__alt_data_end+0xf80096c4>
100096e0:	88c00015 	stw	r3,0(r17)
100096e4:	003ff706 	br	100096c4 <__alt_data_end+0xf80096c4>

100096e8 <__sread>:
100096e8:	defffe04 	addi	sp,sp,-8
100096ec:	dc000015 	stw	r16,0(sp)
100096f0:	2821883a 	mov	r16,r5
100096f4:	2940038f 	ldh	r5,14(r5)
100096f8:	dfc00115 	stw	ra,4(sp)
100096fc:	000b3a40 	call	1000b3a4 <_read_r>
10009700:	10000716 	blt	r2,zero,10009720 <__sread+0x38>
10009704:	80c01417 	ldw	r3,80(r16)
10009708:	1887883a 	add	r3,r3,r2
1000970c:	80c01415 	stw	r3,80(r16)
10009710:	dfc00117 	ldw	ra,4(sp)
10009714:	dc000017 	ldw	r16,0(sp)
10009718:	dec00204 	addi	sp,sp,8
1000971c:	f800283a 	ret
10009720:	80c0030b 	ldhu	r3,12(r16)
10009724:	18fbffcc 	andi	r3,r3,61439
10009728:	80c0030d 	sth	r3,12(r16)
1000972c:	dfc00117 	ldw	ra,4(sp)
10009730:	dc000017 	ldw	r16,0(sp)
10009734:	dec00204 	addi	sp,sp,8
10009738:	f800283a 	ret

1000973c <__seofread>:
1000973c:	0005883a 	mov	r2,zero
10009740:	f800283a 	ret

10009744 <__swrite>:
10009744:	2880030b 	ldhu	r2,12(r5)
10009748:	defffb04 	addi	sp,sp,-20
1000974c:	dcc00315 	stw	r19,12(sp)
10009750:	dc800215 	stw	r18,8(sp)
10009754:	dc400115 	stw	r17,4(sp)
10009758:	dc000015 	stw	r16,0(sp)
1000975c:	dfc00415 	stw	ra,16(sp)
10009760:	10c0400c 	andi	r3,r2,256
10009764:	2821883a 	mov	r16,r5
10009768:	2027883a 	mov	r19,r4
1000976c:	3025883a 	mov	r18,r6
10009770:	3823883a 	mov	r17,r7
10009774:	18000526 	beq	r3,zero,1000978c <__swrite+0x48>
10009778:	2940038f 	ldh	r5,14(r5)
1000977c:	000d883a 	mov	r6,zero
10009780:	01c00084 	movi	r7,2
10009784:	000b3480 	call	1000b348 <_lseek_r>
10009788:	8080030b 	ldhu	r2,12(r16)
1000978c:	8140038f 	ldh	r5,14(r16)
10009790:	10bbffcc 	andi	r2,r2,61439
10009794:	9809883a 	mov	r4,r19
10009798:	900d883a 	mov	r6,r18
1000979c:	880f883a 	mov	r7,r17
100097a0:	8080030d 	sth	r2,12(r16)
100097a4:	dfc00417 	ldw	ra,16(sp)
100097a8:	dcc00317 	ldw	r19,12(sp)
100097ac:	dc800217 	ldw	r18,8(sp)
100097b0:	dc400117 	ldw	r17,4(sp)
100097b4:	dc000017 	ldw	r16,0(sp)
100097b8:	dec00504 	addi	sp,sp,20
100097bc:	000ae241 	jmpi	1000ae24 <_write_r>

100097c0 <__sseek>:
100097c0:	defffe04 	addi	sp,sp,-8
100097c4:	dc000015 	stw	r16,0(sp)
100097c8:	2821883a 	mov	r16,r5
100097cc:	2940038f 	ldh	r5,14(r5)
100097d0:	dfc00115 	stw	ra,4(sp)
100097d4:	000b3480 	call	1000b348 <_lseek_r>
100097d8:	00ffffc4 	movi	r3,-1
100097dc:	10c00826 	beq	r2,r3,10009800 <__sseek+0x40>
100097e0:	80c0030b 	ldhu	r3,12(r16)
100097e4:	80801415 	stw	r2,80(r16)
100097e8:	18c40014 	ori	r3,r3,4096
100097ec:	80c0030d 	sth	r3,12(r16)
100097f0:	dfc00117 	ldw	ra,4(sp)
100097f4:	dc000017 	ldw	r16,0(sp)
100097f8:	dec00204 	addi	sp,sp,8
100097fc:	f800283a 	ret
10009800:	80c0030b 	ldhu	r3,12(r16)
10009804:	18fbffcc 	andi	r3,r3,61439
10009808:	80c0030d 	sth	r3,12(r16)
1000980c:	dfc00117 	ldw	ra,4(sp)
10009810:	dc000017 	ldw	r16,0(sp)
10009814:	dec00204 	addi	sp,sp,8
10009818:	f800283a 	ret

1000981c <__sclose>:
1000981c:	2940038f 	ldh	r5,14(r5)
10009820:	000ae801 	jmpi	1000ae80 <_close_r>

10009824 <strcmp>:
10009824:	2144b03a 	or	r2,r4,r5
10009828:	108000cc 	andi	r2,r2,3
1000982c:	1000171e 	bne	r2,zero,1000988c <strcmp+0x68>
10009830:	20800017 	ldw	r2,0(r4)
10009834:	28c00017 	ldw	r3,0(r5)
10009838:	10c0141e 	bne	r2,r3,1000988c <strcmp+0x68>
1000983c:	027fbff4 	movhi	r9,65279
10009840:	4a7fbfc4 	addi	r9,r9,-257
10009844:	0086303a 	nor	r3,zero,r2
10009848:	02202074 	movhi	r8,32897
1000984c:	1245883a 	add	r2,r2,r9
10009850:	42202004 	addi	r8,r8,-32640
10009854:	10c4703a 	and	r2,r2,r3
10009858:	1204703a 	and	r2,r2,r8
1000985c:	10000226 	beq	r2,zero,10009868 <strcmp+0x44>
10009860:	00001706 	br	100098c0 <strcmp+0x9c>
10009864:	1000161e 	bne	r2,zero,100098c0 <strcmp+0x9c>
10009868:	21000104 	addi	r4,r4,4
1000986c:	20c00017 	ldw	r3,0(r4)
10009870:	29400104 	addi	r5,r5,4
10009874:	29800017 	ldw	r6,0(r5)
10009878:	1a4f883a 	add	r7,r3,r9
1000987c:	00c4303a 	nor	r2,zero,r3
10009880:	3884703a 	and	r2,r7,r2
10009884:	1204703a 	and	r2,r2,r8
10009888:	19bff626 	beq	r3,r6,10009864 <__alt_data_end+0xf8009864>
1000988c:	20800007 	ldb	r2,0(r4)
10009890:	1000051e 	bne	r2,zero,100098a8 <strcmp+0x84>
10009894:	00000606 	br	100098b0 <strcmp+0x8c>
10009898:	21000044 	addi	r4,r4,1
1000989c:	20800007 	ldb	r2,0(r4)
100098a0:	29400044 	addi	r5,r5,1
100098a4:	10000226 	beq	r2,zero,100098b0 <strcmp+0x8c>
100098a8:	28c00007 	ldb	r3,0(r5)
100098ac:	10fffa26 	beq	r2,r3,10009898 <__alt_data_end+0xf8009898>
100098b0:	20800003 	ldbu	r2,0(r4)
100098b4:	28c00003 	ldbu	r3,0(r5)
100098b8:	10c5c83a 	sub	r2,r2,r3
100098bc:	f800283a 	ret
100098c0:	0005883a 	mov	r2,zero
100098c4:	f800283a 	ret

100098c8 <__sprint_r.part.0>:
100098c8:	28801917 	ldw	r2,100(r5)
100098cc:	defff604 	addi	sp,sp,-40
100098d0:	dd400515 	stw	r21,20(sp)
100098d4:	dcc00315 	stw	r19,12(sp)
100098d8:	dfc00915 	stw	ra,36(sp)
100098dc:	df000815 	stw	fp,32(sp)
100098e0:	ddc00715 	stw	r23,28(sp)
100098e4:	dd800615 	stw	r22,24(sp)
100098e8:	dd000415 	stw	r20,16(sp)
100098ec:	dc800215 	stw	r18,8(sp)
100098f0:	dc400115 	stw	r17,4(sp)
100098f4:	dc000015 	stw	r16,0(sp)
100098f8:	1088000c 	andi	r2,r2,8192
100098fc:	2827883a 	mov	r19,r5
10009900:	302b883a 	mov	r21,r6
10009904:	10002d26 	beq	r2,zero,100099bc <__sprint_r.part.0+0xf4>
10009908:	30800217 	ldw	r2,8(r6)
1000990c:	35800017 	ldw	r22,0(r6)
10009910:	10002826 	beq	r2,zero,100099b4 <__sprint_r.part.0+0xec>
10009914:	2029883a 	mov	r20,r4
10009918:	b5c00104 	addi	r23,r22,4
1000991c:	04bfffc4 	movi	r18,-1
10009920:	bc400017 	ldw	r17,0(r23)
10009924:	b4000017 	ldw	r16,0(r22)
10009928:	0039883a 	mov	fp,zero
1000992c:	8822d0ba 	srli	r17,r17,2
10009930:	04400316 	blt	zero,r17,10009940 <__sprint_r.part.0+0x78>
10009934:	00001706 	br	10009994 <__sprint_r.part.0+0xcc>
10009938:	84000104 	addi	r16,r16,4
1000993c:	8f001526 	beq	r17,fp,10009994 <__sprint_r.part.0+0xcc>
10009940:	81400017 	ldw	r5,0(r16)
10009944:	a009883a 	mov	r4,r20
10009948:	980d883a 	mov	r6,r19
1000994c:	000b0c00 	call	1000b0c0 <_fputwc_r>
10009950:	e7000044 	addi	fp,fp,1
10009954:	14bff81e 	bne	r2,r18,10009938 <__alt_data_end+0xf8009938>
10009958:	9005883a 	mov	r2,r18
1000995c:	a8000215 	stw	zero,8(r21)
10009960:	a8000115 	stw	zero,4(r21)
10009964:	dfc00917 	ldw	ra,36(sp)
10009968:	df000817 	ldw	fp,32(sp)
1000996c:	ddc00717 	ldw	r23,28(sp)
10009970:	dd800617 	ldw	r22,24(sp)
10009974:	dd400517 	ldw	r21,20(sp)
10009978:	dd000417 	ldw	r20,16(sp)
1000997c:	dcc00317 	ldw	r19,12(sp)
10009980:	dc800217 	ldw	r18,8(sp)
10009984:	dc400117 	ldw	r17,4(sp)
10009988:	dc000017 	ldw	r16,0(sp)
1000998c:	dec00a04 	addi	sp,sp,40
10009990:	f800283a 	ret
10009994:	a8c00217 	ldw	r3,8(r21)
10009998:	8c63883a 	add	r17,r17,r17
1000999c:	8c63883a 	add	r17,r17,r17
100099a0:	1c45c83a 	sub	r2,r3,r17
100099a4:	a8800215 	stw	r2,8(r21)
100099a8:	b5800204 	addi	r22,r22,8
100099ac:	bdc00204 	addi	r23,r23,8
100099b0:	103fdb1e 	bne	r2,zero,10009920 <__alt_data_end+0xf8009920>
100099b4:	0005883a 	mov	r2,zero
100099b8:	003fe806 	br	1000995c <__alt_data_end+0xf800995c>
100099bc:	0006b440 	call	10006b44 <__sfvwrite_r>
100099c0:	003fe606 	br	1000995c <__alt_data_end+0xf800995c>

100099c4 <__sprint_r>:
100099c4:	30c00217 	ldw	r3,8(r6)
100099c8:	18000126 	beq	r3,zero,100099d0 <__sprint_r+0xc>
100099cc:	00098c81 	jmpi	100098c8 <__sprint_r.part.0>
100099d0:	30000115 	stw	zero,4(r6)
100099d4:	0005883a 	mov	r2,zero
100099d8:	f800283a 	ret

100099dc <___vfiprintf_internal_r>:
100099dc:	defeca04 	addi	sp,sp,-1240
100099e0:	dcc12f15 	stw	r19,1212(sp)
100099e4:	dfc13515 	stw	ra,1236(sp)
100099e8:	df013415 	stw	fp,1232(sp)
100099ec:	ddc13315 	stw	r23,1228(sp)
100099f0:	dd813215 	stw	r22,1224(sp)
100099f4:	dd413115 	stw	r21,1220(sp)
100099f8:	dd013015 	stw	r20,1216(sp)
100099fc:	dc812e15 	stw	r18,1208(sp)
10009a00:	dc412d15 	stw	r17,1204(sp)
10009a04:	dc012c15 	stw	r16,1200(sp)
10009a08:	d9012115 	stw	r4,1156(sp)
10009a0c:	d9412015 	stw	r5,1152(sp)
10009a10:	d9c12315 	stw	r7,1164(sp)
10009a14:	3027883a 	mov	r19,r6
10009a18:	20000226 	beq	r4,zero,10009a24 <___vfiprintf_internal_r+0x48>
10009a1c:	20800e17 	ldw	r2,56(r4)
10009a20:	1000f726 	beq	r2,zero,10009e00 <___vfiprintf_internal_r+0x424>
10009a24:	d8812017 	ldw	r2,1152(sp)
10009a28:	10c0030b 	ldhu	r3,12(r2)
10009a2c:	1908000c 	andi	r4,r3,8192
10009a30:	1805883a 	mov	r2,r3
10009a34:	2000081e 	bne	r4,zero,10009a58 <___vfiprintf_internal_r+0x7c>
10009a38:	d9412017 	ldw	r5,1152(sp)
10009a3c:	18880014 	ori	r2,r3,8192
10009a40:	00f7ffc4 	movi	r3,-8193
10009a44:	29001917 	ldw	r4,100(r5)
10009a48:	2880030d 	sth	r2,12(r5)
10009a4c:	20c8703a 	and	r4,r4,r3
10009a50:	29001915 	stw	r4,100(r5)
10009a54:	1007883a 	mov	r3,r2
10009a58:	1100020c 	andi	r4,r2,8
10009a5c:	2000a726 	beq	r4,zero,10009cfc <___vfiprintf_internal_r+0x320>
10009a60:	d9412017 	ldw	r5,1152(sp)
10009a64:	29000417 	ldw	r4,16(r5)
10009a68:	2000a426 	beq	r4,zero,10009cfc <___vfiprintf_internal_r+0x320>
10009a6c:	1080068c 	andi	r2,r2,26
10009a70:	01000284 	movi	r4,10
10009a74:	1100ab26 	beq	r2,r4,10009d24 <___vfiprintf_internal_r+0x348>
10009a78:	d9010a04 	addi	r4,sp,1064
10009a7c:	d94109c4 	addi	r5,sp,1063
10009a80:	07040074 	movhi	fp,4097
10009a84:	04440074 	movhi	r17,4097
10009a88:	2145c83a 	sub	r2,r4,r5
10009a8c:	e707e804 	addi	fp,fp,8096
10009a90:	8c47e404 	addi	r17,r17,8080
10009a94:	d9011e15 	stw	r4,1144(sp)
10009a98:	d9411f15 	stw	r5,1148(sp)
10009a9c:	dec11a15 	stw	sp,1128(sp)
10009aa0:	d8011c15 	stw	zero,1136(sp)
10009aa4:	d8011b15 	stw	zero,1132(sp)
10009aa8:	d8012715 	stw	zero,1180(sp)
10009aac:	d8012515 	stw	zero,1172(sp)
10009ab0:	d811883a 	mov	r8,sp
10009ab4:	d8812815 	stw	r2,1184(sp)
10009ab8:	982f883a 	mov	r23,r19
10009abc:	b8800007 	ldb	r2,0(r23)
10009ac0:	1003b026 	beq	r2,zero,1000a984 <___vfiprintf_internal_r+0xfa8>
10009ac4:	01000944 	movi	r4,37
10009ac8:	1103ae26 	beq	r2,r4,1000a984 <___vfiprintf_internal_r+0xfa8>
10009acc:	b805883a 	mov	r2,r23
10009ad0:	00000106 	br	10009ad8 <___vfiprintf_internal_r+0xfc>
10009ad4:	19000326 	beq	r3,r4,10009ae4 <___vfiprintf_internal_r+0x108>
10009ad8:	10800044 	addi	r2,r2,1
10009adc:	10c00007 	ldb	r3,0(r2)
10009ae0:	183ffc1e 	bne	r3,zero,10009ad4 <__alt_data_end+0xf8009ad4>
10009ae4:	15e1c83a 	sub	r16,r2,r23
10009ae8:	1029883a 	mov	r20,r2
10009aec:	80001026 	beq	r16,zero,10009b30 <___vfiprintf_internal_r+0x154>
10009af0:	d8c11c17 	ldw	r3,1136(sp)
10009af4:	d8811b17 	ldw	r2,1132(sp)
10009af8:	45c00015 	stw	r23,0(r8)
10009afc:	80c7883a 	add	r3,r16,r3
10009b00:	10800044 	addi	r2,r2,1
10009b04:	44000115 	stw	r16,4(r8)
10009b08:	d8c11c15 	stw	r3,1136(sp)
10009b0c:	d8811b15 	stw	r2,1132(sp)
10009b10:	010001c4 	movi	r4,7
10009b14:	2080740e 	bge	r4,r2,10009ce8 <___vfiprintf_internal_r+0x30c>
10009b18:	1803a71e 	bne	r3,zero,1000a9b8 <___vfiprintf_internal_r+0xfdc>
10009b1c:	d8c12517 	ldw	r3,1172(sp)
10009b20:	d8011b15 	stw	zero,1132(sp)
10009b24:	d811883a 	mov	r8,sp
10009b28:	1c07883a 	add	r3,r3,r16
10009b2c:	d8c12515 	stw	r3,1172(sp)
10009b30:	a0800007 	ldb	r2,0(r20)
10009b34:	1002bf26 	beq	r2,zero,1000a634 <___vfiprintf_internal_r+0xc58>
10009b38:	a5c00044 	addi	r23,r20,1
10009b3c:	a1800047 	ldb	r6,1(r20)
10009b40:	d8011d85 	stb	zero,1142(sp)
10009b44:	d8012205 	stb	zero,1160(sp)
10009b48:	043fffc4 	movi	r16,-1
10009b4c:	d8012415 	stw	zero,1168(sp)
10009b50:	0025883a 	mov	r18,zero
10009b54:	05001604 	movi	r20,88
10009b58:	05400244 	movi	r21,9
10009b5c:	4027883a 	mov	r19,r8
10009b60:	bdc00044 	addi	r23,r23,1
10009b64:	30bff804 	addi	r2,r6,-32
10009b68:	a0825636 	bltu	r20,r2,1000a4c4 <___vfiprintf_internal_r+0xae8>
10009b6c:	100490ba 	slli	r2,r2,2
10009b70:	01040074 	movhi	r4,4097
10009b74:	2126e104 	addi	r4,r4,-25724
10009b78:	1105883a 	add	r2,r2,r4
10009b7c:	10800017 	ldw	r2,0(r2)
10009b80:	1000683a 	jmp	r2
10009b84:	1000a454 	ori	zero,r2,657
10009b88:	1000a4c4 	addi	zero,r2,659
10009b8c:	1000a4c4 	addi	zero,r2,659
10009b90:	1000a4b8 	rdprs	zero,r2,658
10009b94:	1000a4c4 	addi	zero,r2,659
10009b98:	1000a4c4 	addi	zero,r2,659
10009b9c:	1000a4c4 	addi	zero,r2,659
10009ba0:	1000a4c4 	addi	zero,r2,659
10009ba4:	1000a4c4 	addi	zero,r2,659
10009ba8:	1000a4c4 	addi	zero,r2,659
10009bac:	1000a244 	addi	zero,r2,649
10009bb0:	1000a46c 	andhi	zero,r2,657
10009bb4:	1000a4c4 	addi	zero,r2,659
10009bb8:	10009e18 	cmpnei	zero,r2,632
10009bbc:	1000a268 	cmpgeui	zero,r2,649
10009bc0:	1000a4c4 	addi	zero,r2,659
10009bc4:	10009e24 	muli	zero,r2,632
10009bc8:	10009e30 	cmpltui	zero,r2,632
10009bcc:	10009e30 	cmpltui	zero,r2,632
10009bd0:	10009e30 	cmpltui	zero,r2,632
10009bd4:	10009e30 	cmpltui	zero,r2,632
10009bd8:	10009e30 	cmpltui	zero,r2,632
10009bdc:	10009e30 	cmpltui	zero,r2,632
10009be0:	10009e30 	cmpltui	zero,r2,632
10009be4:	10009e30 	cmpltui	zero,r2,632
10009be8:	10009e30 	cmpltui	zero,r2,632
10009bec:	1000a4c4 	addi	zero,r2,659
10009bf0:	1000a4c4 	addi	zero,r2,659
10009bf4:	1000a4c4 	addi	zero,r2,659
10009bf8:	1000a4c4 	addi	zero,r2,659
10009bfc:	1000a4c4 	addi	zero,r2,659
10009c00:	1000a4c4 	addi	zero,r2,659
10009c04:	1000a4c4 	addi	zero,r2,659
10009c08:	1000a4c4 	addi	zero,r2,659
10009c0c:	1000a4c4 	addi	zero,r2,659
10009c10:	1000a4c4 	addi	zero,r2,659
10009c14:	10009e70 	cmpltui	zero,r2,633
10009c18:	1000a4c4 	addi	zero,r2,659
10009c1c:	1000a4c4 	addi	zero,r2,659
10009c20:	1000a4c4 	addi	zero,r2,659
10009c24:	1000a4c4 	addi	zero,r2,659
10009c28:	1000a4c4 	addi	zero,r2,659
10009c2c:	1000a4c4 	addi	zero,r2,659
10009c30:	1000a4c4 	addi	zero,r2,659
10009c34:	1000a4c4 	addi	zero,r2,659
10009c38:	1000a4c4 	addi	zero,r2,659
10009c3c:	1000a4c4 	addi	zero,r2,659
10009c40:	1000a160 	cmpeqi	zero,r2,645
10009c44:	1000a4c4 	addi	zero,r2,659
10009c48:	1000a4c4 	addi	zero,r2,659
10009c4c:	1000a4c4 	addi	zero,r2,659
10009c50:	1000a4c4 	addi	zero,r2,659
10009c54:	1000a4c4 	addi	zero,r2,659
10009c58:	1000a1a0 	cmpeqi	zero,r2,646
10009c5c:	1000a4c4 	addi	zero,r2,659
10009c60:	1000a4c4 	addi	zero,r2,659
10009c64:	1000a1e4 	muli	zero,r2,647
10009c68:	1000a4c4 	addi	zero,r2,659
10009c6c:	1000a4c4 	addi	zero,r2,659
10009c70:	1000a4c4 	addi	zero,r2,659
10009c74:	1000a4c4 	addi	zero,r2,659
10009c78:	1000a4c4 	addi	zero,r2,659
10009c7c:	1000a4c4 	addi	zero,r2,659
10009c80:	1000a4c4 	addi	zero,r2,659
10009c84:	1000a4c4 	addi	zero,r2,659
10009c88:	1000a4c4 	addi	zero,r2,659
10009c8c:	1000a4c4 	addi	zero,r2,659
10009c90:	1000a12c 	andhi	zero,r2,644
10009c94:	1000a47c 	xorhi	zero,r2,657
10009c98:	1000a4c4 	addi	zero,r2,659
10009c9c:	1000a4c4 	addi	zero,r2,659
10009ca0:	1000a4c4 	addi	zero,r2,659
10009ca4:	1000a2b8 	rdprs	zero,r2,650
10009ca8:	1000a47c 	xorhi	zero,r2,657
10009cac:	1000a4c4 	addi	zero,r2,659
10009cb0:	1000a4c4 	addi	zero,r2,659
10009cb4:	1000a1d0 	cmplti	zero,r2,647
10009cb8:	1000a4c4 	addi	zero,r2,659
10009cbc:	1000a41c 	xori	zero,r2,656
10009cc0:	1000a3a4 	muli	zero,r2,654
10009cc4:	1000a3d8 	cmpnei	zero,r2,655
10009cc8:	1000a2c4 	addi	zero,r2,651
10009ccc:	1000a4c4 	addi	zero,r2,659
10009cd0:	1000a2d0 	cmplti	zero,r2,651
10009cd4:	1000a4c4 	addi	zero,r2,659
10009cd8:	1000a32c 	andhi	zero,r2,652
10009cdc:	1000a4c4 	addi	zero,r2,659
10009ce0:	1000a4c4 	addi	zero,r2,659
10009ce4:	1000a360 	cmpeqi	zero,r2,653
10009ce8:	42000204 	addi	r8,r8,8
10009cec:	d8c12517 	ldw	r3,1172(sp)
10009cf0:	1c07883a 	add	r3,r3,r16
10009cf4:	d8c12515 	stw	r3,1172(sp)
10009cf8:	003f8d06 	br	10009b30 <__alt_data_end+0xf8009b30>
10009cfc:	d9012117 	ldw	r4,1156(sp)
10009d00:	d9412017 	ldw	r5,1152(sp)
10009d04:	00046a40 	call	100046a4 <__swsetup_r>
10009d08:	1000301e 	bne	r2,zero,10009dcc <___vfiprintf_internal_r+0x3f0>
10009d0c:	d8812017 	ldw	r2,1152(sp)
10009d10:	01000284 	movi	r4,10
10009d14:	10c0030b 	ldhu	r3,12(r2)
10009d18:	1805883a 	mov	r2,r3
10009d1c:	1080068c 	andi	r2,r2,26
10009d20:	113f551e 	bne	r2,r4,10009a78 <__alt_data_end+0xf8009a78>
10009d24:	d9012017 	ldw	r4,1152(sp)
10009d28:	2080038b 	ldhu	r2,14(r4)
10009d2c:	113fffcc 	andi	r4,r2,65535
10009d30:	2120001c 	xori	r4,r4,32768
10009d34:	21200004 	addi	r4,r4,-32768
10009d38:	203f4f16 	blt	r4,zero,10009a78 <__alt_data_end+0xf8009a78>
10009d3c:	d9412017 	ldw	r5,1152(sp)
10009d40:	d9012117 	ldw	r4,1156(sp)
10009d44:	d9c12317 	ldw	r7,1164(sp)
10009d48:	2b001917 	ldw	r12,100(r5)
10009d4c:	2ac00717 	ldw	r11,28(r5)
10009d50:	2a800917 	ldw	r10,36(r5)
10009d54:	02010004 	movi	r8,1024
10009d58:	18ffff4c 	andi	r3,r3,65533
10009d5c:	da0b883a 	add	r5,sp,r8
10009d60:	980d883a 	mov	r6,r19
10009d64:	d8c1030d 	sth	r3,1036(sp)
10009d68:	db011915 	stw	r12,1124(sp)
10009d6c:	d881038d 	sth	r2,1038(sp)
10009d70:	dac10715 	stw	r11,1052(sp)
10009d74:	da810915 	stw	r10,1060(sp)
10009d78:	dec10015 	stw	sp,1024(sp)
10009d7c:	dec10415 	stw	sp,1040(sp)
10009d80:	da010215 	stw	r8,1032(sp)
10009d84:	da010515 	stw	r8,1044(sp)
10009d88:	d8010615 	stw	zero,1048(sp)
10009d8c:	00099dc0 	call	100099dc <___vfiprintf_internal_r>
10009d90:	1021883a 	mov	r16,r2
10009d94:	10000416 	blt	r2,zero,10009da8 <___vfiprintf_internal_r+0x3cc>
10009d98:	d9012117 	ldw	r4,1156(sp)
10009d9c:	d9410004 	addi	r5,sp,1024
10009da0:	00061240 	call	10006124 <_fflush_r>
10009da4:	10040f1e 	bne	r2,zero,1000ade4 <___vfiprintf_internal_r+0x1408>
10009da8:	d881030b 	ldhu	r2,1036(sp)
10009dac:	1080100c 	andi	r2,r2,64
10009db0:	10000426 	beq	r2,zero,10009dc4 <___vfiprintf_internal_r+0x3e8>
10009db4:	d8c12017 	ldw	r3,1152(sp)
10009db8:	1880030b 	ldhu	r2,12(r3)
10009dbc:	10801014 	ori	r2,r2,64
10009dc0:	1880030d 	sth	r2,12(r3)
10009dc4:	8005883a 	mov	r2,r16
10009dc8:	00000106 	br	10009dd0 <___vfiprintf_internal_r+0x3f4>
10009dcc:	00bfffc4 	movi	r2,-1
10009dd0:	dfc13517 	ldw	ra,1236(sp)
10009dd4:	df013417 	ldw	fp,1232(sp)
10009dd8:	ddc13317 	ldw	r23,1228(sp)
10009ddc:	dd813217 	ldw	r22,1224(sp)
10009de0:	dd413117 	ldw	r21,1220(sp)
10009de4:	dd013017 	ldw	r20,1216(sp)
10009de8:	dcc12f17 	ldw	r19,1212(sp)
10009dec:	dc812e17 	ldw	r18,1208(sp)
10009df0:	dc412d17 	ldw	r17,1204(sp)
10009df4:	dc012c17 	ldw	r16,1200(sp)
10009df8:	dec13604 	addi	sp,sp,1240
10009dfc:	f800283a 	ret
10009e00:	00066e00 	call	100066e0 <__sinit>
10009e04:	003f0706 	br	10009a24 <__alt_data_end+0xf8009a24>
10009e08:	d8c12417 	ldw	r3,1168(sp)
10009e0c:	d8812315 	stw	r2,1164(sp)
10009e10:	00c7c83a 	sub	r3,zero,r3
10009e14:	d8c12415 	stw	r3,1168(sp)
10009e18:	94800114 	ori	r18,r18,4
10009e1c:	b9800007 	ldb	r6,0(r23)
10009e20:	003f4f06 	br	10009b60 <__alt_data_end+0xf8009b60>
10009e24:	94802014 	ori	r18,r18,128
10009e28:	b9800007 	ldb	r6,0(r23)
10009e2c:	003f4c06 	br	10009b60 <__alt_data_end+0xf8009b60>
10009e30:	dc012615 	stw	r16,1176(sp)
10009e34:	d8012415 	stw	zero,1168(sp)
10009e38:	35bff404 	addi	r22,r6,-48
10009e3c:	0009883a 	mov	r4,zero
10009e40:	b821883a 	mov	r16,r23
10009e44:	01400284 	movi	r5,10
10009e48:	000c6040 	call	1000c604 <__mulsi3>
10009e4c:	81800007 	ldb	r6,0(r16)
10009e50:	1589883a 	add	r4,r2,r22
10009e54:	bdc00044 	addi	r23,r23,1
10009e58:	35bff404 	addi	r22,r6,-48
10009e5c:	b821883a 	mov	r16,r23
10009e60:	adbff82e 	bgeu	r21,r22,10009e44 <__alt_data_end+0xf8009e44>
10009e64:	d9012415 	stw	r4,1168(sp)
10009e68:	dc012617 	ldw	r16,1176(sp)
10009e6c:	003f3d06 	br	10009b64 <__alt_data_end+0xf8009b64>
10009e70:	d8c12203 	ldbu	r3,1160(sp)
10009e74:	94800414 	ori	r18,r18,16
10009e78:	9080080c 	andi	r2,r18,32
10009e7c:	d8c11d85 	stb	r3,1142(sp)
10009e80:	9811883a 	mov	r8,r19
10009e84:	d8c12317 	ldw	r3,1164(sp)
10009e88:	10018226 	beq	r2,zero,1000a494 <___vfiprintf_internal_r+0xab8>
10009e8c:	d9012317 	ldw	r4,1164(sp)
10009e90:	18800117 	ldw	r2,4(r3)
10009e94:	1cc00017 	ldw	r19,0(r3)
10009e98:	21000204 	addi	r4,r4,8
10009e9c:	d9012315 	stw	r4,1164(sp)
10009ea0:	102b883a 	mov	r21,r2
10009ea4:	10030016 	blt	r2,zero,1000aaa8 <___vfiprintf_internal_r+0x10cc>
10009ea8:	dd811d83 	ldbu	r22,1142(sp)
10009eac:	8029883a 	mov	r20,r16
10009eb0:	00800044 	movi	r2,1
10009eb4:	9d46b03a 	or	r3,r19,r21
10009eb8:	80000216 	blt	r16,zero,10009ec4 <___vfiprintf_internal_r+0x4e8>
10009ebc:	013fdfc4 	movi	r4,-129
10009ec0:	9124703a 	and	r18,r18,r4
10009ec4:	1801b41e 	bne	r3,zero,1000a598 <___vfiprintf_internal_r+0xbbc>
10009ec8:	80028126 	beq	r16,zero,1000a8d0 <___vfiprintf_internal_r+0xef4>
10009ecc:	10803fcc 	andi	r2,r2,255
10009ed0:	00c00044 	movi	r3,1
10009ed4:	10c1d126 	beq	r2,r3,1000a61c <___vfiprintf_internal_r+0xc40>
10009ed8:	00c00084 	movi	r3,2
10009edc:	10c28626 	beq	r2,r3,1000a8f8 <___vfiprintf_internal_r+0xf1c>
10009ee0:	d8c10a04 	addi	r3,sp,1064
10009ee4:	9808d0fa 	srli	r4,r19,3
10009ee8:	a80a977a 	slli	r5,r21,29
10009eec:	a82ad0fa 	srli	r21,r21,3
10009ef0:	9cc001cc 	andi	r19,r19,7
10009ef4:	98800c04 	addi	r2,r19,48
10009ef8:	18ffffc4 	addi	r3,r3,-1
10009efc:	2926b03a 	or	r19,r5,r4
10009f00:	18800005 	stb	r2,0(r3)
10009f04:	9d48b03a 	or	r4,r19,r21
10009f08:	203ff61e 	bne	r4,zero,10009ee4 <__alt_data_end+0xf8009ee4>
10009f0c:	9100004c 	andi	r4,r18,1
10009f10:	d8c12215 	stw	r3,1160(sp)
10009f14:	2002b31e 	bne	r4,zero,1000a9e4 <___vfiprintf_internal_r+0x1008>
10009f18:	d9411e17 	ldw	r5,1144(sp)
10009f1c:	28e9c83a 	sub	r20,r5,r3
10009f20:	a02b883a 	mov	r21,r20
10009f24:	a400010e 	bge	r20,r16,10009f2c <___vfiprintf_internal_r+0x550>
10009f28:	802b883a 	mov	r21,r16
10009f2c:	b5803fcc 	andi	r22,r22,255
10009f30:	b580201c 	xori	r22,r22,128
10009f34:	b5bfe004 	addi	r22,r22,-128
10009f38:	b0000126 	beq	r22,zero,10009f40 <___vfiprintf_internal_r+0x564>
10009f3c:	ad400044 	addi	r21,r21,1
10009f40:	9280008c 	andi	r10,r18,2
10009f44:	50000126 	beq	r10,zero,10009f4c <___vfiprintf_internal_r+0x570>
10009f48:	ad400084 	addi	r21,r21,2
10009f4c:	9580210c 	andi	r22,r18,132
10009f50:	b001751e 	bne	r22,zero,1000a528 <___vfiprintf_internal_r+0xb4c>
10009f54:	d9012417 	ldw	r4,1168(sp)
10009f58:	2567c83a 	sub	r19,r4,r21
10009f5c:	04c1720e 	bge	zero,r19,1000a528 <___vfiprintf_internal_r+0xb4c>
10009f60:	01c00404 	movi	r7,16
10009f64:	d8c11c17 	ldw	r3,1136(sp)
10009f68:	3cc36b0e 	bge	r7,r19,1000ad18 <___vfiprintf_internal_r+0x133c>
10009f6c:	00840074 	movhi	r2,4097
10009f70:	1087e804 	addi	r2,r2,8096
10009f74:	dc012915 	stw	r16,1188(sp)
10009f78:	d9011b17 	ldw	r4,1132(sp)
10009f7c:	9821883a 	mov	r16,r19
10009f80:	d8812615 	stw	r2,1176(sp)
10009f84:	030001c4 	movi	r12,7
10009f88:	5027883a 	mov	r19,r10
10009f8c:	00000506 	br	10009fa4 <___vfiprintf_internal_r+0x5c8>
10009f90:	21400084 	addi	r5,r4,2
10009f94:	42000204 	addi	r8,r8,8
10009f98:	1009883a 	mov	r4,r2
10009f9c:	843ffc04 	addi	r16,r16,-16
10009fa0:	3c000d0e 	bge	r7,r16,10009fd8 <___vfiprintf_internal_r+0x5fc>
10009fa4:	18c00404 	addi	r3,r3,16
10009fa8:	20800044 	addi	r2,r4,1
10009fac:	47000015 	stw	fp,0(r8)
10009fb0:	41c00115 	stw	r7,4(r8)
10009fb4:	d8c11c15 	stw	r3,1136(sp)
10009fb8:	d8811b15 	stw	r2,1132(sp)
10009fbc:	60bff40e 	bge	r12,r2,10009f90 <__alt_data_end+0xf8009f90>
10009fc0:	18014b1e 	bne	r3,zero,1000a4f0 <___vfiprintf_internal_r+0xb14>
10009fc4:	843ffc04 	addi	r16,r16,-16
10009fc8:	0009883a 	mov	r4,zero
10009fcc:	01400044 	movi	r5,1
10009fd0:	d811883a 	mov	r8,sp
10009fd4:	3c3ff316 	blt	r7,r16,10009fa4 <__alt_data_end+0xf8009fa4>
10009fd8:	9815883a 	mov	r10,r19
10009fdc:	8027883a 	mov	r19,r16
10009fe0:	dc012917 	ldw	r16,1188(sp)
10009fe4:	d9012617 	ldw	r4,1176(sp)
10009fe8:	98c7883a 	add	r3,r19,r3
10009fec:	44c00115 	stw	r19,4(r8)
10009ff0:	41000015 	stw	r4,0(r8)
10009ff4:	d8c11c15 	stw	r3,1136(sp)
10009ff8:	d9411b15 	stw	r5,1132(sp)
10009ffc:	008001c4 	movi	r2,7
1000a000:	11425116 	blt	r2,r5,1000a948 <___vfiprintf_internal_r+0xf6c>
1000a004:	d9011d87 	ldb	r4,1142(sp)
1000a008:	42000204 	addi	r8,r8,8
1000a00c:	28800044 	addi	r2,r5,1
1000a010:	20014a1e 	bne	r4,zero,1000a53c <___vfiprintf_internal_r+0xb60>
1000a014:	50000c26 	beq	r10,zero,1000a048 <___vfiprintf_internal_r+0x66c>
1000a018:	d9011d04 	addi	r4,sp,1140
1000a01c:	18c00084 	addi	r3,r3,2
1000a020:	41000015 	stw	r4,0(r8)
1000a024:	01000084 	movi	r4,2
1000a028:	41000115 	stw	r4,4(r8)
1000a02c:	d8c11c15 	stw	r3,1136(sp)
1000a030:	d8811b15 	stw	r2,1132(sp)
1000a034:	010001c4 	movi	r4,7
1000a038:	20822016 	blt	r4,r2,1000a8bc <___vfiprintf_internal_r+0xee0>
1000a03c:	100b883a 	mov	r5,r2
1000a040:	42000204 	addi	r8,r8,8
1000a044:	10800044 	addi	r2,r2,1
1000a048:	01002004 	movi	r4,128
1000a04c:	b101de26 	beq	r22,r4,1000a7c8 <___vfiprintf_internal_r+0xdec>
1000a050:	8521c83a 	sub	r16,r16,r20
1000a054:	0400230e 	bge	zero,r16,1000a0e4 <___vfiprintf_internal_r+0x708>
1000a058:	04c00404 	movi	r19,16
1000a05c:	9c030d0e 	bge	r19,r16,1000ac94 <___vfiprintf_internal_r+0x12b8>
1000a060:	00840074 	movhi	r2,4097
1000a064:	1087e404 	addi	r2,r2,8080
1000a068:	d8812615 	stw	r2,1176(sp)
1000a06c:	058001c4 	movi	r22,7
1000a070:	00000506 	br	1000a088 <___vfiprintf_internal_r+0x6ac>
1000a074:	28800084 	addi	r2,r5,2
1000a078:	42000204 	addi	r8,r8,8
1000a07c:	200b883a 	mov	r5,r4
1000a080:	843ffc04 	addi	r16,r16,-16
1000a084:	9c000d0e 	bge	r19,r16,1000a0bc <___vfiprintf_internal_r+0x6e0>
1000a088:	18c00404 	addi	r3,r3,16
1000a08c:	29000044 	addi	r4,r5,1
1000a090:	44400015 	stw	r17,0(r8)
1000a094:	44c00115 	stw	r19,4(r8)
1000a098:	d8c11c15 	stw	r3,1136(sp)
1000a09c:	d9011b15 	stw	r4,1132(sp)
1000a0a0:	b13ff40e 	bge	r22,r4,1000a074 <__alt_data_end+0xf800a074>
1000a0a4:	1801321e 	bne	r3,zero,1000a570 <___vfiprintf_internal_r+0xb94>
1000a0a8:	843ffc04 	addi	r16,r16,-16
1000a0ac:	000b883a 	mov	r5,zero
1000a0b0:	00800044 	movi	r2,1
1000a0b4:	d811883a 	mov	r8,sp
1000a0b8:	9c3ff316 	blt	r19,r16,1000a088 <__alt_data_end+0xf800a088>
1000a0bc:	d9012617 	ldw	r4,1176(sp)
1000a0c0:	1c07883a 	add	r3,r3,r16
1000a0c4:	44000115 	stw	r16,4(r8)
1000a0c8:	41000015 	stw	r4,0(r8)
1000a0cc:	d8c11c15 	stw	r3,1136(sp)
1000a0d0:	d8811b15 	stw	r2,1132(sp)
1000a0d4:	010001c4 	movi	r4,7
1000a0d8:	20816216 	blt	r4,r2,1000a664 <___vfiprintf_internal_r+0xc88>
1000a0dc:	42000204 	addi	r8,r8,8
1000a0e0:	10800044 	addi	r2,r2,1
1000a0e4:	d9012217 	ldw	r4,1160(sp)
1000a0e8:	1d07883a 	add	r3,r3,r20
1000a0ec:	45000115 	stw	r20,4(r8)
1000a0f0:	41000015 	stw	r4,0(r8)
1000a0f4:	d8c11c15 	stw	r3,1136(sp)
1000a0f8:	d8811b15 	stw	r2,1132(sp)
1000a0fc:	010001c4 	movi	r4,7
1000a100:	2081610e 	bge	r4,r2,1000a688 <___vfiprintf_internal_r+0xcac>
1000a104:	1802211e 	bne	r3,zero,1000a98c <___vfiprintf_internal_r+0xfb0>
1000a108:	d8011b15 	stw	zero,1132(sp)
1000a10c:	9480010c 	andi	r18,r18,4
1000a110:	9002171e 	bne	r18,zero,1000a970 <___vfiprintf_internal_r+0xf94>
1000a114:	d9412417 	ldw	r5,1168(sp)
1000a118:	a9433716 	blt	r21,r5,1000adf8 <___vfiprintf_internal_r+0x141c>
1000a11c:	d8812517 	ldw	r2,1172(sp)
1000a120:	1545883a 	add	r2,r2,r21
1000a124:	d8812515 	stw	r2,1172(sp)
1000a128:	00019a06 	br	1000a794 <___vfiprintf_internal_r+0xdb8>
1000a12c:	d8c12317 	ldw	r3,1164(sp)
1000a130:	05400044 	movi	r21,1
1000a134:	9811883a 	mov	r8,r19
1000a138:	18800017 	ldw	r2,0(r3)
1000a13c:	18c00104 	addi	r3,r3,4
1000a140:	d8c12315 	stw	r3,1164(sp)
1000a144:	d8c10004 	addi	r3,sp,1024
1000a148:	d8011d85 	stb	zero,1142(sp)
1000a14c:	d8810005 	stb	r2,1024(sp)
1000a150:	a829883a 	mov	r20,r21
1000a154:	d8c12215 	stw	r3,1160(sp)
1000a158:	0021883a 	mov	r16,zero
1000a15c:	003f7806 	br	10009f40 <__alt_data_end+0xf8009f40>
1000a160:	94800414 	ori	r18,r18,16
1000a164:	9080080c 	andi	r2,r18,32
1000a168:	9811883a 	mov	r8,r19
1000a16c:	10009026 	beq	r2,zero,1000a3b0 <___vfiprintf_internal_r+0x9d4>
1000a170:	d8812317 	ldw	r2,1164(sp)
1000a174:	d8c12317 	ldw	r3,1164(sp)
1000a178:	14c00017 	ldw	r19,0(r2)
1000a17c:	15400117 	ldw	r21,4(r2)
1000a180:	18c00204 	addi	r3,r3,8
1000a184:	d8c12315 	stw	r3,1164(sp)
1000a188:	0005883a 	mov	r2,zero
1000a18c:	9d46b03a 	or	r3,r19,r21
1000a190:	d8011d85 	stb	zero,1142(sp)
1000a194:	8029883a 	mov	r20,r16
1000a198:	002d883a 	mov	r22,zero
1000a19c:	003f4606 	br	10009eb8 <__alt_data_end+0xf8009eb8>
1000a1a0:	94800414 	ori	r18,r18,16
1000a1a4:	9080080c 	andi	r2,r18,32
1000a1a8:	9811883a 	mov	r8,r19
1000a1ac:	10006226 	beq	r2,zero,1000a338 <___vfiprintf_internal_r+0x95c>
1000a1b0:	d9012317 	ldw	r4,1164(sp)
1000a1b4:	00800044 	movi	r2,1
1000a1b8:	24c00017 	ldw	r19,0(r4)
1000a1bc:	25400117 	ldw	r21,4(r4)
1000a1c0:	21000204 	addi	r4,r4,8
1000a1c4:	d9012315 	stw	r4,1164(sp)
1000a1c8:	9d46b03a 	or	r3,r19,r21
1000a1cc:	003ff006 	br	1000a190 <__alt_data_end+0xf800a190>
1000a1d0:	b9800007 	ldb	r6,0(r23)
1000a1d4:	00801b04 	movi	r2,108
1000a1d8:	3082b226 	beq	r6,r2,1000aca4 <___vfiprintf_internal_r+0x12c8>
1000a1dc:	94800414 	ori	r18,r18,16
1000a1e0:	003e5f06 	br	10009b60 <__alt_data_end+0xf8009b60>
1000a1e4:	d8c12203 	ldbu	r3,1160(sp)
1000a1e8:	01040074 	movhi	r4,4097
1000a1ec:	21077e04 	addi	r4,r4,7672
1000a1f0:	d8c11d85 	stb	r3,1142(sp)
1000a1f4:	d9012715 	stw	r4,1180(sp)
1000a1f8:	90c0080c 	andi	r3,r18,32
1000a1fc:	9811883a 	mov	r8,r19
1000a200:	d8812317 	ldw	r2,1164(sp)
1000a204:	18005f26 	beq	r3,zero,1000a384 <___vfiprintf_internal_r+0x9a8>
1000a208:	d9012317 	ldw	r4,1164(sp)
1000a20c:	14c00017 	ldw	r19,0(r2)
1000a210:	15400117 	ldw	r21,4(r2)
1000a214:	21000204 	addi	r4,r4,8
1000a218:	d9012315 	stw	r4,1164(sp)
1000a21c:	9080004c 	andi	r2,r18,1
1000a220:	1001e226 	beq	r2,zero,1000a9ac <___vfiprintf_internal_r+0xfd0>
1000a224:	9d46b03a 	or	r3,r19,r21
1000a228:	18024e26 	beq	r3,zero,1000ab64 <___vfiprintf_internal_r+0x1188>
1000a22c:	00800c04 	movi	r2,48
1000a230:	d8811d05 	stb	r2,1140(sp)
1000a234:	d9811d45 	stb	r6,1141(sp)
1000a238:	94800094 	ori	r18,r18,2
1000a23c:	00800084 	movi	r2,2
1000a240:	003fd306 	br	1000a190 <__alt_data_end+0xf800a190>
1000a244:	d9012317 	ldw	r4,1164(sp)
1000a248:	d9412317 	ldw	r5,1164(sp)
1000a24c:	21000017 	ldw	r4,0(r4)
1000a250:	28800104 	addi	r2,r5,4
1000a254:	d9012415 	stw	r4,1168(sp)
1000a258:	203eeb16 	blt	r4,zero,10009e08 <__alt_data_end+0xf8009e08>
1000a25c:	d8812315 	stw	r2,1164(sp)
1000a260:	b9800007 	ldb	r6,0(r23)
1000a264:	003e3e06 	br	10009b60 <__alt_data_end+0xf8009b60>
1000a268:	b9800007 	ldb	r6,0(r23)
1000a26c:	01000a84 	movi	r4,42
1000a270:	b8800044 	addi	r2,r23,1
1000a274:	3102d226 	beq	r6,r4,1000adc0 <___vfiprintf_internal_r+0x13e4>
1000a278:	35bff404 	addi	r22,r6,-48
1000a27c:	102f883a 	mov	r23,r2
1000a280:	0021883a 	mov	r16,zero
1000a284:	adbe3736 	bltu	r21,r22,10009b64 <__alt_data_end+0xf8009b64>
1000a288:	0009883a 	mov	r4,zero
1000a28c:	01400284 	movi	r5,10
1000a290:	000c6040 	call	1000c604 <__mulsi3>
1000a294:	b9800007 	ldb	r6,0(r23)
1000a298:	b089883a 	add	r4,r22,r2
1000a29c:	bdc00044 	addi	r23,r23,1
1000a2a0:	35bff404 	addi	r22,r6,-48
1000a2a4:	adbff92e 	bgeu	r21,r22,1000a28c <__alt_data_end+0xf800a28c>
1000a2a8:	2021883a 	mov	r16,r4
1000a2ac:	203e2d0e 	bge	r4,zero,10009b64 <__alt_data_end+0xf8009b64>
1000a2b0:	043fffc4 	movi	r16,-1
1000a2b4:	003e2b06 	br	10009b64 <__alt_data_end+0xf8009b64>
1000a2b8:	94801014 	ori	r18,r18,64
1000a2bc:	b9800007 	ldb	r6,0(r23)
1000a2c0:	003e2706 	br	10009b60 <__alt_data_end+0xf8009b60>
1000a2c4:	94800814 	ori	r18,r18,32
1000a2c8:	b9800007 	ldb	r6,0(r23)
1000a2cc:	003e2406 	br	10009b60 <__alt_data_end+0xf8009b60>
1000a2d0:	d9412317 	ldw	r5,1164(sp)
1000a2d4:	d8812317 	ldw	r2,1164(sp)
1000a2d8:	d8011d85 	stb	zero,1142(sp)
1000a2dc:	29400017 	ldw	r5,0(r5)
1000a2e0:	9811883a 	mov	r8,r19
1000a2e4:	14c00104 	addi	r19,r2,4
1000a2e8:	d9412215 	stw	r5,1160(sp)
1000a2ec:	28029026 	beq	r5,zero,1000ad30 <___vfiprintf_internal_r+0x1354>
1000a2f0:	d9012217 	ldw	r4,1160(sp)
1000a2f4:	80027616 	blt	r16,zero,1000acd0 <___vfiprintf_internal_r+0x12f4>
1000a2f8:	000b883a 	mov	r5,zero
1000a2fc:	800d883a 	mov	r6,r16
1000a300:	da012a15 	stw	r8,1192(sp)
1000a304:	0007b980 	call	10007b98 <memchr>
1000a308:	da012a17 	ldw	r8,1192(sp)
1000a30c:	1002a026 	beq	r2,zero,1000ad90 <___vfiprintf_internal_r+0x13b4>
1000a310:	d8c12217 	ldw	r3,1160(sp)
1000a314:	10e9c83a 	sub	r20,r2,r3
1000a318:	85023816 	blt	r16,r20,1000abfc <___vfiprintf_internal_r+0x1220>
1000a31c:	dd811d83 	ldbu	r22,1142(sp)
1000a320:	dcc12315 	stw	r19,1164(sp)
1000a324:	0021883a 	mov	r16,zero
1000a328:	003efd06 	br	10009f20 <__alt_data_end+0xf8009f20>
1000a32c:	9080080c 	andi	r2,r18,32
1000a330:	9811883a 	mov	r8,r19
1000a334:	103f9e1e 	bne	r2,zero,1000a1b0 <__alt_data_end+0xf800a1b0>
1000a338:	9080040c 	andi	r2,r18,16
1000a33c:	10021726 	beq	r2,zero,1000ab9c <___vfiprintf_internal_r+0x11c0>
1000a340:	d9412317 	ldw	r5,1164(sp)
1000a344:	002b883a 	mov	r21,zero
1000a348:	00800044 	movi	r2,1
1000a34c:	2cc00017 	ldw	r19,0(r5)
1000a350:	29400104 	addi	r5,r5,4
1000a354:	d9412315 	stw	r5,1164(sp)
1000a358:	9807883a 	mov	r3,r19
1000a35c:	003f8c06 	br	1000a190 <__alt_data_end+0xf800a190>
1000a360:	d8c12203 	ldbu	r3,1160(sp)
1000a364:	01040074 	movhi	r4,4097
1000a368:	21078304 	addi	r4,r4,7692
1000a36c:	d8c11d85 	stb	r3,1142(sp)
1000a370:	d9012715 	stw	r4,1180(sp)
1000a374:	90c0080c 	andi	r3,r18,32
1000a378:	9811883a 	mov	r8,r19
1000a37c:	d8812317 	ldw	r2,1164(sp)
1000a380:	183fa11e 	bne	r3,zero,1000a208 <__alt_data_end+0xf800a208>
1000a384:	90c0040c 	andi	r3,r18,16
1000a388:	1801e526 	beq	r3,zero,1000ab20 <___vfiprintf_internal_r+0x1144>
1000a38c:	d9412317 	ldw	r5,1164(sp)
1000a390:	14c00017 	ldw	r19,0(r2)
1000a394:	002b883a 	mov	r21,zero
1000a398:	29400104 	addi	r5,r5,4
1000a39c:	d9412315 	stw	r5,1164(sp)
1000a3a0:	003f9e06 	br	1000a21c <__alt_data_end+0xf800a21c>
1000a3a4:	9080080c 	andi	r2,r18,32
1000a3a8:	9811883a 	mov	r8,r19
1000a3ac:	103f701e 	bne	r2,zero,1000a170 <__alt_data_end+0xf800a170>
1000a3b0:	9080040c 	andi	r2,r18,16
1000a3b4:	1001ef26 	beq	r2,zero,1000ab74 <___vfiprintf_internal_r+0x1198>
1000a3b8:	d9012317 	ldw	r4,1164(sp)
1000a3bc:	002b883a 	mov	r21,zero
1000a3c0:	0005883a 	mov	r2,zero
1000a3c4:	24c00017 	ldw	r19,0(r4)
1000a3c8:	21000104 	addi	r4,r4,4
1000a3cc:	d9012315 	stw	r4,1164(sp)
1000a3d0:	9807883a 	mov	r3,r19
1000a3d4:	003f6e06 	br	1000a190 <__alt_data_end+0xf800a190>
1000a3d8:	d8c12317 	ldw	r3,1164(sp)
1000a3dc:	9811883a 	mov	r8,r19
1000a3e0:	00800c04 	movi	r2,48
1000a3e4:	1cc00017 	ldw	r19,0(r3)
1000a3e8:	01040074 	movhi	r4,4097
1000a3ec:	18c00104 	addi	r3,r3,4
1000a3f0:	d8811d05 	stb	r2,1140(sp)
1000a3f4:	21078304 	addi	r4,r4,7692
1000a3f8:	00801e04 	movi	r2,120
1000a3fc:	d8811d45 	stb	r2,1141(sp)
1000a400:	d8c12315 	stw	r3,1164(sp)
1000a404:	002b883a 	mov	r21,zero
1000a408:	94800094 	ori	r18,r18,2
1000a40c:	d9012715 	stw	r4,1180(sp)
1000a410:	00800084 	movi	r2,2
1000a414:	9807883a 	mov	r3,r19
1000a418:	003f5d06 	br	1000a190 <__alt_data_end+0xf800a190>
1000a41c:	d8c12203 	ldbu	r3,1160(sp)
1000a420:	9080080c 	andi	r2,r18,32
1000a424:	9811883a 	mov	r8,r19
1000a428:	d8c11d85 	stb	r3,1142(sp)
1000a42c:	1001b126 	beq	r2,zero,1000aaf4 <___vfiprintf_internal_r+0x1118>
1000a430:	d9012317 	ldw	r4,1164(sp)
1000a434:	d9412517 	ldw	r5,1172(sp)
1000a438:	20800017 	ldw	r2,0(r4)
1000a43c:	2807d7fa 	srai	r3,r5,31
1000a440:	21000104 	addi	r4,r4,4
1000a444:	d9012315 	stw	r4,1164(sp)
1000a448:	11400015 	stw	r5,0(r2)
1000a44c:	10c00115 	stw	r3,4(r2)
1000a450:	003d9a06 	br	10009abc <__alt_data_end+0xf8009abc>
1000a454:	d8812207 	ldb	r2,1160(sp)
1000a458:	1001c41e 	bne	r2,zero,1000ab6c <___vfiprintf_internal_r+0x1190>
1000a45c:	00c00804 	movi	r3,32
1000a460:	d8c12205 	stb	r3,1160(sp)
1000a464:	b9800007 	ldb	r6,0(r23)
1000a468:	003dbd06 	br	10009b60 <__alt_data_end+0xf8009b60>
1000a46c:	00c00ac4 	movi	r3,43
1000a470:	d8c12205 	stb	r3,1160(sp)
1000a474:	b9800007 	ldb	r6,0(r23)
1000a478:	003db906 	br	10009b60 <__alt_data_end+0xf8009b60>
1000a47c:	d8c12203 	ldbu	r3,1160(sp)
1000a480:	9080080c 	andi	r2,r18,32
1000a484:	9811883a 	mov	r8,r19
1000a488:	d8c11d85 	stb	r3,1142(sp)
1000a48c:	d8c12317 	ldw	r3,1164(sp)
1000a490:	103e7e1e 	bne	r2,zero,10009e8c <__alt_data_end+0xf8009e8c>
1000a494:	9080040c 	andi	r2,r18,16
1000a498:	1001a926 	beq	r2,zero,1000ab40 <___vfiprintf_internal_r+0x1164>
1000a49c:	1cc00017 	ldw	r19,0(r3)
1000a4a0:	d9412317 	ldw	r5,1164(sp)
1000a4a4:	982bd7fa 	srai	r21,r19,31
1000a4a8:	29400104 	addi	r5,r5,4
1000a4ac:	d9412315 	stw	r5,1164(sp)
1000a4b0:	a805883a 	mov	r2,r21
1000a4b4:	003e7b06 	br	10009ea4 <__alt_data_end+0xf8009ea4>
1000a4b8:	94800054 	ori	r18,r18,1
1000a4bc:	b9800007 	ldb	r6,0(r23)
1000a4c0:	003da706 	br	10009b60 <__alt_data_end+0xf8009b60>
1000a4c4:	d8c12203 	ldbu	r3,1160(sp)
1000a4c8:	9811883a 	mov	r8,r19
1000a4cc:	d8c11d85 	stb	r3,1142(sp)
1000a4d0:	30005826 	beq	r6,zero,1000a634 <___vfiprintf_internal_r+0xc58>
1000a4d4:	05400044 	movi	r21,1
1000a4d8:	d8c10004 	addi	r3,sp,1024
1000a4dc:	d9810005 	stb	r6,1024(sp)
1000a4e0:	d8011d85 	stb	zero,1142(sp)
1000a4e4:	a829883a 	mov	r20,r21
1000a4e8:	d8c12215 	stw	r3,1160(sp)
1000a4ec:	003f1a06 	br	1000a158 <__alt_data_end+0xf800a158>
1000a4f0:	d9012117 	ldw	r4,1156(sp)
1000a4f4:	d9412017 	ldw	r5,1152(sp)
1000a4f8:	d9811a04 	addi	r6,sp,1128
1000a4fc:	d9c12a15 	stw	r7,1192(sp)
1000a500:	db012b15 	stw	r12,1196(sp)
1000a504:	00098c80 	call	100098c8 <__sprint_r.part.0>
1000a508:	d9c12a17 	ldw	r7,1192(sp)
1000a50c:	db012b17 	ldw	r12,1196(sp)
1000a510:	10004e1e 	bne	r2,zero,1000a64c <___vfiprintf_internal_r+0xc70>
1000a514:	d9011b17 	ldw	r4,1132(sp)
1000a518:	d8c11c17 	ldw	r3,1136(sp)
1000a51c:	d811883a 	mov	r8,sp
1000a520:	21400044 	addi	r5,r4,1
1000a524:	003e9d06 	br	10009f9c <__alt_data_end+0xf8009f9c>
1000a528:	d9411b17 	ldw	r5,1132(sp)
1000a52c:	d8c11c17 	ldw	r3,1136(sp)
1000a530:	28800044 	addi	r2,r5,1
1000a534:	d9011d87 	ldb	r4,1142(sp)
1000a538:	203eb626 	beq	r4,zero,1000a014 <__alt_data_end+0xf800a014>
1000a53c:	01000044 	movi	r4,1
1000a540:	d9411d84 	addi	r5,sp,1142
1000a544:	1907883a 	add	r3,r3,r4
1000a548:	41400015 	stw	r5,0(r8)
1000a54c:	41000115 	stw	r4,4(r8)
1000a550:	d8c11c15 	stw	r3,1136(sp)
1000a554:	d8811b15 	stw	r2,1132(sp)
1000a558:	014001c4 	movi	r5,7
1000a55c:	2880ce16 	blt	r5,r2,1000a898 <___vfiprintf_internal_r+0xebc>
1000a560:	100b883a 	mov	r5,r2
1000a564:	42000204 	addi	r8,r8,8
1000a568:	10800044 	addi	r2,r2,1
1000a56c:	003ea906 	br	1000a014 <__alt_data_end+0xf800a014>
1000a570:	d9012117 	ldw	r4,1156(sp)
1000a574:	d9412017 	ldw	r5,1152(sp)
1000a578:	d9811a04 	addi	r6,sp,1128
1000a57c:	00098c80 	call	100098c8 <__sprint_r.part.0>
1000a580:	1000321e 	bne	r2,zero,1000a64c <___vfiprintf_internal_r+0xc70>
1000a584:	d9411b17 	ldw	r5,1132(sp)
1000a588:	d8c11c17 	ldw	r3,1136(sp)
1000a58c:	d811883a 	mov	r8,sp
1000a590:	28800044 	addi	r2,r5,1
1000a594:	003eba06 	br	1000a080 <__alt_data_end+0xf800a080>
1000a598:	10803fcc 	andi	r2,r2,255
1000a59c:	00c00044 	movi	r3,1
1000a5a0:	10fe4d1e 	bne	r2,r3,10009ed8 <__alt_data_end+0xf8009ed8>
1000a5a4:	a800021e 	bne	r21,zero,1000a5b0 <___vfiprintf_internal_r+0xbd4>
1000a5a8:	00800244 	movi	r2,9
1000a5ac:	14c01b2e 	bgeu	r2,r19,1000a61c <___vfiprintf_internal_r+0xc40>
1000a5b0:	dc012215 	stw	r16,1160(sp)
1000a5b4:	dd010a04 	addi	r20,sp,1064
1000a5b8:	a821883a 	mov	r16,r21
1000a5bc:	402b883a 	mov	r21,r8
1000a5c0:	9809883a 	mov	r4,r19
1000a5c4:	800b883a 	mov	r5,r16
1000a5c8:	01800284 	movi	r6,10
1000a5cc:	000f883a 	mov	r7,zero
1000a5d0:	000bebc0 	call	1000bebc <__umoddi3>
1000a5d4:	10800c04 	addi	r2,r2,48
1000a5d8:	a53fffc4 	addi	r20,r20,-1
1000a5dc:	9809883a 	mov	r4,r19
1000a5e0:	800b883a 	mov	r5,r16
1000a5e4:	01800284 	movi	r6,10
1000a5e8:	000f883a 	mov	r7,zero
1000a5ec:	a0800005 	stb	r2,0(r20)
1000a5f0:	000b87c0 	call	1000b87c <__udivdi3>
1000a5f4:	1027883a 	mov	r19,r2
1000a5f8:	10c4b03a 	or	r2,r2,r3
1000a5fc:	1821883a 	mov	r16,r3
1000a600:	103fef1e 	bne	r2,zero,1000a5c0 <__alt_data_end+0xf800a5c0>
1000a604:	d9011e17 	ldw	r4,1144(sp)
1000a608:	dc012217 	ldw	r16,1160(sp)
1000a60c:	a811883a 	mov	r8,r21
1000a610:	dd012215 	stw	r20,1160(sp)
1000a614:	2529c83a 	sub	r20,r4,r20
1000a618:	003e4106 	br	10009f20 <__alt_data_end+0xf8009f20>
1000a61c:	9cc00c04 	addi	r19,r19,48
1000a620:	d8c109c4 	addi	r3,sp,1063
1000a624:	dcc109c5 	stb	r19,1063(sp)
1000a628:	dd012817 	ldw	r20,1184(sp)
1000a62c:	d8c12215 	stw	r3,1160(sp)
1000a630:	003e3b06 	br	10009f20 <__alt_data_end+0xf8009f20>
1000a634:	d8811c17 	ldw	r2,1136(sp)
1000a638:	10000426 	beq	r2,zero,1000a64c <___vfiprintf_internal_r+0xc70>
1000a63c:	d9012117 	ldw	r4,1156(sp)
1000a640:	d9412017 	ldw	r5,1152(sp)
1000a644:	d9811a04 	addi	r6,sp,1128
1000a648:	00098c80 	call	100098c8 <__sprint_r.part.0>
1000a64c:	d9412017 	ldw	r5,1152(sp)
1000a650:	2880030b 	ldhu	r2,12(r5)
1000a654:	1080100c 	andi	r2,r2,64
1000a658:	103ddc1e 	bne	r2,zero,10009dcc <__alt_data_end+0xf8009dcc>
1000a65c:	d8812517 	ldw	r2,1172(sp)
1000a660:	003ddb06 	br	10009dd0 <__alt_data_end+0xf8009dd0>
1000a664:	1801061e 	bne	r3,zero,1000aa80 <___vfiprintf_internal_r+0x10a4>
1000a668:	d8c12217 	ldw	r3,1160(sp)
1000a66c:	00800044 	movi	r2,1
1000a670:	dd000115 	stw	r20,4(sp)
1000a674:	d8c00015 	stw	r3,0(sp)
1000a678:	dd011c15 	stw	r20,1136(sp)
1000a67c:	d8811b15 	stw	r2,1132(sp)
1000a680:	a007883a 	mov	r3,r20
1000a684:	d811883a 	mov	r8,sp
1000a688:	42000204 	addi	r8,r8,8
1000a68c:	9480010c 	andi	r18,r18,4
1000a690:	90003426 	beq	r18,zero,1000a764 <___vfiprintf_internal_r+0xd88>
1000a694:	d9412417 	ldw	r5,1168(sp)
1000a698:	2d65c83a 	sub	r18,r5,r21
1000a69c:	0480310e 	bge	zero,r18,1000a764 <___vfiprintf_internal_r+0xd88>
1000a6a0:	04000404 	movi	r16,16
1000a6a4:	8481ad0e 	bge	r16,r18,1000ad5c <___vfiprintf_internal_r+0x1380>
1000a6a8:	01440074 	movhi	r5,4097
1000a6ac:	2947e804 	addi	r5,r5,8096
1000a6b0:	d9011b17 	ldw	r4,1132(sp)
1000a6b4:	d9412615 	stw	r5,1176(sp)
1000a6b8:	04c001c4 	movi	r19,7
1000a6bc:	dd012117 	ldw	r20,1156(sp)
1000a6c0:	dd812017 	ldw	r22,1152(sp)
1000a6c4:	00000506 	br	1000a6dc <___vfiprintf_internal_r+0xd00>
1000a6c8:	21400084 	addi	r5,r4,2
1000a6cc:	42000204 	addi	r8,r8,8
1000a6d0:	1009883a 	mov	r4,r2
1000a6d4:	94bffc04 	addi	r18,r18,-16
1000a6d8:	84800d0e 	bge	r16,r18,1000a710 <___vfiprintf_internal_r+0xd34>
1000a6dc:	18c00404 	addi	r3,r3,16
1000a6e0:	20800044 	addi	r2,r4,1
1000a6e4:	47000015 	stw	fp,0(r8)
1000a6e8:	44000115 	stw	r16,4(r8)
1000a6ec:	d8c11c15 	stw	r3,1136(sp)
1000a6f0:	d8811b15 	stw	r2,1132(sp)
1000a6f4:	98bff40e 	bge	r19,r2,1000a6c8 <__alt_data_end+0xf800a6c8>
1000a6f8:	1800291e 	bne	r3,zero,1000a7a0 <___vfiprintf_internal_r+0xdc4>
1000a6fc:	94bffc04 	addi	r18,r18,-16
1000a700:	0009883a 	mov	r4,zero
1000a704:	01400044 	movi	r5,1
1000a708:	d811883a 	mov	r8,sp
1000a70c:	84bff316 	blt	r16,r18,1000a6dc <__alt_data_end+0xf800a6dc>
1000a710:	d8812617 	ldw	r2,1176(sp)
1000a714:	1c87883a 	add	r3,r3,r18
1000a718:	44800115 	stw	r18,4(r8)
1000a71c:	40800015 	stw	r2,0(r8)
1000a720:	d8c11c15 	stw	r3,1136(sp)
1000a724:	d9411b15 	stw	r5,1132(sp)
1000a728:	008001c4 	movi	r2,7
1000a72c:	11400d0e 	bge	r2,r5,1000a764 <___vfiprintf_internal_r+0xd88>
1000a730:	1800061e 	bne	r3,zero,1000a74c <___vfiprintf_internal_r+0xd70>
1000a734:	d8c12417 	ldw	r3,1168(sp)
1000a738:	a8c12e16 	blt	r21,r3,1000abf4 <___vfiprintf_internal_r+0x1218>
1000a73c:	d9012517 	ldw	r4,1172(sp)
1000a740:	2549883a 	add	r4,r4,r21
1000a744:	d9012515 	stw	r4,1172(sp)
1000a748:	00001206 	br	1000a794 <___vfiprintf_internal_r+0xdb8>
1000a74c:	d9012117 	ldw	r4,1156(sp)
1000a750:	d9412017 	ldw	r5,1152(sp)
1000a754:	d9811a04 	addi	r6,sp,1128
1000a758:	00098c80 	call	100098c8 <__sprint_r.part.0>
1000a75c:	103fbb1e 	bne	r2,zero,1000a64c <__alt_data_end+0xf800a64c>
1000a760:	d8c11c17 	ldw	r3,1136(sp)
1000a764:	d8812417 	ldw	r2,1168(sp)
1000a768:	a880010e 	bge	r21,r2,1000a770 <___vfiprintf_internal_r+0xd94>
1000a76c:	102b883a 	mov	r21,r2
1000a770:	d9012517 	ldw	r4,1172(sp)
1000a774:	2549883a 	add	r4,r4,r21
1000a778:	d9012515 	stw	r4,1172(sp)
1000a77c:	18000526 	beq	r3,zero,1000a794 <___vfiprintf_internal_r+0xdb8>
1000a780:	d9012117 	ldw	r4,1156(sp)
1000a784:	d9412017 	ldw	r5,1152(sp)
1000a788:	d9811a04 	addi	r6,sp,1128
1000a78c:	00098c80 	call	100098c8 <__sprint_r.part.0>
1000a790:	103fae1e 	bne	r2,zero,1000a64c <__alt_data_end+0xf800a64c>
1000a794:	d8011b15 	stw	zero,1132(sp)
1000a798:	d811883a 	mov	r8,sp
1000a79c:	003cc706 	br	10009abc <__alt_data_end+0xf8009abc>
1000a7a0:	a009883a 	mov	r4,r20
1000a7a4:	b00b883a 	mov	r5,r22
1000a7a8:	d9811a04 	addi	r6,sp,1128
1000a7ac:	00098c80 	call	100098c8 <__sprint_r.part.0>
1000a7b0:	103fa61e 	bne	r2,zero,1000a64c <__alt_data_end+0xf800a64c>
1000a7b4:	d9011b17 	ldw	r4,1132(sp)
1000a7b8:	d8c11c17 	ldw	r3,1136(sp)
1000a7bc:	d811883a 	mov	r8,sp
1000a7c0:	21400044 	addi	r5,r4,1
1000a7c4:	003fc306 	br	1000a6d4 <__alt_data_end+0xf800a6d4>
1000a7c8:	d9012417 	ldw	r4,1168(sp)
1000a7cc:	256dc83a 	sub	r22,r4,r21
1000a7d0:	05be1f0e 	bge	zero,r22,1000a050 <__alt_data_end+0xf800a050>
1000a7d4:	04c00404 	movi	r19,16
1000a7d8:	9d81720e 	bge	r19,r22,1000ada4 <___vfiprintf_internal_r+0x13c8>
1000a7dc:	00840074 	movhi	r2,4097
1000a7e0:	1087e404 	addi	r2,r2,8080
1000a7e4:	d8812615 	stw	r2,1176(sp)
1000a7e8:	028001c4 	movi	r10,7
1000a7ec:	00000506 	br	1000a804 <___vfiprintf_internal_r+0xe28>
1000a7f0:	29000084 	addi	r4,r5,2
1000a7f4:	42000204 	addi	r8,r8,8
1000a7f8:	100b883a 	mov	r5,r2
1000a7fc:	b5bffc04 	addi	r22,r22,-16
1000a800:	9d800d0e 	bge	r19,r22,1000a838 <___vfiprintf_internal_r+0xe5c>
1000a804:	18c00404 	addi	r3,r3,16
1000a808:	28800044 	addi	r2,r5,1
1000a80c:	44400015 	stw	r17,0(r8)
1000a810:	44c00115 	stw	r19,4(r8)
1000a814:	d8c11c15 	stw	r3,1136(sp)
1000a818:	d8811b15 	stw	r2,1132(sp)
1000a81c:	50bff40e 	bge	r10,r2,1000a7f0 <__alt_data_end+0xf800a7f0>
1000a820:	1800111e 	bne	r3,zero,1000a868 <___vfiprintf_internal_r+0xe8c>
1000a824:	b5bffc04 	addi	r22,r22,-16
1000a828:	000b883a 	mov	r5,zero
1000a82c:	01000044 	movi	r4,1
1000a830:	d811883a 	mov	r8,sp
1000a834:	9dbff316 	blt	r19,r22,1000a804 <__alt_data_end+0xf800a804>
1000a838:	d9412617 	ldw	r5,1176(sp)
1000a83c:	1d87883a 	add	r3,r3,r22
1000a840:	45800115 	stw	r22,4(r8)
1000a844:	41400015 	stw	r5,0(r8)
1000a848:	d8c11c15 	stw	r3,1136(sp)
1000a84c:	d9011b15 	stw	r4,1132(sp)
1000a850:	008001c4 	movi	r2,7
1000a854:	11008516 	blt	r2,r4,1000aa6c <___vfiprintf_internal_r+0x1090>
1000a858:	42000204 	addi	r8,r8,8
1000a85c:	20800044 	addi	r2,r4,1
1000a860:	200b883a 	mov	r5,r4
1000a864:	003dfa06 	br	1000a050 <__alt_data_end+0xf800a050>
1000a868:	d9012117 	ldw	r4,1156(sp)
1000a86c:	d9412017 	ldw	r5,1152(sp)
1000a870:	d9811a04 	addi	r6,sp,1128
1000a874:	da812a15 	stw	r10,1192(sp)
1000a878:	00098c80 	call	100098c8 <__sprint_r.part.0>
1000a87c:	da812a17 	ldw	r10,1192(sp)
1000a880:	103f721e 	bne	r2,zero,1000a64c <__alt_data_end+0xf800a64c>
1000a884:	d9411b17 	ldw	r5,1132(sp)
1000a888:	d8c11c17 	ldw	r3,1136(sp)
1000a88c:	d811883a 	mov	r8,sp
1000a890:	29000044 	addi	r4,r5,1
1000a894:	003fd906 	br	1000a7fc <__alt_data_end+0xf800a7fc>
1000a898:	1800681e 	bne	r3,zero,1000aa3c <___vfiprintf_internal_r+0x1060>
1000a89c:	50004d26 	beq	r10,zero,1000a9d4 <___vfiprintf_internal_r+0xff8>
1000a8a0:	d8811d04 	addi	r2,sp,1140
1000a8a4:	00c00084 	movi	r3,2
1000a8a8:	d8800015 	stw	r2,0(sp)
1000a8ac:	d8c00115 	stw	r3,4(sp)
1000a8b0:	2005883a 	mov	r2,r4
1000a8b4:	d811883a 	mov	r8,sp
1000a8b8:	003de006 	br	1000a03c <__alt_data_end+0xf800a03c>
1000a8bc:	1800551e 	bne	r3,zero,1000aa14 <___vfiprintf_internal_r+0x1038>
1000a8c0:	000b883a 	mov	r5,zero
1000a8c4:	00800044 	movi	r2,1
1000a8c8:	d811883a 	mov	r8,sp
1000a8cc:	003dde06 	br	1000a048 <__alt_data_end+0xf800a048>
1000a8d0:	10803fcc 	andi	r2,r2,255
1000a8d4:	1000191e 	bne	r2,zero,1000a93c <___vfiprintf_internal_r+0xf60>
1000a8d8:	9080004c 	andi	r2,r18,1
1000a8dc:	10001726 	beq	r2,zero,1000a93c <___vfiprintf_internal_r+0xf60>
1000a8e0:	00800c04 	movi	r2,48
1000a8e4:	d8c109c4 	addi	r3,sp,1063
1000a8e8:	d88109c5 	stb	r2,1063(sp)
1000a8ec:	dd012817 	ldw	r20,1184(sp)
1000a8f0:	d8c12215 	stw	r3,1160(sp)
1000a8f4:	003d8a06 	br	10009f20 <__alt_data_end+0xf8009f20>
1000a8f8:	d9012717 	ldw	r4,1180(sp)
1000a8fc:	dd010a04 	addi	r20,sp,1064
1000a900:	988003cc 	andi	r2,r19,15
1000a904:	a806973a 	slli	r3,r21,28
1000a908:	2085883a 	add	r2,r4,r2
1000a90c:	9826d13a 	srli	r19,r19,4
1000a910:	10800003 	ldbu	r2,0(r2)
1000a914:	a82ad13a 	srli	r21,r21,4
1000a918:	a53fffc4 	addi	r20,r20,-1
1000a91c:	1ce6b03a 	or	r19,r3,r19
1000a920:	a0800005 	stb	r2,0(r20)
1000a924:	9d44b03a 	or	r2,r19,r21
1000a928:	103ff51e 	bne	r2,zero,1000a900 <__alt_data_end+0xf800a900>
1000a92c:	d9411e17 	ldw	r5,1144(sp)
1000a930:	dd012215 	stw	r20,1160(sp)
1000a934:	2d29c83a 	sub	r20,r5,r20
1000a938:	003d7906 	br	10009f20 <__alt_data_end+0xf8009f20>
1000a93c:	d8c10a04 	addi	r3,sp,1064
1000a940:	d8c12215 	stw	r3,1160(sp)
1000a944:	003d7606 	br	10009f20 <__alt_data_end+0xf8009f20>
1000a948:	18009e1e 	bne	r3,zero,1000abc4 <___vfiprintf_internal_r+0x11e8>
1000a94c:	d8811d87 	ldb	r2,1142(sp)
1000a950:	10005f26 	beq	r2,zero,1000aad0 <___vfiprintf_internal_r+0x10f4>
1000a954:	00c00044 	movi	r3,1
1000a958:	d9011d84 	addi	r4,sp,1142
1000a95c:	1805883a 	mov	r2,r3
1000a960:	d9000015 	stw	r4,0(sp)
1000a964:	d8c00115 	stw	r3,4(sp)
1000a968:	d811883a 	mov	r8,sp
1000a96c:	003efc06 	br	1000a560 <__alt_data_end+0xf800a560>
1000a970:	d9412417 	ldw	r5,1168(sp)
1000a974:	d811883a 	mov	r8,sp
1000a978:	2d65c83a 	sub	r18,r5,r21
1000a97c:	04bf4816 	blt	zero,r18,1000a6a0 <__alt_data_end+0xf800a6a0>
1000a980:	003f6c06 	br	1000a734 <__alt_data_end+0xf800a734>
1000a984:	b829883a 	mov	r20,r23
1000a988:	003c6906 	br	10009b30 <__alt_data_end+0xf8009b30>
1000a98c:	d9012117 	ldw	r4,1156(sp)
1000a990:	d9412017 	ldw	r5,1152(sp)
1000a994:	d9811a04 	addi	r6,sp,1128
1000a998:	00098c80 	call	100098c8 <__sprint_r.part.0>
1000a99c:	103f2b1e 	bne	r2,zero,1000a64c <__alt_data_end+0xf800a64c>
1000a9a0:	d8c11c17 	ldw	r3,1136(sp)
1000a9a4:	d811883a 	mov	r8,sp
1000a9a8:	003f3806 	br	1000a68c <__alt_data_end+0xf800a68c>
1000a9ac:	00800084 	movi	r2,2
1000a9b0:	9d46b03a 	or	r3,r19,r21
1000a9b4:	003df606 	br	1000a190 <__alt_data_end+0xf800a190>
1000a9b8:	d9012117 	ldw	r4,1156(sp)
1000a9bc:	d9412017 	ldw	r5,1152(sp)
1000a9c0:	d9811a04 	addi	r6,sp,1128
1000a9c4:	00098c80 	call	100098c8 <__sprint_r.part.0>
1000a9c8:	103f201e 	bne	r2,zero,1000a64c <__alt_data_end+0xf800a64c>
1000a9cc:	d811883a 	mov	r8,sp
1000a9d0:	003cc606 	br	10009cec <__alt_data_end+0xf8009cec>
1000a9d4:	000b883a 	mov	r5,zero
1000a9d8:	2005883a 	mov	r2,r4
1000a9dc:	d811883a 	mov	r8,sp
1000a9e0:	003d9906 	br	1000a048 <__alt_data_end+0xf800a048>
1000a9e4:	10803fcc 	andi	r2,r2,255
1000a9e8:	1080201c 	xori	r2,r2,128
1000a9ec:	10bfe004 	addi	r2,r2,-128
1000a9f0:	01000c04 	movi	r4,48
1000a9f4:	1100b226 	beq	r2,r4,1000acc0 <___vfiprintf_internal_r+0x12e4>
1000a9f8:	d9412217 	ldw	r5,1160(sp)
1000a9fc:	d8811e17 	ldw	r2,1144(sp)
1000aa00:	193fffc5 	stb	r4,-1(r3)
1000aa04:	297fffc4 	addi	r5,r5,-1
1000aa08:	d9412215 	stw	r5,1160(sp)
1000aa0c:	1169c83a 	sub	r20,r2,r5
1000aa10:	003d4306 	br	10009f20 <__alt_data_end+0xf8009f20>
1000aa14:	d9012117 	ldw	r4,1156(sp)
1000aa18:	d9412017 	ldw	r5,1152(sp)
1000aa1c:	d9811a04 	addi	r6,sp,1128
1000aa20:	00098c80 	call	100098c8 <__sprint_r.part.0>
1000aa24:	103f091e 	bne	r2,zero,1000a64c <__alt_data_end+0xf800a64c>
1000aa28:	d9411b17 	ldw	r5,1132(sp)
1000aa2c:	d8c11c17 	ldw	r3,1136(sp)
1000aa30:	d811883a 	mov	r8,sp
1000aa34:	28800044 	addi	r2,r5,1
1000aa38:	003d8306 	br	1000a048 <__alt_data_end+0xf800a048>
1000aa3c:	d9012117 	ldw	r4,1156(sp)
1000aa40:	d9412017 	ldw	r5,1152(sp)
1000aa44:	d9811a04 	addi	r6,sp,1128
1000aa48:	da812a15 	stw	r10,1192(sp)
1000aa4c:	00098c80 	call	100098c8 <__sprint_r.part.0>
1000aa50:	da812a17 	ldw	r10,1192(sp)
1000aa54:	103efd1e 	bne	r2,zero,1000a64c <__alt_data_end+0xf800a64c>
1000aa58:	d9411b17 	ldw	r5,1132(sp)
1000aa5c:	d8c11c17 	ldw	r3,1136(sp)
1000aa60:	d811883a 	mov	r8,sp
1000aa64:	28800044 	addi	r2,r5,1
1000aa68:	003d6a06 	br	1000a014 <__alt_data_end+0xf800a014>
1000aa6c:	1800a01e 	bne	r3,zero,1000acf0 <___vfiprintf_internal_r+0x1314>
1000aa70:	000b883a 	mov	r5,zero
1000aa74:	00800044 	movi	r2,1
1000aa78:	d811883a 	mov	r8,sp
1000aa7c:	003d7406 	br	1000a050 <__alt_data_end+0xf800a050>
1000aa80:	d9012117 	ldw	r4,1156(sp)
1000aa84:	d9412017 	ldw	r5,1152(sp)
1000aa88:	d9811a04 	addi	r6,sp,1128
1000aa8c:	00098c80 	call	100098c8 <__sprint_r.part.0>
1000aa90:	103eee1e 	bne	r2,zero,1000a64c <__alt_data_end+0xf800a64c>
1000aa94:	d8811b17 	ldw	r2,1132(sp)
1000aa98:	d8c11c17 	ldw	r3,1136(sp)
1000aa9c:	d811883a 	mov	r8,sp
1000aaa0:	10800044 	addi	r2,r2,1
1000aaa4:	003d8f06 	br	1000a0e4 <__alt_data_end+0xf800a0e4>
1000aaa8:	04e7c83a 	sub	r19,zero,r19
1000aaac:	9804c03a 	cmpne	r2,r19,zero
1000aab0:	056bc83a 	sub	r21,zero,r21
1000aab4:	a8abc83a 	sub	r21,r21,r2
1000aab8:	05800b44 	movi	r22,45
1000aabc:	dd811d85 	stb	r22,1142(sp)
1000aac0:	8029883a 	mov	r20,r16
1000aac4:	00800044 	movi	r2,1
1000aac8:	9d46b03a 	or	r3,r19,r21
1000aacc:	003cfa06 	br	10009eb8 <__alt_data_end+0xf8009eb8>
1000aad0:	000b883a 	mov	r5,zero
1000aad4:	00800044 	movi	r2,1
1000aad8:	d811883a 	mov	r8,sp
1000aadc:	503d5a26 	beq	r10,zero,1000a048 <__alt_data_end+0xf800a048>
1000aae0:	00c00084 	movi	r3,2
1000aae4:	d9011d04 	addi	r4,sp,1140
1000aae8:	d9000015 	stw	r4,0(sp)
1000aaec:	d8c00115 	stw	r3,4(sp)
1000aaf0:	003d5206 	br	1000a03c <__alt_data_end+0xf800a03c>
1000aaf4:	9080040c 	andi	r2,r18,16
1000aaf8:	1000421e 	bne	r2,zero,1000ac04 <___vfiprintf_internal_r+0x1228>
1000aafc:	9480100c 	andi	r18,r18,64
1000ab00:	90009c26 	beq	r18,zero,1000ad74 <___vfiprintf_internal_r+0x1398>
1000ab04:	d9412317 	ldw	r5,1164(sp)
1000ab08:	d8c12517 	ldw	r3,1172(sp)
1000ab0c:	28800017 	ldw	r2,0(r5)
1000ab10:	29400104 	addi	r5,r5,4
1000ab14:	d9412315 	stw	r5,1164(sp)
1000ab18:	10c0000d 	sth	r3,0(r2)
1000ab1c:	003be706 	br	10009abc <__alt_data_end+0xf8009abc>
1000ab20:	90c0100c 	andi	r3,r18,64
1000ab24:	18003e26 	beq	r3,zero,1000ac20 <___vfiprintf_internal_r+0x1244>
1000ab28:	d8c12317 	ldw	r3,1164(sp)
1000ab2c:	14c0000b 	ldhu	r19,0(r2)
1000ab30:	002b883a 	mov	r21,zero
1000ab34:	18c00104 	addi	r3,r3,4
1000ab38:	d8c12315 	stw	r3,1164(sp)
1000ab3c:	003db706 	br	1000a21c <__alt_data_end+0xf800a21c>
1000ab40:	9080100c 	andi	r2,r18,64
1000ab44:	10004c26 	beq	r2,zero,1000ac78 <___vfiprintf_internal_r+0x129c>
1000ab48:	1cc0000f 	ldh	r19,0(r3)
1000ab4c:	d8812317 	ldw	r2,1164(sp)
1000ab50:	982bd7fa 	srai	r21,r19,31
1000ab54:	10800104 	addi	r2,r2,4
1000ab58:	d8812315 	stw	r2,1164(sp)
1000ab5c:	a805883a 	mov	r2,r21
1000ab60:	003cd006 	br	10009ea4 <__alt_data_end+0xf8009ea4>
1000ab64:	00800084 	movi	r2,2
1000ab68:	003d8906 	br	1000a190 <__alt_data_end+0xf800a190>
1000ab6c:	b9800007 	ldb	r6,0(r23)
1000ab70:	003bfb06 	br	10009b60 <__alt_data_end+0xf8009b60>
1000ab74:	9080100c 	andi	r2,r18,64
1000ab78:	10003726 	beq	r2,zero,1000ac58 <___vfiprintf_internal_r+0x127c>
1000ab7c:	d9412317 	ldw	r5,1164(sp)
1000ab80:	002b883a 	mov	r21,zero
1000ab84:	0005883a 	mov	r2,zero
1000ab88:	2cc0000b 	ldhu	r19,0(r5)
1000ab8c:	29400104 	addi	r5,r5,4
1000ab90:	d9412315 	stw	r5,1164(sp)
1000ab94:	9807883a 	mov	r3,r19
1000ab98:	003d7d06 	br	1000a190 <__alt_data_end+0xf800a190>
1000ab9c:	9080100c 	andi	r2,r18,64
1000aba0:	10002526 	beq	r2,zero,1000ac38 <___vfiprintf_internal_r+0x125c>
1000aba4:	d8812317 	ldw	r2,1164(sp)
1000aba8:	002b883a 	mov	r21,zero
1000abac:	14c0000b 	ldhu	r19,0(r2)
1000abb0:	10800104 	addi	r2,r2,4
1000abb4:	d8812315 	stw	r2,1164(sp)
1000abb8:	9807883a 	mov	r3,r19
1000abbc:	00800044 	movi	r2,1
1000abc0:	003d7306 	br	1000a190 <__alt_data_end+0xf800a190>
1000abc4:	d9012117 	ldw	r4,1156(sp)
1000abc8:	d9412017 	ldw	r5,1152(sp)
1000abcc:	d9811a04 	addi	r6,sp,1128
1000abd0:	da812a15 	stw	r10,1192(sp)
1000abd4:	00098c80 	call	100098c8 <__sprint_r.part.0>
1000abd8:	da812a17 	ldw	r10,1192(sp)
1000abdc:	103e9b1e 	bne	r2,zero,1000a64c <__alt_data_end+0xf800a64c>
1000abe0:	d9411b17 	ldw	r5,1132(sp)
1000abe4:	d8c11c17 	ldw	r3,1136(sp)
1000abe8:	d811883a 	mov	r8,sp
1000abec:	28800044 	addi	r2,r5,1
1000abf0:	003e5006 	br	1000a534 <__alt_data_end+0xf800a534>
1000abf4:	182b883a 	mov	r21,r3
1000abf8:	003ed006 	br	1000a73c <__alt_data_end+0xf800a73c>
1000abfc:	8029883a 	mov	r20,r16
1000ac00:	003dc606 	br	1000a31c <__alt_data_end+0xf800a31c>
1000ac04:	d8c12317 	ldw	r3,1164(sp)
1000ac08:	d9012517 	ldw	r4,1172(sp)
1000ac0c:	18800017 	ldw	r2,0(r3)
1000ac10:	18c00104 	addi	r3,r3,4
1000ac14:	d8c12315 	stw	r3,1164(sp)
1000ac18:	11000015 	stw	r4,0(r2)
1000ac1c:	003ba706 	br	10009abc <__alt_data_end+0xf8009abc>
1000ac20:	d9012317 	ldw	r4,1164(sp)
1000ac24:	14c00017 	ldw	r19,0(r2)
1000ac28:	002b883a 	mov	r21,zero
1000ac2c:	21000104 	addi	r4,r4,4
1000ac30:	d9012315 	stw	r4,1164(sp)
1000ac34:	003d7906 	br	1000a21c <__alt_data_end+0xf800a21c>
1000ac38:	d8c12317 	ldw	r3,1164(sp)
1000ac3c:	002b883a 	mov	r21,zero
1000ac40:	00800044 	movi	r2,1
1000ac44:	1cc00017 	ldw	r19,0(r3)
1000ac48:	18c00104 	addi	r3,r3,4
1000ac4c:	d8c12315 	stw	r3,1164(sp)
1000ac50:	9807883a 	mov	r3,r19
1000ac54:	003d4e06 	br	1000a190 <__alt_data_end+0xf800a190>
1000ac58:	d8812317 	ldw	r2,1164(sp)
1000ac5c:	002b883a 	mov	r21,zero
1000ac60:	14c00017 	ldw	r19,0(r2)
1000ac64:	10800104 	addi	r2,r2,4
1000ac68:	d8812315 	stw	r2,1164(sp)
1000ac6c:	9807883a 	mov	r3,r19
1000ac70:	0005883a 	mov	r2,zero
1000ac74:	003d4606 	br	1000a190 <__alt_data_end+0xf800a190>
1000ac78:	1cc00017 	ldw	r19,0(r3)
1000ac7c:	d8c12317 	ldw	r3,1164(sp)
1000ac80:	982bd7fa 	srai	r21,r19,31
1000ac84:	18c00104 	addi	r3,r3,4
1000ac88:	d8c12315 	stw	r3,1164(sp)
1000ac8c:	a805883a 	mov	r2,r21
1000ac90:	003c8406 	br	10009ea4 <__alt_data_end+0xf8009ea4>
1000ac94:	01040074 	movhi	r4,4097
1000ac98:	2107e404 	addi	r4,r4,8080
1000ac9c:	d9012615 	stw	r4,1176(sp)
1000aca0:	003d0606 	br	1000a0bc <__alt_data_end+0xf800a0bc>
1000aca4:	b9800043 	ldbu	r6,1(r23)
1000aca8:	94800814 	ori	r18,r18,32
1000acac:	bdc00044 	addi	r23,r23,1
1000acb0:	31803fcc 	andi	r6,r6,255
1000acb4:	3180201c 	xori	r6,r6,128
1000acb8:	31bfe004 	addi	r6,r6,-128
1000acbc:	003ba806 	br	10009b60 <__alt_data_end+0xf8009b60>
1000acc0:	d8811e17 	ldw	r2,1144(sp)
1000acc4:	d8c12217 	ldw	r3,1160(sp)
1000acc8:	10e9c83a 	sub	r20,r2,r3
1000accc:	003c9406 	br	10009f20 <__alt_data_end+0xf8009f20>
1000acd0:	da012a15 	stw	r8,1192(sp)
1000acd4:	00024ec0 	call	100024ec <strlen>
1000acd8:	1029883a 	mov	r20,r2
1000acdc:	dd811d83 	ldbu	r22,1142(sp)
1000ace0:	dcc12315 	stw	r19,1164(sp)
1000ace4:	0021883a 	mov	r16,zero
1000ace8:	da012a17 	ldw	r8,1192(sp)
1000acec:	003c8c06 	br	10009f20 <__alt_data_end+0xf8009f20>
1000acf0:	d9012117 	ldw	r4,1156(sp)
1000acf4:	d9412017 	ldw	r5,1152(sp)
1000acf8:	d9811a04 	addi	r6,sp,1128
1000acfc:	00098c80 	call	100098c8 <__sprint_r.part.0>
1000ad00:	103e521e 	bne	r2,zero,1000a64c <__alt_data_end+0xf800a64c>
1000ad04:	d9411b17 	ldw	r5,1132(sp)
1000ad08:	d8c11c17 	ldw	r3,1136(sp)
1000ad0c:	d811883a 	mov	r8,sp
1000ad10:	28800044 	addi	r2,r5,1
1000ad14:	003cce06 	br	1000a050 <__alt_data_end+0xf800a050>
1000ad18:	01440074 	movhi	r5,4097
1000ad1c:	2947e804 	addi	r5,r5,8096
1000ad20:	d9412615 	stw	r5,1176(sp)
1000ad24:	d9411b17 	ldw	r5,1132(sp)
1000ad28:	29400044 	addi	r5,r5,1
1000ad2c:	003cad06 	br	10009fe4 <__alt_data_end+0xf8009fe4>
1000ad30:	00800184 	movi	r2,6
1000ad34:	1400012e 	bgeu	r2,r16,1000ad3c <___vfiprintf_internal_r+0x1360>
1000ad38:	1021883a 	mov	r16,r2
1000ad3c:	8029883a 	mov	r20,r16
1000ad40:	802b883a 	mov	r21,r16
1000ad44:	80001c16 	blt	r16,zero,1000adb8 <___vfiprintf_internal_r+0x13dc>
1000ad48:	00c40074 	movhi	r3,4097
1000ad4c:	18c78804 	addi	r3,r3,7712
1000ad50:	dcc12315 	stw	r19,1164(sp)
1000ad54:	d8c12215 	stw	r3,1160(sp)
1000ad58:	003cff06 	br	1000a158 <__alt_data_end+0xf800a158>
1000ad5c:	d9411b17 	ldw	r5,1132(sp)
1000ad60:	00840074 	movhi	r2,4097
1000ad64:	1087e804 	addi	r2,r2,8096
1000ad68:	d8812615 	stw	r2,1176(sp)
1000ad6c:	29400044 	addi	r5,r5,1
1000ad70:	003e6706 	br	1000a710 <__alt_data_end+0xf800a710>
1000ad74:	d9012317 	ldw	r4,1164(sp)
1000ad78:	d9412517 	ldw	r5,1172(sp)
1000ad7c:	20800017 	ldw	r2,0(r4)
1000ad80:	21000104 	addi	r4,r4,4
1000ad84:	d9012315 	stw	r4,1164(sp)
1000ad88:	11400015 	stw	r5,0(r2)
1000ad8c:	003b4b06 	br	10009abc <__alt_data_end+0xf8009abc>
1000ad90:	8029883a 	mov	r20,r16
1000ad94:	dd811d83 	ldbu	r22,1142(sp)
1000ad98:	dcc12315 	stw	r19,1164(sp)
1000ad9c:	0021883a 	mov	r16,zero
1000ada0:	003c5f06 	br	10009f20 <__alt_data_end+0xf8009f20>
1000ada4:	01040074 	movhi	r4,4097
1000ada8:	2107e404 	addi	r4,r4,8080
1000adac:	d9012615 	stw	r4,1176(sp)
1000adb0:	1009883a 	mov	r4,r2
1000adb4:	003ea006 	br	1000a838 <__alt_data_end+0xf800a838>
1000adb8:	002b883a 	mov	r21,zero
1000adbc:	003fe206 	br	1000ad48 <__alt_data_end+0xf800ad48>
1000adc0:	d9412317 	ldw	r5,1164(sp)
1000adc4:	b807883a 	mov	r3,r23
1000adc8:	102f883a 	mov	r23,r2
1000adcc:	2c000017 	ldw	r16,0(r5)
1000add0:	29000104 	addi	r4,r5,4
1000add4:	d9012315 	stw	r4,1164(sp)
1000add8:	80000416 	blt	r16,zero,1000adec <___vfiprintf_internal_r+0x1410>
1000addc:	19800047 	ldb	r6,1(r3)
1000ade0:	003b5f06 	br	10009b60 <__alt_data_end+0xf8009b60>
1000ade4:	043fffc4 	movi	r16,-1
1000ade8:	003bef06 	br	10009da8 <__alt_data_end+0xf8009da8>
1000adec:	043fffc4 	movi	r16,-1
1000adf0:	19800047 	ldb	r6,1(r3)
1000adf4:	003b5a06 	br	10009b60 <__alt_data_end+0xf8009b60>
1000adf8:	282b883a 	mov	r21,r5
1000adfc:	003cc706 	br	1000a11c <__alt_data_end+0xf800a11c>

1000ae00 <__vfiprintf_internal>:
1000ae00:	2007883a 	mov	r3,r4
1000ae04:	01040074 	movhi	r4,4097
1000ae08:	210ee504 	addi	r4,r4,15252
1000ae0c:	21000017 	ldw	r4,0(r4)
1000ae10:	2805883a 	mov	r2,r5
1000ae14:	300f883a 	mov	r7,r6
1000ae18:	180b883a 	mov	r5,r3
1000ae1c:	100d883a 	mov	r6,r2
1000ae20:	00099dc1 	jmpi	100099dc <___vfiprintf_internal_r>

1000ae24 <_write_r>:
1000ae24:	defffd04 	addi	sp,sp,-12
1000ae28:	dc000015 	stw	r16,0(sp)
1000ae2c:	04040074 	movhi	r16,4097
1000ae30:	dc400115 	stw	r17,4(sp)
1000ae34:	8415b604 	addi	r16,r16,22232
1000ae38:	2023883a 	mov	r17,r4
1000ae3c:	2809883a 	mov	r4,r5
1000ae40:	300b883a 	mov	r5,r6
1000ae44:	380d883a 	mov	r6,r7
1000ae48:	dfc00215 	stw	ra,8(sp)
1000ae4c:	80000015 	stw	zero,0(r16)
1000ae50:	000f74c0 	call	1000f74c <write>
1000ae54:	00ffffc4 	movi	r3,-1
1000ae58:	10c00526 	beq	r2,r3,1000ae70 <_write_r+0x4c>
1000ae5c:	dfc00217 	ldw	ra,8(sp)
1000ae60:	dc400117 	ldw	r17,4(sp)
1000ae64:	dc000017 	ldw	r16,0(sp)
1000ae68:	dec00304 	addi	sp,sp,12
1000ae6c:	f800283a 	ret
1000ae70:	80c00017 	ldw	r3,0(r16)
1000ae74:	183ff926 	beq	r3,zero,1000ae5c <__alt_data_end+0xf800ae5c>
1000ae78:	88c00015 	stw	r3,0(r17)
1000ae7c:	003ff706 	br	1000ae5c <__alt_data_end+0xf800ae5c>

1000ae80 <_close_r>:
1000ae80:	defffd04 	addi	sp,sp,-12
1000ae84:	dc000015 	stw	r16,0(sp)
1000ae88:	04040074 	movhi	r16,4097
1000ae8c:	dc400115 	stw	r17,4(sp)
1000ae90:	8415b604 	addi	r16,r16,22232
1000ae94:	2023883a 	mov	r17,r4
1000ae98:	2809883a 	mov	r4,r5
1000ae9c:	dfc00215 	stw	ra,8(sp)
1000aea0:	80000015 	stw	zero,0(r16)
1000aea4:	000ee780 	call	1000ee78 <close>
1000aea8:	00ffffc4 	movi	r3,-1
1000aeac:	10c00526 	beq	r2,r3,1000aec4 <_close_r+0x44>
1000aeb0:	dfc00217 	ldw	ra,8(sp)
1000aeb4:	dc400117 	ldw	r17,4(sp)
1000aeb8:	dc000017 	ldw	r16,0(sp)
1000aebc:	dec00304 	addi	sp,sp,12
1000aec0:	f800283a 	ret
1000aec4:	80c00017 	ldw	r3,0(r16)
1000aec8:	183ff926 	beq	r3,zero,1000aeb0 <__alt_data_end+0xf800aeb0>
1000aecc:	88c00015 	stw	r3,0(r17)
1000aed0:	003ff706 	br	1000aeb0 <__alt_data_end+0xf800aeb0>

1000aed4 <_calloc_r>:
1000aed4:	defffe04 	addi	sp,sp,-8
1000aed8:	dc000015 	stw	r16,0(sp)
1000aedc:	2021883a 	mov	r16,r4
1000aee0:	2809883a 	mov	r4,r5
1000aee4:	300b883a 	mov	r5,r6
1000aee8:	dfc00115 	stw	ra,4(sp)
1000aeec:	000c6040 	call	1000c604 <__mulsi3>
1000aef0:	8009883a 	mov	r4,r16
1000aef4:	100b883a 	mov	r5,r2
1000aef8:	00073f00 	call	100073f0 <_malloc_r>
1000aefc:	1021883a 	mov	r16,r2
1000af00:	10002826 	beq	r2,zero,1000afa4 <_calloc_r+0xd0>
1000af04:	11bfff17 	ldw	r6,-4(r2)
1000af08:	00bfff04 	movi	r2,-4
1000af0c:	00c00904 	movi	r3,36
1000af10:	308c703a 	and	r6,r6,r2
1000af14:	308d883a 	add	r6,r6,r2
1000af18:	19801436 	bltu	r3,r6,1000af6c <_calloc_r+0x98>
1000af1c:	008004c4 	movi	r2,19
1000af20:	11800936 	bltu	r2,r6,1000af48 <_calloc_r+0x74>
1000af24:	8005883a 	mov	r2,r16
1000af28:	10000015 	stw	zero,0(r2)
1000af2c:	10000115 	stw	zero,4(r2)
1000af30:	10000215 	stw	zero,8(r2)
1000af34:	8005883a 	mov	r2,r16
1000af38:	dfc00117 	ldw	ra,4(sp)
1000af3c:	dc000017 	ldw	r16,0(sp)
1000af40:	dec00204 	addi	sp,sp,8
1000af44:	f800283a 	ret
1000af48:	80000015 	stw	zero,0(r16)
1000af4c:	80000115 	stw	zero,4(r16)
1000af50:	008006c4 	movi	r2,27
1000af54:	11800d2e 	bgeu	r2,r6,1000af8c <_calloc_r+0xb8>
1000af58:	80000215 	stw	zero,8(r16)
1000af5c:	80000315 	stw	zero,12(r16)
1000af60:	30c00c26 	beq	r6,r3,1000af94 <_calloc_r+0xc0>
1000af64:	80800404 	addi	r2,r16,16
1000af68:	003fef06 	br	1000af28 <__alt_data_end+0xf800af28>
1000af6c:	8009883a 	mov	r4,r16
1000af70:	000b883a 	mov	r5,zero
1000af74:	0007f140 	call	10007f14 <memset>
1000af78:	8005883a 	mov	r2,r16
1000af7c:	dfc00117 	ldw	ra,4(sp)
1000af80:	dc000017 	ldw	r16,0(sp)
1000af84:	dec00204 	addi	sp,sp,8
1000af88:	f800283a 	ret
1000af8c:	80800204 	addi	r2,r16,8
1000af90:	003fe506 	br	1000af28 <__alt_data_end+0xf800af28>
1000af94:	80000415 	stw	zero,16(r16)
1000af98:	80800604 	addi	r2,r16,24
1000af9c:	80000515 	stw	zero,20(r16)
1000afa0:	003fe106 	br	1000af28 <__alt_data_end+0xf800af28>
1000afa4:	0005883a 	mov	r2,zero
1000afa8:	003fe306 	br	1000af38 <__alt_data_end+0xf800af38>

1000afac <_fclose_r>:
1000afac:	28003226 	beq	r5,zero,1000b078 <_fclose_r+0xcc>
1000afb0:	defffc04 	addi	sp,sp,-16
1000afb4:	dc400115 	stw	r17,4(sp)
1000afb8:	2023883a 	mov	r17,r4
1000afbc:	dc000015 	stw	r16,0(sp)
1000afc0:	dfc00315 	stw	ra,12(sp)
1000afc4:	dc800215 	stw	r18,8(sp)
1000afc8:	2821883a 	mov	r16,r5
1000afcc:	00066f00 	call	100066f0 <__sfp_lock_acquire>
1000afd0:	88000226 	beq	r17,zero,1000afdc <_fclose_r+0x30>
1000afd4:	88800e17 	ldw	r2,56(r17)
1000afd8:	10002926 	beq	r2,zero,1000b080 <_fclose_r+0xd4>
1000afdc:	8080030f 	ldh	r2,12(r16)
1000afe0:	10002226 	beq	r2,zero,1000b06c <_fclose_r+0xc0>
1000afe4:	8809883a 	mov	r4,r17
1000afe8:	800b883a 	mov	r5,r16
1000afec:	00061240 	call	10006124 <_fflush_r>
1000aff0:	1025883a 	mov	r18,r2
1000aff4:	80800b17 	ldw	r2,44(r16)
1000aff8:	10000426 	beq	r2,zero,1000b00c <_fclose_r+0x60>
1000affc:	81400717 	ldw	r5,28(r16)
1000b000:	8809883a 	mov	r4,r17
1000b004:	103ee83a 	callr	r2
1000b008:	10002616 	blt	r2,zero,1000b0a4 <_fclose_r+0xf8>
1000b00c:	8080030b 	ldhu	r2,12(r16)
1000b010:	1080200c 	andi	r2,r2,128
1000b014:	10001f1e 	bne	r2,zero,1000b094 <_fclose_r+0xe8>
1000b018:	81400c17 	ldw	r5,48(r16)
1000b01c:	28000526 	beq	r5,zero,1000b034 <_fclose_r+0x88>
1000b020:	80801004 	addi	r2,r16,64
1000b024:	28800226 	beq	r5,r2,1000b030 <_fclose_r+0x84>
1000b028:	8809883a 	mov	r4,r17
1000b02c:	00068540 	call	10006854 <_free_r>
1000b030:	80000c15 	stw	zero,48(r16)
1000b034:	81401117 	ldw	r5,68(r16)
1000b038:	28000326 	beq	r5,zero,1000b048 <_fclose_r+0x9c>
1000b03c:	8809883a 	mov	r4,r17
1000b040:	00068540 	call	10006854 <_free_r>
1000b044:	80001115 	stw	zero,68(r16)
1000b048:	8000030d 	sth	zero,12(r16)
1000b04c:	00066f40 	call	100066f4 <__sfp_lock_release>
1000b050:	9005883a 	mov	r2,r18
1000b054:	dfc00317 	ldw	ra,12(sp)
1000b058:	dc800217 	ldw	r18,8(sp)
1000b05c:	dc400117 	ldw	r17,4(sp)
1000b060:	dc000017 	ldw	r16,0(sp)
1000b064:	dec00404 	addi	sp,sp,16
1000b068:	f800283a 	ret
1000b06c:	00066f40 	call	100066f4 <__sfp_lock_release>
1000b070:	0005883a 	mov	r2,zero
1000b074:	003ff706 	br	1000b054 <__alt_data_end+0xf800b054>
1000b078:	0005883a 	mov	r2,zero
1000b07c:	f800283a 	ret
1000b080:	8809883a 	mov	r4,r17
1000b084:	00066e00 	call	100066e0 <__sinit>
1000b088:	8080030f 	ldh	r2,12(r16)
1000b08c:	103fd51e 	bne	r2,zero,1000afe4 <__alt_data_end+0xf800afe4>
1000b090:	003ff606 	br	1000b06c <__alt_data_end+0xf800b06c>
1000b094:	81400417 	ldw	r5,16(r16)
1000b098:	8809883a 	mov	r4,r17
1000b09c:	00068540 	call	10006854 <_free_r>
1000b0a0:	003fdd06 	br	1000b018 <__alt_data_end+0xf800b018>
1000b0a4:	04bfffc4 	movi	r18,-1
1000b0a8:	003fd806 	br	1000b00c <__alt_data_end+0xf800b00c>

1000b0ac <fclose>:
1000b0ac:	00840074 	movhi	r2,4097
1000b0b0:	108ee504 	addi	r2,r2,15252
1000b0b4:	200b883a 	mov	r5,r4
1000b0b8:	11000017 	ldw	r4,0(r2)
1000b0bc:	000afac1 	jmpi	1000afac <_fclose_r>

1000b0c0 <_fputwc_r>:
1000b0c0:	3080030b 	ldhu	r2,12(r6)
1000b0c4:	defff804 	addi	sp,sp,-32
1000b0c8:	dcc00415 	stw	r19,16(sp)
1000b0cc:	dc800315 	stw	r18,12(sp)
1000b0d0:	dc000115 	stw	r16,4(sp)
1000b0d4:	dfc00715 	stw	ra,28(sp)
1000b0d8:	dd400615 	stw	r21,24(sp)
1000b0dc:	dd000515 	stw	r20,20(sp)
1000b0e0:	dc400215 	stw	r17,8(sp)
1000b0e4:	10c8000c 	andi	r3,r2,8192
1000b0e8:	3021883a 	mov	r16,r6
1000b0ec:	2027883a 	mov	r19,r4
1000b0f0:	2825883a 	mov	r18,r5
1000b0f4:	1800051e 	bne	r3,zero,1000b10c <_fputwc_r+0x4c>
1000b0f8:	30c01917 	ldw	r3,100(r6)
1000b0fc:	10880014 	ori	r2,r2,8192
1000b100:	3080030d 	sth	r2,12(r6)
1000b104:	18880014 	ori	r2,r3,8192
1000b108:	30801915 	stw	r2,100(r6)
1000b10c:	00071e00 	call	100071e0 <__locale_mb_cur_max>
1000b110:	00c00044 	movi	r3,1
1000b114:	10c03e26 	beq	r2,r3,1000b210 <_fputwc_r+0x150>
1000b118:	9809883a 	mov	r4,r19
1000b11c:	d80b883a 	mov	r5,sp
1000b120:	900d883a 	mov	r6,r18
1000b124:	81c01704 	addi	r7,r16,92
1000b128:	000b5700 	call	1000b570 <_wcrtomb_r>
1000b12c:	1029883a 	mov	r20,r2
1000b130:	00bfffc4 	movi	r2,-1
1000b134:	a0802026 	beq	r20,r2,1000b1b8 <_fputwc_r+0xf8>
1000b138:	d9400003 	ldbu	r5,0(sp)
1000b13c:	a0001c26 	beq	r20,zero,1000b1b0 <_fputwc_r+0xf0>
1000b140:	0023883a 	mov	r17,zero
1000b144:	05400284 	movi	r21,10
1000b148:	00000906 	br	1000b170 <_fputwc_r+0xb0>
1000b14c:	80800017 	ldw	r2,0(r16)
1000b150:	11400005 	stb	r5,0(r2)
1000b154:	80c00017 	ldw	r3,0(r16)
1000b158:	18c00044 	addi	r3,r3,1
1000b15c:	80c00015 	stw	r3,0(r16)
1000b160:	8c400044 	addi	r17,r17,1
1000b164:	dc45883a 	add	r2,sp,r17
1000b168:	8d00112e 	bgeu	r17,r20,1000b1b0 <_fputwc_r+0xf0>
1000b16c:	11400003 	ldbu	r5,0(r2)
1000b170:	80c00217 	ldw	r3,8(r16)
1000b174:	18ffffc4 	addi	r3,r3,-1
1000b178:	80c00215 	stw	r3,8(r16)
1000b17c:	183ff30e 	bge	r3,zero,1000b14c <__alt_data_end+0xf800b14c>
1000b180:	80800617 	ldw	r2,24(r16)
1000b184:	18801916 	blt	r3,r2,1000b1ec <_fputwc_r+0x12c>
1000b188:	80800017 	ldw	r2,0(r16)
1000b18c:	11400005 	stb	r5,0(r2)
1000b190:	80800017 	ldw	r2,0(r16)
1000b194:	10c00003 	ldbu	r3,0(r2)
1000b198:	10800044 	addi	r2,r2,1
1000b19c:	1d402326 	beq	r3,r21,1000b22c <_fputwc_r+0x16c>
1000b1a0:	80800015 	stw	r2,0(r16)
1000b1a4:	8c400044 	addi	r17,r17,1
1000b1a8:	dc45883a 	add	r2,sp,r17
1000b1ac:	8d3fef36 	bltu	r17,r20,1000b16c <__alt_data_end+0xf800b16c>
1000b1b0:	9005883a 	mov	r2,r18
1000b1b4:	00000406 	br	1000b1c8 <_fputwc_r+0x108>
1000b1b8:	80c0030b 	ldhu	r3,12(r16)
1000b1bc:	a005883a 	mov	r2,r20
1000b1c0:	18c01014 	ori	r3,r3,64
1000b1c4:	80c0030d 	sth	r3,12(r16)
1000b1c8:	dfc00717 	ldw	ra,28(sp)
1000b1cc:	dd400617 	ldw	r21,24(sp)
1000b1d0:	dd000517 	ldw	r20,20(sp)
1000b1d4:	dcc00417 	ldw	r19,16(sp)
1000b1d8:	dc800317 	ldw	r18,12(sp)
1000b1dc:	dc400217 	ldw	r17,8(sp)
1000b1e0:	dc000117 	ldw	r16,4(sp)
1000b1e4:	dec00804 	addi	sp,sp,32
1000b1e8:	f800283a 	ret
1000b1ec:	9809883a 	mov	r4,r19
1000b1f0:	29403fcc 	andi	r5,r5,255
1000b1f4:	800d883a 	mov	r6,r16
1000b1f8:	000b4000 	call	1000b400 <__swbuf_r>
1000b1fc:	10bfffe0 	cmpeqi	r2,r2,-1
1000b200:	10803fcc 	andi	r2,r2,255
1000b204:	103fd626 	beq	r2,zero,1000b160 <__alt_data_end+0xf800b160>
1000b208:	00bfffc4 	movi	r2,-1
1000b20c:	003fee06 	br	1000b1c8 <__alt_data_end+0xf800b1c8>
1000b210:	90ffffc4 	addi	r3,r18,-1
1000b214:	01003f84 	movi	r4,254
1000b218:	20ffbf36 	bltu	r4,r3,1000b118 <__alt_data_end+0xf800b118>
1000b21c:	900b883a 	mov	r5,r18
1000b220:	dc800005 	stb	r18,0(sp)
1000b224:	1029883a 	mov	r20,r2
1000b228:	003fc506 	br	1000b140 <__alt_data_end+0xf800b140>
1000b22c:	9809883a 	mov	r4,r19
1000b230:	a80b883a 	mov	r5,r21
1000b234:	800d883a 	mov	r6,r16
1000b238:	000b4000 	call	1000b400 <__swbuf_r>
1000b23c:	10bfffe0 	cmpeqi	r2,r2,-1
1000b240:	003fef06 	br	1000b200 <__alt_data_end+0xf800b200>

1000b244 <fputwc>:
1000b244:	defffc04 	addi	sp,sp,-16
1000b248:	dc000115 	stw	r16,4(sp)
1000b24c:	04040074 	movhi	r16,4097
1000b250:	840ee504 	addi	r16,r16,15252
1000b254:	dc400215 	stw	r17,8(sp)
1000b258:	2023883a 	mov	r17,r4
1000b25c:	81000017 	ldw	r4,0(r16)
1000b260:	dfc00315 	stw	ra,12(sp)
1000b264:	280d883a 	mov	r6,r5
1000b268:	20000626 	beq	r4,zero,1000b284 <fputwc+0x40>
1000b26c:	20800e17 	ldw	r2,56(r4)
1000b270:	1000041e 	bne	r2,zero,1000b284 <fputwc+0x40>
1000b274:	d9400015 	stw	r5,0(sp)
1000b278:	00066e00 	call	100066e0 <__sinit>
1000b27c:	81000017 	ldw	r4,0(r16)
1000b280:	d9800017 	ldw	r6,0(sp)
1000b284:	880b883a 	mov	r5,r17
1000b288:	dfc00317 	ldw	ra,12(sp)
1000b28c:	dc400217 	ldw	r17,8(sp)
1000b290:	dc000117 	ldw	r16,4(sp)
1000b294:	dec00404 	addi	sp,sp,16
1000b298:	000b0c01 	jmpi	1000b0c0 <_fputwc_r>

1000b29c <_fstat_r>:
1000b29c:	defffd04 	addi	sp,sp,-12
1000b2a0:	dc000015 	stw	r16,0(sp)
1000b2a4:	04040074 	movhi	r16,4097
1000b2a8:	dc400115 	stw	r17,4(sp)
1000b2ac:	8415b604 	addi	r16,r16,22232
1000b2b0:	2023883a 	mov	r17,r4
1000b2b4:	2809883a 	mov	r4,r5
1000b2b8:	300b883a 	mov	r5,r6
1000b2bc:	dfc00215 	stw	ra,8(sp)
1000b2c0:	80000015 	stw	zero,0(r16)
1000b2c4:	000efcc0 	call	1000efcc <fstat>
1000b2c8:	00ffffc4 	movi	r3,-1
1000b2cc:	10c00526 	beq	r2,r3,1000b2e4 <_fstat_r+0x48>
1000b2d0:	dfc00217 	ldw	ra,8(sp)
1000b2d4:	dc400117 	ldw	r17,4(sp)
1000b2d8:	dc000017 	ldw	r16,0(sp)
1000b2dc:	dec00304 	addi	sp,sp,12
1000b2e0:	f800283a 	ret
1000b2e4:	80c00017 	ldw	r3,0(r16)
1000b2e8:	183ff926 	beq	r3,zero,1000b2d0 <__alt_data_end+0xf800b2d0>
1000b2ec:	88c00015 	stw	r3,0(r17)
1000b2f0:	003ff706 	br	1000b2d0 <__alt_data_end+0xf800b2d0>

1000b2f4 <_isatty_r>:
1000b2f4:	defffd04 	addi	sp,sp,-12
1000b2f8:	dc000015 	stw	r16,0(sp)
1000b2fc:	04040074 	movhi	r16,4097
1000b300:	dc400115 	stw	r17,4(sp)
1000b304:	8415b604 	addi	r16,r16,22232
1000b308:	2023883a 	mov	r17,r4
1000b30c:	2809883a 	mov	r4,r5
1000b310:	dfc00215 	stw	ra,8(sp)
1000b314:	80000015 	stw	zero,0(r16)
1000b318:	000f0d40 	call	1000f0d4 <isatty>
1000b31c:	00ffffc4 	movi	r3,-1
1000b320:	10c00526 	beq	r2,r3,1000b338 <_isatty_r+0x44>
1000b324:	dfc00217 	ldw	ra,8(sp)
1000b328:	dc400117 	ldw	r17,4(sp)
1000b32c:	dc000017 	ldw	r16,0(sp)
1000b330:	dec00304 	addi	sp,sp,12
1000b334:	f800283a 	ret
1000b338:	80c00017 	ldw	r3,0(r16)
1000b33c:	183ff926 	beq	r3,zero,1000b324 <__alt_data_end+0xf800b324>
1000b340:	88c00015 	stw	r3,0(r17)
1000b344:	003ff706 	br	1000b324 <__alt_data_end+0xf800b324>

1000b348 <_lseek_r>:
1000b348:	defffd04 	addi	sp,sp,-12
1000b34c:	dc000015 	stw	r16,0(sp)
1000b350:	04040074 	movhi	r16,4097
1000b354:	dc400115 	stw	r17,4(sp)
1000b358:	8415b604 	addi	r16,r16,22232
1000b35c:	2023883a 	mov	r17,r4
1000b360:	2809883a 	mov	r4,r5
1000b364:	300b883a 	mov	r5,r6
1000b368:	380d883a 	mov	r6,r7
1000b36c:	dfc00215 	stw	ra,8(sp)
1000b370:	80000015 	stw	zero,0(r16)
1000b374:	000f2b40 	call	1000f2b4 <lseek>
1000b378:	00ffffc4 	movi	r3,-1
1000b37c:	10c00526 	beq	r2,r3,1000b394 <_lseek_r+0x4c>
1000b380:	dfc00217 	ldw	ra,8(sp)
1000b384:	dc400117 	ldw	r17,4(sp)
1000b388:	dc000017 	ldw	r16,0(sp)
1000b38c:	dec00304 	addi	sp,sp,12
1000b390:	f800283a 	ret
1000b394:	80c00017 	ldw	r3,0(r16)
1000b398:	183ff926 	beq	r3,zero,1000b380 <__alt_data_end+0xf800b380>
1000b39c:	88c00015 	stw	r3,0(r17)
1000b3a0:	003ff706 	br	1000b380 <__alt_data_end+0xf800b380>

1000b3a4 <_read_r>:
1000b3a4:	defffd04 	addi	sp,sp,-12
1000b3a8:	dc000015 	stw	r16,0(sp)
1000b3ac:	04040074 	movhi	r16,4097
1000b3b0:	dc400115 	stw	r17,4(sp)
1000b3b4:	8415b604 	addi	r16,r16,22232
1000b3b8:	2023883a 	mov	r17,r4
1000b3bc:	2809883a 	mov	r4,r5
1000b3c0:	300b883a 	mov	r5,r6
1000b3c4:	380d883a 	mov	r6,r7
1000b3c8:	dfc00215 	stw	ra,8(sp)
1000b3cc:	80000015 	stw	zero,0(r16)
1000b3d0:	000f4980 	call	1000f498 <read>
1000b3d4:	00ffffc4 	movi	r3,-1
1000b3d8:	10c00526 	beq	r2,r3,1000b3f0 <_read_r+0x4c>
1000b3dc:	dfc00217 	ldw	ra,8(sp)
1000b3e0:	dc400117 	ldw	r17,4(sp)
1000b3e4:	dc000017 	ldw	r16,0(sp)
1000b3e8:	dec00304 	addi	sp,sp,12
1000b3ec:	f800283a 	ret
1000b3f0:	80c00017 	ldw	r3,0(r16)
1000b3f4:	183ff926 	beq	r3,zero,1000b3dc <__alt_data_end+0xf800b3dc>
1000b3f8:	88c00015 	stw	r3,0(r17)
1000b3fc:	003ff706 	br	1000b3dc <__alt_data_end+0xf800b3dc>

1000b400 <__swbuf_r>:
1000b400:	defffc04 	addi	sp,sp,-16
1000b404:	dc800215 	stw	r18,8(sp)
1000b408:	dc400115 	stw	r17,4(sp)
1000b40c:	dc000015 	stw	r16,0(sp)
1000b410:	dfc00315 	stw	ra,12(sp)
1000b414:	2025883a 	mov	r18,r4
1000b418:	2823883a 	mov	r17,r5
1000b41c:	3021883a 	mov	r16,r6
1000b420:	20000226 	beq	r4,zero,1000b42c <__swbuf_r+0x2c>
1000b424:	20800e17 	ldw	r2,56(r4)
1000b428:	10004126 	beq	r2,zero,1000b530 <__swbuf_r+0x130>
1000b42c:	80c00617 	ldw	r3,24(r16)
1000b430:	8180030b 	ldhu	r6,12(r16)
1000b434:	80c00215 	stw	r3,8(r16)
1000b438:	30c0020c 	andi	r3,r6,8
1000b43c:	18003526 	beq	r3,zero,1000b514 <__swbuf_r+0x114>
1000b440:	80c00417 	ldw	r3,16(r16)
1000b444:	18003326 	beq	r3,zero,1000b514 <__swbuf_r+0x114>
1000b448:	3088000c 	andi	r2,r6,8192
1000b44c:	8c403fcc 	andi	r17,r17,255
1000b450:	10001726 	beq	r2,zero,1000b4b0 <__swbuf_r+0xb0>
1000b454:	80800017 	ldw	r2,0(r16)
1000b458:	81000517 	ldw	r4,20(r16)
1000b45c:	10c7c83a 	sub	r3,r2,r3
1000b460:	19001d0e 	bge	r3,r4,1000b4d8 <__swbuf_r+0xd8>
1000b464:	18c00044 	addi	r3,r3,1
1000b468:	81400217 	ldw	r5,8(r16)
1000b46c:	11000044 	addi	r4,r2,1
1000b470:	81000015 	stw	r4,0(r16)
1000b474:	297fffc4 	addi	r5,r5,-1
1000b478:	81400215 	stw	r5,8(r16)
1000b47c:	14400005 	stb	r17,0(r2)
1000b480:	80800517 	ldw	r2,20(r16)
1000b484:	10c01d26 	beq	r2,r3,1000b4fc <__swbuf_r+0xfc>
1000b488:	8080030b 	ldhu	r2,12(r16)
1000b48c:	1080004c 	andi	r2,r2,1
1000b490:	1000181e 	bne	r2,zero,1000b4f4 <__swbuf_r+0xf4>
1000b494:	8805883a 	mov	r2,r17
1000b498:	dfc00317 	ldw	ra,12(sp)
1000b49c:	dc800217 	ldw	r18,8(sp)
1000b4a0:	dc400117 	ldw	r17,4(sp)
1000b4a4:	dc000017 	ldw	r16,0(sp)
1000b4a8:	dec00404 	addi	sp,sp,16
1000b4ac:	f800283a 	ret
1000b4b0:	81001917 	ldw	r4,100(r16)
1000b4b4:	00b7ffc4 	movi	r2,-8193
1000b4b8:	31880014 	ori	r6,r6,8192
1000b4bc:	2084703a 	and	r2,r4,r2
1000b4c0:	80801915 	stw	r2,100(r16)
1000b4c4:	80800017 	ldw	r2,0(r16)
1000b4c8:	81000517 	ldw	r4,20(r16)
1000b4cc:	8180030d 	sth	r6,12(r16)
1000b4d0:	10c7c83a 	sub	r3,r2,r3
1000b4d4:	193fe316 	blt	r3,r4,1000b464 <__alt_data_end+0xf800b464>
1000b4d8:	9009883a 	mov	r4,r18
1000b4dc:	800b883a 	mov	r5,r16
1000b4e0:	00061240 	call	10006124 <_fflush_r>
1000b4e4:	1000091e 	bne	r2,zero,1000b50c <__swbuf_r+0x10c>
1000b4e8:	80800017 	ldw	r2,0(r16)
1000b4ec:	00c00044 	movi	r3,1
1000b4f0:	003fdd06 	br	1000b468 <__alt_data_end+0xf800b468>
1000b4f4:	00800284 	movi	r2,10
1000b4f8:	88bfe61e 	bne	r17,r2,1000b494 <__alt_data_end+0xf800b494>
1000b4fc:	9009883a 	mov	r4,r18
1000b500:	800b883a 	mov	r5,r16
1000b504:	00061240 	call	10006124 <_fflush_r>
1000b508:	103fe226 	beq	r2,zero,1000b494 <__alt_data_end+0xf800b494>
1000b50c:	00bfffc4 	movi	r2,-1
1000b510:	003fe106 	br	1000b498 <__alt_data_end+0xf800b498>
1000b514:	9009883a 	mov	r4,r18
1000b518:	800b883a 	mov	r5,r16
1000b51c:	00046a40 	call	100046a4 <__swsetup_r>
1000b520:	1000051e 	bne	r2,zero,1000b538 <__swbuf_r+0x138>
1000b524:	8180030b 	ldhu	r6,12(r16)
1000b528:	80c00417 	ldw	r3,16(r16)
1000b52c:	003fc606 	br	1000b448 <__alt_data_end+0xf800b448>
1000b530:	00066e00 	call	100066e0 <__sinit>
1000b534:	003fbd06 	br	1000b42c <__alt_data_end+0xf800b42c>
1000b538:	80c0030b 	ldhu	r3,12(r16)
1000b53c:	00bfffc4 	movi	r2,-1
1000b540:	18c01014 	ori	r3,r3,64
1000b544:	80c0030d 	sth	r3,12(r16)
1000b548:	00c00244 	movi	r3,9
1000b54c:	90c00015 	stw	r3,0(r18)
1000b550:	003fd106 	br	1000b498 <__alt_data_end+0xf800b498>

1000b554 <__swbuf>:
1000b554:	00c40074 	movhi	r3,4097
1000b558:	18cee504 	addi	r3,r3,15252
1000b55c:	2005883a 	mov	r2,r4
1000b560:	19000017 	ldw	r4,0(r3)
1000b564:	280d883a 	mov	r6,r5
1000b568:	100b883a 	mov	r5,r2
1000b56c:	000b4001 	jmpi	1000b400 <__swbuf_r>

1000b570 <_wcrtomb_r>:
1000b570:	defff604 	addi	sp,sp,-40
1000b574:	00840074 	movhi	r2,4097
1000b578:	dc800815 	stw	r18,32(sp)
1000b57c:	dc400715 	stw	r17,28(sp)
1000b580:	dc000615 	stw	r16,24(sp)
1000b584:	108ee904 	addi	r2,r2,15268
1000b588:	dfc00915 	stw	ra,36(sp)
1000b58c:	2021883a 	mov	r16,r4
1000b590:	3823883a 	mov	r17,r7
1000b594:	14800017 	ldw	r18,0(r2)
1000b598:	28001426 	beq	r5,zero,1000b5ec <_wcrtomb_r+0x7c>
1000b59c:	d9400415 	stw	r5,16(sp)
1000b5a0:	d9800515 	stw	r6,20(sp)
1000b5a4:	00071d40 	call	100071d4 <__locale_charset>
1000b5a8:	d9400417 	ldw	r5,16(sp)
1000b5ac:	d9800517 	ldw	r6,20(sp)
1000b5b0:	8009883a 	mov	r4,r16
1000b5b4:	dc400015 	stw	r17,0(sp)
1000b5b8:	100f883a 	mov	r7,r2
1000b5bc:	903ee83a 	callr	r18
1000b5c0:	00ffffc4 	movi	r3,-1
1000b5c4:	10c0031e 	bne	r2,r3,1000b5d4 <_wcrtomb_r+0x64>
1000b5c8:	88000015 	stw	zero,0(r17)
1000b5cc:	00c02284 	movi	r3,138
1000b5d0:	80c00015 	stw	r3,0(r16)
1000b5d4:	dfc00917 	ldw	ra,36(sp)
1000b5d8:	dc800817 	ldw	r18,32(sp)
1000b5dc:	dc400717 	ldw	r17,28(sp)
1000b5e0:	dc000617 	ldw	r16,24(sp)
1000b5e4:	dec00a04 	addi	sp,sp,40
1000b5e8:	f800283a 	ret
1000b5ec:	00071d40 	call	100071d4 <__locale_charset>
1000b5f0:	8009883a 	mov	r4,r16
1000b5f4:	dc400015 	stw	r17,0(sp)
1000b5f8:	d9400104 	addi	r5,sp,4
1000b5fc:	000d883a 	mov	r6,zero
1000b600:	100f883a 	mov	r7,r2
1000b604:	903ee83a 	callr	r18
1000b608:	003fed06 	br	1000b5c0 <__alt_data_end+0xf800b5c0>

1000b60c <wcrtomb>:
1000b60c:	defff504 	addi	sp,sp,-44
1000b610:	dc400515 	stw	r17,20(sp)
1000b614:	dc000415 	stw	r16,16(sp)
1000b618:	dfc00a15 	stw	ra,40(sp)
1000b61c:	dd400915 	stw	r21,36(sp)
1000b620:	dd000815 	stw	r20,32(sp)
1000b624:	dcc00715 	stw	r19,28(sp)
1000b628:	dc800615 	stw	r18,24(sp)
1000b62c:	2021883a 	mov	r16,r4
1000b630:	3023883a 	mov	r17,r6
1000b634:	20001d26 	beq	r4,zero,1000b6ac <wcrtomb+0xa0>
1000b638:	04840074 	movhi	r18,4097
1000b63c:	948ee504 	addi	r18,r18,15252
1000b640:	00840074 	movhi	r2,4097
1000b644:	95400017 	ldw	r21,0(r18)
1000b648:	108ee904 	addi	r2,r2,15268
1000b64c:	15000017 	ldw	r20,0(r2)
1000b650:	2827883a 	mov	r19,r5
1000b654:	00071d40 	call	100071d4 <__locale_charset>
1000b658:	a809883a 	mov	r4,r21
1000b65c:	dc400015 	stw	r17,0(sp)
1000b660:	800b883a 	mov	r5,r16
1000b664:	980d883a 	mov	r6,r19
1000b668:	100f883a 	mov	r7,r2
1000b66c:	a03ee83a 	callr	r20
1000b670:	00ffffc4 	movi	r3,-1
1000b674:	10c0041e 	bne	r2,r3,1000b688 <wcrtomb+0x7c>
1000b678:	90c00017 	ldw	r3,0(r18)
1000b67c:	01002284 	movi	r4,138
1000b680:	88000015 	stw	zero,0(r17)
1000b684:	19000015 	stw	r4,0(r3)
1000b688:	dfc00a17 	ldw	ra,40(sp)
1000b68c:	dd400917 	ldw	r21,36(sp)
1000b690:	dd000817 	ldw	r20,32(sp)
1000b694:	dcc00717 	ldw	r19,28(sp)
1000b698:	dc800617 	ldw	r18,24(sp)
1000b69c:	dc400517 	ldw	r17,20(sp)
1000b6a0:	dc000417 	ldw	r16,16(sp)
1000b6a4:	dec00b04 	addi	sp,sp,44
1000b6a8:	f800283a 	ret
1000b6ac:	04840074 	movhi	r18,4097
1000b6b0:	948ee504 	addi	r18,r18,15252
1000b6b4:	00840074 	movhi	r2,4097
1000b6b8:	94c00017 	ldw	r19,0(r18)
1000b6bc:	108ee904 	addi	r2,r2,15268
1000b6c0:	14000017 	ldw	r16,0(r2)
1000b6c4:	00071d40 	call	100071d4 <__locale_charset>
1000b6c8:	9809883a 	mov	r4,r19
1000b6cc:	dc400015 	stw	r17,0(sp)
1000b6d0:	d9400104 	addi	r5,sp,4
1000b6d4:	000d883a 	mov	r6,zero
1000b6d8:	100f883a 	mov	r7,r2
1000b6dc:	803ee83a 	callr	r16
1000b6e0:	003fe306 	br	1000b670 <__alt_data_end+0xf800b670>

1000b6e4 <__ascii_wctomb>:
1000b6e4:	28000526 	beq	r5,zero,1000b6fc <__ascii_wctomb+0x18>
1000b6e8:	00803fc4 	movi	r2,255
1000b6ec:	11800536 	bltu	r2,r6,1000b704 <__ascii_wctomb+0x20>
1000b6f0:	29800005 	stb	r6,0(r5)
1000b6f4:	00800044 	movi	r2,1
1000b6f8:	f800283a 	ret
1000b6fc:	0005883a 	mov	r2,zero
1000b700:	f800283a 	ret
1000b704:	00802284 	movi	r2,138
1000b708:	20800015 	stw	r2,0(r4)
1000b70c:	00bfffc4 	movi	r2,-1
1000b710:	f800283a 	ret

1000b714 <_wctomb_r>:
1000b714:	00840074 	movhi	r2,4097
1000b718:	defff904 	addi	sp,sp,-28
1000b71c:	108ee904 	addi	r2,r2,15268
1000b720:	dfc00615 	stw	ra,24(sp)
1000b724:	dc400515 	stw	r17,20(sp)
1000b728:	dc000415 	stw	r16,16(sp)
1000b72c:	3823883a 	mov	r17,r7
1000b730:	14000017 	ldw	r16,0(r2)
1000b734:	d9000115 	stw	r4,4(sp)
1000b738:	d9400215 	stw	r5,8(sp)
1000b73c:	d9800315 	stw	r6,12(sp)
1000b740:	00071d40 	call	100071d4 <__locale_charset>
1000b744:	d9000117 	ldw	r4,4(sp)
1000b748:	d9400217 	ldw	r5,8(sp)
1000b74c:	d9800317 	ldw	r6,12(sp)
1000b750:	dc400015 	stw	r17,0(sp)
1000b754:	100f883a 	mov	r7,r2
1000b758:	803ee83a 	callr	r16
1000b75c:	dfc00617 	ldw	ra,24(sp)
1000b760:	dc400517 	ldw	r17,20(sp)
1000b764:	dc000417 	ldw	r16,16(sp)
1000b768:	dec00704 	addi	sp,sp,28
1000b76c:	f800283a 	ret

1000b770 <__muldi3>:
1000b770:	defff604 	addi	sp,sp,-40
1000b774:	dd800615 	stw	r22,24(sp)
1000b778:	dd400515 	stw	r21,20(sp)
1000b77c:	25bfffcc 	andi	r22,r4,65535
1000b780:	357fffcc 	andi	r21,r6,65535
1000b784:	dc400115 	stw	r17,4(sp)
1000b788:	2022d43a 	srli	r17,r4,16
1000b78c:	dcc00315 	stw	r19,12(sp)
1000b790:	dc800215 	stw	r18,8(sp)
1000b794:	2027883a 	mov	r19,r4
1000b798:	2825883a 	mov	r18,r5
1000b79c:	a809883a 	mov	r4,r21
1000b7a0:	b00b883a 	mov	r5,r22
1000b7a4:	dfc00915 	stw	ra,36(sp)
1000b7a8:	df000815 	stw	fp,32(sp)
1000b7ac:	ddc00715 	stw	r23,28(sp)
1000b7b0:	3839883a 	mov	fp,r7
1000b7b4:	302ed43a 	srli	r23,r6,16
1000b7b8:	dd000415 	stw	r20,16(sp)
1000b7bc:	dc000015 	stw	r16,0(sp)
1000b7c0:	3029883a 	mov	r20,r6
1000b7c4:	000c6040 	call	1000c604 <__mulsi3>
1000b7c8:	a809883a 	mov	r4,r21
1000b7cc:	880b883a 	mov	r5,r17
1000b7d0:	1021883a 	mov	r16,r2
1000b7d4:	000c6040 	call	1000c604 <__mulsi3>
1000b7d8:	880b883a 	mov	r5,r17
1000b7dc:	b809883a 	mov	r4,r23
1000b7e0:	102b883a 	mov	r21,r2
1000b7e4:	000c6040 	call	1000c604 <__mulsi3>
1000b7e8:	b809883a 	mov	r4,r23
1000b7ec:	b00b883a 	mov	r5,r22
1000b7f0:	1023883a 	mov	r17,r2
1000b7f4:	000c6040 	call	1000c604 <__mulsi3>
1000b7f8:	8012d43a 	srli	r9,r16,16
1000b7fc:	a885883a 	add	r2,r21,r2
1000b800:	1251883a 	add	r8,r2,r9
1000b804:	4540022e 	bgeu	r8,r21,1000b810 <__muldi3+0xa0>
1000b808:	00800074 	movhi	r2,1
1000b80c:	88a3883a 	add	r17,r17,r2
1000b810:	4006d43a 	srli	r3,r8,16
1000b814:	4010943a 	slli	r8,r8,16
1000b818:	9809883a 	mov	r4,r19
1000b81c:	e00b883a 	mov	r5,fp
1000b820:	843fffcc 	andi	r16,r16,65535
1000b824:	88e3883a 	add	r17,r17,r3
1000b828:	4421883a 	add	r16,r8,r16
1000b82c:	000c6040 	call	1000c604 <__mulsi3>
1000b830:	a009883a 	mov	r4,r20
1000b834:	900b883a 	mov	r5,r18
1000b838:	1027883a 	mov	r19,r2
1000b83c:	000c6040 	call	1000c604 <__mulsi3>
1000b840:	9885883a 	add	r2,r19,r2
1000b844:	1447883a 	add	r3,r2,r17
1000b848:	8005883a 	mov	r2,r16
1000b84c:	dfc00917 	ldw	ra,36(sp)
1000b850:	df000817 	ldw	fp,32(sp)
1000b854:	ddc00717 	ldw	r23,28(sp)
1000b858:	dd800617 	ldw	r22,24(sp)
1000b85c:	dd400517 	ldw	r21,20(sp)
1000b860:	dd000417 	ldw	r20,16(sp)
1000b864:	dcc00317 	ldw	r19,12(sp)
1000b868:	dc800217 	ldw	r18,8(sp)
1000b86c:	dc400117 	ldw	r17,4(sp)
1000b870:	dc000017 	ldw	r16,0(sp)
1000b874:	dec00a04 	addi	sp,sp,40
1000b878:	f800283a 	ret

1000b87c <__udivdi3>:
1000b87c:	defff504 	addi	sp,sp,-44
1000b880:	dcc00415 	stw	r19,16(sp)
1000b884:	dc000115 	stw	r16,4(sp)
1000b888:	dfc00a15 	stw	ra,40(sp)
1000b88c:	df000915 	stw	fp,36(sp)
1000b890:	ddc00815 	stw	r23,32(sp)
1000b894:	dd800715 	stw	r22,28(sp)
1000b898:	dd400615 	stw	r21,24(sp)
1000b89c:	dd000515 	stw	r20,20(sp)
1000b8a0:	dc800315 	stw	r18,12(sp)
1000b8a4:	dc400215 	stw	r17,8(sp)
1000b8a8:	2027883a 	mov	r19,r4
1000b8ac:	2821883a 	mov	r16,r5
1000b8b0:	3800471e 	bne	r7,zero,1000b9d0 <__udivdi3+0x154>
1000b8b4:	3025883a 	mov	r18,r6
1000b8b8:	2023883a 	mov	r17,r4
1000b8bc:	2980592e 	bgeu	r5,r6,1000ba24 <__udivdi3+0x1a8>
1000b8c0:	00bfffd4 	movui	r2,65535
1000b8c4:	2829883a 	mov	r20,r5
1000b8c8:	1180b236 	bltu	r2,r6,1000bb94 <__udivdi3+0x318>
1000b8cc:	00803fc4 	movi	r2,255
1000b8d0:	1181622e 	bgeu	r2,r6,1000be5c <__udivdi3+0x5e0>
1000b8d4:	00800204 	movi	r2,8
1000b8d8:	1007883a 	mov	r3,r2
1000b8dc:	3084d83a 	srl	r2,r6,r2
1000b8e0:	01040074 	movhi	r4,4097
1000b8e4:	2107ec04 	addi	r4,r4,8112
1000b8e8:	2085883a 	add	r2,r4,r2
1000b8ec:	11000003 	ldbu	r4,0(r2)
1000b8f0:	20c9883a 	add	r4,r4,r3
1000b8f4:	00c00804 	movi	r3,32
1000b8f8:	1907c83a 	sub	r3,r3,r4
1000b8fc:	18000526 	beq	r3,zero,1000b914 <__udivdi3+0x98>
1000b900:	80e0983a 	sll	r16,r16,r3
1000b904:	9908d83a 	srl	r4,r19,r4
1000b908:	30e4983a 	sll	r18,r6,r3
1000b90c:	98e2983a 	sll	r17,r19,r3
1000b910:	8128b03a 	or	r20,r16,r4
1000b914:	902ad43a 	srli	r21,r18,16
1000b918:	a009883a 	mov	r4,r20
1000b91c:	95bfffcc 	andi	r22,r18,65535
1000b920:	a80b883a 	mov	r5,r21
1000b924:	000c5fc0 	call	1000c5fc <__umodsi3>
1000b928:	a009883a 	mov	r4,r20
1000b92c:	a80b883a 	mov	r5,r21
1000b930:	102f883a 	mov	r23,r2
1000b934:	000c5f40 	call	1000c5f4 <__udivsi3>
1000b938:	1009883a 	mov	r4,r2
1000b93c:	b00b883a 	mov	r5,r22
1000b940:	1021883a 	mov	r16,r2
1000b944:	000c6040 	call	1000c604 <__mulsi3>
1000b948:	b82e943a 	slli	r23,r23,16
1000b94c:	8808d43a 	srli	r4,r17,16
1000b950:	b906b03a 	or	r3,r23,r4
1000b954:	1880052e 	bgeu	r3,r2,1000b96c <__udivdi3+0xf0>
1000b958:	1c87883a 	add	r3,r3,r18
1000b95c:	813fffc4 	addi	r4,r16,-1
1000b960:	1c800136 	bltu	r3,r18,1000b968 <__udivdi3+0xec>
1000b964:	18815236 	bltu	r3,r2,1000beb0 <__udivdi3+0x634>
1000b968:	2021883a 	mov	r16,r4
1000b96c:	18a7c83a 	sub	r19,r3,r2
1000b970:	9809883a 	mov	r4,r19
1000b974:	a80b883a 	mov	r5,r21
1000b978:	000c5fc0 	call	1000c5fc <__umodsi3>
1000b97c:	1029883a 	mov	r20,r2
1000b980:	9809883a 	mov	r4,r19
1000b984:	a80b883a 	mov	r5,r21
1000b988:	a028943a 	slli	r20,r20,16
1000b98c:	000c5f40 	call	1000c5f4 <__udivsi3>
1000b990:	1009883a 	mov	r4,r2
1000b994:	b00b883a 	mov	r5,r22
1000b998:	8c7fffcc 	andi	r17,r17,65535
1000b99c:	1027883a 	mov	r19,r2
1000b9a0:	a462b03a 	or	r17,r20,r17
1000b9a4:	000c6040 	call	1000c604 <__mulsi3>
1000b9a8:	8880052e 	bgeu	r17,r2,1000b9c0 <__udivdi3+0x144>
1000b9ac:	8ca3883a 	add	r17,r17,r18
1000b9b0:	98ffffc4 	addi	r3,r19,-1
1000b9b4:	8c811036 	bltu	r17,r18,1000bdf8 <__udivdi3+0x57c>
1000b9b8:	88810f2e 	bgeu	r17,r2,1000bdf8 <__udivdi3+0x57c>
1000b9bc:	9cffff84 	addi	r19,r19,-2
1000b9c0:	8020943a 	slli	r16,r16,16
1000b9c4:	0007883a 	mov	r3,zero
1000b9c8:	9c04b03a 	or	r2,r19,r16
1000b9cc:	00006006 	br	1000bb50 <__udivdi3+0x2d4>
1000b9d0:	29c05d36 	bltu	r5,r7,1000bb48 <__udivdi3+0x2cc>
1000b9d4:	00bfffd4 	movui	r2,65535
1000b9d8:	11c0692e 	bgeu	r2,r7,1000bb80 <__udivdi3+0x304>
1000b9dc:	00804034 	movhi	r2,256
1000b9e0:	10bfffc4 	addi	r2,r2,-1
1000b9e4:	11c10e2e 	bgeu	r2,r7,1000be20 <__udivdi3+0x5a4>
1000b9e8:	01400604 	movi	r5,24
1000b9ec:	2811883a 	mov	r8,r5
1000b9f0:	394ad83a 	srl	r5,r7,r5
1000b9f4:	00840074 	movhi	r2,4097
1000b9f8:	1087ec04 	addi	r2,r2,8112
1000b9fc:	114b883a 	add	r5,r2,r5
1000ba00:	29400003 	ldbu	r5,0(r5)
1000ba04:	00c00804 	movi	r3,32
1000ba08:	2a0b883a 	add	r5,r5,r8
1000ba0c:	196fc83a 	sub	r23,r3,r5
1000ba10:	b8006b1e 	bne	r23,zero,1000bbc0 <__udivdi3+0x344>
1000ba14:	3c011436 	bltu	r7,r16,1000be68 <__udivdi3+0x5ec>
1000ba18:	9985403a 	cmpgeu	r2,r19,r6
1000ba1c:	0007883a 	mov	r3,zero
1000ba20:	00004b06 	br	1000bb50 <__udivdi3+0x2d4>
1000ba24:	3000041e 	bne	r6,zero,1000ba38 <__udivdi3+0x1bc>
1000ba28:	01000044 	movi	r4,1
1000ba2c:	000b883a 	mov	r5,zero
1000ba30:	000c5f40 	call	1000c5f4 <__udivsi3>
1000ba34:	1025883a 	mov	r18,r2
1000ba38:	00bfffd4 	movui	r2,65535
1000ba3c:	14805b2e 	bgeu	r2,r18,1000bbac <__udivdi3+0x330>
1000ba40:	00804034 	movhi	r2,256
1000ba44:	10bfffc4 	addi	r2,r2,-1
1000ba48:	1480fe2e 	bgeu	r2,r18,1000be44 <__udivdi3+0x5c8>
1000ba4c:	00800604 	movi	r2,24
1000ba50:	1007883a 	mov	r3,r2
1000ba54:	9084d83a 	srl	r2,r18,r2
1000ba58:	01040074 	movhi	r4,4097
1000ba5c:	2107ec04 	addi	r4,r4,8112
1000ba60:	2085883a 	add	r2,r4,r2
1000ba64:	11800003 	ldbu	r6,0(r2)
1000ba68:	01c00804 	movi	r7,32
1000ba6c:	30c7883a 	add	r3,r6,r3
1000ba70:	38cfc83a 	sub	r7,r7,r3
1000ba74:	3800a71e 	bne	r7,zero,1000bd14 <__udivdi3+0x498>
1000ba78:	9028d43a 	srli	r20,r18,16
1000ba7c:	84a1c83a 	sub	r16,r16,r18
1000ba80:	957fffcc 	andi	r21,r18,65535
1000ba84:	00c00044 	movi	r3,1
1000ba88:	8009883a 	mov	r4,r16
1000ba8c:	a00b883a 	mov	r5,r20
1000ba90:	d8c00015 	stw	r3,0(sp)
1000ba94:	000c5fc0 	call	1000c5fc <__umodsi3>
1000ba98:	8009883a 	mov	r4,r16
1000ba9c:	a00b883a 	mov	r5,r20
1000baa0:	102d883a 	mov	r22,r2
1000baa4:	000c5f40 	call	1000c5f4 <__udivsi3>
1000baa8:	1009883a 	mov	r4,r2
1000baac:	a80b883a 	mov	r5,r21
1000bab0:	1021883a 	mov	r16,r2
1000bab4:	000c6040 	call	1000c604 <__mulsi3>
1000bab8:	b02c943a 	slli	r22,r22,16
1000babc:	880ed43a 	srli	r7,r17,16
1000bac0:	d8c00017 	ldw	r3,0(sp)
1000bac4:	b1ccb03a 	or	r6,r22,r7
1000bac8:	3080052e 	bgeu	r6,r2,1000bae0 <__udivdi3+0x264>
1000bacc:	348d883a 	add	r6,r6,r18
1000bad0:	813fffc4 	addi	r4,r16,-1
1000bad4:	34800136 	bltu	r6,r18,1000badc <__udivdi3+0x260>
1000bad8:	3080f236 	bltu	r6,r2,1000bea4 <__udivdi3+0x628>
1000badc:	2021883a 	mov	r16,r4
1000bae0:	30a7c83a 	sub	r19,r6,r2
1000bae4:	9809883a 	mov	r4,r19
1000bae8:	a00b883a 	mov	r5,r20
1000baec:	d8c00015 	stw	r3,0(sp)
1000baf0:	000c5fc0 	call	1000c5fc <__umodsi3>
1000baf4:	102d883a 	mov	r22,r2
1000baf8:	9809883a 	mov	r4,r19
1000bafc:	a00b883a 	mov	r5,r20
1000bb00:	b02c943a 	slli	r22,r22,16
1000bb04:	000c5f40 	call	1000c5f4 <__udivsi3>
1000bb08:	1009883a 	mov	r4,r2
1000bb0c:	a80b883a 	mov	r5,r21
1000bb10:	8c7fffcc 	andi	r17,r17,65535
1000bb14:	1027883a 	mov	r19,r2
1000bb18:	b462b03a 	or	r17,r22,r17
1000bb1c:	000c6040 	call	1000c604 <__mulsi3>
1000bb20:	d8c00017 	ldw	r3,0(sp)
1000bb24:	8880052e 	bgeu	r17,r2,1000bb3c <__udivdi3+0x2c0>
1000bb28:	8ca3883a 	add	r17,r17,r18
1000bb2c:	993fffc4 	addi	r4,r19,-1
1000bb30:	8c80af36 	bltu	r17,r18,1000bdf0 <__udivdi3+0x574>
1000bb34:	8880ae2e 	bgeu	r17,r2,1000bdf0 <__udivdi3+0x574>
1000bb38:	9cffff84 	addi	r19,r19,-2
1000bb3c:	8020943a 	slli	r16,r16,16
1000bb40:	9c04b03a 	or	r2,r19,r16
1000bb44:	00000206 	br	1000bb50 <__udivdi3+0x2d4>
1000bb48:	0007883a 	mov	r3,zero
1000bb4c:	0005883a 	mov	r2,zero
1000bb50:	dfc00a17 	ldw	ra,40(sp)
1000bb54:	df000917 	ldw	fp,36(sp)
1000bb58:	ddc00817 	ldw	r23,32(sp)
1000bb5c:	dd800717 	ldw	r22,28(sp)
1000bb60:	dd400617 	ldw	r21,24(sp)
1000bb64:	dd000517 	ldw	r20,20(sp)
1000bb68:	dcc00417 	ldw	r19,16(sp)
1000bb6c:	dc800317 	ldw	r18,12(sp)
1000bb70:	dc400217 	ldw	r17,8(sp)
1000bb74:	dc000117 	ldw	r16,4(sp)
1000bb78:	dec00b04 	addi	sp,sp,44
1000bb7c:	f800283a 	ret
1000bb80:	00803fc4 	movi	r2,255
1000bb84:	11c0a92e 	bgeu	r2,r7,1000be2c <__udivdi3+0x5b0>
1000bb88:	01400204 	movi	r5,8
1000bb8c:	2811883a 	mov	r8,r5
1000bb90:	003f9706 	br	1000b9f0 <__alt_data_end+0xf800b9f0>
1000bb94:	00804034 	movhi	r2,256
1000bb98:	10bfffc4 	addi	r2,r2,-1
1000bb9c:	1180a62e 	bgeu	r2,r6,1000be38 <__udivdi3+0x5bc>
1000bba0:	00800604 	movi	r2,24
1000bba4:	1007883a 	mov	r3,r2
1000bba8:	003f4c06 	br	1000b8dc <__alt_data_end+0xf800b8dc>
1000bbac:	00803fc4 	movi	r2,255
1000bbb0:	1480a72e 	bgeu	r2,r18,1000be50 <__udivdi3+0x5d4>
1000bbb4:	00800204 	movi	r2,8
1000bbb8:	1007883a 	mov	r3,r2
1000bbbc:	003fa506 	br	1000ba54 <__alt_data_end+0xf800ba54>
1000bbc0:	3178d83a 	srl	fp,r6,r5
1000bbc4:	3dce983a 	sll	r7,r7,r23
1000bbc8:	8168d83a 	srl	r20,r16,r5
1000bbcc:	9950d83a 	srl	r8,r19,r5
1000bbd0:	3f38b03a 	or	fp,r7,fp
1000bbd4:	e024d43a 	srli	r18,fp,16
1000bbd8:	85e0983a 	sll	r16,r16,r23
1000bbdc:	a009883a 	mov	r4,r20
1000bbe0:	900b883a 	mov	r5,r18
1000bbe4:	8220b03a 	or	r16,r16,r8
1000bbe8:	35ea983a 	sll	r21,r6,r23
1000bbec:	000c5fc0 	call	1000c5fc <__umodsi3>
1000bbf0:	a009883a 	mov	r4,r20
1000bbf4:	900b883a 	mov	r5,r18
1000bbf8:	1023883a 	mov	r17,r2
1000bbfc:	e5bfffcc 	andi	r22,fp,65535
1000bc00:	000c5f40 	call	1000c5f4 <__udivsi3>
1000bc04:	1009883a 	mov	r4,r2
1000bc08:	b00b883a 	mov	r5,r22
1000bc0c:	1029883a 	mov	r20,r2
1000bc10:	000c6040 	call	1000c604 <__mulsi3>
1000bc14:	8806943a 	slli	r3,r17,16
1000bc18:	8014d43a 	srli	r10,r16,16
1000bc1c:	1a92b03a 	or	r9,r3,r10
1000bc20:	4880042e 	bgeu	r9,r2,1000bc34 <__udivdi3+0x3b8>
1000bc24:	4f13883a 	add	r9,r9,fp
1000bc28:	a0ffffc4 	addi	r3,r20,-1
1000bc2c:	4f00952e 	bgeu	r9,fp,1000be84 <__udivdi3+0x608>
1000bc30:	1829883a 	mov	r20,r3
1000bc34:	48a3c83a 	sub	r17,r9,r2
1000bc38:	8809883a 	mov	r4,r17
1000bc3c:	900b883a 	mov	r5,r18
1000bc40:	000c5fc0 	call	1000c5fc <__umodsi3>
1000bc44:	8809883a 	mov	r4,r17
1000bc48:	900b883a 	mov	r5,r18
1000bc4c:	d8800015 	stw	r2,0(sp)
1000bc50:	000c5f40 	call	1000c5f4 <__udivsi3>
1000bc54:	1009883a 	mov	r4,r2
1000bc58:	b00b883a 	mov	r5,r22
1000bc5c:	1023883a 	mov	r17,r2
1000bc60:	000c6040 	call	1000c604 <__mulsi3>
1000bc64:	d8c00017 	ldw	r3,0(sp)
1000bc68:	823fffcc 	andi	r8,r16,65535
1000bc6c:	1806943a 	slli	r3,r3,16
1000bc70:	1a20b03a 	or	r16,r3,r8
1000bc74:	8080042e 	bgeu	r16,r2,1000bc88 <__udivdi3+0x40c>
1000bc78:	8721883a 	add	r16,r16,fp
1000bc7c:	88ffffc4 	addi	r3,r17,-1
1000bc80:	87007c2e 	bgeu	r16,fp,1000be74 <__udivdi3+0x5f8>
1000bc84:	1823883a 	mov	r17,r3
1000bc88:	a028943a 	slli	r20,r20,16
1000bc8c:	acbfffcc 	andi	r18,r21,65535
1000bc90:	900b883a 	mov	r5,r18
1000bc94:	8d28b03a 	or	r20,r17,r20
1000bc98:	a022d43a 	srli	r17,r20,16
1000bc9c:	a5bfffcc 	andi	r22,r20,65535
1000bca0:	b009883a 	mov	r4,r22
1000bca4:	a82ad43a 	srli	r21,r21,16
1000bca8:	80a1c83a 	sub	r16,r16,r2
1000bcac:	000c6040 	call	1000c604 <__mulsi3>
1000bcb0:	8809883a 	mov	r4,r17
1000bcb4:	900b883a 	mov	r5,r18
1000bcb8:	1039883a 	mov	fp,r2
1000bcbc:	000c6040 	call	1000c604 <__mulsi3>
1000bcc0:	8809883a 	mov	r4,r17
1000bcc4:	a80b883a 	mov	r5,r21
1000bcc8:	1025883a 	mov	r18,r2
1000bccc:	000c6040 	call	1000c604 <__mulsi3>
1000bcd0:	b009883a 	mov	r4,r22
1000bcd4:	a80b883a 	mov	r5,r21
1000bcd8:	1023883a 	mov	r17,r2
1000bcdc:	000c6040 	call	1000c604 <__mulsi3>
1000bce0:	e006d43a 	srli	r3,fp,16
1000bce4:	9085883a 	add	r2,r18,r2
1000bce8:	10c7883a 	add	r3,r2,r3
1000bcec:	1c80022e 	bgeu	r3,r18,1000bcf8 <__udivdi3+0x47c>
1000bcf0:	00800074 	movhi	r2,1
1000bcf4:	88a3883a 	add	r17,r17,r2
1000bcf8:	1808d43a 	srli	r4,r3,16
1000bcfc:	8909883a 	add	r4,r17,r4
1000bd00:	81004436 	bltu	r16,r4,1000be14 <__udivdi3+0x598>
1000bd04:	81003e26 	beq	r16,r4,1000be00 <__udivdi3+0x584>
1000bd08:	a005883a 	mov	r2,r20
1000bd0c:	0007883a 	mov	r3,zero
1000bd10:	003f8f06 	br	1000bb50 <__alt_data_end+0xf800bb50>
1000bd14:	91e4983a 	sll	r18,r18,r7
1000bd18:	80eed83a 	srl	r23,r16,r3
1000bd1c:	81cc983a 	sll	r6,r16,r7
1000bd20:	9028d43a 	srli	r20,r18,16
1000bd24:	98c6d83a 	srl	r3,r19,r3
1000bd28:	b809883a 	mov	r4,r23
1000bd2c:	a00b883a 	mov	r5,r20
1000bd30:	30ecb03a 	or	r22,r6,r3
1000bd34:	99e2983a 	sll	r17,r19,r7
1000bd38:	000c5fc0 	call	1000c5fc <__umodsi3>
1000bd3c:	b809883a 	mov	r4,r23
1000bd40:	a00b883a 	mov	r5,r20
1000bd44:	1021883a 	mov	r16,r2
1000bd48:	957fffcc 	andi	r21,r18,65535
1000bd4c:	000c5f40 	call	1000c5f4 <__udivsi3>
1000bd50:	a80b883a 	mov	r5,r21
1000bd54:	1009883a 	mov	r4,r2
1000bd58:	102f883a 	mov	r23,r2
1000bd5c:	000c6040 	call	1000c604 <__mulsi3>
1000bd60:	8020943a 	slli	r16,r16,16
1000bd64:	b00ad43a 	srli	r5,r22,16
1000bd68:	814cb03a 	or	r6,r16,r5
1000bd6c:	3080062e 	bgeu	r6,r2,1000bd88 <__udivdi3+0x50c>
1000bd70:	348d883a 	add	r6,r6,r18
1000bd74:	b8ffffc4 	addi	r3,r23,-1
1000bd78:	34804836 	bltu	r6,r18,1000be9c <__udivdi3+0x620>
1000bd7c:	3080472e 	bgeu	r6,r2,1000be9c <__udivdi3+0x620>
1000bd80:	bdffff84 	addi	r23,r23,-2
1000bd84:	348d883a 	add	r6,r6,r18
1000bd88:	30a7c83a 	sub	r19,r6,r2
1000bd8c:	9809883a 	mov	r4,r19
1000bd90:	a00b883a 	mov	r5,r20
1000bd94:	000c5fc0 	call	1000c5fc <__umodsi3>
1000bd98:	9809883a 	mov	r4,r19
1000bd9c:	a00b883a 	mov	r5,r20
1000bda0:	1039883a 	mov	fp,r2
1000bda4:	000c5f40 	call	1000c5f4 <__udivsi3>
1000bda8:	1009883a 	mov	r4,r2
1000bdac:	a80b883a 	mov	r5,r21
1000bdb0:	e038943a 	slli	fp,fp,16
1000bdb4:	1027883a 	mov	r19,r2
1000bdb8:	000c6040 	call	1000c604 <__mulsi3>
1000bdbc:	b1bfffcc 	andi	r6,r22,65535
1000bdc0:	e18cb03a 	or	r6,fp,r6
1000bdc4:	3080062e 	bgeu	r6,r2,1000bde0 <__udivdi3+0x564>
1000bdc8:	348d883a 	add	r6,r6,r18
1000bdcc:	98ffffc4 	addi	r3,r19,-1
1000bdd0:	34803036 	bltu	r6,r18,1000be94 <__udivdi3+0x618>
1000bdd4:	30802f2e 	bgeu	r6,r2,1000be94 <__udivdi3+0x618>
1000bdd8:	9cffff84 	addi	r19,r19,-2
1000bddc:	348d883a 	add	r6,r6,r18
1000bde0:	b82e943a 	slli	r23,r23,16
1000bde4:	30a1c83a 	sub	r16,r6,r2
1000bde8:	9dc6b03a 	or	r3,r19,r23
1000bdec:	003f2606 	br	1000ba88 <__alt_data_end+0xf800ba88>
1000bdf0:	2027883a 	mov	r19,r4
1000bdf4:	003f5106 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000bdf8:	1827883a 	mov	r19,r3
1000bdfc:	003ef006 	br	1000b9c0 <__alt_data_end+0xf800b9c0>
1000be00:	1808943a 	slli	r4,r3,16
1000be04:	9dc6983a 	sll	r3,r19,r23
1000be08:	e73fffcc 	andi	fp,fp,65535
1000be0c:	2709883a 	add	r4,r4,fp
1000be10:	193fbd2e 	bgeu	r3,r4,1000bd08 <__alt_data_end+0xf800bd08>
1000be14:	a0bfffc4 	addi	r2,r20,-1
1000be18:	0007883a 	mov	r3,zero
1000be1c:	003f4c06 	br	1000bb50 <__alt_data_end+0xf800bb50>
1000be20:	01400404 	movi	r5,16
1000be24:	2811883a 	mov	r8,r5
1000be28:	003ef106 	br	1000b9f0 <__alt_data_end+0xf800b9f0>
1000be2c:	000b883a 	mov	r5,zero
1000be30:	0011883a 	mov	r8,zero
1000be34:	003eee06 	br	1000b9f0 <__alt_data_end+0xf800b9f0>
1000be38:	00800404 	movi	r2,16
1000be3c:	1007883a 	mov	r3,r2
1000be40:	003ea606 	br	1000b8dc <__alt_data_end+0xf800b8dc>
1000be44:	00800404 	movi	r2,16
1000be48:	1007883a 	mov	r3,r2
1000be4c:	003f0106 	br	1000ba54 <__alt_data_end+0xf800ba54>
1000be50:	0005883a 	mov	r2,zero
1000be54:	0007883a 	mov	r3,zero
1000be58:	003efe06 	br	1000ba54 <__alt_data_end+0xf800ba54>
1000be5c:	0005883a 	mov	r2,zero
1000be60:	0007883a 	mov	r3,zero
1000be64:	003e9d06 	br	1000b8dc <__alt_data_end+0xf800b8dc>
1000be68:	0007883a 	mov	r3,zero
1000be6c:	00800044 	movi	r2,1
1000be70:	003f3706 	br	1000bb50 <__alt_data_end+0xf800bb50>
1000be74:	80bf832e 	bgeu	r16,r2,1000bc84 <__alt_data_end+0xf800bc84>
1000be78:	8c7fff84 	addi	r17,r17,-2
1000be7c:	8721883a 	add	r16,r16,fp
1000be80:	003f8106 	br	1000bc88 <__alt_data_end+0xf800bc88>
1000be84:	48bf6a2e 	bgeu	r9,r2,1000bc30 <__alt_data_end+0xf800bc30>
1000be88:	a53fff84 	addi	r20,r20,-2
1000be8c:	4f13883a 	add	r9,r9,fp
1000be90:	003f6806 	br	1000bc34 <__alt_data_end+0xf800bc34>
1000be94:	1827883a 	mov	r19,r3
1000be98:	003fd106 	br	1000bde0 <__alt_data_end+0xf800bde0>
1000be9c:	182f883a 	mov	r23,r3
1000bea0:	003fb906 	br	1000bd88 <__alt_data_end+0xf800bd88>
1000bea4:	843fff84 	addi	r16,r16,-2
1000bea8:	348d883a 	add	r6,r6,r18
1000beac:	003f0c06 	br	1000bae0 <__alt_data_end+0xf800bae0>
1000beb0:	843fff84 	addi	r16,r16,-2
1000beb4:	1c87883a 	add	r3,r3,r18
1000beb8:	003eac06 	br	1000b96c <__alt_data_end+0xf800b96c>

1000bebc <__umoddi3>:
1000bebc:	defff404 	addi	sp,sp,-48
1000bec0:	dd800815 	stw	r22,32(sp)
1000bec4:	dc400315 	stw	r17,12(sp)
1000bec8:	dc000215 	stw	r16,8(sp)
1000becc:	dfc00b15 	stw	ra,44(sp)
1000bed0:	df000a15 	stw	fp,40(sp)
1000bed4:	ddc00915 	stw	r23,36(sp)
1000bed8:	dd400715 	stw	r21,28(sp)
1000bedc:	dd000615 	stw	r20,24(sp)
1000bee0:	dcc00515 	stw	r19,20(sp)
1000bee4:	dc800415 	stw	r18,16(sp)
1000bee8:	2021883a 	mov	r16,r4
1000beec:	2823883a 	mov	r17,r5
1000bef0:	282d883a 	mov	r22,r5
1000bef4:	38003c1e 	bne	r7,zero,1000bfe8 <__umoddi3+0x12c>
1000bef8:	3027883a 	mov	r19,r6
1000befc:	2029883a 	mov	r20,r4
1000bf00:	2980522e 	bgeu	r5,r6,1000c04c <__umoddi3+0x190>
1000bf04:	00bfffd4 	movui	r2,65535
1000bf08:	1180a436 	bltu	r2,r6,1000c19c <__umoddi3+0x2e0>
1000bf0c:	00803fc4 	movi	r2,255
1000bf10:	11815e2e 	bgeu	r2,r6,1000c48c <__umoddi3+0x5d0>
1000bf14:	01400204 	movi	r5,8
1000bf18:	2805883a 	mov	r2,r5
1000bf1c:	314ad83a 	srl	r5,r6,r5
1000bf20:	00c40074 	movhi	r3,4097
1000bf24:	18c7ec04 	addi	r3,r3,8112
1000bf28:	194b883a 	add	r5,r3,r5
1000bf2c:	29000003 	ldbu	r4,0(r5)
1000bf30:	2089883a 	add	r4,r4,r2
1000bf34:	00800804 	movi	r2,32
1000bf38:	1105c83a 	sub	r2,r2,r4
1000bf3c:	10010c26 	beq	r2,zero,1000c370 <__umoddi3+0x4b4>
1000bf40:	88a2983a 	sll	r17,r17,r2
1000bf44:	8108d83a 	srl	r4,r16,r4
1000bf48:	30a6983a 	sll	r19,r6,r2
1000bf4c:	80a8983a 	sll	r20,r16,r2
1000bf50:	1025883a 	mov	r18,r2
1000bf54:	892cb03a 	or	r22,r17,r4
1000bf58:	9822d43a 	srli	r17,r19,16
1000bf5c:	b009883a 	mov	r4,r22
1000bf60:	9d7fffcc 	andi	r21,r19,65535
1000bf64:	880b883a 	mov	r5,r17
1000bf68:	000c5fc0 	call	1000c5fc <__umodsi3>
1000bf6c:	b009883a 	mov	r4,r22
1000bf70:	880b883a 	mov	r5,r17
1000bf74:	102f883a 	mov	r23,r2
1000bf78:	000c5f40 	call	1000c5f4 <__udivsi3>
1000bf7c:	1009883a 	mov	r4,r2
1000bf80:	a80b883a 	mov	r5,r21
1000bf84:	000c6040 	call	1000c604 <__mulsi3>
1000bf88:	b82e943a 	slli	r23,r23,16
1000bf8c:	a008d43a 	srli	r4,r20,16
1000bf90:	b906b03a 	or	r3,r23,r4
1000bf94:	1880042e 	bgeu	r3,r2,1000bfa8 <__umoddi3+0xec>
1000bf98:	1cc7883a 	add	r3,r3,r19
1000bf9c:	1cc00236 	bltu	r3,r19,1000bfa8 <__umoddi3+0xec>
1000bfa0:	1880012e 	bgeu	r3,r2,1000bfa8 <__umoddi3+0xec>
1000bfa4:	1cc7883a 	add	r3,r3,r19
1000bfa8:	18a1c83a 	sub	r16,r3,r2
1000bfac:	8009883a 	mov	r4,r16
1000bfb0:	880b883a 	mov	r5,r17
1000bfb4:	000c5fc0 	call	1000c5fc <__umodsi3>
1000bfb8:	8009883a 	mov	r4,r16
1000bfbc:	880b883a 	mov	r5,r17
1000bfc0:	102d883a 	mov	r22,r2
1000bfc4:	000c5f40 	call	1000c5f4 <__udivsi3>
1000bfc8:	1009883a 	mov	r4,r2
1000bfcc:	a80b883a 	mov	r5,r21
1000bfd0:	b02c943a 	slli	r22,r22,16
1000bfd4:	000c6040 	call	1000c604 <__mulsi3>
1000bfd8:	a13fffcc 	andi	r4,r20,65535
1000bfdc:	b106b03a 	or	r3,r22,r4
1000bfe0:	1880572e 	bgeu	r3,r2,1000c140 <__umoddi3+0x284>
1000bfe4:	00005206 	br	1000c130 <__umoddi3+0x274>
1000bfe8:	29c05936 	bltu	r5,r7,1000c150 <__umoddi3+0x294>
1000bfec:	00bfffd4 	movui	r2,65535
1000bff0:	11c0652e 	bgeu	r2,r7,1000c188 <__umoddi3+0x2cc>
1000bff4:	00804034 	movhi	r2,256
1000bff8:	10bfffc4 	addi	r2,r2,-1
1000bffc:	11c1172e 	bgeu	r2,r7,1000c45c <__umoddi3+0x5a0>
1000c000:	01400604 	movi	r5,24
1000c004:	282b883a 	mov	r21,r5
1000c008:	394ad83a 	srl	r5,r7,r5
1000c00c:	00c40074 	movhi	r3,4097
1000c010:	18c7ec04 	addi	r3,r3,8112
1000c014:	194b883a 	add	r5,r3,r5
1000c018:	28800003 	ldbu	r2,0(r5)
1000c01c:	00c00804 	movi	r3,32
1000c020:	156b883a 	add	r21,r2,r21
1000c024:	1d69c83a 	sub	r20,r3,r21
1000c028:	a000671e 	bne	r20,zero,1000c1c8 <__umoddi3+0x30c>
1000c02c:	3c400136 	bltu	r7,r17,1000c034 <__umoddi3+0x178>
1000c030:	81812336 	bltu	r16,r6,1000c4c0 <__umoddi3+0x604>
1000c034:	8185c83a 	sub	r2,r16,r6
1000c038:	89e3c83a 	sub	r17,r17,r7
1000c03c:	8087803a 	cmpltu	r3,r16,r2
1000c040:	88edc83a 	sub	r22,r17,r3
1000c044:	b007883a 	mov	r3,r22
1000c048:	00004306 	br	1000c158 <__umoddi3+0x29c>
1000c04c:	3000041e 	bne	r6,zero,1000c060 <__umoddi3+0x1a4>
1000c050:	01000044 	movi	r4,1
1000c054:	000b883a 	mov	r5,zero
1000c058:	000c5f40 	call	1000c5f4 <__udivsi3>
1000c05c:	1027883a 	mov	r19,r2
1000c060:	00bfffd4 	movui	r2,65535
1000c064:	14c0532e 	bgeu	r2,r19,1000c1b4 <__umoddi3+0x2f8>
1000c068:	00804034 	movhi	r2,256
1000c06c:	10bfffc4 	addi	r2,r2,-1
1000c070:	14c1032e 	bgeu	r2,r19,1000c480 <__umoddi3+0x5c4>
1000c074:	00800604 	movi	r2,24
1000c078:	1007883a 	mov	r3,r2
1000c07c:	9884d83a 	srl	r2,r19,r2
1000c080:	01040074 	movhi	r4,4097
1000c084:	2107ec04 	addi	r4,r4,8112
1000c088:	2085883a 	add	r2,r4,r2
1000c08c:	11000003 	ldbu	r4,0(r2)
1000c090:	00800804 	movi	r2,32
1000c094:	20c7883a 	add	r3,r4,r3
1000c098:	10c5c83a 	sub	r2,r2,r3
1000c09c:	1000b61e 	bne	r2,zero,1000c378 <__umoddi3+0x4bc>
1000c0a0:	982ad43a 	srli	r21,r19,16
1000c0a4:	8ce3c83a 	sub	r17,r17,r19
1000c0a8:	9dbfffcc 	andi	r22,r19,65535
1000c0ac:	0025883a 	mov	r18,zero
1000c0b0:	8809883a 	mov	r4,r17
1000c0b4:	a80b883a 	mov	r5,r21
1000c0b8:	000c5fc0 	call	1000c5fc <__umodsi3>
1000c0bc:	8809883a 	mov	r4,r17
1000c0c0:	a80b883a 	mov	r5,r21
1000c0c4:	102f883a 	mov	r23,r2
1000c0c8:	000c5f40 	call	1000c5f4 <__udivsi3>
1000c0cc:	1009883a 	mov	r4,r2
1000c0d0:	b00b883a 	mov	r5,r22
1000c0d4:	000c6040 	call	1000c604 <__mulsi3>
1000c0d8:	b82e943a 	slli	r23,r23,16
1000c0dc:	a008d43a 	srli	r4,r20,16
1000c0e0:	b906b03a 	or	r3,r23,r4
1000c0e4:	1880032e 	bgeu	r3,r2,1000c0f4 <__umoddi3+0x238>
1000c0e8:	1cc7883a 	add	r3,r3,r19
1000c0ec:	1cc00136 	bltu	r3,r19,1000c0f4 <__umoddi3+0x238>
1000c0f0:	1880f136 	bltu	r3,r2,1000c4b8 <__umoddi3+0x5fc>
1000c0f4:	18a1c83a 	sub	r16,r3,r2
1000c0f8:	8009883a 	mov	r4,r16
1000c0fc:	a80b883a 	mov	r5,r21
1000c100:	000c5fc0 	call	1000c5fc <__umodsi3>
1000c104:	8009883a 	mov	r4,r16
1000c108:	a80b883a 	mov	r5,r21
1000c10c:	1023883a 	mov	r17,r2
1000c110:	000c5f40 	call	1000c5f4 <__udivsi3>
1000c114:	1009883a 	mov	r4,r2
1000c118:	b00b883a 	mov	r5,r22
1000c11c:	8822943a 	slli	r17,r17,16
1000c120:	000c6040 	call	1000c604 <__mulsi3>
1000c124:	a13fffcc 	andi	r4,r20,65535
1000c128:	8906b03a 	or	r3,r17,r4
1000c12c:	1880042e 	bgeu	r3,r2,1000c140 <__umoddi3+0x284>
1000c130:	1cc7883a 	add	r3,r3,r19
1000c134:	1cc00236 	bltu	r3,r19,1000c140 <__umoddi3+0x284>
1000c138:	1880012e 	bgeu	r3,r2,1000c140 <__umoddi3+0x284>
1000c13c:	1cc7883a 	add	r3,r3,r19
1000c140:	1887c83a 	sub	r3,r3,r2
1000c144:	1c84d83a 	srl	r2,r3,r18
1000c148:	0007883a 	mov	r3,zero
1000c14c:	00000206 	br	1000c158 <__umoddi3+0x29c>
1000c150:	2005883a 	mov	r2,r4
1000c154:	2807883a 	mov	r3,r5
1000c158:	dfc00b17 	ldw	ra,44(sp)
1000c15c:	df000a17 	ldw	fp,40(sp)
1000c160:	ddc00917 	ldw	r23,36(sp)
1000c164:	dd800817 	ldw	r22,32(sp)
1000c168:	dd400717 	ldw	r21,28(sp)
1000c16c:	dd000617 	ldw	r20,24(sp)
1000c170:	dcc00517 	ldw	r19,20(sp)
1000c174:	dc800417 	ldw	r18,16(sp)
1000c178:	dc400317 	ldw	r17,12(sp)
1000c17c:	dc000217 	ldw	r16,8(sp)
1000c180:	dec00c04 	addi	sp,sp,48
1000c184:	f800283a 	ret
1000c188:	00803fc4 	movi	r2,255
1000c18c:	11c0b02e 	bgeu	r2,r7,1000c450 <__umoddi3+0x594>
1000c190:	01400204 	movi	r5,8
1000c194:	282b883a 	mov	r21,r5
1000c198:	003f9b06 	br	1000c008 <__alt_data_end+0xf800c008>
1000c19c:	00804034 	movhi	r2,256
1000c1a0:	10bfffc4 	addi	r2,r2,-1
1000c1a4:	1180b02e 	bgeu	r2,r6,1000c468 <__umoddi3+0x5ac>
1000c1a8:	01400604 	movi	r5,24
1000c1ac:	2805883a 	mov	r2,r5
1000c1b0:	003f5a06 	br	1000bf1c <__alt_data_end+0xf800bf1c>
1000c1b4:	00803fc4 	movi	r2,255
1000c1b8:	14c0ae2e 	bgeu	r2,r19,1000c474 <__umoddi3+0x5b8>
1000c1bc:	00800204 	movi	r2,8
1000c1c0:	1007883a 	mov	r3,r2
1000c1c4:	003fad06 	br	1000c07c <__alt_data_end+0xf800c07c>
1000c1c8:	3d0a983a 	sll	r5,r7,r20
1000c1cc:	356cd83a 	srl	r22,r6,r21
1000c1d0:	8d78d83a 	srl	fp,r17,r21
1000c1d4:	8d10983a 	sll	r8,r17,r20
1000c1d8:	2dacb03a 	or	r22,r5,r22
1000c1dc:	b02ed43a 	srli	r23,r22,16
1000c1e0:	8564d83a 	srl	r18,r16,r21
1000c1e4:	e009883a 	mov	r4,fp
1000c1e8:	b80b883a 	mov	r5,r23
1000c1ec:	44a4b03a 	or	r18,r8,r18
1000c1f0:	3526983a 	sll	r19,r6,r20
1000c1f4:	000c5fc0 	call	1000c5fc <__umodsi3>
1000c1f8:	e009883a 	mov	r4,fp
1000c1fc:	b80b883a 	mov	r5,r23
1000c200:	b47fffcc 	andi	r17,r22,65535
1000c204:	d8800015 	stw	r2,0(sp)
1000c208:	000c5f40 	call	1000c5f4 <__udivsi3>
1000c20c:	1009883a 	mov	r4,r2
1000c210:	880b883a 	mov	r5,r17
1000c214:	1039883a 	mov	fp,r2
1000c218:	000c6040 	call	1000c604 <__mulsi3>
1000c21c:	d9800017 	ldw	r6,0(sp)
1000c220:	9008d43a 	srli	r4,r18,16
1000c224:	8520983a 	sll	r16,r16,r20
1000c228:	300c943a 	slli	r6,r6,16
1000c22c:	3106b03a 	or	r3,r6,r4
1000c230:	1880042e 	bgeu	r3,r2,1000c244 <__umoddi3+0x388>
1000c234:	1d87883a 	add	r3,r3,r22
1000c238:	e13fffc4 	addi	r4,fp,-1
1000c23c:	1d809a2e 	bgeu	r3,r22,1000c4a8 <__umoddi3+0x5ec>
1000c240:	2039883a 	mov	fp,r4
1000c244:	1887c83a 	sub	r3,r3,r2
1000c248:	1809883a 	mov	r4,r3
1000c24c:	b80b883a 	mov	r5,r23
1000c250:	d8c00115 	stw	r3,4(sp)
1000c254:	000c5fc0 	call	1000c5fc <__umodsi3>
1000c258:	d8c00117 	ldw	r3,4(sp)
1000c25c:	b80b883a 	mov	r5,r23
1000c260:	d8800015 	stw	r2,0(sp)
1000c264:	1809883a 	mov	r4,r3
1000c268:	000c5f40 	call	1000c5f4 <__udivsi3>
1000c26c:	880b883a 	mov	r5,r17
1000c270:	1009883a 	mov	r4,r2
1000c274:	102f883a 	mov	r23,r2
1000c278:	000c6040 	call	1000c604 <__mulsi3>
1000c27c:	d9800017 	ldw	r6,0(sp)
1000c280:	947fffcc 	andi	r17,r18,65535
1000c284:	300c943a 	slli	r6,r6,16
1000c288:	3464b03a 	or	r18,r6,r17
1000c28c:	9080042e 	bgeu	r18,r2,1000c2a0 <__umoddi3+0x3e4>
1000c290:	95a5883a 	add	r18,r18,r22
1000c294:	b8ffffc4 	addi	r3,r23,-1
1000c298:	95807f2e 	bgeu	r18,r22,1000c498 <__umoddi3+0x5dc>
1000c29c:	182f883a 	mov	r23,r3
1000c2a0:	e038943a 	slli	fp,fp,16
1000c2a4:	980cd43a 	srli	r6,r19,16
1000c2a8:	98ffffcc 	andi	r3,r19,65535
1000c2ac:	bf38b03a 	or	fp,r23,fp
1000c2b0:	e02ed43a 	srli	r23,fp,16
1000c2b4:	e73fffcc 	andi	fp,fp,65535
1000c2b8:	180b883a 	mov	r5,r3
1000c2bc:	e009883a 	mov	r4,fp
1000c2c0:	d9800015 	stw	r6,0(sp)
1000c2c4:	d8c00115 	stw	r3,4(sp)
1000c2c8:	90a5c83a 	sub	r18,r18,r2
1000c2cc:	000c6040 	call	1000c604 <__mulsi3>
1000c2d0:	d8c00117 	ldw	r3,4(sp)
1000c2d4:	b809883a 	mov	r4,r23
1000c2d8:	1023883a 	mov	r17,r2
1000c2dc:	180b883a 	mov	r5,r3
1000c2e0:	000c6040 	call	1000c604 <__mulsi3>
1000c2e4:	d9800017 	ldw	r6,0(sp)
1000c2e8:	b809883a 	mov	r4,r23
1000c2ec:	d8800115 	stw	r2,4(sp)
1000c2f0:	300b883a 	mov	r5,r6
1000c2f4:	302f883a 	mov	r23,r6
1000c2f8:	000c6040 	call	1000c604 <__mulsi3>
1000c2fc:	e009883a 	mov	r4,fp
1000c300:	b80b883a 	mov	r5,r23
1000c304:	d8800015 	stw	r2,0(sp)
1000c308:	000c6040 	call	1000c604 <__mulsi3>
1000c30c:	d8c00117 	ldw	r3,4(sp)
1000c310:	880cd43a 	srli	r6,r17,16
1000c314:	d9c00017 	ldw	r7,0(sp)
1000c318:	1885883a 	add	r2,r3,r2
1000c31c:	118d883a 	add	r6,r2,r6
1000c320:	30c0022e 	bgeu	r6,r3,1000c32c <__umoddi3+0x470>
1000c324:	00800074 	movhi	r2,1
1000c328:	388f883a 	add	r7,r7,r2
1000c32c:	3006d43a 	srli	r3,r6,16
1000c330:	300c943a 	slli	r6,r6,16
1000c334:	8c7fffcc 	andi	r17,r17,65535
1000c338:	38c7883a 	add	r3,r7,r3
1000c33c:	3463883a 	add	r17,r6,r17
1000c340:	90c03d36 	bltu	r18,r3,1000c438 <__umoddi3+0x57c>
1000c344:	90c06026 	beq	r18,r3,1000c4c8 <__umoddi3+0x60c>
1000c348:	90c9c83a 	sub	r4,r18,r3
1000c34c:	880f883a 	mov	r7,r17
1000c350:	81cfc83a 	sub	r7,r16,r7
1000c354:	81c7803a 	cmpltu	r3,r16,r7
1000c358:	20c7c83a 	sub	r3,r4,r3
1000c35c:	1d44983a 	sll	r2,r3,r21
1000c360:	3d0ed83a 	srl	r7,r7,r20
1000c364:	1d06d83a 	srl	r3,r3,r20
1000c368:	11c4b03a 	or	r2,r2,r7
1000c36c:	003f7a06 	br	1000c158 <__alt_data_end+0xf800c158>
1000c370:	0025883a 	mov	r18,zero
1000c374:	003ef806 	br	1000bf58 <__alt_data_end+0xf800bf58>
1000c378:	98a6983a 	sll	r19,r19,r2
1000c37c:	88e8d83a 	srl	r20,r17,r3
1000c380:	80c6d83a 	srl	r3,r16,r3
1000c384:	982ad43a 	srli	r21,r19,16
1000c388:	88a2983a 	sll	r17,r17,r2
1000c38c:	a009883a 	mov	r4,r20
1000c390:	a80b883a 	mov	r5,r21
1000c394:	88eeb03a 	or	r23,r17,r3
1000c398:	1025883a 	mov	r18,r2
1000c39c:	000c5fc0 	call	1000c5fc <__umodsi3>
1000c3a0:	a009883a 	mov	r4,r20
1000c3a4:	a80b883a 	mov	r5,r21
1000c3a8:	1023883a 	mov	r17,r2
1000c3ac:	9dbfffcc 	andi	r22,r19,65535
1000c3b0:	000c5f40 	call	1000c5f4 <__udivsi3>
1000c3b4:	1009883a 	mov	r4,r2
1000c3b8:	b00b883a 	mov	r5,r22
1000c3bc:	000c6040 	call	1000c604 <__mulsi3>
1000c3c0:	8822943a 	slli	r17,r17,16
1000c3c4:	b808d43a 	srli	r4,r23,16
1000c3c8:	84a8983a 	sll	r20,r16,r18
1000c3cc:	8906b03a 	or	r3,r17,r4
1000c3d0:	1880042e 	bgeu	r3,r2,1000c3e4 <__umoddi3+0x528>
1000c3d4:	1cc7883a 	add	r3,r3,r19
1000c3d8:	1cc00236 	bltu	r3,r19,1000c3e4 <__umoddi3+0x528>
1000c3dc:	1880012e 	bgeu	r3,r2,1000c3e4 <__umoddi3+0x528>
1000c3e0:	1cc7883a 	add	r3,r3,r19
1000c3e4:	18a1c83a 	sub	r16,r3,r2
1000c3e8:	8009883a 	mov	r4,r16
1000c3ec:	a80b883a 	mov	r5,r21
1000c3f0:	000c5fc0 	call	1000c5fc <__umodsi3>
1000c3f4:	8009883a 	mov	r4,r16
1000c3f8:	a80b883a 	mov	r5,r21
1000c3fc:	1039883a 	mov	fp,r2
1000c400:	000c5f40 	call	1000c5f4 <__udivsi3>
1000c404:	1009883a 	mov	r4,r2
1000c408:	b00b883a 	mov	r5,r22
1000c40c:	000c6040 	call	1000c604 <__mulsi3>
1000c410:	e006943a 	slli	r3,fp,16
1000c414:	b93fffcc 	andi	r4,r23,65535
1000c418:	1906b03a 	or	r3,r3,r4
1000c41c:	1880042e 	bgeu	r3,r2,1000c430 <__umoddi3+0x574>
1000c420:	1cc7883a 	add	r3,r3,r19
1000c424:	1cc00236 	bltu	r3,r19,1000c430 <__umoddi3+0x574>
1000c428:	1880012e 	bgeu	r3,r2,1000c430 <__umoddi3+0x574>
1000c42c:	1cc7883a 	add	r3,r3,r19
1000c430:	18a3c83a 	sub	r17,r3,r2
1000c434:	003f1e06 	br	1000c0b0 <__alt_data_end+0xf800c0b0>
1000c438:	8ccfc83a 	sub	r7,r17,r19
1000c43c:	1d89c83a 	sub	r4,r3,r22
1000c440:	89e3803a 	cmpltu	r17,r17,r7
1000c444:	2463c83a 	sub	r17,r4,r17
1000c448:	9449c83a 	sub	r4,r18,r17
1000c44c:	003fc006 	br	1000c350 <__alt_data_end+0xf800c350>
1000c450:	000b883a 	mov	r5,zero
1000c454:	002b883a 	mov	r21,zero
1000c458:	003eeb06 	br	1000c008 <__alt_data_end+0xf800c008>
1000c45c:	01400404 	movi	r5,16
1000c460:	282b883a 	mov	r21,r5
1000c464:	003ee806 	br	1000c008 <__alt_data_end+0xf800c008>
1000c468:	01400404 	movi	r5,16
1000c46c:	2805883a 	mov	r2,r5
1000c470:	003eaa06 	br	1000bf1c <__alt_data_end+0xf800bf1c>
1000c474:	0005883a 	mov	r2,zero
1000c478:	0007883a 	mov	r3,zero
1000c47c:	003eff06 	br	1000c07c <__alt_data_end+0xf800c07c>
1000c480:	00800404 	movi	r2,16
1000c484:	1007883a 	mov	r3,r2
1000c488:	003efc06 	br	1000c07c <__alt_data_end+0xf800c07c>
1000c48c:	000b883a 	mov	r5,zero
1000c490:	0005883a 	mov	r2,zero
1000c494:	003ea106 	br	1000bf1c <__alt_data_end+0xf800bf1c>
1000c498:	90bf802e 	bgeu	r18,r2,1000c29c <__alt_data_end+0xf800c29c>
1000c49c:	bdffff84 	addi	r23,r23,-2
1000c4a0:	95a5883a 	add	r18,r18,r22
1000c4a4:	003f7e06 	br	1000c2a0 <__alt_data_end+0xf800c2a0>
1000c4a8:	18bf652e 	bgeu	r3,r2,1000c240 <__alt_data_end+0xf800c240>
1000c4ac:	e73fff84 	addi	fp,fp,-2
1000c4b0:	1d87883a 	add	r3,r3,r22
1000c4b4:	003f6306 	br	1000c244 <__alt_data_end+0xf800c244>
1000c4b8:	1cc7883a 	add	r3,r3,r19
1000c4bc:	003f0d06 	br	1000c0f4 <__alt_data_end+0xf800c0f4>
1000c4c0:	8005883a 	mov	r2,r16
1000c4c4:	003edf06 	br	1000c044 <__alt_data_end+0xf800c044>
1000c4c8:	847fdb36 	bltu	r16,r17,1000c438 <__alt_data_end+0xf800c438>
1000c4cc:	880f883a 	mov	r7,r17
1000c4d0:	0009883a 	mov	r4,zero
1000c4d4:	003f9e06 	br	1000c350 <__alt_data_end+0xf800c350>

1000c4d8 <udivmodsi4>:
1000c4d8:	2900182e 	bgeu	r5,r4,1000c53c <udivmodsi4+0x64>
1000c4dc:	28001716 	blt	r5,zero,1000c53c <udivmodsi4+0x64>
1000c4e0:	00800804 	movi	r2,32
1000c4e4:	00c00044 	movi	r3,1
1000c4e8:	00000206 	br	1000c4f4 <udivmodsi4+0x1c>
1000c4ec:	10001126 	beq	r2,zero,1000c534 <udivmodsi4+0x5c>
1000c4f0:	28000516 	blt	r5,zero,1000c508 <udivmodsi4+0x30>
1000c4f4:	294b883a 	add	r5,r5,r5
1000c4f8:	10bfffc4 	addi	r2,r2,-1
1000c4fc:	18c7883a 	add	r3,r3,r3
1000c500:	293ffa36 	bltu	r5,r4,1000c4ec <__alt_data_end+0xf800c4ec>
1000c504:	18000b26 	beq	r3,zero,1000c534 <udivmodsi4+0x5c>
1000c508:	0005883a 	mov	r2,zero
1000c50c:	21400236 	bltu	r4,r5,1000c518 <udivmodsi4+0x40>
1000c510:	2149c83a 	sub	r4,r4,r5
1000c514:	10c4b03a 	or	r2,r2,r3
1000c518:	1806d07a 	srli	r3,r3,1
1000c51c:	280ad07a 	srli	r5,r5,1
1000c520:	183ffa1e 	bne	r3,zero,1000c50c <__alt_data_end+0xf800c50c>
1000c524:	3000011e 	bne	r6,zero,1000c52c <udivmodsi4+0x54>
1000c528:	f800283a 	ret
1000c52c:	2005883a 	mov	r2,r4
1000c530:	f800283a 	ret
1000c534:	0005883a 	mov	r2,zero
1000c538:	003ffa06 	br	1000c524 <__alt_data_end+0xf800c524>
1000c53c:	00c00044 	movi	r3,1
1000c540:	003ff106 	br	1000c508 <__alt_data_end+0xf800c508>

1000c544 <__divsi3>:
1000c544:	defffe04 	addi	sp,sp,-8
1000c548:	dfc00115 	stw	ra,4(sp)
1000c54c:	dc000015 	stw	r16,0(sp)
1000c550:	20000b16 	blt	r4,zero,1000c580 <__divsi3+0x3c>
1000c554:	0021883a 	mov	r16,zero
1000c558:	28000c16 	blt	r5,zero,1000c58c <__divsi3+0x48>
1000c55c:	000d883a 	mov	r6,zero
1000c560:	000c4d80 	call	1000c4d8 <udivmodsi4>
1000c564:	0407c83a 	sub	r3,zero,r16
1000c568:	1884f03a 	xor	r2,r3,r2
1000c56c:	1405883a 	add	r2,r2,r16
1000c570:	dfc00117 	ldw	ra,4(sp)
1000c574:	dc000017 	ldw	r16,0(sp)
1000c578:	dec00204 	addi	sp,sp,8
1000c57c:	f800283a 	ret
1000c580:	0109c83a 	sub	r4,zero,r4
1000c584:	04000044 	movi	r16,1
1000c588:	283ff40e 	bge	r5,zero,1000c55c <__alt_data_end+0xf800c55c>
1000c58c:	014bc83a 	sub	r5,zero,r5
1000c590:	8400005c 	xori	r16,r16,1
1000c594:	003ff106 	br	1000c55c <__alt_data_end+0xf800c55c>

1000c598 <__modsi3>:
1000c598:	defffd04 	addi	sp,sp,-12
1000c59c:	dfc00215 	stw	ra,8(sp)
1000c5a0:	dc400115 	stw	r17,4(sp)
1000c5a4:	dc000015 	stw	r16,0(sp)
1000c5a8:	20000c16 	blt	r4,zero,1000c5dc <__modsi3+0x44>
1000c5ac:	0023883a 	mov	r17,zero
1000c5b0:	0021883a 	mov	r16,zero
1000c5b4:	28000d16 	blt	r5,zero,1000c5ec <__modsi3+0x54>
1000c5b8:	01800044 	movi	r6,1
1000c5bc:	000c4d80 	call	1000c4d8 <udivmodsi4>
1000c5c0:	1404f03a 	xor	r2,r2,r16
1000c5c4:	8885883a 	add	r2,r17,r2
1000c5c8:	dfc00217 	ldw	ra,8(sp)
1000c5cc:	dc400117 	ldw	r17,4(sp)
1000c5d0:	dc000017 	ldw	r16,0(sp)
1000c5d4:	dec00304 	addi	sp,sp,12
1000c5d8:	f800283a 	ret
1000c5dc:	0109c83a 	sub	r4,zero,r4
1000c5e0:	04400044 	movi	r17,1
1000c5e4:	043fffc4 	movi	r16,-1
1000c5e8:	283ff30e 	bge	r5,zero,1000c5b8 <__alt_data_end+0xf800c5b8>
1000c5ec:	014bc83a 	sub	r5,zero,r5
1000c5f0:	003ff106 	br	1000c5b8 <__alt_data_end+0xf800c5b8>

1000c5f4 <__udivsi3>:
1000c5f4:	000d883a 	mov	r6,zero
1000c5f8:	000c4d81 	jmpi	1000c4d8 <udivmodsi4>

1000c5fc <__umodsi3>:
1000c5fc:	01800044 	movi	r6,1
1000c600:	000c4d81 	jmpi	1000c4d8 <udivmodsi4>

1000c604 <__mulsi3>:
1000c604:	0005883a 	mov	r2,zero
1000c608:	20000726 	beq	r4,zero,1000c628 <__mulsi3+0x24>
1000c60c:	20c0004c 	andi	r3,r4,1
1000c610:	2008d07a 	srli	r4,r4,1
1000c614:	18000126 	beq	r3,zero,1000c61c <__mulsi3+0x18>
1000c618:	1145883a 	add	r2,r2,r5
1000c61c:	294b883a 	add	r5,r5,r5
1000c620:	203ffa1e 	bne	r4,zero,1000c60c <__alt_data_end+0xf800c60c>
1000c624:	f800283a 	ret
1000c628:	f800283a 	ret

1000c62c <__adddf3>:
1000c62c:	02000434 	movhi	r8,16
1000c630:	423fffc4 	addi	r8,r8,-1
1000c634:	defffb04 	addi	sp,sp,-20
1000c638:	2a12703a 	and	r9,r5,r8
1000c63c:	2806d7fa 	srli	r3,r5,31
1000c640:	3a10703a 	and	r8,r7,r8
1000c644:	3804d53a 	srli	r2,r7,20
1000c648:	3014d77a 	srli	r10,r6,29
1000c64c:	dc000015 	stw	r16,0(sp)
1000c650:	481290fa 	slli	r9,r9,3
1000c654:	2820d53a 	srli	r16,r5,20
1000c658:	401090fa 	slli	r8,r8,3
1000c65c:	200ad77a 	srli	r5,r4,29
1000c660:	380ed7fa 	srli	r7,r7,31
1000c664:	dc800215 	stw	r18,8(sp)
1000c668:	dc400115 	stw	r17,4(sp)
1000c66c:	dfc00415 	stw	ra,16(sp)
1000c670:	dcc00315 	stw	r19,12(sp)
1000c674:	1c803fcc 	andi	r18,r3,255
1000c678:	8401ffcc 	andi	r16,r16,2047
1000c67c:	494ab03a 	or	r5,r9,r5
1000c680:	202290fa 	slli	r17,r4,3
1000c684:	1081ffcc 	andi	r2,r2,2047
1000c688:	4290b03a 	or	r8,r8,r10
1000c68c:	300c90fa 	slli	r6,r6,3
1000c690:	91c07026 	beq	r18,r7,1000c854 <__adddf3+0x228>
1000c694:	8087c83a 	sub	r3,r16,r2
1000c698:	00c0b30e 	bge	zero,r3,1000c968 <__adddf3+0x33c>
1000c69c:	10002a1e 	bne	r2,zero,1000c748 <__adddf3+0x11c>
1000c6a0:	4184b03a 	or	r2,r8,r6
1000c6a4:	1000991e 	bne	r2,zero,1000c90c <__adddf3+0x2e0>
1000c6a8:	888001cc 	andi	r2,r17,7
1000c6ac:	10005b26 	beq	r2,zero,1000c81c <__adddf3+0x1f0>
1000c6b0:	88c003cc 	andi	r3,r17,15
1000c6b4:	00800104 	movi	r2,4
1000c6b8:	18805826 	beq	r3,r2,1000c81c <__adddf3+0x1f0>
1000c6bc:	89800104 	addi	r6,r17,4
1000c6c0:	3463803a 	cmpltu	r17,r6,r17
1000c6c4:	2c4b883a 	add	r5,r5,r17
1000c6c8:	2880202c 	andhi	r2,r5,128
1000c6cc:	9007883a 	mov	r3,r18
1000c6d0:	3023883a 	mov	r17,r6
1000c6d4:	10005426 	beq	r2,zero,1000c828 <__adddf3+0x1fc>
1000c6d8:	84000044 	addi	r16,r16,1
1000c6dc:	0081ffc4 	movi	r2,2047
1000c6e0:	8080c126 	beq	r16,r2,1000c9e8 <__adddf3+0x3bc>
1000c6e4:	013fe034 	movhi	r4,65408
1000c6e8:	213fffc4 	addi	r4,r4,-1
1000c6ec:	290a703a 	and	r5,r5,r4
1000c6f0:	2804977a 	slli	r2,r5,29
1000c6f4:	280a927a 	slli	r5,r5,9
1000c6f8:	8822d0fa 	srli	r17,r17,3
1000c6fc:	8401ffcc 	andi	r16,r16,2047
1000c700:	2808d33a 	srli	r4,r5,12
1000c704:	1444b03a 	or	r2,r2,r17
1000c708:	8401ffcc 	andi	r16,r16,2047
1000c70c:	800a953a 	slli	r5,r16,20
1000c710:	18c03fcc 	andi	r3,r3,255
1000c714:	04000434 	movhi	r16,16
1000c718:	180697fa 	slli	r3,r3,31
1000c71c:	843fffc4 	addi	r16,r16,-1
1000c720:	2420703a 	and	r16,r4,r16
1000c724:	8160b03a 	or	r16,r16,r5
1000c728:	80c6b03a 	or	r3,r16,r3
1000c72c:	dfc00417 	ldw	ra,16(sp)
1000c730:	dcc00317 	ldw	r19,12(sp)
1000c734:	dc800217 	ldw	r18,8(sp)
1000c738:	dc400117 	ldw	r17,4(sp)
1000c73c:	dc000017 	ldw	r16,0(sp)
1000c740:	dec00504 	addi	sp,sp,20
1000c744:	f800283a 	ret
1000c748:	0081ffc4 	movi	r2,2047
1000c74c:	80bfd626 	beq	r16,r2,1000c6a8 <__alt_data_end+0xf800c6a8>
1000c750:	42002034 	orhi	r8,r8,128
1000c754:	00800e04 	movi	r2,56
1000c758:	10c0a616 	blt	r2,r3,1000c9f4 <__adddf3+0x3c8>
1000c75c:	008007c4 	movi	r2,31
1000c760:	10c0c916 	blt	r2,r3,1000ca88 <__adddf3+0x45c>
1000c764:	00800804 	movi	r2,32
1000c768:	10c5c83a 	sub	r2,r2,r3
1000c76c:	408e983a 	sll	r7,r8,r2
1000c770:	30c8d83a 	srl	r4,r6,r3
1000c774:	3084983a 	sll	r2,r6,r2
1000c778:	40c6d83a 	srl	r3,r8,r3
1000c77c:	390cb03a 	or	r6,r7,r4
1000c780:	1004c03a 	cmpne	r2,r2,zero
1000c784:	308cb03a 	or	r6,r6,r2
1000c788:	898dc83a 	sub	r6,r17,r6
1000c78c:	89a3803a 	cmpltu	r17,r17,r6
1000c790:	28cbc83a 	sub	r5,r5,r3
1000c794:	2c4bc83a 	sub	r5,r5,r17
1000c798:	3023883a 	mov	r17,r6
1000c79c:	2880202c 	andhi	r2,r5,128
1000c7a0:	10006d26 	beq	r2,zero,1000c958 <__adddf3+0x32c>
1000c7a4:	04c02034 	movhi	r19,128
1000c7a8:	9cffffc4 	addi	r19,r19,-1
1000c7ac:	2ce6703a 	and	r19,r5,r19
1000c7b0:	98007e26 	beq	r19,zero,1000c9ac <__adddf3+0x380>
1000c7b4:	9809883a 	mov	r4,r19
1000c7b8:	000edc40 	call	1000edc4 <__clzsi2>
1000c7bc:	10fffe04 	addi	r3,r2,-8
1000c7c0:	010007c4 	movi	r4,31
1000c7c4:	20c07f16 	blt	r4,r3,1000c9c4 <__adddf3+0x398>
1000c7c8:	01400a04 	movi	r5,40
1000c7cc:	2885c83a 	sub	r2,r5,r2
1000c7d0:	888ad83a 	srl	r5,r17,r2
1000c7d4:	98e6983a 	sll	r19,r19,r3
1000c7d8:	88e2983a 	sll	r17,r17,r3
1000c7dc:	2ce6b03a 	or	r19,r5,r19
1000c7e0:	1c007c16 	blt	r3,r16,1000c9d4 <__adddf3+0x3a8>
1000c7e4:	1c21c83a 	sub	r16,r3,r16
1000c7e8:	81400044 	addi	r5,r16,1
1000c7ec:	00c007c4 	movi	r3,31
1000c7f0:	19409816 	blt	r3,r5,1000ca54 <__adddf3+0x428>
1000c7f4:	1c21c83a 	sub	r16,r3,r16
1000c7f8:	8c08983a 	sll	r4,r17,r16
1000c7fc:	8946d83a 	srl	r3,r17,r5
1000c800:	9c20983a 	sll	r16,r19,r16
1000c804:	2008c03a 	cmpne	r4,r4,zero
1000c808:	994ad83a 	srl	r5,r19,r5
1000c80c:	1c06b03a 	or	r3,r3,r16
1000c810:	1922b03a 	or	r17,r3,r4
1000c814:	0021883a 	mov	r16,zero
1000c818:	003fa306 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000c81c:	2880202c 	andhi	r2,r5,128
1000c820:	9007883a 	mov	r3,r18
1000c824:	103fac1e 	bne	r2,zero,1000c6d8 <__alt_data_end+0xf800c6d8>
1000c828:	2804977a 	slli	r2,r5,29
1000c82c:	8822d0fa 	srli	r17,r17,3
1000c830:	0101ffc4 	movi	r4,2047
1000c834:	280ad0fa 	srli	r5,r5,3
1000c838:	1444b03a 	or	r2,r2,r17
1000c83c:	81002c26 	beq	r16,r4,1000c8f0 <__adddf3+0x2c4>
1000c840:	8120703a 	and	r16,r16,r4
1000c844:	01000434 	movhi	r4,16
1000c848:	213fffc4 	addi	r4,r4,-1
1000c84c:	2908703a 	and	r4,r5,r4
1000c850:	003fad06 	br	1000c708 <__alt_data_end+0xf800c708>
1000c854:	8089c83a 	sub	r4,r16,r2
1000c858:	01006a0e 	bge	zero,r4,1000ca04 <__adddf3+0x3d8>
1000c85c:	10003326 	beq	r2,zero,1000c92c <__adddf3+0x300>
1000c860:	0081ffc4 	movi	r2,2047
1000c864:	80bf9026 	beq	r16,r2,1000c6a8 <__alt_data_end+0xf800c6a8>
1000c868:	42002034 	orhi	r8,r8,128
1000c86c:	00800e04 	movi	r2,56
1000c870:	1100b116 	blt	r2,r4,1000cb38 <__adddf3+0x50c>
1000c874:	008007c4 	movi	r2,31
1000c878:	1100e216 	blt	r2,r4,1000cc04 <__adddf3+0x5d8>
1000c87c:	00800804 	movi	r2,32
1000c880:	1105c83a 	sub	r2,r2,r4
1000c884:	4092983a 	sll	r9,r8,r2
1000c888:	310ed83a 	srl	r7,r6,r4
1000c88c:	3084983a 	sll	r2,r6,r2
1000c890:	4110d83a 	srl	r8,r8,r4
1000c894:	49ccb03a 	or	r6,r9,r7
1000c898:	1004c03a 	cmpne	r2,r2,zero
1000c89c:	308cb03a 	or	r6,r6,r2
1000c8a0:	344d883a 	add	r6,r6,r17
1000c8a4:	3463803a 	cmpltu	r17,r6,r17
1000c8a8:	414b883a 	add	r5,r8,r5
1000c8ac:	2c4b883a 	add	r5,r5,r17
1000c8b0:	3023883a 	mov	r17,r6
1000c8b4:	2880202c 	andhi	r2,r5,128
1000c8b8:	10002726 	beq	r2,zero,1000c958 <__adddf3+0x32c>
1000c8bc:	84000044 	addi	r16,r16,1
1000c8c0:	0081ffc4 	movi	r2,2047
1000c8c4:	8080ae26 	beq	r16,r2,1000cb80 <__adddf3+0x554>
1000c8c8:	00bfe034 	movhi	r2,65408
1000c8cc:	10bfffc4 	addi	r2,r2,-1
1000c8d0:	288a703a 	and	r5,r5,r2
1000c8d4:	880cd07a 	srli	r6,r17,1
1000c8d8:	280897fa 	slli	r4,r5,31
1000c8dc:	88c0004c 	andi	r3,r17,1
1000c8e0:	30e2b03a 	or	r17,r6,r3
1000c8e4:	280ad07a 	srli	r5,r5,1
1000c8e8:	8922b03a 	or	r17,r17,r4
1000c8ec:	003f6e06 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000c8f0:	1148b03a 	or	r4,r2,r5
1000c8f4:	20003c26 	beq	r4,zero,1000c9e8 <__adddf3+0x3bc>
1000c8f8:	29000234 	orhi	r4,r5,8
1000c8fc:	01400434 	movhi	r5,16
1000c900:	297fffc4 	addi	r5,r5,-1
1000c904:	2148703a 	and	r4,r4,r5
1000c908:	003f7f06 	br	1000c708 <__alt_data_end+0xf800c708>
1000c90c:	18ffffc4 	addi	r3,r3,-1
1000c910:	18004d1e 	bne	r3,zero,1000ca48 <__adddf3+0x41c>
1000c914:	898dc83a 	sub	r6,r17,r6
1000c918:	89a3803a 	cmpltu	r17,r17,r6
1000c91c:	2a0bc83a 	sub	r5,r5,r8
1000c920:	2c4bc83a 	sub	r5,r5,r17
1000c924:	3023883a 	mov	r17,r6
1000c928:	003f9c06 	br	1000c79c <__alt_data_end+0xf800c79c>
1000c92c:	4184b03a 	or	r2,r8,r6
1000c930:	103f5d26 	beq	r2,zero,1000c6a8 <__alt_data_end+0xf800c6a8>
1000c934:	213fffc4 	addi	r4,r4,-1
1000c938:	203fd926 	beq	r4,zero,1000c8a0 <__alt_data_end+0xf800c8a0>
1000c93c:	0081ffc4 	movi	r2,2047
1000c940:	80bfca1e 	bne	r16,r2,1000c86c <__alt_data_end+0xf800c86c>
1000c944:	003f5806 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000c948:	10c8b03a 	or	r4,r2,r3
1000c94c:	20008b26 	beq	r4,zero,1000cb7c <__adddf3+0x550>
1000c950:	100b883a 	mov	r5,r2
1000c954:	1823883a 	mov	r17,r3
1000c958:	888001cc 	andi	r2,r17,7
1000c95c:	103f541e 	bne	r2,zero,1000c6b0 <__alt_data_end+0xf800c6b0>
1000c960:	9007883a 	mov	r3,r18
1000c964:	003fb006 	br	1000c828 <__alt_data_end+0xf800c828>
1000c968:	1800531e 	bne	r3,zero,1000cab8 <__adddf3+0x48c>
1000c96c:	80800044 	addi	r2,r16,1
1000c970:	1081ffcc 	andi	r2,r2,2047
1000c974:	00c00044 	movi	r3,1
1000c978:	1880990e 	bge	r3,r2,1000cbe0 <__adddf3+0x5b4>
1000c97c:	8985c83a 	sub	r2,r17,r6
1000c980:	8887803a 	cmpltu	r3,r17,r2
1000c984:	2a27c83a 	sub	r19,r5,r8
1000c988:	98e7c83a 	sub	r19,r19,r3
1000c98c:	98c0202c 	andhi	r3,r19,128
1000c990:	18006226 	beq	r3,zero,1000cb1c <__adddf3+0x4f0>
1000c994:	3463c83a 	sub	r17,r6,r17
1000c998:	4151c83a 	sub	r8,r8,r5
1000c99c:	344d803a 	cmpltu	r6,r6,r17
1000c9a0:	41a7c83a 	sub	r19,r8,r6
1000c9a4:	3825883a 	mov	r18,r7
1000c9a8:	983f821e 	bne	r19,zero,1000c7b4 <__alt_data_end+0xf800c7b4>
1000c9ac:	8809883a 	mov	r4,r17
1000c9b0:	000edc40 	call	1000edc4 <__clzsi2>
1000c9b4:	10800804 	addi	r2,r2,32
1000c9b8:	10fffe04 	addi	r3,r2,-8
1000c9bc:	010007c4 	movi	r4,31
1000c9c0:	20ff810e 	bge	r4,r3,1000c7c8 <__alt_data_end+0xf800c7c8>
1000c9c4:	14fff604 	addi	r19,r2,-40
1000c9c8:	8ce6983a 	sll	r19,r17,r19
1000c9cc:	0023883a 	mov	r17,zero
1000c9d0:	1c3f840e 	bge	r3,r16,1000c7e4 <__alt_data_end+0xf800c7e4>
1000c9d4:	017fe034 	movhi	r5,65408
1000c9d8:	297fffc4 	addi	r5,r5,-1
1000c9dc:	80e1c83a 	sub	r16,r16,r3
1000c9e0:	994a703a 	and	r5,r19,r5
1000c9e4:	003f3006 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000c9e8:	0009883a 	mov	r4,zero
1000c9ec:	0005883a 	mov	r2,zero
1000c9f0:	003f4506 	br	1000c708 <__alt_data_end+0xf800c708>
1000c9f4:	418cb03a 	or	r6,r8,r6
1000c9f8:	300cc03a 	cmpne	r6,r6,zero
1000c9fc:	0007883a 	mov	r3,zero
1000ca00:	003f6106 	br	1000c788 <__alt_data_end+0xf800c788>
1000ca04:	2000921e 	bne	r4,zero,1000cc50 <__adddf3+0x624>
1000ca08:	80800044 	addi	r2,r16,1
1000ca0c:	11c1ffcc 	andi	r7,r2,2047
1000ca10:	01000044 	movi	r4,1
1000ca14:	21c0610e 	bge	r4,r7,1000cb9c <__adddf3+0x570>
1000ca18:	0101ffc4 	movi	r4,2047
1000ca1c:	1100a326 	beq	r2,r4,1000ccac <__adddf3+0x680>
1000ca20:	344d883a 	add	r6,r6,r17
1000ca24:	3463803a 	cmpltu	r17,r6,r17
1000ca28:	414b883a 	add	r5,r8,r5
1000ca2c:	2c4b883a 	add	r5,r5,r17
1000ca30:	282297fa 	slli	r17,r5,31
1000ca34:	300cd07a 	srli	r6,r6,1
1000ca38:	280ad07a 	srli	r5,r5,1
1000ca3c:	1021883a 	mov	r16,r2
1000ca40:	89a2b03a 	or	r17,r17,r6
1000ca44:	003f1806 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000ca48:	0081ffc4 	movi	r2,2047
1000ca4c:	80bf411e 	bne	r16,r2,1000c754 <__alt_data_end+0xf800c754>
1000ca50:	003f1506 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000ca54:	80bff844 	addi	r2,r16,-31
1000ca58:	00c00804 	movi	r3,32
1000ca5c:	9884d83a 	srl	r2,r19,r2
1000ca60:	28c04a26 	beq	r5,r3,1000cb8c <__adddf3+0x560>
1000ca64:	00c00fc4 	movi	r3,63
1000ca68:	1c21c83a 	sub	r16,r3,r16
1000ca6c:	9c26983a 	sll	r19,r19,r16
1000ca70:	9c62b03a 	or	r17,r19,r17
1000ca74:	8822c03a 	cmpne	r17,r17,zero
1000ca78:	88a2b03a 	or	r17,r17,r2
1000ca7c:	000b883a 	mov	r5,zero
1000ca80:	0021883a 	mov	r16,zero
1000ca84:	003fb406 	br	1000c958 <__alt_data_end+0xf800c958>
1000ca88:	18bff804 	addi	r2,r3,-32
1000ca8c:	01000804 	movi	r4,32
1000ca90:	4084d83a 	srl	r2,r8,r2
1000ca94:	19003f26 	beq	r3,r4,1000cb94 <__adddf3+0x568>
1000ca98:	01001004 	movi	r4,64
1000ca9c:	20c7c83a 	sub	r3,r4,r3
1000caa0:	40d0983a 	sll	r8,r8,r3
1000caa4:	418cb03a 	or	r6,r8,r6
1000caa8:	300cc03a 	cmpne	r6,r6,zero
1000caac:	308cb03a 	or	r6,r6,r2
1000cab0:	0007883a 	mov	r3,zero
1000cab4:	003f3406 	br	1000c788 <__alt_data_end+0xf800c788>
1000cab8:	80002326 	beq	r16,zero,1000cb48 <__adddf3+0x51c>
1000cabc:	0101ffc4 	movi	r4,2047
1000cac0:	11005e26 	beq	r2,r4,1000cc3c <__adddf3+0x610>
1000cac4:	00c7c83a 	sub	r3,zero,r3
1000cac8:	29402034 	orhi	r5,r5,128
1000cacc:	01000e04 	movi	r4,56
1000cad0:	20c07216 	blt	r4,r3,1000cc9c <__adddf3+0x670>
1000cad4:	010007c4 	movi	r4,31
1000cad8:	20c0ce16 	blt	r4,r3,1000ce14 <__adddf3+0x7e8>
1000cadc:	01000804 	movi	r4,32
1000cae0:	20c9c83a 	sub	r4,r4,r3
1000cae4:	2914983a 	sll	r10,r5,r4
1000cae8:	88d2d83a 	srl	r9,r17,r3
1000caec:	8908983a 	sll	r4,r17,r4
1000caf0:	28c6d83a 	srl	r3,r5,r3
1000caf4:	5262b03a 	or	r17,r10,r9
1000caf8:	2008c03a 	cmpne	r4,r4,zero
1000cafc:	8922b03a 	or	r17,r17,r4
1000cb00:	3463c83a 	sub	r17,r6,r17
1000cb04:	40c7c83a 	sub	r3,r8,r3
1000cb08:	344d803a 	cmpltu	r6,r6,r17
1000cb0c:	198bc83a 	sub	r5,r3,r6
1000cb10:	1021883a 	mov	r16,r2
1000cb14:	3825883a 	mov	r18,r7
1000cb18:	003f2006 	br	1000c79c <__alt_data_end+0xf800c79c>
1000cb1c:	9886b03a 	or	r3,r19,r2
1000cb20:	1800141e 	bne	r3,zero,1000cb74 <__adddf3+0x548>
1000cb24:	0007883a 	mov	r3,zero
1000cb28:	000b883a 	mov	r5,zero
1000cb2c:	0023883a 	mov	r17,zero
1000cb30:	0021883a 	mov	r16,zero
1000cb34:	003f3c06 	br	1000c828 <__alt_data_end+0xf800c828>
1000cb38:	418cb03a 	or	r6,r8,r6
1000cb3c:	300cc03a 	cmpne	r6,r6,zero
1000cb40:	0011883a 	mov	r8,zero
1000cb44:	003f5606 	br	1000c8a0 <__alt_data_end+0xf800c8a0>
1000cb48:	2c48b03a 	or	r4,r5,r17
1000cb4c:	20003b26 	beq	r4,zero,1000cc3c <__adddf3+0x610>
1000cb50:	00c6303a 	nor	r3,zero,r3
1000cb54:	1800371e 	bne	r3,zero,1000cc34 <__adddf3+0x608>
1000cb58:	3463c83a 	sub	r17,r6,r17
1000cb5c:	414bc83a 	sub	r5,r8,r5
1000cb60:	344d803a 	cmpltu	r6,r6,r17
1000cb64:	298bc83a 	sub	r5,r5,r6
1000cb68:	1021883a 	mov	r16,r2
1000cb6c:	3825883a 	mov	r18,r7
1000cb70:	003f0a06 	br	1000c79c <__alt_data_end+0xf800c79c>
1000cb74:	1023883a 	mov	r17,r2
1000cb78:	003f0d06 	br	1000c7b0 <__alt_data_end+0xf800c7b0>
1000cb7c:	0007883a 	mov	r3,zero
1000cb80:	000b883a 	mov	r5,zero
1000cb84:	0023883a 	mov	r17,zero
1000cb88:	003f2706 	br	1000c828 <__alt_data_end+0xf800c828>
1000cb8c:	0027883a 	mov	r19,zero
1000cb90:	003fb706 	br	1000ca70 <__alt_data_end+0xf800ca70>
1000cb94:	0011883a 	mov	r8,zero
1000cb98:	003fc206 	br	1000caa4 <__alt_data_end+0xf800caa4>
1000cb9c:	2c44b03a 	or	r2,r5,r17
1000cba0:	8000871e 	bne	r16,zero,1000cdc0 <__adddf3+0x794>
1000cba4:	1000b126 	beq	r2,zero,1000ce6c <__adddf3+0x840>
1000cba8:	4184b03a 	or	r2,r8,r6
1000cbac:	103ebe26 	beq	r2,zero,1000c6a8 <__alt_data_end+0xf800c6a8>
1000cbb0:	3445883a 	add	r2,r6,r17
1000cbb4:	1463803a 	cmpltu	r17,r2,r17
1000cbb8:	414b883a 	add	r5,r8,r5
1000cbbc:	2c4b883a 	add	r5,r5,r17
1000cbc0:	28c0202c 	andhi	r3,r5,128
1000cbc4:	1023883a 	mov	r17,r2
1000cbc8:	183f6326 	beq	r3,zero,1000c958 <__alt_data_end+0xf800c958>
1000cbcc:	00bfe034 	movhi	r2,65408
1000cbd0:	10bfffc4 	addi	r2,r2,-1
1000cbd4:	2021883a 	mov	r16,r4
1000cbd8:	288a703a 	and	r5,r5,r2
1000cbdc:	003eb206 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000cbe0:	2c44b03a 	or	r2,r5,r17
1000cbe4:	8000251e 	bne	r16,zero,1000cc7c <__adddf3+0x650>
1000cbe8:	10004b1e 	bne	r2,zero,1000cd18 <__adddf3+0x6ec>
1000cbec:	4184b03a 	or	r2,r8,r6
1000cbf0:	103fe226 	beq	r2,zero,1000cb7c <__alt_data_end+0xf800cb7c>
1000cbf4:	400b883a 	mov	r5,r8
1000cbf8:	3023883a 	mov	r17,r6
1000cbfc:	3825883a 	mov	r18,r7
1000cc00:	003ea906 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000cc04:	20bff804 	addi	r2,r4,-32
1000cc08:	01c00804 	movi	r7,32
1000cc0c:	4084d83a 	srl	r2,r8,r2
1000cc10:	21c07e26 	beq	r4,r7,1000ce0c <__adddf3+0x7e0>
1000cc14:	01c01004 	movi	r7,64
1000cc18:	3909c83a 	sub	r4,r7,r4
1000cc1c:	4110983a 	sll	r8,r8,r4
1000cc20:	418cb03a 	or	r6,r8,r6
1000cc24:	300cc03a 	cmpne	r6,r6,zero
1000cc28:	308cb03a 	or	r6,r6,r2
1000cc2c:	0011883a 	mov	r8,zero
1000cc30:	003f1b06 	br	1000c8a0 <__alt_data_end+0xf800c8a0>
1000cc34:	0101ffc4 	movi	r4,2047
1000cc38:	113fa41e 	bne	r2,r4,1000cacc <__alt_data_end+0xf800cacc>
1000cc3c:	400b883a 	mov	r5,r8
1000cc40:	3023883a 	mov	r17,r6
1000cc44:	1021883a 	mov	r16,r2
1000cc48:	3825883a 	mov	r18,r7
1000cc4c:	003e9606 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000cc50:	80001a1e 	bne	r16,zero,1000ccbc <__adddf3+0x690>
1000cc54:	2c4eb03a 	or	r7,r5,r17
1000cc58:	38005526 	beq	r7,zero,1000cdb0 <__adddf3+0x784>
1000cc5c:	0108303a 	nor	r4,zero,r4
1000cc60:	2000511e 	bne	r4,zero,1000cda8 <__adddf3+0x77c>
1000cc64:	89a3883a 	add	r17,r17,r6
1000cc68:	414b883a 	add	r5,r8,r5
1000cc6c:	898d803a 	cmpltu	r6,r17,r6
1000cc70:	298b883a 	add	r5,r5,r6
1000cc74:	1021883a 	mov	r16,r2
1000cc78:	003f0e06 	br	1000c8b4 <__alt_data_end+0xf800c8b4>
1000cc7c:	1000341e 	bne	r2,zero,1000cd50 <__adddf3+0x724>
1000cc80:	4184b03a 	or	r2,r8,r6
1000cc84:	10006f26 	beq	r2,zero,1000ce44 <__adddf3+0x818>
1000cc88:	400b883a 	mov	r5,r8
1000cc8c:	3023883a 	mov	r17,r6
1000cc90:	3825883a 	mov	r18,r7
1000cc94:	0401ffc4 	movi	r16,2047
1000cc98:	003e8306 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000cc9c:	2c62b03a 	or	r17,r5,r17
1000cca0:	8822c03a 	cmpne	r17,r17,zero
1000cca4:	0007883a 	mov	r3,zero
1000cca8:	003f9506 	br	1000cb00 <__alt_data_end+0xf800cb00>
1000ccac:	1021883a 	mov	r16,r2
1000ccb0:	000b883a 	mov	r5,zero
1000ccb4:	0023883a 	mov	r17,zero
1000ccb8:	003edb06 	br	1000c828 <__alt_data_end+0xf800c828>
1000ccbc:	01c1ffc4 	movi	r7,2047
1000ccc0:	11c03b26 	beq	r2,r7,1000cdb0 <__adddf3+0x784>
1000ccc4:	0109c83a 	sub	r4,zero,r4
1000ccc8:	29402034 	orhi	r5,r5,128
1000cccc:	01c00e04 	movi	r7,56
1000ccd0:	39006216 	blt	r7,r4,1000ce5c <__adddf3+0x830>
1000ccd4:	01c007c4 	movi	r7,31
1000ccd8:	39006b16 	blt	r7,r4,1000ce88 <__adddf3+0x85c>
1000ccdc:	01c00804 	movi	r7,32
1000cce0:	390fc83a 	sub	r7,r7,r4
1000cce4:	29d4983a 	sll	r10,r5,r7
1000cce8:	8912d83a 	srl	r9,r17,r4
1000ccec:	89ce983a 	sll	r7,r17,r7
1000ccf0:	2908d83a 	srl	r4,r5,r4
1000ccf4:	5262b03a 	or	r17,r10,r9
1000ccf8:	380ac03a 	cmpne	r5,r7,zero
1000ccfc:	8962b03a 	or	r17,r17,r5
1000cd00:	89a3883a 	add	r17,r17,r6
1000cd04:	2211883a 	add	r8,r4,r8
1000cd08:	898d803a 	cmpltu	r6,r17,r6
1000cd0c:	418b883a 	add	r5,r8,r6
1000cd10:	1021883a 	mov	r16,r2
1000cd14:	003ee706 	br	1000c8b4 <__alt_data_end+0xf800c8b4>
1000cd18:	4184b03a 	or	r2,r8,r6
1000cd1c:	103e6226 	beq	r2,zero,1000c6a8 <__alt_data_end+0xf800c6a8>
1000cd20:	8987c83a 	sub	r3,r17,r6
1000cd24:	88c9803a 	cmpltu	r4,r17,r3
1000cd28:	2a05c83a 	sub	r2,r5,r8
1000cd2c:	1105c83a 	sub	r2,r2,r4
1000cd30:	1100202c 	andhi	r4,r2,128
1000cd34:	203f0426 	beq	r4,zero,1000c948 <__alt_data_end+0xf800c948>
1000cd38:	3463c83a 	sub	r17,r6,r17
1000cd3c:	414bc83a 	sub	r5,r8,r5
1000cd40:	344d803a 	cmpltu	r6,r6,r17
1000cd44:	298bc83a 	sub	r5,r5,r6
1000cd48:	3825883a 	mov	r18,r7
1000cd4c:	003e5606 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000cd50:	4184b03a 	or	r2,r8,r6
1000cd54:	10002b26 	beq	r2,zero,1000ce04 <__adddf3+0x7d8>
1000cd58:	2804d0fa 	srli	r2,r5,3
1000cd5c:	8822d0fa 	srli	r17,r17,3
1000cd60:	280a977a 	slli	r5,r5,29
1000cd64:	10c0022c 	andhi	r3,r2,8
1000cd68:	2c62b03a 	or	r17,r5,r17
1000cd6c:	18000826 	beq	r3,zero,1000cd90 <__adddf3+0x764>
1000cd70:	4008d0fa 	srli	r4,r8,3
1000cd74:	20c0022c 	andhi	r3,r4,8
1000cd78:	1800051e 	bne	r3,zero,1000cd90 <__adddf3+0x764>
1000cd7c:	300cd0fa 	srli	r6,r6,3
1000cd80:	4010977a 	slli	r8,r8,29
1000cd84:	2005883a 	mov	r2,r4
1000cd88:	3825883a 	mov	r18,r7
1000cd8c:	41a2b03a 	or	r17,r8,r6
1000cd90:	880ad77a 	srli	r5,r17,29
1000cd94:	100490fa 	slli	r2,r2,3
1000cd98:	882290fa 	slli	r17,r17,3
1000cd9c:	0401ffc4 	movi	r16,2047
1000cda0:	288ab03a 	or	r5,r5,r2
1000cda4:	003e4006 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000cda8:	01c1ffc4 	movi	r7,2047
1000cdac:	11ffc71e 	bne	r2,r7,1000cccc <__alt_data_end+0xf800cccc>
1000cdb0:	400b883a 	mov	r5,r8
1000cdb4:	3023883a 	mov	r17,r6
1000cdb8:	1021883a 	mov	r16,r2
1000cdbc:	003e3a06 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000cdc0:	10002d26 	beq	r2,zero,1000ce78 <__adddf3+0x84c>
1000cdc4:	4184b03a 	or	r2,r8,r6
1000cdc8:	10000e26 	beq	r2,zero,1000ce04 <__adddf3+0x7d8>
1000cdcc:	2804d0fa 	srli	r2,r5,3
1000cdd0:	8822d0fa 	srli	r17,r17,3
1000cdd4:	280a977a 	slli	r5,r5,29
1000cdd8:	10c0022c 	andhi	r3,r2,8
1000cddc:	2c62b03a 	or	r17,r5,r17
1000cde0:	183feb26 	beq	r3,zero,1000cd90 <__alt_data_end+0xf800cd90>
1000cde4:	4008d0fa 	srli	r4,r8,3
1000cde8:	20c0022c 	andhi	r3,r4,8
1000cdec:	183fe81e 	bne	r3,zero,1000cd90 <__alt_data_end+0xf800cd90>
1000cdf0:	300cd0fa 	srli	r6,r6,3
1000cdf4:	4010977a 	slli	r8,r8,29
1000cdf8:	2005883a 	mov	r2,r4
1000cdfc:	41a2b03a 	or	r17,r8,r6
1000ce00:	003fe306 	br	1000cd90 <__alt_data_end+0xf800cd90>
1000ce04:	0401ffc4 	movi	r16,2047
1000ce08:	003e2706 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000ce0c:	0011883a 	mov	r8,zero
1000ce10:	003f8306 	br	1000cc20 <__alt_data_end+0xf800cc20>
1000ce14:	193ff804 	addi	r4,r3,-32
1000ce18:	02400804 	movi	r9,32
1000ce1c:	2908d83a 	srl	r4,r5,r4
1000ce20:	1a402526 	beq	r3,r9,1000ceb8 <__adddf3+0x88c>
1000ce24:	02401004 	movi	r9,64
1000ce28:	48c7c83a 	sub	r3,r9,r3
1000ce2c:	28ca983a 	sll	r5,r5,r3
1000ce30:	2c62b03a 	or	r17,r5,r17
1000ce34:	8822c03a 	cmpne	r17,r17,zero
1000ce38:	8922b03a 	or	r17,r17,r4
1000ce3c:	0007883a 	mov	r3,zero
1000ce40:	003f2f06 	br	1000cb00 <__alt_data_end+0xf800cb00>
1000ce44:	01402034 	movhi	r5,128
1000ce48:	0007883a 	mov	r3,zero
1000ce4c:	297fffc4 	addi	r5,r5,-1
1000ce50:	047ffe04 	movi	r17,-8
1000ce54:	0401ffc4 	movi	r16,2047
1000ce58:	003e7306 	br	1000c828 <__alt_data_end+0xf800c828>
1000ce5c:	2c62b03a 	or	r17,r5,r17
1000ce60:	8822c03a 	cmpne	r17,r17,zero
1000ce64:	0009883a 	mov	r4,zero
1000ce68:	003fa506 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000ce6c:	400b883a 	mov	r5,r8
1000ce70:	3023883a 	mov	r17,r6
1000ce74:	003e0c06 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000ce78:	400b883a 	mov	r5,r8
1000ce7c:	3023883a 	mov	r17,r6
1000ce80:	0401ffc4 	movi	r16,2047
1000ce84:	003e0806 	br	1000c6a8 <__alt_data_end+0xf800c6a8>
1000ce88:	21fff804 	addi	r7,r4,-32
1000ce8c:	02400804 	movi	r9,32
1000ce90:	29ced83a 	srl	r7,r5,r7
1000ce94:	22400a26 	beq	r4,r9,1000cec0 <__adddf3+0x894>
1000ce98:	02401004 	movi	r9,64
1000ce9c:	4909c83a 	sub	r4,r9,r4
1000cea0:	290a983a 	sll	r5,r5,r4
1000cea4:	2c62b03a 	or	r17,r5,r17
1000cea8:	8822c03a 	cmpne	r17,r17,zero
1000ceac:	89e2b03a 	or	r17,r17,r7
1000ceb0:	0009883a 	mov	r4,zero
1000ceb4:	003f9206 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000ceb8:	000b883a 	mov	r5,zero
1000cebc:	003fdc06 	br	1000ce30 <__alt_data_end+0xf800ce30>
1000cec0:	000b883a 	mov	r5,zero
1000cec4:	003ff706 	br	1000cea4 <__alt_data_end+0xf800cea4>

1000cec8 <__divdf3>:
1000cec8:	defff004 	addi	sp,sp,-64
1000cecc:	dc800815 	stw	r18,32(sp)
1000ced0:	2824d53a 	srli	r18,r5,20
1000ced4:	dd800c15 	stw	r22,48(sp)
1000ced8:	282cd7fa 	srli	r22,r5,31
1000cedc:	dc000615 	stw	r16,24(sp)
1000cee0:	04000434 	movhi	r16,16
1000cee4:	df000e15 	stw	fp,56(sp)
1000cee8:	dd000a15 	stw	r20,40(sp)
1000ceec:	dcc00915 	stw	r19,36(sp)
1000cef0:	dc400715 	stw	r17,28(sp)
1000cef4:	843fffc4 	addi	r16,r16,-1
1000cef8:	dfc00f15 	stw	ra,60(sp)
1000cefc:	ddc00d15 	stw	r23,52(sp)
1000cf00:	dd400b15 	stw	r21,44(sp)
1000cf04:	9481ffcc 	andi	r18,r18,2047
1000cf08:	2029883a 	mov	r20,r4
1000cf0c:	2027883a 	mov	r19,r4
1000cf10:	2c22703a 	and	r17,r5,r16
1000cf14:	b7003fcc 	andi	fp,r22,255
1000cf18:	90005e26 	beq	r18,zero,1000d094 <__divdf3+0x1cc>
1000cf1c:	0081ffc4 	movi	r2,2047
1000cf20:	90803526 	beq	r18,r2,1000cff8 <__divdf3+0x130>
1000cf24:	8c000434 	orhi	r16,r17,16
1000cf28:	2004d77a 	srli	r2,r4,29
1000cf2c:	802090fa 	slli	r16,r16,3
1000cf30:	202690fa 	slli	r19,r4,3
1000cf34:	94bf0044 	addi	r18,r18,-1023
1000cf38:	80a2b03a 	or	r17,r16,r2
1000cf3c:	0029883a 	mov	r20,zero
1000cf40:	0011883a 	mov	r8,zero
1000cf44:	380ad53a 	srli	r5,r7,20
1000cf48:	382ed7fa 	srli	r23,r7,31
1000cf4c:	04000434 	movhi	r16,16
1000cf50:	843fffc4 	addi	r16,r16,-1
1000cf54:	2941ffcc 	andi	r5,r5,2047
1000cf58:	302b883a 	mov	r21,r6
1000cf5c:	3c20703a 	and	r16,r7,r16
1000cf60:	ba403fcc 	andi	r9,r23,255
1000cf64:	28006726 	beq	r5,zero,1000d104 <__divdf3+0x23c>
1000cf68:	0081ffc4 	movi	r2,2047
1000cf6c:	28805f26 	beq	r5,r2,1000d0ec <__divdf3+0x224>
1000cf70:	84000434 	orhi	r16,r16,16
1000cf74:	3004d77a 	srli	r2,r6,29
1000cf78:	802090fa 	slli	r16,r16,3
1000cf7c:	302a90fa 	slli	r21,r6,3
1000cf80:	297f0044 	addi	r5,r5,-1023
1000cf84:	80a0b03a 	or	r16,r16,r2
1000cf88:	000f883a 	mov	r7,zero
1000cf8c:	3d06b03a 	or	r3,r7,r20
1000cf90:	180690ba 	slli	r3,r3,2
1000cf94:	00840074 	movhi	r2,4097
1000cf98:	10b3ee04 	addi	r2,r2,-12360
1000cf9c:	1885883a 	add	r2,r3,r2
1000cfa0:	10800017 	ldw	r2,0(r2)
1000cfa4:	b5c8f03a 	xor	r4,r22,r23
1000cfa8:	200d883a 	mov	r6,r4
1000cfac:	25003fcc 	andi	r20,r4,255
1000cfb0:	9165c83a 	sub	r18,r18,r5
1000cfb4:	1000683a 	jmp	r2
1000cfb8:	1000d200 	call	11000d20 <_gp+0xfe5190>
1000cfbc:	1000d030 	cmpltui	zero,r2,832
1000cfc0:	1000d1c4 	addi	zero,r2,839
1000cfc4:	1000d014 	ori	zero,r2,832
1000cfc8:	1000d1c4 	addi	zero,r2,839
1000cfcc:	1000d198 	cmpnei	zero,r2,838
1000cfd0:	1000d1c4 	addi	zero,r2,839
1000cfd4:	1000d014 	ori	zero,r2,832
1000cfd8:	1000d030 	cmpltui	zero,r2,832
1000cfdc:	1000d030 	cmpltui	zero,r2,832
1000cfe0:	1000d198 	cmpnei	zero,r2,838
1000cfe4:	1000d014 	ori	zero,r2,832
1000cfe8:	1000d024 	muli	zero,r2,832
1000cfec:	1000d024 	muli	zero,r2,832
1000cff0:	1000d024 	muli	zero,r2,832
1000cff4:	1000d1d4 	ori	zero,r2,839
1000cff8:	8904b03a 	or	r2,r17,r4
1000cffc:	1000631e 	bne	r2,zero,1000d18c <__divdf3+0x2c4>
1000d000:	05000204 	movi	r20,8
1000d004:	0023883a 	mov	r17,zero
1000d008:	0027883a 	mov	r19,zero
1000d00c:	02000084 	movi	r8,2
1000d010:	003fcc06 	br	1000cf44 <__alt_data_end+0xf800cf44>
1000d014:	8023883a 	mov	r17,r16
1000d018:	a827883a 	mov	r19,r21
1000d01c:	4839883a 	mov	fp,r9
1000d020:	3811883a 	mov	r8,r7
1000d024:	00800084 	movi	r2,2
1000d028:	4081531e 	bne	r8,r2,1000d578 <__divdf3+0x6b0>
1000d02c:	e029883a 	mov	r20,fp
1000d030:	a180004c 	andi	r6,r20,1
1000d034:	0201ffc4 	movi	r8,2047
1000d038:	000b883a 	mov	r5,zero
1000d03c:	0027883a 	mov	r19,zero
1000d040:	4010953a 	slli	r8,r8,20
1000d044:	30c03fcc 	andi	r3,r6,255
1000d048:	04000434 	movhi	r16,16
1000d04c:	180697fa 	slli	r3,r3,31
1000d050:	843fffc4 	addi	r16,r16,-1
1000d054:	2c20703a 	and	r16,r5,r16
1000d058:	8220b03a 	or	r16,r16,r8
1000d05c:	80c6b03a 	or	r3,r16,r3
1000d060:	9805883a 	mov	r2,r19
1000d064:	dfc00f17 	ldw	ra,60(sp)
1000d068:	df000e17 	ldw	fp,56(sp)
1000d06c:	ddc00d17 	ldw	r23,52(sp)
1000d070:	dd800c17 	ldw	r22,48(sp)
1000d074:	dd400b17 	ldw	r21,44(sp)
1000d078:	dd000a17 	ldw	r20,40(sp)
1000d07c:	dcc00917 	ldw	r19,36(sp)
1000d080:	dc800817 	ldw	r18,32(sp)
1000d084:	dc400717 	ldw	r17,28(sp)
1000d088:	dc000617 	ldw	r16,24(sp)
1000d08c:	dec01004 	addi	sp,sp,64
1000d090:	f800283a 	ret
1000d094:	8904b03a 	or	r2,r17,r4
1000d098:	10003726 	beq	r2,zero,1000d178 <__divdf3+0x2b0>
1000d09c:	88014d26 	beq	r17,zero,1000d5d4 <__divdf3+0x70c>
1000d0a0:	8809883a 	mov	r4,r17
1000d0a4:	d9800215 	stw	r6,8(sp)
1000d0a8:	d9c00515 	stw	r7,20(sp)
1000d0ac:	000edc40 	call	1000edc4 <__clzsi2>
1000d0b0:	d9800217 	ldw	r6,8(sp)
1000d0b4:	d9c00517 	ldw	r7,20(sp)
1000d0b8:	1007883a 	mov	r3,r2
1000d0bc:	01000a04 	movi	r4,40
1000d0c0:	1cfffe04 	addi	r19,r3,-8
1000d0c4:	20c9c83a 	sub	r4,r4,r3
1000d0c8:	8cca983a 	sll	r5,r17,r19
1000d0cc:	a108d83a 	srl	r4,r20,r4
1000d0d0:	a4e6983a 	sll	r19,r20,r19
1000d0d4:	2162b03a 	or	r17,r4,r5
1000d0d8:	04bf0344 	movi	r18,-1011
1000d0dc:	90e5c83a 	sub	r18,r18,r3
1000d0e0:	0029883a 	mov	r20,zero
1000d0e4:	0011883a 	mov	r8,zero
1000d0e8:	003f9606 	br	1000cf44 <__alt_data_end+0xf800cf44>
1000d0ec:	8184b03a 	or	r2,r16,r6
1000d0f0:	10001f1e 	bne	r2,zero,1000d170 <__divdf3+0x2a8>
1000d0f4:	0021883a 	mov	r16,zero
1000d0f8:	002b883a 	mov	r21,zero
1000d0fc:	01c00084 	movi	r7,2
1000d100:	003fa206 	br	1000cf8c <__alt_data_end+0xf800cf8c>
1000d104:	8184b03a 	or	r2,r16,r6
1000d108:	10001526 	beq	r2,zero,1000d160 <__divdf3+0x298>
1000d10c:	80013d26 	beq	r16,zero,1000d604 <__divdf3+0x73c>
1000d110:	8009883a 	mov	r4,r16
1000d114:	d9800215 	stw	r6,8(sp)
1000d118:	da000315 	stw	r8,12(sp)
1000d11c:	da400415 	stw	r9,16(sp)
1000d120:	000edc40 	call	1000edc4 <__clzsi2>
1000d124:	d9800217 	ldw	r6,8(sp)
1000d128:	da000317 	ldw	r8,12(sp)
1000d12c:	da400417 	ldw	r9,16(sp)
1000d130:	1007883a 	mov	r3,r2
1000d134:	01000a04 	movi	r4,40
1000d138:	1d7ffe04 	addi	r21,r3,-8
1000d13c:	20c9c83a 	sub	r4,r4,r3
1000d140:	8560983a 	sll	r16,r16,r21
1000d144:	3108d83a 	srl	r4,r6,r4
1000d148:	356a983a 	sll	r21,r6,r21
1000d14c:	2420b03a 	or	r16,r4,r16
1000d150:	017f0344 	movi	r5,-1011
1000d154:	28cbc83a 	sub	r5,r5,r3
1000d158:	000f883a 	mov	r7,zero
1000d15c:	003f8b06 	br	1000cf8c <__alt_data_end+0xf800cf8c>
1000d160:	0021883a 	mov	r16,zero
1000d164:	002b883a 	mov	r21,zero
1000d168:	01c00044 	movi	r7,1
1000d16c:	003f8706 	br	1000cf8c <__alt_data_end+0xf800cf8c>
1000d170:	01c000c4 	movi	r7,3
1000d174:	003f8506 	br	1000cf8c <__alt_data_end+0xf800cf8c>
1000d178:	05000104 	movi	r20,4
1000d17c:	0023883a 	mov	r17,zero
1000d180:	0027883a 	mov	r19,zero
1000d184:	02000044 	movi	r8,1
1000d188:	003f6e06 	br	1000cf44 <__alt_data_end+0xf800cf44>
1000d18c:	05000304 	movi	r20,12
1000d190:	020000c4 	movi	r8,3
1000d194:	003f6b06 	br	1000cf44 <__alt_data_end+0xf800cf44>
1000d198:	01400434 	movhi	r5,16
1000d19c:	000d883a 	mov	r6,zero
1000d1a0:	297fffc4 	addi	r5,r5,-1
1000d1a4:	04ffffc4 	movi	r19,-1
1000d1a8:	0201ffc4 	movi	r8,2047
1000d1ac:	003fa406 	br	1000d040 <__alt_data_end+0xf800d040>
1000d1b0:	043f0084 	movi	r16,-1022
1000d1b4:	84a1c83a 	sub	r16,r16,r18
1000d1b8:	00800e04 	movi	r2,56
1000d1bc:	14014d0e 	bge	r2,r16,1000d6f4 <__divdf3+0x82c>
1000d1c0:	a180004c 	andi	r6,r20,1
1000d1c4:	0011883a 	mov	r8,zero
1000d1c8:	000b883a 	mov	r5,zero
1000d1cc:	0027883a 	mov	r19,zero
1000d1d0:	003f9b06 	br	1000d040 <__alt_data_end+0xf800d040>
1000d1d4:	8880022c 	andhi	r2,r17,8
1000d1d8:	1000f026 	beq	r2,zero,1000d59c <__divdf3+0x6d4>
1000d1dc:	8080022c 	andhi	r2,r16,8
1000d1e0:	1000ee1e 	bne	r2,zero,1000d59c <__divdf3+0x6d4>
1000d1e4:	00800434 	movhi	r2,16
1000d1e8:	81400234 	orhi	r5,r16,8
1000d1ec:	10bfffc4 	addi	r2,r2,-1
1000d1f0:	b80d883a 	mov	r6,r23
1000d1f4:	288a703a 	and	r5,r5,r2
1000d1f8:	a827883a 	mov	r19,r21
1000d1fc:	003fea06 	br	1000d1a8 <__alt_data_end+0xf800d1a8>
1000d200:	84411c36 	bltu	r16,r17,1000d674 <__divdf3+0x7ac>
1000d204:	8c011a26 	beq	r17,r16,1000d670 <__divdf3+0x7a8>
1000d208:	94bfffc4 	addi	r18,r18,-1
1000d20c:	dcc00015 	stw	r19,0(sp)
1000d210:	8811883a 	mov	r8,r17
1000d214:	002d883a 	mov	r22,zero
1000d218:	a80cd63a 	srli	r6,r21,24
1000d21c:	8020923a 	slli	r16,r16,8
1000d220:	a82a923a 	slli	r21,r21,8
1000d224:	4009883a 	mov	r4,r8
1000d228:	342eb03a 	or	r23,r6,r16
1000d22c:	dd400115 	stw	r21,4(sp)
1000d230:	b82ad43a 	srli	r21,r23,16
1000d234:	da000315 	stw	r8,12(sp)
1000d238:	bcffffcc 	andi	r19,r23,65535
1000d23c:	a80b883a 	mov	r5,r21
1000d240:	000c5f40 	call	1000c5f4 <__udivsi3>
1000d244:	1009883a 	mov	r4,r2
1000d248:	980b883a 	mov	r5,r19
1000d24c:	1023883a 	mov	r17,r2
1000d250:	000c6040 	call	1000c604 <__mulsi3>
1000d254:	da000317 	ldw	r8,12(sp)
1000d258:	a80b883a 	mov	r5,r21
1000d25c:	1039883a 	mov	fp,r2
1000d260:	4009883a 	mov	r4,r8
1000d264:	000c5fc0 	call	1000c5fc <__umodsi3>
1000d268:	d8c00017 	ldw	r3,0(sp)
1000d26c:	1004943a 	slli	r2,r2,16
1000d270:	1810d43a 	srli	r8,r3,16
1000d274:	120eb03a 	or	r7,r2,r8
1000d278:	3f00062e 	bgeu	r7,fp,1000d294 <__divdf3+0x3cc>
1000d27c:	3dcf883a 	add	r7,r7,r23
1000d280:	88bfffc4 	addi	r2,r17,-1
1000d284:	3dc10a36 	bltu	r7,r23,1000d6b0 <__divdf3+0x7e8>
1000d288:	3f01092e 	bgeu	r7,fp,1000d6b0 <__divdf3+0x7e8>
1000d28c:	8c7fff84 	addi	r17,r17,-2
1000d290:	3dcf883a 	add	r7,r7,r23
1000d294:	3f39c83a 	sub	fp,r7,fp
1000d298:	e009883a 	mov	r4,fp
1000d29c:	a80b883a 	mov	r5,r21
1000d2a0:	000c5f40 	call	1000c5f4 <__udivsi3>
1000d2a4:	1009883a 	mov	r4,r2
1000d2a8:	980b883a 	mov	r5,r19
1000d2ac:	1021883a 	mov	r16,r2
1000d2b0:	000c6040 	call	1000c604 <__mulsi3>
1000d2b4:	e009883a 	mov	r4,fp
1000d2b8:	a80b883a 	mov	r5,r21
1000d2bc:	d8800315 	stw	r2,12(sp)
1000d2c0:	000c5fc0 	call	1000c5fc <__umodsi3>
1000d2c4:	d9000017 	ldw	r4,0(sp)
1000d2c8:	1004943a 	slli	r2,r2,16
1000d2cc:	da000317 	ldw	r8,12(sp)
1000d2d0:	20ffffcc 	andi	r3,r4,65535
1000d2d4:	10ceb03a 	or	r7,r2,r3
1000d2d8:	3a00062e 	bgeu	r7,r8,1000d2f4 <__divdf3+0x42c>
1000d2dc:	3dcf883a 	add	r7,r7,r23
1000d2e0:	80bfffc4 	addi	r2,r16,-1
1000d2e4:	3dc0f036 	bltu	r7,r23,1000d6a8 <__divdf3+0x7e0>
1000d2e8:	3a00ef2e 	bgeu	r7,r8,1000d6a8 <__divdf3+0x7e0>
1000d2ec:	843fff84 	addi	r16,r16,-2
1000d2f0:	3dcf883a 	add	r7,r7,r23
1000d2f4:	d8c00117 	ldw	r3,4(sp)
1000d2f8:	8822943a 	slli	r17,r17,16
1000d2fc:	3a0fc83a 	sub	r7,r7,r8
1000d300:	1806d43a 	srli	r3,r3,16
1000d304:	8462b03a 	or	r17,r16,r17
1000d308:	8affffcc 	andi	r11,r17,65535
1000d30c:	d8c00015 	stw	r3,0(sp)
1000d310:	d8c00117 	ldw	r3,4(sp)
1000d314:	8820d43a 	srli	r16,r17,16
1000d318:	5809883a 	mov	r4,r11
1000d31c:	1f3fffcc 	andi	fp,r3,65535
1000d320:	e00b883a 	mov	r5,fp
1000d324:	d9c00515 	stw	r7,20(sp)
1000d328:	dac00215 	stw	r11,8(sp)
1000d32c:	000c6040 	call	1000c604 <__mulsi3>
1000d330:	8009883a 	mov	r4,r16
1000d334:	e00b883a 	mov	r5,fp
1000d338:	d8800415 	stw	r2,16(sp)
1000d33c:	000c6040 	call	1000c604 <__mulsi3>
1000d340:	d9400017 	ldw	r5,0(sp)
1000d344:	8009883a 	mov	r4,r16
1000d348:	d8800315 	stw	r2,12(sp)
1000d34c:	000c6040 	call	1000c604 <__mulsi3>
1000d350:	dac00217 	ldw	r11,8(sp)
1000d354:	d9400017 	ldw	r5,0(sp)
1000d358:	d8800215 	stw	r2,8(sp)
1000d35c:	5809883a 	mov	r4,r11
1000d360:	000c6040 	call	1000c604 <__mulsi3>
1000d364:	da400417 	ldw	r9,16(sp)
1000d368:	da800317 	ldw	r10,12(sp)
1000d36c:	d9c00517 	ldw	r7,20(sp)
1000d370:	480ad43a 	srli	r5,r9,16
1000d374:	5085883a 	add	r2,r10,r2
1000d378:	db000217 	ldw	r12,8(sp)
1000d37c:	1151883a 	add	r8,r2,r5
1000d380:	4280022e 	bgeu	r8,r10,1000d38c <__divdf3+0x4c4>
1000d384:	00800074 	movhi	r2,1
1000d388:	6099883a 	add	r12,r12,r2
1000d38c:	400ad43a 	srli	r5,r8,16
1000d390:	4010943a 	slli	r8,r8,16
1000d394:	4c3fffcc 	andi	r16,r9,65535
1000d398:	6149883a 	add	r4,r12,r5
1000d39c:	4411883a 	add	r8,r8,r16
1000d3a0:	3900a736 	bltu	r7,r4,1000d640 <__divdf3+0x778>
1000d3a4:	3900c426 	beq	r7,r4,1000d6b8 <__divdf3+0x7f0>
1000d3a8:	3909c83a 	sub	r4,r7,r4
1000d3ac:	b221c83a 	sub	r16,r22,r8
1000d3b0:	b42d803a 	cmpltu	r22,r22,r16
1000d3b4:	25adc83a 	sub	r22,r4,r22
1000d3b8:	b5c0c626 	beq	r22,r23,1000d6d4 <__divdf3+0x80c>
1000d3bc:	b009883a 	mov	r4,r22
1000d3c0:	a80b883a 	mov	r5,r21
1000d3c4:	000c5f40 	call	1000c5f4 <__udivsi3>
1000d3c8:	1009883a 	mov	r4,r2
1000d3cc:	980b883a 	mov	r5,r19
1000d3d0:	d8800315 	stw	r2,12(sp)
1000d3d4:	000c6040 	call	1000c604 <__mulsi3>
1000d3d8:	a80b883a 	mov	r5,r21
1000d3dc:	b009883a 	mov	r4,r22
1000d3e0:	d8800415 	stw	r2,16(sp)
1000d3e4:	000c5fc0 	call	1000c5fc <__umodsi3>
1000d3e8:	1004943a 	slli	r2,r2,16
1000d3ec:	800ed43a 	srli	r7,r16,16
1000d3f0:	da400417 	ldw	r9,16(sp)
1000d3f4:	da000317 	ldw	r8,12(sp)
1000d3f8:	11cab03a 	or	r5,r2,r7
1000d3fc:	2a40062e 	bgeu	r5,r9,1000d418 <__divdf3+0x550>
1000d400:	2dcb883a 	add	r5,r5,r23
1000d404:	40bfffc4 	addi	r2,r8,-1
1000d408:	2dc0b436 	bltu	r5,r23,1000d6dc <__divdf3+0x814>
1000d40c:	2a40b32e 	bgeu	r5,r9,1000d6dc <__divdf3+0x814>
1000d410:	423fff84 	addi	r8,r8,-2
1000d414:	2dcb883a 	add	r5,r5,r23
1000d418:	2a6dc83a 	sub	r22,r5,r9
1000d41c:	b009883a 	mov	r4,r22
1000d420:	a80b883a 	mov	r5,r21
1000d424:	da000315 	stw	r8,12(sp)
1000d428:	000c5f40 	call	1000c5f4 <__udivsi3>
1000d42c:	980b883a 	mov	r5,r19
1000d430:	1009883a 	mov	r4,r2
1000d434:	d8800415 	stw	r2,16(sp)
1000d438:	000c6040 	call	1000c604 <__mulsi3>
1000d43c:	b009883a 	mov	r4,r22
1000d440:	a80b883a 	mov	r5,r21
1000d444:	1027883a 	mov	r19,r2
1000d448:	000c5fc0 	call	1000c5fc <__umodsi3>
1000d44c:	1004943a 	slli	r2,r2,16
1000d450:	843fffcc 	andi	r16,r16,65535
1000d454:	da000317 	ldw	r8,12(sp)
1000d458:	140eb03a 	or	r7,r2,r16
1000d45c:	da400417 	ldw	r9,16(sp)
1000d460:	3cc0062e 	bgeu	r7,r19,1000d47c <__divdf3+0x5b4>
1000d464:	3dcf883a 	add	r7,r7,r23
1000d468:	48bfffc4 	addi	r2,r9,-1
1000d46c:	3dc09d36 	bltu	r7,r23,1000d6e4 <__divdf3+0x81c>
1000d470:	3cc09c2e 	bgeu	r7,r19,1000d6e4 <__divdf3+0x81c>
1000d474:	4a7fff84 	addi	r9,r9,-2
1000d478:	3dcf883a 	add	r7,r7,r23
1000d47c:	4010943a 	slli	r8,r8,16
1000d480:	3cebc83a 	sub	r21,r7,r19
1000d484:	e00b883a 	mov	r5,fp
1000d488:	4a26b03a 	or	r19,r9,r8
1000d48c:	99ffffcc 	andi	r7,r19,65535
1000d490:	9820d43a 	srli	r16,r19,16
1000d494:	3809883a 	mov	r4,r7
1000d498:	d9c00515 	stw	r7,20(sp)
1000d49c:	000c6040 	call	1000c604 <__mulsi3>
1000d4a0:	8009883a 	mov	r4,r16
1000d4a4:	e00b883a 	mov	r5,fp
1000d4a8:	102d883a 	mov	r22,r2
1000d4ac:	000c6040 	call	1000c604 <__mulsi3>
1000d4b0:	d9400017 	ldw	r5,0(sp)
1000d4b4:	8009883a 	mov	r4,r16
1000d4b8:	1039883a 	mov	fp,r2
1000d4bc:	000c6040 	call	1000c604 <__mulsi3>
1000d4c0:	d9c00517 	ldw	r7,20(sp)
1000d4c4:	d9400017 	ldw	r5,0(sp)
1000d4c8:	1021883a 	mov	r16,r2
1000d4cc:	3809883a 	mov	r4,r7
1000d4d0:	000c6040 	call	1000c604 <__mulsi3>
1000d4d4:	b008d43a 	srli	r4,r22,16
1000d4d8:	e085883a 	add	r2,fp,r2
1000d4dc:	1109883a 	add	r4,r2,r4
1000d4e0:	2700022e 	bgeu	r4,fp,1000d4ec <__divdf3+0x624>
1000d4e4:	00800074 	movhi	r2,1
1000d4e8:	80a1883a 	add	r16,r16,r2
1000d4ec:	200ad43a 	srli	r5,r4,16
1000d4f0:	2008943a 	slli	r4,r4,16
1000d4f4:	b5bfffcc 	andi	r22,r22,65535
1000d4f8:	8145883a 	add	r2,r16,r5
1000d4fc:	2589883a 	add	r4,r4,r22
1000d500:	a8802c36 	bltu	r21,r2,1000d5b4 <__divdf3+0x6ec>
1000d504:	a880a426 	beq	r21,r2,1000d798 <__divdf3+0x8d0>
1000d508:	9cc00054 	ori	r19,r19,1
1000d50c:	9200ffc4 	addi	r8,r18,1023
1000d510:	023f270e 	bge	zero,r8,1000d1b0 <__alt_data_end+0xf800d1b0>
1000d514:	988001cc 	andi	r2,r19,7
1000d518:	10000726 	beq	r2,zero,1000d538 <__divdf3+0x670>
1000d51c:	990003cc 	andi	r4,r19,15
1000d520:	00800104 	movi	r2,4
1000d524:	20800426 	beq	r4,r2,1000d538 <__divdf3+0x670>
1000d528:	9885883a 	add	r2,r19,r2
1000d52c:	14e7803a 	cmpltu	r19,r2,r19
1000d530:	8ce3883a 	add	r17,r17,r19
1000d534:	1027883a 	mov	r19,r2
1000d538:	8880402c 	andhi	r2,r17,256
1000d53c:	10000426 	beq	r2,zero,1000d550 <__divdf3+0x688>
1000d540:	00bfc034 	movhi	r2,65280
1000d544:	10bfffc4 	addi	r2,r2,-1
1000d548:	92010004 	addi	r8,r18,1024
1000d54c:	88a2703a 	and	r17,r17,r2
1000d550:	0081ff84 	movi	r2,2046
1000d554:	123eb616 	blt	r2,r8,1000d030 <__alt_data_end+0xf800d030>
1000d558:	9826d0fa 	srli	r19,r19,3
1000d55c:	8804977a 	slli	r2,r17,29
1000d560:	8820927a 	slli	r16,r17,9
1000d564:	4201ffcc 	andi	r8,r8,2047
1000d568:	14e6b03a 	or	r19,r2,r19
1000d56c:	800ad33a 	srli	r5,r16,12
1000d570:	a180004c 	andi	r6,r20,1
1000d574:	003eb206 	br	1000d040 <__alt_data_end+0xf800d040>
1000d578:	008000c4 	movi	r2,3
1000d57c:	4080ac26 	beq	r8,r2,1000d830 <__divdf3+0x968>
1000d580:	00800044 	movi	r2,1
1000d584:	4080591e 	bne	r8,r2,1000d6ec <__divdf3+0x824>
1000d588:	e00d883a 	mov	r6,fp
1000d58c:	0011883a 	mov	r8,zero
1000d590:	000b883a 	mov	r5,zero
1000d594:	0027883a 	mov	r19,zero
1000d598:	003ea906 	br	1000d040 <__alt_data_end+0xf800d040>
1000d59c:	00800434 	movhi	r2,16
1000d5a0:	89400234 	orhi	r5,r17,8
1000d5a4:	10bfffc4 	addi	r2,r2,-1
1000d5a8:	b00d883a 	mov	r6,r22
1000d5ac:	288a703a 	and	r5,r5,r2
1000d5b0:	003efd06 	br	1000d1a8 <__alt_data_end+0xf800d1a8>
1000d5b4:	adcf883a 	add	r7,r21,r23
1000d5b8:	997fffc4 	addi	r5,r19,-1
1000d5bc:	3dc0412e 	bgeu	r7,r23,1000d6c4 <__divdf3+0x7fc>
1000d5c0:	2827883a 	mov	r19,r5
1000d5c4:	38bfd01e 	bne	r7,r2,1000d508 <__alt_data_end+0xf800d508>
1000d5c8:	d8c00117 	ldw	r3,4(sp)
1000d5cc:	193fce1e 	bne	r3,r4,1000d508 <__alt_data_end+0xf800d508>
1000d5d0:	003fce06 	br	1000d50c <__alt_data_end+0xf800d50c>
1000d5d4:	d9800215 	stw	r6,8(sp)
1000d5d8:	d9c00515 	stw	r7,20(sp)
1000d5dc:	000edc40 	call	1000edc4 <__clzsi2>
1000d5e0:	10c00804 	addi	r3,r2,32
1000d5e4:	010009c4 	movi	r4,39
1000d5e8:	d9800217 	ldw	r6,8(sp)
1000d5ec:	d9c00517 	ldw	r7,20(sp)
1000d5f0:	20feb20e 	bge	r4,r3,1000d0bc <__alt_data_end+0xf800d0bc>
1000d5f4:	117ffe04 	addi	r5,r2,-8
1000d5f8:	a162983a 	sll	r17,r20,r5
1000d5fc:	0027883a 	mov	r19,zero
1000d600:	003eb506 	br	1000d0d8 <__alt_data_end+0xf800d0d8>
1000d604:	3009883a 	mov	r4,r6
1000d608:	d9800215 	stw	r6,8(sp)
1000d60c:	da000315 	stw	r8,12(sp)
1000d610:	da400415 	stw	r9,16(sp)
1000d614:	000edc40 	call	1000edc4 <__clzsi2>
1000d618:	10c00804 	addi	r3,r2,32
1000d61c:	010009c4 	movi	r4,39
1000d620:	d9800217 	ldw	r6,8(sp)
1000d624:	da000317 	ldw	r8,12(sp)
1000d628:	da400417 	ldw	r9,16(sp)
1000d62c:	20fec10e 	bge	r4,r3,1000d134 <__alt_data_end+0xf800d134>
1000d630:	10bffe04 	addi	r2,r2,-8
1000d634:	a8a0983a 	sll	r16,r21,r2
1000d638:	002b883a 	mov	r21,zero
1000d63c:	003ec406 	br	1000d150 <__alt_data_end+0xf800d150>
1000d640:	d8c00117 	ldw	r3,4(sp)
1000d644:	b0ed883a 	add	r22,r22,r3
1000d648:	b0c5803a 	cmpltu	r2,r22,r3
1000d64c:	15c5883a 	add	r2,r2,r23
1000d650:	11cf883a 	add	r7,r2,r7
1000d654:	88bfffc4 	addi	r2,r17,-1
1000d658:	b9c00d2e 	bgeu	r23,r7,1000d690 <__divdf3+0x7c8>
1000d65c:	39003f36 	bltu	r7,r4,1000d75c <__divdf3+0x894>
1000d660:	21c06a26 	beq	r4,r7,1000d80c <__divdf3+0x944>
1000d664:	3909c83a 	sub	r4,r7,r4
1000d668:	1023883a 	mov	r17,r2
1000d66c:	003f4f06 	br	1000d3ac <__alt_data_end+0xf800d3ac>
1000d670:	9d7ee536 	bltu	r19,r21,1000d208 <__alt_data_end+0xf800d208>
1000d674:	982ed07a 	srli	r23,r19,1
1000d678:	880497fa 	slli	r2,r17,31
1000d67c:	8810d07a 	srli	r8,r17,1
1000d680:	982c97fa 	slli	r22,r19,31
1000d684:	b884b03a 	or	r2,r23,r2
1000d688:	d8800015 	stw	r2,0(sp)
1000d68c:	003ee206 	br	1000d218 <__alt_data_end+0xf800d218>
1000d690:	3dfff41e 	bne	r7,r23,1000d664 <__alt_data_end+0xf800d664>
1000d694:	d8c00117 	ldw	r3,4(sp)
1000d698:	b0fff02e 	bgeu	r22,r3,1000d65c <__alt_data_end+0xf800d65c>
1000d69c:	b909c83a 	sub	r4,r23,r4
1000d6a0:	1023883a 	mov	r17,r2
1000d6a4:	003f4106 	br	1000d3ac <__alt_data_end+0xf800d3ac>
1000d6a8:	1021883a 	mov	r16,r2
1000d6ac:	003f1106 	br	1000d2f4 <__alt_data_end+0xf800d2f4>
1000d6b0:	1023883a 	mov	r17,r2
1000d6b4:	003ef706 	br	1000d294 <__alt_data_end+0xf800d294>
1000d6b8:	b23fe136 	bltu	r22,r8,1000d640 <__alt_data_end+0xf800d640>
1000d6bc:	0009883a 	mov	r4,zero
1000d6c0:	003f3a06 	br	1000d3ac <__alt_data_end+0xf800d3ac>
1000d6c4:	38802c36 	bltu	r7,r2,1000d778 <__divdf3+0x8b0>
1000d6c8:	11c05326 	beq	r2,r7,1000d818 <__divdf3+0x950>
1000d6cc:	2827883a 	mov	r19,r5
1000d6d0:	003f8d06 	br	1000d508 <__alt_data_end+0xf800d508>
1000d6d4:	04ffffc4 	movi	r19,-1
1000d6d8:	003f8c06 	br	1000d50c <__alt_data_end+0xf800d50c>
1000d6dc:	1011883a 	mov	r8,r2
1000d6e0:	003f4d06 	br	1000d418 <__alt_data_end+0xf800d418>
1000d6e4:	1013883a 	mov	r9,r2
1000d6e8:	003f6406 	br	1000d47c <__alt_data_end+0xf800d47c>
1000d6ec:	e029883a 	mov	r20,fp
1000d6f0:	003f8606 	br	1000d50c <__alt_data_end+0xf800d50c>
1000d6f4:	008007c4 	movi	r2,31
1000d6f8:	14002a16 	blt	r2,r16,1000d7a4 <__divdf3+0x8dc>
1000d6fc:	91410784 	addi	r5,r18,1054
1000d700:	9c0cd83a 	srl	r6,r19,r16
1000d704:	8948983a 	sll	r4,r17,r5
1000d708:	9944983a 	sll	r2,r19,r5
1000d70c:	8c20d83a 	srl	r16,r17,r16
1000d710:	3108b03a 	or	r4,r6,r4
1000d714:	1004c03a 	cmpne	r2,r2,zero
1000d718:	2084b03a 	or	r2,r4,r2
1000d71c:	110001cc 	andi	r4,r2,7
1000d720:	20000726 	beq	r4,zero,1000d740 <__divdf3+0x878>
1000d724:	114003cc 	andi	r5,r2,15
1000d728:	01000104 	movi	r4,4
1000d72c:	29000426 	beq	r5,r4,1000d740 <__divdf3+0x878>
1000d730:	11000104 	addi	r4,r2,4
1000d734:	2085803a 	cmpltu	r2,r4,r2
1000d738:	80a1883a 	add	r16,r16,r2
1000d73c:	2005883a 	mov	r2,r4
1000d740:	8100202c 	andhi	r4,r16,128
1000d744:	20002d26 	beq	r4,zero,1000d7fc <__divdf3+0x934>
1000d748:	a180004c 	andi	r6,r20,1
1000d74c:	02000044 	movi	r8,1
1000d750:	000b883a 	mov	r5,zero
1000d754:	0027883a 	mov	r19,zero
1000d758:	003e3906 	br	1000d040 <__alt_data_end+0xf800d040>
1000d75c:	d8c00117 	ldw	r3,4(sp)
1000d760:	8c7fff84 	addi	r17,r17,-2
1000d764:	b0ed883a 	add	r22,r22,r3
1000d768:	b0c5803a 	cmpltu	r2,r22,r3
1000d76c:	15c5883a 	add	r2,r2,r23
1000d770:	11cf883a 	add	r7,r2,r7
1000d774:	003f0c06 	br	1000d3a8 <__alt_data_end+0xf800d3a8>
1000d778:	d8c00117 	ldw	r3,4(sp)
1000d77c:	997fff84 	addi	r5,r19,-2
1000d780:	18d1883a 	add	r8,r3,r3
1000d784:	40c7803a 	cmpltu	r3,r8,r3
1000d788:	1dcd883a 	add	r6,r3,r23
1000d78c:	398f883a 	add	r7,r7,r6
1000d790:	da000115 	stw	r8,4(sp)
1000d794:	003f8a06 	br	1000d5c0 <__alt_data_end+0xf800d5c0>
1000d798:	203f861e 	bne	r4,zero,1000d5b4 <__alt_data_end+0xf800d5b4>
1000d79c:	d8000115 	stw	zero,4(sp)
1000d7a0:	003f8906 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000d7a4:	00bef884 	movi	r2,-1054
1000d7a8:	1485c83a 	sub	r2,r2,r18
1000d7ac:	01000804 	movi	r4,32
1000d7b0:	8884d83a 	srl	r2,r17,r2
1000d7b4:	81001c26 	beq	r16,r4,1000d828 <__divdf3+0x960>
1000d7b8:	91010f84 	addi	r4,r18,1086
1000d7bc:	8908983a 	sll	r4,r17,r4
1000d7c0:	24c8b03a 	or	r4,r4,r19
1000d7c4:	2008c03a 	cmpne	r4,r4,zero
1000d7c8:	2084b03a 	or	r2,r4,r2
1000d7cc:	140001cc 	andi	r16,r2,7
1000d7d0:	8000061e 	bne	r16,zero,1000d7ec <__divdf3+0x924>
1000d7d4:	000b883a 	mov	r5,zero
1000d7d8:	1004d0fa 	srli	r2,r2,3
1000d7dc:	a180004c 	andi	r6,r20,1
1000d7e0:	0011883a 	mov	r8,zero
1000d7e4:	1426b03a 	or	r19,r2,r16
1000d7e8:	003e1506 	br	1000d040 <__alt_data_end+0xf800d040>
1000d7ec:	114003cc 	andi	r5,r2,15
1000d7f0:	01000104 	movi	r4,4
1000d7f4:	0021883a 	mov	r16,zero
1000d7f8:	293fcd1e 	bne	r5,r4,1000d730 <__alt_data_end+0xf800d730>
1000d7fc:	800a927a 	slli	r5,r16,9
1000d800:	8020977a 	slli	r16,r16,29
1000d804:	280ad33a 	srli	r5,r5,12
1000d808:	003ff306 	br	1000d7d8 <__alt_data_end+0xf800d7d8>
1000d80c:	b23fd336 	bltu	r22,r8,1000d75c <__alt_data_end+0xf800d75c>
1000d810:	1023883a 	mov	r17,r2
1000d814:	003fa906 	br	1000d6bc <__alt_data_end+0xf800d6bc>
1000d818:	d8c00117 	ldw	r3,4(sp)
1000d81c:	193fd636 	bltu	r3,r4,1000d778 <__alt_data_end+0xf800d778>
1000d820:	2827883a 	mov	r19,r5
1000d824:	003f6806 	br	1000d5c8 <__alt_data_end+0xf800d5c8>
1000d828:	0009883a 	mov	r4,zero
1000d82c:	003fe406 	br	1000d7c0 <__alt_data_end+0xf800d7c0>
1000d830:	00800434 	movhi	r2,16
1000d834:	89400234 	orhi	r5,r17,8
1000d838:	10bfffc4 	addi	r2,r2,-1
1000d83c:	e00d883a 	mov	r6,fp
1000d840:	288a703a 	and	r5,r5,r2
1000d844:	003e5806 	br	1000d1a8 <__alt_data_end+0xf800d1a8>

1000d848 <__eqdf2>:
1000d848:	2804d53a 	srli	r2,r5,20
1000d84c:	3806d53a 	srli	r3,r7,20
1000d850:	02000434 	movhi	r8,16
1000d854:	423fffc4 	addi	r8,r8,-1
1000d858:	1081ffcc 	andi	r2,r2,2047
1000d85c:	0241ffc4 	movi	r9,2047
1000d860:	2a14703a 	and	r10,r5,r8
1000d864:	18c1ffcc 	andi	r3,r3,2047
1000d868:	3a10703a 	and	r8,r7,r8
1000d86c:	280ad7fa 	srli	r5,r5,31
1000d870:	380ed7fa 	srli	r7,r7,31
1000d874:	12400f26 	beq	r2,r9,1000d8b4 <__eqdf2+0x6c>
1000d878:	0241ffc4 	movi	r9,2047
1000d87c:	1a400326 	beq	r3,r9,1000d88c <__eqdf2+0x44>
1000d880:	10c00526 	beq	r2,r3,1000d898 <__eqdf2+0x50>
1000d884:	00800044 	movi	r2,1
1000d888:	f800283a 	ret
1000d88c:	4192b03a 	or	r9,r8,r6
1000d890:	483ffc1e 	bne	r9,zero,1000d884 <__alt_data_end+0xf800d884>
1000d894:	10fffb1e 	bne	r2,r3,1000d884 <__alt_data_end+0xf800d884>
1000d898:	523ffa1e 	bne	r10,r8,1000d884 <__alt_data_end+0xf800d884>
1000d89c:	21bff91e 	bne	r4,r6,1000d884 <__alt_data_end+0xf800d884>
1000d8a0:	29c00826 	beq	r5,r7,1000d8c4 <__eqdf2+0x7c>
1000d8a4:	103ff71e 	bne	r2,zero,1000d884 <__alt_data_end+0xf800d884>
1000d8a8:	5104b03a 	or	r2,r10,r4
1000d8ac:	1004c03a 	cmpne	r2,r2,zero
1000d8b0:	f800283a 	ret
1000d8b4:	5112b03a 	or	r9,r10,r4
1000d8b8:	483fef26 	beq	r9,zero,1000d878 <__alt_data_end+0xf800d878>
1000d8bc:	00800044 	movi	r2,1
1000d8c0:	f800283a 	ret
1000d8c4:	0005883a 	mov	r2,zero
1000d8c8:	f800283a 	ret

1000d8cc <__gedf2>:
1000d8cc:	2804d53a 	srli	r2,r5,20
1000d8d0:	3806d53a 	srli	r3,r7,20
1000d8d4:	02000434 	movhi	r8,16
1000d8d8:	423fffc4 	addi	r8,r8,-1
1000d8dc:	0241ffc4 	movi	r9,2047
1000d8e0:	1081ffcc 	andi	r2,r2,2047
1000d8e4:	2a14703a 	and	r10,r5,r8
1000d8e8:	1a46703a 	and	r3,r3,r9
1000d8ec:	3a10703a 	and	r8,r7,r8
1000d8f0:	280ad7fa 	srli	r5,r5,31
1000d8f4:	380ed7fa 	srli	r7,r7,31
1000d8f8:	12400b26 	beq	r2,r9,1000d928 <__gedf2+0x5c>
1000d8fc:	1a401626 	beq	r3,r9,1000d958 <__gedf2+0x8c>
1000d900:	10000c1e 	bne	r2,zero,1000d934 <__gedf2+0x68>
1000d904:	5112b03a 	or	r9,r10,r4
1000d908:	4813003a 	cmpeq	r9,r9,zero
1000d90c:	4817883a 	mov	r11,r9
1000d910:	18000c1e 	bne	r3,zero,1000d944 <__gedf2+0x78>
1000d914:	4198b03a 	or	r12,r8,r6
1000d918:	60000a1e 	bne	r12,zero,1000d944 <__gedf2+0x78>
1000d91c:	48001326 	beq	r9,zero,1000d96c <__gedf2+0xa0>
1000d920:	0005883a 	mov	r2,zero
1000d924:	f800283a 	ret
1000d928:	5112b03a 	or	r9,r10,r4
1000d92c:	4800191e 	bne	r9,zero,1000d994 <__gedf2+0xc8>
1000d930:	18800926 	beq	r3,r2,1000d958 <__gedf2+0x8c>
1000d934:	18000b1e 	bne	r3,zero,1000d964 <__gedf2+0x98>
1000d938:	4192b03a 	or	r9,r8,r6
1000d93c:	0017883a 	mov	r11,zero
1000d940:	48000a26 	beq	r9,zero,1000d96c <__gedf2+0xa0>
1000d944:	39c03fcc 	andi	r7,r7,255
1000d948:	58000726 	beq	r11,zero,1000d968 <__gedf2+0x9c>
1000d94c:	3800081e 	bne	r7,zero,1000d970 <__gedf2+0xa4>
1000d950:	00bfffc4 	movi	r2,-1
1000d954:	f800283a 	ret
1000d958:	4192b03a 	or	r9,r8,r6
1000d95c:	48000d1e 	bne	r9,zero,1000d994 <__gedf2+0xc8>
1000d960:	103fe826 	beq	r2,zero,1000d904 <__alt_data_end+0xf800d904>
1000d964:	39c03fcc 	andi	r7,r7,255
1000d968:	29c00326 	beq	r5,r7,1000d978 <__gedf2+0xac>
1000d96c:	283ff81e 	bne	r5,zero,1000d950 <__alt_data_end+0xf800d950>
1000d970:	00800044 	movi	r2,1
1000d974:	f800283a 	ret
1000d978:	18bffc16 	blt	r3,r2,1000d96c <__alt_data_end+0xf800d96c>
1000d97c:	10c00316 	blt	r2,r3,1000d98c <__gedf2+0xc0>
1000d980:	42bffa36 	bltu	r8,r10,1000d96c <__alt_data_end+0xf800d96c>
1000d984:	52000526 	beq	r10,r8,1000d99c <__gedf2+0xd0>
1000d988:	523fe52e 	bgeu	r10,r8,1000d920 <__alt_data_end+0xf800d920>
1000d98c:	283ff026 	beq	r5,zero,1000d950 <__alt_data_end+0xf800d950>
1000d990:	003ff706 	br	1000d970 <__alt_data_end+0xf800d970>
1000d994:	00bfff84 	movi	r2,-2
1000d998:	f800283a 	ret
1000d99c:	313ff336 	bltu	r6,r4,1000d96c <__alt_data_end+0xf800d96c>
1000d9a0:	21bfdf2e 	bgeu	r4,r6,1000d920 <__alt_data_end+0xf800d920>
1000d9a4:	283fea26 	beq	r5,zero,1000d950 <__alt_data_end+0xf800d950>
1000d9a8:	003ff106 	br	1000d970 <__alt_data_end+0xf800d970>

1000d9ac <__ledf2>:
1000d9ac:	2804d53a 	srli	r2,r5,20
1000d9b0:	3810d53a 	srli	r8,r7,20
1000d9b4:	00c00434 	movhi	r3,16
1000d9b8:	18ffffc4 	addi	r3,r3,-1
1000d9bc:	0241ffc4 	movi	r9,2047
1000d9c0:	1081ffcc 	andi	r2,r2,2047
1000d9c4:	28d4703a 	and	r10,r5,r3
1000d9c8:	4250703a 	and	r8,r8,r9
1000d9cc:	38c6703a 	and	r3,r7,r3
1000d9d0:	280ad7fa 	srli	r5,r5,31
1000d9d4:	380ed7fa 	srli	r7,r7,31
1000d9d8:	12400b26 	beq	r2,r9,1000da08 <__ledf2+0x5c>
1000d9dc:	42401926 	beq	r8,r9,1000da44 <__ledf2+0x98>
1000d9e0:	10000c1e 	bne	r2,zero,1000da14 <__ledf2+0x68>
1000d9e4:	5112b03a 	or	r9,r10,r4
1000d9e8:	4813003a 	cmpeq	r9,r9,zero
1000d9ec:	4817883a 	mov	r11,r9
1000d9f0:	40000f26 	beq	r8,zero,1000da30 <__ledf2+0x84>
1000d9f4:	39c03fcc 	andi	r7,r7,255
1000d9f8:	58001826 	beq	r11,zero,1000da5c <__ledf2+0xb0>
1000d9fc:	38000a1e 	bne	r7,zero,1000da28 <__ledf2+0x7c>
1000da00:	00bfffc4 	movi	r2,-1
1000da04:	f800283a 	ret
1000da08:	5112b03a 	or	r9,r10,r4
1000da0c:	48000f1e 	bne	r9,zero,1000da4c <__ledf2+0xa0>
1000da10:	40800c26 	beq	r8,r2,1000da44 <__ledf2+0x98>
1000da14:	4000101e 	bne	r8,zero,1000da58 <__ledf2+0xac>
1000da18:	1992b03a 	or	r9,r3,r6
1000da1c:	0017883a 	mov	r11,zero
1000da20:	483ff41e 	bne	r9,zero,1000d9f4 <__alt_data_end+0xf800d9f4>
1000da24:	283ff61e 	bne	r5,zero,1000da00 <__alt_data_end+0xf800da00>
1000da28:	00800044 	movi	r2,1
1000da2c:	f800283a 	ret
1000da30:	1998b03a 	or	r12,r3,r6
1000da34:	603fef1e 	bne	r12,zero,1000d9f4 <__alt_data_end+0xf800d9f4>
1000da38:	483ffa26 	beq	r9,zero,1000da24 <__alt_data_end+0xf800da24>
1000da3c:	0005883a 	mov	r2,zero
1000da40:	f800283a 	ret
1000da44:	1992b03a 	or	r9,r3,r6
1000da48:	48000226 	beq	r9,zero,1000da54 <__ledf2+0xa8>
1000da4c:	00800084 	movi	r2,2
1000da50:	f800283a 	ret
1000da54:	103fe326 	beq	r2,zero,1000d9e4 <__alt_data_end+0xf800d9e4>
1000da58:	39c03fcc 	andi	r7,r7,255
1000da5c:	29fff11e 	bne	r5,r7,1000da24 <__alt_data_end+0xf800da24>
1000da60:	40bff016 	blt	r8,r2,1000da24 <__alt_data_end+0xf800da24>
1000da64:	12000316 	blt	r2,r8,1000da74 <__ledf2+0xc8>
1000da68:	1abfee36 	bltu	r3,r10,1000da24 <__alt_data_end+0xf800da24>
1000da6c:	50c00326 	beq	r10,r3,1000da7c <__ledf2+0xd0>
1000da70:	50fff22e 	bgeu	r10,r3,1000da3c <__alt_data_end+0xf800da3c>
1000da74:	283fe226 	beq	r5,zero,1000da00 <__alt_data_end+0xf800da00>
1000da78:	003feb06 	br	1000da28 <__alt_data_end+0xf800da28>
1000da7c:	313fe936 	bltu	r6,r4,1000da24 <__alt_data_end+0xf800da24>
1000da80:	21bfee2e 	bgeu	r4,r6,1000da3c <__alt_data_end+0xf800da3c>
1000da84:	283fde26 	beq	r5,zero,1000da00 <__alt_data_end+0xf800da00>
1000da88:	003fe706 	br	1000da28 <__alt_data_end+0xf800da28>

1000da8c <__muldf3>:
1000da8c:	deffee04 	addi	sp,sp,-72
1000da90:	dd000c15 	stw	r20,48(sp)
1000da94:	2828d53a 	srli	r20,r5,20
1000da98:	dd400d15 	stw	r21,52(sp)
1000da9c:	282ad7fa 	srli	r21,r5,31
1000daa0:	dc000815 	stw	r16,32(sp)
1000daa4:	04000434 	movhi	r16,16
1000daa8:	ddc00f15 	stw	r23,60(sp)
1000daac:	dcc00b15 	stw	r19,44(sp)
1000dab0:	dc800a15 	stw	r18,40(sp)
1000dab4:	843fffc4 	addi	r16,r16,-1
1000dab8:	dfc01115 	stw	ra,68(sp)
1000dabc:	df001015 	stw	fp,64(sp)
1000dac0:	dd800e15 	stw	r22,56(sp)
1000dac4:	dc400915 	stw	r17,36(sp)
1000dac8:	a501ffcc 	andi	r20,r20,2047
1000dacc:	2025883a 	mov	r18,r4
1000dad0:	202f883a 	mov	r23,r4
1000dad4:	2c20703a 	and	r16,r5,r16
1000dad8:	a827883a 	mov	r19,r21
1000dadc:	aa403fcc 	andi	r9,r21,255
1000dae0:	a0005926 	beq	r20,zero,1000dc48 <__muldf3+0x1bc>
1000dae4:	0081ffc4 	movi	r2,2047
1000dae8:	a0803426 	beq	r20,r2,1000dbbc <__muldf3+0x130>
1000daec:	84000434 	orhi	r16,r16,16
1000daf0:	2004d77a 	srli	r2,r4,29
1000daf4:	802090fa 	slli	r16,r16,3
1000daf8:	202e90fa 	slli	r23,r4,3
1000dafc:	a53f0044 	addi	r20,r20,-1023
1000db00:	80a0b03a 	or	r16,r16,r2
1000db04:	000b883a 	mov	r5,zero
1000db08:	0039883a 	mov	fp,zero
1000db0c:	3806d53a 	srli	r3,r7,20
1000db10:	382cd7fa 	srli	r22,r7,31
1000db14:	00800434 	movhi	r2,16
1000db18:	10bfffc4 	addi	r2,r2,-1
1000db1c:	18c1ffcc 	andi	r3,r3,2047
1000db20:	3025883a 	mov	r18,r6
1000db24:	38a2703a 	and	r17,r7,r2
1000db28:	b2803fcc 	andi	r10,r22,255
1000db2c:	18006426 	beq	r3,zero,1000dcc0 <__muldf3+0x234>
1000db30:	0081ffc4 	movi	r2,2047
1000db34:	18805c26 	beq	r3,r2,1000dca8 <__muldf3+0x21c>
1000db38:	8c400434 	orhi	r17,r17,16
1000db3c:	3004d77a 	srli	r2,r6,29
1000db40:	882290fa 	slli	r17,r17,3
1000db44:	302490fa 	slli	r18,r6,3
1000db48:	18ff0044 	addi	r3,r3,-1023
1000db4c:	88a2b03a 	or	r17,r17,r2
1000db50:	000f883a 	mov	r7,zero
1000db54:	394ab03a 	or	r5,r7,r5
1000db58:	280a90ba 	slli	r5,r5,2
1000db5c:	00840074 	movhi	r2,4097
1000db60:	10b6df04 	addi	r2,r2,-9348
1000db64:	288b883a 	add	r5,r5,r2
1000db68:	28800017 	ldw	r2,0(r5)
1000db6c:	a0c7883a 	add	r3,r20,r3
1000db70:	b54cf03a 	xor	r6,r22,r21
1000db74:	1a000044 	addi	r8,r3,1
1000db78:	1000683a 	jmp	r2
1000db7c:	1000ddc0 	call	11000ddc <_gp+0xfe524c>
1000db80:	1000ddac 	andhi	zero,r2,886
1000db84:	1000ddac 	andhi	zero,r2,886
1000db88:	1000dd98 	cmpnei	zero,r2,886
1000db8c:	1000dbd8 	cmpnei	zero,r2,879
1000db90:	1000dbd8 	cmpnei	zero,r2,879
1000db94:	1000dd80 	call	11000dd8 <_gp+0xfe5248>
1000db98:	1000dd98 	cmpnei	zero,r2,886
1000db9c:	1000dbd8 	cmpnei	zero,r2,879
1000dba0:	1000dd80 	call	11000dd8 <_gp+0xfe5248>
1000dba4:	1000dbd8 	cmpnei	zero,r2,879
1000dba8:	1000dd98 	cmpnei	zero,r2,886
1000dbac:	1000dbdc 	xori	zero,r2,879
1000dbb0:	1000dbdc 	xori	zero,r2,879
1000dbb4:	1000dbdc 	xori	zero,r2,879
1000dbb8:	1000e0fc 	xorhi	zero,r2,899
1000dbbc:	8104b03a 	or	r2,r16,r4
1000dbc0:	10006c1e 	bne	r2,zero,1000dd74 <__muldf3+0x2e8>
1000dbc4:	01400204 	movi	r5,8
1000dbc8:	0021883a 	mov	r16,zero
1000dbcc:	002f883a 	mov	r23,zero
1000dbd0:	07000084 	movi	fp,2
1000dbd4:	003fcd06 	br	1000db0c <__alt_data_end+0xf800db0c>
1000dbd8:	3013883a 	mov	r9,r6
1000dbdc:	00800084 	movi	r2,2
1000dbe0:	e080501e 	bne	fp,r2,1000dd24 <__muldf3+0x298>
1000dbe4:	4cc0004c 	andi	r19,r9,1
1000dbe8:	0101ffc4 	movi	r4,2047
1000dbec:	0021883a 	mov	r16,zero
1000dbf0:	002f883a 	mov	r23,zero
1000dbf4:	2008953a 	slli	r4,r4,20
1000dbf8:	98c03fcc 	andi	r3,r19,255
1000dbfc:	04400434 	movhi	r17,16
1000dc00:	8c7fffc4 	addi	r17,r17,-1
1000dc04:	180697fa 	slli	r3,r3,31
1000dc08:	8460703a 	and	r16,r16,r17
1000dc0c:	8120b03a 	or	r16,r16,r4
1000dc10:	80c6b03a 	or	r3,r16,r3
1000dc14:	b805883a 	mov	r2,r23
1000dc18:	dfc01117 	ldw	ra,68(sp)
1000dc1c:	df001017 	ldw	fp,64(sp)
1000dc20:	ddc00f17 	ldw	r23,60(sp)
1000dc24:	dd800e17 	ldw	r22,56(sp)
1000dc28:	dd400d17 	ldw	r21,52(sp)
1000dc2c:	dd000c17 	ldw	r20,48(sp)
1000dc30:	dcc00b17 	ldw	r19,44(sp)
1000dc34:	dc800a17 	ldw	r18,40(sp)
1000dc38:	dc400917 	ldw	r17,36(sp)
1000dc3c:	dc000817 	ldw	r16,32(sp)
1000dc40:	dec01204 	addi	sp,sp,72
1000dc44:	f800283a 	ret
1000dc48:	8104b03a 	or	r2,r16,r4
1000dc4c:	10004426 	beq	r2,zero,1000dd60 <__muldf3+0x2d4>
1000dc50:	80014b26 	beq	r16,zero,1000e180 <__muldf3+0x6f4>
1000dc54:	8009883a 	mov	r4,r16
1000dc58:	d9800715 	stw	r6,28(sp)
1000dc5c:	d9c00215 	stw	r7,8(sp)
1000dc60:	da400415 	stw	r9,16(sp)
1000dc64:	000edc40 	call	1000edc4 <__clzsi2>
1000dc68:	d9800717 	ldw	r6,28(sp)
1000dc6c:	d9c00217 	ldw	r7,8(sp)
1000dc70:	da400417 	ldw	r9,16(sp)
1000dc74:	1007883a 	mov	r3,r2
1000dc78:	01000a04 	movi	r4,40
1000dc7c:	1dfffe04 	addi	r23,r3,-8
1000dc80:	20c9c83a 	sub	r4,r4,r3
1000dc84:	85e0983a 	sll	r16,r16,r23
1000dc88:	9108d83a 	srl	r4,r18,r4
1000dc8c:	95ee983a 	sll	r23,r18,r23
1000dc90:	2420b03a 	or	r16,r4,r16
1000dc94:	053f0344 	movi	r20,-1011
1000dc98:	a0e9c83a 	sub	r20,r20,r3
1000dc9c:	000b883a 	mov	r5,zero
1000dca0:	0039883a 	mov	fp,zero
1000dca4:	003f9906 	br	1000db0c <__alt_data_end+0xf800db0c>
1000dca8:	8984b03a 	or	r2,r17,r6
1000dcac:	10002a1e 	bne	r2,zero,1000dd58 <__muldf3+0x2cc>
1000dcb0:	0023883a 	mov	r17,zero
1000dcb4:	0025883a 	mov	r18,zero
1000dcb8:	01c00084 	movi	r7,2
1000dcbc:	003fa506 	br	1000db54 <__alt_data_end+0xf800db54>
1000dcc0:	8984b03a 	or	r2,r17,r6
1000dcc4:	10002026 	beq	r2,zero,1000dd48 <__muldf3+0x2bc>
1000dcc8:	88011c26 	beq	r17,zero,1000e13c <__muldf3+0x6b0>
1000dccc:	8809883a 	mov	r4,r17
1000dcd0:	d9400215 	stw	r5,8(sp)
1000dcd4:	d9800715 	stw	r6,28(sp)
1000dcd8:	da400415 	stw	r9,16(sp)
1000dcdc:	da800315 	stw	r10,12(sp)
1000dce0:	000edc40 	call	1000edc4 <__clzsi2>
1000dce4:	d9400217 	ldw	r5,8(sp)
1000dce8:	d9800717 	ldw	r6,28(sp)
1000dcec:	da400417 	ldw	r9,16(sp)
1000dcf0:	da800317 	ldw	r10,12(sp)
1000dcf4:	1007883a 	mov	r3,r2
1000dcf8:	01000a04 	movi	r4,40
1000dcfc:	1cbffe04 	addi	r18,r3,-8
1000dd00:	20c9c83a 	sub	r4,r4,r3
1000dd04:	8ca2983a 	sll	r17,r17,r18
1000dd08:	3108d83a 	srl	r4,r6,r4
1000dd0c:	34a4983a 	sll	r18,r6,r18
1000dd10:	2462b03a 	or	r17,r4,r17
1000dd14:	00bf0344 	movi	r2,-1011
1000dd18:	10c7c83a 	sub	r3,r2,r3
1000dd1c:	000f883a 	mov	r7,zero
1000dd20:	003f8c06 	br	1000db54 <__alt_data_end+0xf800db54>
1000dd24:	008000c4 	movi	r2,3
1000dd28:	e0816d26 	beq	fp,r2,1000e2e0 <__muldf3+0x854>
1000dd2c:	00800044 	movi	r2,1
1000dd30:	e081321e 	bne	fp,r2,1000e1fc <__muldf3+0x770>
1000dd34:	48a6703a 	and	r19,r9,r2
1000dd38:	0009883a 	mov	r4,zero
1000dd3c:	0021883a 	mov	r16,zero
1000dd40:	002f883a 	mov	r23,zero
1000dd44:	003fab06 	br	1000dbf4 <__alt_data_end+0xf800dbf4>
1000dd48:	0023883a 	mov	r17,zero
1000dd4c:	0025883a 	mov	r18,zero
1000dd50:	01c00044 	movi	r7,1
1000dd54:	003f7f06 	br	1000db54 <__alt_data_end+0xf800db54>
1000dd58:	01c000c4 	movi	r7,3
1000dd5c:	003f7d06 	br	1000db54 <__alt_data_end+0xf800db54>
1000dd60:	01400104 	movi	r5,4
1000dd64:	0021883a 	mov	r16,zero
1000dd68:	002f883a 	mov	r23,zero
1000dd6c:	07000044 	movi	fp,1
1000dd70:	003f6606 	br	1000db0c <__alt_data_end+0xf800db0c>
1000dd74:	01400304 	movi	r5,12
1000dd78:	070000c4 	movi	fp,3
1000dd7c:	003f6306 	br	1000db0c <__alt_data_end+0xf800db0c>
1000dd80:	04000434 	movhi	r16,16
1000dd84:	0027883a 	mov	r19,zero
1000dd88:	843fffc4 	addi	r16,r16,-1
1000dd8c:	05ffffc4 	movi	r23,-1
1000dd90:	0101ffc4 	movi	r4,2047
1000dd94:	003f9706 	br	1000dbf4 <__alt_data_end+0xf800dbf4>
1000dd98:	8821883a 	mov	r16,r17
1000dd9c:	902f883a 	mov	r23,r18
1000dda0:	5013883a 	mov	r9,r10
1000dda4:	3839883a 	mov	fp,r7
1000dda8:	003f8c06 	br	1000dbdc <__alt_data_end+0xf800dbdc>
1000ddac:	8821883a 	mov	r16,r17
1000ddb0:	902f883a 	mov	r23,r18
1000ddb4:	3013883a 	mov	r9,r6
1000ddb8:	3839883a 	mov	fp,r7
1000ddbc:	003f8706 	br	1000dbdc <__alt_data_end+0xf800dbdc>
1000ddc0:	b82ad43a 	srli	r21,r23,16
1000ddc4:	9038d43a 	srli	fp,r18,16
1000ddc8:	bdffffcc 	andi	r23,r23,65535
1000ddcc:	94bfffcc 	andi	r18,r18,65535
1000ddd0:	9009883a 	mov	r4,r18
1000ddd4:	b80b883a 	mov	r5,r23
1000ddd8:	d8c00515 	stw	r3,20(sp)
1000dddc:	d9800715 	stw	r6,28(sp)
1000dde0:	da000615 	stw	r8,24(sp)
1000dde4:	000c6040 	call	1000c604 <__mulsi3>
1000dde8:	9009883a 	mov	r4,r18
1000ddec:	a80b883a 	mov	r5,r21
1000ddf0:	1029883a 	mov	r20,r2
1000ddf4:	000c6040 	call	1000c604 <__mulsi3>
1000ddf8:	e009883a 	mov	r4,fp
1000ddfc:	a80b883a 	mov	r5,r21
1000de00:	102d883a 	mov	r22,r2
1000de04:	000c6040 	call	1000c604 <__mulsi3>
1000de08:	e009883a 	mov	r4,fp
1000de0c:	b80b883a 	mov	r5,r23
1000de10:	1027883a 	mov	r19,r2
1000de14:	000c6040 	call	1000c604 <__mulsi3>
1000de18:	a008d43a 	srli	r4,r20,16
1000de1c:	b085883a 	add	r2,r22,r2
1000de20:	d8c00517 	ldw	r3,20(sp)
1000de24:	110f883a 	add	r7,r2,r4
1000de28:	d9800717 	ldw	r6,28(sp)
1000de2c:	da000617 	ldw	r8,24(sp)
1000de30:	3d80022e 	bgeu	r7,r22,1000de3c <__muldf3+0x3b0>
1000de34:	00800074 	movhi	r2,1
1000de38:	98a7883a 	add	r19,r19,r2
1000de3c:	3804943a 	slli	r2,r7,16
1000de40:	380ed43a 	srli	r7,r7,16
1000de44:	882cd43a 	srli	r22,r17,16
1000de48:	a53fffcc 	andi	r20,r20,65535
1000de4c:	8c7fffcc 	andi	r17,r17,65535
1000de50:	1529883a 	add	r20,r2,r20
1000de54:	8809883a 	mov	r4,r17
1000de58:	b80b883a 	mov	r5,r23
1000de5c:	d8c00515 	stw	r3,20(sp)
1000de60:	d9800715 	stw	r6,28(sp)
1000de64:	da000615 	stw	r8,24(sp)
1000de68:	d9c00015 	stw	r7,0(sp)
1000de6c:	dd000115 	stw	r20,4(sp)
1000de70:	000c6040 	call	1000c604 <__mulsi3>
1000de74:	a80b883a 	mov	r5,r21
1000de78:	8809883a 	mov	r4,r17
1000de7c:	d8800415 	stw	r2,16(sp)
1000de80:	000c6040 	call	1000c604 <__mulsi3>
1000de84:	a80b883a 	mov	r5,r21
1000de88:	b009883a 	mov	r4,r22
1000de8c:	1029883a 	mov	r20,r2
1000de90:	000c6040 	call	1000c604 <__mulsi3>
1000de94:	b009883a 	mov	r4,r22
1000de98:	b80b883a 	mov	r5,r23
1000de9c:	102b883a 	mov	r21,r2
1000dea0:	000c6040 	call	1000c604 <__mulsi3>
1000dea4:	da400417 	ldw	r9,16(sp)
1000dea8:	a085883a 	add	r2,r20,r2
1000deac:	d8c00517 	ldw	r3,20(sp)
1000deb0:	4808d43a 	srli	r4,r9,16
1000deb4:	d9800717 	ldw	r6,28(sp)
1000deb8:	da000617 	ldw	r8,24(sp)
1000debc:	1109883a 	add	r4,r2,r4
1000dec0:	2500022e 	bgeu	r4,r20,1000decc <__muldf3+0x440>
1000dec4:	00800074 	movhi	r2,1
1000dec8:	a8ab883a 	add	r21,r21,r2
1000decc:	200e943a 	slli	r7,r4,16
1000ded0:	2004d43a 	srli	r2,r4,16
1000ded4:	802ed43a 	srli	r23,r16,16
1000ded8:	843fffcc 	andi	r16,r16,65535
1000dedc:	4d3fffcc 	andi	r20,r9,65535
1000dee0:	9009883a 	mov	r4,r18
1000dee4:	800b883a 	mov	r5,r16
1000dee8:	3d29883a 	add	r20,r7,r20
1000deec:	d8c00515 	stw	r3,20(sp)
1000def0:	d9800715 	stw	r6,28(sp)
1000def4:	da000615 	stw	r8,24(sp)
1000def8:	a8ab883a 	add	r21,r21,r2
1000defc:	000c6040 	call	1000c604 <__mulsi3>
1000df00:	9009883a 	mov	r4,r18
1000df04:	b80b883a 	mov	r5,r23
1000df08:	d8800315 	stw	r2,12(sp)
1000df0c:	000c6040 	call	1000c604 <__mulsi3>
1000df10:	e009883a 	mov	r4,fp
1000df14:	b80b883a 	mov	r5,r23
1000df18:	1025883a 	mov	r18,r2
1000df1c:	000c6040 	call	1000c604 <__mulsi3>
1000df20:	e009883a 	mov	r4,fp
1000df24:	800b883a 	mov	r5,r16
1000df28:	d8800215 	stw	r2,8(sp)
1000df2c:	000c6040 	call	1000c604 <__mulsi3>
1000df30:	da800317 	ldw	r10,12(sp)
1000df34:	d9400017 	ldw	r5,0(sp)
1000df38:	9085883a 	add	r2,r18,r2
1000df3c:	5008d43a 	srli	r4,r10,16
1000df40:	a153883a 	add	r9,r20,r5
1000df44:	d8c00517 	ldw	r3,20(sp)
1000df48:	1109883a 	add	r4,r2,r4
1000df4c:	d9800717 	ldw	r6,28(sp)
1000df50:	da000617 	ldw	r8,24(sp)
1000df54:	dac00217 	ldw	r11,8(sp)
1000df58:	2480022e 	bgeu	r4,r18,1000df64 <__muldf3+0x4d8>
1000df5c:	00800074 	movhi	r2,1
1000df60:	5897883a 	add	r11,r11,r2
1000df64:	200e943a 	slli	r7,r4,16
1000df68:	2038d43a 	srli	fp,r4,16
1000df6c:	52bfffcc 	andi	r10,r10,65535
1000df70:	3a8f883a 	add	r7,r7,r10
1000df74:	8809883a 	mov	r4,r17
1000df78:	800b883a 	mov	r5,r16
1000df7c:	d8c00515 	stw	r3,20(sp)
1000df80:	d9800715 	stw	r6,28(sp)
1000df84:	d9c00215 	stw	r7,8(sp)
1000df88:	da000615 	stw	r8,24(sp)
1000df8c:	da400415 	stw	r9,16(sp)
1000df90:	5f39883a 	add	fp,r11,fp
1000df94:	000c6040 	call	1000c604 <__mulsi3>
1000df98:	8809883a 	mov	r4,r17
1000df9c:	b80b883a 	mov	r5,r23
1000dfa0:	1025883a 	mov	r18,r2
1000dfa4:	000c6040 	call	1000c604 <__mulsi3>
1000dfa8:	b009883a 	mov	r4,r22
1000dfac:	b80b883a 	mov	r5,r23
1000dfb0:	d8800315 	stw	r2,12(sp)
1000dfb4:	000c6040 	call	1000c604 <__mulsi3>
1000dfb8:	b009883a 	mov	r4,r22
1000dfbc:	800b883a 	mov	r5,r16
1000dfc0:	1023883a 	mov	r17,r2
1000dfc4:	000c6040 	call	1000c604 <__mulsi3>
1000dfc8:	da800317 	ldw	r10,12(sp)
1000dfcc:	9008d43a 	srli	r4,r18,16
1000dfd0:	d8c00517 	ldw	r3,20(sp)
1000dfd4:	5085883a 	add	r2,r10,r2
1000dfd8:	1109883a 	add	r4,r2,r4
1000dfdc:	d9800717 	ldw	r6,28(sp)
1000dfe0:	d9c00217 	ldw	r7,8(sp)
1000dfe4:	da000617 	ldw	r8,24(sp)
1000dfe8:	da400417 	ldw	r9,16(sp)
1000dfec:	2280022e 	bgeu	r4,r10,1000dff8 <__muldf3+0x56c>
1000dff0:	00800074 	movhi	r2,1
1000dff4:	88a3883a 	add	r17,r17,r2
1000dff8:	2004943a 	slli	r2,r4,16
1000dffc:	94bfffcc 	andi	r18,r18,65535
1000e000:	4ce7883a 	add	r19,r9,r19
1000e004:	14a5883a 	add	r18,r2,r18
1000e008:	9d29803a 	cmpltu	r20,r19,r20
1000e00c:	9565883a 	add	r18,r18,r21
1000e010:	9505883a 	add	r2,r18,r20
1000e014:	99e7883a 	add	r19,r19,r7
1000e018:	99cf803a 	cmpltu	r7,r19,r7
1000e01c:	e08b883a 	add	r5,fp,r2
1000e020:	2008d43a 	srli	r4,r4,16
1000e024:	29ef883a 	add	r23,r5,r7
1000e028:	1529803a 	cmpltu	r20,r2,r20
1000e02c:	956b803a 	cmpltu	r21,r18,r21
1000e030:	b9cf803a 	cmpltu	r7,r23,r7
1000e034:	a564b03a 	or	r18,r20,r21
1000e038:	2f39803a 	cmpltu	fp,r5,fp
1000e03c:	9125883a 	add	r18,r18,r4
1000e040:	3f38b03a 	or	fp,r7,fp
1000e044:	9725883a 	add	r18,r18,fp
1000e048:	9804927a 	slli	r2,r19,9
1000e04c:	9463883a 	add	r17,r18,r17
1000e050:	d9000117 	ldw	r4,4(sp)
1000e054:	b820d5fa 	srli	r16,r23,23
1000e058:	8822927a 	slli	r17,r17,9
1000e05c:	9826d5fa 	srli	r19,r19,23
1000e060:	1104b03a 	or	r2,r2,r4
1000e064:	b82e927a 	slli	r23,r23,9
1000e068:	1004c03a 	cmpne	r2,r2,zero
1000e06c:	8c20b03a 	or	r16,r17,r16
1000e070:	14e6b03a 	or	r19,r2,r19
1000e074:	8080402c 	andhi	r2,r16,256
1000e078:	9deeb03a 	or	r23,r19,r23
1000e07c:	10000726 	beq	r2,zero,1000e09c <__muldf3+0x610>
1000e080:	b804d07a 	srli	r2,r23,1
1000e084:	800697fa 	slli	r3,r16,31
1000e088:	bdc0004c 	andi	r23,r23,1
1000e08c:	8020d07a 	srli	r16,r16,1
1000e090:	b8aeb03a 	or	r23,r23,r2
1000e094:	b8eeb03a 	or	r23,r23,r3
1000e098:	4007883a 	mov	r3,r8
1000e09c:	1900ffc4 	addi	r4,r3,1023
1000e0a0:	01004d0e 	bge	zero,r4,1000e1d8 <__muldf3+0x74c>
1000e0a4:	b88001cc 	andi	r2,r23,7
1000e0a8:	10000726 	beq	r2,zero,1000e0c8 <__muldf3+0x63c>
1000e0ac:	b94003cc 	andi	r5,r23,15
1000e0b0:	00800104 	movi	r2,4
1000e0b4:	28800426 	beq	r5,r2,1000e0c8 <__muldf3+0x63c>
1000e0b8:	b885883a 	add	r2,r23,r2
1000e0bc:	15ef803a 	cmpltu	r23,r2,r23
1000e0c0:	85e1883a 	add	r16,r16,r23
1000e0c4:	102f883a 	mov	r23,r2
1000e0c8:	8080402c 	andhi	r2,r16,256
1000e0cc:	10000426 	beq	r2,zero,1000e0e0 <__muldf3+0x654>
1000e0d0:	00bfc034 	movhi	r2,65280
1000e0d4:	10bfffc4 	addi	r2,r2,-1
1000e0d8:	19010004 	addi	r4,r3,1024
1000e0dc:	80a0703a 	and	r16,r16,r2
1000e0e0:	0081ff84 	movi	r2,2046
1000e0e4:	1100340e 	bge	r2,r4,1000e1b8 <__muldf3+0x72c>
1000e0e8:	34c0004c 	andi	r19,r6,1
1000e0ec:	0101ffc4 	movi	r4,2047
1000e0f0:	0021883a 	mov	r16,zero
1000e0f4:	002f883a 	mov	r23,zero
1000e0f8:	003ebe06 	br	1000dbf4 <__alt_data_end+0xf800dbf4>
1000e0fc:	8080022c 	andhi	r2,r16,8
1000e100:	10000926 	beq	r2,zero,1000e128 <__muldf3+0x69c>
1000e104:	8880022c 	andhi	r2,r17,8
1000e108:	1000071e 	bne	r2,zero,1000e128 <__muldf3+0x69c>
1000e10c:	00800434 	movhi	r2,16
1000e110:	8c000234 	orhi	r16,r17,8
1000e114:	10bfffc4 	addi	r2,r2,-1
1000e118:	b027883a 	mov	r19,r22
1000e11c:	80a0703a 	and	r16,r16,r2
1000e120:	902f883a 	mov	r23,r18
1000e124:	003f1a06 	br	1000dd90 <__alt_data_end+0xf800dd90>
1000e128:	00800434 	movhi	r2,16
1000e12c:	84000234 	orhi	r16,r16,8
1000e130:	10bfffc4 	addi	r2,r2,-1
1000e134:	80a0703a 	and	r16,r16,r2
1000e138:	003f1506 	br	1000dd90 <__alt_data_end+0xf800dd90>
1000e13c:	3009883a 	mov	r4,r6
1000e140:	d9400215 	stw	r5,8(sp)
1000e144:	d9800715 	stw	r6,28(sp)
1000e148:	da400415 	stw	r9,16(sp)
1000e14c:	da800315 	stw	r10,12(sp)
1000e150:	000edc40 	call	1000edc4 <__clzsi2>
1000e154:	10c00804 	addi	r3,r2,32
1000e158:	010009c4 	movi	r4,39
1000e15c:	d9400217 	ldw	r5,8(sp)
1000e160:	d9800717 	ldw	r6,28(sp)
1000e164:	da400417 	ldw	r9,16(sp)
1000e168:	da800317 	ldw	r10,12(sp)
1000e16c:	20fee20e 	bge	r4,r3,1000dcf8 <__alt_data_end+0xf800dcf8>
1000e170:	147ffe04 	addi	r17,r2,-8
1000e174:	9462983a 	sll	r17,r18,r17
1000e178:	0025883a 	mov	r18,zero
1000e17c:	003ee506 	br	1000dd14 <__alt_data_end+0xf800dd14>
1000e180:	d9800715 	stw	r6,28(sp)
1000e184:	d9c00215 	stw	r7,8(sp)
1000e188:	da400415 	stw	r9,16(sp)
1000e18c:	000edc40 	call	1000edc4 <__clzsi2>
1000e190:	10c00804 	addi	r3,r2,32
1000e194:	010009c4 	movi	r4,39
1000e198:	d9800717 	ldw	r6,28(sp)
1000e19c:	d9c00217 	ldw	r7,8(sp)
1000e1a0:	da400417 	ldw	r9,16(sp)
1000e1a4:	20feb40e 	bge	r4,r3,1000dc78 <__alt_data_end+0xf800dc78>
1000e1a8:	143ffe04 	addi	r16,r2,-8
1000e1ac:	9420983a 	sll	r16,r18,r16
1000e1b0:	002f883a 	mov	r23,zero
1000e1b4:	003eb706 	br	1000dc94 <__alt_data_end+0xf800dc94>
1000e1b8:	8004977a 	slli	r2,r16,29
1000e1bc:	b82ed0fa 	srli	r23,r23,3
1000e1c0:	8020927a 	slli	r16,r16,9
1000e1c4:	2101ffcc 	andi	r4,r4,2047
1000e1c8:	15eeb03a 	or	r23,r2,r23
1000e1cc:	8020d33a 	srli	r16,r16,12
1000e1d0:	34c0004c 	andi	r19,r6,1
1000e1d4:	003e8706 	br	1000dbf4 <__alt_data_end+0xf800dbf4>
1000e1d8:	00bf0084 	movi	r2,-1022
1000e1dc:	10c5c83a 	sub	r2,r2,r3
1000e1e0:	01000e04 	movi	r4,56
1000e1e4:	2080080e 	bge	r4,r2,1000e208 <__muldf3+0x77c>
1000e1e8:	34c0004c 	andi	r19,r6,1
1000e1ec:	0009883a 	mov	r4,zero
1000e1f0:	0021883a 	mov	r16,zero
1000e1f4:	002f883a 	mov	r23,zero
1000e1f8:	003e7e06 	br	1000dbf4 <__alt_data_end+0xf800dbf4>
1000e1fc:	4007883a 	mov	r3,r8
1000e200:	480d883a 	mov	r6,r9
1000e204:	003fa506 	br	1000e09c <__alt_data_end+0xf800e09c>
1000e208:	010007c4 	movi	r4,31
1000e20c:	20801816 	blt	r4,r2,1000e270 <__muldf3+0x7e4>
1000e210:	18c10784 	addi	r3,r3,1054
1000e214:	80c8983a 	sll	r4,r16,r3
1000e218:	b88ad83a 	srl	r5,r23,r2
1000e21c:	b8c6983a 	sll	r3,r23,r3
1000e220:	80a0d83a 	srl	r16,r16,r2
1000e224:	2908b03a 	or	r4,r5,r4
1000e228:	1804c03a 	cmpne	r2,r3,zero
1000e22c:	2088b03a 	or	r4,r4,r2
1000e230:	208001cc 	andi	r2,r4,7
1000e234:	10000726 	beq	r2,zero,1000e254 <__muldf3+0x7c8>
1000e238:	20c003cc 	andi	r3,r4,15
1000e23c:	00800104 	movi	r2,4
1000e240:	18800426 	beq	r3,r2,1000e254 <__muldf3+0x7c8>
1000e244:	20c00104 	addi	r3,r4,4
1000e248:	1905803a 	cmpltu	r2,r3,r4
1000e24c:	80a1883a 	add	r16,r16,r2
1000e250:	1809883a 	mov	r4,r3
1000e254:	8080202c 	andhi	r2,r16,128
1000e258:	10001b26 	beq	r2,zero,1000e2c8 <__muldf3+0x83c>
1000e25c:	34c0004c 	andi	r19,r6,1
1000e260:	01000044 	movi	r4,1
1000e264:	0021883a 	mov	r16,zero
1000e268:	002f883a 	mov	r23,zero
1000e26c:	003e6106 	br	1000dbf4 <__alt_data_end+0xf800dbf4>
1000e270:	013ef884 	movi	r4,-1054
1000e274:	20c9c83a 	sub	r4,r4,r3
1000e278:	01400804 	movi	r5,32
1000e27c:	8108d83a 	srl	r4,r16,r4
1000e280:	11401526 	beq	r2,r5,1000e2d8 <__muldf3+0x84c>
1000e284:	18c10f84 	addi	r3,r3,1086
1000e288:	80e0983a 	sll	r16,r16,r3
1000e28c:	85eeb03a 	or	r23,r16,r23
1000e290:	b804c03a 	cmpne	r2,r23,zero
1000e294:	1108b03a 	or	r4,r2,r4
1000e298:	20c001cc 	andi	r3,r4,7
1000e29c:	1800061e 	bne	r3,zero,1000e2b8 <__muldf3+0x82c>
1000e2a0:	0021883a 	mov	r16,zero
1000e2a4:	202ed0fa 	srli	r23,r4,3
1000e2a8:	34c0004c 	andi	r19,r6,1
1000e2ac:	0009883a 	mov	r4,zero
1000e2b0:	b8eeb03a 	or	r23,r23,r3
1000e2b4:	003e4f06 	br	1000dbf4 <__alt_data_end+0xf800dbf4>
1000e2b8:	20c003cc 	andi	r3,r4,15
1000e2bc:	00800104 	movi	r2,4
1000e2c0:	0021883a 	mov	r16,zero
1000e2c4:	18bfdf1e 	bne	r3,r2,1000e244 <__alt_data_end+0xf800e244>
1000e2c8:	8004927a 	slli	r2,r16,9
1000e2cc:	8006977a 	slli	r3,r16,29
1000e2d0:	1020d33a 	srli	r16,r2,12
1000e2d4:	003ff306 	br	1000e2a4 <__alt_data_end+0xf800e2a4>
1000e2d8:	0021883a 	mov	r16,zero
1000e2dc:	003feb06 	br	1000e28c <__alt_data_end+0xf800e28c>
1000e2e0:	00800434 	movhi	r2,16
1000e2e4:	84000234 	orhi	r16,r16,8
1000e2e8:	10bfffc4 	addi	r2,r2,-1
1000e2ec:	4cc0004c 	andi	r19,r9,1
1000e2f0:	80a0703a 	and	r16,r16,r2
1000e2f4:	003ea606 	br	1000dd90 <__alt_data_end+0xf800dd90>

1000e2f8 <__subdf3>:
1000e2f8:	00c00434 	movhi	r3,16
1000e2fc:	18ffffc4 	addi	r3,r3,-1
1000e300:	defffb04 	addi	sp,sp,-20
1000e304:	28d2703a 	and	r9,r5,r3
1000e308:	3814d53a 	srli	r10,r7,20
1000e30c:	38c6703a 	and	r3,r7,r3
1000e310:	3004d77a 	srli	r2,r6,29
1000e314:	dc800215 	stw	r18,8(sp)
1000e318:	dc000015 	stw	r16,0(sp)
1000e31c:	2824d7fa 	srli	r18,r5,31
1000e320:	2820d53a 	srli	r16,r5,20
1000e324:	481290fa 	slli	r9,r9,3
1000e328:	200ad77a 	srli	r5,r4,29
1000e32c:	180690fa 	slli	r3,r3,3
1000e330:	dc400115 	stw	r17,4(sp)
1000e334:	dfc00415 	stw	ra,16(sp)
1000e338:	202290fa 	slli	r17,r4,3
1000e33c:	dcc00315 	stw	r19,12(sp)
1000e340:	5281ffcc 	andi	r10,r10,2047
1000e344:	0101ffc4 	movi	r4,2047
1000e348:	9011883a 	mov	r8,r18
1000e34c:	8401ffcc 	andi	r16,r16,2047
1000e350:	94803fcc 	andi	r18,r18,255
1000e354:	494ab03a 	or	r5,r9,r5
1000e358:	380ed7fa 	srli	r7,r7,31
1000e35c:	1886b03a 	or	r3,r3,r2
1000e360:	300c90fa 	slli	r6,r6,3
1000e364:	51009026 	beq	r10,r4,1000e5a8 <__subdf3+0x2b0>
1000e368:	39c0005c 	xori	r7,r7,1
1000e36c:	8285c83a 	sub	r2,r16,r10
1000e370:	91c06f26 	beq	r18,r7,1000e530 <__subdf3+0x238>
1000e374:	0080b10e 	bge	zero,r2,1000e63c <__subdf3+0x344>
1000e378:	50002a1e 	bne	r10,zero,1000e424 <__subdf3+0x12c>
1000e37c:	1988b03a 	or	r4,r3,r6
1000e380:	2000941e 	bne	r4,zero,1000e5d4 <__subdf3+0x2dc>
1000e384:	888001cc 	andi	r2,r17,7
1000e388:	10005b26 	beq	r2,zero,1000e4f8 <__subdf3+0x200>
1000e38c:	88c003cc 	andi	r3,r17,15
1000e390:	00800104 	movi	r2,4
1000e394:	18805826 	beq	r3,r2,1000e4f8 <__subdf3+0x200>
1000e398:	88c00104 	addi	r3,r17,4
1000e39c:	1c63803a 	cmpltu	r17,r3,r17
1000e3a0:	2c4b883a 	add	r5,r5,r17
1000e3a4:	2880202c 	andhi	r2,r5,128
1000e3a8:	9200004c 	andi	r8,r18,1
1000e3ac:	1823883a 	mov	r17,r3
1000e3b0:	10005426 	beq	r2,zero,1000e504 <__subdf3+0x20c>
1000e3b4:	84000044 	addi	r16,r16,1
1000e3b8:	0081ffc4 	movi	r2,2047
1000e3bc:	8080bf26 	beq	r16,r2,1000e6bc <__subdf3+0x3c4>
1000e3c0:	013fe034 	movhi	r4,65408
1000e3c4:	213fffc4 	addi	r4,r4,-1
1000e3c8:	290a703a 	and	r5,r5,r4
1000e3cc:	2804977a 	slli	r2,r5,29
1000e3d0:	280a927a 	slli	r5,r5,9
1000e3d4:	8822d0fa 	srli	r17,r17,3
1000e3d8:	8401ffcc 	andi	r16,r16,2047
1000e3dc:	2808d33a 	srli	r4,r5,12
1000e3e0:	1444b03a 	or	r2,r2,r17
1000e3e4:	8401ffcc 	andi	r16,r16,2047
1000e3e8:	800a953a 	slli	r5,r16,20
1000e3ec:	40c03fcc 	andi	r3,r8,255
1000e3f0:	04000434 	movhi	r16,16
1000e3f4:	180697fa 	slli	r3,r3,31
1000e3f8:	843fffc4 	addi	r16,r16,-1
1000e3fc:	2420703a 	and	r16,r4,r16
1000e400:	8160b03a 	or	r16,r16,r5
1000e404:	80c6b03a 	or	r3,r16,r3
1000e408:	dfc00417 	ldw	ra,16(sp)
1000e40c:	dcc00317 	ldw	r19,12(sp)
1000e410:	dc800217 	ldw	r18,8(sp)
1000e414:	dc400117 	ldw	r17,4(sp)
1000e418:	dc000017 	ldw	r16,0(sp)
1000e41c:	dec00504 	addi	sp,sp,20
1000e420:	f800283a 	ret
1000e424:	0101ffc4 	movi	r4,2047
1000e428:	813fd626 	beq	r16,r4,1000e384 <__alt_data_end+0xf800e384>
1000e42c:	18c02034 	orhi	r3,r3,128
1000e430:	01000e04 	movi	r4,56
1000e434:	2080a416 	blt	r4,r2,1000e6c8 <__subdf3+0x3d0>
1000e438:	010007c4 	movi	r4,31
1000e43c:	2080c716 	blt	r4,r2,1000e75c <__subdf3+0x464>
1000e440:	01000804 	movi	r4,32
1000e444:	2089c83a 	sub	r4,r4,r2
1000e448:	1910983a 	sll	r8,r3,r4
1000e44c:	308ed83a 	srl	r7,r6,r2
1000e450:	3108983a 	sll	r4,r6,r4
1000e454:	1884d83a 	srl	r2,r3,r2
1000e458:	41ccb03a 	or	r6,r8,r7
1000e45c:	2008c03a 	cmpne	r4,r4,zero
1000e460:	310cb03a 	or	r6,r6,r4
1000e464:	898dc83a 	sub	r6,r17,r6
1000e468:	89a3803a 	cmpltu	r17,r17,r6
1000e46c:	288bc83a 	sub	r5,r5,r2
1000e470:	2c4bc83a 	sub	r5,r5,r17
1000e474:	3023883a 	mov	r17,r6
1000e478:	2880202c 	andhi	r2,r5,128
1000e47c:	10006b26 	beq	r2,zero,1000e62c <__subdf3+0x334>
1000e480:	04c02034 	movhi	r19,128
1000e484:	9cffffc4 	addi	r19,r19,-1
1000e488:	2ce6703a 	and	r19,r5,r19
1000e48c:	98007c26 	beq	r19,zero,1000e680 <__subdf3+0x388>
1000e490:	9809883a 	mov	r4,r19
1000e494:	000edc40 	call	1000edc4 <__clzsi2>
1000e498:	10fffe04 	addi	r3,r2,-8
1000e49c:	010007c4 	movi	r4,31
1000e4a0:	20c07d16 	blt	r4,r3,1000e698 <__subdf3+0x3a0>
1000e4a4:	01400a04 	movi	r5,40
1000e4a8:	2885c83a 	sub	r2,r5,r2
1000e4ac:	888ad83a 	srl	r5,r17,r2
1000e4b0:	98e6983a 	sll	r19,r19,r3
1000e4b4:	88e2983a 	sll	r17,r17,r3
1000e4b8:	2ce6b03a 	or	r19,r5,r19
1000e4bc:	1c007a16 	blt	r3,r16,1000e6a8 <__subdf3+0x3b0>
1000e4c0:	1c21c83a 	sub	r16,r3,r16
1000e4c4:	81400044 	addi	r5,r16,1
1000e4c8:	00c007c4 	movi	r3,31
1000e4cc:	19409616 	blt	r3,r5,1000e728 <__subdf3+0x430>
1000e4d0:	1c21c83a 	sub	r16,r3,r16
1000e4d4:	8c08983a 	sll	r4,r17,r16
1000e4d8:	8946d83a 	srl	r3,r17,r5
1000e4dc:	9c20983a 	sll	r16,r19,r16
1000e4e0:	2008c03a 	cmpne	r4,r4,zero
1000e4e4:	994ad83a 	srl	r5,r19,r5
1000e4e8:	1c06b03a 	or	r3,r3,r16
1000e4ec:	1922b03a 	or	r17,r3,r4
1000e4f0:	0021883a 	mov	r16,zero
1000e4f4:	003fa306 	br	1000e384 <__alt_data_end+0xf800e384>
1000e4f8:	2880202c 	andhi	r2,r5,128
1000e4fc:	9200004c 	andi	r8,r18,1
1000e500:	103fac1e 	bne	r2,zero,1000e3b4 <__alt_data_end+0xf800e3b4>
1000e504:	2804977a 	slli	r2,r5,29
1000e508:	8822d0fa 	srli	r17,r17,3
1000e50c:	00c1ffc4 	movi	r3,2047
1000e510:	280ad0fa 	srli	r5,r5,3
1000e514:	1444b03a 	or	r2,r2,r17
1000e518:	80c02726 	beq	r16,r3,1000e5b8 <__subdf3+0x2c0>
1000e51c:	01000434 	movhi	r4,16
1000e520:	213fffc4 	addi	r4,r4,-1
1000e524:	80e0703a 	and	r16,r16,r3
1000e528:	2908703a 	and	r4,r5,r4
1000e52c:	003fad06 	br	1000e3e4 <__alt_data_end+0xf800e3e4>
1000e530:	0080690e 	bge	zero,r2,1000e6d8 <__subdf3+0x3e0>
1000e534:	50002f26 	beq	r10,zero,1000e5f4 <__subdf3+0x2fc>
1000e538:	0101ffc4 	movi	r4,2047
1000e53c:	813f9126 	beq	r16,r4,1000e384 <__alt_data_end+0xf800e384>
1000e540:	18c02034 	orhi	r3,r3,128
1000e544:	01000e04 	movi	r4,56
1000e548:	2080b00e 	bge	r4,r2,1000e80c <__subdf3+0x514>
1000e54c:	198cb03a 	or	r6,r3,r6
1000e550:	300ec03a 	cmpne	r7,r6,zero
1000e554:	0005883a 	mov	r2,zero
1000e558:	3c4f883a 	add	r7,r7,r17
1000e55c:	3c63803a 	cmpltu	r17,r7,r17
1000e560:	114b883a 	add	r5,r2,r5
1000e564:	2c4b883a 	add	r5,r5,r17
1000e568:	3823883a 	mov	r17,r7
1000e56c:	2880202c 	andhi	r2,r5,128
1000e570:	10002e26 	beq	r2,zero,1000e62c <__subdf3+0x334>
1000e574:	84000044 	addi	r16,r16,1
1000e578:	0081ffc4 	movi	r2,2047
1000e57c:	8080de26 	beq	r16,r2,1000e8f8 <__subdf3+0x600>
1000e580:	00bfe034 	movhi	r2,65408
1000e584:	10bfffc4 	addi	r2,r2,-1
1000e588:	288a703a 	and	r5,r5,r2
1000e58c:	880cd07a 	srli	r6,r17,1
1000e590:	280897fa 	slli	r4,r5,31
1000e594:	88c0004c 	andi	r3,r17,1
1000e598:	30e2b03a 	or	r17,r6,r3
1000e59c:	280ad07a 	srli	r5,r5,1
1000e5a0:	8922b03a 	or	r17,r17,r4
1000e5a4:	003f7706 	br	1000e384 <__alt_data_end+0xf800e384>
1000e5a8:	1984b03a 	or	r2,r3,r6
1000e5ac:	103f6e26 	beq	r2,zero,1000e368 <__alt_data_end+0xf800e368>
1000e5b0:	39c03fcc 	andi	r7,r7,255
1000e5b4:	003f6d06 	br	1000e36c <__alt_data_end+0xf800e36c>
1000e5b8:	1146b03a 	or	r3,r2,r5
1000e5bc:	18003f26 	beq	r3,zero,1000e6bc <__subdf3+0x3c4>
1000e5c0:	00c00434 	movhi	r3,16
1000e5c4:	29000234 	orhi	r4,r5,8
1000e5c8:	18ffffc4 	addi	r3,r3,-1
1000e5cc:	20c8703a 	and	r4,r4,r3
1000e5d0:	003f8406 	br	1000e3e4 <__alt_data_end+0xf800e3e4>
1000e5d4:	10bfffc4 	addi	r2,r2,-1
1000e5d8:	1000501e 	bne	r2,zero,1000e71c <__subdf3+0x424>
1000e5dc:	898fc83a 	sub	r7,r17,r6
1000e5e0:	89e3803a 	cmpltu	r17,r17,r7
1000e5e4:	28cbc83a 	sub	r5,r5,r3
1000e5e8:	2c4bc83a 	sub	r5,r5,r17
1000e5ec:	3823883a 	mov	r17,r7
1000e5f0:	003fa106 	br	1000e478 <__alt_data_end+0xf800e478>
1000e5f4:	1988b03a 	or	r4,r3,r6
1000e5f8:	203f6226 	beq	r4,zero,1000e384 <__alt_data_end+0xf800e384>
1000e5fc:	10bfffc4 	addi	r2,r2,-1
1000e600:	10009b1e 	bne	r2,zero,1000e870 <__subdf3+0x578>
1000e604:	344d883a 	add	r6,r6,r17
1000e608:	3463803a 	cmpltu	r17,r6,r17
1000e60c:	194b883a 	add	r5,r3,r5
1000e610:	2c4b883a 	add	r5,r5,r17
1000e614:	3023883a 	mov	r17,r6
1000e618:	003fd406 	br	1000e56c <__alt_data_end+0xf800e56c>
1000e61c:	1106b03a 	or	r3,r2,r4
1000e620:	1800b426 	beq	r3,zero,1000e8f4 <__subdf3+0x5fc>
1000e624:	100b883a 	mov	r5,r2
1000e628:	2023883a 	mov	r17,r4
1000e62c:	888001cc 	andi	r2,r17,7
1000e630:	103f561e 	bne	r2,zero,1000e38c <__alt_data_end+0xf800e38c>
1000e634:	9200004c 	andi	r8,r18,1
1000e638:	003fb206 	br	1000e504 <__alt_data_end+0xf800e504>
1000e63c:	1000531e 	bne	r2,zero,1000e78c <__subdf3+0x494>
1000e640:	80800044 	addi	r2,r16,1
1000e644:	1081ffcc 	andi	r2,r2,2047
1000e648:	01000044 	movi	r4,1
1000e64c:	2080a00e 	bge	r4,r2,1000e8d0 <__subdf3+0x5d8>
1000e650:	8985c83a 	sub	r2,r17,r6
1000e654:	8889803a 	cmpltu	r4,r17,r2
1000e658:	28e7c83a 	sub	r19,r5,r3
1000e65c:	9927c83a 	sub	r19,r19,r4
1000e660:	9900202c 	andhi	r4,r19,128
1000e664:	20006226 	beq	r4,zero,1000e7f0 <__subdf3+0x4f8>
1000e668:	3463c83a 	sub	r17,r6,r17
1000e66c:	194bc83a 	sub	r5,r3,r5
1000e670:	344d803a 	cmpltu	r6,r6,r17
1000e674:	29a7c83a 	sub	r19,r5,r6
1000e678:	3825883a 	mov	r18,r7
1000e67c:	983f841e 	bne	r19,zero,1000e490 <__alt_data_end+0xf800e490>
1000e680:	8809883a 	mov	r4,r17
1000e684:	000edc40 	call	1000edc4 <__clzsi2>
1000e688:	10800804 	addi	r2,r2,32
1000e68c:	10fffe04 	addi	r3,r2,-8
1000e690:	010007c4 	movi	r4,31
1000e694:	20ff830e 	bge	r4,r3,1000e4a4 <__alt_data_end+0xf800e4a4>
1000e698:	14fff604 	addi	r19,r2,-40
1000e69c:	8ce6983a 	sll	r19,r17,r19
1000e6a0:	0023883a 	mov	r17,zero
1000e6a4:	1c3f860e 	bge	r3,r16,1000e4c0 <__alt_data_end+0xf800e4c0>
1000e6a8:	017fe034 	movhi	r5,65408
1000e6ac:	297fffc4 	addi	r5,r5,-1
1000e6b0:	80e1c83a 	sub	r16,r16,r3
1000e6b4:	994a703a 	and	r5,r19,r5
1000e6b8:	003f3206 	br	1000e384 <__alt_data_end+0xf800e384>
1000e6bc:	0009883a 	mov	r4,zero
1000e6c0:	0005883a 	mov	r2,zero
1000e6c4:	003f4706 	br	1000e3e4 <__alt_data_end+0xf800e3e4>
1000e6c8:	198cb03a 	or	r6,r3,r6
1000e6cc:	300cc03a 	cmpne	r6,r6,zero
1000e6d0:	0005883a 	mov	r2,zero
1000e6d4:	003f6306 	br	1000e464 <__alt_data_end+0xf800e464>
1000e6d8:	10009d1e 	bne	r2,zero,1000e950 <__subdf3+0x658>
1000e6dc:	81c00044 	addi	r7,r16,1
1000e6e0:	3881ffcc 	andi	r2,r7,2047
1000e6e4:	02400044 	movi	r9,1
1000e6e8:	4880680e 	bge	r9,r2,1000e88c <__subdf3+0x594>
1000e6ec:	0081ffc4 	movi	r2,2047
1000e6f0:	3880ae26 	beq	r7,r2,1000e9ac <__subdf3+0x6b4>
1000e6f4:	344d883a 	add	r6,r6,r17
1000e6f8:	3463803a 	cmpltu	r17,r6,r17
1000e6fc:	194b883a 	add	r5,r3,r5
1000e700:	2c4b883a 	add	r5,r5,r17
1000e704:	282297fa 	slli	r17,r5,31
1000e708:	300cd07a 	srli	r6,r6,1
1000e70c:	280ad07a 	srli	r5,r5,1
1000e710:	3821883a 	mov	r16,r7
1000e714:	89a2b03a 	or	r17,r17,r6
1000e718:	003f1a06 	br	1000e384 <__alt_data_end+0xf800e384>
1000e71c:	0101ffc4 	movi	r4,2047
1000e720:	813f431e 	bne	r16,r4,1000e430 <__alt_data_end+0xf800e430>
1000e724:	003f1706 	br	1000e384 <__alt_data_end+0xf800e384>
1000e728:	80bff844 	addi	r2,r16,-31
1000e72c:	00c00804 	movi	r3,32
1000e730:	9884d83a 	srl	r2,r19,r2
1000e734:	28c05126 	beq	r5,r3,1000e87c <__subdf3+0x584>
1000e738:	00c00fc4 	movi	r3,63
1000e73c:	1c21c83a 	sub	r16,r3,r16
1000e740:	9c26983a 	sll	r19,r19,r16
1000e744:	9c62b03a 	or	r17,r19,r17
1000e748:	8822c03a 	cmpne	r17,r17,zero
1000e74c:	88a2b03a 	or	r17,r17,r2
1000e750:	000b883a 	mov	r5,zero
1000e754:	0021883a 	mov	r16,zero
1000e758:	003fb406 	br	1000e62c <__alt_data_end+0xf800e62c>
1000e75c:	113ff804 	addi	r4,r2,-32
1000e760:	01c00804 	movi	r7,32
1000e764:	1908d83a 	srl	r4,r3,r4
1000e768:	11c04626 	beq	r2,r7,1000e884 <__subdf3+0x58c>
1000e76c:	01c01004 	movi	r7,64
1000e770:	3885c83a 	sub	r2,r7,r2
1000e774:	1884983a 	sll	r2,r3,r2
1000e778:	118cb03a 	or	r6,r2,r6
1000e77c:	300cc03a 	cmpne	r6,r6,zero
1000e780:	310cb03a 	or	r6,r6,r4
1000e784:	0005883a 	mov	r2,zero
1000e788:	003f3606 	br	1000e464 <__alt_data_end+0xf800e464>
1000e78c:	80002b26 	beq	r16,zero,1000e83c <__subdf3+0x544>
1000e790:	0101ffc4 	movi	r4,2047
1000e794:	51006926 	beq	r10,r4,1000e93c <__subdf3+0x644>
1000e798:	0085c83a 	sub	r2,zero,r2
1000e79c:	29402034 	orhi	r5,r5,128
1000e7a0:	01000e04 	movi	r4,56
1000e7a4:	20807d16 	blt	r4,r2,1000e99c <__subdf3+0x6a4>
1000e7a8:	010007c4 	movi	r4,31
1000e7ac:	2080d916 	blt	r4,r2,1000eb14 <__subdf3+0x81c>
1000e7b0:	01000804 	movi	r4,32
1000e7b4:	2089c83a 	sub	r4,r4,r2
1000e7b8:	2912983a 	sll	r9,r5,r4
1000e7bc:	8890d83a 	srl	r8,r17,r2
1000e7c0:	8908983a 	sll	r4,r17,r4
1000e7c4:	2884d83a 	srl	r2,r5,r2
1000e7c8:	4a22b03a 	or	r17,r9,r8
1000e7cc:	2008c03a 	cmpne	r4,r4,zero
1000e7d0:	8922b03a 	or	r17,r17,r4
1000e7d4:	3463c83a 	sub	r17,r6,r17
1000e7d8:	1885c83a 	sub	r2,r3,r2
1000e7dc:	344d803a 	cmpltu	r6,r6,r17
1000e7e0:	118bc83a 	sub	r5,r2,r6
1000e7e4:	5021883a 	mov	r16,r10
1000e7e8:	3825883a 	mov	r18,r7
1000e7ec:	003f2206 	br	1000e478 <__alt_data_end+0xf800e478>
1000e7f0:	9886b03a 	or	r3,r19,r2
1000e7f4:	18001c1e 	bne	r3,zero,1000e868 <__subdf3+0x570>
1000e7f8:	0011883a 	mov	r8,zero
1000e7fc:	000b883a 	mov	r5,zero
1000e800:	0023883a 	mov	r17,zero
1000e804:	0021883a 	mov	r16,zero
1000e808:	003f3e06 	br	1000e504 <__alt_data_end+0xf800e504>
1000e80c:	010007c4 	movi	r4,31
1000e810:	20803c16 	blt	r4,r2,1000e904 <__subdf3+0x60c>
1000e814:	01000804 	movi	r4,32
1000e818:	2089c83a 	sub	r4,r4,r2
1000e81c:	1912983a 	sll	r9,r3,r4
1000e820:	308ed83a 	srl	r7,r6,r2
1000e824:	3108983a 	sll	r4,r6,r4
1000e828:	1884d83a 	srl	r2,r3,r2
1000e82c:	49ceb03a 	or	r7,r9,r7
1000e830:	2008c03a 	cmpne	r4,r4,zero
1000e834:	390eb03a 	or	r7,r7,r4
1000e838:	003f4706 	br	1000e558 <__alt_data_end+0xf800e558>
1000e83c:	2c48b03a 	or	r4,r5,r17
1000e840:	20003e26 	beq	r4,zero,1000e93c <__subdf3+0x644>
1000e844:	0084303a 	nor	r2,zero,r2
1000e848:	10003a1e 	bne	r2,zero,1000e934 <__subdf3+0x63c>
1000e84c:	3463c83a 	sub	r17,r6,r17
1000e850:	194bc83a 	sub	r5,r3,r5
1000e854:	344d803a 	cmpltu	r6,r6,r17
1000e858:	298bc83a 	sub	r5,r5,r6
1000e85c:	5021883a 	mov	r16,r10
1000e860:	3825883a 	mov	r18,r7
1000e864:	003f0406 	br	1000e478 <__alt_data_end+0xf800e478>
1000e868:	1023883a 	mov	r17,r2
1000e86c:	003f0706 	br	1000e48c <__alt_data_end+0xf800e48c>
1000e870:	0101ffc4 	movi	r4,2047
1000e874:	813f331e 	bne	r16,r4,1000e544 <__alt_data_end+0xf800e544>
1000e878:	003ec206 	br	1000e384 <__alt_data_end+0xf800e384>
1000e87c:	0027883a 	mov	r19,zero
1000e880:	003fb006 	br	1000e744 <__alt_data_end+0xf800e744>
1000e884:	0005883a 	mov	r2,zero
1000e888:	003fbb06 	br	1000e778 <__alt_data_end+0xf800e778>
1000e88c:	2c44b03a 	or	r2,r5,r17
1000e890:	80008b1e 	bne	r16,zero,1000eac0 <__subdf3+0x7c8>
1000e894:	1000b526 	beq	r2,zero,1000eb6c <__subdf3+0x874>
1000e898:	1984b03a 	or	r2,r3,r6
1000e89c:	103eb926 	beq	r2,zero,1000e384 <__alt_data_end+0xf800e384>
1000e8a0:	3449883a 	add	r4,r6,r17
1000e8a4:	2463803a 	cmpltu	r17,r4,r17
1000e8a8:	194b883a 	add	r5,r3,r5
1000e8ac:	2c4b883a 	add	r5,r5,r17
1000e8b0:	2880202c 	andhi	r2,r5,128
1000e8b4:	2023883a 	mov	r17,r4
1000e8b8:	103f5c26 	beq	r2,zero,1000e62c <__alt_data_end+0xf800e62c>
1000e8bc:	00bfe034 	movhi	r2,65408
1000e8c0:	10bfffc4 	addi	r2,r2,-1
1000e8c4:	4821883a 	mov	r16,r9
1000e8c8:	288a703a 	and	r5,r5,r2
1000e8cc:	003ead06 	br	1000e384 <__alt_data_end+0xf800e384>
1000e8d0:	2c44b03a 	or	r2,r5,r17
1000e8d4:	8000291e 	bne	r16,zero,1000e97c <__subdf3+0x684>
1000e8d8:	10004f1e 	bne	r2,zero,1000ea18 <__subdf3+0x720>
1000e8dc:	1984b03a 	or	r2,r3,r6
1000e8e0:	10000426 	beq	r2,zero,1000e8f4 <__subdf3+0x5fc>
1000e8e4:	180b883a 	mov	r5,r3
1000e8e8:	3023883a 	mov	r17,r6
1000e8ec:	3825883a 	mov	r18,r7
1000e8f0:	003ea406 	br	1000e384 <__alt_data_end+0xf800e384>
1000e8f4:	0011883a 	mov	r8,zero
1000e8f8:	000b883a 	mov	r5,zero
1000e8fc:	0023883a 	mov	r17,zero
1000e900:	003f0006 	br	1000e504 <__alt_data_end+0xf800e504>
1000e904:	11fff804 	addi	r7,r2,-32
1000e908:	19c8d83a 	srl	r4,r3,r7
1000e90c:	01c00804 	movi	r7,32
1000e910:	11c07e26 	beq	r2,r7,1000eb0c <__subdf3+0x814>
1000e914:	01c01004 	movi	r7,64
1000e918:	3885c83a 	sub	r2,r7,r2
1000e91c:	1884983a 	sll	r2,r3,r2
1000e920:	118cb03a 	or	r6,r2,r6
1000e924:	300ec03a 	cmpne	r7,r6,zero
1000e928:	390eb03a 	or	r7,r7,r4
1000e92c:	0005883a 	mov	r2,zero
1000e930:	003f0906 	br	1000e558 <__alt_data_end+0xf800e558>
1000e934:	0101ffc4 	movi	r4,2047
1000e938:	513f991e 	bne	r10,r4,1000e7a0 <__alt_data_end+0xf800e7a0>
1000e93c:	180b883a 	mov	r5,r3
1000e940:	3023883a 	mov	r17,r6
1000e944:	5021883a 	mov	r16,r10
1000e948:	3825883a 	mov	r18,r7
1000e94c:	003e8d06 	br	1000e384 <__alt_data_end+0xf800e384>
1000e950:	80001a1e 	bne	r16,zero,1000e9bc <__subdf3+0x6c4>
1000e954:	2c48b03a 	or	r4,r5,r17
1000e958:	20005526 	beq	r4,zero,1000eab0 <__subdf3+0x7b8>
1000e95c:	0084303a 	nor	r2,zero,r2
1000e960:	1000511e 	bne	r2,zero,1000eaa8 <__subdf3+0x7b0>
1000e964:	89a3883a 	add	r17,r17,r6
1000e968:	194b883a 	add	r5,r3,r5
1000e96c:	898d803a 	cmpltu	r6,r17,r6
1000e970:	298b883a 	add	r5,r5,r6
1000e974:	5021883a 	mov	r16,r10
1000e978:	003efc06 	br	1000e56c <__alt_data_end+0xf800e56c>
1000e97c:	1000341e 	bne	r2,zero,1000ea50 <__subdf3+0x758>
1000e980:	1984b03a 	or	r2,r3,r6
1000e984:	10006f26 	beq	r2,zero,1000eb44 <__subdf3+0x84c>
1000e988:	180b883a 	mov	r5,r3
1000e98c:	3023883a 	mov	r17,r6
1000e990:	3825883a 	mov	r18,r7
1000e994:	0401ffc4 	movi	r16,2047
1000e998:	003e7a06 	br	1000e384 <__alt_data_end+0xf800e384>
1000e99c:	2c62b03a 	or	r17,r5,r17
1000e9a0:	8822c03a 	cmpne	r17,r17,zero
1000e9a4:	0005883a 	mov	r2,zero
1000e9a8:	003f8a06 	br	1000e7d4 <__alt_data_end+0xf800e7d4>
1000e9ac:	3821883a 	mov	r16,r7
1000e9b0:	000b883a 	mov	r5,zero
1000e9b4:	0023883a 	mov	r17,zero
1000e9b8:	003ed206 	br	1000e504 <__alt_data_end+0xf800e504>
1000e9bc:	0101ffc4 	movi	r4,2047
1000e9c0:	51003b26 	beq	r10,r4,1000eab0 <__subdf3+0x7b8>
1000e9c4:	0085c83a 	sub	r2,zero,r2
1000e9c8:	29402034 	orhi	r5,r5,128
1000e9cc:	01000e04 	movi	r4,56
1000e9d0:	20806216 	blt	r4,r2,1000eb5c <__subdf3+0x864>
1000e9d4:	010007c4 	movi	r4,31
1000e9d8:	20806b16 	blt	r4,r2,1000eb88 <__subdf3+0x890>
1000e9dc:	01000804 	movi	r4,32
1000e9e0:	2089c83a 	sub	r4,r4,r2
1000e9e4:	2912983a 	sll	r9,r5,r4
1000e9e8:	888ed83a 	srl	r7,r17,r2
1000e9ec:	8908983a 	sll	r4,r17,r4
1000e9f0:	2884d83a 	srl	r2,r5,r2
1000e9f4:	49e2b03a 	or	r17,r9,r7
1000e9f8:	2008c03a 	cmpne	r4,r4,zero
1000e9fc:	8922b03a 	or	r17,r17,r4
1000ea00:	89a3883a 	add	r17,r17,r6
1000ea04:	10c5883a 	add	r2,r2,r3
1000ea08:	898d803a 	cmpltu	r6,r17,r6
1000ea0c:	118b883a 	add	r5,r2,r6
1000ea10:	5021883a 	mov	r16,r10
1000ea14:	003ed506 	br	1000e56c <__alt_data_end+0xf800e56c>
1000ea18:	1984b03a 	or	r2,r3,r6
1000ea1c:	103e5926 	beq	r2,zero,1000e384 <__alt_data_end+0xf800e384>
1000ea20:	8989c83a 	sub	r4,r17,r6
1000ea24:	8911803a 	cmpltu	r8,r17,r4
1000ea28:	28c5c83a 	sub	r2,r5,r3
1000ea2c:	1205c83a 	sub	r2,r2,r8
1000ea30:	1200202c 	andhi	r8,r2,128
1000ea34:	403ef926 	beq	r8,zero,1000e61c <__alt_data_end+0xf800e61c>
1000ea38:	3463c83a 	sub	r17,r6,r17
1000ea3c:	194bc83a 	sub	r5,r3,r5
1000ea40:	344d803a 	cmpltu	r6,r6,r17
1000ea44:	298bc83a 	sub	r5,r5,r6
1000ea48:	3825883a 	mov	r18,r7
1000ea4c:	003e4d06 	br	1000e384 <__alt_data_end+0xf800e384>
1000ea50:	1984b03a 	or	r2,r3,r6
1000ea54:	10002b26 	beq	r2,zero,1000eb04 <__subdf3+0x80c>
1000ea58:	2808d0fa 	srli	r4,r5,3
1000ea5c:	8822d0fa 	srli	r17,r17,3
1000ea60:	280a977a 	slli	r5,r5,29
1000ea64:	2080022c 	andhi	r2,r4,8
1000ea68:	2c62b03a 	or	r17,r5,r17
1000ea6c:	10000826 	beq	r2,zero,1000ea90 <__subdf3+0x798>
1000ea70:	1810d0fa 	srli	r8,r3,3
1000ea74:	4080022c 	andhi	r2,r8,8
1000ea78:	1000051e 	bne	r2,zero,1000ea90 <__subdf3+0x798>
1000ea7c:	300cd0fa 	srli	r6,r6,3
1000ea80:	1804977a 	slli	r2,r3,29
1000ea84:	4009883a 	mov	r4,r8
1000ea88:	3825883a 	mov	r18,r7
1000ea8c:	11a2b03a 	or	r17,r2,r6
1000ea90:	880ad77a 	srli	r5,r17,29
1000ea94:	200890fa 	slli	r4,r4,3
1000ea98:	882290fa 	slli	r17,r17,3
1000ea9c:	0401ffc4 	movi	r16,2047
1000eaa0:	290ab03a 	or	r5,r5,r4
1000eaa4:	003e3706 	br	1000e384 <__alt_data_end+0xf800e384>
1000eaa8:	0101ffc4 	movi	r4,2047
1000eaac:	513fc71e 	bne	r10,r4,1000e9cc <__alt_data_end+0xf800e9cc>
1000eab0:	180b883a 	mov	r5,r3
1000eab4:	3023883a 	mov	r17,r6
1000eab8:	5021883a 	mov	r16,r10
1000eabc:	003e3106 	br	1000e384 <__alt_data_end+0xf800e384>
1000eac0:	10002d26 	beq	r2,zero,1000eb78 <__subdf3+0x880>
1000eac4:	1984b03a 	or	r2,r3,r6
1000eac8:	10000e26 	beq	r2,zero,1000eb04 <__subdf3+0x80c>
1000eacc:	2808d0fa 	srli	r4,r5,3
1000ead0:	8822d0fa 	srli	r17,r17,3
1000ead4:	280a977a 	slli	r5,r5,29
1000ead8:	2080022c 	andhi	r2,r4,8
1000eadc:	2c62b03a 	or	r17,r5,r17
1000eae0:	103feb26 	beq	r2,zero,1000ea90 <__alt_data_end+0xf800ea90>
1000eae4:	180ed0fa 	srli	r7,r3,3
1000eae8:	3880022c 	andhi	r2,r7,8
1000eaec:	103fe81e 	bne	r2,zero,1000ea90 <__alt_data_end+0xf800ea90>
1000eaf0:	300cd0fa 	srli	r6,r6,3
1000eaf4:	1804977a 	slli	r2,r3,29
1000eaf8:	3809883a 	mov	r4,r7
1000eafc:	11a2b03a 	or	r17,r2,r6
1000eb00:	003fe306 	br	1000ea90 <__alt_data_end+0xf800ea90>
1000eb04:	0401ffc4 	movi	r16,2047
1000eb08:	003e1e06 	br	1000e384 <__alt_data_end+0xf800e384>
1000eb0c:	0005883a 	mov	r2,zero
1000eb10:	003f8306 	br	1000e920 <__alt_data_end+0xf800e920>
1000eb14:	113ff804 	addi	r4,r2,-32
1000eb18:	02000804 	movi	r8,32
1000eb1c:	2908d83a 	srl	r4,r5,r4
1000eb20:	12002526 	beq	r2,r8,1000ebb8 <__subdf3+0x8c0>
1000eb24:	02001004 	movi	r8,64
1000eb28:	4085c83a 	sub	r2,r8,r2
1000eb2c:	288a983a 	sll	r5,r5,r2
1000eb30:	2c62b03a 	or	r17,r5,r17
1000eb34:	8822c03a 	cmpne	r17,r17,zero
1000eb38:	8922b03a 	or	r17,r17,r4
1000eb3c:	0005883a 	mov	r2,zero
1000eb40:	003f2406 	br	1000e7d4 <__alt_data_end+0xf800e7d4>
1000eb44:	01402034 	movhi	r5,128
1000eb48:	0011883a 	mov	r8,zero
1000eb4c:	297fffc4 	addi	r5,r5,-1
1000eb50:	047ffe04 	movi	r17,-8
1000eb54:	0401ffc4 	movi	r16,2047
1000eb58:	003e6a06 	br	1000e504 <__alt_data_end+0xf800e504>
1000eb5c:	2c62b03a 	or	r17,r5,r17
1000eb60:	8822c03a 	cmpne	r17,r17,zero
1000eb64:	0005883a 	mov	r2,zero
1000eb68:	003fa506 	br	1000ea00 <__alt_data_end+0xf800ea00>
1000eb6c:	180b883a 	mov	r5,r3
1000eb70:	3023883a 	mov	r17,r6
1000eb74:	003e0306 	br	1000e384 <__alt_data_end+0xf800e384>
1000eb78:	180b883a 	mov	r5,r3
1000eb7c:	3023883a 	mov	r17,r6
1000eb80:	0401ffc4 	movi	r16,2047
1000eb84:	003dff06 	br	1000e384 <__alt_data_end+0xf800e384>
1000eb88:	113ff804 	addi	r4,r2,-32
1000eb8c:	01c00804 	movi	r7,32
1000eb90:	2908d83a 	srl	r4,r5,r4
1000eb94:	11c00a26 	beq	r2,r7,1000ebc0 <__subdf3+0x8c8>
1000eb98:	01c01004 	movi	r7,64
1000eb9c:	3885c83a 	sub	r2,r7,r2
1000eba0:	288a983a 	sll	r5,r5,r2
1000eba4:	2c62b03a 	or	r17,r5,r17
1000eba8:	8822c03a 	cmpne	r17,r17,zero
1000ebac:	8922b03a 	or	r17,r17,r4
1000ebb0:	0005883a 	mov	r2,zero
1000ebb4:	003f9206 	br	1000ea00 <__alt_data_end+0xf800ea00>
1000ebb8:	000b883a 	mov	r5,zero
1000ebbc:	003fdc06 	br	1000eb30 <__alt_data_end+0xf800eb30>
1000ebc0:	000b883a 	mov	r5,zero
1000ebc4:	003ff706 	br	1000eba4 <__alt_data_end+0xf800eba4>

1000ebc8 <__fixdfsi>:
1000ebc8:	2806d53a 	srli	r3,r5,20
1000ebcc:	00800434 	movhi	r2,16
1000ebd0:	10bfffc4 	addi	r2,r2,-1
1000ebd4:	18c1ffcc 	andi	r3,r3,2047
1000ebd8:	0180ff84 	movi	r6,1022
1000ebdc:	2884703a 	and	r2,r5,r2
1000ebe0:	280ad7fa 	srli	r5,r5,31
1000ebe4:	30c0130e 	bge	r6,r3,1000ec34 <__fixdfsi+0x6c>
1000ebe8:	01810744 	movi	r6,1053
1000ebec:	30c00d16 	blt	r6,r3,1000ec24 <__fixdfsi+0x5c>
1000ebf0:	01810cc4 	movi	r6,1075
1000ebf4:	30cdc83a 	sub	r6,r6,r3
1000ebf8:	01c007c4 	movi	r7,31
1000ebfc:	10800434 	orhi	r2,r2,16
1000ec00:	39800e0e 	bge	r7,r6,1000ec3c <__fixdfsi+0x74>
1000ec04:	010104c4 	movi	r4,1043
1000ec08:	20c7c83a 	sub	r3,r4,r3
1000ec0c:	10c6d83a 	srl	r3,r2,r3
1000ec10:	29403fcc 	andi	r5,r5,255
1000ec14:	0145c83a 	sub	r2,zero,r5
1000ec18:	1884f03a 	xor	r2,r3,r2
1000ec1c:	1145883a 	add	r2,r2,r5
1000ec20:	f800283a 	ret
1000ec24:	00a00034 	movhi	r2,32768
1000ec28:	10bfffc4 	addi	r2,r2,-1
1000ec2c:	2885883a 	add	r2,r5,r2
1000ec30:	f800283a 	ret
1000ec34:	0005883a 	mov	r2,zero
1000ec38:	f800283a 	ret
1000ec3c:	18fefb44 	addi	r3,r3,-1043
1000ec40:	2188d83a 	srl	r4,r4,r6
1000ec44:	10c6983a 	sll	r3,r2,r3
1000ec48:	20c6b03a 	or	r3,r4,r3
1000ec4c:	003ff006 	br	1000ec10 <__alt_data_end+0xf800ec10>

1000ec50 <__floatsidf>:
1000ec50:	defffd04 	addi	sp,sp,-12
1000ec54:	dc400115 	stw	r17,4(sp)
1000ec58:	dfc00215 	stw	ra,8(sp)
1000ec5c:	dc000015 	stw	r16,0(sp)
1000ec60:	2023883a 	mov	r17,r4
1000ec64:	20001426 	beq	r4,zero,1000ecb8 <__floatsidf+0x68>
1000ec68:	2020d7fa 	srli	r16,r4,31
1000ec6c:	80000126 	beq	r16,zero,1000ec74 <__floatsidf+0x24>
1000ec70:	0123c83a 	sub	r17,zero,r4
1000ec74:	8809883a 	mov	r4,r17
1000ec78:	000edc40 	call	1000edc4 <__clzsi2>
1000ec7c:	01410784 	movi	r5,1054
1000ec80:	00c00284 	movi	r3,10
1000ec84:	288bc83a 	sub	r5,r5,r2
1000ec88:	18801c16 	blt	r3,r2,1000ecfc <__floatsidf+0xac>
1000ec8c:	00c002c4 	movi	r3,11
1000ec90:	1887c83a 	sub	r3,r3,r2
1000ec94:	88c8d83a 	srl	r4,r17,r3
1000ec98:	00c00434 	movhi	r3,16
1000ec9c:	18ffffc4 	addi	r3,r3,-1
1000eca0:	10800544 	addi	r2,r2,21
1000eca4:	20c8703a 	and	r4,r4,r3
1000eca8:	8884983a 	sll	r2,r17,r2
1000ecac:	28c1ffcc 	andi	r3,r5,2047
1000ecb0:	800d883a 	mov	r6,r16
1000ecb4:	00000406 	br	1000ecc8 <__floatsidf+0x78>
1000ecb8:	000d883a 	mov	r6,zero
1000ecbc:	0007883a 	mov	r3,zero
1000ecc0:	0009883a 	mov	r4,zero
1000ecc4:	0005883a 	mov	r2,zero
1000ecc8:	180a953a 	slli	r5,r3,20
1000eccc:	31803fcc 	andi	r6,r6,255
1000ecd0:	00c00434 	movhi	r3,16
1000ecd4:	300c97fa 	slli	r6,r6,31
1000ecd8:	18ffffc4 	addi	r3,r3,-1
1000ecdc:	20c6703a 	and	r3,r4,r3
1000ece0:	1946b03a 	or	r3,r3,r5
1000ece4:	1986b03a 	or	r3,r3,r6
1000ece8:	dfc00217 	ldw	ra,8(sp)
1000ecec:	dc400117 	ldw	r17,4(sp)
1000ecf0:	dc000017 	ldw	r16,0(sp)
1000ecf4:	dec00304 	addi	sp,sp,12
1000ecf8:	f800283a 	ret
1000ecfc:	10fffd44 	addi	r3,r2,-11
1000ed00:	88c8983a 	sll	r4,r17,r3
1000ed04:	00800434 	movhi	r2,16
1000ed08:	10bfffc4 	addi	r2,r2,-1
1000ed0c:	2088703a 	and	r4,r4,r2
1000ed10:	28c1ffcc 	andi	r3,r5,2047
1000ed14:	800d883a 	mov	r6,r16
1000ed18:	0005883a 	mov	r2,zero
1000ed1c:	003fea06 	br	1000ecc8 <__alt_data_end+0xf800ecc8>

1000ed20 <__floatunsidf>:
1000ed20:	defffe04 	addi	sp,sp,-8
1000ed24:	dc000015 	stw	r16,0(sp)
1000ed28:	dfc00115 	stw	ra,4(sp)
1000ed2c:	2021883a 	mov	r16,r4
1000ed30:	20001026 	beq	r4,zero,1000ed74 <__floatunsidf+0x54>
1000ed34:	000edc40 	call	1000edc4 <__clzsi2>
1000ed38:	01410784 	movi	r5,1054
1000ed3c:	100d883a 	mov	r6,r2
1000ed40:	288bc83a 	sub	r5,r5,r2
1000ed44:	00800284 	movi	r2,10
1000ed48:	11801616 	blt	r2,r6,1000eda4 <__floatunsidf+0x84>
1000ed4c:	008002c4 	movi	r2,11
1000ed50:	1185c83a 	sub	r2,r2,r6
1000ed54:	8084d83a 	srl	r2,r16,r2
1000ed58:	00c00434 	movhi	r3,16
1000ed5c:	31c00544 	addi	r7,r6,21
1000ed60:	18ffffc4 	addi	r3,r3,-1
1000ed64:	81e0983a 	sll	r16,r16,r7
1000ed68:	10cc703a 	and	r6,r2,r3
1000ed6c:	2941ffcc 	andi	r5,r5,2047
1000ed70:	00000206 	br	1000ed7c <__floatunsidf+0x5c>
1000ed74:	000b883a 	mov	r5,zero
1000ed78:	000d883a 	mov	r6,zero
1000ed7c:	280a953a 	slli	r5,r5,20
1000ed80:	00c00434 	movhi	r3,16
1000ed84:	18ffffc4 	addi	r3,r3,-1
1000ed88:	30c6703a 	and	r3,r6,r3
1000ed8c:	8005883a 	mov	r2,r16
1000ed90:	1946b03a 	or	r3,r3,r5
1000ed94:	dfc00117 	ldw	ra,4(sp)
1000ed98:	dc000017 	ldw	r16,0(sp)
1000ed9c:	dec00204 	addi	sp,sp,8
1000eda0:	f800283a 	ret
1000eda4:	31bffd44 	addi	r6,r6,-11
1000eda8:	818c983a 	sll	r6,r16,r6
1000edac:	00800434 	movhi	r2,16
1000edb0:	10bfffc4 	addi	r2,r2,-1
1000edb4:	2941ffcc 	andi	r5,r5,2047
1000edb8:	0021883a 	mov	r16,zero
1000edbc:	308c703a 	and	r6,r6,r2
1000edc0:	003fee06 	br	1000ed7c <__alt_data_end+0xf800ed7c>

1000edc4 <__clzsi2>:
1000edc4:	00bfffd4 	movui	r2,65535
1000edc8:	11000b36 	bltu	r2,r4,1000edf8 <__clzsi2+0x34>
1000edcc:	00803fc4 	movi	r2,255
1000edd0:	1100122e 	bgeu	r2,r4,1000ee1c <__clzsi2+0x58>
1000edd4:	00c00204 	movi	r3,8
1000edd8:	01400604 	movi	r5,24
1000eddc:	20c8d83a 	srl	r4,r4,r3
1000ede0:	00840074 	movhi	r2,4097
1000ede4:	1087ec04 	addi	r2,r2,8112
1000ede8:	1109883a 	add	r4,r2,r4
1000edec:	20800003 	ldbu	r2,0(r4)
1000edf0:	2885c83a 	sub	r2,r5,r2
1000edf4:	f800283a 	ret
1000edf8:	00804034 	movhi	r2,256
1000edfc:	10bfffc4 	addi	r2,r2,-1
1000ee00:	11000336 	bltu	r2,r4,1000ee10 <__clzsi2+0x4c>
1000ee04:	00c00404 	movi	r3,16
1000ee08:	180b883a 	mov	r5,r3
1000ee0c:	003ff306 	br	1000eddc <__alt_data_end+0xf800eddc>
1000ee10:	00c00604 	movi	r3,24
1000ee14:	01400204 	movi	r5,8
1000ee18:	003ff006 	br	1000eddc <__alt_data_end+0xf800eddc>
1000ee1c:	0007883a 	mov	r3,zero
1000ee20:	01400804 	movi	r5,32
1000ee24:	003fed06 	br	1000eddc <__alt_data_end+0xf800eddc>

1000ee28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ee28:	defffe04 	addi	sp,sp,-8
1000ee2c:	dfc00115 	stw	ra,4(sp)
1000ee30:	df000015 	stw	fp,0(sp)
1000ee34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ee38:	00840074 	movhi	r2,4097
1000ee3c:	108eef04 	addi	r2,r2,15292
1000ee40:	10800017 	ldw	r2,0(r2)
1000ee44:	10000526 	beq	r2,zero,1000ee5c <alt_get_errno+0x34>
1000ee48:	00840074 	movhi	r2,4097
1000ee4c:	108eef04 	addi	r2,r2,15292
1000ee50:	10800017 	ldw	r2,0(r2)
1000ee54:	103ee83a 	callr	r2
1000ee58:	00000206 	br	1000ee64 <alt_get_errno+0x3c>
1000ee5c:	00840074 	movhi	r2,4097
1000ee60:	1095b604 	addi	r2,r2,22232
}
1000ee64:	e037883a 	mov	sp,fp
1000ee68:	dfc00117 	ldw	ra,4(sp)
1000ee6c:	df000017 	ldw	fp,0(sp)
1000ee70:	dec00204 	addi	sp,sp,8
1000ee74:	f800283a 	ret

1000ee78 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000ee78:	defffb04 	addi	sp,sp,-20
1000ee7c:	dfc00415 	stw	ra,16(sp)
1000ee80:	df000315 	stw	fp,12(sp)
1000ee84:	df000304 	addi	fp,sp,12
1000ee88:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000ee8c:	e0bfff17 	ldw	r2,-4(fp)
1000ee90:	10000816 	blt	r2,zero,1000eeb4 <close+0x3c>
1000ee94:	e13fff17 	ldw	r4,-4(fp)
1000ee98:	01400304 	movi	r5,12
1000ee9c:	000c6040 	call	1000c604 <__mulsi3>
1000eea0:	1007883a 	mov	r3,r2
1000eea4:	00840074 	movhi	r2,4097
1000eea8:	108a6c04 	addi	r2,r2,10672
1000eeac:	1885883a 	add	r2,r3,r2
1000eeb0:	00000106 	br	1000eeb8 <close+0x40>
1000eeb4:	0005883a 	mov	r2,zero
1000eeb8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000eebc:	e0bffd17 	ldw	r2,-12(fp)
1000eec0:	10001926 	beq	r2,zero,1000ef28 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000eec4:	e0bffd17 	ldw	r2,-12(fp)
1000eec8:	10800017 	ldw	r2,0(r2)
1000eecc:	10800417 	ldw	r2,16(r2)
1000eed0:	10000626 	beq	r2,zero,1000eeec <close+0x74>
1000eed4:	e0bffd17 	ldw	r2,-12(fp)
1000eed8:	10800017 	ldw	r2,0(r2)
1000eedc:	10800417 	ldw	r2,16(r2)
1000eee0:	e13ffd17 	ldw	r4,-12(fp)
1000eee4:	103ee83a 	callr	r2
1000eee8:	00000106 	br	1000eef0 <close+0x78>
1000eeec:	0005883a 	mov	r2,zero
1000eef0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000eef4:	e13fff17 	ldw	r4,-4(fp)
1000eef8:	000f59c0 	call	1000f59c <alt_release_fd>
    if (rval < 0)
1000eefc:	e0bffe17 	ldw	r2,-8(fp)
1000ef00:	1000070e 	bge	r2,zero,1000ef20 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000ef04:	000ee280 	call	1000ee28 <alt_get_errno>
1000ef08:	1007883a 	mov	r3,r2
1000ef0c:	e0bffe17 	ldw	r2,-8(fp)
1000ef10:	0085c83a 	sub	r2,zero,r2
1000ef14:	18800015 	stw	r2,0(r3)
      return -1;
1000ef18:	00bfffc4 	movi	r2,-1
1000ef1c:	00000706 	br	1000ef3c <close+0xc4>
    }
    return 0;
1000ef20:	0005883a 	mov	r2,zero
1000ef24:	00000506 	br	1000ef3c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ef28:	000ee280 	call	1000ee28 <alt_get_errno>
1000ef2c:	1007883a 	mov	r3,r2
1000ef30:	00801444 	movi	r2,81
1000ef34:	18800015 	stw	r2,0(r3)
    return -1;
1000ef38:	00bfffc4 	movi	r2,-1
  }
}
1000ef3c:	e037883a 	mov	sp,fp
1000ef40:	dfc00117 	ldw	ra,4(sp)
1000ef44:	df000017 	ldw	fp,0(sp)
1000ef48:	dec00204 	addi	sp,sp,8
1000ef4c:	f800283a 	ret

1000ef50 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000ef50:	defffc04 	addi	sp,sp,-16
1000ef54:	df000315 	stw	fp,12(sp)
1000ef58:	df000304 	addi	fp,sp,12
1000ef5c:	e13ffd15 	stw	r4,-12(fp)
1000ef60:	e17ffe15 	stw	r5,-8(fp)
1000ef64:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000ef68:	e0bfff17 	ldw	r2,-4(fp)
}
1000ef6c:	e037883a 	mov	sp,fp
1000ef70:	df000017 	ldw	fp,0(sp)
1000ef74:	dec00104 	addi	sp,sp,4
1000ef78:	f800283a 	ret

1000ef7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ef7c:	defffe04 	addi	sp,sp,-8
1000ef80:	dfc00115 	stw	ra,4(sp)
1000ef84:	df000015 	stw	fp,0(sp)
1000ef88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ef8c:	00840074 	movhi	r2,4097
1000ef90:	108eef04 	addi	r2,r2,15292
1000ef94:	10800017 	ldw	r2,0(r2)
1000ef98:	10000526 	beq	r2,zero,1000efb0 <alt_get_errno+0x34>
1000ef9c:	00840074 	movhi	r2,4097
1000efa0:	108eef04 	addi	r2,r2,15292
1000efa4:	10800017 	ldw	r2,0(r2)
1000efa8:	103ee83a 	callr	r2
1000efac:	00000206 	br	1000efb8 <alt_get_errno+0x3c>
1000efb0:	00840074 	movhi	r2,4097
1000efb4:	1095b604 	addi	r2,r2,22232
}
1000efb8:	e037883a 	mov	sp,fp
1000efbc:	dfc00117 	ldw	ra,4(sp)
1000efc0:	df000017 	ldw	fp,0(sp)
1000efc4:	dec00204 	addi	sp,sp,8
1000efc8:	f800283a 	ret

1000efcc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000efcc:	defffb04 	addi	sp,sp,-20
1000efd0:	dfc00415 	stw	ra,16(sp)
1000efd4:	df000315 	stw	fp,12(sp)
1000efd8:	df000304 	addi	fp,sp,12
1000efdc:	e13ffe15 	stw	r4,-8(fp)
1000efe0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000efe4:	e0bffe17 	ldw	r2,-8(fp)
1000efe8:	10000816 	blt	r2,zero,1000f00c <fstat+0x40>
1000efec:	e13ffe17 	ldw	r4,-8(fp)
1000eff0:	01400304 	movi	r5,12
1000eff4:	000c6040 	call	1000c604 <__mulsi3>
1000eff8:	1007883a 	mov	r3,r2
1000effc:	00840074 	movhi	r2,4097
1000f000:	108a6c04 	addi	r2,r2,10672
1000f004:	1885883a 	add	r2,r3,r2
1000f008:	00000106 	br	1000f010 <fstat+0x44>
1000f00c:	0005883a 	mov	r2,zero
1000f010:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000f014:	e0bffd17 	ldw	r2,-12(fp)
1000f018:	10001026 	beq	r2,zero,1000f05c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000f01c:	e0bffd17 	ldw	r2,-12(fp)
1000f020:	10800017 	ldw	r2,0(r2)
1000f024:	10800817 	ldw	r2,32(r2)
1000f028:	10000726 	beq	r2,zero,1000f048 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000f02c:	e0bffd17 	ldw	r2,-12(fp)
1000f030:	10800017 	ldw	r2,0(r2)
1000f034:	10800817 	ldw	r2,32(r2)
1000f038:	e13ffd17 	ldw	r4,-12(fp)
1000f03c:	e17fff17 	ldw	r5,-4(fp)
1000f040:	103ee83a 	callr	r2
1000f044:	00000a06 	br	1000f070 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000f048:	e0bfff17 	ldw	r2,-4(fp)
1000f04c:	00c80004 	movi	r3,8192
1000f050:	10c00115 	stw	r3,4(r2)
      return 0;
1000f054:	0005883a 	mov	r2,zero
1000f058:	00000506 	br	1000f070 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f05c:	000ef7c0 	call	1000ef7c <alt_get_errno>
1000f060:	1007883a 	mov	r3,r2
1000f064:	00801444 	movi	r2,81
1000f068:	18800015 	stw	r2,0(r3)
    return -1;
1000f06c:	00bfffc4 	movi	r2,-1
  }
}
1000f070:	e037883a 	mov	sp,fp
1000f074:	dfc00117 	ldw	ra,4(sp)
1000f078:	df000017 	ldw	fp,0(sp)
1000f07c:	dec00204 	addi	sp,sp,8
1000f080:	f800283a 	ret

1000f084 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f084:	defffe04 	addi	sp,sp,-8
1000f088:	dfc00115 	stw	ra,4(sp)
1000f08c:	df000015 	stw	fp,0(sp)
1000f090:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f094:	00840074 	movhi	r2,4097
1000f098:	108eef04 	addi	r2,r2,15292
1000f09c:	10800017 	ldw	r2,0(r2)
1000f0a0:	10000526 	beq	r2,zero,1000f0b8 <alt_get_errno+0x34>
1000f0a4:	00840074 	movhi	r2,4097
1000f0a8:	108eef04 	addi	r2,r2,15292
1000f0ac:	10800017 	ldw	r2,0(r2)
1000f0b0:	103ee83a 	callr	r2
1000f0b4:	00000206 	br	1000f0c0 <alt_get_errno+0x3c>
1000f0b8:	00840074 	movhi	r2,4097
1000f0bc:	1095b604 	addi	r2,r2,22232
}
1000f0c0:	e037883a 	mov	sp,fp
1000f0c4:	dfc00117 	ldw	ra,4(sp)
1000f0c8:	df000017 	ldw	fp,0(sp)
1000f0cc:	dec00204 	addi	sp,sp,8
1000f0d0:	f800283a 	ret

1000f0d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000f0d4:	deffed04 	addi	sp,sp,-76
1000f0d8:	dfc01215 	stw	ra,72(sp)
1000f0dc:	df001115 	stw	fp,68(sp)
1000f0e0:	df001104 	addi	fp,sp,68
1000f0e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f0e8:	e0bfff17 	ldw	r2,-4(fp)
1000f0ec:	10000816 	blt	r2,zero,1000f110 <isatty+0x3c>
1000f0f0:	e13fff17 	ldw	r4,-4(fp)
1000f0f4:	01400304 	movi	r5,12
1000f0f8:	000c6040 	call	1000c604 <__mulsi3>
1000f0fc:	1007883a 	mov	r3,r2
1000f100:	00840074 	movhi	r2,4097
1000f104:	108a6c04 	addi	r2,r2,10672
1000f108:	1885883a 	add	r2,r3,r2
1000f10c:	00000106 	br	1000f114 <isatty+0x40>
1000f110:	0005883a 	mov	r2,zero
1000f114:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000f118:	e0bfef17 	ldw	r2,-68(fp)
1000f11c:	10000e26 	beq	r2,zero,1000f158 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000f120:	e0bfef17 	ldw	r2,-68(fp)
1000f124:	10800017 	ldw	r2,0(r2)
1000f128:	10800817 	ldw	r2,32(r2)
1000f12c:	1000021e 	bne	r2,zero,1000f138 <isatty+0x64>
    {
      return 1;
1000f130:	00800044 	movi	r2,1
1000f134:	00000d06 	br	1000f16c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000f138:	e0bff004 	addi	r2,fp,-64
1000f13c:	e13fff17 	ldw	r4,-4(fp)
1000f140:	100b883a 	mov	r5,r2
1000f144:	000efcc0 	call	1000efcc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000f148:	e0bff117 	ldw	r2,-60(fp)
1000f14c:	10880020 	cmpeqi	r2,r2,8192
1000f150:	10803fcc 	andi	r2,r2,255
1000f154:	00000506 	br	1000f16c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f158:	000f0840 	call	1000f084 <alt_get_errno>
1000f15c:	1007883a 	mov	r3,r2
1000f160:	00801444 	movi	r2,81
1000f164:	18800015 	stw	r2,0(r3)
    return 0;
1000f168:	0005883a 	mov	r2,zero
  }
}
1000f16c:	e037883a 	mov	sp,fp
1000f170:	dfc00117 	ldw	ra,4(sp)
1000f174:	df000017 	ldw	fp,0(sp)
1000f178:	dec00204 	addi	sp,sp,8
1000f17c:	f800283a 	ret

1000f180 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000f180:	defffc04 	addi	sp,sp,-16
1000f184:	df000315 	stw	fp,12(sp)
1000f188:	df000304 	addi	fp,sp,12
1000f18c:	e13ffd15 	stw	r4,-12(fp)
1000f190:	e17ffe15 	stw	r5,-8(fp)
1000f194:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000f198:	e0fffe17 	ldw	r3,-8(fp)
1000f19c:	e0bffd17 	ldw	r2,-12(fp)
1000f1a0:	18800c26 	beq	r3,r2,1000f1d4 <alt_load_section+0x54>
  {
    while( to != end )
1000f1a4:	00000806 	br	1000f1c8 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000f1a8:	e0bffe17 	ldw	r2,-8(fp)
1000f1ac:	10c00104 	addi	r3,r2,4
1000f1b0:	e0fffe15 	stw	r3,-8(fp)
1000f1b4:	e0fffd17 	ldw	r3,-12(fp)
1000f1b8:	19000104 	addi	r4,r3,4
1000f1bc:	e13ffd15 	stw	r4,-12(fp)
1000f1c0:	18c00017 	ldw	r3,0(r3)
1000f1c4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000f1c8:	e0fffe17 	ldw	r3,-8(fp)
1000f1cc:	e0bfff17 	ldw	r2,-4(fp)
1000f1d0:	18bff51e 	bne	r3,r2,1000f1a8 <__alt_data_end+0xf800f1a8>
    {
      *to++ = *from++;
    }
  }
}
1000f1d4:	e037883a 	mov	sp,fp
1000f1d8:	df000017 	ldw	fp,0(sp)
1000f1dc:	dec00104 	addi	sp,sp,4
1000f1e0:	f800283a 	ret

1000f1e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000f1e4:	defffe04 	addi	sp,sp,-8
1000f1e8:	dfc00115 	stw	ra,4(sp)
1000f1ec:	df000015 	stw	fp,0(sp)
1000f1f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000f1f4:	01040074 	movhi	r4,4097
1000f1f8:	210ef404 	addi	r4,r4,15312
1000f1fc:	01440074 	movhi	r5,4097
1000f200:	29483904 	addi	r5,r5,8420
1000f204:	01840074 	movhi	r6,4097
1000f208:	318ef404 	addi	r6,r6,15312
1000f20c:	000f1800 	call	1000f180 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000f210:	01040034 	movhi	r4,4096
1000f214:	21000804 	addi	r4,r4,32
1000f218:	01440034 	movhi	r5,4096
1000f21c:	29400804 	addi	r5,r5,32
1000f220:	01840034 	movhi	r6,4096
1000f224:	31806f04 	addi	r6,r6,444
1000f228:	000f1800 	call	1000f180 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000f22c:	01040074 	movhi	r4,4097
1000f230:	21059b04 	addi	r4,r4,5740
1000f234:	01440074 	movhi	r5,4097
1000f238:	29459b04 	addi	r5,r5,5740
1000f23c:	01840074 	movhi	r6,4097
1000f240:	31883904 	addi	r6,r6,8420
1000f244:	000f1800 	call	1000f180 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000f248:	00105e40 	call	100105e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000f24c:	00107ac0 	call	100107ac <alt_icache_flush_all>
}
1000f250:	e037883a 	mov	sp,fp
1000f254:	dfc00117 	ldw	ra,4(sp)
1000f258:	df000017 	ldw	fp,0(sp)
1000f25c:	dec00204 	addi	sp,sp,8
1000f260:	f800283a 	ret

1000f264 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f264:	defffe04 	addi	sp,sp,-8
1000f268:	dfc00115 	stw	ra,4(sp)
1000f26c:	df000015 	stw	fp,0(sp)
1000f270:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f274:	00840074 	movhi	r2,4097
1000f278:	108eef04 	addi	r2,r2,15292
1000f27c:	10800017 	ldw	r2,0(r2)
1000f280:	10000526 	beq	r2,zero,1000f298 <alt_get_errno+0x34>
1000f284:	00840074 	movhi	r2,4097
1000f288:	108eef04 	addi	r2,r2,15292
1000f28c:	10800017 	ldw	r2,0(r2)
1000f290:	103ee83a 	callr	r2
1000f294:	00000206 	br	1000f2a0 <alt_get_errno+0x3c>
1000f298:	00840074 	movhi	r2,4097
1000f29c:	1095b604 	addi	r2,r2,22232
}
1000f2a0:	e037883a 	mov	sp,fp
1000f2a4:	dfc00117 	ldw	ra,4(sp)
1000f2a8:	df000017 	ldw	fp,0(sp)
1000f2ac:	dec00204 	addi	sp,sp,8
1000f2b0:	f800283a 	ret

1000f2b4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000f2b4:	defff904 	addi	sp,sp,-28
1000f2b8:	dfc00615 	stw	ra,24(sp)
1000f2bc:	df000515 	stw	fp,20(sp)
1000f2c0:	df000504 	addi	fp,sp,20
1000f2c4:	e13ffd15 	stw	r4,-12(fp)
1000f2c8:	e17ffe15 	stw	r5,-8(fp)
1000f2cc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000f2d0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f2d4:	e0bffd17 	ldw	r2,-12(fp)
1000f2d8:	10000816 	blt	r2,zero,1000f2fc <lseek+0x48>
1000f2dc:	e13ffd17 	ldw	r4,-12(fp)
1000f2e0:	01400304 	movi	r5,12
1000f2e4:	000c6040 	call	1000c604 <__mulsi3>
1000f2e8:	1007883a 	mov	r3,r2
1000f2ec:	00840074 	movhi	r2,4097
1000f2f0:	108a6c04 	addi	r2,r2,10672
1000f2f4:	1885883a 	add	r2,r3,r2
1000f2f8:	00000106 	br	1000f300 <lseek+0x4c>
1000f2fc:	0005883a 	mov	r2,zero
1000f300:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000f304:	e0bffc17 	ldw	r2,-16(fp)
1000f308:	10001026 	beq	r2,zero,1000f34c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000f30c:	e0bffc17 	ldw	r2,-16(fp)
1000f310:	10800017 	ldw	r2,0(r2)
1000f314:	10800717 	ldw	r2,28(r2)
1000f318:	10000926 	beq	r2,zero,1000f340 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000f31c:	e0bffc17 	ldw	r2,-16(fp)
1000f320:	10800017 	ldw	r2,0(r2)
1000f324:	10800717 	ldw	r2,28(r2)
1000f328:	e13ffc17 	ldw	r4,-16(fp)
1000f32c:	e17ffe17 	ldw	r5,-8(fp)
1000f330:	e1bfff17 	ldw	r6,-4(fp)
1000f334:	103ee83a 	callr	r2
1000f338:	e0bffb15 	stw	r2,-20(fp)
1000f33c:	00000506 	br	1000f354 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000f340:	00bfde84 	movi	r2,-134
1000f344:	e0bffb15 	stw	r2,-20(fp)
1000f348:	00000206 	br	1000f354 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000f34c:	00bfebc4 	movi	r2,-81
1000f350:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000f354:	e0bffb17 	ldw	r2,-20(fp)
1000f358:	1000070e 	bge	r2,zero,1000f378 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000f35c:	000f2640 	call	1000f264 <alt_get_errno>
1000f360:	1007883a 	mov	r3,r2
1000f364:	e0bffb17 	ldw	r2,-20(fp)
1000f368:	0085c83a 	sub	r2,zero,r2
1000f36c:	18800015 	stw	r2,0(r3)
    rc = -1;
1000f370:	00bfffc4 	movi	r2,-1
1000f374:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000f378:	e0bffb17 	ldw	r2,-20(fp)
}
1000f37c:	e037883a 	mov	sp,fp
1000f380:	dfc00117 	ldw	ra,4(sp)
1000f384:	df000017 	ldw	fp,0(sp)
1000f388:	dec00204 	addi	sp,sp,8
1000f38c:	f800283a 	ret

1000f390 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000f390:	defffd04 	addi	sp,sp,-12
1000f394:	dfc00215 	stw	ra,8(sp)
1000f398:	df000115 	stw	fp,4(sp)
1000f39c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000f3a0:	0009883a 	mov	r4,zero
1000f3a4:	000f8840 	call	1000f884 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000f3a8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000f3ac:	000f8b80 	call	1000f8b8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000f3b0:	01040074 	movhi	r4,4097
1000f3b4:	21082f04 	addi	r4,r4,8380
1000f3b8:	01440074 	movhi	r5,4097
1000f3bc:	29482f04 	addi	r5,r5,8380
1000f3c0:	01840074 	movhi	r6,4097
1000f3c4:	31882f04 	addi	r6,r6,8380
1000f3c8:	0010b780 	call	10010b78 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000f3cc:	00106f40 	call	100106f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000f3d0:	01040074 	movhi	r4,4097
1000f3d4:	2101d404 	addi	r4,r4,1872
1000f3d8:	00112c80 	call	100112c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000f3dc:	d126d317 	ldw	r4,-25780(gp)
1000f3e0:	d0e6d417 	ldw	r3,-25776(gp)
1000f3e4:	d0a6d517 	ldw	r2,-25772(gp)
1000f3e8:	180b883a 	mov	r5,r3
1000f3ec:	100d883a 	mov	r6,r2
1000f3f0:	000048c0 	call	1000048c <main>
1000f3f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000f3f8:	01000044 	movi	r4,1
1000f3fc:	000ee780 	call	1000ee78 <close>
  exit (result);
1000f400:	e13fff17 	ldw	r4,-4(fp)
1000f404:	00112dc0 	call	100112dc <exit>

1000f408 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000f408:	defffe04 	addi	sp,sp,-8
1000f40c:	df000115 	stw	fp,4(sp)
1000f410:	df000104 	addi	fp,sp,4
1000f414:	e13fff15 	stw	r4,-4(fp)
}
1000f418:	e037883a 	mov	sp,fp
1000f41c:	df000017 	ldw	fp,0(sp)
1000f420:	dec00104 	addi	sp,sp,4
1000f424:	f800283a 	ret

1000f428 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000f428:	defffe04 	addi	sp,sp,-8
1000f42c:	df000115 	stw	fp,4(sp)
1000f430:	df000104 	addi	fp,sp,4
1000f434:	e13fff15 	stw	r4,-4(fp)
}
1000f438:	e037883a 	mov	sp,fp
1000f43c:	df000017 	ldw	fp,0(sp)
1000f440:	dec00104 	addi	sp,sp,4
1000f444:	f800283a 	ret

1000f448 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f448:	defffe04 	addi	sp,sp,-8
1000f44c:	dfc00115 	stw	ra,4(sp)
1000f450:	df000015 	stw	fp,0(sp)
1000f454:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f458:	00840074 	movhi	r2,4097
1000f45c:	108eef04 	addi	r2,r2,15292
1000f460:	10800017 	ldw	r2,0(r2)
1000f464:	10000526 	beq	r2,zero,1000f47c <alt_get_errno+0x34>
1000f468:	00840074 	movhi	r2,4097
1000f46c:	108eef04 	addi	r2,r2,15292
1000f470:	10800017 	ldw	r2,0(r2)
1000f474:	103ee83a 	callr	r2
1000f478:	00000206 	br	1000f484 <alt_get_errno+0x3c>
1000f47c:	00840074 	movhi	r2,4097
1000f480:	1095b604 	addi	r2,r2,22232
}
1000f484:	e037883a 	mov	sp,fp
1000f488:	dfc00117 	ldw	ra,4(sp)
1000f48c:	df000017 	ldw	fp,0(sp)
1000f490:	dec00204 	addi	sp,sp,8
1000f494:	f800283a 	ret

1000f498 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000f498:	defff904 	addi	sp,sp,-28
1000f49c:	dfc00615 	stw	ra,24(sp)
1000f4a0:	df000515 	stw	fp,20(sp)
1000f4a4:	df000504 	addi	fp,sp,20
1000f4a8:	e13ffd15 	stw	r4,-12(fp)
1000f4ac:	e17ffe15 	stw	r5,-8(fp)
1000f4b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f4b4:	e0bffd17 	ldw	r2,-12(fp)
1000f4b8:	10000816 	blt	r2,zero,1000f4dc <read+0x44>
1000f4bc:	e13ffd17 	ldw	r4,-12(fp)
1000f4c0:	01400304 	movi	r5,12
1000f4c4:	000c6040 	call	1000c604 <__mulsi3>
1000f4c8:	1007883a 	mov	r3,r2
1000f4cc:	00840074 	movhi	r2,4097
1000f4d0:	108a6c04 	addi	r2,r2,10672
1000f4d4:	1885883a 	add	r2,r3,r2
1000f4d8:	00000106 	br	1000f4e0 <read+0x48>
1000f4dc:	0005883a 	mov	r2,zero
1000f4e0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f4e4:	e0bffb17 	ldw	r2,-20(fp)
1000f4e8:	10002226 	beq	r2,zero,1000f574 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f4ec:	e0bffb17 	ldw	r2,-20(fp)
1000f4f0:	10800217 	ldw	r2,8(r2)
1000f4f4:	108000cc 	andi	r2,r2,3
1000f4f8:	10800060 	cmpeqi	r2,r2,1
1000f4fc:	1000181e 	bne	r2,zero,1000f560 <read+0xc8>
        (fd->dev->read))
1000f500:	e0bffb17 	ldw	r2,-20(fp)
1000f504:	10800017 	ldw	r2,0(r2)
1000f508:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f50c:	10001426 	beq	r2,zero,1000f560 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000f510:	e0bffb17 	ldw	r2,-20(fp)
1000f514:	10800017 	ldw	r2,0(r2)
1000f518:	10800517 	ldw	r2,20(r2)
1000f51c:	e0ffff17 	ldw	r3,-4(fp)
1000f520:	e13ffb17 	ldw	r4,-20(fp)
1000f524:	e17ffe17 	ldw	r5,-8(fp)
1000f528:	180d883a 	mov	r6,r3
1000f52c:	103ee83a 	callr	r2
1000f530:	e0bffc15 	stw	r2,-16(fp)
1000f534:	e0bffc17 	ldw	r2,-16(fp)
1000f538:	1000070e 	bge	r2,zero,1000f558 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000f53c:	000f4480 	call	1000f448 <alt_get_errno>
1000f540:	1007883a 	mov	r3,r2
1000f544:	e0bffc17 	ldw	r2,-16(fp)
1000f548:	0085c83a 	sub	r2,zero,r2
1000f54c:	18800015 	stw	r2,0(r3)
          return -1;
1000f550:	00bfffc4 	movi	r2,-1
1000f554:	00000c06 	br	1000f588 <read+0xf0>
        }
        return rval;
1000f558:	e0bffc17 	ldw	r2,-16(fp)
1000f55c:	00000a06 	br	1000f588 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000f560:	000f4480 	call	1000f448 <alt_get_errno>
1000f564:	1007883a 	mov	r3,r2
1000f568:	00800344 	movi	r2,13
1000f56c:	18800015 	stw	r2,0(r3)
1000f570:	00000406 	br	1000f584 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000f574:	000f4480 	call	1000f448 <alt_get_errno>
1000f578:	1007883a 	mov	r3,r2
1000f57c:	00801444 	movi	r2,81
1000f580:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f584:	00bfffc4 	movi	r2,-1
}
1000f588:	e037883a 	mov	sp,fp
1000f58c:	dfc00117 	ldw	ra,4(sp)
1000f590:	df000017 	ldw	fp,0(sp)
1000f594:	dec00204 	addi	sp,sp,8
1000f598:	f800283a 	ret

1000f59c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000f59c:	defffc04 	addi	sp,sp,-16
1000f5a0:	dfc00315 	stw	ra,12(sp)
1000f5a4:	df000215 	stw	fp,8(sp)
1000f5a8:	dc000115 	stw	r16,4(sp)
1000f5ac:	df000204 	addi	fp,sp,8
1000f5b0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000f5b4:	e0bffe17 	ldw	r2,-8(fp)
1000f5b8:	108000d0 	cmplti	r2,r2,3
1000f5bc:	1000111e 	bne	r2,zero,1000f604 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000f5c0:	04040074 	movhi	r16,4097
1000f5c4:	840a6c04 	addi	r16,r16,10672
1000f5c8:	e0bffe17 	ldw	r2,-8(fp)
1000f5cc:	1009883a 	mov	r4,r2
1000f5d0:	01400304 	movi	r5,12
1000f5d4:	000c6040 	call	1000c604 <__mulsi3>
1000f5d8:	8085883a 	add	r2,r16,r2
1000f5dc:	10800204 	addi	r2,r2,8
1000f5e0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000f5e4:	04040074 	movhi	r16,4097
1000f5e8:	840a6c04 	addi	r16,r16,10672
1000f5ec:	e0bffe17 	ldw	r2,-8(fp)
1000f5f0:	1009883a 	mov	r4,r2
1000f5f4:	01400304 	movi	r5,12
1000f5f8:	000c6040 	call	1000c604 <__mulsi3>
1000f5fc:	8085883a 	add	r2,r16,r2
1000f600:	10000015 	stw	zero,0(r2)
  }
}
1000f604:	e6ffff04 	addi	sp,fp,-4
1000f608:	dfc00217 	ldw	ra,8(sp)
1000f60c:	df000117 	ldw	fp,4(sp)
1000f610:	dc000017 	ldw	r16,0(sp)
1000f614:	dec00304 	addi	sp,sp,12
1000f618:	f800283a 	ret

1000f61c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000f61c:	defff904 	addi	sp,sp,-28
1000f620:	df000615 	stw	fp,24(sp)
1000f624:	df000604 	addi	fp,sp,24
1000f628:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f62c:	0005303a 	rdctl	r2,status
1000f630:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f634:	e0fffc17 	ldw	r3,-16(fp)
1000f638:	00bfff84 	movi	r2,-2
1000f63c:	1884703a 	and	r2,r3,r2
1000f640:	1001703a 	wrctl	status,r2
  
  return context;
1000f644:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000f648:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000f64c:	d0a00c17 	ldw	r2,-32720(gp)
1000f650:	10c000c4 	addi	r3,r2,3
1000f654:	00bfff04 	movi	r2,-4
1000f658:	1884703a 	and	r2,r3,r2
1000f65c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000f660:	d0e00c17 	ldw	r3,-32720(gp)
1000f664:	e0bfff17 	ldw	r2,-4(fp)
1000f668:	1887883a 	add	r3,r3,r2
1000f66c:	00860034 	movhi	r2,6144
1000f670:	10800004 	addi	r2,r2,0
1000f674:	10c0062e 	bgeu	r2,r3,1000f690 <sbrk+0x74>
1000f678:	e0bffa17 	ldw	r2,-24(fp)
1000f67c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f680:	e0bffd17 	ldw	r2,-12(fp)
1000f684:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000f688:	00bfffc4 	movi	r2,-1
1000f68c:	00000b06 	br	1000f6bc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000f690:	d0a00c17 	ldw	r2,-32720(gp)
1000f694:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000f698:	d0e00c17 	ldw	r3,-32720(gp)
1000f69c:	e0bfff17 	ldw	r2,-4(fp)
1000f6a0:	1885883a 	add	r2,r3,r2
1000f6a4:	d0a00c15 	stw	r2,-32720(gp)
1000f6a8:	e0bffa17 	ldw	r2,-24(fp)
1000f6ac:	e0bffe15 	stw	r2,-8(fp)
1000f6b0:	e0bffe17 	ldw	r2,-8(fp)
1000f6b4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000f6b8:	e0bffb17 	ldw	r2,-20(fp)
} 
1000f6bc:	e037883a 	mov	sp,fp
1000f6c0:	df000017 	ldw	fp,0(sp)
1000f6c4:	dec00104 	addi	sp,sp,4
1000f6c8:	f800283a 	ret

1000f6cc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000f6cc:	defffd04 	addi	sp,sp,-12
1000f6d0:	dfc00215 	stw	ra,8(sp)
1000f6d4:	df000115 	stw	fp,4(sp)
1000f6d8:	df000104 	addi	fp,sp,4
1000f6dc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000f6e0:	e13fff17 	ldw	r4,-4(fp)
1000f6e4:	001048c0 	call	1001048c <alt_busy_sleep>
}
1000f6e8:	e037883a 	mov	sp,fp
1000f6ec:	dfc00117 	ldw	ra,4(sp)
1000f6f0:	df000017 	ldw	fp,0(sp)
1000f6f4:	dec00204 	addi	sp,sp,8
1000f6f8:	f800283a 	ret

1000f6fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f6fc:	defffe04 	addi	sp,sp,-8
1000f700:	dfc00115 	stw	ra,4(sp)
1000f704:	df000015 	stw	fp,0(sp)
1000f708:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f70c:	00840074 	movhi	r2,4097
1000f710:	108eef04 	addi	r2,r2,15292
1000f714:	10800017 	ldw	r2,0(r2)
1000f718:	10000526 	beq	r2,zero,1000f730 <alt_get_errno+0x34>
1000f71c:	00840074 	movhi	r2,4097
1000f720:	108eef04 	addi	r2,r2,15292
1000f724:	10800017 	ldw	r2,0(r2)
1000f728:	103ee83a 	callr	r2
1000f72c:	00000206 	br	1000f738 <alt_get_errno+0x3c>
1000f730:	00840074 	movhi	r2,4097
1000f734:	1095b604 	addi	r2,r2,22232
}
1000f738:	e037883a 	mov	sp,fp
1000f73c:	dfc00117 	ldw	ra,4(sp)
1000f740:	df000017 	ldw	fp,0(sp)
1000f744:	dec00204 	addi	sp,sp,8
1000f748:	f800283a 	ret

1000f74c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000f74c:	defff904 	addi	sp,sp,-28
1000f750:	dfc00615 	stw	ra,24(sp)
1000f754:	df000515 	stw	fp,20(sp)
1000f758:	df000504 	addi	fp,sp,20
1000f75c:	e13ffd15 	stw	r4,-12(fp)
1000f760:	e17ffe15 	stw	r5,-8(fp)
1000f764:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f768:	e0bffd17 	ldw	r2,-12(fp)
1000f76c:	10000816 	blt	r2,zero,1000f790 <write+0x44>
1000f770:	e13ffd17 	ldw	r4,-12(fp)
1000f774:	01400304 	movi	r5,12
1000f778:	000c6040 	call	1000c604 <__mulsi3>
1000f77c:	1007883a 	mov	r3,r2
1000f780:	00840074 	movhi	r2,4097
1000f784:	108a6c04 	addi	r2,r2,10672
1000f788:	1885883a 	add	r2,r3,r2
1000f78c:	00000106 	br	1000f794 <write+0x48>
1000f790:	0005883a 	mov	r2,zero
1000f794:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f798:	e0bffb17 	ldw	r2,-20(fp)
1000f79c:	10002126 	beq	r2,zero,1000f824 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000f7a0:	e0bffb17 	ldw	r2,-20(fp)
1000f7a4:	10800217 	ldw	r2,8(r2)
1000f7a8:	108000cc 	andi	r2,r2,3
1000f7ac:	10001826 	beq	r2,zero,1000f810 <write+0xc4>
1000f7b0:	e0bffb17 	ldw	r2,-20(fp)
1000f7b4:	10800017 	ldw	r2,0(r2)
1000f7b8:	10800617 	ldw	r2,24(r2)
1000f7bc:	10001426 	beq	r2,zero,1000f810 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000f7c0:	e0bffb17 	ldw	r2,-20(fp)
1000f7c4:	10800017 	ldw	r2,0(r2)
1000f7c8:	10800617 	ldw	r2,24(r2)
1000f7cc:	e0ffff17 	ldw	r3,-4(fp)
1000f7d0:	e13ffb17 	ldw	r4,-20(fp)
1000f7d4:	e17ffe17 	ldw	r5,-8(fp)
1000f7d8:	180d883a 	mov	r6,r3
1000f7dc:	103ee83a 	callr	r2
1000f7e0:	e0bffc15 	stw	r2,-16(fp)
1000f7e4:	e0bffc17 	ldw	r2,-16(fp)
1000f7e8:	1000070e 	bge	r2,zero,1000f808 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000f7ec:	000f6fc0 	call	1000f6fc <alt_get_errno>
1000f7f0:	1007883a 	mov	r3,r2
1000f7f4:	e0bffc17 	ldw	r2,-16(fp)
1000f7f8:	0085c83a 	sub	r2,zero,r2
1000f7fc:	18800015 	stw	r2,0(r3)
        return -1;
1000f800:	00bfffc4 	movi	r2,-1
1000f804:	00000c06 	br	1000f838 <write+0xec>
      }
      return rval;
1000f808:	e0bffc17 	ldw	r2,-16(fp)
1000f80c:	00000a06 	br	1000f838 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000f810:	000f6fc0 	call	1000f6fc <alt_get_errno>
1000f814:	1007883a 	mov	r3,r2
1000f818:	00800344 	movi	r2,13
1000f81c:	18800015 	stw	r2,0(r3)
1000f820:	00000406 	br	1000f834 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000f824:	000f6fc0 	call	1000f6fc <alt_get_errno>
1000f828:	1007883a 	mov	r3,r2
1000f82c:	00801444 	movi	r2,81
1000f830:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f834:	00bfffc4 	movi	r2,-1
}
1000f838:	e037883a 	mov	sp,fp
1000f83c:	dfc00117 	ldw	ra,4(sp)
1000f840:	df000017 	ldw	fp,0(sp)
1000f844:	dec00204 	addi	sp,sp,8
1000f848:	f800283a 	ret

1000f84c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000f84c:	defffd04 	addi	sp,sp,-12
1000f850:	dfc00215 	stw	ra,8(sp)
1000f854:	df000115 	stw	fp,4(sp)
1000f858:	df000104 	addi	fp,sp,4
1000f85c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000f860:	e13fff17 	ldw	r4,-4(fp)
1000f864:	01440074 	movhi	r5,4097
1000f868:	294eec04 	addi	r5,r5,15280
1000f86c:	00106500 	call	10010650 <alt_dev_llist_insert>
}
1000f870:	e037883a 	mov	sp,fp
1000f874:	dfc00117 	ldw	ra,4(sp)
1000f878:	df000017 	ldw	fp,0(sp)
1000f87c:	dec00204 	addi	sp,sp,8
1000f880:	f800283a 	ret

1000f884 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000f884:	defffd04 	addi	sp,sp,-12
1000f888:	dfc00215 	stw	ra,8(sp)
1000f88c:	df000115 	stw	fp,4(sp)
1000f890:	df000104 	addi	fp,sp,4
1000f894:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000f898:	00110300 	call	10011030 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000f89c:	00800044 	movi	r2,1
1000f8a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000f8a4:	e037883a 	mov	sp,fp
1000f8a8:	dfc00117 	ldw	ra,4(sp)
1000f8ac:	df000017 	ldw	fp,0(sp)
1000f8b0:	dec00204 	addi	sp,sp,8
1000f8b4:	f800283a 	ret

1000f8b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000f8b8:	defffe04 	addi	sp,sp,-8
1000f8bc:	dfc00115 	stw	ra,4(sp)
1000f8c0:	df000015 	stw	fp,0(sp)
1000f8c4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000f8c8:	01040074 	movhi	r4,4097
1000f8cc:	210ad604 	addi	r4,r4,11096
1000f8d0:	000b883a 	mov	r5,zero
1000f8d4:	01800144 	movi	r6,5
1000f8d8:	000fa640 	call	1000fa64 <altera_avalon_jtag_uart_init>
1000f8dc:	01040074 	movhi	r4,4097
1000f8e0:	210acc04 	addi	r4,r4,11056
1000f8e4:	000f84c0 	call	1000f84c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000f8e8:	0001883a 	nop
}
1000f8ec:	e037883a 	mov	sp,fp
1000f8f0:	dfc00117 	ldw	ra,4(sp)
1000f8f4:	df000017 	ldw	fp,0(sp)
1000f8f8:	dec00204 	addi	sp,sp,8
1000f8fc:	f800283a 	ret

1000f900 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000f900:	defffa04 	addi	sp,sp,-24
1000f904:	dfc00515 	stw	ra,20(sp)
1000f908:	df000415 	stw	fp,16(sp)
1000f90c:	df000404 	addi	fp,sp,16
1000f910:	e13ffd15 	stw	r4,-12(fp)
1000f914:	e17ffe15 	stw	r5,-8(fp)
1000f918:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f91c:	e0bffd17 	ldw	r2,-12(fp)
1000f920:	10800017 	ldw	r2,0(r2)
1000f924:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000f928:	e0bffc17 	ldw	r2,-16(fp)
1000f92c:	10c00a04 	addi	r3,r2,40
1000f930:	e0bffd17 	ldw	r2,-12(fp)
1000f934:	10800217 	ldw	r2,8(r2)
1000f938:	1809883a 	mov	r4,r3
1000f93c:	e17ffe17 	ldw	r5,-8(fp)
1000f940:	e1bfff17 	ldw	r6,-4(fp)
1000f944:	100f883a 	mov	r7,r2
1000f948:	000ff280 	call	1000ff28 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000f94c:	e037883a 	mov	sp,fp
1000f950:	dfc00117 	ldw	ra,4(sp)
1000f954:	df000017 	ldw	fp,0(sp)
1000f958:	dec00204 	addi	sp,sp,8
1000f95c:	f800283a 	ret

1000f960 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000f960:	defffa04 	addi	sp,sp,-24
1000f964:	dfc00515 	stw	ra,20(sp)
1000f968:	df000415 	stw	fp,16(sp)
1000f96c:	df000404 	addi	fp,sp,16
1000f970:	e13ffd15 	stw	r4,-12(fp)
1000f974:	e17ffe15 	stw	r5,-8(fp)
1000f978:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f97c:	e0bffd17 	ldw	r2,-12(fp)
1000f980:	10800017 	ldw	r2,0(r2)
1000f984:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000f988:	e0bffc17 	ldw	r2,-16(fp)
1000f98c:	10c00a04 	addi	r3,r2,40
1000f990:	e0bffd17 	ldw	r2,-12(fp)
1000f994:	10800217 	ldw	r2,8(r2)
1000f998:	1809883a 	mov	r4,r3
1000f99c:	e17ffe17 	ldw	r5,-8(fp)
1000f9a0:	e1bfff17 	ldw	r6,-4(fp)
1000f9a4:	100f883a 	mov	r7,r2
1000f9a8:	00101340 	call	10010134 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000f9ac:	e037883a 	mov	sp,fp
1000f9b0:	dfc00117 	ldw	ra,4(sp)
1000f9b4:	df000017 	ldw	fp,0(sp)
1000f9b8:	dec00204 	addi	sp,sp,8
1000f9bc:	f800283a 	ret

1000f9c0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000f9c0:	defffc04 	addi	sp,sp,-16
1000f9c4:	dfc00315 	stw	ra,12(sp)
1000f9c8:	df000215 	stw	fp,8(sp)
1000f9cc:	df000204 	addi	fp,sp,8
1000f9d0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f9d4:	e0bfff17 	ldw	r2,-4(fp)
1000f9d8:	10800017 	ldw	r2,0(r2)
1000f9dc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000f9e0:	e0bffe17 	ldw	r2,-8(fp)
1000f9e4:	10c00a04 	addi	r3,r2,40
1000f9e8:	e0bfff17 	ldw	r2,-4(fp)
1000f9ec:	10800217 	ldw	r2,8(r2)
1000f9f0:	1809883a 	mov	r4,r3
1000f9f4:	100b883a 	mov	r5,r2
1000f9f8:	000fdd40 	call	1000fdd4 <altera_avalon_jtag_uart_close>
}
1000f9fc:	e037883a 	mov	sp,fp
1000fa00:	dfc00117 	ldw	ra,4(sp)
1000fa04:	df000017 	ldw	fp,0(sp)
1000fa08:	dec00204 	addi	sp,sp,8
1000fa0c:	f800283a 	ret

1000fa10 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000fa10:	defffa04 	addi	sp,sp,-24
1000fa14:	dfc00515 	stw	ra,20(sp)
1000fa18:	df000415 	stw	fp,16(sp)
1000fa1c:	df000404 	addi	fp,sp,16
1000fa20:	e13ffd15 	stw	r4,-12(fp)
1000fa24:	e17ffe15 	stw	r5,-8(fp)
1000fa28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000fa2c:	e0bffd17 	ldw	r2,-12(fp)
1000fa30:	10800017 	ldw	r2,0(r2)
1000fa34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000fa38:	e0bffc17 	ldw	r2,-16(fp)
1000fa3c:	10800a04 	addi	r2,r2,40
1000fa40:	1009883a 	mov	r4,r2
1000fa44:	e17ffe17 	ldw	r5,-8(fp)
1000fa48:	e1bfff17 	ldw	r6,-4(fp)
1000fa4c:	000fe3c0 	call	1000fe3c <altera_avalon_jtag_uart_ioctl>
}
1000fa50:	e037883a 	mov	sp,fp
1000fa54:	dfc00117 	ldw	ra,4(sp)
1000fa58:	df000017 	ldw	fp,0(sp)
1000fa5c:	dec00204 	addi	sp,sp,8
1000fa60:	f800283a 	ret

1000fa64 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000fa64:	defffa04 	addi	sp,sp,-24
1000fa68:	dfc00515 	stw	ra,20(sp)
1000fa6c:	df000415 	stw	fp,16(sp)
1000fa70:	df000404 	addi	fp,sp,16
1000fa74:	e13ffd15 	stw	r4,-12(fp)
1000fa78:	e17ffe15 	stw	r5,-8(fp)
1000fa7c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fa80:	e0bffd17 	ldw	r2,-12(fp)
1000fa84:	00c00044 	movi	r3,1
1000fa88:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000fa8c:	e0bffd17 	ldw	r2,-12(fp)
1000fa90:	10800017 	ldw	r2,0(r2)
1000fa94:	10800104 	addi	r2,r2,4
1000fa98:	1007883a 	mov	r3,r2
1000fa9c:	e0bffd17 	ldw	r2,-12(fp)
1000faa0:	10800817 	ldw	r2,32(r2)
1000faa4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000faa8:	e0fffe17 	ldw	r3,-8(fp)
1000faac:	e0bfff17 	ldw	r2,-4(fp)
1000fab0:	d8000015 	stw	zero,0(sp)
1000fab4:	1809883a 	mov	r4,r3
1000fab8:	100b883a 	mov	r5,r2
1000fabc:	01840074 	movhi	r6,4097
1000fac0:	31beca04 	addi	r6,r6,-1240
1000fac4:	e1fffd17 	ldw	r7,-12(fp)
1000fac8:	00107c80 	call	100107c8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000facc:	e0bffd17 	ldw	r2,-12(fp)
1000fad0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000fad4:	e0bffd17 	ldw	r2,-12(fp)
1000fad8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000fadc:	00840074 	movhi	r2,4097
1000fae0:	1095bb04 	addi	r2,r2,22252
1000fae4:	10800017 	ldw	r2,0(r2)
1000fae8:	1809883a 	mov	r4,r3
1000faec:	100b883a 	mov	r5,r2
1000faf0:	01840074 	movhi	r6,4097
1000faf4:	31bf4b04 	addi	r6,r6,-724
1000faf8:	e1fffd17 	ldw	r7,-12(fp)
1000fafc:	001034c0 	call	1001034c <alt_alarm_start>
1000fb00:	1000040e 	bge	r2,zero,1000fb14 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000fb04:	e0fffd17 	ldw	r3,-12(fp)
1000fb08:	00a00034 	movhi	r2,32768
1000fb0c:	10bfffc4 	addi	r2,r2,-1
1000fb10:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000fb14:	e037883a 	mov	sp,fp
1000fb18:	dfc00117 	ldw	ra,4(sp)
1000fb1c:	df000017 	ldw	fp,0(sp)
1000fb20:	dec00204 	addi	sp,sp,8
1000fb24:	f800283a 	ret

1000fb28 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000fb28:	defff804 	addi	sp,sp,-32
1000fb2c:	df000715 	stw	fp,28(sp)
1000fb30:	df000704 	addi	fp,sp,28
1000fb34:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000fb38:	e0bfff17 	ldw	r2,-4(fp)
1000fb3c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000fb40:	e0bffb17 	ldw	r2,-20(fp)
1000fb44:	10800017 	ldw	r2,0(r2)
1000fb48:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000fb4c:	e0bffc17 	ldw	r2,-16(fp)
1000fb50:	10800104 	addi	r2,r2,4
1000fb54:	10800037 	ldwio	r2,0(r2)
1000fb58:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000fb5c:	e0bffd17 	ldw	r2,-12(fp)
1000fb60:	1080c00c 	andi	r2,r2,768
1000fb64:	1000011e 	bne	r2,zero,1000fb6c <altera_avalon_jtag_uart_irq+0x44>
      break;
1000fb68:	00006c06 	br	1000fd1c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000fb6c:	e0bffd17 	ldw	r2,-12(fp)
1000fb70:	1080400c 	andi	r2,r2,256
1000fb74:	10003426 	beq	r2,zero,1000fc48 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000fb78:	00800074 	movhi	r2,1
1000fb7c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fb80:	e0bffb17 	ldw	r2,-20(fp)
1000fb84:	10800a17 	ldw	r2,40(r2)
1000fb88:	10800044 	addi	r2,r2,1
1000fb8c:	1081ffcc 	andi	r2,r2,2047
1000fb90:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000fb94:	e0bffb17 	ldw	r2,-20(fp)
1000fb98:	10c00b17 	ldw	r3,44(r2)
1000fb9c:	e0bffe17 	ldw	r2,-8(fp)
1000fba0:	1880011e 	bne	r3,r2,1000fba8 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000fba4:	00001606 	br	1000fc00 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000fba8:	e0bffc17 	ldw	r2,-16(fp)
1000fbac:	10800037 	ldwio	r2,0(r2)
1000fbb0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000fbb4:	e0bff917 	ldw	r2,-28(fp)
1000fbb8:	10a0000c 	andi	r2,r2,32768
1000fbbc:	1000011e 	bne	r2,zero,1000fbc4 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000fbc0:	00000f06 	br	1000fc00 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000fbc4:	e0bffb17 	ldw	r2,-20(fp)
1000fbc8:	10800a17 	ldw	r2,40(r2)
1000fbcc:	e0fff917 	ldw	r3,-28(fp)
1000fbd0:	1809883a 	mov	r4,r3
1000fbd4:	e0fffb17 	ldw	r3,-20(fp)
1000fbd8:	1885883a 	add	r2,r3,r2
1000fbdc:	10800e04 	addi	r2,r2,56
1000fbe0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fbe4:	e0bffb17 	ldw	r2,-20(fp)
1000fbe8:	10800a17 	ldw	r2,40(r2)
1000fbec:	10800044 	addi	r2,r2,1
1000fbf0:	10c1ffcc 	andi	r3,r2,2047
1000fbf4:	e0bffb17 	ldw	r2,-20(fp)
1000fbf8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000fbfc:	003fe006 	br	1000fb80 <__alt_data_end+0xf800fb80>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000fc00:	e0bff917 	ldw	r2,-28(fp)
1000fc04:	10bfffec 	andhi	r2,r2,65535
1000fc08:	10000f26 	beq	r2,zero,1000fc48 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fc0c:	e0bffb17 	ldw	r2,-20(fp)
1000fc10:	10c00817 	ldw	r3,32(r2)
1000fc14:	00bfff84 	movi	r2,-2
1000fc18:	1886703a 	and	r3,r3,r2
1000fc1c:	e0bffb17 	ldw	r2,-20(fp)
1000fc20:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000fc24:	e0bffc17 	ldw	r2,-16(fp)
1000fc28:	10800104 	addi	r2,r2,4
1000fc2c:	1007883a 	mov	r3,r2
1000fc30:	e0bffb17 	ldw	r2,-20(fp)
1000fc34:	10800817 	ldw	r2,32(r2)
1000fc38:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000fc3c:	e0bffc17 	ldw	r2,-16(fp)
1000fc40:	10800104 	addi	r2,r2,4
1000fc44:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000fc48:	e0bffd17 	ldw	r2,-12(fp)
1000fc4c:	1080800c 	andi	r2,r2,512
1000fc50:	10003126 	beq	r2,zero,1000fd18 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000fc54:	e0bffd17 	ldw	r2,-12(fp)
1000fc58:	1004d43a 	srli	r2,r2,16
1000fc5c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000fc60:	00001406 	br	1000fcb4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000fc64:	e0bffc17 	ldw	r2,-16(fp)
1000fc68:	e0fffb17 	ldw	r3,-20(fp)
1000fc6c:	18c00d17 	ldw	r3,52(r3)
1000fc70:	e13ffb17 	ldw	r4,-20(fp)
1000fc74:	20c7883a 	add	r3,r4,r3
1000fc78:	18c20e04 	addi	r3,r3,2104
1000fc7c:	18c00003 	ldbu	r3,0(r3)
1000fc80:	18c03fcc 	andi	r3,r3,255
1000fc84:	18c0201c 	xori	r3,r3,128
1000fc88:	18ffe004 	addi	r3,r3,-128
1000fc8c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fc90:	e0bffb17 	ldw	r2,-20(fp)
1000fc94:	10800d17 	ldw	r2,52(r2)
1000fc98:	10800044 	addi	r2,r2,1
1000fc9c:	10c1ffcc 	andi	r3,r2,2047
1000fca0:	e0bffb17 	ldw	r2,-20(fp)
1000fca4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000fca8:	e0bffa17 	ldw	r2,-24(fp)
1000fcac:	10bfffc4 	addi	r2,r2,-1
1000fcb0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000fcb4:	e0bffa17 	ldw	r2,-24(fp)
1000fcb8:	10000526 	beq	r2,zero,1000fcd0 <altera_avalon_jtag_uart_irq+0x1a8>
1000fcbc:	e0bffb17 	ldw	r2,-20(fp)
1000fcc0:	10c00d17 	ldw	r3,52(r2)
1000fcc4:	e0bffb17 	ldw	r2,-20(fp)
1000fcc8:	10800c17 	ldw	r2,48(r2)
1000fccc:	18bfe51e 	bne	r3,r2,1000fc64 <__alt_data_end+0xf800fc64>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000fcd0:	e0bffa17 	ldw	r2,-24(fp)
1000fcd4:	10001026 	beq	r2,zero,1000fd18 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000fcd8:	e0bffb17 	ldw	r2,-20(fp)
1000fcdc:	10c00817 	ldw	r3,32(r2)
1000fce0:	00bfff44 	movi	r2,-3
1000fce4:	1886703a 	and	r3,r3,r2
1000fce8:	e0bffb17 	ldw	r2,-20(fp)
1000fcec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fcf0:	e0bffb17 	ldw	r2,-20(fp)
1000fcf4:	10800017 	ldw	r2,0(r2)
1000fcf8:	10800104 	addi	r2,r2,4
1000fcfc:	1007883a 	mov	r3,r2
1000fd00:	e0bffb17 	ldw	r2,-20(fp)
1000fd04:	10800817 	ldw	r2,32(r2)
1000fd08:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000fd0c:	e0bffc17 	ldw	r2,-16(fp)
1000fd10:	10800104 	addi	r2,r2,4
1000fd14:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000fd18:	003f8c06 	br	1000fb4c <__alt_data_end+0xf800fb4c>
}
1000fd1c:	e037883a 	mov	sp,fp
1000fd20:	df000017 	ldw	fp,0(sp)
1000fd24:	dec00104 	addi	sp,sp,4
1000fd28:	f800283a 	ret

1000fd2c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000fd2c:	defff804 	addi	sp,sp,-32
1000fd30:	df000715 	stw	fp,28(sp)
1000fd34:	df000704 	addi	fp,sp,28
1000fd38:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000fd3c:	e0bffb17 	ldw	r2,-20(fp)
1000fd40:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000fd44:	e0bff917 	ldw	r2,-28(fp)
1000fd48:	10800017 	ldw	r2,0(r2)
1000fd4c:	10800104 	addi	r2,r2,4
1000fd50:	10800037 	ldwio	r2,0(r2)
1000fd54:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000fd58:	e0bffa17 	ldw	r2,-24(fp)
1000fd5c:	1081000c 	andi	r2,r2,1024
1000fd60:	10000b26 	beq	r2,zero,1000fd90 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000fd64:	e0bff917 	ldw	r2,-28(fp)
1000fd68:	10800017 	ldw	r2,0(r2)
1000fd6c:	10800104 	addi	r2,r2,4
1000fd70:	1007883a 	mov	r3,r2
1000fd74:	e0bff917 	ldw	r2,-28(fp)
1000fd78:	10800817 	ldw	r2,32(r2)
1000fd7c:	10810014 	ori	r2,r2,1024
1000fd80:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000fd84:	e0bff917 	ldw	r2,-28(fp)
1000fd88:	10000915 	stw	zero,36(r2)
1000fd8c:	00000a06 	br	1000fdb8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000fd90:	e0bff917 	ldw	r2,-28(fp)
1000fd94:	10c00917 	ldw	r3,36(r2)
1000fd98:	00a00034 	movhi	r2,32768
1000fd9c:	10bfff04 	addi	r2,r2,-4
1000fda0:	10c00536 	bltu	r2,r3,1000fdb8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000fda4:	e0bff917 	ldw	r2,-28(fp)
1000fda8:	10800917 	ldw	r2,36(r2)
1000fdac:	10c00044 	addi	r3,r2,1
1000fdb0:	e0bff917 	ldw	r2,-28(fp)
1000fdb4:	10c00915 	stw	r3,36(r2)
1000fdb8:	00840074 	movhi	r2,4097
1000fdbc:	1095bb04 	addi	r2,r2,22252
1000fdc0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000fdc4:	e037883a 	mov	sp,fp
1000fdc8:	df000017 	ldw	fp,0(sp)
1000fdcc:	dec00104 	addi	sp,sp,4
1000fdd0:	f800283a 	ret

1000fdd4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000fdd4:	defffd04 	addi	sp,sp,-12
1000fdd8:	df000215 	stw	fp,8(sp)
1000fddc:	df000204 	addi	fp,sp,8
1000fde0:	e13ffe15 	stw	r4,-8(fp)
1000fde4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000fde8:	00000506 	br	1000fe00 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000fdec:	e0bfff17 	ldw	r2,-4(fp)
1000fdf0:	1090000c 	andi	r2,r2,16384
1000fdf4:	10000226 	beq	r2,zero,1000fe00 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000fdf8:	00bffd44 	movi	r2,-11
1000fdfc:	00000b06 	br	1000fe2c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000fe00:	e0bffe17 	ldw	r2,-8(fp)
1000fe04:	10c00d17 	ldw	r3,52(r2)
1000fe08:	e0bffe17 	ldw	r2,-8(fp)
1000fe0c:	10800c17 	ldw	r2,48(r2)
1000fe10:	18800526 	beq	r3,r2,1000fe28 <altera_avalon_jtag_uart_close+0x54>
1000fe14:	e0bffe17 	ldw	r2,-8(fp)
1000fe18:	10c00917 	ldw	r3,36(r2)
1000fe1c:	e0bffe17 	ldw	r2,-8(fp)
1000fe20:	10800117 	ldw	r2,4(r2)
1000fe24:	18bff136 	bltu	r3,r2,1000fdec <__alt_data_end+0xf800fdec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000fe28:	0005883a 	mov	r2,zero
}
1000fe2c:	e037883a 	mov	sp,fp
1000fe30:	df000017 	ldw	fp,0(sp)
1000fe34:	dec00104 	addi	sp,sp,4
1000fe38:	f800283a 	ret

1000fe3c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000fe3c:	defffa04 	addi	sp,sp,-24
1000fe40:	df000515 	stw	fp,20(sp)
1000fe44:	df000504 	addi	fp,sp,20
1000fe48:	e13ffd15 	stw	r4,-12(fp)
1000fe4c:	e17ffe15 	stw	r5,-8(fp)
1000fe50:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000fe54:	00bff9c4 	movi	r2,-25
1000fe58:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000fe5c:	e0bffe17 	ldw	r2,-8(fp)
1000fe60:	10da8060 	cmpeqi	r3,r2,27137
1000fe64:	1800031e 	bne	r3,zero,1000fe74 <altera_avalon_jtag_uart_ioctl+0x38>
1000fe68:	109a80a0 	cmpeqi	r2,r2,27138
1000fe6c:	1000191e 	bne	r2,zero,1000fed4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000fe70:	00002806 	br	1000ff14 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000fe74:	e0bffd17 	ldw	r2,-12(fp)
1000fe78:	10c00117 	ldw	r3,4(r2)
1000fe7c:	00a00034 	movhi	r2,32768
1000fe80:	10bfffc4 	addi	r2,r2,-1
1000fe84:	18801226 	beq	r3,r2,1000fed0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000fe88:	e0bfff17 	ldw	r2,-4(fp)
1000fe8c:	10800017 	ldw	r2,0(r2)
1000fe90:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000fe94:	e0bffc17 	ldw	r2,-16(fp)
1000fe98:	10800090 	cmplti	r2,r2,2
1000fe9c:	1000061e 	bne	r2,zero,1000feb8 <altera_avalon_jtag_uart_ioctl+0x7c>
1000fea0:	e0fffc17 	ldw	r3,-16(fp)
1000fea4:	00a00034 	movhi	r2,32768
1000fea8:	10bfffc4 	addi	r2,r2,-1
1000feac:	18800226 	beq	r3,r2,1000feb8 <altera_avalon_jtag_uart_ioctl+0x7c>
1000feb0:	e0bffc17 	ldw	r2,-16(fp)
1000feb4:	00000206 	br	1000fec0 <altera_avalon_jtag_uart_ioctl+0x84>
1000feb8:	00a00034 	movhi	r2,32768
1000febc:	10bfff84 	addi	r2,r2,-2
1000fec0:	e0fffd17 	ldw	r3,-12(fp)
1000fec4:	18800115 	stw	r2,4(r3)
      rc = 0;
1000fec8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000fecc:	00001106 	br	1000ff14 <altera_avalon_jtag_uart_ioctl+0xd8>
1000fed0:	00001006 	br	1000ff14 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000fed4:	e0bffd17 	ldw	r2,-12(fp)
1000fed8:	10c00117 	ldw	r3,4(r2)
1000fedc:	00a00034 	movhi	r2,32768
1000fee0:	10bfffc4 	addi	r2,r2,-1
1000fee4:	18800a26 	beq	r3,r2,1000ff10 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000fee8:	e0bffd17 	ldw	r2,-12(fp)
1000feec:	10c00917 	ldw	r3,36(r2)
1000fef0:	e0bffd17 	ldw	r2,-12(fp)
1000fef4:	10800117 	ldw	r2,4(r2)
1000fef8:	1885803a 	cmpltu	r2,r3,r2
1000fefc:	10c03fcc 	andi	r3,r2,255
1000ff00:	e0bfff17 	ldw	r2,-4(fp)
1000ff04:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000ff08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000ff0c:	00000006 	br	1000ff10 <altera_avalon_jtag_uart_ioctl+0xd4>
1000ff10:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000ff14:	e0bffb17 	ldw	r2,-20(fp)
}
1000ff18:	e037883a 	mov	sp,fp
1000ff1c:	df000017 	ldw	fp,0(sp)
1000ff20:	dec00104 	addi	sp,sp,4
1000ff24:	f800283a 	ret

1000ff28 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000ff28:	defff304 	addi	sp,sp,-52
1000ff2c:	dfc00c15 	stw	ra,48(sp)
1000ff30:	df000b15 	stw	fp,44(sp)
1000ff34:	df000b04 	addi	fp,sp,44
1000ff38:	e13ffc15 	stw	r4,-16(fp)
1000ff3c:	e17ffd15 	stw	r5,-12(fp)
1000ff40:	e1bffe15 	stw	r6,-8(fp)
1000ff44:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000ff48:	e0bffd17 	ldw	r2,-12(fp)
1000ff4c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000ff50:	00004906 	br	10010078 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000ff54:	e0bffc17 	ldw	r2,-16(fp)
1000ff58:	10800a17 	ldw	r2,40(r2)
1000ff5c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000ff60:	e0bffc17 	ldw	r2,-16(fp)
1000ff64:	10800b17 	ldw	r2,44(r2)
1000ff68:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000ff6c:	e0fff717 	ldw	r3,-36(fp)
1000ff70:	e0bff817 	ldw	r2,-32(fp)
1000ff74:	18800536 	bltu	r3,r2,1000ff8c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000ff78:	e0fff717 	ldw	r3,-36(fp)
1000ff7c:	e0bff817 	ldw	r2,-32(fp)
1000ff80:	1885c83a 	sub	r2,r3,r2
1000ff84:	e0bff615 	stw	r2,-40(fp)
1000ff88:	00000406 	br	1000ff9c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000ff8c:	00c20004 	movi	r3,2048
1000ff90:	e0bff817 	ldw	r2,-32(fp)
1000ff94:	1885c83a 	sub	r2,r3,r2
1000ff98:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000ff9c:	e0bff617 	ldw	r2,-40(fp)
1000ffa0:	1000011e 	bne	r2,zero,1000ffa8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000ffa4:	00001d06 	br	1001001c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000ffa8:	e0fffe17 	ldw	r3,-8(fp)
1000ffac:	e0bff617 	ldw	r2,-40(fp)
1000ffb0:	1880022e 	bgeu	r3,r2,1000ffbc <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000ffb4:	e0bffe17 	ldw	r2,-8(fp)
1000ffb8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000ffbc:	e0bff817 	ldw	r2,-32(fp)
1000ffc0:	10800e04 	addi	r2,r2,56
1000ffc4:	e0fffc17 	ldw	r3,-16(fp)
1000ffc8:	1885883a 	add	r2,r3,r2
1000ffcc:	e13ff517 	ldw	r4,-44(fp)
1000ffd0:	100b883a 	mov	r5,r2
1000ffd4:	e1bff617 	ldw	r6,-40(fp)
1000ffd8:	0007c800 	call	10007c80 <memcpy>
      ptr   += n;
1000ffdc:	e0fff517 	ldw	r3,-44(fp)
1000ffe0:	e0bff617 	ldw	r2,-40(fp)
1000ffe4:	1885883a 	add	r2,r3,r2
1000ffe8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000ffec:	e0fffe17 	ldw	r3,-8(fp)
1000fff0:	e0bff617 	ldw	r2,-40(fp)
1000fff4:	1885c83a 	sub	r2,r3,r2
1000fff8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fffc:	e0fff817 	ldw	r3,-32(fp)
10010000:	e0bff617 	ldw	r2,-40(fp)
10010004:	1885883a 	add	r2,r3,r2
10010008:	10c1ffcc 	andi	r3,r2,2047
1001000c:	e0bffc17 	ldw	r2,-16(fp)
10010010:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10010014:	e0bffe17 	ldw	r2,-8(fp)
10010018:	00bfce16 	blt	zero,r2,1000ff54 <__alt_data_end+0xf800ff54>

    /* If we read any data then return it */
    if (ptr != buffer)
1001001c:	e0fff517 	ldw	r3,-44(fp)
10010020:	e0bffd17 	ldw	r2,-12(fp)
10010024:	18800126 	beq	r3,r2,1001002c <altera_avalon_jtag_uart_read+0x104>
      break;
10010028:	00001506 	br	10010080 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1001002c:	e0bfff17 	ldw	r2,-4(fp)
10010030:	1090000c 	andi	r2,r2,16384
10010034:	10000126 	beq	r2,zero,1001003c <altera_avalon_jtag_uart_read+0x114>
      break;
10010038:	00001106 	br	10010080 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1001003c:	0001883a 	nop
10010040:	e0bffc17 	ldw	r2,-16(fp)
10010044:	10c00a17 	ldw	r3,40(r2)
10010048:	e0bff717 	ldw	r2,-36(fp)
1001004c:	1880051e 	bne	r3,r2,10010064 <altera_avalon_jtag_uart_read+0x13c>
10010050:	e0bffc17 	ldw	r2,-16(fp)
10010054:	10c00917 	ldw	r3,36(r2)
10010058:	e0bffc17 	ldw	r2,-16(fp)
1001005c:	10800117 	ldw	r2,4(r2)
10010060:	18bff736 	bltu	r3,r2,10010040 <__alt_data_end+0xf8010040>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010064:	e0bffc17 	ldw	r2,-16(fp)
10010068:	10c00a17 	ldw	r3,40(r2)
1001006c:	e0bff717 	ldw	r2,-36(fp)
10010070:	1880011e 	bne	r3,r2,10010078 <altera_avalon_jtag_uart_read+0x150>
      break;
10010074:	00000206 	br	10010080 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010078:	e0bffe17 	ldw	r2,-8(fp)
1001007c:	00bfb516 	blt	zero,r2,1000ff54 <__alt_data_end+0xf800ff54>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10010080:	e0fff517 	ldw	r3,-44(fp)
10010084:	e0bffd17 	ldw	r2,-12(fp)
10010088:	18801826 	beq	r3,r2,100100ec <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001008c:	0005303a 	rdctl	r2,status
10010090:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010094:	e0fffa17 	ldw	r3,-24(fp)
10010098:	00bfff84 	movi	r2,-2
1001009c:	1884703a 	and	r2,r3,r2
100100a0:	1001703a 	wrctl	status,r2
  
  return context;
100100a4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100100a8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100100ac:	e0bffc17 	ldw	r2,-16(fp)
100100b0:	10800817 	ldw	r2,32(r2)
100100b4:	10c00054 	ori	r3,r2,1
100100b8:	e0bffc17 	ldw	r2,-16(fp)
100100bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100100c0:	e0bffc17 	ldw	r2,-16(fp)
100100c4:	10800017 	ldw	r2,0(r2)
100100c8:	10800104 	addi	r2,r2,4
100100cc:	1007883a 	mov	r3,r2
100100d0:	e0bffc17 	ldw	r2,-16(fp)
100100d4:	10800817 	ldw	r2,32(r2)
100100d8:	18800035 	stwio	r2,0(r3)
100100dc:	e0bff917 	ldw	r2,-28(fp)
100100e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100100e4:	e0bffb17 	ldw	r2,-20(fp)
100100e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
100100ec:	e0fff517 	ldw	r3,-44(fp)
100100f0:	e0bffd17 	ldw	r2,-12(fp)
100100f4:	18800426 	beq	r3,r2,10010108 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
100100f8:	e0fff517 	ldw	r3,-44(fp)
100100fc:	e0bffd17 	ldw	r2,-12(fp)
10010100:	1885c83a 	sub	r2,r3,r2
10010104:	00000606 	br	10010120 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10010108:	e0bfff17 	ldw	r2,-4(fp)
1001010c:	1090000c 	andi	r2,r2,16384
10010110:	10000226 	beq	r2,zero,1001011c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10010114:	00bffd44 	movi	r2,-11
10010118:	00000106 	br	10010120 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1001011c:	00bffec4 	movi	r2,-5
}
10010120:	e037883a 	mov	sp,fp
10010124:	dfc00117 	ldw	ra,4(sp)
10010128:	df000017 	ldw	fp,0(sp)
1001012c:	dec00204 	addi	sp,sp,8
10010130:	f800283a 	ret

10010134 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010134:	defff304 	addi	sp,sp,-52
10010138:	dfc00c15 	stw	ra,48(sp)
1001013c:	df000b15 	stw	fp,44(sp)
10010140:	df000b04 	addi	fp,sp,44
10010144:	e13ffc15 	stw	r4,-16(fp)
10010148:	e17ffd15 	stw	r5,-12(fp)
1001014c:	e1bffe15 	stw	r6,-8(fp)
10010150:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10010154:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10010158:	e0bffd17 	ldw	r2,-12(fp)
1001015c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010160:	00003806 	br	10010244 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10010164:	e0bffc17 	ldw	r2,-16(fp)
10010168:	10800c17 	ldw	r2,48(r2)
1001016c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10010170:	e0bffc17 	ldw	r2,-16(fp)
10010174:	10800d17 	ldw	r2,52(r2)
10010178:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1001017c:	e0fff817 	ldw	r3,-32(fp)
10010180:	e0bff517 	ldw	r2,-44(fp)
10010184:	1880062e 	bgeu	r3,r2,100101a0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10010188:	e0fff517 	ldw	r3,-44(fp)
1001018c:	e0bff817 	ldw	r2,-32(fp)
10010190:	1885c83a 	sub	r2,r3,r2
10010194:	10bfffc4 	addi	r2,r2,-1
10010198:	e0bff615 	stw	r2,-40(fp)
1001019c:	00000b06 	br	100101cc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100101a0:	e0bff517 	ldw	r2,-44(fp)
100101a4:	10000526 	beq	r2,zero,100101bc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100101a8:	00c20004 	movi	r3,2048
100101ac:	e0bff817 	ldw	r2,-32(fp)
100101b0:	1885c83a 	sub	r2,r3,r2
100101b4:	e0bff615 	stw	r2,-40(fp)
100101b8:	00000406 	br	100101cc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100101bc:	00c1ffc4 	movi	r3,2047
100101c0:	e0bff817 	ldw	r2,-32(fp)
100101c4:	1885c83a 	sub	r2,r3,r2
100101c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100101cc:	e0bff617 	ldw	r2,-40(fp)
100101d0:	1000011e 	bne	r2,zero,100101d8 <altera_avalon_jtag_uart_write+0xa4>
        break;
100101d4:	00001d06 	br	1001024c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
100101d8:	e0fffe17 	ldw	r3,-8(fp)
100101dc:	e0bff617 	ldw	r2,-40(fp)
100101e0:	1880022e 	bgeu	r3,r2,100101ec <altera_avalon_jtag_uart_write+0xb8>
        n = count;
100101e4:	e0bffe17 	ldw	r2,-8(fp)
100101e8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100101ec:	e0bff817 	ldw	r2,-32(fp)
100101f0:	10820e04 	addi	r2,r2,2104
100101f4:	e0fffc17 	ldw	r3,-16(fp)
100101f8:	1885883a 	add	r2,r3,r2
100101fc:	1009883a 	mov	r4,r2
10010200:	e17ffd17 	ldw	r5,-12(fp)
10010204:	e1bff617 	ldw	r6,-40(fp)
10010208:	0007c800 	call	10007c80 <memcpy>
      ptr   += n;
1001020c:	e0fffd17 	ldw	r3,-12(fp)
10010210:	e0bff617 	ldw	r2,-40(fp)
10010214:	1885883a 	add	r2,r3,r2
10010218:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1001021c:	e0fffe17 	ldw	r3,-8(fp)
10010220:	e0bff617 	ldw	r2,-40(fp)
10010224:	1885c83a 	sub	r2,r3,r2
10010228:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001022c:	e0fff817 	ldw	r3,-32(fp)
10010230:	e0bff617 	ldw	r2,-40(fp)
10010234:	1885883a 	add	r2,r3,r2
10010238:	10c1ffcc 	andi	r3,r2,2047
1001023c:	e0bffc17 	ldw	r2,-16(fp)
10010240:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10010244:	e0bffe17 	ldw	r2,-8(fp)
10010248:	00bfc616 	blt	zero,r2,10010164 <__alt_data_end+0xf8010164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001024c:	0005303a 	rdctl	r2,status
10010250:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010254:	e0fffa17 	ldw	r3,-24(fp)
10010258:	00bfff84 	movi	r2,-2
1001025c:	1884703a 	and	r2,r3,r2
10010260:	1001703a 	wrctl	status,r2
  
  return context;
10010264:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10010268:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1001026c:	e0bffc17 	ldw	r2,-16(fp)
10010270:	10800817 	ldw	r2,32(r2)
10010274:	10c00094 	ori	r3,r2,2
10010278:	e0bffc17 	ldw	r2,-16(fp)
1001027c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010280:	e0bffc17 	ldw	r2,-16(fp)
10010284:	10800017 	ldw	r2,0(r2)
10010288:	10800104 	addi	r2,r2,4
1001028c:	1007883a 	mov	r3,r2
10010290:	e0bffc17 	ldw	r2,-16(fp)
10010294:	10800817 	ldw	r2,32(r2)
10010298:	18800035 	stwio	r2,0(r3)
1001029c:	e0bff917 	ldw	r2,-28(fp)
100102a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100102a4:	e0bffb17 	ldw	r2,-20(fp)
100102a8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100102ac:	e0bffe17 	ldw	r2,-8(fp)
100102b0:	0080120e 	bge	zero,r2,100102fc <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
100102b4:	e0bfff17 	ldw	r2,-4(fp)
100102b8:	1090000c 	andi	r2,r2,16384
100102bc:	10000126 	beq	r2,zero,100102c4 <altera_avalon_jtag_uart_write+0x190>
        break;
100102c0:	00001006 	br	10010304 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100102c4:	0001883a 	nop
100102c8:	e0bffc17 	ldw	r2,-16(fp)
100102cc:	10c00d17 	ldw	r3,52(r2)
100102d0:	e0bff517 	ldw	r2,-44(fp)
100102d4:	1880051e 	bne	r3,r2,100102ec <altera_avalon_jtag_uart_write+0x1b8>
100102d8:	e0bffc17 	ldw	r2,-16(fp)
100102dc:	10c00917 	ldw	r3,36(r2)
100102e0:	e0bffc17 	ldw	r2,-16(fp)
100102e4:	10800117 	ldw	r2,4(r2)
100102e8:	18bff736 	bltu	r3,r2,100102c8 <__alt_data_end+0xf80102c8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100102ec:	e0bffc17 	ldw	r2,-16(fp)
100102f0:	10800917 	ldw	r2,36(r2)
100102f4:	10000126 	beq	r2,zero,100102fc <altera_avalon_jtag_uart_write+0x1c8>
         break;
100102f8:	00000206 	br	10010304 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
100102fc:	e0bffe17 	ldw	r2,-8(fp)
10010300:	00bf9716 	blt	zero,r2,10010160 <__alt_data_end+0xf8010160>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010304:	e0fffd17 	ldw	r3,-12(fp)
10010308:	e0bff717 	ldw	r2,-36(fp)
1001030c:	18800426 	beq	r3,r2,10010320 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10010310:	e0fffd17 	ldw	r3,-12(fp)
10010314:	e0bff717 	ldw	r2,-36(fp)
10010318:	1885c83a 	sub	r2,r3,r2
1001031c:	00000606 	br	10010338 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10010320:	e0bfff17 	ldw	r2,-4(fp)
10010324:	1090000c 	andi	r2,r2,16384
10010328:	10000226 	beq	r2,zero,10010334 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
1001032c:	00bffd44 	movi	r2,-11
10010330:	00000106 	br	10010338 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10010334:	00bffec4 	movi	r2,-5
}
10010338:	e037883a 	mov	sp,fp
1001033c:	dfc00117 	ldw	ra,4(sp)
10010340:	df000017 	ldw	fp,0(sp)
10010344:	dec00204 	addi	sp,sp,8
10010348:	f800283a 	ret

1001034c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1001034c:	defff504 	addi	sp,sp,-44
10010350:	df000a15 	stw	fp,40(sp)
10010354:	df000a04 	addi	fp,sp,40
10010358:	e13ffc15 	stw	r4,-16(fp)
1001035c:	e17ffd15 	stw	r5,-12(fp)
10010360:	e1bffe15 	stw	r6,-8(fp)
10010364:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10010368:	e03ff615 	stw	zero,-40(fp)
1001036c:	00840074 	movhi	r2,4097
10010370:	1095bb04 	addi	r2,r2,22252
10010374:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10010378:	10003f26 	beq	r2,zero,10010478 <alt_alarm_start+0x12c>
  {
    if (alarm)
1001037c:	e0bffc17 	ldw	r2,-16(fp)
10010380:	10003b26 	beq	r2,zero,10010470 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10010384:	e0bffc17 	ldw	r2,-16(fp)
10010388:	e0fffe17 	ldw	r3,-8(fp)
1001038c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10010390:	e0bffc17 	ldw	r2,-16(fp)
10010394:	e0ffff17 	ldw	r3,-4(fp)
10010398:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001039c:	0005303a 	rdctl	r2,status
100103a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100103a4:	e0fff817 	ldw	r3,-32(fp)
100103a8:	00bfff84 	movi	r2,-2
100103ac:	1884703a 	and	r2,r3,r2
100103b0:	1001703a 	wrctl	status,r2
  
  return context;
100103b4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
100103b8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100103bc:	00840074 	movhi	r2,4097
100103c0:	1095bc04 	addi	r2,r2,22256
100103c4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
100103c8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100103cc:	e0fffd17 	ldw	r3,-12(fp)
100103d0:	e0bff617 	ldw	r2,-40(fp)
100103d4:	1885883a 	add	r2,r3,r2
100103d8:	10c00044 	addi	r3,r2,1
100103dc:	e0bffc17 	ldw	r2,-16(fp)
100103e0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100103e4:	e0bffc17 	ldw	r2,-16(fp)
100103e8:	10c00217 	ldw	r3,8(r2)
100103ec:	e0bff617 	ldw	r2,-40(fp)
100103f0:	1880042e 	bgeu	r3,r2,10010404 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
100103f4:	e0bffc17 	ldw	r2,-16(fp)
100103f8:	00c00044 	movi	r3,1
100103fc:	10c00405 	stb	r3,16(r2)
10010400:	00000206 	br	1001040c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10010404:	e0bffc17 	ldw	r2,-16(fp)
10010408:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1001040c:	e0fffc17 	ldw	r3,-16(fp)
10010410:	00840074 	movhi	r2,4097
10010414:	108ef204 	addi	r2,r2,15304
10010418:	e0bff915 	stw	r2,-28(fp)
1001041c:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010420:	e0bffa17 	ldw	r2,-24(fp)
10010424:	e0fff917 	ldw	r3,-28(fp)
10010428:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001042c:	e0bff917 	ldw	r2,-28(fp)
10010430:	10c00017 	ldw	r3,0(r2)
10010434:	e0bffa17 	ldw	r2,-24(fp)
10010438:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001043c:	e0bff917 	ldw	r2,-28(fp)
10010440:	10800017 	ldw	r2,0(r2)
10010444:	e0fffa17 	ldw	r3,-24(fp)
10010448:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001044c:	e0bff917 	ldw	r2,-28(fp)
10010450:	e0fffa17 	ldw	r3,-24(fp)
10010454:	10c00015 	stw	r3,0(r2)
10010458:	e0bff717 	ldw	r2,-36(fp)
1001045c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010460:	e0bffb17 	ldw	r2,-20(fp)
10010464:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10010468:	0005883a 	mov	r2,zero
1001046c:	00000306 	br	1001047c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
10010470:	00bffa84 	movi	r2,-22
10010474:	00000106 	br	1001047c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10010478:	00bfde84 	movi	r2,-134
  }
}
1001047c:	e037883a 	mov	sp,fp
10010480:	df000017 	ldw	fp,0(sp)
10010484:	dec00104 	addi	sp,sp,4
10010488:	f800283a 	ret

1001048c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1001048c:	defffa04 	addi	sp,sp,-24
10010490:	dfc00515 	stw	ra,20(sp)
10010494:	df000415 	stw	fp,16(sp)
10010498:	df000404 	addi	fp,sp,16
1001049c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
100104a0:	00800244 	movi	r2,9
100104a4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
100104a8:	e13ffd17 	ldw	r4,-12(fp)
100104ac:	014003f4 	movhi	r5,15
100104b0:	29509004 	addi	r5,r5,16960
100104b4:	000c6040 	call	1000c604 <__mulsi3>
100104b8:	0100bef4 	movhi	r4,763
100104bc:	213c2004 	addi	r4,r4,-3968
100104c0:	100b883a 	mov	r5,r2
100104c4:	000c5f40 	call	1000c5f4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
100104c8:	01200034 	movhi	r4,32768
100104cc:	213fffc4 	addi	r4,r4,-1
100104d0:	100b883a 	mov	r5,r2
100104d4:	000c5f40 	call	1000c5f4 <__udivsi3>
100104d8:	e13fff17 	ldw	r4,-4(fp)
100104dc:	100b883a 	mov	r5,r2
100104e0:	000c5f40 	call	1000c5f4 <__udivsi3>
100104e4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
100104e8:	e0bffe17 	ldw	r2,-8(fp)
100104ec:	10002a26 	beq	r2,zero,10010598 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
100104f0:	e03ffc15 	stw	zero,-16(fp)
100104f4:	00001706 	br	10010554 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
100104f8:	00a00034 	movhi	r2,32768
100104fc:	10bfffc4 	addi	r2,r2,-1
10010500:	10bfffc4 	addi	r2,r2,-1
10010504:	103ffe1e 	bne	r2,zero,10010500 <__alt_data_end+0xf8010500>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10010508:	e13ffd17 	ldw	r4,-12(fp)
1001050c:	014003f4 	movhi	r5,15
10010510:	29509004 	addi	r5,r5,16960
10010514:	000c6040 	call	1000c604 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10010518:	0100bef4 	movhi	r4,763
1001051c:	213c2004 	addi	r4,r4,-3968
10010520:	100b883a 	mov	r5,r2
10010524:	000c5f40 	call	1000c5f4 <__udivsi3>
10010528:	01200034 	movhi	r4,32768
1001052c:	213fffc4 	addi	r4,r4,-1
10010530:	100b883a 	mov	r5,r2
10010534:	000c5f40 	call	1000c5f4 <__udivsi3>
10010538:	1007883a 	mov	r3,r2
1001053c:	e0bfff17 	ldw	r2,-4(fp)
10010540:	10c5c83a 	sub	r2,r2,r3
10010544:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10010548:	e0bffc17 	ldw	r2,-16(fp)
1001054c:	10800044 	addi	r2,r2,1
10010550:	e0bffc15 	stw	r2,-16(fp)
10010554:	e0fffc17 	ldw	r3,-16(fp)
10010558:	e0bffe17 	ldw	r2,-8(fp)
1001055c:	18bfe616 	blt	r3,r2,100104f8 <__alt_data_end+0xf80104f8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010560:	e13ffd17 	ldw	r4,-12(fp)
10010564:	014003f4 	movhi	r5,15
10010568:	29509004 	addi	r5,r5,16960
1001056c:	000c6040 	call	1000c604 <__mulsi3>
10010570:	0100bef4 	movhi	r4,763
10010574:	213c2004 	addi	r4,r4,-3968
10010578:	100b883a 	mov	r5,r2
1001057c:	000c5f40 	call	1000c5f4 <__udivsi3>
10010580:	1009883a 	mov	r4,r2
10010584:	e17fff17 	ldw	r5,-4(fp)
10010588:	000c6040 	call	1000c604 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1001058c:	10bfffc4 	addi	r2,r2,-1
10010590:	103ffe1e 	bne	r2,zero,1001058c <__alt_data_end+0xf801058c>
10010594:	00000d06 	br	100105cc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010598:	e13ffd17 	ldw	r4,-12(fp)
1001059c:	014003f4 	movhi	r5,15
100105a0:	29509004 	addi	r5,r5,16960
100105a4:	000c6040 	call	1000c604 <__mulsi3>
100105a8:	0100bef4 	movhi	r4,763
100105ac:	213c2004 	addi	r4,r4,-3968
100105b0:	100b883a 	mov	r5,r2
100105b4:	000c5f40 	call	1000c5f4 <__udivsi3>
100105b8:	1009883a 	mov	r4,r2
100105bc:	e17fff17 	ldw	r5,-4(fp)
100105c0:	000c6040 	call	1000c604 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100105c4:	10bfffc4 	addi	r2,r2,-1
100105c8:	00bffe16 	blt	zero,r2,100105c4 <__alt_data_end+0xf80105c4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
100105cc:	0005883a 	mov	r2,zero
}
100105d0:	e037883a 	mov	sp,fp
100105d4:	dfc00117 	ldw	ra,4(sp)
100105d8:	df000017 	ldw	fp,0(sp)
100105dc:	dec00204 	addi	sp,sp,8
100105e0:	f800283a 	ret

100105e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100105e4:	deffff04 	addi	sp,sp,-4
100105e8:	df000015 	stw	fp,0(sp)
100105ec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100105f0:	e037883a 	mov	sp,fp
100105f4:	df000017 	ldw	fp,0(sp)
100105f8:	dec00104 	addi	sp,sp,4
100105fc:	f800283a 	ret

10010600 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010600:	defffe04 	addi	sp,sp,-8
10010604:	dfc00115 	stw	ra,4(sp)
10010608:	df000015 	stw	fp,0(sp)
1001060c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010610:	00840074 	movhi	r2,4097
10010614:	108eef04 	addi	r2,r2,15292
10010618:	10800017 	ldw	r2,0(r2)
1001061c:	10000526 	beq	r2,zero,10010634 <alt_get_errno+0x34>
10010620:	00840074 	movhi	r2,4097
10010624:	108eef04 	addi	r2,r2,15292
10010628:	10800017 	ldw	r2,0(r2)
1001062c:	103ee83a 	callr	r2
10010630:	00000206 	br	1001063c <alt_get_errno+0x3c>
10010634:	00840074 	movhi	r2,4097
10010638:	1095b604 	addi	r2,r2,22232
}
1001063c:	e037883a 	mov	sp,fp
10010640:	dfc00117 	ldw	ra,4(sp)
10010644:	df000017 	ldw	fp,0(sp)
10010648:	dec00204 	addi	sp,sp,8
1001064c:	f800283a 	ret

10010650 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10010650:	defffa04 	addi	sp,sp,-24
10010654:	dfc00515 	stw	ra,20(sp)
10010658:	df000415 	stw	fp,16(sp)
1001065c:	df000404 	addi	fp,sp,16
10010660:	e13ffe15 	stw	r4,-8(fp)
10010664:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10010668:	e0bffe17 	ldw	r2,-8(fp)
1001066c:	10000326 	beq	r2,zero,1001067c <alt_dev_llist_insert+0x2c>
10010670:	e0bffe17 	ldw	r2,-8(fp)
10010674:	10800217 	ldw	r2,8(r2)
10010678:	1000061e 	bne	r2,zero,10010694 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1001067c:	00106000 	call	10010600 <alt_get_errno>
10010680:	1007883a 	mov	r3,r2
10010684:	00800584 	movi	r2,22
10010688:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1001068c:	00bffa84 	movi	r2,-22
10010690:	00001306 	br	100106e0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10010694:	e0bffe17 	ldw	r2,-8(fp)
10010698:	e0ffff17 	ldw	r3,-4(fp)
1001069c:	e0fffc15 	stw	r3,-16(fp)
100106a0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100106a4:	e0bffd17 	ldw	r2,-12(fp)
100106a8:	e0fffc17 	ldw	r3,-16(fp)
100106ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100106b0:	e0bffc17 	ldw	r2,-16(fp)
100106b4:	10c00017 	ldw	r3,0(r2)
100106b8:	e0bffd17 	ldw	r2,-12(fp)
100106bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100106c0:	e0bffc17 	ldw	r2,-16(fp)
100106c4:	10800017 	ldw	r2,0(r2)
100106c8:	e0fffd17 	ldw	r3,-12(fp)
100106cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100106d0:	e0bffc17 	ldw	r2,-16(fp)
100106d4:	e0fffd17 	ldw	r3,-12(fp)
100106d8:	10c00015 	stw	r3,0(r2)

  return 0;  
100106dc:	0005883a 	mov	r2,zero
}
100106e0:	e037883a 	mov	sp,fp
100106e4:	dfc00117 	ldw	ra,4(sp)
100106e8:	df000017 	ldw	fp,0(sp)
100106ec:	dec00204 	addi	sp,sp,8
100106f0:	f800283a 	ret

100106f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100106f4:	defffd04 	addi	sp,sp,-12
100106f8:	dfc00215 	stw	ra,8(sp)
100106fc:	df000115 	stw	fp,4(sp)
10010700:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010704:	00840074 	movhi	r2,4097
10010708:	10859a04 	addi	r2,r2,5736
1001070c:	e0bfff15 	stw	r2,-4(fp)
10010710:	00000606 	br	1001072c <_do_ctors+0x38>
        (*ctor) (); 
10010714:	e0bfff17 	ldw	r2,-4(fp)
10010718:	10800017 	ldw	r2,0(r2)
1001071c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010720:	e0bfff17 	ldw	r2,-4(fp)
10010724:	10bfff04 	addi	r2,r2,-4
10010728:	e0bfff15 	stw	r2,-4(fp)
1001072c:	e0ffff17 	ldw	r3,-4(fp)
10010730:	00840074 	movhi	r2,4097
10010734:	10859b04 	addi	r2,r2,5740
10010738:	18bff62e 	bgeu	r3,r2,10010714 <__alt_data_end+0xf8010714>
        (*ctor) (); 
}
1001073c:	e037883a 	mov	sp,fp
10010740:	dfc00117 	ldw	ra,4(sp)
10010744:	df000017 	ldw	fp,0(sp)
10010748:	dec00204 	addi	sp,sp,8
1001074c:	f800283a 	ret

10010750 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10010750:	defffd04 	addi	sp,sp,-12
10010754:	dfc00215 	stw	ra,8(sp)
10010758:	df000115 	stw	fp,4(sp)
1001075c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010760:	00840074 	movhi	r2,4097
10010764:	10859a04 	addi	r2,r2,5736
10010768:	e0bfff15 	stw	r2,-4(fp)
1001076c:	00000606 	br	10010788 <_do_dtors+0x38>
        (*dtor) (); 
10010770:	e0bfff17 	ldw	r2,-4(fp)
10010774:	10800017 	ldw	r2,0(r2)
10010778:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1001077c:	e0bfff17 	ldw	r2,-4(fp)
10010780:	10bfff04 	addi	r2,r2,-4
10010784:	e0bfff15 	stw	r2,-4(fp)
10010788:	e0ffff17 	ldw	r3,-4(fp)
1001078c:	00840074 	movhi	r2,4097
10010790:	10859b04 	addi	r2,r2,5740
10010794:	18bff62e 	bgeu	r3,r2,10010770 <__alt_data_end+0xf8010770>
        (*dtor) (); 
}
10010798:	e037883a 	mov	sp,fp
1001079c:	dfc00117 	ldw	ra,4(sp)
100107a0:	df000017 	ldw	fp,0(sp)
100107a4:	dec00204 	addi	sp,sp,8
100107a8:	f800283a 	ret

100107ac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100107ac:	deffff04 	addi	sp,sp,-4
100107b0:	df000015 	stw	fp,0(sp)
100107b4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100107b8:	e037883a 	mov	sp,fp
100107bc:	df000017 	ldw	fp,0(sp)
100107c0:	dec00104 	addi	sp,sp,4
100107c4:	f800283a 	ret

100107c8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100107c8:	defff904 	addi	sp,sp,-28
100107cc:	dfc00615 	stw	ra,24(sp)
100107d0:	df000515 	stw	fp,20(sp)
100107d4:	df000504 	addi	fp,sp,20
100107d8:	e13ffc15 	stw	r4,-16(fp)
100107dc:	e17ffd15 	stw	r5,-12(fp)
100107e0:	e1bffe15 	stw	r6,-8(fp)
100107e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100107e8:	e0800217 	ldw	r2,8(fp)
100107ec:	d8800015 	stw	r2,0(sp)
100107f0:	e13ffc17 	ldw	r4,-16(fp)
100107f4:	e17ffd17 	ldw	r5,-12(fp)
100107f8:	e1bffe17 	ldw	r6,-8(fp)
100107fc:	e1ffff17 	ldw	r7,-4(fp)
10010800:	00109a80 	call	100109a8 <alt_iic_isr_register>
}  
10010804:	e037883a 	mov	sp,fp
10010808:	dfc00117 	ldw	ra,4(sp)
1001080c:	df000017 	ldw	fp,0(sp)
10010810:	dec00204 	addi	sp,sp,8
10010814:	f800283a 	ret

10010818 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10010818:	defff904 	addi	sp,sp,-28
1001081c:	df000615 	stw	fp,24(sp)
10010820:	df000604 	addi	fp,sp,24
10010824:	e13ffe15 	stw	r4,-8(fp)
10010828:	e17fff15 	stw	r5,-4(fp)
1001082c:	e0bfff17 	ldw	r2,-4(fp)
10010830:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010834:	0005303a 	rdctl	r2,status
10010838:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001083c:	e0fffb17 	ldw	r3,-20(fp)
10010840:	00bfff84 	movi	r2,-2
10010844:	1884703a 	and	r2,r3,r2
10010848:	1001703a 	wrctl	status,r2
  
  return context;
1001084c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010850:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10010854:	e0bffa17 	ldw	r2,-24(fp)
10010858:	00c00044 	movi	r3,1
1001085c:	1884983a 	sll	r2,r3,r2
10010860:	1007883a 	mov	r3,r2
10010864:	00840074 	movhi	r2,4097
10010868:	1095ba04 	addi	r2,r2,22248
1001086c:	10800017 	ldw	r2,0(r2)
10010870:	1886b03a 	or	r3,r3,r2
10010874:	00840074 	movhi	r2,4097
10010878:	1095ba04 	addi	r2,r2,22248
1001087c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010880:	00840074 	movhi	r2,4097
10010884:	1095ba04 	addi	r2,r2,22248
10010888:	10800017 	ldw	r2,0(r2)
1001088c:	100170fa 	wrctl	ienable,r2
10010890:	e0bffc17 	ldw	r2,-16(fp)
10010894:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010898:	e0bffd17 	ldw	r2,-12(fp)
1001089c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100108a0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
100108a4:	0001883a 	nop
}
100108a8:	e037883a 	mov	sp,fp
100108ac:	df000017 	ldw	fp,0(sp)
100108b0:	dec00104 	addi	sp,sp,4
100108b4:	f800283a 	ret

100108b8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100108b8:	defff904 	addi	sp,sp,-28
100108bc:	df000615 	stw	fp,24(sp)
100108c0:	df000604 	addi	fp,sp,24
100108c4:	e13ffe15 	stw	r4,-8(fp)
100108c8:	e17fff15 	stw	r5,-4(fp)
100108cc:	e0bfff17 	ldw	r2,-4(fp)
100108d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100108d4:	0005303a 	rdctl	r2,status
100108d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100108dc:	e0fffb17 	ldw	r3,-20(fp)
100108e0:	00bfff84 	movi	r2,-2
100108e4:	1884703a 	and	r2,r3,r2
100108e8:	1001703a 	wrctl	status,r2
  
  return context;
100108ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100108f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100108f4:	e0bffa17 	ldw	r2,-24(fp)
100108f8:	00c00044 	movi	r3,1
100108fc:	1884983a 	sll	r2,r3,r2
10010900:	0084303a 	nor	r2,zero,r2
10010904:	1007883a 	mov	r3,r2
10010908:	00840074 	movhi	r2,4097
1001090c:	1095ba04 	addi	r2,r2,22248
10010910:	10800017 	ldw	r2,0(r2)
10010914:	1886703a 	and	r3,r3,r2
10010918:	00840074 	movhi	r2,4097
1001091c:	1095ba04 	addi	r2,r2,22248
10010920:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010924:	00840074 	movhi	r2,4097
10010928:	1095ba04 	addi	r2,r2,22248
1001092c:	10800017 	ldw	r2,0(r2)
10010930:	100170fa 	wrctl	ienable,r2
10010934:	e0bffc17 	ldw	r2,-16(fp)
10010938:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001093c:	e0bffd17 	ldw	r2,-12(fp)
10010940:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010944:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10010948:	0001883a 	nop
}
1001094c:	e037883a 	mov	sp,fp
10010950:	df000017 	ldw	fp,0(sp)
10010954:	dec00104 	addi	sp,sp,4
10010958:	f800283a 	ret

1001095c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1001095c:	defffc04 	addi	sp,sp,-16
10010960:	df000315 	stw	fp,12(sp)
10010964:	df000304 	addi	fp,sp,12
10010968:	e13ffe15 	stw	r4,-8(fp)
1001096c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10010970:	000530fa 	rdctl	r2,ienable
10010974:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10010978:	e0bfff17 	ldw	r2,-4(fp)
1001097c:	00c00044 	movi	r3,1
10010980:	1884983a 	sll	r2,r3,r2
10010984:	1007883a 	mov	r3,r2
10010988:	e0bffd17 	ldw	r2,-12(fp)
1001098c:	1884703a 	and	r2,r3,r2
10010990:	1004c03a 	cmpne	r2,r2,zero
10010994:	10803fcc 	andi	r2,r2,255
}
10010998:	e037883a 	mov	sp,fp
1001099c:	df000017 	ldw	fp,0(sp)
100109a0:	dec00104 	addi	sp,sp,4
100109a4:	f800283a 	ret

100109a8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100109a8:	defff504 	addi	sp,sp,-44
100109ac:	dfc00a15 	stw	ra,40(sp)
100109b0:	df000915 	stw	fp,36(sp)
100109b4:	df000904 	addi	fp,sp,36
100109b8:	e13ffc15 	stw	r4,-16(fp)
100109bc:	e17ffd15 	stw	r5,-12(fp)
100109c0:	e1bffe15 	stw	r6,-8(fp)
100109c4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100109c8:	00bffa84 	movi	r2,-22
100109cc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100109d0:	e0bffd17 	ldw	r2,-12(fp)
100109d4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100109d8:	e0bff817 	ldw	r2,-32(fp)
100109dc:	10800808 	cmpgei	r2,r2,32
100109e0:	1000271e 	bne	r2,zero,10010a80 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100109e4:	0005303a 	rdctl	r2,status
100109e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100109ec:	e0fffa17 	ldw	r3,-24(fp)
100109f0:	00bfff84 	movi	r2,-2
100109f4:	1884703a 	and	r2,r3,r2
100109f8:	1001703a 	wrctl	status,r2
  
  return context;
100109fc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10010a00:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10010a04:	00840074 	movhi	r2,4097
10010a08:	1095cc04 	addi	r2,r2,22320
10010a0c:	e0fff817 	ldw	r3,-32(fp)
10010a10:	180690fa 	slli	r3,r3,3
10010a14:	10c5883a 	add	r2,r2,r3
10010a18:	e0fffe17 	ldw	r3,-8(fp)
10010a1c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10010a20:	00840074 	movhi	r2,4097
10010a24:	1095cc04 	addi	r2,r2,22320
10010a28:	e0fff817 	ldw	r3,-32(fp)
10010a2c:	180690fa 	slli	r3,r3,3
10010a30:	10c5883a 	add	r2,r2,r3
10010a34:	10800104 	addi	r2,r2,4
10010a38:	e0ffff17 	ldw	r3,-4(fp)
10010a3c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10010a40:	e0bffe17 	ldw	r2,-8(fp)
10010a44:	10000526 	beq	r2,zero,10010a5c <alt_iic_isr_register+0xb4>
10010a48:	e0bff817 	ldw	r2,-32(fp)
10010a4c:	e13ffc17 	ldw	r4,-16(fp)
10010a50:	100b883a 	mov	r5,r2
10010a54:	00108180 	call	10010818 <alt_ic_irq_enable>
10010a58:	00000406 	br	10010a6c <alt_iic_isr_register+0xc4>
10010a5c:	e0bff817 	ldw	r2,-32(fp)
10010a60:	e13ffc17 	ldw	r4,-16(fp)
10010a64:	100b883a 	mov	r5,r2
10010a68:	00108b80 	call	100108b8 <alt_ic_irq_disable>
10010a6c:	e0bff715 	stw	r2,-36(fp)
10010a70:	e0bff917 	ldw	r2,-28(fp)
10010a74:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010a78:	e0bffb17 	ldw	r2,-20(fp)
10010a7c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10010a80:	e0bff717 	ldw	r2,-36(fp)
}
10010a84:	e037883a 	mov	sp,fp
10010a88:	dfc00117 	ldw	ra,4(sp)
10010a8c:	df000017 	ldw	fp,0(sp)
10010a90:	dec00204 	addi	sp,sp,8
10010a94:	f800283a 	ret

10010a98 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10010a98:	defff804 	addi	sp,sp,-32
10010a9c:	dfc00715 	stw	ra,28(sp)
10010aa0:	df000615 	stw	fp,24(sp)
10010aa4:	dc000515 	stw	r16,20(sp)
10010aa8:	df000604 	addi	fp,sp,24
10010aac:	e13ffb15 	stw	r4,-20(fp)
10010ab0:	e17ffc15 	stw	r5,-16(fp)
10010ab4:	e1bffd15 	stw	r6,-12(fp)
10010ab8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10010abc:	e13ffc17 	ldw	r4,-16(fp)
10010ac0:	e17ffd17 	ldw	r5,-12(fp)
10010ac4:	e1bffe17 	ldw	r6,-8(fp)
10010ac8:	0010d340 	call	10010d34 <open>
10010acc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10010ad0:	e0bffa17 	ldw	r2,-24(fp)
10010ad4:	10002216 	blt	r2,zero,10010b60 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10010ad8:	04040074 	movhi	r16,4097
10010adc:	840a6c04 	addi	r16,r16,10672
10010ae0:	e0bffa17 	ldw	r2,-24(fp)
10010ae4:	1009883a 	mov	r4,r2
10010ae8:	01400304 	movi	r5,12
10010aec:	000c6040 	call	1000c604 <__mulsi3>
10010af0:	8085883a 	add	r2,r16,r2
10010af4:	10c00017 	ldw	r3,0(r2)
10010af8:	e0bffb17 	ldw	r2,-20(fp)
10010afc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10010b00:	04040074 	movhi	r16,4097
10010b04:	840a6c04 	addi	r16,r16,10672
10010b08:	e0bffa17 	ldw	r2,-24(fp)
10010b0c:	1009883a 	mov	r4,r2
10010b10:	01400304 	movi	r5,12
10010b14:	000c6040 	call	1000c604 <__mulsi3>
10010b18:	8085883a 	add	r2,r16,r2
10010b1c:	10800104 	addi	r2,r2,4
10010b20:	10c00017 	ldw	r3,0(r2)
10010b24:	e0bffb17 	ldw	r2,-20(fp)
10010b28:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10010b2c:	04040074 	movhi	r16,4097
10010b30:	840a6c04 	addi	r16,r16,10672
10010b34:	e0bffa17 	ldw	r2,-24(fp)
10010b38:	1009883a 	mov	r4,r2
10010b3c:	01400304 	movi	r5,12
10010b40:	000c6040 	call	1000c604 <__mulsi3>
10010b44:	8085883a 	add	r2,r16,r2
10010b48:	10800204 	addi	r2,r2,8
10010b4c:	10c00017 	ldw	r3,0(r2)
10010b50:	e0bffb17 	ldw	r2,-20(fp)
10010b54:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10010b58:	e13ffa17 	ldw	r4,-24(fp)
10010b5c:	000f59c0 	call	1000f59c <alt_release_fd>
  }
} 
10010b60:	e6ffff04 	addi	sp,fp,-4
10010b64:	dfc00217 	ldw	ra,8(sp)
10010b68:	df000117 	ldw	fp,4(sp)
10010b6c:	dc000017 	ldw	r16,0(sp)
10010b70:	dec00304 	addi	sp,sp,12
10010b74:	f800283a 	ret

10010b78 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10010b78:	defffb04 	addi	sp,sp,-20
10010b7c:	dfc00415 	stw	ra,16(sp)
10010b80:	df000315 	stw	fp,12(sp)
10010b84:	df000304 	addi	fp,sp,12
10010b88:	e13ffd15 	stw	r4,-12(fp)
10010b8c:	e17ffe15 	stw	r5,-8(fp)
10010b90:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10010b94:	01040074 	movhi	r4,4097
10010b98:	210a6f04 	addi	r4,r4,10684
10010b9c:	e17ffd17 	ldw	r5,-12(fp)
10010ba0:	01800044 	movi	r6,1
10010ba4:	01c07fc4 	movi	r7,511
10010ba8:	0010a980 	call	10010a98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10010bac:	01040074 	movhi	r4,4097
10010bb0:	210a6c04 	addi	r4,r4,10672
10010bb4:	e17ffe17 	ldw	r5,-8(fp)
10010bb8:	000d883a 	mov	r6,zero
10010bbc:	01c07fc4 	movi	r7,511
10010bc0:	0010a980 	call	10010a98 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10010bc4:	01040074 	movhi	r4,4097
10010bc8:	210a7204 	addi	r4,r4,10696
10010bcc:	e17fff17 	ldw	r5,-4(fp)
10010bd0:	01800044 	movi	r6,1
10010bd4:	01c07fc4 	movi	r7,511
10010bd8:	0010a980 	call	10010a98 <alt_open_fd>
}  
10010bdc:	e037883a 	mov	sp,fp
10010be0:	dfc00117 	ldw	ra,4(sp)
10010be4:	df000017 	ldw	fp,0(sp)
10010be8:	dec00204 	addi	sp,sp,8
10010bec:	f800283a 	ret

10010bf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010bf0:	defffe04 	addi	sp,sp,-8
10010bf4:	dfc00115 	stw	ra,4(sp)
10010bf8:	df000015 	stw	fp,0(sp)
10010bfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010c00:	00840074 	movhi	r2,4097
10010c04:	108eef04 	addi	r2,r2,15292
10010c08:	10800017 	ldw	r2,0(r2)
10010c0c:	10000526 	beq	r2,zero,10010c24 <alt_get_errno+0x34>
10010c10:	00840074 	movhi	r2,4097
10010c14:	108eef04 	addi	r2,r2,15292
10010c18:	10800017 	ldw	r2,0(r2)
10010c1c:	103ee83a 	callr	r2
10010c20:	00000206 	br	10010c2c <alt_get_errno+0x3c>
10010c24:	00840074 	movhi	r2,4097
10010c28:	1095b604 	addi	r2,r2,22232
}
10010c2c:	e037883a 	mov	sp,fp
10010c30:	dfc00117 	ldw	ra,4(sp)
10010c34:	df000017 	ldw	fp,0(sp)
10010c38:	dec00204 	addi	sp,sp,8
10010c3c:	f800283a 	ret

10010c40 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10010c40:	defffb04 	addi	sp,sp,-20
10010c44:	dfc00415 	stw	ra,16(sp)
10010c48:	df000315 	stw	fp,12(sp)
10010c4c:	dc000215 	stw	r16,8(sp)
10010c50:	df000304 	addi	fp,sp,12
10010c54:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10010c58:	e0bffe17 	ldw	r2,-8(fp)
10010c5c:	10800217 	ldw	r2,8(r2)
10010c60:	10d00034 	orhi	r3,r2,16384
10010c64:	e0bffe17 	ldw	r2,-8(fp)
10010c68:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010c6c:	e03ffd15 	stw	zero,-12(fp)
10010c70:	00002306 	br	10010d00 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010c74:	04040074 	movhi	r16,4097
10010c78:	840a6c04 	addi	r16,r16,10672
10010c7c:	e0bffd17 	ldw	r2,-12(fp)
10010c80:	1009883a 	mov	r4,r2
10010c84:	01400304 	movi	r5,12
10010c88:	000c6040 	call	1000c604 <__mulsi3>
10010c8c:	8085883a 	add	r2,r16,r2
10010c90:	10c00017 	ldw	r3,0(r2)
10010c94:	e0bffe17 	ldw	r2,-8(fp)
10010c98:	10800017 	ldw	r2,0(r2)
10010c9c:	1880151e 	bne	r3,r2,10010cf4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010ca0:	04040074 	movhi	r16,4097
10010ca4:	840a6c04 	addi	r16,r16,10672
10010ca8:	e0bffd17 	ldw	r2,-12(fp)
10010cac:	1009883a 	mov	r4,r2
10010cb0:	01400304 	movi	r5,12
10010cb4:	000c6040 	call	1000c604 <__mulsi3>
10010cb8:	8085883a 	add	r2,r16,r2
10010cbc:	10800204 	addi	r2,r2,8
10010cc0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010cc4:	10000b0e 	bge	r2,zero,10010cf4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10010cc8:	e13ffd17 	ldw	r4,-12(fp)
10010ccc:	01400304 	movi	r5,12
10010cd0:	000c6040 	call	1000c604 <__mulsi3>
10010cd4:	1007883a 	mov	r3,r2
10010cd8:	00840074 	movhi	r2,4097
10010cdc:	108a6c04 	addi	r2,r2,10672
10010ce0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010ce4:	e0bffe17 	ldw	r2,-8(fp)
10010ce8:	18800226 	beq	r3,r2,10010cf4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10010cec:	00bffcc4 	movi	r2,-13
10010cf0:	00000a06 	br	10010d1c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010cf4:	e0bffd17 	ldw	r2,-12(fp)
10010cf8:	10800044 	addi	r2,r2,1
10010cfc:	e0bffd15 	stw	r2,-12(fp)
10010d00:	00840074 	movhi	r2,4097
10010d04:	108eee04 	addi	r2,r2,15288
10010d08:	10800017 	ldw	r2,0(r2)
10010d0c:	1007883a 	mov	r3,r2
10010d10:	e0bffd17 	ldw	r2,-12(fp)
10010d14:	18bfd72e 	bgeu	r3,r2,10010c74 <__alt_data_end+0xf8010c74>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10010d18:	0005883a 	mov	r2,zero
}
10010d1c:	e6ffff04 	addi	sp,fp,-4
10010d20:	dfc00217 	ldw	ra,8(sp)
10010d24:	df000117 	ldw	fp,4(sp)
10010d28:	dc000017 	ldw	r16,0(sp)
10010d2c:	dec00304 	addi	sp,sp,12
10010d30:	f800283a 	ret

10010d34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10010d34:	defff604 	addi	sp,sp,-40
10010d38:	dfc00915 	stw	ra,36(sp)
10010d3c:	df000815 	stw	fp,32(sp)
10010d40:	df000804 	addi	fp,sp,32
10010d44:	e13ffd15 	stw	r4,-12(fp)
10010d48:	e17ffe15 	stw	r5,-8(fp)
10010d4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10010d50:	00bfffc4 	movi	r2,-1
10010d54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10010d58:	00bffb44 	movi	r2,-19
10010d5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10010d60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10010d64:	e13ffd17 	ldw	r4,-12(fp)
10010d68:	01440074 	movhi	r5,4097
10010d6c:	294eec04 	addi	r5,r5,15280
10010d70:	00110500 	call	10011050 <alt_find_dev>
10010d74:	e0bff815 	stw	r2,-32(fp)
10010d78:	e0bff817 	ldw	r2,-32(fp)
10010d7c:	1000051e 	bne	r2,zero,10010d94 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10010d80:	e13ffd17 	ldw	r4,-12(fp)
10010d84:	00110e00 	call	100110e0 <alt_find_file>
10010d88:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10010d8c:	00800044 	movi	r2,1
10010d90:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10010d94:	e0bff817 	ldw	r2,-32(fp)
10010d98:	10002b26 	beq	r2,zero,10010e48 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10010d9c:	e13ff817 	ldw	r4,-32(fp)
10010da0:	00111f40 	call	100111f4 <alt_get_fd>
10010da4:	e0bff915 	stw	r2,-28(fp)
10010da8:	e0bff917 	ldw	r2,-28(fp)
10010dac:	1000030e 	bge	r2,zero,10010dbc <open+0x88>
    {
      status = index;
10010db0:	e0bff917 	ldw	r2,-28(fp)
10010db4:	e0bffa15 	stw	r2,-24(fp)
10010db8:	00002506 	br	10010e50 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10010dbc:	e13ff917 	ldw	r4,-28(fp)
10010dc0:	01400304 	movi	r5,12
10010dc4:	000c6040 	call	1000c604 <__mulsi3>
10010dc8:	1007883a 	mov	r3,r2
10010dcc:	00840074 	movhi	r2,4097
10010dd0:	108a6c04 	addi	r2,r2,10672
10010dd4:	1885883a 	add	r2,r3,r2
10010dd8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10010ddc:	e0fffe17 	ldw	r3,-8(fp)
10010de0:	00900034 	movhi	r2,16384
10010de4:	10bfffc4 	addi	r2,r2,-1
10010de8:	1886703a 	and	r3,r3,r2
10010dec:	e0bffc17 	ldw	r2,-16(fp)
10010df0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10010df4:	e0bffb17 	ldw	r2,-20(fp)
10010df8:	1000051e 	bne	r2,zero,10010e10 <open+0xdc>
10010dfc:	e13ffc17 	ldw	r4,-16(fp)
10010e00:	0010c400 	call	10010c40 <alt_file_locked>
10010e04:	e0bffa15 	stw	r2,-24(fp)
10010e08:	e0bffa17 	ldw	r2,-24(fp)
10010e0c:	10001016 	blt	r2,zero,10010e50 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10010e10:	e0bff817 	ldw	r2,-32(fp)
10010e14:	10800317 	ldw	r2,12(r2)
10010e18:	10000826 	beq	r2,zero,10010e3c <open+0x108>
10010e1c:	e0bff817 	ldw	r2,-32(fp)
10010e20:	10800317 	ldw	r2,12(r2)
10010e24:	e13ffc17 	ldw	r4,-16(fp)
10010e28:	e17ffd17 	ldw	r5,-12(fp)
10010e2c:	e1bffe17 	ldw	r6,-8(fp)
10010e30:	e1ffff17 	ldw	r7,-4(fp)
10010e34:	103ee83a 	callr	r2
10010e38:	00000106 	br	10010e40 <open+0x10c>
10010e3c:	0005883a 	mov	r2,zero
10010e40:	e0bffa15 	stw	r2,-24(fp)
10010e44:	00000206 	br	10010e50 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10010e48:	00bffb44 	movi	r2,-19
10010e4c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10010e50:	e0bffa17 	ldw	r2,-24(fp)
10010e54:	1000090e 	bge	r2,zero,10010e7c <open+0x148>
  {
    alt_release_fd (index);  
10010e58:	e13ff917 	ldw	r4,-28(fp)
10010e5c:	000f59c0 	call	1000f59c <alt_release_fd>
    ALT_ERRNO = -status;
10010e60:	0010bf00 	call	10010bf0 <alt_get_errno>
10010e64:	1007883a 	mov	r3,r2
10010e68:	e0bffa17 	ldw	r2,-24(fp)
10010e6c:	0085c83a 	sub	r2,zero,r2
10010e70:	18800015 	stw	r2,0(r3)
    return -1;
10010e74:	00bfffc4 	movi	r2,-1
10010e78:	00000106 	br	10010e80 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10010e7c:	e0bff917 	ldw	r2,-28(fp)
}
10010e80:	e037883a 	mov	sp,fp
10010e84:	dfc00117 	ldw	ra,4(sp)
10010e88:	df000017 	ldw	fp,0(sp)
10010e8c:	dec00204 	addi	sp,sp,8
10010e90:	f800283a 	ret

10010e94 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10010e94:	defffa04 	addi	sp,sp,-24
10010e98:	df000515 	stw	fp,20(sp)
10010e9c:	df000504 	addi	fp,sp,20
10010ea0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010ea4:	0005303a 	rdctl	r2,status
10010ea8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010eac:	e0fffc17 	ldw	r3,-16(fp)
10010eb0:	00bfff84 	movi	r2,-2
10010eb4:	1884703a 	and	r2,r3,r2
10010eb8:	1001703a 	wrctl	status,r2
  
  return context;
10010ebc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10010ec0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10010ec4:	e0bfff17 	ldw	r2,-4(fp)
10010ec8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10010ecc:	e0bffd17 	ldw	r2,-12(fp)
10010ed0:	10800017 	ldw	r2,0(r2)
10010ed4:	e0fffd17 	ldw	r3,-12(fp)
10010ed8:	18c00117 	ldw	r3,4(r3)
10010edc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10010ee0:	e0bffd17 	ldw	r2,-12(fp)
10010ee4:	10800117 	ldw	r2,4(r2)
10010ee8:	e0fffd17 	ldw	r3,-12(fp)
10010eec:	18c00017 	ldw	r3,0(r3)
10010ef0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10010ef4:	e0bffd17 	ldw	r2,-12(fp)
10010ef8:	e0fffd17 	ldw	r3,-12(fp)
10010efc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10010f00:	e0bffd17 	ldw	r2,-12(fp)
10010f04:	e0fffd17 	ldw	r3,-12(fp)
10010f08:	10c00015 	stw	r3,0(r2)
10010f0c:	e0bffb17 	ldw	r2,-20(fp)
10010f10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010f14:	e0bffe17 	ldw	r2,-8(fp)
10010f18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10010f1c:	e037883a 	mov	sp,fp
10010f20:	df000017 	ldw	fp,0(sp)
10010f24:	dec00104 	addi	sp,sp,4
10010f28:	f800283a 	ret

10010f2c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10010f2c:	defffb04 	addi	sp,sp,-20
10010f30:	dfc00415 	stw	ra,16(sp)
10010f34:	df000315 	stw	fp,12(sp)
10010f38:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10010f3c:	d0a00e17 	ldw	r2,-32712(gp)
10010f40:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10010f44:	d0a6d817 	ldw	r2,-25760(gp)
10010f48:	10800044 	addi	r2,r2,1
10010f4c:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10010f50:	00002e06 	br	1001100c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10010f54:	e0bffd17 	ldw	r2,-12(fp)
10010f58:	10800017 	ldw	r2,0(r2)
10010f5c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10010f60:	e0bffd17 	ldw	r2,-12(fp)
10010f64:	10800403 	ldbu	r2,16(r2)
10010f68:	10803fcc 	andi	r2,r2,255
10010f6c:	10000426 	beq	r2,zero,10010f80 <alt_tick+0x54>
10010f70:	d0a6d817 	ldw	r2,-25760(gp)
10010f74:	1000021e 	bne	r2,zero,10010f80 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10010f78:	e0bffd17 	ldw	r2,-12(fp)
10010f7c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10010f80:	e0bffd17 	ldw	r2,-12(fp)
10010f84:	10800217 	ldw	r2,8(r2)
10010f88:	d0e6d817 	ldw	r3,-25760(gp)
10010f8c:	18801d36 	bltu	r3,r2,10011004 <alt_tick+0xd8>
10010f90:	e0bffd17 	ldw	r2,-12(fp)
10010f94:	10800403 	ldbu	r2,16(r2)
10010f98:	10803fcc 	andi	r2,r2,255
10010f9c:	1000191e 	bne	r2,zero,10011004 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10010fa0:	e0bffd17 	ldw	r2,-12(fp)
10010fa4:	10800317 	ldw	r2,12(r2)
10010fa8:	e0fffd17 	ldw	r3,-12(fp)
10010fac:	18c00517 	ldw	r3,20(r3)
10010fb0:	1809883a 	mov	r4,r3
10010fb4:	103ee83a 	callr	r2
10010fb8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10010fbc:	e0bfff17 	ldw	r2,-4(fp)
10010fc0:	1000031e 	bne	r2,zero,10010fd0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10010fc4:	e13ffd17 	ldw	r4,-12(fp)
10010fc8:	0010e940 	call	10010e94 <alt_alarm_stop>
10010fcc:	00000d06 	br	10011004 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10010fd0:	e0bffd17 	ldw	r2,-12(fp)
10010fd4:	10c00217 	ldw	r3,8(r2)
10010fd8:	e0bfff17 	ldw	r2,-4(fp)
10010fdc:	1887883a 	add	r3,r3,r2
10010fe0:	e0bffd17 	ldw	r2,-12(fp)
10010fe4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10010fe8:	e0bffd17 	ldw	r2,-12(fp)
10010fec:	10c00217 	ldw	r3,8(r2)
10010ff0:	d0a6d817 	ldw	r2,-25760(gp)
10010ff4:	1880032e 	bgeu	r3,r2,10011004 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10010ff8:	e0bffd17 	ldw	r2,-12(fp)
10010ffc:	00c00044 	movi	r3,1
10011000:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10011004:	e0bffe17 	ldw	r2,-8(fp)
10011008:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001100c:	e0fffd17 	ldw	r3,-12(fp)
10011010:	d0a00e04 	addi	r2,gp,-32712
10011014:	18bfcf1e 	bne	r3,r2,10010f54 <__alt_data_end+0xf8010f54>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10011018:	0001883a 	nop
}
1001101c:	e037883a 	mov	sp,fp
10011020:	dfc00117 	ldw	ra,4(sp)
10011024:	df000017 	ldw	fp,0(sp)
10011028:	dec00204 	addi	sp,sp,8
1001102c:	f800283a 	ret

10011030 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10011030:	deffff04 	addi	sp,sp,-4
10011034:	df000015 	stw	fp,0(sp)
10011038:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1001103c:	000170fa 	wrctl	ienable,zero
}
10011040:	e037883a 	mov	sp,fp
10011044:	df000017 	ldw	fp,0(sp)
10011048:	dec00104 	addi	sp,sp,4
1001104c:	f800283a 	ret

10011050 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10011050:	defffa04 	addi	sp,sp,-24
10011054:	dfc00515 	stw	ra,20(sp)
10011058:	df000415 	stw	fp,16(sp)
1001105c:	df000404 	addi	fp,sp,16
10011060:	e13ffe15 	stw	r4,-8(fp)
10011064:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011068:	e0bfff17 	ldw	r2,-4(fp)
1001106c:	10800017 	ldw	r2,0(r2)
10011070:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10011074:	e13ffe17 	ldw	r4,-8(fp)
10011078:	00024ec0 	call	100024ec <strlen>
1001107c:	10800044 	addi	r2,r2,1
10011080:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011084:	00000d06 	br	100110bc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10011088:	e0bffc17 	ldw	r2,-16(fp)
1001108c:	10c00217 	ldw	r3,8(r2)
10011090:	e0bffd17 	ldw	r2,-12(fp)
10011094:	1809883a 	mov	r4,r3
10011098:	e17ffe17 	ldw	r5,-8(fp)
1001109c:	100d883a 	mov	r6,r2
100110a0:	00113140 	call	10011314 <memcmp>
100110a4:	1000021e 	bne	r2,zero,100110b0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100110a8:	e0bffc17 	ldw	r2,-16(fp)
100110ac:	00000706 	br	100110cc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100110b0:	e0bffc17 	ldw	r2,-16(fp)
100110b4:	10800017 	ldw	r2,0(r2)
100110b8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100110bc:	e0fffc17 	ldw	r3,-16(fp)
100110c0:	e0bfff17 	ldw	r2,-4(fp)
100110c4:	18bff01e 	bne	r3,r2,10011088 <__alt_data_end+0xf8011088>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100110c8:	0005883a 	mov	r2,zero
}
100110cc:	e037883a 	mov	sp,fp
100110d0:	dfc00117 	ldw	ra,4(sp)
100110d4:	df000017 	ldw	fp,0(sp)
100110d8:	dec00204 	addi	sp,sp,8
100110dc:	f800283a 	ret

100110e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100110e0:	defffb04 	addi	sp,sp,-20
100110e4:	dfc00415 	stw	ra,16(sp)
100110e8:	df000315 	stw	fp,12(sp)
100110ec:	df000304 	addi	fp,sp,12
100110f0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100110f4:	00840074 	movhi	r2,4097
100110f8:	108eea04 	addi	r2,r2,15272
100110fc:	10800017 	ldw	r2,0(r2)
10011100:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10011104:	00003106 	br	100111cc <alt_find_file+0xec>
  {
    len = strlen(next->name);
10011108:	e0bffd17 	ldw	r2,-12(fp)
1001110c:	10800217 	ldw	r2,8(r2)
10011110:	1009883a 	mov	r4,r2
10011114:	00024ec0 	call	100024ec <strlen>
10011118:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1001111c:	e0bffd17 	ldw	r2,-12(fp)
10011120:	10c00217 	ldw	r3,8(r2)
10011124:	e0bffe17 	ldw	r2,-8(fp)
10011128:	10bfffc4 	addi	r2,r2,-1
1001112c:	1885883a 	add	r2,r3,r2
10011130:	10800003 	ldbu	r2,0(r2)
10011134:	10803fcc 	andi	r2,r2,255
10011138:	1080201c 	xori	r2,r2,128
1001113c:	10bfe004 	addi	r2,r2,-128
10011140:	10800bd8 	cmpnei	r2,r2,47
10011144:	1000031e 	bne	r2,zero,10011154 <alt_find_file+0x74>
    {
      len -= 1;
10011148:	e0bffe17 	ldw	r2,-8(fp)
1001114c:	10bfffc4 	addi	r2,r2,-1
10011150:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10011154:	e0bffe17 	ldw	r2,-8(fp)
10011158:	e0ffff17 	ldw	r3,-4(fp)
1001115c:	1885883a 	add	r2,r3,r2
10011160:	10800003 	ldbu	r2,0(r2)
10011164:	10803fcc 	andi	r2,r2,255
10011168:	1080201c 	xori	r2,r2,128
1001116c:	10bfe004 	addi	r2,r2,-128
10011170:	10800be0 	cmpeqi	r2,r2,47
10011174:	1000081e 	bne	r2,zero,10011198 <alt_find_file+0xb8>
10011178:	e0bffe17 	ldw	r2,-8(fp)
1001117c:	e0ffff17 	ldw	r3,-4(fp)
10011180:	1885883a 	add	r2,r3,r2
10011184:	10800003 	ldbu	r2,0(r2)
10011188:	10803fcc 	andi	r2,r2,255
1001118c:	1080201c 	xori	r2,r2,128
10011190:	10bfe004 	addi	r2,r2,-128
10011194:	10000a1e 	bne	r2,zero,100111c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10011198:	e0bffd17 	ldw	r2,-12(fp)
1001119c:	10c00217 	ldw	r3,8(r2)
100111a0:	e0bffe17 	ldw	r2,-8(fp)
100111a4:	1809883a 	mov	r4,r3
100111a8:	e17fff17 	ldw	r5,-4(fp)
100111ac:	100d883a 	mov	r6,r2
100111b0:	00113140 	call	10011314 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100111b4:	1000021e 	bne	r2,zero,100111c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100111b8:	e0bffd17 	ldw	r2,-12(fp)
100111bc:	00000806 	br	100111e0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
100111c0:	e0bffd17 	ldw	r2,-12(fp)
100111c4:	10800017 	ldw	r2,0(r2)
100111c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100111cc:	e0fffd17 	ldw	r3,-12(fp)
100111d0:	00840074 	movhi	r2,4097
100111d4:	108eea04 	addi	r2,r2,15272
100111d8:	18bfcb1e 	bne	r3,r2,10011108 <__alt_data_end+0xf8011108>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100111dc:	0005883a 	mov	r2,zero
}
100111e0:	e037883a 	mov	sp,fp
100111e4:	dfc00117 	ldw	ra,4(sp)
100111e8:	df000017 	ldw	fp,0(sp)
100111ec:	dec00204 	addi	sp,sp,8
100111f0:	f800283a 	ret

100111f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100111f4:	defffa04 	addi	sp,sp,-24
100111f8:	dfc00515 	stw	ra,20(sp)
100111fc:	df000415 	stw	fp,16(sp)
10011200:	dc000315 	stw	r16,12(sp)
10011204:	df000404 	addi	fp,sp,16
10011208:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1001120c:	00bffa04 	movi	r2,-24
10011210:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011214:	e03ffc15 	stw	zero,-16(fp)
10011218:	00002106 	br	100112a0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
1001121c:	04040074 	movhi	r16,4097
10011220:	840a6c04 	addi	r16,r16,10672
10011224:	e0bffc17 	ldw	r2,-16(fp)
10011228:	1009883a 	mov	r4,r2
1001122c:	01400304 	movi	r5,12
10011230:	000c6040 	call	1000c604 <__mulsi3>
10011234:	8085883a 	add	r2,r16,r2
10011238:	10800017 	ldw	r2,0(r2)
1001123c:	1000151e 	bne	r2,zero,10011294 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10011240:	04040074 	movhi	r16,4097
10011244:	840a6c04 	addi	r16,r16,10672
10011248:	e0bffc17 	ldw	r2,-16(fp)
1001124c:	1009883a 	mov	r4,r2
10011250:	01400304 	movi	r5,12
10011254:	000c6040 	call	1000c604 <__mulsi3>
10011258:	8085883a 	add	r2,r16,r2
1001125c:	e0fffe17 	ldw	r3,-8(fp)
10011260:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10011264:	00840074 	movhi	r2,4097
10011268:	108eee04 	addi	r2,r2,15288
1001126c:	10c00017 	ldw	r3,0(r2)
10011270:	e0bffc17 	ldw	r2,-16(fp)
10011274:	1880040e 	bge	r3,r2,10011288 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10011278:	00840074 	movhi	r2,4097
1001127c:	108eee04 	addi	r2,r2,15288
10011280:	e0fffc17 	ldw	r3,-16(fp)
10011284:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10011288:	e0bffc17 	ldw	r2,-16(fp)
1001128c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10011290:	00000606 	br	100112ac <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011294:	e0bffc17 	ldw	r2,-16(fp)
10011298:	10800044 	addi	r2,r2,1
1001129c:	e0bffc15 	stw	r2,-16(fp)
100112a0:	e0bffc17 	ldw	r2,-16(fp)
100112a4:	10800810 	cmplti	r2,r2,32
100112a8:	103fdc1e 	bne	r2,zero,1001121c <__alt_data_end+0xf801121c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
100112ac:	e0bffd17 	ldw	r2,-12(fp)
}
100112b0:	e6ffff04 	addi	sp,fp,-4
100112b4:	dfc00217 	ldw	ra,8(sp)
100112b8:	df000117 	ldw	fp,4(sp)
100112bc:	dc000017 	ldw	r16,0(sp)
100112c0:	dec00304 	addi	sp,sp,12
100112c4:	f800283a 	ret

100112c8 <atexit>:
100112c8:	200b883a 	mov	r5,r4
100112cc:	000d883a 	mov	r6,zero
100112d0:	0009883a 	mov	r4,zero
100112d4:	000f883a 	mov	r7,zero
100112d8:	00113901 	jmpi	10011390 <__register_exitproc>

100112dc <exit>:
100112dc:	defffe04 	addi	sp,sp,-8
100112e0:	000b883a 	mov	r5,zero
100112e4:	dc000015 	stw	r16,0(sp)
100112e8:	dfc00115 	stw	ra,4(sp)
100112ec:	2021883a 	mov	r16,r4
100112f0:	00114a40 	call	100114a4 <__call_exitprocs>
100112f4:	00840074 	movhi	r2,4097
100112f8:	108ee404 	addi	r2,r2,15248
100112fc:	11000017 	ldw	r4,0(r2)
10011300:	20800f17 	ldw	r2,60(r4)
10011304:	10000126 	beq	r2,zero,1001130c <exit+0x30>
10011308:	103ee83a 	callr	r2
1001130c:	8009883a 	mov	r4,r16
10011310:	00116380 	call	10011638 <_exit>

10011314 <memcmp>:
10011314:	01c000c4 	movi	r7,3
10011318:	3980192e 	bgeu	r7,r6,10011380 <memcmp+0x6c>
1001131c:	2144b03a 	or	r2,r4,r5
10011320:	11c4703a 	and	r2,r2,r7
10011324:	10000f26 	beq	r2,zero,10011364 <memcmp+0x50>
10011328:	20800003 	ldbu	r2,0(r4)
1001132c:	28c00003 	ldbu	r3,0(r5)
10011330:	10c0151e 	bne	r2,r3,10011388 <memcmp+0x74>
10011334:	31bfff84 	addi	r6,r6,-2
10011338:	01ffffc4 	movi	r7,-1
1001133c:	00000406 	br	10011350 <memcmp+0x3c>
10011340:	20800003 	ldbu	r2,0(r4)
10011344:	28c00003 	ldbu	r3,0(r5)
10011348:	31bfffc4 	addi	r6,r6,-1
1001134c:	10c00e1e 	bne	r2,r3,10011388 <memcmp+0x74>
10011350:	21000044 	addi	r4,r4,1
10011354:	29400044 	addi	r5,r5,1
10011358:	31fff91e 	bne	r6,r7,10011340 <__alt_data_end+0xf8011340>
1001135c:	0005883a 	mov	r2,zero
10011360:	f800283a 	ret
10011364:	20c00017 	ldw	r3,0(r4)
10011368:	28800017 	ldw	r2,0(r5)
1001136c:	1880041e 	bne	r3,r2,10011380 <memcmp+0x6c>
10011370:	31bfff04 	addi	r6,r6,-4
10011374:	21000104 	addi	r4,r4,4
10011378:	29400104 	addi	r5,r5,4
1001137c:	39bff936 	bltu	r7,r6,10011364 <__alt_data_end+0xf8011364>
10011380:	303fe91e 	bne	r6,zero,10011328 <__alt_data_end+0xf8011328>
10011384:	003ff506 	br	1001135c <__alt_data_end+0xf801135c>
10011388:	10c5c83a 	sub	r2,r2,r3
1001138c:	f800283a 	ret

10011390 <__register_exitproc>:
10011390:	00840074 	movhi	r2,4097
10011394:	defffa04 	addi	sp,sp,-24
10011398:	108ee404 	addi	r2,r2,15248
1001139c:	dc000315 	stw	r16,12(sp)
100113a0:	14000017 	ldw	r16,0(r2)
100113a4:	dc400415 	stw	r17,16(sp)
100113a8:	dfc00515 	stw	ra,20(sp)
100113ac:	80805217 	ldw	r2,328(r16)
100113b0:	2023883a 	mov	r17,r4
100113b4:	10003626 	beq	r2,zero,10011490 <__register_exitproc+0x100>
100113b8:	10c00117 	ldw	r3,4(r2)
100113bc:	010007c4 	movi	r4,31
100113c0:	20c00e16 	blt	r4,r3,100113fc <__register_exitproc+0x6c>
100113c4:	1a400044 	addi	r9,r3,1
100113c8:	8800211e 	bne	r17,zero,10011450 <__register_exitproc+0xc0>
100113cc:	18c00084 	addi	r3,r3,2
100113d0:	18c7883a 	add	r3,r3,r3
100113d4:	18c7883a 	add	r3,r3,r3
100113d8:	12400115 	stw	r9,4(r2)
100113dc:	10c7883a 	add	r3,r2,r3
100113e0:	19400015 	stw	r5,0(r3)
100113e4:	0005883a 	mov	r2,zero
100113e8:	dfc00517 	ldw	ra,20(sp)
100113ec:	dc400417 	ldw	r17,16(sp)
100113f0:	dc000317 	ldw	r16,12(sp)
100113f4:	dec00604 	addi	sp,sp,24
100113f8:	f800283a 	ret
100113fc:	00800034 	movhi	r2,0
10011400:	10800004 	addi	r2,r2,0
10011404:	10002526 	beq	r2,zero,1001149c <__register_exitproc+0x10c>
10011408:	01006404 	movi	r4,400
1001140c:	d9400015 	stw	r5,0(sp)
10011410:	d9800115 	stw	r6,4(sp)
10011414:	d9c00215 	stw	r7,8(sp)
10011418:	00000000 	call	10000000 <__reset>
1001141c:	d9400017 	ldw	r5,0(sp)
10011420:	d9800117 	ldw	r6,4(sp)
10011424:	d9c00217 	ldw	r7,8(sp)
10011428:	10001c26 	beq	r2,zero,1001149c <__register_exitproc+0x10c>
1001142c:	80c05217 	ldw	r3,328(r16)
10011430:	10000115 	stw	zero,4(r2)
10011434:	02400044 	movi	r9,1
10011438:	10c00015 	stw	r3,0(r2)
1001143c:	80805215 	stw	r2,328(r16)
10011440:	10006215 	stw	zero,392(r2)
10011444:	10006315 	stw	zero,396(r2)
10011448:	0007883a 	mov	r3,zero
1001144c:	883fdf26 	beq	r17,zero,100113cc <__alt_data_end+0xf80113cc>
10011450:	18d1883a 	add	r8,r3,r3
10011454:	4211883a 	add	r8,r8,r8
10011458:	1211883a 	add	r8,r2,r8
1001145c:	41802215 	stw	r6,136(r8)
10011460:	01000044 	movi	r4,1
10011464:	11806217 	ldw	r6,392(r2)
10011468:	20c8983a 	sll	r4,r4,r3
1001146c:	310cb03a 	or	r6,r6,r4
10011470:	11806215 	stw	r6,392(r2)
10011474:	41c04215 	stw	r7,264(r8)
10011478:	01800084 	movi	r6,2
1001147c:	89bfd31e 	bne	r17,r6,100113cc <__alt_data_end+0xf80113cc>
10011480:	11806317 	ldw	r6,396(r2)
10011484:	3108b03a 	or	r4,r6,r4
10011488:	11006315 	stw	r4,396(r2)
1001148c:	003fcf06 	br	100113cc <__alt_data_end+0xf80113cc>
10011490:	80805304 	addi	r2,r16,332
10011494:	80805215 	stw	r2,328(r16)
10011498:	003fc706 	br	100113b8 <__alt_data_end+0xf80113b8>
1001149c:	00bfffc4 	movi	r2,-1
100114a0:	003fd106 	br	100113e8 <__alt_data_end+0xf80113e8>

100114a4 <__call_exitprocs>:
100114a4:	00840074 	movhi	r2,4097
100114a8:	108ee404 	addi	r2,r2,15248
100114ac:	10800017 	ldw	r2,0(r2)
100114b0:	defff404 	addi	sp,sp,-48
100114b4:	dd800815 	stw	r22,32(sp)
100114b8:	d8800015 	stw	r2,0(sp)
100114bc:	10805204 	addi	r2,r2,328
100114c0:	dd000615 	stw	r20,24(sp)
100114c4:	dc800415 	stw	r18,16(sp)
100114c8:	dfc00b15 	stw	ra,44(sp)
100114cc:	df000a15 	stw	fp,40(sp)
100114d0:	ddc00915 	stw	r23,36(sp)
100114d4:	dd400715 	stw	r21,28(sp)
100114d8:	dcc00515 	stw	r19,20(sp)
100114dc:	dc400315 	stw	r17,12(sp)
100114e0:	dc000215 	stw	r16,8(sp)
100114e4:	2025883a 	mov	r18,r4
100114e8:	2829883a 	mov	r20,r5
100114ec:	d8800115 	stw	r2,4(sp)
100114f0:	05bfffc4 	movi	r22,-1
100114f4:	d8800017 	ldw	r2,0(sp)
100114f8:	14c05217 	ldw	r19,328(r2)
100114fc:	98001d26 	beq	r19,zero,10011574 <__call_exitprocs+0xd0>
10011500:	dd400117 	ldw	r21,4(sp)
10011504:	98800117 	ldw	r2,4(r19)
10011508:	173fffc4 	addi	fp,r2,-1
1001150c:	e0000d16 	blt	fp,zero,10011544 <__call_exitprocs+0xa0>
10011510:	14000044 	addi	r16,r2,1
10011514:	8421883a 	add	r16,r16,r16
10011518:	8421883a 	add	r16,r16,r16
1001151c:	84402004 	addi	r17,r16,128
10011520:	9c63883a 	add	r17,r19,r17
10011524:	9c21883a 	add	r16,r19,r16
10011528:	a0001e26 	beq	r20,zero,100115a4 <__call_exitprocs+0x100>
1001152c:	80804017 	ldw	r2,256(r16)
10011530:	15001c26 	beq	r2,r20,100115a4 <__call_exitprocs+0x100>
10011534:	e73fffc4 	addi	fp,fp,-1
10011538:	843fff04 	addi	r16,r16,-4
1001153c:	8c7fff04 	addi	r17,r17,-4
10011540:	e5bff91e 	bne	fp,r22,10011528 <__alt_data_end+0xf8011528>
10011544:	00800034 	movhi	r2,0
10011548:	10800004 	addi	r2,r2,0
1001154c:	10000926 	beq	r2,zero,10011574 <__call_exitprocs+0xd0>
10011550:	98800117 	ldw	r2,4(r19)
10011554:	1000311e 	bne	r2,zero,1001161c <__call_exitprocs+0x178>
10011558:	98800017 	ldw	r2,0(r19)
1001155c:	10003426 	beq	r2,zero,10011630 <__call_exitprocs+0x18c>
10011560:	9809883a 	mov	r4,r19
10011564:	a8800015 	stw	r2,0(r21)
10011568:	00000000 	call	10000000 <__reset>
1001156c:	acc00017 	ldw	r19,0(r21)
10011570:	983fe41e 	bne	r19,zero,10011504 <__alt_data_end+0xf8011504>
10011574:	dfc00b17 	ldw	ra,44(sp)
10011578:	df000a17 	ldw	fp,40(sp)
1001157c:	ddc00917 	ldw	r23,36(sp)
10011580:	dd800817 	ldw	r22,32(sp)
10011584:	dd400717 	ldw	r21,28(sp)
10011588:	dd000617 	ldw	r20,24(sp)
1001158c:	dcc00517 	ldw	r19,20(sp)
10011590:	dc800417 	ldw	r18,16(sp)
10011594:	dc400317 	ldw	r17,12(sp)
10011598:	dc000217 	ldw	r16,8(sp)
1001159c:	dec00c04 	addi	sp,sp,48
100115a0:	f800283a 	ret
100115a4:	98800117 	ldw	r2,4(r19)
100115a8:	80c00017 	ldw	r3,0(r16)
100115ac:	10bfffc4 	addi	r2,r2,-1
100115b0:	17001526 	beq	r2,fp,10011608 <__call_exitprocs+0x164>
100115b4:	80000015 	stw	zero,0(r16)
100115b8:	183fde26 	beq	r3,zero,10011534 <__alt_data_end+0xf8011534>
100115bc:	00800044 	movi	r2,1
100115c0:	1708983a 	sll	r4,r2,fp
100115c4:	98806217 	ldw	r2,392(r19)
100115c8:	9dc00117 	ldw	r23,4(r19)
100115cc:	2084703a 	and	r2,r4,r2
100115d0:	1000061e 	bne	r2,zero,100115ec <__call_exitprocs+0x148>
100115d4:	183ee83a 	callr	r3
100115d8:	98800117 	ldw	r2,4(r19)
100115dc:	15ffc51e 	bne	r2,r23,100114f4 <__alt_data_end+0xf80114f4>
100115e0:	a8800017 	ldw	r2,0(r21)
100115e4:	14ffd326 	beq	r2,r19,10011534 <__alt_data_end+0xf8011534>
100115e8:	003fc206 	br	100114f4 <__alt_data_end+0xf80114f4>
100115ec:	98806317 	ldw	r2,396(r19)
100115f0:	2084703a 	and	r2,r4,r2
100115f4:	1000061e 	bne	r2,zero,10011610 <__call_exitprocs+0x16c>
100115f8:	89400017 	ldw	r5,0(r17)
100115fc:	9009883a 	mov	r4,r18
10011600:	183ee83a 	callr	r3
10011604:	003ff406 	br	100115d8 <__alt_data_end+0xf80115d8>
10011608:	9f000115 	stw	fp,4(r19)
1001160c:	003fea06 	br	100115b8 <__alt_data_end+0xf80115b8>
10011610:	89000017 	ldw	r4,0(r17)
10011614:	183ee83a 	callr	r3
10011618:	003fef06 	br	100115d8 <__alt_data_end+0xf80115d8>
1001161c:	98800017 	ldw	r2,0(r19)
10011620:	982b883a 	mov	r21,r19
10011624:	1027883a 	mov	r19,r2
10011628:	983fb61e 	bne	r19,zero,10011504 <__alt_data_end+0xf8011504>
1001162c:	003fd106 	br	10011574 <__alt_data_end+0xf8011574>
10011630:	0005883a 	mov	r2,zero
10011634:	003ffa06 	br	10011620 <__alt_data_end+0xf8011620>

10011638 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10011638:	defffd04 	addi	sp,sp,-12
1001163c:	df000215 	stw	fp,8(sp)
10011640:	df000204 	addi	fp,sp,8
10011644:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10011648:	0001883a 	nop
1001164c:	e0bfff17 	ldw	r2,-4(fp)
10011650:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10011654:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10011658:	10000226 	beq	r2,zero,10011664 <_exit+0x2c>
    ALT_SIM_FAIL();
1001165c:	002af070 	cmpltui	zero,zero,43969
10011660:	00000106 	br	10011668 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10011664:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10011668:	003fff06 	br	10011668 <__alt_data_end+0xf8011668>
